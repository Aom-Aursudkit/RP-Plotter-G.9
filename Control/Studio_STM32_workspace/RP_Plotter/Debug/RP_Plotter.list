
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba90  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800bc68  0800bc68  0000cc68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c078  0800c078  0000e20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c078  0800c078  0000d078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c080  0800c080  0000e20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c080  0800c080  0000d080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c084  0800c084  0000d084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800c088  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000103c  20000210  0800c294  0000e210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000124c  0800c294  0000e24c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174ba  00000000  00000000  0000e23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be0  00000000  00000000  000256f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  000282d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e75  00000000  00000000  00029530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271d7  00000000  00000000  0002a3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f86  00000000  00000000  0005157c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffac7  00000000  00000000  00067502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166fc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005248  00000000  00000000  0016700c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0016c254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000210 	.word	0x20000210
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bc50 	.word	0x0800bc50

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000214 	.word	0x20000214
 8000214:	0800bc50 	.word	0x0800bc50

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_frsub>:
 8000ba4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba8:	e002      	b.n	8000bb0 <__addsf3>
 8000baa:	bf00      	nop

08000bac <__aeabi_fsub>:
 8000bac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb0 <__addsf3>:
 8000bb0:	0042      	lsls	r2, r0, #1
 8000bb2:	bf1f      	itttt	ne
 8000bb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb8:	ea92 0f03 	teqne	r2, r3
 8000bbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc4:	d06a      	beq.n	8000c9c <__addsf3+0xec>
 8000bc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bce:	bfc1      	itttt	gt
 8000bd0:	18d2      	addgt	r2, r2, r3
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	4048      	eorgt	r0, r1
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	2b19      	cmp	r3, #25
 8000bde:	bf88      	it	hi
 8000be0:	4770      	bxhi	lr
 8000be2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bee:	bf18      	it	ne
 8000bf0:	4240      	negne	r0, r0
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4249      	negne	r1, r1
 8000c02:	ea92 0f03 	teq	r2, r3
 8000c06:	d03f      	beq.n	8000c88 <__addsf3+0xd8>
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c10:	eb10 000c 	adds.w	r0, r0, ip
 8000c14:	f1c3 0320 	rsb	r3, r3, #32
 8000c18:	fa01 f103 	lsl.w	r1, r1, r3
 8000c1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__addsf3+0x78>
 8000c22:	4249      	negs	r1, r1
 8000c24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c2c:	d313      	bcc.n	8000c56 <__addsf3+0xa6>
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c32:	d306      	bcc.n	8000c42 <__addsf3+0x92>
 8000c34:	0840      	lsrs	r0, r0, #1
 8000c36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3a:	f102 0201 	add.w	r2, r2, #1
 8000c3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c40:	d251      	bcs.n	8000ce6 <__addsf3+0x136>
 8000c42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4a:	bf08      	it	eq
 8000c4c:	f020 0001 	biceq.w	r0, r0, #1
 8000c50:	ea40 0003 	orr.w	r0, r0, r3
 8000c54:	4770      	bx	lr
 8000c56:	0049      	lsls	r1, r1, #1
 8000c58:	eb40 0000 	adc.w	r0, r0, r0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c64:	d2ed      	bcs.n	8000c42 <__addsf3+0x92>
 8000c66:	fab0 fc80 	clz	ip, r0
 8000c6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c76:	bfaa      	itet	ge
 8000c78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c7c:	4252      	neglt	r2, r2
 8000c7e:	4318      	orrge	r0, r3
 8000c80:	bfbc      	itt	lt
 8000c82:	40d0      	lsrlt	r0, r2
 8000c84:	4318      	orrlt	r0, r3
 8000c86:	4770      	bx	lr
 8000c88:	f092 0f00 	teq	r2, #0
 8000c8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c90:	bf06      	itte	eq
 8000c92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c96:	3201      	addeq	r2, #1
 8000c98:	3b01      	subne	r3, #1
 8000c9a:	e7b5      	b.n	8000c08 <__addsf3+0x58>
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000caa:	d021      	beq.n	8000cf0 <__addsf3+0x140>
 8000cac:	ea92 0f03 	teq	r2, r3
 8000cb0:	d004      	beq.n	8000cbc <__addsf3+0x10c>
 8000cb2:	f092 0f00 	teq	r2, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	4608      	moveq	r0, r1
 8000cba:	4770      	bx	lr
 8000cbc:	ea90 0f01 	teq	r0, r1
 8000cc0:	bf1c      	itt	ne
 8000cc2:	2000      	movne	r0, #0
 8000cc4:	4770      	bxne	lr
 8000cc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cca:	d104      	bne.n	8000cd6 <__addsf3+0x126>
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cda:	bf3c      	itt	cc
 8000cdc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce0:	4770      	bxcc	lr
 8000ce2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cee:	4770      	bx	lr
 8000cf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf4:	bf16      	itet	ne
 8000cf6:	4608      	movne	r0, r1
 8000cf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cfc:	4601      	movne	r1, r0
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	bf06      	itte	eq
 8000d02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d06:	ea90 0f01 	teqeq	r0, r1
 8000d0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_ui2f>:
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e004      	b.n	8000d20 <__aeabi_i2f+0x8>
 8000d16:	bf00      	nop

08000d18 <__aeabi_i2f>:
 8000d18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d1c:	bf48      	it	mi
 8000d1e:	4240      	negmi	r0, r0
 8000d20:	ea5f 0c00 	movs.w	ip, r0
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	e01c      	b.n	8000d6e <__aeabi_l2f+0x2a>

08000d34 <__aeabi_ul2f>:
 8000d34:	ea50 0201 	orrs.w	r2, r0, r1
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e00a      	b.n	8000d58 <__aeabi_l2f+0x14>
 8000d42:	bf00      	nop

08000d44 <__aeabi_l2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_l2f+0x14>
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	ea5f 0c01 	movs.w	ip, r1
 8000d5c:	bf02      	ittt	eq
 8000d5e:	4684      	moveq	ip, r0
 8000d60:	4601      	moveq	r1, r0
 8000d62:	2000      	moveq	r0, #0
 8000d64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d68:	bf08      	it	eq
 8000d6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d72:	fabc f28c 	clz	r2, ip
 8000d76:	3a08      	subs	r2, #8
 8000d78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d7c:	db10      	blt.n	8000da0 <__aeabi_l2f+0x5c>
 8000d7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d90:	fa20 f202 	lsr.w	r2, r0, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f102 0220 	add.w	r2, r2, #32
 8000da4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db0:	fa21 f202 	lsr.w	r2, r1, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef *huart);

// function for interrupt
void modbus_1t5_Timeout() {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	2000022c 	.word	0x2000022c

0800112c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <modbus_3t5_Timeout+0x1c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2201      	movs	r2, #1
 800113a:	755a      	strb	r2, [r3, #21]

}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	2000022c 	.word	0x2000022c

0800114c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(huart) == HAL_UART_ERROR_RTO) {
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f008 fe73 	bl	8009e40 <HAL_UART_GetError>
 800115a:	4603      	mov	r3, r0
 800115c:	2b20      	cmp	r3, #32
 800115e:	d101      	bne.n	8001164 <modbus_ErrorTimeout+0x18>
		modbus_1t5_Timeout();
 8001160:	f7ff ffc4 	bl	80010ec <modbus_1t5_Timeout>

	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <Modbus_init+0xa0>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <Modbus_init+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <Modbus_init+0xa4>)
 800118a:	210e      	movs	r1, #14
 800118c:	4618      	mov	r0, r3
 800118e:	f006 fe71 	bl	8007e74 <HAL_TIM_RegisterCallback>
			(void*) modbus_3t5_Timeout);

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2110      	movs	r1, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f008 fdfb 	bl	8009d94 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f008 fe12 	bl	8009dcc <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <Modbus_init+0xa8>)
 80011ae:	2104      	movs	r1, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f008 f8b9 	bl	8009328 <HAL_UART_RegisterCallback>
			(void*) modbus_ErrorTimeout);
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
	HAL_UART_Receive_DMA(hModbus->huart,
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <Modbus_init+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d8      	ldr	r0, [r3, #12]
			&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <Modbus_init+0xa0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <Modbus_init+0xa0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
	HAL_UART_Receive_DMA(hModbus->huart,
 80011c8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011cc:	4413      	add	r3, r2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011d4:	4619      	mov	r1, r3
 80011d6:	f008 f9e1 	bl	800959c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE);

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10c      	bne.n	8001204 <Modbus_init+0x98>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Modbus_init+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f005 fbcb 	bl	800698c <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <Modbus_init+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f005 ff8c 	bl	800711c <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000022c 	.word	0x2000022c
 8001210:	0800112d 	.word	0x0800112d
 8001214:	0800114d 	.word	0x0800114d

08001218 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8001224:	23ff      	movs	r3, #255	@ 0xff
 8001226:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8001228:	23ff      	movs	r3, #255	@ 0xff
 800122a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800122c:	e013      	b.n	8001256 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	4053      	eors	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <CRC16+0x68>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4053      	eors	r3, r2
 800124a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <CRC16+0x6c>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001256:	883b      	ldrh	r3, [r7, #0]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	803a      	strh	r2, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e6      	bne.n	800122e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	b29b      	uxth	r3, r3
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000100 	.word	0x20000100
 8001284:	20000000 	.word	0x20000000

08001288 <ResetAllTargets>:

void ResetAllTargets(void) {
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 10; i++) {
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	e020      	b.n	80012d6 <ResetAllTargets+0x4e>
        SET_TARGET(i, 0, 0);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b04      	cmp	r3, #4
 8001298:	dc03      	bgt.n	80012a2 <ResetAllTargets+0x1a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3310      	adds	r3, #16
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	e002      	b.n	80012a8 <ResetAllTargets+0x20>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3313      	adds	r3, #19
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4a10      	ldr	r2, [pc, #64]	@ (80012ec <ResetAllTargets+0x64>)
 80012aa:	2100      	movs	r1, #0
 80012ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	dc04      	bgt.n	80012c0 <ResetAllTargets+0x38>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3310      	adds	r3, #16
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	3301      	adds	r3, #1
 80012be:	e003      	b.n	80012c8 <ResetAllTargets+0x40>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3313      	adds	r3, #19
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	3301      	adds	r3, #1
 80012c8:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <ResetAllTargets+0x64>)
 80012ca:	2100      	movs	r1, #0
 80012cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 10; i++) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3301      	adds	r3, #1
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b09      	cmp	r3, #9
 80012da:	dddb      	ble.n	8001294 <ResetAllTargets+0xc>
    }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20001080 	.word	0x20001080

080012f0 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
//	//-- value

	REG16(HEART_BEAT) = 22881;
 80012f6:	4bb8      	ldr	r3, [pc, #736]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 80012f8:	f645 1261 	movw	r2, #22881	@ 0x5961
 80012fc:	801a      	strh	r2, [r3, #0]
	REG16(REG_SERVO_LIMIT_SWITCH) = Pen_Status ? 2 : 1;
 80012fe:	4bb7      	ldr	r3, [pc, #732]	@ (80015dc <Modbus_Protocal_Worker+0x2ec>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <Modbus_Protocal_Worker+0x1a>
 8001306:	2202      	movs	r2, #2
 8001308:	e000      	b.n	800130c <Modbus_Protocal_Worker+0x1c>
 800130a:	2201      	movs	r2, #1
 800130c:	4bb2      	ldr	r3, [pc, #712]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 800130e:	80da      	strh	r2, [r3, #6]
	Pen_BaseSystem = REG16(REG_SERVO_CMD_DOWN) ? 1 : 0;
 8001310:	4bb1      	ldr	r3, [pc, #708]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 8001312:	895b      	ldrh	r3, [r3, #10]
 8001314:	2b00      	cmp	r3, #0
 8001316:	bf14      	ite	ne
 8001318:	2301      	movne	r3, #1
 800131a:	2300      	moveq	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	4baf      	ldr	r3, [pc, #700]	@ (80015e0 <Modbus_Protocal_Worker+0x2f0>)
 8001322:	701a      	strb	r2, [r3, #0]
	TargetR_BaseSystem = REG16(REG_TARGET_GOAL_R)   * 0.1f;
 8001324:	4bac      	ldr	r3, [pc, #688]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 8001326:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001332:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 80015e4 <Modbus_Protocal_Worker+0x2f4>
 8001336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133a:	4bab      	ldr	r3, [pc, #684]	@ (80015e8 <Modbus_Protocal_Worker+0x2f8>)
 800133c:	edc3 7a00 	vstr	s15, [r3]
	TargetP_BaseSystem = REG16(REG_TARGET_GOAL_THETA) * 0.1f;
 8001340:	4ba5      	ldr	r3, [pc, #660]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 8001342:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134e:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 80015e4 <Modbus_Protocal_Worker+0x2f4>
 8001352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001356:	4ba5      	ldr	r3, [pc, #660]	@ (80015ec <Modbus_Protocal_Worker+0x2fc>)
 8001358:	edc3 7a00 	vstr	s15, [r3]

	uint16_t base_status = REG16(REG_BASE_STATUS);
 800135c:	4b9e      	ldr	r3, [pc, #632]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 800135e:	885b      	ldrh	r3, [r3, #2]
 8001360:	80fb      	strh	r3, [r7, #6]
	REG16(REG_MOTION_STATUS) = base_status;
 8001362:	4a9d      	ldr	r2, [pc, #628]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	8413      	strh	r3, [r2, #32]

	static int currentSlot = 0;
	switch (base_status) {
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	2b08      	cmp	r3, #8
 800136c:	d01d      	beq.n	80013aa <Modbus_Protocal_Worker+0xba>
 800136e:	2b08      	cmp	r3, #8
 8001370:	dc55      	bgt.n	800141e <Modbus_Protocal_Worker+0x12e>
 8001372:	2b01      	cmp	r3, #1
 8001374:	d002      	beq.n	800137c <Modbus_Protocal_Worker+0x8c>
 8001376:	2b02      	cmp	r3, #2
 8001378:	d013      	beq.n	80013a2 <Modbus_Protocal_Worker+0xb2>
 800137a:	e050      	b.n	800141e <Modbus_Protocal_Worker+0x12e>
	    case 1:  // Home
	        State_BaseSystem = 3;
 800137c:	4b9c      	ldr	r3, [pc, #624]	@ (80015f0 <Modbus_Protocal_Worker+0x300>)
 800137e:	2203      	movs	r2, #3
 8001380:	701a      	strb	r2, [r3, #0]
	        // if either of the first two target registers is non-zero
	        if (REG16(REG_TARGET_BASE_ADDR) || REG16(REG_TARGET_BASE_ADDR + 1)) {
 8001382:	4b95      	ldr	r3, [pc, #596]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 8001384:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001388:	2b00      	cmp	r3, #0
 800138a:	d104      	bne.n	8001396 <Modbus_Protocal_Worker+0xa6>
 800138c:	4b92      	ldr	r3, [pc, #584]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 800138e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001392:	2b00      	cmp	r3, #0
 8001394:	d047      	beq.n	8001426 <Modbus_Protocal_Worker+0x136>
	            ResetAllTargets();
 8001396:	f7ff ff77 	bl	8001288 <ResetAllTargets>
	            currentSlot = 0;
 800139a:	4b96      	ldr	r3, [pc, #600]	@ (80015f4 <Modbus_Protocal_Worker+0x304>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
	        }
	        break;
 80013a0:	e041      	b.n	8001426 <Modbus_Protocal_Worker+0x136>

	    case 2:  // Run Jog Mode
	        State_BaseSystem = 1;
 80013a2:	4b93      	ldr	r3, [pc, #588]	@ (80015f0 <Modbus_Protocal_Worker+0x300>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
	        break;
 80013a8:	e040      	b.n	800142c <Modbus_Protocal_Worker+0x13c>

	    case 8:  // Go To Target
	        State_BaseSystem = 2;
 80013aa:	4b91      	ldr	r3, [pc, #580]	@ (80015f0 <Modbus_Protocal_Worker+0x300>)
 80013ac:	2202      	movs	r2, #2
 80013ae:	701a      	strb	r2, [r3, #0]
	        // enqueue the next target
	        SET_TARGET(currentSlot,
 80013b0:	4b90      	ldr	r3, [pc, #576]	@ (80015f4 <Modbus_Protocal_Worker+0x304>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	dc04      	bgt.n	80013c2 <Modbus_Protocal_Worker+0xd2>
 80013b8:	4b8e      	ldr	r3, [pc, #568]	@ (80015f4 <Modbus_Protocal_Worker+0x304>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3310      	adds	r3, #16
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	e003      	b.n	80013ca <Modbus_Protocal_Worker+0xda>
 80013c2:	4b8c      	ldr	r3, [pc, #560]	@ (80015f4 <Modbus_Protocal_Worker+0x304>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3313      	adds	r3, #19
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4a83      	ldr	r2, [pc, #524]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 80013cc:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 80013d0:	4a81      	ldr	r2, [pc, #516]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 80013d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80013d6:	4b87      	ldr	r3, [pc, #540]	@ (80015f4 <Modbus_Protocal_Worker+0x304>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b04      	cmp	r3, #4
 80013dc:	dc05      	bgt.n	80013ea <Modbus_Protocal_Worker+0xfa>
 80013de:	4b85      	ldr	r3, [pc, #532]	@ (80015f4 <Modbus_Protocal_Worker+0x304>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3310      	adds	r3, #16
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	3301      	adds	r3, #1
 80013e8:	e004      	b.n	80013f4 <Modbus_Protocal_Worker+0x104>
 80013ea:	4b82      	ldr	r3, [pc, #520]	@ (80015f4 <Modbus_Protocal_Worker+0x304>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3313      	adds	r3, #19
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	3301      	adds	r3, #1
 80013f4:	4a78      	ldr	r2, [pc, #480]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 80013f6:	f8b2 1082 	ldrh.w	r1, [r2, #130]	@ 0x82
 80013fa:	4a77      	ldr	r2, [pc, #476]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 80013fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	                   REG16(REG_TARGET_GOAL_R),
	                   REG16(REG_TARGET_GOAL_THETA));

	        // increment _and_ wrap+reset in one go
	        if (++currentSlot >= 10) {
 8001400:	4b7c      	ldr	r3, [pc, #496]	@ (80015f4 <Modbus_Protocal_Worker+0x304>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	4a7b      	ldr	r2, [pc, #492]	@ (80015f4 <Modbus_Protocal_Worker+0x304>)
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b7a      	ldr	r3, [pc, #488]	@ (80015f4 <Modbus_Protocal_Worker+0x304>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b09      	cmp	r3, #9
 8001410:	dd0b      	ble.n	800142a <Modbus_Protocal_Worker+0x13a>
	            currentSlot = 0;
 8001412:	4b78      	ldr	r3, [pc, #480]	@ (80015f4 <Modbus_Protocal_Worker+0x304>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
	            ResetAllTargets();
 8001418:	f7ff ff36 	bl	8001288 <ResetAllTargets>
	        }
	        break;
 800141c:	e005      	b.n	800142a <Modbus_Protocal_Worker+0x13a>

	    default: // Run Point Mode
	        State_BaseSystem = 0;
 800141e:	4b74      	ldr	r3, [pc, #464]	@ (80015f0 <Modbus_Protocal_Worker+0x300>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
	        break;
 8001424:	e002      	b.n	800142c <Modbus_Protocal_Worker+0x13c>
	        break;
 8001426:	bf00      	nop
 8001428:	e000      	b.n	800142c <Modbus_Protocal_Worker+0x13c>
	        break;
 800142a:	bf00      	nop
//		REG16(REG_SPEED_R) = 100;
//		REG16(REG_ACCELERATION_R) = 100;
//		REG16(REG_POSITION_R) = 100;
//		REG16(REG_SPEED_THETA) = 100;
//		REG16(REG_POSITION_THETA) = 100;
	REG16(REG_SPEED_R) = (int16_t) Prismatic_QEIdata.Velocity_mm * 10.0f;
 800142c:	4b72      	ldr	r3, [pc, #456]	@ (80015f8 <Modbus_Protocal_Worker+0x308>)
 800142e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001436:	ee17 3a90 	vmov	r3, s15
 800143a:	b21b      	sxth	r3, r3
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001444:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800144c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001450:	ee17 3a90 	vmov	r3, s15
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b60      	ldr	r3, [pc, #384]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 8001458:	84da      	strh	r2, [r3, #38]	@ 0x26
	REG16(REG_ACCELERATION_R) = (int16_t) Prismatic_QEIdata.Acceleration_mm
 800145a:	4b67      	ldr	r3, [pc, #412]	@ (80015f8 <Modbus_Protocal_Worker+0x308>)
 800145c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001464:	ee17 3a90 	vmov	r3, s15
 8001468:	b21b      	sxth	r3, r3
			* 10.0f;
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001472:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001476:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_ACCELERATION_R) = (int16_t) Prismatic_QEIdata.Acceleration_mm
 800147a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800147e:	ee17 3a90 	vmov	r3, s15
 8001482:	b29a      	uxth	r2, r3
 8001484:	4b54      	ldr	r3, [pc, #336]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 8001486:	855a      	strh	r2, [r3, #42]	@ 0x2a
	REG16(REG_POSITION_R) = (int16_t) Prismatic_QEIdata.mmPosition * 10.0f;
 8001488:	4b5b      	ldr	r3, [pc, #364]	@ (80015f8 <Modbus_Protocal_Worker+0x308>)
 800148a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800148e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001492:	ee17 3a90 	vmov	r3, s15
 8001496:	b21b      	sxth	r3, r3
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ac:	ee17 3a90 	vmov	r3, s15
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	4b49      	ldr	r3, [pc, #292]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 80014b4:	845a      	strh	r2, [r3, #34]	@ 0x22

	REG16(REG_SPEED_THETA) = (int16_t) Revolute_QEIdata.AngularVelocity_rad
 80014b6:	4b51      	ldr	r3, [pc, #324]	@ (80015fc <Modbus_Protocal_Worker+0x30c>)
 80014b8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80014bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c0:	ee17 3a90 	vmov	r3, s15
 80014c4:	b21b      	sxth	r3, r3
			* (180.0f / M_PI) * 10.0f;
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe fff8 	bl	80004bc <__aeabi_i2d>
 80014cc:	a340      	add	r3, pc, #256	@ (adr r3, 80015d0 <Modbus_Protocal_Worker+0x2e0>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f85d 	bl	8000590 <__aeabi_dmul>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b47      	ldr	r3, [pc, #284]	@ (8001600 <Modbus_Protocal_Worker+0x310>)
 80014e4:	f7ff f854 	bl	8000590 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
	REG16(REG_SPEED_THETA) = (int16_t) Revolute_QEIdata.AngularVelocity_rad
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f7ff fae8 	bl	8000ac4 <__aeabi_d2uiz>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4b37      	ldr	r3, [pc, #220]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 80014fa:	851a      	strh	r2, [r3, #40]	@ 0x28
	REG16(REG_ACCELERATION_THETA) =
			(int16_t) Revolute_QEIdata.AngularAcceleration_rad * (180.0f / M_PI)
 80014fc:	4b3f      	ldr	r3, [pc, #252]	@ (80015fc <Modbus_Protocal_Worker+0x30c>)
 80014fe:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001506:	ee17 3a90 	vmov	r3, s15
 800150a:	b21b      	sxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe ffd5 	bl	80004bc <__aeabi_i2d>
 8001512:	a32f      	add	r3, pc, #188	@ (adr r3, 80015d0 <Modbus_Protocal_Worker+0x2e0>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7ff f83a 	bl	8000590 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
					* 10.0f;
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b35      	ldr	r3, [pc, #212]	@ (8001600 <Modbus_Protocal_Worker+0x310>)
 800152a:	f7ff f831 	bl	8000590 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
	REG16(REG_ACCELERATION_THETA) =
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff fac5 	bl	8000ac4 <__aeabi_d2uiz>
 800153a:	4603      	mov	r3, r0
 800153c:	b29a      	uxth	r2, r3
 800153e:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 8001540:	859a      	strh	r2, [r3, #44]	@ 0x2c
	REG16(REG_POSITION_THETA) = (int16_t) Revolute_QEIdata.RadPosition
 8001542:	4b2e      	ldr	r3, [pc, #184]	@ (80015fc <Modbus_Protocal_Worker+0x30c>)
 8001544:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001548:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800154c:	ee17 3a90 	vmov	r3, s15
 8001550:	b21b      	sxth	r3, r3
			* (180.0f / M_PI) * 10.0f;
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe ffb2 	bl	80004bc <__aeabi_i2d>
 8001558:	a31d      	add	r3, pc, #116	@ (adr r3, 80015d0 <Modbus_Protocal_Worker+0x2e0>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7ff f817 	bl	8000590 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <Modbus_Protocal_Worker+0x310>)
 8001570:	f7ff f80e 	bl	8000590 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
	REG16(REG_POSITION_THETA) = (int16_t) Revolute_QEIdata.RadPosition
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff faa2 	bl	8000ac4 <__aeabi_d2uiz>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <Modbus_Protocal_Worker+0x2e8>)
 8001586:	849a      	strh	r2, [r3, #36]	@ 0x24

	//--Modbus
	switch (hModbus->Mstatus) {
 8001588:	4b1e      	ldr	r3, [pc, #120]	@ (8001604 <Modbus_Protocal_Worker+0x314>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	7ddb      	ldrb	r3, [r3, #23]
 800158e:	3b01      	subs	r3, #1
 8001590:	2b03      	cmp	r3, #3
 8001592:	d80b      	bhi.n	80015ac <Modbus_Protocal_Worker+0x2bc>
 8001594:	a201      	add	r2, pc, #4	@ (adr r2, 800159c <Modbus_Protocal_Worker+0x2ac>)
 8001596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159a:	bf00      	nop
 800159c:	080015b7 	.word	0x080015b7
 80015a0:	08001783 	.word	0x08001783
 80015a4:	0800167b 	.word	0x0800167b
 80015a8:	080016bf 	.word	0x080016bf
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80015ac:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <Modbus_Protocal_Worker+0x314>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2201      	movs	r2, #1
 80015b2:	75da      	strb	r2, [r3, #23]
		break;
 80015b4:	e0fd      	b.n	80017b2 <Modbus_Protocal_Worker+0x4c2>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 80015b6:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <Modbus_Protocal_Worker+0x314>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d022      	beq.n	8001608 <Modbus_Protocal_Worker+0x318>
			/*set state*/
			hModbus->Mstatus = Modbus_state_Emission;
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <Modbus_Protocal_Worker+0x314>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2202      	movs	r2, #2
 80015c8:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80015ca:	f000 f9e9 	bl	80019a0 <Modbus_Emission>
 80015ce:	e034      	b.n	800163a <Modbus_Protocal_Worker+0x34a>
 80015d0:	1a63c1f8 	.word	0x1a63c1f8
 80015d4:	404ca5dc 	.word	0x404ca5dc
 80015d8:	20001080 	.word	0x20001080
 80015dc:	20000b2b 	.word	0x20000b2b
 80015e0:	20000ba5 	.word	0x20000ba5
 80015e4:	3dcccccd 	.word	0x3dcccccd
 80015e8:	20000b9c 	.word	0x20000b9c
 80015ec:	20000ba0 	.word	0x20000ba0
 80015f0:	20000ba4 	.word	0x20000ba4
 80015f4:	20000230 	.word	0x20000230
 80015f8:	20000ab0 	.word	0x20000ab0
 80015fc:	20000a70 	.word	0x20000a70
 8001600:	40240000 	.word	0x40240000
 8001604:	2000022c 	.word	0x2000022c
		}

		// Received character
		else if (hModbus->huart->RxXferSize != hModbus->huart->RxXferCount) {
 8001608:	4b6c      	ldr	r3, [pc, #432]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001612:	4b6a      	ldr	r3, [pc, #424]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800161c:	b29b      	uxth	r3, r3
 800161e:	429a      	cmp	r2, r3
 8001620:	d00b      	beq.n	800163a <Modbus_Protocal_Worker+0x34a>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001622:	4b66      	ldr	r3, [pc, #408]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2200      	movs	r2, #0
 8001628:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800162a:	4b64      	ldr	r3, [pc, #400]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 8001632:	4b62      	ldr	r3, [pc, #392]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2203      	movs	r2, #3
 8001638:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 800163a:	4b60      	ldr	r3, [pc, #384]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001644:	2b20      	cmp	r3, #32
 8001646:	f040 80ad 	bne.w	80017a4 <Modbus_Protocal_Worker+0x4b4>
			hModbus->modbusUartStructure.RxTail = 0;
 800164a:	4b5c      	ldr	r3, [pc, #368]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2200      	movs	r2, #0
 8001650:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001654:	4b59      	ldr	r3, [pc, #356]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68d8      	ldr	r0, [r3, #12]
					&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800165a:	4b58      	ldr	r3, [pc, #352]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b57      	ldr	r3, [pc, #348]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001666:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800166a:	4413      	add	r3, r2
 800166c:	3302      	adds	r3, #2
 800166e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001672:	4619      	mov	r1, r3
 8001674:	f007 ff92 	bl	800959c <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE);

		}
		break;
 8001678:	e094      	b.n	80017a4 <Modbus_Protocal_Worker+0x4b4>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 800167a:	4b50      	ldr	r3, [pc, #320]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	7d1b      	ldrb	r3, [r3, #20]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 8091 	beq.w	80017a8 <Modbus_Protocal_Worker+0x4b8>
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001686:	4b4d      	ldr	r3, [pc, #308]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	22fe      	movs	r2, #254	@ 0xfe
 800168c:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 800168e:	4b4b      	ldr	r3, [pc, #300]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 8001698:	4b48      	ldr	r3, [pc, #288]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80016a8:	4b44      	ldr	r3, [pc, #272]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 80016ac:	1a8a      	subs	r2, r1, r2
 80016ae:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80016b0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80016b4:	4b41      	ldr	r3, [pc, #260]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2204      	movs	r2, #4
 80016ba:	75da      	strb	r2, [r3, #23]
		}
		break;
 80016bc:	e074      	b.n	80017a8 <Modbus_Protocal_Worker+0x4b8>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 80016be:	4b3f      	ldr	r3, [pc, #252]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80016c6:	f113 0f02 	cmn.w	r3, #2
 80016ca:	d150      	bne.n	800176e <Modbus_Protocal_Worker+0x47e>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80016cc:	4b3b      	ldr	r3, [pc, #236]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2200      	movs	r2, #0
 80016d2:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(
					hModbus->modbusUartStructure.MessageBufferRx,
 80016d4:	4b39      	ldr	r3, [pc, #228]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f203 2272 	addw	r2, r3, #626	@ 0x272
					hModbus->modbusUartStructure.RxTail - 2);
 80016dc:	4b37      	ldr	r3, [pc, #220]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			CalculateCRC.U16 = CRC16(
 80016e4:	3b02      	subs	r3, #2
 80016e6:	4619      	mov	r1, r3
 80016e8:	4610      	mov	r0, r2
 80016ea:	f7ff fd95 	bl	8001218 <CRC16>
 80016ee:	4603      	mov	r3, r0
 80016f0:	80bb      	strh	r3, [r7, #4]

			if (!(CalculateCRC.U8[0]
 80016f2:	793a      	ldrb	r2, [r7, #4]
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80016f4:	4b31      	ldr	r3, [pc, #196]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 80016f6:	6819      	ldr	r1, [r3, #0]
 80016f8:	4b30      	ldr	r3, [pc, #192]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
							- 2]
 8001700:	3b02      	subs	r3, #2
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001702:	440b      	add	r3, r1
 8001704:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d10c      	bne.n	8001726 <Modbus_Protocal_Worker+0x436>
					&& CalculateCRC.U8[1]
 800170c:	797a      	ldrb	r2, [r7, #5]
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800170e:	4b2b      	ldr	r3, [pc, #172]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001710:	6819      	ldr	r1, [r3, #0]
 8001712:	4b2a      	ldr	r3, [pc, #168]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
									- 1])) {
 800171a:	3b01      	subs	r3, #1
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800171c:	440b      	add	r3, r1
 800171e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d004      	beq.n	8001730 <Modbus_Protocal_Worker+0x440>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001726:	4b25      	ldr	r3, [pc, #148]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	22ff      	movs	r2, #255	@ 0xff
 800172c:	759a      	strb	r2, [r3, #22]
				break;
 800172e:	e040      	b.n	80017b2 <Modbus_Protocal_Worker+0x4c2>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 8001730:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
					!= hModbus->slaveAddress)
 8001738:	4b20      	ldr	r3, [pc, #128]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	781b      	ldrb	r3, [r3, #0]
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d113      	bne.n	800176a <Modbus_Protocal_Worker+0x47a>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001742:	4b1e      	ldr	r3, [pc, #120]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx + 1,
 800174a:	4b1c      	ldr	r3, [pc, #112]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001752:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail - 3);
 8001754:	4b19      	ldr	r3, [pc, #100]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800175c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800175e:	461a      	mov	r2, r3
 8001760:	f009 fcf4 	bl	800b14c <memcpy>

			//execute command
			Modbus_frame_response();
 8001764:	f000 f904 	bl	8001970 <Modbus_frame_response>
 8001768:	e001      	b.n	800176e <Modbus_Protocal_Worker+0x47e>
				break;
 800176a:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 800176c:	e021      	b.n	80017b2 <Modbus_Protocal_Worker+0x4c2>
		if (hModbus->Flag_T35TimeOut) {
 800176e:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	7d5b      	ldrb	r3, [r3, #21]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d019      	beq.n	80017ac <Modbus_Protocal_Worker+0x4bc>
			hModbus->Mstatus = Modbus_state_Idle;
 8001778:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	75da      	strb	r2, [r3, #23]
		break;
 8001780:	e014      	b.n	80017ac <Modbus_Protocal_Worker+0x4bc>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001782:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800178c:	2b20      	cmp	r3, #32
 800178e:	d10f      	bne.n	80017b0 <Modbus_Protocal_Worker+0x4c0>
			hModbus->TxCount = 0;
 8001790:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800179a:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <Modbus_Protocal_Worker+0x4cc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	75da      	strb	r2, [r3, #23]
		break;
 80017a2:	e005      	b.n	80017b0 <Modbus_Protocal_Worker+0x4c0>
		break;
 80017a4:	bf00      	nop
 80017a6:	e004      	b.n	80017b2 <Modbus_Protocal_Worker+0x4c2>
		break;
 80017a8:	bf00      	nop
 80017aa:	e002      	b.n	80017b2 <Modbus_Protocal_Worker+0x4c2>
		break;
 80017ac:	bf00      	nop
 80017ae:	e000      	b.n	80017b2 <Modbus_Protocal_Worker+0x4c2>
		break;
 80017b0:	bf00      	nop
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2000022c 	.word	0x2000022c

080017c0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 80017c6:	4b1d      	ldr	r3, [pc, #116]	@ (800183c <modbusWrite1Register+0x7c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	7e5b      	ldrb	r3, [r3, #25]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4a1a      	ldr	r2, [pc, #104]	@ (800183c <modbusWrite1Register+0x7c>)
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	7e92      	ldrb	r2, [r2, #26]
 80017d6:	4413      	add	r3, r2
 80017d8:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 80017da:	88fa      	ldrh	r2, [r7, #6]
 80017dc:	4b17      	ldr	r3, [pc, #92]	@ (800183c <modbusWrite1Register+0x7c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d903      	bls.n	80017ee <modbusWrite1Register+0x2e>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80017e6:	2002      	movs	r0, #2
 80017e8:	f000 f8a0 	bl	800192c <ModbusErrorReply>
		return;
 80017ec:	e023      	b.n	8001836 <modbusWrite1Register+0x76>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80017ee:	4b13      	ldr	r3, [pc, #76]	@ (800183c <modbusWrite1Register+0x7c>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <modbusWrite1Register+0x7c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	440b      	add	r3, r1
 80017fe:	7ed2      	ldrb	r2, [r2, #27]
 8001800:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001802:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <modbusWrite1Register+0x7c>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <modbusWrite1Register+0x7c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	440b      	add	r3, r1
 8001812:	7f12      	ldrb	r2, [r2, #28]
 8001814:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <modbusWrite1Register+0x7c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 800181e:	4b07      	ldr	r3, [pc, #28]	@ (800183c <modbusWrite1Register+0x7c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3318      	adds	r3, #24
 8001824:	2208      	movs	r2, #8
 8001826:	4619      	mov	r1, r3
 8001828:	f009 fc90 	bl	800b14c <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 800182c:	4b03      	ldr	r3, [pc, #12]	@ (800183c <modbusWrite1Register+0x7c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2205      	movs	r2, #5
 8001832:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2000022c 	.word	0x2000022c

08001840 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 8001846:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <modbusRead1Register+0xe8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	7edb      	ldrb	r3, [r3, #27]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	b29b      	uxth	r3, r3
			+ (hModbus->Rxframe[4]));
 8001850:	4a35      	ldr	r2, [pc, #212]	@ (8001928 <modbusRead1Register+0xe8>)
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	7f12      	ldrb	r2, [r2, #28]
	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 8001856:	4413      	add	r3, r2
 8001858:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 800185a:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <modbusRead1Register+0xe8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	7e5b      	ldrb	r3, [r3, #25]
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	b29b      	uxth	r3, r3
 8001864:	4a30      	ldr	r2, [pc, #192]	@ (8001928 <modbusRead1Register+0xe8>)
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	7e92      	ldrb	r2, [r2, #26]
 800186a:	4413      	add	r3, r2
 800186c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <modbusRead1Register+0x3a>
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	2b7d      	cmp	r3, #125	@ 0x7d
 8001878:	d903      	bls.n	8001882 <modbusRead1Register+0x42>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800187a:	2003      	movs	r0, #3
 800187c:	f000 f856 	bl	800192c <ModbusErrorReply>
		return;
 8001880:	e04e      	b.n	8001920 <modbusRead1Register+0xe0>
	}

	if (startAddress > hModbus->RegisterSize
 8001882:	88ba      	ldrh	r2, [r7, #4]
 8001884:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <modbusRead1Register+0xe8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	429a      	cmp	r2, r3
 800188c:	d808      	bhi.n	80018a0 <modbusRead1Register+0x60>
			|| (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 800188e:	88ba      	ldrh	r2, [r7, #4]
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	4413      	add	r3, r2
 8001894:	461a      	mov	r2, r3
 8001896:	4b24      	ldr	r3, [pc, #144]	@ (8001928 <modbusRead1Register+0xe8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	429a      	cmp	r2, r3
 800189e:	d903      	bls.n	80018a8 <modbusRead1Register+0x68>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80018a0:	2002      	movs	r0, #2
 80018a2:	f000 f843 	bl	800192c <ModbusErrorReply>
		return;
 80018a6:	e03b      	b.n	8001920 <modbusRead1Register+0xe0>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80018a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <modbusRead1Register+0xe8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2203      	movs	r2, #3
 80018ae:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001928 <modbusRead1Register+0xe8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0052      	lsls	r2, r2, #1
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 80018c2:	2400      	movs	r4, #0
 80018c4:	e020      	b.n	8001908 <modbusRead1Register+0xc8>
		hModbus->Txframe[2 * i + 2] =
				hModbus->RegisterAddress[startAddress + i].U8[1];
 80018c6:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <modbusRead1Register+0xe8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	88bb      	ldrh	r3, [r7, #4]
 80018ce:	4423      	add	r3, r4
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 2] =
 80018d4:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <modbusRead1Register+0xe8>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	1c63      	adds	r3, r4, #1
 80018da:	005b      	lsls	r3, r3, #1
				hModbus->RegisterAddress[startAddress + i].U8[1];
 80018dc:	7849      	ldrb	r1, [r1, #1]
		hModbus->Txframe[2 * i + 2] =
 80018de:	4413      	add	r3, r2
 80018e0:	460a      	mov	r2, r1
 80018e2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2 * i + 3] =
				hModbus->RegisterAddress[startAddress + i].U8[0];
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <modbusRead1Register+0xe8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	88bb      	ldrh	r3, [r7, #4]
 80018ee:	4423      	add	r3, r4
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 3] =
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <modbusRead1Register+0xe8>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	0063      	lsls	r3, r4, #1
 80018fa:	3303      	adds	r3, #3
				hModbus->RegisterAddress[startAddress + i].U8[0];
 80018fc:	7809      	ldrb	r1, [r1, #0]
		hModbus->Txframe[2 * i + 3] =
 80018fe:	4413      	add	r3, r2
 8001900:	460a      	mov	r2, r1
 8001902:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for (i = 0; i < numberOfDataToRead; i++) {
 8001906:	3401      	adds	r4, #1
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	429c      	cmp	r4, r3
 800190c:	dbdb      	blt.n	80018c6 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	3301      	adds	r3, #1
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <modbusRead1Register+0xe8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	0052      	lsls	r2, r2, #1
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}
 8001926:	bf00      	nop
 8001928:	2000022c 	.word	0x2000022c

0800192c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001936:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <ModbusErrorReply+0x40>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	7e1a      	ldrb	r2, [r3, #24]
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <ModbusErrorReply+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <ModbusErrorReply+0x40>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	79fa      	ldrb	r2, [r7, #7]
 8001950:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <ModbusErrorReply+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2202      	movs	r2, #2
 800195a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	2000022c 	.word	0x2000022c

08001970 <Modbus_frame_response>:

void Modbus_frame_response() {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 8001974:	4b09      	ldr	r3, [pc, #36]	@ (800199c <Modbus_frame_response+0x2c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	7e1b      	ldrb	r3, [r3, #24]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d004      	beq.n	8001988 <Modbus_frame_response+0x18>
 800197e:	2b06      	cmp	r3, #6
 8001980:	d105      	bne.n	800198e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001982:	f7ff ff1d 	bl	80017c0 <modbusWrite1Register>
		break;
 8001986:	e006      	b.n	8001996 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001988:	f7ff ff5a 	bl	8001840 <modbusRead1Register>
		break;
 800198c:	e003      	b.n	8001996 <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800198e:	2001      	movs	r0, #1
 8001990:	f7ff ffcc 	bl	800192c <ModbusErrorReply>
		break;
 8001994:	bf00      	nop

	}
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2000022c 	.word	0x2000022c

080019a0 <Modbus_Emission>:

void Modbus_Emission() {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80019a6:	4b38      	ldr	r3, [pc, #224]	@ (8001a88 <Modbus_Emission+0xe8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019b0:	2b20      	cmp	r3, #32
 80019b2:	d15d      	bne.n	8001a70 <Modbus_Emission+0xd0>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80019b4:	4b34      	ldr	r3, [pc, #208]	@ (8001a88 <Modbus_Emission+0xe8>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b33      	ldr	r3, [pc, #204]	@ (8001a88 <Modbus_Emission+0xe8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	7812      	ldrb	r2, [r2, #0]
 80019be:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 80019c2:	4b31      	ldr	r3, [pc, #196]	@ (8001a88 <Modbus_Emission+0xe8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 80019ca:	1c58      	adds	r0, r3, #1
				hModbus->Txframe, hModbus->TxCount);
 80019cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a88 <Modbus_Emission+0xe8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
 80019d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a88 <Modbus_Emission+0xe8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 80019dc:	461a      	mov	r2, r3
 80019de:	f009 fbb5 	bl	800b14c <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 80019e2:	4b29      	ldr	r3, [pc, #164]	@ (8001a88 <Modbus_Emission+0xe8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b26      	ldr	r3, [pc, #152]	@ (8001a88 <Modbus_Emission+0xe8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3203      	adds	r2, #3
 80019f2:	b292      	uxth	r2, r2
 80019f4:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80019f8:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <Modbus_Emission+0xe8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001a00:	4b21      	ldr	r3, [pc, #132]	@ (8001a88 <Modbus_Emission+0xe8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001a08:	3b02      	subs	r3, #2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	f7ff fc03 	bl	8001218 <CRC16>
 8001a12:	4603      	mov	r3, r0
 8001a14:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 8001a16:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <Modbus_Emission+0xe8>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <Modbus_Emission+0xe8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 2] = CalculateCRC.U8[0];
 8001a22:	3b02      	subs	r3, #2
 8001a24:	7939      	ldrb	r1, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	460a      	mov	r2, r1
 8001a2a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 8001a2e:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <Modbus_Emission+0xe8>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <Modbus_Emission+0xe8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 1] = CalculateCRC.U8[1];
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	7979      	ldrb	r1, [r7, #5]
 8001a3e:	4413      	add	r3, r2
 8001a40:	460a      	mov	r2, r1
 8001a42:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		//sent modbus

		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <Modbus_Emission+0xe8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a50:	2b20      	cmp	r3, #32
 8001a52:	d10d      	bne.n	8001a70 <Modbus_Emission+0xd0>
			HAL_UART_Transmit_DMA(hModbus->huart,
 8001a54:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <Modbus_Emission+0xe8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68d8      	ldr	r0, [r3, #12]
					hModbus->modbusUartStructure.MessageBufferTx,
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <Modbus_Emission+0xe8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					hModbus->modbusUartStructure.TxTail);
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <Modbus_Emission+0xe8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart,
 8001a66:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f007 fd16 	bl	800949c <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <Modbus_Emission+0xe8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2200      	movs	r2, #0
 8001a76:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001a78:	4b03      	ldr	r3, [pc, #12]	@ (8001a88 <Modbus_Emission+0xe8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	755a      	strb	r2, [r3, #21]

}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000022c 	.word	0x2000022c
 8001a8c:	00000000 	.word	0x00000000

08001a90 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a94:	ed2d 8b02 	vpush	{d8}
 8001a98:	b0a9      	sub	sp, #164	@ 0xa4
 8001a9a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a9c:	f002 fff5 	bl	8004a8a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001aa0:	f001 faf2 	bl	8003088 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001aa4:	f001 ff4c 	bl	8003940 <MX_GPIO_Init>
	MX_DMA_Init();
 8001aa8:	f001 ff18 	bl	80038dc <MX_DMA_Init>
	MX_TIM4_Init();
 8001aac:	f001 fc94 	bl	80033d8 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001ab0:	f001 fce8 	bl	8003484 <MX_TIM5_Init>
	MX_TIM3_Init();
 8001ab4:	f001 fc3a 	bl	800332c <MX_TIM3_Init>
	MX_TIM8_Init();
 8001ab8:	f001 fd32 	bl	8003520 <MX_TIM8_Init>
	MX_TIM15_Init();
 8001abc:	f001 fdec 	bl	8003698 <MX_TIM15_Init>
	MX_TIM1_Init();
 8001ac0:	f001 fb2e 	bl	8003120 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001ac4:	f001 fbb2 	bl	800322c <MX_TIM2_Init>
	MX_USART2_UART_Init();
 8001ac8:	f001 feba 	bl	8003840 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8001acc:	f001 fe88 	bl	80037e0 <MX_TIM16_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001ad0:	48b9      	ldr	r0, [pc, #740]	@ (8001db8 <main+0x328>)
 8001ad2:	f004 feeb 	bl	80068ac <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	48b7      	ldr	r0, [pc, #732]	@ (8001db8 <main+0x328>)
 8001ada:	f005 f9b3 	bl	8006e44 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001ade:	2104      	movs	r1, #4
 8001ae0:	48b5      	ldr	r0, [pc, #724]	@ (8001db8 <main+0x328>)
 8001ae2:	f005 f9af 	bl	8006e44 <HAL_TIM_IC_Start>
	HAL_TIM_Base_Start(&htim2);
 8001ae6:	48b5      	ldr	r0, [pc, #724]	@ (8001dbc <main+0x32c>)
 8001ae8:	f004 fee0 	bl	80068ac <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001aec:	2100      	movs	r1, #0
 8001aee:	48b3      	ldr	r0, [pc, #716]	@ (8001dbc <main+0x32c>)
 8001af0:	f005 f9a8 	bl	8006e44 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001af4:	2104      	movs	r1, #4
 8001af6:	48b1      	ldr	r0, [pc, #708]	@ (8001dbc <main+0x32c>)
 8001af8:	f005 f9a4 	bl	8006e44 <HAL_TIM_IC_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001afc:	213c      	movs	r1, #60	@ 0x3c
 8001afe:	48b0      	ldr	r0, [pc, #704]	@ (8001dc0 <main+0x330>)
 8001b00:	f005 fc4e 	bl	80073a0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001b04:	213c      	movs	r1, #60	@ 0x3c
 8001b06:	48af      	ldr	r0, [pc, #700]	@ (8001dc4 <main+0x334>)
 8001b08:	f005 fc4a 	bl	80073a0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001b0c:	48ae      	ldr	r0, [pc, #696]	@ (8001dc8 <main+0x338>)
 8001b0e:	f004 ff3d 	bl	800698c <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8);
 8001b12:	48ae      	ldr	r0, [pc, #696]	@ (8001dcc <main+0x33c>)
 8001b14:	f004 feca 	bl	80068ac <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001b18:	2108      	movs	r1, #8
 8001b1a:	48ac      	ldr	r0, [pc, #688]	@ (8001dcc <main+0x33c>)
 8001b1c:	f005 f81c 	bl	8006b58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001b20:	210c      	movs	r1, #12
 8001b22:	48aa      	ldr	r0, [pc, #680]	@ (8001dcc <main+0x33c>)
 8001b24:	f005 f818 	bl	8006b58 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim15);
 8001b28:	48a9      	ldr	r0, [pc, #676]	@ (8001dd0 <main+0x340>)
 8001b2a:	f004 febf 	bl	80068ac <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001b2e:	2100      	movs	r1, #0
 8001b30:	48a7      	ldr	r0, [pc, #668]	@ (8001dd0 <main+0x340>)
 8001b32:	f005 f811 	bl	8006b58 <HAL_TIM_PWM_Start>
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
	DWT_Init();
 8001b36:	f002 f81b 	bl	8003b70 <DWT_Init>

	PID.Kp = 0.1;
 8001b3a:	4aa6      	ldr	r2, [pc, #664]	@ (8001dd4 <main+0x344>)
 8001b3c:	4ba6      	ldr	r3, [pc, #664]	@ (8001dd8 <main+0x348>)
 8001b3e:	6193      	str	r3, [r2, #24]
	PID.Ki = 0.00001;
 8001b40:	4aa4      	ldr	r2, [pc, #656]	@ (8001dd4 <main+0x344>)
 8001b42:	4ba6      	ldr	r3, [pc, #664]	@ (8001ddc <main+0x34c>)
 8001b44:	61d3      	str	r3, [r2, #28]
	PID.Kd = 0.1;
 8001b46:	4aa3      	ldr	r2, [pc, #652]	@ (8001dd4 <main+0x344>)
 8001b48:	4ba3      	ldr	r3, [pc, #652]	@ (8001dd8 <main+0x348>)
 8001b4a:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	48a1      	ldr	r0, [pc, #644]	@ (8001dd4 <main+0x344>)
 8001b50:	f009 fa9a 	bl	800b088 <arm_pid_init_f32>

	Reset_R();
 8001b54:	f002 fbf0 	bl	8004338 <Reset_R>
	Reset_P();
 8001b58:	f002 fbfe 	bl	8004358 <Reset_P>
	calibState = CALIB_IDLE;
 8001b5c:	4aa0      	ldr	r2, [pc, #640]	@ (8001de0 <main+0x350>)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	7013      	strb	r3, [r2, #0]

	Set_Servo(0);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f002 fbbe 	bl	80042e4 <Set_Servo>

	//BaseSystem//////////
	hmodbus.huart = &huart2;
 8001b68:	4a9e      	ldr	r2, [pc, #632]	@ (8001de4 <main+0x354>)
 8001b6a:	4b9f      	ldr	r3, [pc, #636]	@ (8001de8 <main+0x358>)
 8001b6c:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim16;
 8001b6e:	4a9d      	ldr	r2, [pc, #628]	@ (8001de4 <main+0x354>)
 8001b70:	4b9e      	ldr	r3, [pc, #632]	@ (8001dec <main+0x35c>)
 8001b72:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8001b74:	4a9b      	ldr	r2, [pc, #620]	@ (8001de4 <main+0x354>)
 8001b76:	2315      	movs	r3, #21
 8001b78:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8001b7a:	4a9a      	ldr	r2, [pc, #616]	@ (8001de4 <main+0x354>)
 8001b7c:	23c8      	movs	r3, #200	@ 0xc8
 8001b7e:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001b80:	499b      	ldr	r1, [pc, #620]	@ (8001df0 <main+0x360>)
 8001b82:	4898      	ldr	r0, [pc, #608]	@ (8001de4 <main+0x354>)
 8001b84:	f7ff faf2 	bl	800116c <Modbus_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//BaseSystem//////////
		Modbus_Protocal_Worker();
 8001b88:	f7ff fbb2 	bl	80012f0 <Modbus_Protocal_Worker>
		//////////////////////

		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8001b8c:	4b8d      	ldr	r3, [pc, #564]	@ (8001dc4 <main+0x334>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b92:	4b98      	ldr	r3, [pc, #608]	@ (8001df4 <main+0x364>)
 8001b94:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8001b96:	4b8a      	ldr	r3, [pc, #552]	@ (8001dc0 <main+0x330>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b9c:	4b96      	ldr	r3, [pc, #600]	@ (8001df8 <main+0x368>)
 8001b9e:	601a      	str	r2, [r3, #0]
		//Call every 0.01 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 8001ba0:	f002 f8c6 	bl	8003d30 <micros>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		if (currentTime > timestamp) {
 8001bac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001bb0:	4b92      	ldr	r3, [pc, #584]	@ (8001dfc <main+0x36c>)
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	4282      	cmp	r2, r0
 8001bb8:	418b      	sbcs	r3, r1
 8001bba:	d211      	bcs.n	8001be0 <main+0x150>
			timestamp = currentTime + 10000;  //us
 8001bbc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001bc0:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001bc4:	1851      	adds	r1, r2, r1
 8001bc6:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001bc8:	f143 0300 	adc.w	r3, r3, #0
 8001bcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001bce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001bd2:	4b8a      	ldr	r3, [pc, #552]	@ (8001dfc <main+0x36c>)
 8001bd4:	e9c3 0100 	strd	r0, r1, [r3]
			Prismatic_PosVel_Update();
 8001bd8:	f002 fa5c 	bl	8004094 <Prismatic_PosVel_Update>
			Revolute_PosVel_Update();
 8001bdc:	f002 f98c 	bl	8003ef8 <Revolute_PosVel_Update>
		}
		//Call every 0.1 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 8001be0:	f002 f8a6 	bl	8003d30 <micros>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
		if (currentTime1 > timestamp1) {
 8001bec:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001bf0:	4b83      	ldr	r3, [pc, #524]	@ (8001e00 <main+0x370>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	4282      	cmp	r2, r0
 8001bf8:	418b      	sbcs	r3, r1
 8001bfa:	d20c      	bcs.n	8001c16 <main+0x186>
			timestamp1 = currentTime1 + 100000;  //us
 8001bfc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001c00:	4980      	ldr	r1, [pc, #512]	@ (8001e04 <main+0x374>)
 8001c02:	1851      	adds	r1, r2, r1
 8001c04:	6639      	str	r1, [r7, #96]	@ 0x60
 8001c06:	f143 0300 	adc.w	r3, r3, #0
 8001c0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c0c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001c10:	4b7b      	ldr	r3, [pc, #492]	@ (8001e00 <main+0x370>)
 8001c12:	e9c3 0100 	strd	r0, r1, [r3]

		}
		End_x = Prismatic_QEIdata.mmPosition
 8001c16:	4b7c      	ldr	r3, [pc, #496]	@ (8001e08 <main+0x378>)
 8001c18:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
				* cosf(Revolute_QEIdata.RadPosition * -1);
 8001c1c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e0c <main+0x37c>)
 8001c1e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001c22:	eef1 7a67 	vneg.f32	s15, s15
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	f009 fa9d 	bl	800b168 <cosf>
 8001c2e:	eef0 7a40 	vmov.f32	s15, s0
 8001c32:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_x = Prismatic_QEIdata.mmPosition
 8001c36:	4b76      	ldr	r3, [pc, #472]	@ (8001e10 <main+0x380>)
 8001c38:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition
 8001c3c:	4b72      	ldr	r3, [pc, #456]	@ (8001e08 <main+0x378>)
 8001c3e:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
				* sinf(Revolute_QEIdata.RadPosition);
 8001c42:	4b72      	ldr	r3, [pc, #456]	@ (8001e0c <main+0x37c>)
 8001c44:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001c48:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4c:	f009 fad0 	bl	800b1f0 <sinf>
 8001c50:	eef0 7a40 	vmov.f32	s15, s0
 8001c54:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_y = Prismatic_QEIdata.mmPosition
 8001c58:	4b6e      	ldr	r3, [pc, #440]	@ (8001e14 <main+0x384>)
 8001c5a:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<RECEIVER>> ////////////////////////
		Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8001c5e:	4b57      	ldr	r3, [pc, #348]	@ (8001dbc <main+0x32c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b6c      	ldr	r3, [pc, #432]	@ (8001e18 <main+0x388>)
 8001c68:	601a      	str	r2, [r3, #0]
		Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8001c6a:	4b53      	ldr	r3, [pc, #332]	@ (8001db8 <main+0x328>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b69      	ldr	r3, [pc, #420]	@ (8001e18 <main+0x388>)
 8001c74:	605a      	str	r2, [r3, #4]
		float RX_temp = map(
				__HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_2) - 1500.00, -500.00,
 8001c76:	4b51      	ldr	r3, [pc, #324]	@ (8001dbc <main+0x32c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fc0d 	bl	800049c <__aeabi_ui2d>
 8001c82:	a349      	add	r3, pc, #292	@ (adr r3, 8001da8 <main+0x318>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe faca 	bl	8000220 <__aeabi_dsub>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
		float RX_temp = map(
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f7fe ff36 	bl	8000b04 <__aeabi_d2f>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	ed9f 2a60 	vldr	s4, [pc, #384]	@ 8001e1c <main+0x38c>
 8001c9e:	eddf 1a65 	vldr	s3, [pc, #404]	@ 8001e34 <main+0x3a4>
 8001ca2:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 8001e20 <main+0x390>
 8001ca6:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001e24 <main+0x394>
 8001caa:	ee00 3a10 	vmov	s0, r3
 8001cae:	f001 ff31 	bl	8003b14 <map>
 8001cb2:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
				500.00, -100.00, 100.00);
		float RY_temp = map(
				__HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1) - 18530.00, -500.00,
 8001cb6:	4b40      	ldr	r3, [pc, #256]	@ (8001db8 <main+0x328>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fbed 	bl	800049c <__aeabi_ui2d>
 8001cc2:	a33b      	add	r3, pc, #236	@ (adr r3, 8001db0 <main+0x320>)
 8001cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc8:	f7fe faaa 	bl	8000220 <__aeabi_dsub>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
		float RY_temp = map(
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f7fe ff16 	bl	8000b04 <__aeabi_d2f>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 8001e1c <main+0x38c>
 8001cde:	eddf 1a55 	vldr	s3, [pc, #340]	@ 8001e34 <main+0x3a4>
 8001ce2:	ed9f 1a4f 	vldr	s2, [pc, #316]	@ 8001e20 <main+0x390>
 8001ce6:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 8001e24 <main+0x394>
 8001cea:	ee00 3a10 	vmov	s0, r3
 8001cee:	f001 ff11 	bl	8003b14 <map>
 8001cf2:	ed87 0a22 	vstr	s0, [r7, #136]	@ 0x88
				500.00, -100.00, 100.00);

		if (RX_temp >= -4 && RX_temp <= 4)
 8001cf6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001cfa:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8001cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	db0d      	blt.n	8001d24 <main+0x294>
 8001d08:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001d0c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d18:	d804      	bhi.n	8001d24 <main+0x294>
			Receiver[0] = 0.00;
 8001d1a:	4a43      	ldr	r2, [pc, #268]	@ (8001e28 <main+0x398>)
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e01d      	b.n	8001d60 <main+0x2d0>
		else if (RX_temp > 100)
 8001d24:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001d28:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001e1c <main+0x38c>
 8001d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d34:	dd03      	ble.n	8001d3e <main+0x2ae>
			Receiver[0] = 100.00;
 8001d36:	4a3c      	ldr	r2, [pc, #240]	@ (8001e28 <main+0x398>)
 8001d38:	4b3c      	ldr	r3, [pc, #240]	@ (8001e2c <main+0x39c>)
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	e010      	b.n	8001d60 <main+0x2d0>
		else if (RX_temp < -100)
 8001d3e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001d42:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001e34 <main+0x3a4>
 8001d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d503      	bpl.n	8001d58 <main+0x2c8>
			Receiver[0] = -100.00;
 8001d50:	4a35      	ldr	r2, [pc, #212]	@ (8001e28 <main+0x398>)
 8001d52:	4b37      	ldr	r3, [pc, #220]	@ (8001e30 <main+0x3a0>)
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e003      	b.n	8001d60 <main+0x2d0>
		else
			Receiver[0] = RX_temp;
 8001d58:	4a33      	ldr	r2, [pc, #204]	@ (8001e28 <main+0x398>)
 8001d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d5e:	6013      	str	r3, [r2, #0]
		if (RY_temp >= -4 && RY_temp <= 4)
 8001d60:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001d64:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8001d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d70:	db0d      	blt.n	8001d8e <main+0x2fe>
 8001d72:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001d76:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d82:	d804      	bhi.n	8001d8e <main+0x2fe>
			Receiver[1] = 0.00;
 8001d84:	4a28      	ldr	r2, [pc, #160]	@ (8001e28 <main+0x398>)
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	6053      	str	r3, [r2, #4]
 8001d8c:	e065      	b.n	8001e5a <main+0x3ca>
		else if (RY_temp > 100)
 8001d8e:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001d92:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001e1c <main+0x38c>
 8001d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	dd4b      	ble.n	8001e38 <main+0x3a8>
			Receiver[1] = 100.00;
 8001da0:	4a21      	ldr	r2, [pc, #132]	@ (8001e28 <main+0x398>)
 8001da2:	4b22      	ldr	r3, [pc, #136]	@ (8001e2c <main+0x39c>)
 8001da4:	6053      	str	r3, [r2, #4]
 8001da6:	e058      	b.n	8001e5a <main+0x3ca>
 8001da8:	00000000 	.word	0x00000000
 8001dac:	40977000 	.word	0x40977000
 8001db0:	00000000 	.word	0x00000000
 8001db4:	40d21880 	.word	0x40d21880
 8001db8:	20000234 	.word	0x20000234
 8001dbc:	20000300 	.word	0x20000300
 8001dc0:	200003cc 	.word	0x200003cc
 8001dc4:	20000498 	.word	0x20000498
 8001dc8:	20000564 	.word	0x20000564
 8001dcc:	20000630 	.word	0x20000630
 8001dd0:	200006fc 	.word	0x200006fc
 8001dd4:	20000b38 	.word	0x20000b38
 8001dd8:	3dcccccd 	.word	0x3dcccccd
 8001ddc:	3727c5ac 	.word	0x3727c5ac
 8001de0:	20000b7c 	.word	0x20000b7c
 8001de4:	20000ba8 	.word	0x20000ba8
 8001de8:	20000894 	.word	0x20000894
 8001dec:	200007c8 	.word	0x200007c8
 8001df0:	20001080 	.word	0x20001080
 8001df4:	20000a68 	.word	0x20000a68
 8001df8:	20000a6c 	.word	0x20000a6c
 8001dfc:	20001210 	.word	0x20001210
 8001e00:	20001218 	.word	0x20001218
 8001e04:	000186a0 	.word	0x000186a0
 8001e08:	20000ab0 	.word	0x20000ab0
 8001e0c:	20000a70 	.word	0x20000a70
 8001e10:	20000af0 	.word	0x20000af0
 8001e14:	20000af4 	.word	0x20000af4
 8001e18:	20000a3c 	.word	0x20000a3c
 8001e1c:	42c80000 	.word	0x42c80000
 8001e20:	43fa0000 	.word	0x43fa0000
 8001e24:	c3fa0000 	.word	0xc3fa0000
 8001e28:	20000a28 	.word	0x20000a28
 8001e2c:	42c80000 	.word	0x42c80000
 8001e30:	c2c80000 	.word	0xc2c80000
 8001e34:	c2c80000 	.word	0xc2c80000
		else if (RY_temp < -100)
 8001e38:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001e3c:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8001e34 <main+0x3a4>
 8001e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	d503      	bpl.n	8001e52 <main+0x3c2>
			Receiver[1] = -100.00;
 8001e4a:	4ab7      	ldr	r2, [pc, #732]	@ (8002128 <main+0x698>)
 8001e4c:	4bb7      	ldr	r3, [pc, #732]	@ (800212c <main+0x69c>)
 8001e4e:	6053      	str	r3, [r2, #4]
 8001e50:	e003      	b.n	8001e5a <main+0x3ca>
		else
			Receiver[1] = RY_temp;
 8001e52:	4ab5      	ldr	r2, [pc, #724]	@ (8002128 <main+0x698>)
 8001e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e58:	6053      	str	r3, [r2, #4]

		Receiver[2] = map((float) pulse_width_us[0] - 1500.00, -500.00, 500.00,
 8001e5a:	4bb5      	ldr	r3, [pc, #724]	@ (8002130 <main+0x6a0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e66:	ee17 0a90 	vmov	r0, s15
 8001e6a:	f7fe fb39 	bl	80004e0 <__aeabi_f2d>
 8001e6e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8002120 <main+0x690>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	f7fe f9d4 	bl	8000220 <__aeabi_dsub>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f7fe fe40 	bl	8000b04 <__aeabi_d2f>
 8001e84:	4603      	mov	r3, r0
 8001e86:	ed9f 2aab 	vldr	s4, [pc, #684]	@ 8002134 <main+0x6a4>
 8001e8a:	eddf 1aab 	vldr	s3, [pc, #684]	@ 8002138 <main+0x6a8>
 8001e8e:	ed9f 1aab 	vldr	s2, [pc, #684]	@ 800213c <main+0x6ac>
 8001e92:	eddf 0aab 	vldr	s1, [pc, #684]	@ 8002140 <main+0x6b0>
 8001e96:	ee00 3a10 	vmov	s0, r3
 8001e9a:	f001 fe3b 	bl	8003b14 <map>
 8001e9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ea2:	4ba1      	ldr	r3, [pc, #644]	@ (8002128 <main+0x698>)
 8001ea4:	edc3 7a02 	vstr	s15, [r3, #8]
				-100.00, 100.00);
		Receiver[3] = map((float) pulse_width_us[1] - 1500.00, -500.00, 500.00,
 8001ea8:	4ba1      	ldr	r3, [pc, #644]	@ (8002130 <main+0x6a0>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eb4:	ee17 0a90 	vmov	r0, s15
 8001eb8:	f7fe fb12 	bl	80004e0 <__aeabi_f2d>
 8001ebc:	a398      	add	r3, pc, #608	@ (adr r3, 8002120 <main+0x690>)
 8001ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec2:	f7fe f9ad 	bl	8000220 <__aeabi_dsub>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7fe fe19 	bl	8000b04 <__aeabi_d2f>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	ed9f 2a97 	vldr	s4, [pc, #604]	@ 8002134 <main+0x6a4>
 8001ed8:	eddf 1a97 	vldr	s3, [pc, #604]	@ 8002138 <main+0x6a8>
 8001edc:	ed9f 1a97 	vldr	s2, [pc, #604]	@ 800213c <main+0x6ac>
 8001ee0:	eddf 0a97 	vldr	s1, [pc, #604]	@ 8002140 <main+0x6b0>
 8001ee4:	ee00 3a10 	vmov	s0, r3
 8001ee8:	f001 fe14 	bl	8003b14 <map>
 8001eec:	eef0 7a40 	vmov.f32	s15, s0
 8001ef0:	4b8d      	ldr	r3, [pc, #564]	@ (8002128 <main+0x698>)
 8001ef2:	edc3 7a03 	vstr	s15, [r3, #12]
				-100.00, 100.00);
		Receiver[4] = map((float) pulse_width_us[2] - 1500.00, -500.00, 500.00,
 8001ef6:	4b8e      	ldr	r3, [pc, #568]	@ (8002130 <main+0x6a0>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f02:	ee17 0a90 	vmov	r0, s15
 8001f06:	f7fe faeb 	bl	80004e0 <__aeabi_f2d>
 8001f0a:	a385      	add	r3, pc, #532	@ (adr r3, 8002120 <main+0x690>)
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	f7fe f986 	bl	8000220 <__aeabi_dsub>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7fe fdf2 	bl	8000b04 <__aeabi_d2f>
 8001f20:	4603      	mov	r3, r0
 8001f22:	ed9f 2a84 	vldr	s4, [pc, #528]	@ 8002134 <main+0x6a4>
 8001f26:	eddf 1a84 	vldr	s3, [pc, #528]	@ 8002138 <main+0x6a8>
 8001f2a:	ed9f 1a84 	vldr	s2, [pc, #528]	@ 800213c <main+0x6ac>
 8001f2e:	eddf 0a84 	vldr	s1, [pc, #528]	@ 8002140 <main+0x6b0>
 8001f32:	ee00 3a10 	vmov	s0, r3
 8001f36:	f001 fded 	bl	8003b14 <map>
 8001f3a:	eef0 7a40 	vmov.f32	s15, s0
 8001f3e:	4b7a      	ldr	r3, [pc, #488]	@ (8002128 <main+0x698>)
 8001f40:	edc3 7a04 	vstr	s15, [r3, #16]
				-100.00, 100.00);

		//Adjust as needed
		vx = map((float) Receiver[0], -100.00, 100.00, -300.00, 300.00);
 8001f44:	4b78      	ldr	r3, [pc, #480]	@ (8002128 <main+0x698>)
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	ed9f 2a7e 	vldr	s4, [pc, #504]	@ 8002144 <main+0x6b4>
 8001f4e:	eddf 1a7e 	vldr	s3, [pc, #504]	@ 8002148 <main+0x6b8>
 8001f52:	ed9f 1a78 	vldr	s2, [pc, #480]	@ 8002134 <main+0x6a4>
 8001f56:	eddf 0a78 	vldr	s1, [pc, #480]	@ 8002138 <main+0x6a8>
 8001f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f5e:	f001 fdd9 	bl	8003b14 <map>
 8001f62:	eef0 7a40 	vmov.f32	s15, s0
 8001f66:	4b79      	ldr	r3, [pc, #484]	@ (800214c <main+0x6bc>)
 8001f68:	edc3 7a00 	vstr	s15, [r3]
		vy = map((float) Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8001f6c:	4b6e      	ldr	r3, [pc, #440]	@ (8002128 <main+0x698>)
 8001f6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f72:	ed9f 2a74 	vldr	s4, [pc, #464]	@ 8002144 <main+0x6b4>
 8001f76:	eddf 1a74 	vldr	s3, [pc, #464]	@ 8002148 <main+0x6b8>
 8001f7a:	ed9f 1a6e 	vldr	s2, [pc, #440]	@ 8002134 <main+0x6a4>
 8001f7e:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8002138 <main+0x6a8>
 8001f82:	eeb0 0a67 	vmov.f32	s0, s15
 8001f86:	f001 fdc5 	bl	8003b14 <map>
 8001f8a:	eef0 7a40 	vmov.f32	s15, s0
 8001f8e:	4b70      	ldr	r3, [pc, #448]	@ (8002150 <main+0x6c0>)
 8001f90:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8001f94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f98:	486e      	ldr	r0, [pc, #440]	@ (8002154 <main+0x6c4>)
 8001f9a:	f003 fbab 	bl	80056f4 <HAL_GPIO_ReadPin>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d10e      	bne.n	8001fc2 <main+0x532>
			Mode = 0;
 8001fa4:	4a6c      	ldr	r2, [pc, #432]	@ (8002158 <main+0x6c8>)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 8001faa:	4a6c      	ldr	r2, [pc, #432]	@ (800215c <main+0x6cc>)
 8001fac:	2301      	movs	r3, #1
 8001fae:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f002 f997 	bl	80042e4 <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fbc:	4865      	ldr	r0, [pc, #404]	@ (8002154 <main+0x6c4>)
 8001fbe:	f003 fbb1 	bl	8005724 <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1) {
 8001fc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fc6:	4866      	ldr	r0, [pc, #408]	@ (8002160 <main+0x6d0>)
 8001fc8:	f003 fb94 	bl	80056f4 <HAL_GPIO_ReadPin>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d108      	bne.n	8001fe4 <main+0x554>
			EmergencyState = 0;
 8001fd2:	4a62      	ldr	r2, [pc, #392]	@ (800215c <main+0x6cc>)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fde:	485d      	ldr	r0, [pc, #372]	@ (8002154 <main+0x6c4>)
 8001fe0:	f003 fba0 	bl	8005724 <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 8001fe4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fe8:	485d      	ldr	r0, [pc, #372]	@ (8002160 <main+0x6d0>)
 8001fea:	f003 fb83 	bl	80056f4 <HAL_GPIO_ReadPin>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d102      	bne.n	8001ffa <main+0x56a>
			Pen_Status = 0;
 8001ff4:	4a5b      	ldr	r2, [pc, #364]	@ (8002164 <main+0x6d4>)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1) {
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	4858      	ldr	r0, [pc, #352]	@ (8002160 <main+0x6d0>)
 8001ffe:	f003 fb79 	bl	80056f4 <HAL_GPIO_ReadPin>
 8002002:	4603      	mov	r3, r0
 8002004:	2b01      	cmp	r3, #1
 8002006:	d102      	bne.n	800200e <main+0x57e>
			Pen_Status = 1;
 8002008:	4a56      	ldr	r2, [pc, #344]	@ (8002164 <main+0x6d4>)
 800200a:	2301      	movs	r3, #1
 800200c:	7013      	strb	r3, [r2, #0]
		}

		if (EmergencyState == 1) {
 800200e:	4b53      	ldr	r3, [pc, #332]	@ (800215c <main+0x6cc>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d103      	bne.n	800201e <main+0x58e>
			Mode = 0;
 8002016:	4a50      	ldr	r2, [pc, #320]	@ (8002158 <main+0x6c8>)
 8002018:	2300      	movs	r3, #0
 800201a:	7013      	strb	r3, [r2, #0]
 800201c:	e197      	b.n	800234e <main+0x8be>
		} else if (Receiver[2] < -30 && Receiver[4] < -30) {
 800201e:	4b42      	ldr	r3, [pc, #264]	@ (8002128 <main+0x698>)
 8002020:	edd3 7a02 	vldr	s15, [r3, #8]
 8002024:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800202c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002030:	d513      	bpl.n	800205a <main+0x5ca>
 8002032:	4b3d      	ldr	r3, [pc, #244]	@ (8002128 <main+0x698>)
 8002034:	edd3 7a04 	vldr	s15, [r3, #16]
 8002038:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800203c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002044:	d509      	bpl.n	800205a <main+0x5ca>
			Mode = 0;
 8002046:	4a44      	ldr	r2, [pc, #272]	@ (8002158 <main+0x6c8>)
 8002048:	2300      	movs	r3, #0
 800204a:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002052:	4840      	ldr	r0, [pc, #256]	@ (8002154 <main+0x6c4>)
 8002054:	f003 fb66 	bl	8005724 <HAL_GPIO_WritePin>
 8002058:	e179      	b.n	800234e <main+0x8be>
		} else if (Receiver[3] > 0 && IsPress == 0) {
 800205a:	4b33      	ldr	r3, [pc, #204]	@ (8002128 <main+0x698>)
 800205c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002068:	f340 816e 	ble.w	8002348 <main+0x8b8>
 800206c:	4b3e      	ldr	r3, [pc, #248]	@ (8002168 <main+0x6d8>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	f040 8169 	bne.w	8002348 <main+0x8b8>
			IsPress = 1;
 8002076:	4a3c      	ldr	r2, [pc, #240]	@ (8002168 <main+0x6d8>)
 8002078:	2301      	movs	r3, #1
 800207a:	7013      	strb	r3, [r2, #0]
			calibState = CALIB_IDLE;
 800207c:	4a3b      	ldr	r2, [pc, #236]	@ (800216c <main+0x6dc>)
 800207e:	2300      	movs	r3, #0
 8002080:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 8002082:	4b29      	ldr	r3, [pc, #164]	@ (8002128 <main+0x698>)
 8002084:	edd3 7a02 	vldr	s15, [r3, #8]
 8002088:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800208c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002094:	dd2c      	ble.n	80020f0 <main+0x660>
 8002096:	4b24      	ldr	r3, [pc, #144]	@ (8002128 <main+0x698>)
 8002098:	edd3 7a02 	vldr	s15, [r3, #8]
 800209c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80020a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a8:	d522      	bpl.n	80020f0 <main+0x660>
 80020aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002128 <main+0x698>)
 80020ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80020b0:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80020b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020bc:	d518      	bpl.n	80020f0 <main+0x660>
				if (Mode != 1) {
 80020be:	4b26      	ldr	r3, [pc, #152]	@ (8002158 <main+0x6c8>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d003      	beq.n	80020ce <main+0x63e>
					Mode = 1;
 80020c6:	4a24      	ldr	r2, [pc, #144]	@ (8002158 <main+0x6c8>)
 80020c8:	2301      	movs	r3, #1
 80020ca:	7013      	strb	r3, [r2, #0]
				if (Mode != 1) {
 80020cc:	e12d      	b.n	800232a <main+0x89a>
				} else {
					TargetX = End_x;
 80020ce:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <main+0x6e0>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b28      	ldr	r3, [pc, #160]	@ (8002174 <main+0x6e4>)
 80020d4:	601a      	str	r2, [r3, #0]
					TargetY = End_y;
 80020d6:	4b28      	ldr	r3, [pc, #160]	@ (8002178 <main+0x6e8>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b28      	ldr	r3, [pc, #160]	@ (800217c <main+0x6ec>)
 80020dc:	601a      	str	r2, [r3, #0]
					TargetR = Revolute_QEIdata.RadPosition;
 80020de:	4b28      	ldr	r3, [pc, #160]	@ (8002180 <main+0x6f0>)
 80020e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020e2:	4b28      	ldr	r3, [pc, #160]	@ (8002184 <main+0x6f4>)
 80020e4:	601a      	str	r2, [r3, #0]
					TargetP = Prismatic_QEIdata.mmPosition;
 80020e6:	4b28      	ldr	r3, [pc, #160]	@ (8002188 <main+0x6f8>)
 80020e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020ea:	4b28      	ldr	r3, [pc, #160]	@ (800218c <main+0x6fc>)
 80020ec:	601a      	str	r2, [r3, #0]
				if (Mode != 1) {
 80020ee:	e11c      	b.n	800232a <main+0x89a>
				}
			} else if (Receiver[2] > 30 && Receiver[4] < -30) {
 80020f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002128 <main+0x698>)
 80020f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80020f6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80020fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002102:	dd45      	ble.n	8002190 <main+0x700>
 8002104:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <main+0x698>)
 8002106:	edd3 7a04 	vldr	s15, [r3, #16]
 800210a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800210e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002116:	d53b      	bpl.n	8002190 <main+0x700>
				Mode = 2;
 8002118:	4a0f      	ldr	r2, [pc, #60]	@ (8002158 <main+0x6c8>)
 800211a:	2302      	movs	r3, #2
 800211c:	7013      	strb	r3, [r2, #0]
 800211e:	e104      	b.n	800232a <main+0x89a>
 8002120:	00000000 	.word	0x00000000
 8002124:	40977000 	.word	0x40977000
 8002128:	20000a28 	.word	0x20000a28
 800212c:	c2c80000 	.word	0xc2c80000
 8002130:	20000a5c 	.word	0x20000a5c
 8002134:	42c80000 	.word	0x42c80000
 8002138:	c2c80000 	.word	0xc2c80000
 800213c:	43fa0000 	.word	0x43fa0000
 8002140:	c3fa0000 	.word	0xc3fa0000
 8002144:	43960000 	.word	0x43960000
 8002148:	c3960000 	.word	0xc3960000
 800214c:	20000ae8 	.word	0x20000ae8
 8002150:	20000aec 	.word	0x20000aec
 8002154:	48000800 	.word	0x48000800
 8002158:	20000b28 	.word	0x20000b28
 800215c:	20000b29 	.word	0x20000b29
 8002160:	48000400 	.word	0x48000400
 8002164:	20000b2b 	.word	0x20000b2b
 8002168:	20000b2a 	.word	0x20000b2a
 800216c:	20000b7c 	.word	0x20000b7c
 8002170:	20000af0 	.word	0x20000af0
 8002174:	20000af8 	.word	0x20000af8
 8002178:	20000af4 	.word	0x20000af4
 800217c:	20000afc 	.word	0x20000afc
 8002180:	20000a70 	.word	0x20000a70
 8002184:	20000b00 	.word	0x20000b00
 8002188:	20000ab0 	.word	0x20000ab0
 800218c:	20000b04 	.word	0x20000b04
			} else if (Receiver[2] < -30 && Receiver[4] > -30
 8002190:	4b66      	ldr	r3, [pc, #408]	@ (800232c <main+0x89c>)
 8002192:	edd3 7a02 	vldr	s15, [r3, #8]
 8002196:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800219a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a2:	d517      	bpl.n	80021d4 <main+0x744>
 80021a4:	4b61      	ldr	r3, [pc, #388]	@ (800232c <main+0x89c>)
 80021a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80021aa:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80021ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b6:	dd0d      	ble.n	80021d4 <main+0x744>
					&& Receiver[4] < 30) {
 80021b8:	4b5c      	ldr	r3, [pc, #368]	@ (800232c <main+0x89c>)
 80021ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80021be:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80021c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ca:	d503      	bpl.n	80021d4 <main+0x744>
				Mode = 3;
 80021cc:	4a58      	ldr	r2, [pc, #352]	@ (8002330 <main+0x8a0>)
 80021ce:	2303      	movs	r3, #3
 80021d0:	7013      	strb	r3, [r2, #0]
 80021d2:	e0aa      	b.n	800232a <main+0x89a>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 80021d4:	4b55      	ldr	r3, [pc, #340]	@ (800232c <main+0x89c>)
 80021d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80021da:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80021de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e6:	dd21      	ble.n	800222c <main+0x79c>
 80021e8:	4b50      	ldr	r3, [pc, #320]	@ (800232c <main+0x89c>)
 80021ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80021ee:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80021f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fa:	d517      	bpl.n	800222c <main+0x79c>
					&& Receiver[4] > -30 && Receiver[4] < 30) {
 80021fc:	4b4b      	ldr	r3, [pc, #300]	@ (800232c <main+0x89c>)
 80021fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8002202:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220e:	dd0d      	ble.n	800222c <main+0x79c>
 8002210:	4b46      	ldr	r3, [pc, #280]	@ (800232c <main+0x89c>)
 8002212:	edd3 7a04 	vldr	s15, [r3, #16]
 8002216:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800221a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800221e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002222:	d503      	bpl.n	800222c <main+0x79c>
				Mode = 4;
 8002224:	4a42      	ldr	r2, [pc, #264]	@ (8002330 <main+0x8a0>)
 8002226:	2304      	movs	r3, #4
 8002228:	7013      	strb	r3, [r2, #0]
 800222a:	e07e      	b.n	800232a <main+0x89a>
			} else if (Receiver[2] > 30 && Receiver[4] > -30
 800222c:	4b3f      	ldr	r3, [pc, #252]	@ (800232c <main+0x89c>)
 800222e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002232:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800223a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223e:	dd17      	ble.n	8002270 <main+0x7e0>
 8002240:	4b3a      	ldr	r3, [pc, #232]	@ (800232c <main+0x89c>)
 8002242:	edd3 7a04 	vldr	s15, [r3, #16]
 8002246:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800224a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002252:	dd0d      	ble.n	8002270 <main+0x7e0>
					&& Receiver[4] < 30) {
 8002254:	4b35      	ldr	r3, [pc, #212]	@ (800232c <main+0x89c>)
 8002256:	edd3 7a04 	vldr	s15, [r3, #16]
 800225a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800225e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002266:	d503      	bpl.n	8002270 <main+0x7e0>
				Mode = 5;
 8002268:	4a31      	ldr	r2, [pc, #196]	@ (8002330 <main+0x8a0>)
 800226a:	2305      	movs	r3, #5
 800226c:	7013      	strb	r3, [r2, #0]
 800226e:	e05c      	b.n	800232a <main+0x89a>
			} else if (Receiver[2] < -30 && Receiver[4] > 30) {
 8002270:	4b2e      	ldr	r3, [pc, #184]	@ (800232c <main+0x89c>)
 8002272:	edd3 7a02 	vldr	s15, [r3, #8]
 8002276:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800227a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800227e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002282:	d50d      	bpl.n	80022a0 <main+0x810>
 8002284:	4b29      	ldr	r3, [pc, #164]	@ (800232c <main+0x89c>)
 8002286:	edd3 7a04 	vldr	s15, [r3, #16]
 800228a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800228e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002296:	dd03      	ble.n	80022a0 <main+0x810>
				Mode = 6;
 8002298:	4a25      	ldr	r2, [pc, #148]	@ (8002330 <main+0x8a0>)
 800229a:	2306      	movs	r3, #6
 800229c:	7013      	strb	r3, [r2, #0]
 800229e:	e044      	b.n	800232a <main+0x89a>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 80022a0:	4b22      	ldr	r3, [pc, #136]	@ (800232c <main+0x89c>)
 80022a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80022a6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80022aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b2:	dd17      	ble.n	80022e4 <main+0x854>
 80022b4:	4b1d      	ldr	r3, [pc, #116]	@ (800232c <main+0x89c>)
 80022b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80022ba:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80022be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c6:	d50d      	bpl.n	80022e4 <main+0x854>
					&& Receiver[4] > 30) {
 80022c8:	4b18      	ldr	r3, [pc, #96]	@ (800232c <main+0x89c>)
 80022ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80022ce:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80022d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022da:	dd03      	ble.n	80022e4 <main+0x854>
				Mode = 7;
 80022dc:	4a14      	ldr	r2, [pc, #80]	@ (8002330 <main+0x8a0>)
 80022de:	2307      	movs	r3, #7
 80022e0:	7013      	strb	r3, [r2, #0]
 80022e2:	e022      	b.n	800232a <main+0x89a>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 80022e4:	4b11      	ldr	r3, [pc, #68]	@ (800232c <main+0x89c>)
 80022e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80022ea:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80022ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f6:	dc00      	bgt.n	80022fa <main+0x86a>
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 80022f8:	e029      	b.n	800234e <main+0x8be>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 80022fa:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <main+0x89c>)
 80022fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002300:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230c:	dc00      	bgt.n	8002310 <main+0x880>
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 800230e:	e01e      	b.n	800234e <main+0x8be>
				loop_counter = 0;
 8002310:	4a08      	ldr	r2, [pc, #32]	@ (8002334 <main+0x8a4>)
 8002312:	2300      	movs	r3, #0
 8002314:	6013      	str	r3, [r2, #0]
				TargetR = 4.18879;
 8002316:	4a08      	ldr	r2, [pc, #32]	@ (8002338 <main+0x8a8>)
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <main+0x8ac>)
 800231a:	6013      	str	r3, [r2, #0]
				TargetP = 50;
 800231c:	4a08      	ldr	r2, [pc, #32]	@ (8002340 <main+0x8b0>)
 800231e:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <main+0x8b4>)
 8002320:	6013      	str	r3, [r2, #0]
				Mode = 8;
 8002322:	4a03      	ldr	r2, [pc, #12]	@ (8002330 <main+0x8a0>)
 8002324:	2308      	movs	r3, #8
 8002326:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 8002328:	e011      	b.n	800234e <main+0x8be>
 800232a:	e010      	b.n	800234e <main+0x8be>
 800232c:	20000a28 	.word	0x20000a28
 8002330:	20000b28 	.word	0x20000b28
 8002334:	20000b98 	.word	0x20000b98
 8002338:	20000b00 	.word	0x20000b00
 800233c:	40860a91 	.word	0x40860a91
 8002340:	20000b04 	.word	0x20000b04
 8002344:	42480000 	.word	0x42480000
			}
		} else {
			IsPress = 0;
 8002348:	4ac7      	ldr	r2, [pc, #796]	@ (8002668 <main+0xbd8>)
 800234a:	2300      	movs	r3, #0
 800234c:	7013      	strb	r3, [r2, #0]
//			}
//		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<SERVO>> ///////////////////////////
		if (micros() - servo_timer > 200000 && Pen_Status_in == 0) {
 800234e:	f001 fcef 	bl	8003d30 <micros>
 8002352:	4bc6      	ldr	r3, [pc, #792]	@ (800266c <main+0xbdc>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	1a84      	subs	r4, r0, r2
 800235a:	eb61 0503 	sbc.w	r5, r1, r3
 800235e:	4bc4      	ldr	r3, [pc, #784]	@ (8002670 <main+0xbe0>)
 8002360:	429c      	cmp	r4, r3
 8002362:	f175 0300 	sbcs.w	r3, r5, #0
 8002366:	d308      	bcc.n	800237a <main+0x8ea>
 8002368:	4bc2      	ldr	r3, [pc, #776]	@ (8002674 <main+0xbe4>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d104      	bne.n	800237a <main+0x8ea>
			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 8002370:	4bc1      	ldr	r3, [pc, #772]	@ (8002678 <main+0xbe8>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002378:	6353      	str	r3, [r2, #52]	@ 0x34
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<STOP>> ////////////////////////////
		if (Mode == 0) {
 800237a:	4bc0      	ldr	r3, [pc, #768]	@ (800267c <main+0xbec>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10c      	bne.n	800239c <main+0x90c>
			Set_Motor(0, 0);
 8002382:	ed9f 0abf 	vldr	s0, [pc, #764]	@ 8002680 <main+0xbf0>
 8002386:	2000      	movs	r0, #0
 8002388:	f001 ff2e 	bl	80041e8 <Set_Motor>
			Set_Motor(1, 0);
 800238c:	ed9f 0abc 	vldr	s0, [pc, #752]	@ 8002680 <main+0xbf0>
 8002390:	2001      	movs	r0, #1
 8002392:	f001 ff29 	bl	80041e8 <Set_Motor>
			Set_Servo(0);
 8002396:	2000      	movs	r0, #0
 8002398:	f001 ffa4 	bl	80042e4 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MANUAL>> //////////////////////////
		if (Mode == 1) {
 800239c:	4bb7      	ldr	r3, [pc, #732]	@ (800267c <main+0xbec>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	f040 8102 	bne.w	80025aa <main+0xb1a>
			//////////////////////// <<CONTROL>> /////////////////////////
//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
			TargetRVel =
					(map((float) Receiver[0], -100.00, 100.00, -1.00, 1.00))
 80023a6:	4bb7      	ldr	r3, [pc, #732]	@ (8002684 <main+0xbf4>)
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 80023b0:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 80023b4:	ed9f 1ab4 	vldr	s2, [pc, #720]	@ 8002688 <main+0xbf8>
 80023b8:	eddf 0ab4 	vldr	s1, [pc, #720]	@ 800268c <main+0xbfc>
 80023bc:	eeb0 0a67 	vmov.f32	s0, s15
 80023c0:	f001 fba8 	bl	8003b14 <map>
 80023c4:	eef0 7a40 	vmov.f32	s15, s0
							* -1;
 80023c8:	eef1 7a67 	vneg.f32	s15, s15
			TargetRVel =
 80023cc:	4bb0      	ldr	r3, [pc, #704]	@ (8002690 <main+0xc00>)
 80023ce:	edc3 7a00 	vstr	s15, [r3]
			TargetPVel = map((float) Receiver[1], -100.00, 100.00, -500.00,
 80023d2:	4bac      	ldr	r3, [pc, #688]	@ (8002684 <main+0xbf4>)
 80023d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80023d8:	ed9f 2aae 	vldr	s4, [pc, #696]	@ 8002694 <main+0xc04>
 80023dc:	eddf 1aae 	vldr	s3, [pc, #696]	@ 8002698 <main+0xc08>
 80023e0:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 8002688 <main+0xbf8>
 80023e4:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 800268c <main+0xbfc>
 80023e8:	eeb0 0a67 	vmov.f32	s0, s15
 80023ec:	f001 fb92 	bl	8003b14 <map>
 80023f0:	eef0 7a40 	vmov.f32	s15, s0
 80023f4:	4ba9      	ldr	r3, [pc, #676]	@ (800269c <main+0xc0c>)
 80023f6:	edc3 7a00 	vstr	s15, [r3]
					500.00);
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MOTOR>> ///////////////////////////
			R_Velo_Error = (TargetRVel - Revolute_QEIdata.AngularVelocity_rad)
 80023fa:	4ba5      	ldr	r3, [pc, #660]	@ (8002690 <main+0xc00>)
 80023fc:	ed93 7a00 	vldr	s14, [r3]
 8002400:	4ba7      	ldr	r3, [pc, #668]	@ (80026a0 <main+0xc10>)
 8002402:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002406:	ee77 7a67 	vsub.f32	s15, s14, s15
					* -1;
 800240a:	eef1 7a67 	vneg.f32	s15, s15
			R_Velo_Error = (TargetRVel - Revolute_QEIdata.AngularVelocity_rad)
 800240e:	4ba5      	ldr	r3, [pc, #660]	@ (80026a4 <main+0xc14>)
 8002410:	edc3 7a00 	vstr	s15, [r3]
			P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity_mm;
 8002414:	4ba1      	ldr	r3, [pc, #644]	@ (800269c <main+0xc0c>)
 8002416:	ed93 7a00 	vldr	s14, [r3]
 800241a:	4ba3      	ldr	r3, [pc, #652]	@ (80026a8 <main+0xc18>)
 800241c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002424:	4ba1      	ldr	r3, [pc, #644]	@ (80026ac <main+0xc1c>)
 8002426:	edc3 7a00 	vstr	s15, [r3]
//			PID.Kd = 0.0;
//			arm_pid_init_f32(&PID, 1);
//			P_Speed = arm_pid_f32(&PID, P_Velo_Error);

			static uint64_t timestampState1 = 0;
			int64_t currentTimeState1 = micros();
 800242a:	f001 fc81 	bl	8003d30 <micros>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
			if (currentTimeState1 > timestampState1) {
 8002436:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800243a:	4b9d      	ldr	r3, [pc, #628]	@ (80026b0 <main+0xc20>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	4282      	cmp	r2, r0
 8002442:	418b      	sbcs	r3, r1
 8002444:	d23f      	bcs.n	80024c6 <main+0xa36>
				timestampState1 = currentTimeState1 + 10000;		//us
 8002446:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800244a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800244e:	1851      	adds	r1, r2, r1
 8002450:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002452:	f143 0300 	adc.w	r3, r3, #0
 8002456:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002458:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800245c:	4b94      	ldr	r3, [pc, #592]	@ (80026b0 <main+0xc20>)
 800245e:	e9c3 0100 	strd	r0, r1, [r3]
				R_Speed = PID_Update(R_Velo_Error, 100.00f, 0.10f, 0.00f, 0.01f,
 8002462:	4b90      	ldr	r3, [pc, #576]	@ (80026a4 <main+0xc14>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	4892      	ldr	r0, [pc, #584]	@ (80026b4 <main+0xc24>)
 800246a:	ed9f 3a87 	vldr	s6, [pc, #540]	@ 8002688 <main+0xbf8>
 800246e:	eddf 2a87 	vldr	s5, [pc, #540]	@ 800268c <main+0xbfc>
 8002472:	ed9f 2a91 	vldr	s4, [pc, #580]	@ 80026b8 <main+0xc28>
 8002476:	eddf 1a82 	vldr	s3, [pc, #520]	@ 8002680 <main+0xbf0>
 800247a:	ed9f 1a90 	vldr	s2, [pc, #576]	@ 80026bc <main+0xc2c>
 800247e:	eddf 0a82 	vldr	s1, [pc, #520]	@ 8002688 <main+0xbf8>
 8002482:	eeb0 0a67 	vmov.f32	s0, s15
 8002486:	f001 fc6d 	bl	8003d64 <PID_Update>
 800248a:	eef0 7a40 	vmov.f32	s15, s0
 800248e:	4b8c      	ldr	r3, [pc, #560]	@ (80026c0 <main+0xc30>)
 8002490:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_r_v);
				P_Speed = PID_Update(P_Velo_Error, 0.2f, 1.5f, 0.00f, 0.01f,
 8002494:	4b85      	ldr	r3, [pc, #532]	@ (80026ac <main+0xc1c>)
 8002496:	edd3 7a00 	vldr	s15, [r3]
 800249a:	488a      	ldr	r0, [pc, #552]	@ (80026c4 <main+0xc34>)
 800249c:	ed9f 3a7a 	vldr	s6, [pc, #488]	@ 8002688 <main+0xbf8>
 80024a0:	eddf 2a7a 	vldr	s5, [pc, #488]	@ 800268c <main+0xbfc>
 80024a4:	ed9f 2a84 	vldr	s4, [pc, #528]	@ 80026b8 <main+0xc28>
 80024a8:	eddf 1a75 	vldr	s3, [pc, #468]	@ 8002680 <main+0xbf0>
 80024ac:	eeb7 1a08 	vmov.f32	s2, #120	@ 0x3fc00000  1.5
 80024b0:	eddf 0a85 	vldr	s1, [pc, #532]	@ 80026c8 <main+0xc38>
 80024b4:	eeb0 0a67 	vmov.f32	s0, s15
 80024b8:	f001 fc54 	bl	8003d64 <PID_Update>
 80024bc:	eef0 7a40 	vmov.f32	s15, s0
 80024c0:	4b82      	ldr	r3, [pc, #520]	@ (80026cc <main+0xc3c>)
 80024c2:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_p_v);
			}

			R_Speed = Receiver[0];
 80024c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002684 <main+0xbf4>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b7d      	ldr	r3, [pc, #500]	@ (80026c0 <main+0xc30>)
 80024cc:	601a      	str	r2, [r3, #0]
//			P_Speed = Receiver[1];

			if (Revolute_QEIdata.RadPosition < -1.91986 && R_Speed > 0) {
 80024ce:	4b74      	ldr	r3, [pc, #464]	@ (80026a0 <main+0xc10>)
 80024d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f804 	bl	80004e0 <__aeabi_f2d>
 80024d8:	a35f      	add	r3, pc, #380	@ (adr r3, 8002658 <main+0xbc8>)
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	f7fe fac9 	bl	8000a74 <__aeabi_dcmplt>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00b      	beq.n	8002500 <main+0xa70>
 80024e8:	4b75      	ldr	r3, [pc, #468]	@ (80026c0 <main+0xc30>)
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	dd03      	ble.n	8002500 <main+0xa70>
				R_Speed = 0;
 80024f8:	4a71      	ldr	r2, [pc, #452]	@ (80026c0 <main+0xc30>)
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	6013      	str	r3, [r2, #0]
			}
			if (Revolute_QEIdata.RadPosition > 5.06145 && R_Speed < 0) {
 8002500:	4b67      	ldr	r3, [pc, #412]	@ (80026a0 <main+0xc10>)
 8002502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002504:	4618      	mov	r0, r3
 8002506:	f7fd ffeb 	bl	80004e0 <__aeabi_f2d>
 800250a:	a355      	add	r3, pc, #340	@ (adr r3, 8002660 <main+0xbd0>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f7fe face 	bl	8000ab0 <__aeabi_dcmpgt>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <main+0xaa2>
 800251a:	4b69      	ldr	r3, [pc, #420]	@ (80026c0 <main+0xc30>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002528:	d503      	bpl.n	8002532 <main+0xaa2>
				R_Speed = 0;
 800252a:	4a65      	ldr	r2, [pc, #404]	@ (80026c0 <main+0xc30>)
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition > 305 && P_Speed > 0) {
 8002532:	4b5d      	ldr	r3, [pc, #372]	@ (80026a8 <main+0xc18>)
 8002534:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002538:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80026d0 <main+0xc40>
 800253c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002544:	dd0b      	ble.n	800255e <main+0xace>
 8002546:	4b61      	ldr	r3, [pc, #388]	@ (80026cc <main+0xc3c>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002554:	dd03      	ble.n	800255e <main+0xace>
				P_Speed = 0;
 8002556:	4a5d      	ldr	r2, [pc, #372]	@ (80026cc <main+0xc3c>)
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition < -1 && P_Speed < 0) {
 800255e:	4b52      	ldr	r3, [pc, #328]	@ (80026a8 <main+0xc18>)
 8002560:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002564:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800256c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002570:	d50b      	bpl.n	800258a <main+0xafa>
 8002572:	4b56      	ldr	r3, [pc, #344]	@ (80026cc <main+0xc3c>)
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800257c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002580:	d503      	bpl.n	800258a <main+0xafa>
				P_Speed = 0;
 8002582:	4a52      	ldr	r2, [pc, #328]	@ (80026cc <main+0xc3c>)
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	6013      	str	r3, [r2, #0]
			}

			Set_Motor(0, R_Speed);
 800258a:	4b4d      	ldr	r3, [pc, #308]	@ (80026c0 <main+0xc30>)
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	eeb0 0a67 	vmov.f32	s0, s15
 8002594:	2000      	movs	r0, #0
 8002596:	f001 fe27 	bl	80041e8 <Set_Motor>
			Set_Motor(1, P_Speed);
 800259a:	4b4c      	ldr	r3, [pc, #304]	@ (80026cc <main+0xc3c>)
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	eeb0 0a67 	vmov.f32	s0, s15
 80025a4:	2001      	movs	r0, #1
 80025a6:	f001 fe1f 	bl	80041e8 <Set_Motor>
			//////////////////////////////////////////////////////////////
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<GOTO>> ////////////////////////////
		if (Mode == 2) {
 80025aa:	4b34      	ldr	r3, [pc, #208]	@ (800267c <main+0xbec>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	f040 8105 	bne.w	80027be <main+0xd2e>
			R_Pos_Error = (TargetR - Revolute_QEIdata.RadPosition) * -1;
 80025b4:	4b47      	ldr	r3, [pc, #284]	@ (80026d4 <main+0xc44>)
 80025b6:	ed93 7a00 	vldr	s14, [r3]
 80025ba:	4b39      	ldr	r3, [pc, #228]	@ (80026a0 <main+0xc10>)
 80025bc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80025c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c4:	eef1 7a67 	vneg.f32	s15, s15
 80025c8:	4b43      	ldr	r3, [pc, #268]	@ (80026d8 <main+0xc48>)
 80025ca:	edc3 7a00 	vstr	s15, [r3]
//			PID.Ki = 10;
//			PID.Kd = 0.1;
//			arm_pid_init_f32(&PID, 1);
//			R_Speed = arm_pid_f32(&PID, R_Pos_Error);
//
			P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 80025ce:	4b43      	ldr	r3, [pc, #268]	@ (80026dc <main+0xc4c>)
 80025d0:	ed93 7a00 	vldr	s14, [r3]
 80025d4:	4b34      	ldr	r3, [pc, #208]	@ (80026a8 <main+0xc18>)
 80025d6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80025da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025de:	4b40      	ldr	r3, [pc, #256]	@ (80026e0 <main+0xc50>)
 80025e0:	edc3 7a00 	vstr	s15, [r3]
//			PID.Kd = 0.25;
//			arm_pid_init_f32(&PID, 1);
//			P_Speed = arm_pid_f32(&PID, P_Pos_Error);

			static uint64_t timestampState2 = 0;
			int64_t currentTimeState2 = micros();
 80025e4:	f001 fba4 	bl	8003d30 <micros>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
			if (currentTimeState2 > timestampState2) {
 80025f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80025f4:	4b3b      	ldr	r3, [pc, #236]	@ (80026e4 <main+0xc54>)
 80025f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fa:	4282      	cmp	r2, r0
 80025fc:	418b      	sbcs	r3, r1
 80025fe:	f080 808b 	bcs.w	8002718 <main+0xc88>
				timestampState2 = currentTimeState2 + 10000;		//us
 8002602:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002606:	f242 7110 	movw	r1, #10000	@ 0x2710
 800260a:	1851      	adds	r1, r2, r1
 800260c:	6539      	str	r1, [r7, #80]	@ 0x50
 800260e:	f143 0300 	adc.w	r3, r3, #0
 8002612:	657b      	str	r3, [r7, #84]	@ 0x54
 8002614:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002618:	4b32      	ldr	r3, [pc, #200]	@ (80026e4 <main+0xc54>)
 800261a:	e9c3 0100 	strd	r0, r1, [r3]
				R_Speed = PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f, 0.01f,
 800261e:	4b2e      	ldr	r3, [pc, #184]	@ (80026d8 <main+0xc48>)
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	4830      	ldr	r0, [pc, #192]	@ (80026e8 <main+0xc58>)
 8002626:	ed9f 3a18 	vldr	s6, [pc, #96]	@ 8002688 <main+0xbf8>
 800262a:	eddf 2a18 	vldr	s5, [pc, #96]	@ 800268c <main+0xbfc>
 800262e:	ed9f 2a22 	vldr	s4, [pc, #136]	@ 80026b8 <main+0xc28>
 8002632:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 8002636:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 800263a:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 800263e:	eeb0 0a67 	vmov.f32	s0, s15
 8002642:	f001 fb8f 	bl	8003d64 <PID_Update>
 8002646:	eef0 7a40 	vmov.f32	s15, s0
 800264a:	4b1d      	ldr	r3, [pc, #116]	@ (80026c0 <main+0xc30>)
 800264c:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_r);
				P_Speed = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f,
 8002650:	4b23      	ldr	r3, [pc, #140]	@ (80026e0 <main+0xc50>)
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	e049      	b.n	80026ec <main+0xc5c>
 8002658:	1e8e6080 	.word	0x1e8e6080
 800265c:	bffeb7bf 	.word	0xbffeb7bf
 8002660:	bfb15b57 	.word	0xbfb15b57
 8002664:	40143eec 	.word	0x40143eec
 8002668:	20000b2a 	.word	0x20000b2a
 800266c:	20000b90 	.word	0x20000b90
 8002670:	00030d41 	.word	0x00030d41
 8002674:	20000b2c 	.word	0x20000b2c
 8002678:	200006fc 	.word	0x200006fc
 800267c:	20000b28 	.word	0x20000b28
 8002680:	00000000 	.word	0x00000000
 8002684:	20000a28 	.word	0x20000a28
 8002688:	42c80000 	.word	0x42c80000
 800268c:	c2c80000 	.word	0xc2c80000
 8002690:	20000b08 	.word	0x20000b08
 8002694:	43fa0000 	.word	0x43fa0000
 8002698:	c3fa0000 	.word	0xc3fa0000
 800269c:	20000b0c 	.word	0x20000b0c
 80026a0:	20000a70 	.word	0x20000a70
 80026a4:	20000b18 	.word	0x20000b18
 80026a8:	20000ab0 	.word	0x20000ab0
 80026ac:	20000b1c 	.word	0x20000b1c
 80026b0:	20001220 	.word	0x20001220
 80026b4:	20000b6c 	.word	0x20000b6c
 80026b8:	3c23d70a 	.word	0x3c23d70a
 80026bc:	3dcccccd 	.word	0x3dcccccd
 80026c0:	20000b20 	.word	0x20000b20
 80026c4:	20000b74 	.word	0x20000b74
 80026c8:	3e4ccccd 	.word	0x3e4ccccd
 80026cc:	20000b24 	.word	0x20000b24
 80026d0:	43988000 	.word	0x43988000
 80026d4:	20000b00 	.word	0x20000b00
 80026d8:	20000b10 	.word	0x20000b10
 80026dc:	20000b04 	.word	0x20000b04
 80026e0:	20000b14 	.word	0x20000b14
 80026e4:	20001228 	.word	0x20001228
 80026e8:	20000b5c 	.word	0x20000b5c
 80026ec:	48c7      	ldr	r0, [pc, #796]	@ (8002a0c <main+0xf7c>)
 80026ee:	ed9f 3ac8 	vldr	s6, [pc, #800]	@ 8002a10 <main+0xf80>
 80026f2:	eddf 2ac8 	vldr	s5, [pc, #800]	@ 8002a14 <main+0xf84>
 80026f6:	ed9f 2ac8 	vldr	s4, [pc, #800]	@ 8002a18 <main+0xf88>
 80026fa:	eddf 1ac8 	vldr	s3, [pc, #800]	@ 8002a1c <main+0xf8c>
 80026fe:	ed9f 1ac8 	vldr	s2, [pc, #800]	@ 8002a20 <main+0xf90>
 8002702:	eddf 0ac8 	vldr	s1, [pc, #800]	@ 8002a24 <main+0xf94>
 8002706:	eeb0 0a67 	vmov.f32	s0, s15
 800270a:	f001 fb2b 	bl	8003d64 <PID_Update>
 800270e:	eef0 7a40 	vmov.f32	s15, s0
 8002712:	4bc5      	ldr	r3, [pc, #788]	@ (8002a28 <main+0xf98>)
 8002714:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_p);
			}

			Set_Motor(0, R_Speed);
 8002718:	4bc4      	ldr	r3, [pc, #784]	@ (8002a2c <main+0xf9c>)
 800271a:	edd3 7a00 	vldr	s15, [r3]
 800271e:	eeb0 0a67 	vmov.f32	s0, s15
 8002722:	2000      	movs	r0, #0
 8002724:	f001 fd60 	bl	80041e8 <Set_Motor>
			Set_Motor(1, P_Speed);
 8002728:	4bbf      	ldr	r3, [pc, #764]	@ (8002a28 <main+0xf98>)
 800272a:	edd3 7a00 	vldr	s15, [r3]
 800272e:	eeb0 0a67 	vmov.f32	s0, s15
 8002732:	2001      	movs	r0, #1
 8002734:	f001 fd58 	bl	80041e8 <Set_Motor>
			if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 8002738:	4bbd      	ldr	r3, [pc, #756]	@ (8002a30 <main+0xfa0>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	eef0 7ae7 	vabs.f32	s15, s15
 8002742:	ed9f 7abc 	vldr	s14, [pc, #752]	@ 8002a34 <main+0xfa4>
 8002746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274e:	d52d      	bpl.n	80027ac <main+0xd1c>
					&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 8002750:	4bb9      	ldr	r3, [pc, #740]	@ (8002a38 <main+0xfa8>)
 8002752:	edd3 7a00 	vldr	s15, [r3]
 8002756:	eef0 7ae7 	vabs.f32	s15, s15
 800275a:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8002a3c <main+0xfac>
 800275e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002766:	d521      	bpl.n	80027ac <main+0xd1c>
				/* within window —— start or continue timer */
				if (lock_timer_us == 0)
 8002768:	4bb5      	ldr	r3, [pc, #724]	@ (8002a40 <main+0xfb0>)
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	4313      	orrs	r3, r2
 8002770:	d107      	bne.n	8002782 <main+0xcf2>
					lock_timer_us = micros(); /* start timing */
 8002772:	f001 fadd 	bl	8003d30 <micros>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	49b1      	ldr	r1, [pc, #708]	@ (8002a40 <main+0xfb0>)
 800277c:	e9c1 2300 	strd	r2, r3, [r1]
				if (lock_timer_us == 0)
 8002780:	e01c      	b.n	80027bc <main+0xd2c>

				else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8002782:	f001 fad5 	bl	8003d30 <micros>
 8002786:	4bae      	ldr	r3, [pc, #696]	@ (8002a40 <main+0xfb0>)
 8002788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278c:	ebb0 0802 	subs.w	r8, r0, r2
 8002790:	eb61 0903 	sbc.w	r9, r1, r3
 8002794:	4bab      	ldr	r3, [pc, #684]	@ (8002a44 <main+0xfb4>)
 8002796:	4598      	cmp	r8, r3
 8002798:	f179 0300 	sbcs.w	r3, r9, #0
 800279c:	d30e      	bcc.n	80027bc <main+0xd2c>
					Set_Servo(1);
 800279e:	2001      	movs	r0, #1
 80027a0:	f001 fda0 	bl	80042e4 <Set_Servo>
					Mode = 1;
 80027a4:	4aa8      	ldr	r2, [pc, #672]	@ (8002a48 <main+0xfb8>)
 80027a6:	2301      	movs	r3, #1
 80027a8:	7013      	strb	r3, [r2, #0]
				if (lock_timer_us == 0)
 80027aa:	e007      	b.n	80027bc <main+0xd2c>
				}
			} else {
				lock_timer_us = 0;
 80027ac:	49a4      	ldr	r1, [pc, #656]	@ (8002a40 <main+0xfb0>)
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	e9c1 2300 	strd	r2, r3, [r1]
 80027ba:	e000      	b.n	80027be <main+0xd2e>
				if (lock_timer_us == 0)
 80027bc:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<CALIBRATING>> /////////////////////
		if (Mode == 3) {
 80027be:	4ba2      	ldr	r3, [pc, #648]	@ (8002a48 <main+0xfb8>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	f040 8272 	bne.w	8002cac <main+0x121c>
			switch (calibState) {
 80027c8:	4ba0      	ldr	r3, [pc, #640]	@ (8002a4c <main+0xfbc>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	f200 826d 	bhi.w	8002cac <main+0x121c>
 80027d2:	a201      	add	r2, pc, #4	@ (adr r2, 80027d8 <main+0xd48>)
 80027d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d8:	0800280d 	.word	0x0800280d
 80027dc:	08002843 	.word	0x08002843
 80027e0:	08002889 	.word	0x08002889
 80027e4:	080028d3 	.word	0x080028d3
 80027e8:	0800291d 	.word	0x0800291d
 80027ec:	08002975 	.word	0x08002975
 80027f0:	080029cd 	.word	0x080029cd
 80027f4:	08002a79 	.word	0x08002a79
 80027f8:	08002ad7 	.word	0x08002ad7
 80027fc:	08002b43 	.word	0x08002b43
 8002800:	08002baf 	.word	0x08002baf
 8002804:	08002c19 	.word	0x08002c19
 8002808:	08002c6b 	.word	0x08002c6b
			case CALIB_IDLE:
				Set_Motor(0, 0);
 800280c:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8002a50 <main+0xfc0>
 8002810:	2000      	movs	r0, #0
 8002812:	f001 fce9 	bl	80041e8 <Set_Motor>
				Set_Motor(1, 0);
 8002816:	ed9f 0a8e 	vldr	s0, [pc, #568]	@ 8002a50 <main+0xfc0>
 800281a:	2001      	movs	r0, #1
 800281c:	f001 fce4 	bl	80041e8 <Set_Motor>
				P_Limit = 0;
 8002820:	4a8c      	ldr	r2, [pc, #560]	@ (8002a54 <main+0xfc4>)
 8002822:	2300      	movs	r3, #0
 8002824:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8002826:	4a8c      	ldr	r2, [pc, #560]	@ (8002a58 <main+0xfc8>)
 8002828:	2300      	movs	r3, #0
 800282a:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 800282c:	4a87      	ldr	r2, [pc, #540]	@ (8002a4c <main+0xfbc>)
 800282e:	2301      	movs	r3, #1
 8002830:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 8002832:	f001 fa7d 	bl	8003d30 <micros>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4988      	ldr	r1, [pc, #544]	@ (8002a5c <main+0xfcc>)
 800283c:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8002840:	e234      	b.n	8002cac <main+0x121c>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80) {
 8002842:	4b87      	ldr	r3, [pc, #540]	@ (8002a60 <main+0xfd0>)
 8002844:	edd3 7a00 	vldr	s15, [r3]
 8002848:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002a64 <main+0xfd4>
 800284c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	dd06      	ble.n	8002864 <main+0xdd4>
					Cal_Side = 1;
 8002856:	4a84      	ldr	r2, [pc, #528]	@ (8002a68 <main+0xfd8>)
 8002858:	2301      	movs	r3, #1
 800285a:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 800285c:	4a7b      	ldr	r2, [pc, #492]	@ (8002a4c <main+0xfbc>)
 800285e:	2302      	movs	r3, #2
 8002860:	7013      	strb	r3, [r2, #0]
				} else if (Receiver[0] < -80) {
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 8002862:	e223      	b.n	8002cac <main+0x121c>
				} else if (Receiver[0] < -80) {
 8002864:	4b7e      	ldr	r3, [pc, #504]	@ (8002a60 <main+0xfd0>)
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002a6c <main+0xfdc>
 800286e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002876:	d400      	bmi.n	800287a <main+0xdea>
				break;
 8002878:	e218      	b.n	8002cac <main+0x121c>
					Cal_Side = 2;
 800287a:	4a7b      	ldr	r2, [pc, #492]	@ (8002a68 <main+0xfd8>)
 800287c:	2302      	movs	r3, #2
 800287e:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002880:	4a72      	ldr	r2, [pc, #456]	@ (8002a4c <main+0xfbc>)
 8002882:	2302      	movs	r3, #2
 8002884:	7013      	strb	r3, [r2, #0]
				break;
 8002886:	e211      	b.n	8002cac <main+0x121c>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -15);
 8002888:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 800288c:	2001      	movs	r0, #1
 800288e:	f001 fcab 	bl	80041e8 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8002892:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002896:	4876      	ldr	r0, [pc, #472]	@ (8002a70 <main+0xfe0>)
 8002898:	f002 ff2c 	bl	80056f4 <HAL_GPIO_ReadPin>
 800289c:	4603      	mov	r3, r0
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d004      	beq.n	80028ac <main+0xe1c>
 80028a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002a54 <main+0xfc4>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 81ef 	beq.w	8002c8a <main+0x11fa>
					Set_Motor(1, 0);
 80028ac:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 8002a50 <main+0xfc0>
 80028b0:	2001      	movs	r0, #1
 80028b2:	f001 fc99 	bl	80041e8 <Set_Motor>
					calib_timer = micros();
 80028b6:	f001 fa3b 	bl	8003d30 <micros>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4967      	ldr	r1, [pc, #412]	@ (8002a5c <main+0xfcc>)
 80028c0:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80028c4:	4a63      	ldr	r2, [pc, #396]	@ (8002a54 <main+0xfc4>)
 80028c6:	2300      	movs	r3, #0
 80028c8:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 80028ca:	4a60      	ldr	r2, [pc, #384]	@ (8002a4c <main+0xfbc>)
 80028cc:	2303      	movs	r3, #3
 80028ce:	7013      	strb	r3, [r2, #0]
				}
				break;
 80028d0:	e1db      	b.n	8002c8a <main+0x11fa>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 80028d2:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8002a50 <main+0xfc0>
 80028d6:	2001      	movs	r0, #1
 80028d8:	f001 fc86 	bl	80041e8 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 80028dc:	f001 fa28 	bl	8003d30 <micros>
 80028e0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a5c <main+0xfcc>)
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	ebb0 0a02 	subs.w	sl, r0, r2
 80028ea:	eb61 0b03 	sbc.w	fp, r1, r3
 80028ee:	4b61      	ldr	r3, [pc, #388]	@ (8002a74 <main+0xfe4>)
 80028f0:	459a      	cmp	sl, r3
 80028f2:	f17b 0300 	sbcs.w	r3, fp, #0
 80028f6:	d311      	bcc.n	800291c <main+0xe8c>
					Set_Motor(1, 15);
 80028f8:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 80028fc:	2001      	movs	r0, #1
 80028fe:	f001 fc73 	bl	80041e8 <Set_Motor>
					calib_timer = micros();
 8002902:	f001 fa15 	bl	8003d30 <micros>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4954      	ldr	r1, [pc, #336]	@ (8002a5c <main+0xfcc>)
 800290c:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002910:	4a50      	ldr	r2, [pc, #320]	@ (8002a54 <main+0xfc4>)
 8002912:	2300      	movs	r3, #0
 8002914:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 8002916:	4a4d      	ldr	r2, [pc, #308]	@ (8002a4c <main+0xfbc>)
 8002918:	2304      	movs	r3, #4
 800291a:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 15);
 800291c:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002920:	2001      	movs	r0, #1
 8002922:	f001 fc61 	bl	80041e8 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002926:	f001 fa03 	bl	8003d30 <micros>
 800292a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a5c <main+0xfcc>)
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	1a86      	subs	r6, r0, r2
 8002932:	64be      	str	r6, [r7, #72]	@ 0x48
 8002934:	eb61 0303 	sbc.w	r3, r1, r3
 8002938:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800293a:	4b4e      	ldr	r3, [pc, #312]	@ (8002a74 <main+0xfe4>)
 800293c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002940:	4602      	mov	r2, r0
 8002942:	429a      	cmp	r2, r3
 8002944:	460b      	mov	r3, r1
 8002946:	f173 0300 	sbcs.w	r3, r3, #0
 800294a:	f0c0 81a0 	bcc.w	8002c8e <main+0x11fe>
					Set_Motor(1, 0);
 800294e:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8002a50 <main+0xfc0>
 8002952:	2001      	movs	r0, #1
 8002954:	f001 fc48 	bl	80041e8 <Set_Motor>
					calib_timer = micros();
 8002958:	f001 f9ea 	bl	8003d30 <micros>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	493e      	ldr	r1, [pc, #248]	@ (8002a5c <main+0xfcc>)
 8002962:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002966:	4a3b      	ldr	r2, [pc, #236]	@ (8002a54 <main+0xfc4>)
 8002968:	2300      	movs	r3, #0
 800296a:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 800296c:	4a37      	ldr	r2, [pc, #220]	@ (8002a4c <main+0xfbc>)
 800296e:	2305      	movs	r3, #5
 8002970:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002972:	e18c      	b.n	8002c8e <main+0x11fe>

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 8002974:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8002a50 <main+0xfc0>
 8002978:	2001      	movs	r0, #1
 800297a:	f001 fc35 	bl	80041e8 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 800297e:	f001 f9d7 	bl	8003d30 <micros>
 8002982:	4b36      	ldr	r3, [pc, #216]	@ (8002a5c <main+0xfcc>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	1a86      	subs	r6, r0, r2
 800298a:	643e      	str	r6, [r7, #64]	@ 0x40
 800298c:	eb61 0303 	sbc.w	r3, r1, r3
 8002990:	647b      	str	r3, [r7, #68]	@ 0x44
 8002992:	4b38      	ldr	r3, [pc, #224]	@ (8002a74 <main+0xfe4>)
 8002994:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002998:	4602      	mov	r2, r0
 800299a:	429a      	cmp	r2, r3
 800299c:	460b      	mov	r3, r1
 800299e:	f173 0300 	sbcs.w	r3, r3, #0
 80029a2:	f0c0 8176 	bcc.w	8002c92 <main+0x1202>
					Set_Motor(1, -5);
 80029a6:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 80029aa:	2001      	movs	r0, #1
 80029ac:	f001 fc1c 	bl	80041e8 <Set_Motor>
					calib_timer = micros();
 80029b0:	f001 f9be 	bl	8003d30 <micros>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4928      	ldr	r1, [pc, #160]	@ (8002a5c <main+0xfcc>)
 80029ba:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80029be:	4a25      	ldr	r2, [pc, #148]	@ (8002a54 <main+0xfc4>)
 80029c0:	2300      	movs	r3, #0
 80029c2:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 80029c4:	4a21      	ldr	r2, [pc, #132]	@ (8002a4c <main+0xfbc>)
 80029c6:	2306      	movs	r3, #6
 80029c8:	7013      	strb	r3, [r2, #0]
				}
				break;
 80029ca:	e162      	b.n	8002c92 <main+0x1202>

			case CALIB_RETOUCH_P:
				Set_Motor(1, -5);
 80029cc:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 80029d0:	2001      	movs	r0, #1
 80029d2:	f001 fc09 	bl	80041e8 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 80029d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029da:	4825      	ldr	r0, [pc, #148]	@ (8002a70 <main+0xfe0>)
 80029dc:	f002 fe8a 	bl	80056f4 <HAL_GPIO_ReadPin>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d004      	beq.n	80029f0 <main+0xf60>
 80029e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <main+0xfc4>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 8153 	beq.w	8002c96 <main+0x1206>
					Set_Motor(1, 0);
 80029f0:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8002a50 <main+0xfc0>
 80029f4:	2001      	movs	r0, #1
 80029f6:	f001 fbf7 	bl	80041e8 <Set_Motor>
					Reset_P();
 80029fa:	f001 fcad 	bl	8004358 <Reset_P>
					P_Limit = 0;
 80029fe:	4a15      	ldr	r2, [pc, #84]	@ (8002a54 <main+0xfc4>)
 8002a00:	2300      	movs	r3, #0
 8002a02:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 8002a04:	4a11      	ldr	r2, [pc, #68]	@ (8002a4c <main+0xfbc>)
 8002a06:	2307      	movs	r3, #7
 8002a08:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002a0a:	e144      	b.n	8002c96 <main+0x1206>
 8002a0c:	20000b64 	.word	0x20000b64
 8002a10:	42c80000 	.word	0x42c80000
 8002a14:	c2c80000 	.word	0xc2c80000
 8002a18:	3c23d70a 	.word	0x3c23d70a
 8002a1c:	3e19999a 	.word	0x3e19999a
 8002a20:	3f99999a 	.word	0x3f99999a
 8002a24:	3eaa7efa 	.word	0x3eaa7efa
 8002a28:	20000b24 	.word	0x20000b24
 8002a2c:	20000b20 	.word	0x20000b20
 8002a30:	20000b10 	.word	0x20000b10
 8002a34:	3d0b4396 	.word	0x3d0b4396
 8002a38:	20000b14 	.word	0x20000b14
 8002a3c:	3dcccccd 	.word	0x3dcccccd
 8002a40:	20000b30 	.word	0x20000b30
 8002a44:	000f4240 	.word	0x000f4240
 8002a48:	20000b28 	.word	0x20000b28
 8002a4c:	20000b7c 	.word	0x20000b7c
 8002a50:	00000000 	.word	0x00000000
 8002a54:	20000b2d 	.word	0x20000b2d
 8002a58:	20000b2e 	.word	0x20000b2e
 8002a5c:	20000b80 	.word	0x20000b80
 8002a60:	20000a28 	.word	0x20000a28
 8002a64:	42a00000 	.word	0x42a00000
 8002a68:	20000b88 	.word	0x20000b88
 8002a6c:	c2a00000 	.word	0xc2a00000
 8002a70:	48000400 	.word	0x48000400
 8002a74:	000186a1 	.word	0x000186a1

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 8002a78:	4bb6      	ldr	r3, [pc, #728]	@ (8002d54 <main+0x12c4>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d105      	bne.n	8002a8c <main+0xffc>
					Set_Motor(0, 30);
 8002a80:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002a84:	2000      	movs	r0, #0
 8002a86:	f001 fbaf 	bl	80041e8 <Set_Motor>
 8002a8a:	e004      	b.n	8002a96 <main+0x1006>
				else
					Set_Motor(0, -30);
 8002a8c:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002a90:	2000      	movs	r0, #0
 8002a92:	f001 fba9 	bl	80041e8 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8002a96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a9a:	48af      	ldr	r0, [pc, #700]	@ (8002d58 <main+0x12c8>)
 8002a9c:	f002 fe2a 	bl	80056f4 <HAL_GPIO_ReadPin>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d004      	beq.n	8002ab0 <main+0x1020>
 8002aa6:	4bad      	ldr	r3, [pc, #692]	@ (8002d5c <main+0x12cc>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80f5 	beq.w	8002c9a <main+0x120a>
					Set_Motor(0, 0);
 8002ab0:	ed9f 0aab 	vldr	s0, [pc, #684]	@ 8002d60 <main+0x12d0>
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f001 fb97 	bl	80041e8 <Set_Motor>
					calib_timer = micros();
 8002aba:	f001 f939 	bl	8003d30 <micros>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	49a8      	ldr	r1, [pc, #672]	@ (8002d64 <main+0x12d4>)
 8002ac4:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002ac8:	4aa4      	ldr	r2, [pc, #656]	@ (8002d5c <main+0x12cc>)
 8002aca:	2300      	movs	r3, #0
 8002acc:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 8002ace:	4aa6      	ldr	r2, [pc, #664]	@ (8002d68 <main+0x12d8>)
 8002ad0:	2308      	movs	r3, #8
 8002ad2:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002ad4:	e0e1      	b.n	8002c9a <main+0x120a>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 8002ad6:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 8002d60 <main+0x12d0>
 8002ada:	2000      	movs	r0, #0
 8002adc:	f001 fb84 	bl	80041e8 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002ae0:	f001 f926 	bl	8003d30 <micros>
 8002ae4:	4b9f      	ldr	r3, [pc, #636]	@ (8002d64 <main+0x12d4>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	1a86      	subs	r6, r0, r2
 8002aec:	63be      	str	r6, [r7, #56]	@ 0x38
 8002aee:	eb61 0303 	sbc.w	r3, r1, r3
 8002af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002af4:	4b9d      	ldr	r3, [pc, #628]	@ (8002d6c <main+0x12dc>)
 8002af6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002afa:	4602      	mov	r2, r0
 8002afc:	429a      	cmp	r2, r3
 8002afe:	460b      	mov	r3, r1
 8002b00:	f173 0300 	sbcs.w	r3, r3, #0
 8002b04:	f0c0 80cb 	bcc.w	8002c9e <main+0x120e>
					if (Cal_Side == 1)
 8002b08:	4b92      	ldr	r3, [pc, #584]	@ (8002d54 <main+0x12c4>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d105      	bne.n	8002b1c <main+0x108c>
						Set_Motor(0, -30);
 8002b10:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002b14:	2000      	movs	r0, #0
 8002b16:	f001 fb67 	bl	80041e8 <Set_Motor>
 8002b1a:	e004      	b.n	8002b26 <main+0x1096>
					else
						Set_Motor(0, 30);
 8002b1c:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002b20:	2000      	movs	r0, #0
 8002b22:	f001 fb61 	bl	80041e8 <Set_Motor>
					calib_timer = micros();
 8002b26:	f001 f903 	bl	8003d30 <micros>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	498d      	ldr	r1, [pc, #564]	@ (8002d64 <main+0x12d4>)
 8002b30:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002b34:	4a89      	ldr	r2, [pc, #548]	@ (8002d5c <main+0x12cc>)
 8002b36:	2300      	movs	r3, #0
 8002b38:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 8002b3a:	4a8b      	ldr	r2, [pc, #556]	@ (8002d68 <main+0x12d8>)
 8002b3c:	2309      	movs	r3, #9
 8002b3e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002b40:	e0ad      	b.n	8002c9e <main+0x120e>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 8002b42:	4b84      	ldr	r3, [pc, #528]	@ (8002d54 <main+0x12c4>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d105      	bne.n	8002b56 <main+0x10c6>
					Set_Motor(0, -30);
 8002b4a:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f001 fb4a 	bl	80041e8 <Set_Motor>
 8002b54:	e004      	b.n	8002b60 <main+0x10d0>
				else
					Set_Motor(0, 30);
 8002b56:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f001 fb44 	bl	80041e8 <Set_Motor>

				if (micros() - calib_timer > 200000) {
 8002b60:	f001 f8e6 	bl	8003d30 <micros>
 8002b64:	4b7f      	ldr	r3, [pc, #508]	@ (8002d64 <main+0x12d4>)
 8002b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6a:	1a86      	subs	r6, r0, r2
 8002b6c:	633e      	str	r6, [r7, #48]	@ 0x30
 8002b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8002b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b74:	4b7e      	ldr	r3, [pc, #504]	@ (8002d70 <main+0x12e0>)
 8002b76:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	460b      	mov	r3, r1
 8002b80:	f173 0300 	sbcs.w	r3, r3, #0
 8002b84:	f0c0 808d 	bcc.w	8002ca2 <main+0x1212>
					Set_Motor(0, 0);
 8002b88:	ed9f 0a75 	vldr	s0, [pc, #468]	@ 8002d60 <main+0x12d0>
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f001 fb2b 	bl	80041e8 <Set_Motor>
					calib_timer = micros();
 8002b92:	f001 f8cd 	bl	8003d30 <micros>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4972      	ldr	r1, [pc, #456]	@ (8002d64 <main+0x12d4>)
 8002b9c:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002ba0:	4a6e      	ldr	r2, [pc, #440]	@ (8002d5c <main+0x12cc>)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 8002ba6:	4a70      	ldr	r2, [pc, #448]	@ (8002d68 <main+0x12d8>)
 8002ba8:	230a      	movs	r3, #10
 8002baa:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002bac:	e079      	b.n	8002ca2 <main+0x1212>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 8002bae:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 8002d60 <main+0x12d0>
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f001 fb18 	bl	80041e8 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002bb8:	f001 f8ba 	bl	8003d30 <micros>
 8002bbc:	4b69      	ldr	r3, [pc, #420]	@ (8002d64 <main+0x12d4>)
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	1a86      	subs	r6, r0, r2
 8002bc4:	62be      	str	r6, [r7, #40]	@ 0x28
 8002bc6:	eb61 0303 	sbc.w	r3, r1, r3
 8002bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bcc:	4b67      	ldr	r3, [pc, #412]	@ (8002d6c <main+0x12dc>)
 8002bce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	f173 0300 	sbcs.w	r3, r3, #0
 8002bdc:	d363      	bcc.n	8002ca6 <main+0x1216>
					if (Cal_Side == 1)
 8002bde:	4b5d      	ldr	r3, [pc, #372]	@ (8002d54 <main+0x12c4>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d105      	bne.n	8002bf2 <main+0x1162>
						Set_Motor(0, 15);
 8002be6:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002bea:	2000      	movs	r0, #0
 8002bec:	f001 fafc 	bl	80041e8 <Set_Motor>
 8002bf0:	e004      	b.n	8002bfc <main+0x116c>
					else
						Set_Motor(0, -15);
 8002bf2:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f001 faf6 	bl	80041e8 <Set_Motor>
					calib_timer = micros();
 8002bfc:	f001 f898 	bl	8003d30 <micros>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4957      	ldr	r1, [pc, #348]	@ (8002d64 <main+0x12d4>)
 8002c06:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002c0a:	4a54      	ldr	r2, [pc, #336]	@ (8002d5c <main+0x12cc>)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 8002c10:	4a55      	ldr	r2, [pc, #340]	@ (8002d68 <main+0x12d8>)
 8002c12:	230b      	movs	r3, #11
 8002c14:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002c16:	e046      	b.n	8002ca6 <main+0x1216>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 8002c18:	4b4e      	ldr	r3, [pc, #312]	@ (8002d54 <main+0x12c4>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <main+0x119c>
					Set_Motor(0, 15);
 8002c20:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002c24:	2000      	movs	r0, #0
 8002c26:	f001 fadf 	bl	80041e8 <Set_Motor>
 8002c2a:	e004      	b.n	8002c36 <main+0x11a6>
				else
					Set_Motor(0, -15);
 8002c2c:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8002c30:	2000      	movs	r0, #0
 8002c32:	f001 fad9 	bl	80041e8 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8002c36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c3a:	4847      	ldr	r0, [pc, #284]	@ (8002d58 <main+0x12c8>)
 8002c3c:	f002 fd5a 	bl	80056f4 <HAL_GPIO_ReadPin>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d003      	beq.n	8002c4e <main+0x11be>
 8002c46:	4b45      	ldr	r3, [pc, #276]	@ (8002d5c <main+0x12cc>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d02d      	beq.n	8002caa <main+0x121a>
					Set_Motor(0, 0);
 8002c4e:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8002d60 <main+0x12d0>
 8002c52:	2000      	movs	r0, #0
 8002c54:	f001 fac8 	bl	80041e8 <Set_Motor>
					Reset_R();
 8002c58:	f001 fb6e 	bl	8004338 <Reset_R>
					R_Limit = 0;
 8002c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8002d5c <main+0x12cc>)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 8002c62:	4a41      	ldr	r2, [pc, #260]	@ (8002d68 <main+0x12d8>)
 8002c64:	230c      	movs	r3, #12
 8002c66:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002c68:	e01f      	b.n	8002caa <main+0x121a>

			case CALIB_DONE:
				Cal_Side = 0;
 8002c6a:	4a3a      	ldr	r2, [pc, #232]	@ (8002d54 <main+0x12c4>)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 8002c70:	4a40      	ldr	r2, [pc, #256]	@ (8002d74 <main+0x12e4>)
 8002c72:	2300      	movs	r3, #0
 8002c74:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 8002c76:	4a40      	ldr	r2, [pc, #256]	@ (8002d78 <main+0x12e8>)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8002c7c:	4a37      	ldr	r2, [pc, #220]	@ (8002d5c <main+0x12cc>)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002c82:	4a39      	ldr	r2, [pc, #228]	@ (8002d68 <main+0x12d8>)
 8002c84:	2300      	movs	r3, #0
 8002c86:	7013      	strb	r3, [r2, #0]
				break;
 8002c88:	e010      	b.n	8002cac <main+0x121c>
				break;
 8002c8a:	bf00      	nop
 8002c8c:	e00e      	b.n	8002cac <main+0x121c>
				break;
 8002c8e:	bf00      	nop
 8002c90:	e00c      	b.n	8002cac <main+0x121c>
				break;
 8002c92:	bf00      	nop
 8002c94:	e00a      	b.n	8002cac <main+0x121c>
				break;
 8002c96:	bf00      	nop
 8002c98:	e008      	b.n	8002cac <main+0x121c>
				break;
 8002c9a:	bf00      	nop
 8002c9c:	e006      	b.n	8002cac <main+0x121c>
				break;
 8002c9e:	bf00      	nop
 8002ca0:	e004      	b.n	8002cac <main+0x121c>
				break;
 8002ca2:	bf00      	nop
 8002ca4:	e002      	b.n	8002cac <main+0x121c>
				break;
 8002ca6:	bf00      	nop
 8002ca8:	e000      	b.n	8002cac <main+0x121c>
				break;
 8002caa:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 6) {
 8002cac:	4b31      	ldr	r3, [pc, #196]	@ (8002d74 <main+0x12e4>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b06      	cmp	r3, #6
 8002cb2:	d102      	bne.n	8002cba <main+0x122a>
			Set_Servo(0);
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f001 fb15 	bl	80042e4 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 7) {
 8002cba:	4b2e      	ldr	r3, [pc, #184]	@ (8002d74 <main+0x12e4>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b07      	cmp	r3, #7
 8002cc0:	d102      	bne.n	8002cc8 <main+0x1238>
			Set_Servo(1);
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f001 fb0e 	bl	80042e4 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 8) {
 8002cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d74 <main+0x12e4>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	f47e af5b 	bne.w	8001b88 <main+0xf8>
			static uint64_t pen_delay_timer;
			if (loop_counter == 1 && micros() - pen_delay_timer < 300000) {
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d7c <main+0x12ec>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d120      	bne.n	8002d1c <main+0x128c>
 8002cda:	f001 f829 	bl	8003d30 <micros>
 8002cde:	4b28      	ldr	r3, [pc, #160]	@ (8002d80 <main+0x12f0>)
 8002ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce4:	1a86      	subs	r6, r0, r2
 8002ce6:	623e      	str	r6, [r7, #32]
 8002ce8:	eb61 0303 	sbc.w	r3, r1, r3
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cee:	4b25      	ldr	r3, [pc, #148]	@ (8002d84 <main+0x12f4>)
 8002cf0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	f173 0300 	sbcs.w	r3, r3, #0
 8002cfe:	d20d      	bcs.n	8002d1c <main+0x128c>
				Set_Motor(0, 0);
 8002d00:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8002d60 <main+0x12d0>
 8002d04:	2000      	movs	r0, #0
 8002d06:	f001 fa6f 	bl	80041e8 <Set_Motor>
				Set_Motor(1, 0);
 8002d0a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8002d60 <main+0x12d0>
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f001 fa6a 	bl	80041e8 <Set_Motor>
				Set_Servo(1);
 8002d14:	2001      	movs	r0, #1
 8002d16:	f001 fae5 	bl	80042e4 <Set_Servo>
 8002d1a:	e175      	b.n	8003008 <main+0x1578>
			} else if (loop_counter == 1
 8002d1c:	4b17      	ldr	r3, [pc, #92]	@ (8002d7c <main+0x12ec>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d133      	bne.n	8002d8c <main+0x12fc>
					&& micros() - pen_delay_timer < 500000) {
 8002d24:	f001 f804 	bl	8003d30 <micros>
 8002d28:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <main+0x12f0>)
 8002d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2e:	1a86      	subs	r6, r0, r2
 8002d30:	61be      	str	r6, [r7, #24]
 8002d32:	eb61 0303 	sbc.w	r3, r1, r3
 8002d36:	61fb      	str	r3, [r7, #28]
 8002d38:	4b13      	ldr	r3, [pc, #76]	@ (8002d88 <main+0x12f8>)
 8002d3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d3e:	4602      	mov	r2, r0
 8002d40:	429a      	cmp	r2, r3
 8002d42:	460b      	mov	r3, r1
 8002d44:	f173 0300 	sbcs.w	r3, r3, #0
 8002d48:	d220      	bcs.n	8002d8c <main+0x12fc>
				Set_Servo(0);
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f001 faca 	bl	80042e4 <Set_Servo>
 8002d50:	e15a      	b.n	8003008 <main+0x1578>
 8002d52:	bf00      	nop
 8002d54:	20000b88 	.word	0x20000b88
 8002d58:	48000400 	.word	0x48000400
 8002d5c:	20000b2e 	.word	0x20000b2e
 8002d60:	00000000 	.word	0x00000000
 8002d64:	20000b80 	.word	0x20000b80
 8002d68:	20000b7c 	.word	0x20000b7c
 8002d6c:	000186a1 	.word	0x000186a1
 8002d70:	00030d41 	.word	0x00030d41
 8002d74:	20000b28 	.word	0x20000b28
 8002d78:	20000b2d 	.word	0x20000b2d
 8002d7c:	20000b98 	.word	0x20000b98
 8002d80:	20001230 	.word	0x20001230
 8002d84:	000493e0 	.word	0x000493e0
 8002d88:	0007a120 	.word	0x0007a120
			} else if (loop_counter < 100) {
 8002d8c:	4b9f      	ldr	r3, [pc, #636]	@ (800300c <main+0x157c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b63      	cmp	r3, #99	@ 0x63
 8002d92:	f300 810e 	bgt.w	8002fb2 <main+0x1522>
				static uint16_t loop_temp = 0;
				Set_Servo(0);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f001 faa4 	bl	80042e4 <Set_Servo>

				R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8002d9c:	4b9c      	ldr	r3, [pc, #624]	@ (8003010 <main+0x1580>)
 8002d9e:	ed93 7a00 	vldr	s14, [r3]
 8002da2:	4b9c      	ldr	r3, [pc, #624]	@ (8003014 <main+0x1584>)
 8002da4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dac:	4b9a      	ldr	r3, [pc, #616]	@ (8003018 <main+0x1588>)
 8002dae:	edc3 7a00 	vstr	s15, [r3]
				P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8002db2:	4b9a      	ldr	r3, [pc, #616]	@ (800301c <main+0x158c>)
 8002db4:	ed93 7a00 	vldr	s14, [r3]
 8002db8:	4b99      	ldr	r3, [pc, #612]	@ (8003020 <main+0x1590>)
 8002dba:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc2:	4b98      	ldr	r3, [pc, #608]	@ (8003024 <main+0x1594>)
 8002dc4:	edc3 7a00 	vstr	s15, [r3]

				static uint64_t timestampState8 = 0;
				int64_t currentTimeState8 = micros();
 8002dc8:	f000 ffb2 	bl	8003d30 <micros>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
				if (currentTimeState8 > timestampState8) {
 8002dd4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002dd8:	4b93      	ldr	r3, [pc, #588]	@ (8003028 <main+0x1598>)
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	4282      	cmp	r2, r0
 8002de0:	418b      	sbcs	r3, r1
 8002de2:	d241      	bcs.n	8002e68 <main+0x13d8>
					timestampState8 = currentTimeState8 + 10000;		//us
 8002de4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002de8:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002dec:	1851      	adds	r1, r2, r1
 8002dee:	6139      	str	r1, [r7, #16]
 8002df0:	f143 0300 	adc.w	r3, r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dfa:	4b8b      	ldr	r3, [pc, #556]	@ (8003028 <main+0x1598>)
 8002dfc:	e9c3 0100 	strd	r0, r1, [r3]
					R_Speed = -1
							* (PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f,
 8002e00:	4b85      	ldr	r3, [pc, #532]	@ (8003018 <main+0x1588>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	4889      	ldr	r0, [pc, #548]	@ (800302c <main+0x159c>)
 8002e08:	ed9f 3a89 	vldr	s6, [pc, #548]	@ 8003030 <main+0x15a0>
 8002e0c:	eddf 2a89 	vldr	s5, [pc, #548]	@ 8003034 <main+0x15a4>
 8002e10:	ed9f 2a89 	vldr	s4, [pc, #548]	@ 8003038 <main+0x15a8>
 8002e14:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 8002e18:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8002e1c:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 8002e20:	eeb0 0a67 	vmov.f32	s0, s15
 8002e24:	f000 ff9e 	bl	8003d64 <PID_Update>
 8002e28:	eef0 7a40 	vmov.f32	s15, s0
 8002e2c:	eef1 7a67 	vneg.f32	s15, s15
					R_Speed = -1
 8002e30:	4b82      	ldr	r3, [pc, #520]	@ (800303c <main+0x15ac>)
 8002e32:	edc3 7a00 	vstr	s15, [r3]
									0.01f, -100.0f, 100.0f, &pid_r));
					P_Speed = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f,
 8002e36:	4b7b      	ldr	r3, [pc, #492]	@ (8003024 <main+0x1594>)
 8002e38:	edd3 7a00 	vldr	s15, [r3]
 8002e3c:	4880      	ldr	r0, [pc, #512]	@ (8003040 <main+0x15b0>)
 8002e3e:	ed9f 3a7c 	vldr	s6, [pc, #496]	@ 8003030 <main+0x15a0>
 8002e42:	eddf 2a7c 	vldr	s5, [pc, #496]	@ 8003034 <main+0x15a4>
 8002e46:	ed9f 2a7c 	vldr	s4, [pc, #496]	@ 8003038 <main+0x15a8>
 8002e4a:	eddf 1a7e 	vldr	s3, [pc, #504]	@ 8003044 <main+0x15b4>
 8002e4e:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 8003048 <main+0x15b8>
 8002e52:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 800304c <main+0x15bc>
 8002e56:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5a:	f000 ff83 	bl	8003d64 <PID_Update>
 8002e5e:	eef0 7a40 	vmov.f32	s15, s0
 8002e62:	4b7b      	ldr	r3, [pc, #492]	@ (8003050 <main+0x15c0>)
 8002e64:	edc3 7a00 	vstr	s15, [r3]
							0.01f, -100.0f, 100.0f, &pid_p);
				}

				Set_Motor(0, R_Speed);
 8002e68:	4b74      	ldr	r3, [pc, #464]	@ (800303c <main+0x15ac>)
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e72:	2000      	movs	r0, #0
 8002e74:	f001 f9b8 	bl	80041e8 <Set_Motor>
				Set_Motor(1, P_Speed);
 8002e78:	4b75      	ldr	r3, [pc, #468]	@ (8003050 <main+0x15c0>)
 8002e7a:	edd3 7a00 	vldr	s15, [r3]
 8002e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e82:	2001      	movs	r0, #1
 8002e84:	f001 f9b0 	bl	80041e8 <Set_Motor>
				if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 8002e88:	4b63      	ldr	r3, [pc, #396]	@ (8003018 <main+0x1588>)
 8002e8a:	edd3 7a00 	vldr	s15, [r3]
 8002e8e:	eef0 7ae7 	vabs.f32	s15, s15
 8002e92:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8003054 <main+0x15c4>
 8002e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9e:	d57f      	bpl.n	8002fa0 <main+0x1510>
						&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 8002ea0:	4b60      	ldr	r3, [pc, #384]	@ (8003024 <main+0x1594>)
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	eef0 7ae7 	vabs.f32	s15, s15
 8002eaa:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8003058 <main+0x15c8>
 8002eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb6:	d573      	bpl.n	8002fa0 <main+0x1510>
					/* within window —— start or continue timer */
					if (lock_timer_us == 0)
 8002eb8:	4b68      	ldr	r3, [pc, #416]	@ (800305c <main+0x15cc>)
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	d107      	bne.n	8002ed2 <main+0x1442>
						lock_timer_us = micros(); /* start timing */
 8002ec2:	f000 ff35 	bl	8003d30 <micros>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4964      	ldr	r1, [pc, #400]	@ (800305c <main+0x15cc>)
 8002ecc:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 8002ed0:	e099      	b.n	8003006 <main+0x1576>

					else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8002ed2:	f000 ff2d 	bl	8003d30 <micros>
 8002ed6:	4b61      	ldr	r3, [pc, #388]	@ (800305c <main+0x15cc>)
 8002ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002edc:	1a86      	subs	r6, r0, r2
 8002ede:	60be      	str	r6, [r7, #8]
 8002ee0:	eb61 0303 	sbc.w	r3, r1, r3
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	4b5e      	ldr	r3, [pc, #376]	@ (8003060 <main+0x15d0>)
 8002ee8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eec:	4602      	mov	r2, r0
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	f173 0300 	sbcs.w	r3, r3, #0
 8002ef6:	f0c0 8086 	bcc.w	8003006 <main+0x1576>
						if (loop_temp == 0) {
 8002efa:	4b5a      	ldr	r3, [pc, #360]	@ (8003064 <main+0x15d4>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d119      	bne.n	8002f36 <main+0x14a6>
							pid_r.integ = 0;
 8002f02:	4a4a      	ldr	r2, [pc, #296]	@ (800302c <main+0x159c>)
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 8002f0a:	4a48      	ldr	r2, [pc, #288]	@ (800302c <main+0x159c>)
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 8002f12:	4a4b      	ldr	r2, [pc, #300]	@ (8003040 <main+0x15b0>)
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 8002f1a:	4a49      	ldr	r2, [pc, #292]	@ (8003040 <main+0x15b0>)
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	6053      	str	r3, [r2, #4]
							TargetR = -1.0472;
 8002f22:	4a3b      	ldr	r2, [pc, #236]	@ (8003010 <main+0x1580>)
 8002f24:	4b50      	ldr	r3, [pc, #320]	@ (8003068 <main+0x15d8>)
 8002f26:	6013      	str	r3, [r2, #0]
							TargetP = 250;
 8002f28:	4a3c      	ldr	r2, [pc, #240]	@ (800301c <main+0x158c>)
 8002f2a:	4b50      	ldr	r3, [pc, #320]	@ (800306c <main+0x15dc>)
 8002f2c:	6013      	str	r3, [r2, #0]
							loop_temp = 1;
 8002f2e:	4a4d      	ldr	r2, [pc, #308]	@ (8003064 <main+0x15d4>)
 8002f30:	2301      	movs	r3, #1
 8002f32:	8013      	strh	r3, [r2, #0]
					if (lock_timer_us == 0)
 8002f34:	e067      	b.n	8003006 <main+0x1576>
						} else {
							pid_r.integ = 0;
 8002f36:	4a3d      	ldr	r2, [pc, #244]	@ (800302c <main+0x159c>)
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 8002f3e:	4a3b      	ldr	r2, [pc, #236]	@ (800302c <main+0x159c>)
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 8002f46:	4a3e      	ldr	r2, [pc, #248]	@ (8003040 <main+0x15b0>)
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 8002f4e:	4a3c      	ldr	r2, [pc, #240]	@ (8003040 <main+0x15b0>)
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	6053      	str	r3, [r2, #4]
							TargetR = 4.18879;
 8002f56:	4a2e      	ldr	r2, [pc, #184]	@ (8003010 <main+0x1580>)
 8002f58:	4b45      	ldr	r3, [pc, #276]	@ (8003070 <main+0x15e0>)
 8002f5a:	6013      	str	r3, [r2, #0]
							TargetP = 50;
 8002f5c:	4a2f      	ldr	r2, [pc, #188]	@ (800301c <main+0x158c>)
 8002f5e:	4b45      	ldr	r3, [pc, #276]	@ (8003074 <main+0x15e4>)
 8002f60:	6013      	str	r3, [r2, #0]
							loop_temp = 0;
 8002f62:	4a40      	ldr	r2, [pc, #256]	@ (8003064 <main+0x15d4>)
 8002f64:	2300      	movs	r3, #0
 8002f66:	8013      	strh	r3, [r2, #0]
							loop_counter++;
 8002f68:	4b28      	ldr	r3, [pc, #160]	@ (800300c <main+0x157c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	4b27      	ldr	r3, [pc, #156]	@ (800300c <main+0x157c>)
 8002f70:	601a      	str	r2, [r3, #0]
							if (loop_counter == 1) {
 8002f72:	4b26      	ldr	r3, [pc, #152]	@ (800300c <main+0x157c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d106      	bne.n	8002f88 <main+0x14f8>
								pen_delay_timer = micros();
 8002f7a:	f000 fed9 	bl	8003d30 <micros>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	493d      	ldr	r1, [pc, #244]	@ (8003078 <main+0x15e8>)
 8002f84:	e9c1 2300 	strd	r2, r3, [r1]
							}
							if (loop_counter == 100) {
 8002f88:	4b20      	ldr	r3, [pc, #128]	@ (800300c <main+0x157c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b64      	cmp	r3, #100	@ 0x64
 8002f8e:	d13a      	bne.n	8003006 <main+0x1576>
								pen_delay_timer = micros();
 8002f90:	f000 fece 	bl	8003d30 <micros>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4937      	ldr	r1, [pc, #220]	@ (8003078 <main+0x15e8>)
 8002f9a:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 8002f9e:	e032      	b.n	8003006 <main+0x1576>
							}
						}
					}
				} else {
					lock_timer_us = 0;
 8002fa0:	492e      	ldr	r1, [pc, #184]	@ (800305c <main+0x15cc>)
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	e9c1 2300 	strd	r2, r3, [r1]
 8002fae:	f7fe bdeb 	b.w	8001b88 <main+0xf8>
				}
			} else {
				if (micros() - pen_delay_timer < 500000) {
 8002fb2:	f000 febd 	bl	8003d30 <micros>
 8002fb6:	4b30      	ldr	r3, [pc, #192]	@ (8003078 <main+0x15e8>)
 8002fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbc:	1a86      	subs	r6, r0, r2
 8002fbe:	603e      	str	r6, [r7, #0]
 8002fc0:	eb61 0303 	sbc.w	r3, r1, r3
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800307c <main+0x15ec>)
 8002fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fcc:	4602      	mov	r2, r0
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	f173 0300 	sbcs.w	r3, r3, #0
 8002fd6:	d20e      	bcs.n	8002ff6 <main+0x1566>
					Set_Motor(0, 0);
 8002fd8:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8003080 <main+0x15f0>
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f001 f903 	bl	80041e8 <Set_Motor>
					Set_Motor(1, 0);
 8002fe2:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8003080 <main+0x15f0>
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f001 f8fe 	bl	80041e8 <Set_Motor>
					Set_Servo(1);
 8002fec:	2001      	movs	r0, #1
 8002fee:	f001 f979 	bl	80042e4 <Set_Servo>
 8002ff2:	f7fe bdc9 	b.w	8001b88 <main+0xf8>
				} else {
					Set_Servo(0);
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f001 f974 	bl	80042e4 <Set_Servo>
					Mode = 0;
 8002ffc:	4a21      	ldr	r2, [pc, #132]	@ (8003084 <main+0x15f4>)
 8002ffe:	2300      	movs	r3, #0
 8003000:	7013      	strb	r3, [r2, #0]
 8003002:	f7fe bdc1 	b.w	8001b88 <main+0xf8>
					if (lock_timer_us == 0)
 8003006:	bf00      	nop
	while (1) {
 8003008:	f7fe bdbe 	b.w	8001b88 <main+0xf8>
 800300c:	20000b98 	.word	0x20000b98
 8003010:	20000b00 	.word	0x20000b00
 8003014:	20000a70 	.word	0x20000a70
 8003018:	20000b10 	.word	0x20000b10
 800301c:	20000b04 	.word	0x20000b04
 8003020:	20000ab0 	.word	0x20000ab0
 8003024:	20000b14 	.word	0x20000b14
 8003028:	20001238 	.word	0x20001238
 800302c:	20000b5c 	.word	0x20000b5c
 8003030:	42c80000 	.word	0x42c80000
 8003034:	c2c80000 	.word	0xc2c80000
 8003038:	3c23d70a 	.word	0x3c23d70a
 800303c:	20000b20 	.word	0x20000b20
 8003040:	20000b64 	.word	0x20000b64
 8003044:	3e19999a 	.word	0x3e19999a
 8003048:	3f99999a 	.word	0x3f99999a
 800304c:	3eaa7efa 	.word	0x3eaa7efa
 8003050:	20000b24 	.word	0x20000b24
 8003054:	3d0b4396 	.word	0x3d0b4396
 8003058:	3dcccccd 	.word	0x3dcccccd
 800305c:	20000b30 	.word	0x20000b30
 8003060:	000f4240 	.word	0x000f4240
 8003064:	20001240 	.word	0x20001240
 8003068:	bf860aa6 	.word	0xbf860aa6
 800306c:	437a0000 	.word	0x437a0000
 8003070:	40860a91 	.word	0x40860a91
 8003074:	42480000 	.word	0x42480000
 8003078:	20001230 	.word	0x20001230
 800307c:	0007a120 	.word	0x0007a120
 8003080:	00000000 	.word	0x00000000
 8003084:	20000b28 	.word	0x20000b28

08003088 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b094      	sub	sp, #80	@ 0x50
 800308c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800308e:	f107 0318 	add.w	r3, r7, #24
 8003092:	2238      	movs	r2, #56	@ 0x38
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f008 f82c 	bl	800b0f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800309c:	1d3b      	adds	r3, r7, #4
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	609a      	str	r2, [r3, #8]
 80030a6:	60da      	str	r2, [r3, #12]
 80030a8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80030aa:	2000      	movs	r0, #0
 80030ac:	f002 fb6a 	bl	8005784 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030b0:	2302      	movs	r3, #2
 80030b2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030ba:	2340      	movs	r3, #64	@ 0x40
 80030bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030be:	2302      	movs	r3, #2
 80030c0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030c2:	2302      	movs	r3, #2
 80030c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80030c6:	2304      	movs	r3, #4
 80030c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80030ca:	2355      	movs	r3, #85	@ 0x55
 80030cc:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030ce:	2302      	movs	r3, #2
 80030d0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80030d2:	2302      	movs	r3, #2
 80030d4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80030d6:	2302      	movs	r3, #2
 80030d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80030da:	f107 0318 	add.w	r3, r7, #24
 80030de:	4618      	mov	r0, r3
 80030e0:	f002 fc04 	bl	80058ec <HAL_RCC_OscConfig>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <SystemClock_Config+0x66>
		Error_Handler();
 80030ea:	f001 f947 	bl	800437c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80030ee:	230f      	movs	r3, #15
 80030f0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030f2:	2303      	movs	r3, #3
 80030f4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	2104      	movs	r1, #4
 8003106:	4618      	mov	r0, r3
 8003108:	f002 ff02 	bl	8005f10 <HAL_RCC_ClockConfig>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <SystemClock_Config+0x8e>
		Error_Handler();
 8003112:	f001 f933 	bl	800437c <Error_Handler>
	}
}
 8003116:	bf00      	nop
 8003118:	3750      	adds	r7, #80	@ 0x50
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003120:	b580      	push	{r7, lr}
 8003122:	b08c      	sub	sp, #48	@ 0x30
 8003124:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003126:	f107 031c 	add.w	r3, r7, #28
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	605a      	str	r2, [r3, #4]
 8003130:	609a      	str	r2, [r3, #8]
 8003132:	60da      	str	r2, [r3, #12]
 8003134:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003136:	f107 030c 	add.w	r3, r7, #12
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003144:	463b      	mov	r3, r7
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800314e:	4b35      	ldr	r3, [pc, #212]	@ (8003224 <MX_TIM1_Init+0x104>)
 8003150:	4a35      	ldr	r2, [pc, #212]	@ (8003228 <MX_TIM1_Init+0x108>)
 8003152:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 8003154:	4b33      	ldr	r3, [pc, #204]	@ (8003224 <MX_TIM1_Init+0x104>)
 8003156:	22a9      	movs	r2, #169	@ 0xa9
 8003158:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800315a:	4b32      	ldr	r3, [pc, #200]	@ (8003224 <MX_TIM1_Init+0x104>)
 800315c:	2200      	movs	r2, #0
 800315e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003160:	4b30      	ldr	r3, [pc, #192]	@ (8003224 <MX_TIM1_Init+0x104>)
 8003162:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003166:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003168:	4b2e      	ldr	r3, [pc, #184]	@ (8003224 <MX_TIM1_Init+0x104>)
 800316a:	2200      	movs	r2, #0
 800316c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800316e:	4b2d      	ldr	r3, [pc, #180]	@ (8003224 <MX_TIM1_Init+0x104>)
 8003170:	2200      	movs	r2, #0
 8003172:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003174:	4b2b      	ldr	r3, [pc, #172]	@ (8003224 <MX_TIM1_Init+0x104>)
 8003176:	2200      	movs	r2, #0
 8003178:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 800317a:	482a      	ldr	r0, [pc, #168]	@ (8003224 <MX_TIM1_Init+0x104>)
 800317c:	f003 fdfe 	bl	8006d7c <HAL_TIM_IC_Init>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <MX_TIM1_Init+0x6a>
		Error_Handler();
 8003186:	f001 f8f9 	bl	800437c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800318a:	2304      	movs	r3, #4
 800318c:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800318e:	2360      	movs	r3, #96	@ 0x60
 8003190:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003192:	2302      	movs	r3, #2
 8003194:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003196:	2300      	movs	r3, #0
 8003198:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 800319e:	f107 031c 	add.w	r3, r7, #28
 80031a2:	4619      	mov	r1, r3
 80031a4:	481f      	ldr	r0, [pc, #124]	@ (8003224 <MX_TIM1_Init+0x104>)
 80031a6:	f004 fdc9 	bl	8007d3c <HAL_TIM_SlaveConfigSynchro>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <MX_TIM1_Init+0x94>
		Error_Handler();
 80031b0:	f001 f8e4 	bl	800437c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80031b8:	2302      	movs	r3, #2
 80031ba:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80031c4:	f107 030c 	add.w	r3, r7, #12
 80031c8:	2200      	movs	r2, #0
 80031ca:	4619      	mov	r1, r3
 80031cc:	4815      	ldr	r0, [pc, #84]	@ (8003224 <MX_TIM1_Init+0x104>)
 80031ce:	f004 faee 	bl	80077ae <HAL_TIM_IC_ConfigChannel>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_TIM1_Init+0xbc>
		Error_Handler();
 80031d8:	f001 f8d0 	bl	800437c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80031dc:	2302      	movs	r3, #2
 80031de:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80031e0:	2301      	movs	r3, #1
 80031e2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 80031e4:	f107 030c 	add.w	r3, r7, #12
 80031e8:	2204      	movs	r2, #4
 80031ea:	4619      	mov	r1, r3
 80031ec:	480d      	ldr	r0, [pc, #52]	@ (8003224 <MX_TIM1_Init+0x104>)
 80031ee:	f004 fade 	bl	80077ae <HAL_TIM_IC_ConfigChannel>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_TIM1_Init+0xdc>
		Error_Handler();
 80031f8:	f001 f8c0 	bl	800437c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031fc:	2300      	movs	r3, #0
 80031fe:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003200:	2300      	movs	r3, #0
 8003202:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003204:	2300      	movs	r3, #0
 8003206:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003208:	463b      	mov	r3, r7
 800320a:	4619      	mov	r1, r3
 800320c:	4805      	ldr	r0, [pc, #20]	@ (8003224 <MX_TIM1_Init+0x104>)
 800320e:	f005 feb1 	bl	8008f74 <HAL_TIMEx_MasterConfigSynchronization>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003218:	f001 f8b0 	bl	800437c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800321c:	bf00      	nop
 800321e:	3730      	adds	r7, #48	@ 0x30
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000234 	.word	0x20000234
 8003228:	40012c00 	.word	0x40012c00

0800322c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b08c      	sub	sp, #48	@ 0x30
 8003230:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003232:	f107 031c 	add.w	r3, r7, #28
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	609a      	str	r2, [r3, #8]
 800323e:	60da      	str	r2, [r3, #12]
 8003240:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003242:	f107 030c 	add.w	r3, r7, #12
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	609a      	str	r2, [r3, #8]
 800324e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003250:	463b      	mov	r3, r7
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800325a:	4b33      	ldr	r3, [pc, #204]	@ (8003328 <MX_TIM2_Init+0xfc>)
 800325c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003260:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 8003262:	4b31      	ldr	r3, [pc, #196]	@ (8003328 <MX_TIM2_Init+0xfc>)
 8003264:	22a9      	movs	r2, #169	@ 0xa9
 8003266:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003268:	4b2f      	ldr	r3, [pc, #188]	@ (8003328 <MX_TIM2_Init+0xfc>)
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800326e:	4b2e      	ldr	r3, [pc, #184]	@ (8003328 <MX_TIM2_Init+0xfc>)
 8003270:	f04f 32ff 	mov.w	r2, #4294967295
 8003274:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003276:	4b2c      	ldr	r3, [pc, #176]	@ (8003328 <MX_TIM2_Init+0xfc>)
 8003278:	2200      	movs	r2, #0
 800327a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800327c:	4b2a      	ldr	r3, [pc, #168]	@ (8003328 <MX_TIM2_Init+0xfc>)
 800327e:	2200      	movs	r2, #0
 8003280:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8003282:	4829      	ldr	r0, [pc, #164]	@ (8003328 <MX_TIM2_Init+0xfc>)
 8003284:	f003 fd7a 	bl	8006d7c <HAL_TIM_IC_Init>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <MX_TIM2_Init+0x66>
		Error_Handler();
 800328e:	f001 f875 	bl	800437c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003292:	2304      	movs	r3, #4
 8003294:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003296:	2350      	movs	r3, #80	@ 0x50
 8003298:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800329e:	2300      	movs	r3, #0
 80032a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 80032a6:	f107 031c 	add.w	r3, r7, #28
 80032aa:	4619      	mov	r1, r3
 80032ac:	481e      	ldr	r0, [pc, #120]	@ (8003328 <MX_TIM2_Init+0xfc>)
 80032ae:	f004 fd45 	bl	8007d3c <HAL_TIM_SlaveConfigSynchro>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_TIM2_Init+0x90>
		Error_Handler();
 80032b8:	f001 f860 	bl	800437c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80032c0:	2301      	movs	r3, #1
 80032c2:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80032cc:	f107 030c 	add.w	r3, r7, #12
 80032d0:	2200      	movs	r2, #0
 80032d2:	4619      	mov	r1, r3
 80032d4:	4814      	ldr	r0, [pc, #80]	@ (8003328 <MX_TIM2_Init+0xfc>)
 80032d6:	f004 fa6a 	bl	80077ae <HAL_TIM_IC_ConfigChannel>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_TIM2_Init+0xb8>
		Error_Handler();
 80032e0:	f001 f84c 	bl	800437c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80032e4:	2302      	movs	r3, #2
 80032e6:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80032e8:	2302      	movs	r3, #2
 80032ea:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 80032ec:	f107 030c 	add.w	r3, r7, #12
 80032f0:	2204      	movs	r2, #4
 80032f2:	4619      	mov	r1, r3
 80032f4:	480c      	ldr	r0, [pc, #48]	@ (8003328 <MX_TIM2_Init+0xfc>)
 80032f6:	f004 fa5a 	bl	80077ae <HAL_TIM_IC_ConfigChannel>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_TIM2_Init+0xd8>
		Error_Handler();
 8003300:	f001 f83c 	bl	800437c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003304:	2300      	movs	r3, #0
 8003306:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003308:	2300      	movs	r3, #0
 800330a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800330c:	463b      	mov	r3, r7
 800330e:	4619      	mov	r1, r3
 8003310:	4805      	ldr	r0, [pc, #20]	@ (8003328 <MX_TIM2_Init+0xfc>)
 8003312:	f005 fe2f 	bl	8008f74 <HAL_TIMEx_MasterConfigSynchronization>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_TIM2_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 800331c:	f001 f82e 	bl	800437c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003320:	bf00      	nop
 8003322:	3730      	adds	r7, #48	@ 0x30
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20000300 	.word	0x20000300

0800332c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800332c:	b580      	push	{r7, lr}
 800332e:	b08c      	sub	sp, #48	@ 0x30
 8003330:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003332:	f107 030c 	add.w	r3, r7, #12
 8003336:	2224      	movs	r2, #36	@ 0x24
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f007 feda 	bl	800b0f4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003340:	463b      	mov	r3, r7
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	605a      	str	r2, [r3, #4]
 8003348:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800334a:	4b21      	ldr	r3, [pc, #132]	@ (80033d0 <MX_TIM3_Init+0xa4>)
 800334c:	4a21      	ldr	r2, [pc, #132]	@ (80033d4 <MX_TIM3_Init+0xa8>)
 800334e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003350:	4b1f      	ldr	r3, [pc, #124]	@ (80033d0 <MX_TIM3_Init+0xa4>)
 8003352:	2200      	movs	r2, #0
 8003354:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003356:	4b1e      	ldr	r3, [pc, #120]	@ (80033d0 <MX_TIM3_Init+0xa4>)
 8003358:	2200      	movs	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800335c:	4b1c      	ldr	r3, [pc, #112]	@ (80033d0 <MX_TIM3_Init+0xa4>)
 800335e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003362:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003364:	4b1a      	ldr	r3, [pc, #104]	@ (80033d0 <MX_TIM3_Init+0xa4>)
 8003366:	2200      	movs	r2, #0
 8003368:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800336a:	4b19      	ldr	r3, [pc, #100]	@ (80033d0 <MX_TIM3_Init+0xa4>)
 800336c:	2200      	movs	r2, #0
 800336e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003370:	2303      	movs	r3, #3
 8003372:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003374:	2300      	movs	r3, #0
 8003376:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003378:	2301      	movs	r3, #1
 800337a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800337c:	2300      	movs	r3, #0
 800337e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003384:	2300      	movs	r3, #0
 8003386:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003388:	2301      	movs	r3, #1
 800338a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800338c:	2300      	movs	r3, #0
 800338e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8003394:	f107 030c 	add.w	r3, r7, #12
 8003398:	4619      	mov	r1, r3
 800339a:	480d      	ldr	r0, [pc, #52]	@ (80033d0 <MX_TIM3_Init+0xa4>)
 800339c:	f003 ff4c 	bl	8007238 <HAL_TIM_Encoder_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_TIM3_Init+0x7e>
		Error_Handler();
 80033a6:	f000 ffe9 	bl	800437c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80033b2:	463b      	mov	r3, r7
 80033b4:	4619      	mov	r1, r3
 80033b6:	4806      	ldr	r0, [pc, #24]	@ (80033d0 <MX_TIM3_Init+0xa4>)
 80033b8:	f005 fddc 	bl	8008f74 <HAL_TIMEx_MasterConfigSynchronization>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80033c2:	f000 ffdb 	bl	800437c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80033c6:	bf00      	nop
 80033c8:	3730      	adds	r7, #48	@ 0x30
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	200003cc 	.word	0x200003cc
 80033d4:	40000400 	.word	0x40000400

080033d8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08c      	sub	sp, #48	@ 0x30
 80033dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80033de:	f107 030c 	add.w	r3, r7, #12
 80033e2:	2224      	movs	r2, #36	@ 0x24
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f007 fe84 	bl	800b0f4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80033ec:	463b      	mov	r3, r7
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80033f6:	4b21      	ldr	r3, [pc, #132]	@ (800347c <MX_TIM4_Init+0xa4>)
 80033f8:	4a21      	ldr	r2, [pc, #132]	@ (8003480 <MX_TIM4_Init+0xa8>)
 80033fa:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80033fc:	4b1f      	ldr	r3, [pc, #124]	@ (800347c <MX_TIM4_Init+0xa4>)
 80033fe:	2200      	movs	r2, #0
 8003400:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003402:	4b1e      	ldr	r3, [pc, #120]	@ (800347c <MX_TIM4_Init+0xa4>)
 8003404:	2200      	movs	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003408:	4b1c      	ldr	r3, [pc, #112]	@ (800347c <MX_TIM4_Init+0xa4>)
 800340a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800340e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003410:	4b1a      	ldr	r3, [pc, #104]	@ (800347c <MX_TIM4_Init+0xa4>)
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003416:	4b19      	ldr	r3, [pc, #100]	@ (800347c <MX_TIM4_Init+0xa4>)
 8003418:	2200      	movs	r2, #0
 800341a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800341c:	2303      	movs	r3, #3
 800341e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003424:	2301      	movs	r3, #1
 8003426:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003430:	2300      	movs	r3, #0
 8003432:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003434:	2301      	movs	r3, #1
 8003436:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003438:	2300      	movs	r3, #0
 800343a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003440:	f107 030c 	add.w	r3, r7, #12
 8003444:	4619      	mov	r1, r3
 8003446:	480d      	ldr	r0, [pc, #52]	@ (800347c <MX_TIM4_Init+0xa4>)
 8003448:	f003 fef6 	bl	8007238 <HAL_TIM_Encoder_Init>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <MX_TIM4_Init+0x7e>
		Error_Handler();
 8003452:	f000 ff93 	bl	800437c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003456:	2300      	movs	r3, #0
 8003458:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800345e:	463b      	mov	r3, r7
 8003460:	4619      	mov	r1, r3
 8003462:	4806      	ldr	r0, [pc, #24]	@ (800347c <MX_TIM4_Init+0xa4>)
 8003464:	f005 fd86 	bl	8008f74 <HAL_TIMEx_MasterConfigSynchronization>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800346e:	f000 ff85 	bl	800437c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003472:	bf00      	nop
 8003474:	3730      	adds	r7, #48	@ 0x30
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000498 	.word	0x20000498
 8003480:	40000800 	.word	0x40000800

08003484 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800348a:	f107 0310 	add.w	r3, r7, #16
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	609a      	str	r2, [r3, #8]
 8003496:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003498:	1d3b      	adds	r3, r7, #4
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80034a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003518 <MX_TIM5_Init+0x94>)
 80034a4:	4a1d      	ldr	r2, [pc, #116]	@ (800351c <MX_TIM5_Init+0x98>)
 80034a6:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 80034a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003518 <MX_TIM5_Init+0x94>)
 80034aa:	22a9      	movs	r2, #169	@ 0xa9
 80034ac:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003518 <MX_TIM5_Init+0x94>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80034b4:	4b18      	ldr	r3, [pc, #96]	@ (8003518 <MX_TIM5_Init+0x94>)
 80034b6:	f04f 32ff 	mov.w	r2, #4294967295
 80034ba:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034bc:	4b16      	ldr	r3, [pc, #88]	@ (8003518 <MX_TIM5_Init+0x94>)
 80034be:	2200      	movs	r2, #0
 80034c0:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034c2:	4b15      	ldr	r3, [pc, #84]	@ (8003518 <MX_TIM5_Init+0x94>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80034c8:	4813      	ldr	r0, [pc, #76]	@ (8003518 <MX_TIM5_Init+0x94>)
 80034ca:	f003 f98b 	bl	80067e4 <HAL_TIM_Base_Init>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <MX_TIM5_Init+0x54>
		Error_Handler();
 80034d4:	f000 ff52 	bl	800437c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034dc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80034de:	f107 0310 	add.w	r3, r7, #16
 80034e2:	4619      	mov	r1, r3
 80034e4:	480c      	ldr	r0, [pc, #48]	@ (8003518 <MX_TIM5_Init+0x94>)
 80034e6:	f004 fb13 	bl	8007b10 <HAL_TIM_ConfigClockSource>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <MX_TIM5_Init+0x70>
		Error_Handler();
 80034f0:	f000 ff44 	bl	800437c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034f4:	2300      	movs	r3, #0
 80034f6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80034fc:	1d3b      	adds	r3, r7, #4
 80034fe:	4619      	mov	r1, r3
 8003500:	4805      	ldr	r0, [pc, #20]	@ (8003518 <MX_TIM5_Init+0x94>)
 8003502:	f005 fd37 	bl	8008f74 <HAL_TIMEx_MasterConfigSynchronization>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 800350c:	f000 ff36 	bl	800437c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8003510:	bf00      	nop
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000564 	.word	0x20000564
 800351c:	40000c00 	.word	0x40000c00

08003520 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b09c      	sub	sp, #112	@ 0x70
 8003524:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003526:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	609a      	str	r2, [r3, #8]
 8003532:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003534:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003540:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
 8003550:	615a      	str	r2, [r3, #20]
 8003552:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003554:	1d3b      	adds	r3, r7, #4
 8003556:	2234      	movs	r2, #52	@ 0x34
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f007 fdca 	bl	800b0f4 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003560:	4b4b      	ldr	r3, [pc, #300]	@ (8003690 <MX_TIM8_Init+0x170>)
 8003562:	4a4c      	ldr	r2, [pc, #304]	@ (8003694 <MX_TIM8_Init+0x174>)
 8003564:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 8003566:	4b4a      	ldr	r3, [pc, #296]	@ (8003690 <MX_TIM8_Init+0x170>)
 8003568:	22a9      	movs	r2, #169	@ 0xa9
 800356a:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800356c:	4b48      	ldr	r3, [pc, #288]	@ (8003690 <MX_TIM8_Init+0x170>)
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 100;
 8003572:	4b47      	ldr	r3, [pc, #284]	@ (8003690 <MX_TIM8_Init+0x170>)
 8003574:	2264      	movs	r2, #100	@ 0x64
 8003576:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003578:	4b45      	ldr	r3, [pc, #276]	@ (8003690 <MX_TIM8_Init+0x170>)
 800357a:	2200      	movs	r2, #0
 800357c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800357e:	4b44      	ldr	r3, [pc, #272]	@ (8003690 <MX_TIM8_Init+0x170>)
 8003580:	2200      	movs	r2, #0
 8003582:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003584:	4b42      	ldr	r3, [pc, #264]	@ (8003690 <MX_TIM8_Init+0x170>)
 8003586:	2200      	movs	r2, #0
 8003588:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 800358a:	4841      	ldr	r0, [pc, #260]	@ (8003690 <MX_TIM8_Init+0x170>)
 800358c:	f003 f92a 	bl	80067e4 <HAL_TIM_Base_Init>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <MX_TIM8_Init+0x7a>
		Error_Handler();
 8003596:	f000 fef1 	bl	800437c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800359a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800359e:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 80035a0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80035a4:	4619      	mov	r1, r3
 80035a6:	483a      	ldr	r0, [pc, #232]	@ (8003690 <MX_TIM8_Init+0x170>)
 80035a8:	f004 fab2 	bl	8007b10 <HAL_TIM_ConfigClockSource>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <MX_TIM8_Init+0x96>
		Error_Handler();
 80035b2:	f000 fee3 	bl	800437c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80035b6:	4836      	ldr	r0, [pc, #216]	@ (8003690 <MX_TIM8_Init+0x170>)
 80035b8:	f003 fa60 	bl	8006a7c <HAL_TIM_PWM_Init>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <MX_TIM8_Init+0xa6>
		Error_Handler();
 80035c2:	f000 fedb 	bl	800437c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035ca:	2300      	movs	r3, #0
 80035cc:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80035d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80035d6:	4619      	mov	r1, r3
 80035d8:	482d      	ldr	r0, [pc, #180]	@ (8003690 <MX_TIM8_Init+0x170>)
 80035da:	f005 fccb 	bl	8008f74 <HAL_TIMEx_MasterConfigSynchronization>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_TIM8_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 80035e4:	f000 feca 	bl	800437c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035e8:	2360      	movs	r3, #96	@ 0x60
 80035ea:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 100;
 80035ec:	2364      	movs	r3, #100	@ 0x64
 80035ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035f0:	2300      	movs	r3, #0
 80035f2:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035f4:	2300      	movs	r3, #0
 80035f6:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035fc:	2300      	movs	r3, #0
 80035fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003600:	2300      	movs	r3, #0
 8003602:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 8003604:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003608:	2208      	movs	r2, #8
 800360a:	4619      	mov	r1, r3
 800360c:	4820      	ldr	r0, [pc, #128]	@ (8003690 <MX_TIM8_Init+0x170>)
 800360e:	f004 f96b 	bl	80078e8 <HAL_TIM_PWM_ConfigChannel>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <MX_TIM8_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003618:	f000 feb0 	bl	800437c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 800361c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003620:	220c      	movs	r2, #12
 8003622:	4619      	mov	r1, r3
 8003624:	481a      	ldr	r0, [pc, #104]	@ (8003690 <MX_TIM8_Init+0x170>)
 8003626:	f004 f95f 	bl	80078e8 <HAL_TIM_PWM_ConfigChannel>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <MX_TIM8_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 8003630:	f000 fea4 	bl	800437c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003634:	2300      	movs	r3, #0
 8003636:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003638:	2300      	movs	r3, #0
 800363a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003648:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800364c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003652:	2300      	movs	r3, #0
 8003654:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003656:	2300      	movs	r3, #0
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800365a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800365e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003664:	2300      	movs	r3, #0
 8003666:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	4619      	mov	r1, r3
 8003670:	4807      	ldr	r0, [pc, #28]	@ (8003690 <MX_TIM8_Init+0x170>)
 8003672:	f005 fd15 	bl	80090a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <MX_TIM8_Init+0x160>
			!= HAL_OK) {
		Error_Handler();
 800367c:	f000 fe7e 	bl	800437c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8003680:	4803      	ldr	r0, [pc, #12]	@ (8003690 <MX_TIM8_Init+0x170>)
 8003682:	f001 f807 	bl	8004694 <HAL_TIM_MspPostInit>

}
 8003686:	bf00      	nop
 8003688:	3770      	adds	r7, #112	@ 0x70
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000630 	.word	0x20000630
 8003694:	40013400 	.word	0x40013400

08003698 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b09c      	sub	sp, #112	@ 0x70
 800369c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800369e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	609a      	str	r2, [r3, #8]
 80036aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80036ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80036b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	611a      	str	r2, [r3, #16]
 80036c8:	615a      	str	r2, [r3, #20]
 80036ca:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80036cc:	1d3b      	adds	r3, r7, #4
 80036ce:	2234      	movs	r2, #52	@ 0x34
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f007 fd0e 	bl	800b0f4 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 80036d8:	4b3f      	ldr	r3, [pc, #252]	@ (80037d8 <MX_TIM15_Init+0x140>)
 80036da:	4a40      	ldr	r2, [pc, #256]	@ (80037dc <MX_TIM15_Init+0x144>)
 80036dc:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 169;
 80036de:	4b3e      	ldr	r3, [pc, #248]	@ (80037d8 <MX_TIM15_Init+0x140>)
 80036e0:	22a9      	movs	r2, #169	@ 0xa9
 80036e2:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e4:	4b3c      	ldr	r3, [pc, #240]	@ (80037d8 <MX_TIM15_Init+0x140>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 20000;
 80036ea:	4b3b      	ldr	r3, [pc, #236]	@ (80037d8 <MX_TIM15_Init+0x140>)
 80036ec:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80036f0:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f2:	4b39      	ldr	r3, [pc, #228]	@ (80037d8 <MX_TIM15_Init+0x140>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 80036f8:	4b37      	ldr	r3, [pc, #220]	@ (80037d8 <MX_TIM15_Init+0x140>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036fe:	4b36      	ldr	r3, [pc, #216]	@ (80037d8 <MX_TIM15_Init+0x140>)
 8003700:	2200      	movs	r2, #0
 8003702:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8003704:	4834      	ldr	r0, [pc, #208]	@ (80037d8 <MX_TIM15_Init+0x140>)
 8003706:	f003 f86d 	bl	80067e4 <HAL_TIM_Base_Init>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <MX_TIM15_Init+0x7c>
		Error_Handler();
 8003710:	f000 fe34 	bl	800437c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003718:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 800371a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800371e:	4619      	mov	r1, r3
 8003720:	482d      	ldr	r0, [pc, #180]	@ (80037d8 <MX_TIM15_Init+0x140>)
 8003722:	f004 f9f5 	bl	8007b10 <HAL_TIM_ConfigClockSource>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <MX_TIM15_Init+0x98>
		Error_Handler();
 800372c:	f000 fe26 	bl	800437c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8003730:	4829      	ldr	r0, [pc, #164]	@ (80037d8 <MX_TIM15_Init+0x140>)
 8003732:	f003 f9a3 	bl	8006a7c <HAL_TIM_PWM_Init>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_TIM15_Init+0xa8>
		Error_Handler();
 800373c:	f000 fe1e 	bl	800437c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003740:	2300      	movs	r3, #0
 8003742:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003744:	2300      	movs	r3, #0
 8003746:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8003748:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800374c:	4619      	mov	r1, r3
 800374e:	4822      	ldr	r0, [pc, #136]	@ (80037d8 <MX_TIM15_Init+0x140>)
 8003750:	f005 fc10 	bl	8008f74 <HAL_TIMEx_MasterConfigSynchronization>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <MX_TIM15_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 800375a:	f000 fe0f 	bl	800437c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800375e:	2360      	movs	r3, #96	@ 0x60
 8003760:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003766:	2300      	movs	r3, #0
 8003768:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800376a:	2300      	movs	r3, #0
 800376c:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800376e:	2300      	movs	r3, #0
 8003770:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003772:	2300      	movs	r3, #0
 8003774:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 800377a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800377e:	2200      	movs	r2, #0
 8003780:	4619      	mov	r1, r3
 8003782:	4815      	ldr	r0, [pc, #84]	@ (80037d8 <MX_TIM15_Init+0x140>)
 8003784:	f004 f8b0 	bl	80078e8 <HAL_TIM_PWM_ConfigChannel>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <MX_TIM15_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 800378e:	f000 fdf5 	bl	800437c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003796:	2300      	movs	r3, #0
 8003798:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80037a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037aa:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80037b0:	2300      	movs	r3, #0
 80037b2:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	4619      	mov	r1, r3
 80037b8:	4807      	ldr	r0, [pc, #28]	@ (80037d8 <MX_TIM15_Init+0x140>)
 80037ba:	f005 fc71 	bl	80090a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_TIM15_Init+0x130>
			!= HAL_OK) {
		Error_Handler();
 80037c4:	f000 fdda 	bl	800437c <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 80037c8:	4803      	ldr	r0, [pc, #12]	@ (80037d8 <MX_TIM15_Init+0x140>)
 80037ca:	f000 ff63 	bl	8004694 <HAL_TIM_MspPostInit>

}
 80037ce:	bf00      	nop
 80037d0:	3770      	adds	r7, #112	@ 0x70
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	200006fc 	.word	0x200006fc
 80037dc:	40014000 	.word	0x40014000

080037e0 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 80037e4:	4b14      	ldr	r3, [pc, #80]	@ (8003838 <MX_TIM16_Init+0x58>)
 80037e6:	4a15      	ldr	r2, [pc, #84]	@ (800383c <MX_TIM16_Init+0x5c>)
 80037e8:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 80037ea:	4b13      	ldr	r3, [pc, #76]	@ (8003838 <MX_TIM16_Init+0x58>)
 80037ec:	22a9      	movs	r2, #169	@ 0xa9
 80037ee:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037f0:	4b11      	ldr	r3, [pc, #68]	@ (8003838 <MX_TIM16_Init+0x58>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 80037f6:	4b10      	ldr	r3, [pc, #64]	@ (8003838 <MX_TIM16_Init+0x58>)
 80037f8:	f240 4279 	movw	r2, #1145	@ 0x479
 80037fc:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003838 <MX_TIM16_Init+0x58>)
 8003800:	2200      	movs	r2, #0
 8003802:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8003804:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <MX_TIM16_Init+0x58>)
 8003806:	2200      	movs	r2, #0
 8003808:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800380a:	4b0b      	ldr	r3, [pc, #44]	@ (8003838 <MX_TIM16_Init+0x58>)
 800380c:	2200      	movs	r2, #0
 800380e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8003810:	4809      	ldr	r0, [pc, #36]	@ (8003838 <MX_TIM16_Init+0x58>)
 8003812:	f002 ffe7 	bl	80067e4 <HAL_TIM_Base_Init>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <MX_TIM16_Init+0x40>
		Error_Handler();
 800381c:	f000 fdae 	bl	800437c <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 8003820:	2108      	movs	r1, #8
 8003822:	4805      	ldr	r0, [pc, #20]	@ (8003838 <MX_TIM16_Init+0x58>)
 8003824:	f003 fc12 	bl	800704c <HAL_TIM_OnePulse_Init>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <MX_TIM16_Init+0x52>
		Error_Handler();
 800382e:	f000 fda5 	bl	800437c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8003832:	bf00      	nop
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	200007c8 	.word	0x200007c8
 800383c:	40014400 	.word	0x40014400

08003840 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003844:	4b23      	ldr	r3, [pc, #140]	@ (80038d4 <MX_USART2_UART_Init+0x94>)
 8003846:	4a24      	ldr	r2, [pc, #144]	@ (80038d8 <MX_USART2_UART_Init+0x98>)
 8003848:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 800384a:	4b22      	ldr	r3, [pc, #136]	@ (80038d4 <MX_USART2_UART_Init+0x94>)
 800384c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003850:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003852:	4b20      	ldr	r3, [pc, #128]	@ (80038d4 <MX_USART2_UART_Init+0x94>)
 8003854:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003858:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800385a:	4b1e      	ldr	r3, [pc, #120]	@ (80038d4 <MX_USART2_UART_Init+0x94>)
 800385c:	2200      	movs	r2, #0
 800385e:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8003860:	4b1c      	ldr	r3, [pc, #112]	@ (80038d4 <MX_USART2_UART_Init+0x94>)
 8003862:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003866:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003868:	4b1a      	ldr	r3, [pc, #104]	@ (80038d4 <MX_USART2_UART_Init+0x94>)
 800386a:	220c      	movs	r2, #12
 800386c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800386e:	4b19      	ldr	r3, [pc, #100]	@ (80038d4 <MX_USART2_UART_Init+0x94>)
 8003870:	2200      	movs	r2, #0
 8003872:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003874:	4b17      	ldr	r3, [pc, #92]	@ (80038d4 <MX_USART2_UART_Init+0x94>)
 8003876:	2200      	movs	r2, #0
 8003878:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800387a:	4b16      	ldr	r3, [pc, #88]	@ (80038d4 <MX_USART2_UART_Init+0x94>)
 800387c:	2200      	movs	r2, #0
 800387e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003880:	4b14      	ldr	r3, [pc, #80]	@ (80038d4 <MX_USART2_UART_Init+0x94>)
 8003882:	2200      	movs	r2, #0
 8003884:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003886:	4b13      	ldr	r3, [pc, #76]	@ (80038d4 <MX_USART2_UART_Init+0x94>)
 8003888:	2200      	movs	r2, #0
 800388a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800388c:	4811      	ldr	r0, [pc, #68]	@ (80038d4 <MX_USART2_UART_Init+0x94>)
 800388e:	f005 fceb 	bl	8009268 <HAL_UART_Init>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 8003898:	f000 fd70 	bl	800437c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 800389c:	2100      	movs	r1, #0
 800389e:	480d      	ldr	r0, [pc, #52]	@ (80038d4 <MX_USART2_UART_Init+0x94>)
 80038a0:	f007 fb27 	bl	800aef2 <HAL_UARTEx_SetTxFifoThreshold>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 80038aa:	f000 fd67 	bl	800437c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80038ae:	2100      	movs	r1, #0
 80038b0:	4808      	ldr	r0, [pc, #32]	@ (80038d4 <MX_USART2_UART_Init+0x94>)
 80038b2:	f007 fb5c 	bl	800af6e <HAL_UARTEx_SetRxFifoThreshold>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 80038bc:	f000 fd5e 	bl	800437c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 80038c0:	4804      	ldr	r0, [pc, #16]	@ (80038d4 <MX_USART2_UART_Init+0x94>)
 80038c2:	f007 fadd 	bl	800ae80 <HAL_UARTEx_DisableFifoMode>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <MX_USART2_UART_Init+0x90>
		Error_Handler();
 80038cc:	f000 fd56 	bl	800437c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80038d0:	bf00      	nop
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20000894 	.word	0x20000894
 80038d8:	40004400 	.word	0x40004400

080038dc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80038e2:	4b16      	ldr	r3, [pc, #88]	@ (800393c <MX_DMA_Init+0x60>)
 80038e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e6:	4a15      	ldr	r2, [pc, #84]	@ (800393c <MX_DMA_Init+0x60>)
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80038ee:	4b13      	ldr	r3, [pc, #76]	@ (800393c <MX_DMA_Init+0x60>)
 80038f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	607b      	str	r3, [r7, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80038fa:	4b10      	ldr	r3, [pc, #64]	@ (800393c <MX_DMA_Init+0x60>)
 80038fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fe:	4a0f      	ldr	r2, [pc, #60]	@ (800393c <MX_DMA_Init+0x60>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6493      	str	r3, [r2, #72]	@ 0x48
 8003906:	4b0d      	ldr	r3, [pc, #52]	@ (800393c <MX_DMA_Init+0x60>)
 8003908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003912:	2200      	movs	r2, #0
 8003914:	2100      	movs	r1, #0
 8003916:	200b      	movs	r0, #11
 8003918:	f001 fa03 	bl	8004d22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800391c:	200b      	movs	r0, #11
 800391e:	f001 fa1a 	bl	8004d56 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003922:	2200      	movs	r2, #0
 8003924:	2100      	movs	r1, #0
 8003926:	200c      	movs	r0, #12
 8003928:	f001 f9fb 	bl	8004d22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800392c:	200c      	movs	r0, #12
 800392e:	f001 fa12 	bl	8004d56 <HAL_NVIC_EnableIRQ>

}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000

08003940 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	@ 0x28
 8003944:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003946:	f107 0314 	add.w	r3, r7, #20
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	609a      	str	r2, [r3, #8]
 8003952:	60da      	str	r2, [r3, #12]
 8003954:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003956:	4b6c      	ldr	r3, [pc, #432]	@ (8003b08 <MX_GPIO_Init+0x1c8>)
 8003958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395a:	4a6b      	ldr	r2, [pc, #428]	@ (8003b08 <MX_GPIO_Init+0x1c8>)
 800395c:	f043 0304 	orr.w	r3, r3, #4
 8003960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003962:	4b69      	ldr	r3, [pc, #420]	@ (8003b08 <MX_GPIO_Init+0x1c8>)
 8003964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800396e:	4b66      	ldr	r3, [pc, #408]	@ (8003b08 <MX_GPIO_Init+0x1c8>)
 8003970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003972:	4a65      	ldr	r2, [pc, #404]	@ (8003b08 <MX_GPIO_Init+0x1c8>)
 8003974:	f043 0320 	orr.w	r3, r3, #32
 8003978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800397a:	4b63      	ldr	r3, [pc, #396]	@ (8003b08 <MX_GPIO_Init+0x1c8>)
 800397c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003986:	4b60      	ldr	r3, [pc, #384]	@ (8003b08 <MX_GPIO_Init+0x1c8>)
 8003988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398a:	4a5f      	ldr	r2, [pc, #380]	@ (8003b08 <MX_GPIO_Init+0x1c8>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003992:	4b5d      	ldr	r3, [pc, #372]	@ (8003b08 <MX_GPIO_Init+0x1c8>)
 8003994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800399e:	4b5a      	ldr	r3, [pc, #360]	@ (8003b08 <MX_GPIO_Init+0x1c8>)
 80039a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a2:	4a59      	ldr	r2, [pc, #356]	@ (8003b08 <MX_GPIO_Init+0x1c8>)
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039aa:	4b57      	ldr	r3, [pc, #348]	@ (8003b08 <MX_GPIO_Init+0x1c8>)
 80039ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80039b6:	2200      	movs	r2, #0
 80039b8:	2120      	movs	r1, #32
 80039ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039be:	f001 feb1 	bl	8005724 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12,
 80039c2:	2200      	movs	r2, #0
 80039c4:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 80039c8:	4850      	ldr	r0, [pc, #320]	@ (8003b0c <MX_GPIO_Init+0x1cc>)
 80039ca:	f001 feab 	bl	8005724 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC0 PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 80039ce:	230d      	movs	r3, #13
 80039d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80039d2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80039d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039dc:	f107 0314 	add.w	r3, r7, #20
 80039e0:	4619      	mov	r1, r3
 80039e2:	484a      	ldr	r0, [pc, #296]	@ (8003b0c <MX_GPIO_Init+0x1cc>)
 80039e4:	f001 fd04 	bl	80053f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80039e8:	2320      	movs	r3, #32
 80039ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ec:	2301      	movs	r3, #1
 80039ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f4:	2300      	movs	r3, #0
 80039f6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80039f8:	f107 0314 	add.w	r3, r7, #20
 80039fc:	4619      	mov	r1, r3
 80039fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a02:	f001 fcf5 	bl	80053f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12;
 8003a06:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 8003a0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a14:	2300      	movs	r3, #0
 8003a16:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	483b      	ldr	r0, [pc, #236]	@ (8003b0c <MX_GPIO_Init+0x1cc>)
 8003a20:	f001 fce6 	bl	80053f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11;
 8003a24:	f640 0304 	movw	r3, #2052	@ 0x804
 8003a28:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a32:	f107 0314 	add.w	r3, r7, #20
 8003a36:	4619      	mov	r1, r3
 8003a38:	4835      	ldr	r0, [pc, #212]	@ (8003b10 <MX_GPIO_Init+0x1d0>)
 8003a3a:	f001 fcd9 	bl	80053f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8003a3e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003a42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003a44:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003a48:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a4e:	f107 0314 	add.w	r3, r7, #20
 8003a52:	4619      	mov	r1, r3
 8003a54:	482e      	ldr	r0, [pc, #184]	@ (8003b10 <MX_GPIO_Init+0x1d0>)
 8003a56:	f001 fccb 	bl	80053f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a5e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a64:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a66:	2302      	movs	r3, #2
 8003a68:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a6a:	f107 0314 	add.w	r3, r7, #20
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4827      	ldr	r0, [pc, #156]	@ (8003b10 <MX_GPIO_Init+0x1d0>)
 8003a72:	f001 fcbd 	bl	80053f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003a76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003a7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a7c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a80:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a86:	f107 0314 	add.w	r3, r7, #20
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a90:	f001 fcae 	bl	80053f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a98:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a9e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aa4:	f107 0314 	add.w	r3, r7, #20
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4818      	ldr	r0, [pc, #96]	@ (8003b0c <MX_GPIO_Init+0x1cc>)
 8003aac:	f001 fca0 	bl	80053f0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	2006      	movs	r0, #6
 8003ab6:	f001 f934 	bl	8004d22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003aba:	2006      	movs	r0, #6
 8003abc:	f001 f94b 	bl	8004d56 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	2008      	movs	r0, #8
 8003ac6:	f001 f92c 	bl	8004d22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003aca:	2008      	movs	r0, #8
 8003acc:	f001 f943 	bl	8004d56 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	2009      	movs	r0, #9
 8003ad6:	f001 f924 	bl	8004d22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003ada:	2009      	movs	r0, #9
 8003adc:	f001 f93b 	bl	8004d56 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	2017      	movs	r0, #23
 8003ae6:	f001 f91c 	bl	8004d22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003aea:	2017      	movs	r0, #23
 8003aec:	f001 f933 	bl	8004d56 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003af0:	2200      	movs	r2, #0
 8003af2:	2100      	movs	r1, #0
 8003af4:	2028      	movs	r0, #40	@ 0x28
 8003af6:	f001 f914 	bl	8004d22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003afa:	2028      	movs	r0, #40	@ 0x28
 8003afc:	f001 f92b 	bl	8004d56 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003b00:	bf00      	nop
 8003b02:	3728      	adds	r7, #40	@ 0x28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	48000800 	.word	0x48000800
 8003b10:	48000400 	.word	0x48000400

08003b14 <map>:

/* USER CODE BEGIN 4 */
float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	ed87 0a05 	vstr	s0, [r7, #20]
 8003b1e:	edc7 0a04 	vstr	s1, [r7, #16]
 8003b22:	ed87 1a03 	vstr	s2, [r7, #12]
 8003b26:	edc7 1a02 	vstr	s3, [r7, #8]
 8003b2a:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003b2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b32:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b3a:	edd7 6a01 	vldr	s13, [r7, #4]
 8003b3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b46:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003b4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003b62:	eeb0 0a67 	vmov.f32	s0, s15
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <DWT_Init>:

void DWT_Init(void) {
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003b74:	4b08      	ldr	r3, [pc, #32]	@ (8003b98 <DWT_Init+0x28>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a07      	ldr	r2, [pc, #28]	@ (8003b98 <DWT_Init+0x28>)
 8003b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b7e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <DWT_Init+0x2c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a05      	ldr	r2, [pc, #20]	@ (8003b9c <DWT_Init+0x2c>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6013      	str	r3, [r2, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	e000edf0 	.word	0xe000edf0
 8003b9c:	e0001000 	.word	0xe0001000

08003ba0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10) {
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb0:	d10d      	bne.n	8003bce <HAL_GPIO_EXTI_Callback+0x2e>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8003bb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003bb6:	4845      	ldr	r0, [pc, #276]	@ (8003ccc <HAL_GPIO_EXTI_Callback+0x12c>)
 8003bb8:	f001 fd9c 	bl	80056f4 <HAL_GPIO_ReadPin>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d105      	bne.n	8003bce <HAL_GPIO_EXTI_Callback+0x2e>
			Mode = 0;
 8003bc2:	4b43      	ldr	r3, [pc, #268]	@ (8003cd0 <HAL_GPIO_EXTI_Callback+0x130>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 8003bc8:	4b42      	ldr	r3, [pc, #264]	@ (8003cd4 <HAL_GPIO_EXTI_Callback+0x134>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd4:	d10e      	bne.n	8003bf4 <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 8003bd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bda:	483f      	ldr	r0, [pc, #252]	@ (8003cd8 <HAL_GPIO_EXTI_Callback+0x138>)
 8003bdc:	f001 fd8a 	bl	80056f4 <HAL_GPIO_ReadPin>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d103      	bne.n	8003bee <HAL_GPIO_EXTI_Callback+0x4e>
			P_Limit = 1;
 8003be6:	4b3d      	ldr	r3, [pc, #244]	@ (8003cdc <HAL_GPIO_EXTI_Callback+0x13c>)
 8003be8:	2201      	movs	r2, #1
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	e002      	b.n	8003bf4 <HAL_GPIO_EXTI_Callback+0x54>
		} else {
			P_Limit = 0;
 8003bee:	4b3b      	ldr	r3, [pc, #236]	@ (8003cdc <HAL_GPIO_EXTI_Callback+0x13c>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bfa:	d10e      	bne.n	8003c1a <HAL_GPIO_EXTI_Callback+0x7a>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1) {
 8003bfc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c00:	4835      	ldr	r0, [pc, #212]	@ (8003cd8 <HAL_GPIO_EXTI_Callback+0x138>)
 8003c02:	f001 fd77 	bl	80056f4 <HAL_GPIO_ReadPin>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d103      	bne.n	8003c14 <HAL_GPIO_EXTI_Callback+0x74>
			R_Limit = 1;
 8003c0c:	4b34      	ldr	r3, [pc, #208]	@ (8003ce0 <HAL_GPIO_EXTI_Callback+0x140>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	e002      	b.n	8003c1a <HAL_GPIO_EXTI_Callback+0x7a>
		} else {
			R_Limit = 0;
 8003c14:	4b32      	ldr	r3, [pc, #200]	@ (8003ce0 <HAL_GPIO_EXTI_Callback+0x140>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15) {
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c20:	d102      	bne.n	8003c28 <HAL_GPIO_EXTI_Callback+0x88>
		EmergencyState = 0;
 8003c22:	4b2c      	ldr	r3, [pc, #176]	@ (8003cd4 <HAL_GPIO_EXTI_Callback+0x134>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t state[3] = { 0 }; // 0 = waiting for rise, 1 = waiting for fall

	uint32_t now = DWT->CYCCNT;
 8003c28:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce4 <HAL_GPIO_EXTI_Callback+0x144>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	613b      	str	r3, [r7, #16]
	uint32_t idx;

	if (GPIO_Pin == GPIO_PIN_0)
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d102      	bne.n	8003c3a <HAL_GPIO_EXTI_Callback+0x9a>
		idx = 0;      // PC0
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	e00a      	b.n	8003c50 <HAL_GPIO_EXTI_Callback+0xb0>
	else if (GPIO_Pin == GPIO_PIN_2)
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d102      	bne.n	8003c46 <HAL_GPIO_EXTI_Callback+0xa6>
		idx = 1; // PC2
 8003c40:	2301      	movs	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e004      	b.n	8003c50 <HAL_GPIO_EXTI_Callback+0xb0>
	else if (GPIO_Pin == GPIO_PIN_3)
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d13b      	bne.n	8003cc4 <HAL_GPIO_EXTI_Callback+0x124>
		idx = 2; // PC3
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	617b      	str	r3, [r7, #20]
	else
		return;

	if (state[idx] == 0) {
 8003c50:	4a25      	ldr	r2, [pc, #148]	@ (8003ce8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	4413      	add	r3, r2
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <HAL_GPIO_EXTI_Callback+0xd2>
		rise_time[idx] = now;
 8003c5c:	4923      	ldr	r1, [pc, #140]	@ (8003cec <HAL_GPIO_EXTI_Callback+0x14c>)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 1;
 8003c66:	4a20      	ldr	r2, [pc, #128]	@ (8003ce8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
 8003c70:	e029      	b.n	8003cc6 <HAL_GPIO_EXTI_Callback+0x126>
	} else {
		uint32_t delta =
				(now >= rise_time[idx]) ?
 8003c72:	4a1e      	ldr	r2, [pc, #120]	@ (8003cec <HAL_GPIO_EXTI_Callback+0x14c>)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						(now - rise_time[idx]) :
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d306      	bcc.n	8003c8e <HAL_GPIO_EXTI_Callback+0xee>
 8003c80:	4a1a      	ldr	r2, [pc, #104]	@ (8003cec <HAL_GPIO_EXTI_Callback+0x14c>)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	e006      	b.n	8003c9c <HAL_GPIO_EXTI_Callback+0xfc>
						(0xFFFFFFFF - rise_time[idx] + now);
 8003c8e:	4a17      	ldr	r2, [pc, #92]	@ (8003cec <HAL_GPIO_EXTI_Callback+0x14c>)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
						(now - rise_time[idx]) :
 8003c9a:	3b01      	subs	r3, #1
		uint32_t delta =
 8003c9c:	60fb      	str	r3, [r7, #12]
		pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 8003c9e:	4b14      	ldr	r3, [pc, #80]	@ (8003cf0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a14      	ldr	r2, [pc, #80]	@ (8003cf4 <HAL_GPIO_EXTI_Callback+0x154>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	0c9b      	lsrs	r3, r3, #18
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb0:	4911      	ldr	r1, [pc, #68]	@ (8003cf8 <HAL_GPIO_EXTI_Callback+0x158>)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 0;
 8003cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8003ce8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	e000      	b.n	8003cc6 <HAL_GPIO_EXTI_Callback+0x126>
		return;
 8003cc4:	bf00      	nop
	}
}
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	48000800 	.word	0x48000800
 8003cd0:	20000b28 	.word	0x20000b28
 8003cd4:	20000b29 	.word	0x20000b29
 8003cd8:	48000400 	.word	0x48000400
 8003cdc:	20000b2d 	.word	0x20000b2d
 8003ce0:	20000b2e 	.word	0x20000b2e
 8003ce4:	e0001000 	.word	0xe0001000
 8003ce8:	20001244 	.word	0x20001244
 8003cec:	20000a50 	.word	0x20000a50
 8003cf0:	20000200 	.word	0x20000200
 8003cf4:	431bde83 	.word	0x431bde83
 8003cf8:	20000a5c 	.word	0x20000a5c

08003cfc <HAL_TIM_PeriodElapsedCallback>:

//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003cfc:	b4b0      	push	{r4, r5, r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a08      	ldr	r2, [pc, #32]	@ (8003d28 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d108      	bne.n	8003d1e <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8003d0c:	4b07      	ldr	r3, [pc, #28]	@ (8003d2c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	1e54      	subs	r4, r2, #1
 8003d14:	f143 0500 	adc.w	r5, r3, #0
 8003d18:	4b04      	ldr	r3, [pc, #16]	@ (8003d2c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003d1a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bcb0      	pop	{r4, r5, r7}
 8003d26:	4770      	bx	lr
 8003d28:	20000564 	.word	0x20000564
 8003d2c:	20000a20 	.word	0x20000a20

08003d30 <micros>:
uint64_t micros() {
 8003d30:	b4b0      	push	{r4, r5, r7}
 8003d32:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8003d34:	4b09      	ldr	r3, [pc, #36]	@ (8003d5c <micros+0x2c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4b07      	ldr	r3, [pc, #28]	@ (8003d60 <micros+0x30>)
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	1884      	adds	r4, r0, r2
 8003d48:	eb41 0503 	adc.w	r5, r1, r3
 8003d4c:	4622      	mov	r2, r4
 8003d4e:	462b      	mov	r3, r5
}
 8003d50:	4610      	mov	r0, r2
 8003d52:	4619      	mov	r1, r3
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bcb0      	pop	{r4, r5, r7}
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000564 	.word	0x20000564
 8003d60:	20000a20 	.word	0x20000a20

08003d64 <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
		float outMin, float outMax, PID_State *state) {
 8003d64:	b480      	push	{r7}
 8003d66:	b08f      	sub	sp, #60	@ 0x3c
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	ed87 0a07 	vstr	s0, [r7, #28]
 8003d6e:	edc7 0a06 	vstr	s1, [r7, #24]
 8003d72:	ed87 1a05 	vstr	s2, [r7, #20]
 8003d76:	edc7 1a04 	vstr	s3, [r7, #16]
 8003d7a:	ed87 2a03 	vstr	s4, [r7, #12]
 8003d7e:	edc7 2a02 	vstr	s5, [r7, #8]
 8003d82:	ed87 3a01 	vstr	s6, [r7, #4]
 8003d86:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 8003d88:	ed97 7a06 	vldr	s14, [r7, #24]
 8003d8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d94:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	ed93 7a00 	vldr	s14, [r3]
 8003d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003da2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	ed93 7a00 	vldr	s14, [r3]
 8003dba:	ed97 6a01 	vldr	s12, [r7, #4]
 8003dbe:	edd7 6a05 	vldr	s13, [r7, #20]
 8003dc2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dce:	dd08      	ble.n	8003de2 <PID_Update+0x7e>
		state->integ = outMax / kI;
 8003dd0:	edd7 6a01 	vldr	s13, [r7, #4]
 8003dd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8003dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	ed93 7a00 	vldr	s14, [r3]
 8003de8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dec:	edd7 6a05 	vldr	s13, [r7, #20]
 8003df0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003df4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfc:	d508      	bpl.n	8003e10 <PID_Update+0xac>
		state->integ = outMin / kI;
 8003dfe:	edd7 6a02 	vldr	s13, [r7, #8]
 8003e02:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 8003e10:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1c:	dd0b      	ble.n	8003e36 <PID_Update+0xd2>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	edd3 7a00 	vldr	s15, [r3]
 8003e24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2c:	d503      	bpl.n	8003e36 <PID_Update+0xd2>
		state->integ = 0;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 8003e36:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e42:	d50b      	bpl.n	8003e5c <PID_Update+0xf8>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	edd3 7a00 	vldr	s15, [r3]
 8003e4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e52:	dd03      	ble.n	8003e5c <PID_Update+0xf8>
		state->integ = 0;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	edd3 7a00 	vldr	s15, [r3]
 8003e62:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e74:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e78:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003e7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e84:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 8003e88:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e8c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e94:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 8003e9e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003ea2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eaa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eb2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 8003eb6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003eba:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec6:	dd01      	ble.n	8003ecc <PID_Update+0x168>
		out = outMax;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 8003ecc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003ed0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003edc:	d501      	bpl.n	8003ee2 <PID_Update+0x17e>
		out = outMin;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 8003ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee4:	ee07 3a90 	vmov	s15, r3
}
 8003ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8003eec:	373c      	adds	r7, #60	@ 0x3c
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update() {
 8003ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
	// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 8003f00:	f7ff ff16 	bl	8003d30 <micros>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	495f      	ldr	r1, [pc, #380]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8003f0a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 8003f0e:	4b5f      	ldr	r3, [pc, #380]	@ (800408c <Revolute_PosVel_Update+0x194>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	4a5c      	ldr	r2, [pc, #368]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8003f16:	6013      	str	r3, [r2, #0]

	// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8003f18:	4b5b      	ldr	r3, [pc, #364]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003f20:	ee07 3a90 	vmov	s15, r3
 8003f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f28:	4b57      	ldr	r3, [pc, #348]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8003f2a:	edc3 7a06 	vstr	s15, [r3, #24]

	// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8003f2e:	4b56      	ldr	r3, [pc, #344]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8003f30:	681a      	ldr	r2, [r3, #0]
			- Revolute_QEIdata.Position[OLD];
 8003f32:	4b55      	ldr	r3, [pc, #340]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8003f38:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f40:	dd04      	ble.n	8003f4c <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	e007      	b.n	8003f5c <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8003f52:	da03      	bge.n	8003f5c <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003f5a:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8003f5c:	4b4a      	ldr	r3, [pc, #296]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8003f5e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8003f62:	4b49      	ldr	r3, [pc, #292]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8003f64:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003f68:	ebb0 0a02 	subs.w	sl, r0, r2
 8003f6c:	eb61 0b03 	sbc.w	fp, r1, r3
 8003f70:	4650      	mov	r0, sl
 8003f72:	4659      	mov	r1, fp
 8003f74:	f7fc fede 	bl	8000d34 <__aeabi_ul2f>
 8003f78:	ee07 0a10 	vmov	s14, r0
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8003f7c:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8004090 <Revolute_PosVel_Update+0x198>
 8003f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f84:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 8003f88:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f94:	d06d      	beq.n	8004072 <Revolute_PosVel_Update+0x17a>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_r = (float) diffPosition_r / diffTime_r;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003fa0:	ed97 7a02 	vldr	s14, [r7, #8]
 8003fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa8:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAngularAcceleration = (Vel_counts_r
			- Revolute_QEIdata.QEIAngularVelocity) / diffTime_r;
 8003fac:	4b36      	ldr	r3, [pc, #216]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8003fae:	edd3 7a07 	vldr	s15, [r3, #28]
 8003fb2:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fb6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003fba:	ed97 7a02 	vldr	s14, [r7, #8]
 8003fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Revolute_QEIdata.QEIAngularAcceleration = (Vel_counts_r
 8003fc2:	4b31      	ldr	r3, [pc, #196]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8003fc4:	edc3 7a08 	vstr	s15, [r3, #32]

	// Store raw velocity
	Revolute_QEIdata.QEIAngularVelocity = Vel_counts_r;
 8003fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	61d3      	str	r3, [r2, #28]

	// Angular velocity in rad/s
	Revolute_QEIdata.AngularVelocity_rad = Vel_counts_r
			* (2.0f * M_PI / 16384.0f);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fc fa86 	bl	80004e0 <__aeabi_f2d>
 8003fd4:	a32a      	add	r3, pc, #168	@ (adr r3, 8004080 <Revolute_PosVel_Update+0x188>)
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fda:	f7fc fad9 	bl	8000590 <__aeabi_dmul>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f7fc fd8d 	bl	8000b04 <__aeabi_d2f>
 8003fea:	4603      	mov	r3, r0
	Revolute_QEIdata.AngularVelocity_rad = Vel_counts_r
 8003fec:	4a26      	ldr	r2, [pc, #152]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8003fee:	6253      	str	r3, [r2, #36]	@ 0x24

	// Angular acceleration in rad/s²
	Revolute_QEIdata.AngularAcceleration_rad =
			Revolute_QEIdata.QEIAngularAcceleration * (2.0f * M_PI / 16384.0f);
 8003ff0:	4b25      	ldr	r3, [pc, #148]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fc fa73 	bl	80004e0 <__aeabi_f2d>
 8003ffa:	a321      	add	r3, pc, #132	@ (adr r3, 8004080 <Revolute_PosVel_Update+0x188>)
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	f7fc fac6 	bl	8000590 <__aeabi_dmul>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4610      	mov	r0, r2
 800400a:	4619      	mov	r1, r3
 800400c:	f7fc fd7a 	bl	8000b04 <__aeabi_d2f>
 8004010:	4603      	mov	r3, r0
	Revolute_QEIdata.AngularAcceleration_rad =
 8004012:	4a1d      	ldr	r2, [pc, #116]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8004014:	6293      	str	r3, [r2, #40]	@ 0x28

	// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 8004016:	4b1c      	ldr	r3, [pc, #112]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8004018:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800401c:	68f9      	ldr	r1, [r7, #12]
 800401e:	17c8      	asrs	r0, r1, #31
 8004020:	460c      	mov	r4, r1
 8004022:	4605      	mov	r5, r0
 8004024:	eb12 0804 	adds.w	r8, r2, r4
 8004028:	eb43 0905 	adc.w	r9, r3, r5
 800402c:	4b16      	ldr	r3, [pc, #88]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 800402e:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8004032:	4b15      	ldr	r3, [pc, #84]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8004034:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (2.0f * M_PI / 16384.0f);
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	f7fc fa7a 	bl	8000534 <__aeabi_l2d>
 8004040:	a30f      	add	r3, pc, #60	@ (adr r3, 8004080 <Revolute_PosVel_Update+0x188>)
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f7fc faa3 	bl	8000590 <__aeabi_dmul>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4610      	mov	r0, r2
 8004050:	4619      	mov	r1, r3
 8004052:	f7fc fd57 	bl	8000b04 <__aeabi_d2f>
 8004056:	4603      	mov	r3, r0
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8004058:	4a0b      	ldr	r2, [pc, #44]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 800405a:	6393      	str	r3, [r2, #56]	@ 0x38

	// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 800405c:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a09      	ldr	r2, [pc, #36]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8004062:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 8004064:	4b08      	ldr	r3, [pc, #32]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 8004066:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800406a:	4907      	ldr	r1, [pc, #28]	@ (8004088 <Revolute_PosVel_Update+0x190>)
 800406c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004070:	e000      	b.n	8004074 <Revolute_PosVel_Update+0x17c>
		return;
 8004072:	bf00      	nop
}
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800407c:	f3af 8000 	nop.w
 8004080:	54442d18 	.word	0x54442d18
 8004084:	3f3921fb 	.word	0x3f3921fb
 8004088:	20000a70 	.word	0x20000a70
 800408c:	20000498 	.word	0x20000498
 8004090:	358637bd 	.word	0x358637bd

08004094 <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update() {
 8004094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
	// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 800409c:	f7ff fe48 	bl	8003d30 <micros>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	494c      	ldr	r1, [pc, #304]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 80040a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 80040aa:	4b4c      	ldr	r3, [pc, #304]	@ (80041dc <Prismatic_PosVel_Update+0x148>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	4a49      	ldr	r2, [pc, #292]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 80040b2:	6013      	str	r3, [r2, #0]

	// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 80040b4:	4b48      	ldr	r3, [pc, #288]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 80040b6:	681a      	ldr	r2, [r3, #0]
			- Prismatic_QEIdata.Position[OLD];
 80040b8:	4b47      	ldr	r3, [pc, #284]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 80040be:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c6:	dd04      	ble.n	80040d2 <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	e007      	b.n	80040e2 <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80040d8:	da03      	bge.n	80040e2 <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80040e0:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 80040e2:	4b3d      	ldr	r3, [pc, #244]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 80040e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 80040e8:	4b3b      	ldr	r3, [pc, #236]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 80040ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80040ee:	ebb0 0a02 	subs.w	sl, r0, r2
 80040f2:	eb61 0b03 	sbc.w	fp, r1, r3
 80040f6:	4650      	mov	r0, sl
 80040f8:	4659      	mov	r1, fp
 80040fa:	f7fc fe1b 	bl	8000d34 <__aeabi_ul2f>
 80040fe:	ee07 0a10 	vmov	s14, r0
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 8004102:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80041e0 <Prismatic_PosVel_Update+0x14c>
 8004106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410a:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 800410e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004112:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411a:	d057      	beq.n	80041cc <Prismatic_PosVel_Update+0x138>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_p = (float) diffPosition_p / diffTime_p;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004126:	ed97 7a02 	vldr	s14, [r7, #8]
 800412a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800412e:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
			- Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 8004132:	4b29      	ldr	r3, [pc, #164]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 8004134:	edd3 7a06 	vldr	s15, [r3, #24]
 8004138:	ed97 7a01 	vldr	s14, [r7, #4]
 800413c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004140:	ed97 7a02 	vldr	s14, [r7, #8]
 8004144:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
 8004148:	4b23      	ldr	r3, [pc, #140]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 800414a:	edc3 7a07 	vstr	s15, [r3, #28]

	// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 800414e:	4a22      	ldr	r2, [pc, #136]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6193      	str	r3, [r2, #24]

	// Velocity in mm/s
	Prismatic_QEIdata.Velocity_mm = Vel_counts_p * (10.0f / 8192.0f);
 8004154:	edd7 7a01 	vldr	s15, [r7, #4]
 8004158:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80041e4 <Prismatic_PosVel_Update+0x150>
 800415c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004160:	4b1d      	ldr	r3, [pc, #116]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 8004162:	edc3 7a08 	vstr	s15, [r3, #32]

	// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration_mm = Prismatic_QEIdata.QEIAcceleration
 8004166:	4b1c      	ldr	r3, [pc, #112]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 8004168:	edd3 7a07 	vldr	s15, [r3, #28]
			* (10.0f / 8192.0f);
 800416c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80041e4 <Prismatic_PosVel_Update+0x150>
 8004170:	ee67 7a87 	vmul.f32	s15, s15, s14
	Prismatic_QEIdata.Acceleration_mm = Prismatic_QEIdata.QEIAcceleration
 8004174:	4b18      	ldr	r3, [pc, #96]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 8004176:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 800417a:	4b17      	ldr	r3, [pc, #92]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 800417c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004180:	68f9      	ldr	r1, [r7, #12]
 8004182:	17c8      	asrs	r0, r1, #31
 8004184:	460c      	mov	r4, r1
 8004186:	4605      	mov	r5, r0
 8004188:	eb12 0804 	adds.w	r8, r2, r4
 800418c:	eb43 0905 	adc.w	r9, r3, r5
 8004190:	4b11      	ldr	r3, [pc, #68]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 8004192:	e9c3 890a 	strd	r8, r9, [r3, #40]	@ 0x28

	// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004196:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 8004198:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
			* (10.0f / 8192.0f);
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	f7fc fdd0 	bl	8000d44 <__aeabi_l2f>
 80041a4:	ee07 0a10 	vmov	s14, r0
 80041a8:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80041e4 <Prismatic_PosVel_Update+0x150>
 80041ac:	ee67 7a27 	vmul.f32	s15, s14, s15
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 80041b0:	4b09      	ldr	r3, [pc, #36]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 80041b2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 80041b6:	4b08      	ldr	r3, [pc, #32]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a07      	ldr	r2, [pc, #28]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 80041bc:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 80041be:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 80041c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80041c4:	4904      	ldr	r1, [pc, #16]	@ (80041d8 <Prismatic_PosVel_Update+0x144>)
 80041c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80041ca:	e000      	b.n	80041ce <Prismatic_PosVel_Update+0x13a>
		return;
 80041cc:	bf00      	nop
}
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041d6:	bf00      	nop
 80041d8:	20000ab0 	.word	0x20000ab0
 80041dc:	200003cc 	.word	0x200003cc
 80041e0:	358637bd 	.word	0x358637bd
 80041e4:	3aa00000 	.word	0x3aa00000

080041e8 <Set_Motor>:

void Set_Motor(int motor_num, float speed) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)
 80041f4:	edd7 7a00 	vldr	s15, [r7]
 80041f8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80042cc <Set_Motor+0xe4>
 80041fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004204:	dd01      	ble.n	800420a <Set_Motor+0x22>
		speed = 100.0f;
 8004206:	4b32      	ldr	r3, [pc, #200]	@ (80042d0 <Set_Motor+0xe8>)
 8004208:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f)
 800420a:	edd7 7a00 	vldr	s15, [r7]
 800420e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80042d4 <Set_Motor+0xec>
 8004212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421a:	d501      	bpl.n	8004220 <Set_Motor+0x38>
		speed = -100.0f;
 800421c:	4b2e      	ldr	r3, [pc, #184]	@ (80042d8 <Set_Motor+0xf0>)
 800421e:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t) ((fabsf(speed) * 100) / 100);
 8004220:	edd7 7a00 	vldr	s15, [r7]
 8004224:	eef0 7ae7 	vabs.f32	s15, s15
 8004228:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80042cc <Set_Motor+0xe4>
 800422c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004230:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80042cc <Set_Motor+0xe4>
 8004234:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800423c:	ee17 3a90 	vmov	r3, s15
 8004240:	60fb      	str	r3, [r7, #12]
	if (motor_num == 0) {
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d11d      	bne.n	8004284 <Set_Motor+0x9c>
		if (speed > 0) {
 8004248:	edd7 7a00 	vldr	s15, [r7]
 800424c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004254:	dd05      	ble.n	8004262 <Set_Motor+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8004256:	2201      	movs	r2, #1
 8004258:	2120      	movs	r1, #32
 800425a:	4820      	ldr	r0, [pc, #128]	@ (80042dc <Set_Motor+0xf4>)
 800425c:	f001 fa62 	bl	8005724 <HAL_GPIO_WritePin>
 8004260:	e00b      	b.n	800427a <Set_Motor+0x92>
		} else if (speed < 0) {
 8004262:	edd7 7a00 	vldr	s15, [r7]
 8004266:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800426a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426e:	d504      	bpl.n	800427a <Set_Motor+0x92>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004270:	2200      	movs	r2, #0
 8004272:	2120      	movs	r1, #32
 8004274:	4819      	ldr	r0, [pc, #100]	@ (80042dc <Set_Motor+0xf4>)
 8004276:	f001 fa55 	bl	8005724 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 800427a:	4b19      	ldr	r3, [pc, #100]	@ (80042e0 <Set_Motor+0xf8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	63da      	str	r2, [r3, #60]	@ 0x3c
		} else if (speed < 0) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 8004282:	e01f      	b.n	80042c4 <Set_Motor+0xdc>
	} else if (motor_num == 1) {
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d11c      	bne.n	80042c4 <Set_Motor+0xdc>
		if (speed > 0) {
 800428a:	edd7 7a00 	vldr	s15, [r7]
 800428e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004296:	dd05      	ble.n	80042a4 <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004298:	2200      	movs	r2, #0
 800429a:	2140      	movs	r1, #64	@ 0x40
 800429c:	480f      	ldr	r0, [pc, #60]	@ (80042dc <Set_Motor+0xf4>)
 800429e:	f001 fa41 	bl	8005724 <HAL_GPIO_WritePin>
 80042a2:	e00b      	b.n	80042bc <Set_Motor+0xd4>
		} else if (speed < 0) {
 80042a4:	edd7 7a00 	vldr	s15, [r7]
 80042a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b0:	d504      	bpl.n	80042bc <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80042b2:	2201      	movs	r2, #1
 80042b4:	2140      	movs	r1, #64	@ 0x40
 80042b6:	4809      	ldr	r0, [pc, #36]	@ (80042dc <Set_Motor+0xf4>)
 80042b8:	f001 fa34 	bl	8005724 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 80042bc:	4b08      	ldr	r3, [pc, #32]	@ (80042e0 <Set_Motor+0xf8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	42c80000 	.word	0x42c80000
 80042d0:	42c80000 	.word	0x42c80000
 80042d4:	c2c80000 	.word	0xc2c80000
 80042d8:	c2c80000 	.word	0xc2c80000
 80042dc:	48000800 	.word	0x48000800
 80042e0:	20000630 	.word	0x20000630

080042e4 <Set_Servo>:

void Set_Servo(int Pen_Pos) {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0) {
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10f      	bne.n	8004312 <Set_Servo+0x2e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 300);
 80042f2:	4b0e      	ldr	r3, [pc, #56]	@ (800432c <Set_Servo+0x48>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042fa:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 80042fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004330 <Set_Servo+0x4c>)
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 8004302:	f7ff fd15 	bl	8003d30 <micros>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	490a      	ldr	r1, [pc, #40]	@ (8004334 <Set_Servo+0x50>)
 800430c:	e9c1 2300 	strd	r2, r3, [r1]
	} else {
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 8004310:	e007      	b.n	8004322 <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 8004312:	4b06      	ldr	r3, [pc, #24]	@ (800432c <Set_Servo+0x48>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800431a:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 800431c:	4b04      	ldr	r3, [pc, #16]	@ (8004330 <Set_Servo+0x4c>)
 800431e:	2201      	movs	r2, #1
 8004320:	701a      	strb	r2, [r3, #0]
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	200006fc 	.word	0x200006fc
 8004330:	20000b2c 	.word	0x20000b2c
 8004334:	20000b90 	.word	0x20000b90

08004338 <Reset_R>:

void Reset_R() {
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 800433c:	4905      	ldr	r1, [pc, #20]	@ (8004354 <Reset_R+0x1c>)
 800433e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 800434a:	bf00      	nop
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	20000a70 	.word	0x20000a70

08004358 <Reset_P>:
void Reset_P() {
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 800435c:	4905      	ldr	r1, [pc, #20]	@ (8004374 <Reset_P+0x1c>)
 800435e:	4a06      	ldr	r2, [pc, #24]	@ (8004378 <Reset_P+0x20>)
 8004360:	f04f 33ff 	mov.w	r3, #4294967295
 8004364:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//	Prismatic_QEIdata.mmPosition = 0;
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20000ab0 	.word	0x20000ab0
 8004378:	fffff99a 	.word	0xfffff99a

0800437c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004380:	b672      	cpsid	i
}
 8004382:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004384:	bf00      	nop
 8004386:	e7fd      	b.n	8004384 <Error_Handler+0x8>

08004388 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800438e:	4b0f      	ldr	r3, [pc, #60]	@ (80043cc <HAL_MspInit+0x44>)
 8004390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004392:	4a0e      	ldr	r2, [pc, #56]	@ (80043cc <HAL_MspInit+0x44>)
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	6613      	str	r3, [r2, #96]	@ 0x60
 800439a:	4b0c      	ldr	r3, [pc, #48]	@ (80043cc <HAL_MspInit+0x44>)
 800439c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	607b      	str	r3, [r7, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043a6:	4b09      	ldr	r3, [pc, #36]	@ (80043cc <HAL_MspInit+0x44>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043aa:	4a08      	ldr	r2, [pc, #32]	@ (80043cc <HAL_MspInit+0x44>)
 80043ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80043b2:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <HAL_MspInit+0x44>)
 80043b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80043be:	f001 fa85 	bl	80058cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000

080043d0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08c      	sub	sp, #48	@ 0x30
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d8:	f107 031c 	add.w	r3, r7, #28
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	609a      	str	r2, [r3, #8]
 80043e4:	60da      	str	r2, [r3, #12]
 80043e6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a32      	ldr	r2, [pc, #200]	@ (80044b8 <HAL_TIM_IC_MspInit+0xe8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d130      	bne.n	8004454 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043f2:	4b32      	ldr	r3, [pc, #200]	@ (80044bc <HAL_TIM_IC_MspInit+0xec>)
 80043f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f6:	4a31      	ldr	r2, [pc, #196]	@ (80044bc <HAL_TIM_IC_MspInit+0xec>)
 80043f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80043fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80043fe:	4b2f      	ldr	r3, [pc, #188]	@ (80044bc <HAL_TIM_IC_MspInit+0xec>)
 8004400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004402:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800440a:	4b2c      	ldr	r3, [pc, #176]	@ (80044bc <HAL_TIM_IC_MspInit+0xec>)
 800440c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440e:	4a2b      	ldr	r2, [pc, #172]	@ (80044bc <HAL_TIM_IC_MspInit+0xec>)
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004416:	4b29      	ldr	r3, [pc, #164]	@ (80044bc <HAL_TIM_IC_MspInit+0xec>)
 8004418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004422:	2302      	movs	r3, #2
 8004424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004426:	2302      	movs	r3, #2
 8004428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442e:	2300      	movs	r3, #0
 8004430:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004432:	2302      	movs	r3, #2
 8004434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004436:	f107 031c 	add.w	r3, r7, #28
 800443a:	4619      	mov	r1, r3
 800443c:	4820      	ldr	r0, [pc, #128]	@ (80044c0 <HAL_TIM_IC_MspInit+0xf0>)
 800443e:	f000 ffd7 	bl	80053f0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004442:	2200      	movs	r2, #0
 8004444:	2100      	movs	r1, #0
 8004446:	2019      	movs	r0, #25
 8004448:	f000 fc6b 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800444c:	2019      	movs	r0, #25
 800444e:	f000 fc82 	bl	8004d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004452:	e02d      	b.n	80044b0 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800445c:	d128      	bne.n	80044b0 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800445e:	4b17      	ldr	r3, [pc, #92]	@ (80044bc <HAL_TIM_IC_MspInit+0xec>)
 8004460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004462:	4a16      	ldr	r2, [pc, #88]	@ (80044bc <HAL_TIM_IC_MspInit+0xec>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6593      	str	r3, [r2, #88]	@ 0x58
 800446a:	4b14      	ldr	r3, [pc, #80]	@ (80044bc <HAL_TIM_IC_MspInit+0xec>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004476:	4b11      	ldr	r3, [pc, #68]	@ (80044bc <HAL_TIM_IC_MspInit+0xec>)
 8004478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447a:	4a10      	ldr	r2, [pc, #64]	@ (80044bc <HAL_TIM_IC_MspInit+0xec>)
 800447c:	f043 0301 	orr.w	r3, r3, #1
 8004480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004482:	4b0e      	ldr	r3, [pc, #56]	@ (80044bc <HAL_TIM_IC_MspInit+0xec>)
 8004484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800448e:	2301      	movs	r3, #1
 8004490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004492:	2302      	movs	r3, #2
 8004494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004496:	2300      	movs	r3, #0
 8004498:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449a:	2300      	movs	r3, #0
 800449c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800449e:	2301      	movs	r3, #1
 80044a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044a2:	f107 031c 	add.w	r3, r7, #28
 80044a6:	4619      	mov	r1, r3
 80044a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044ac:	f000 ffa0 	bl	80053f0 <HAL_GPIO_Init>
}
 80044b0:	bf00      	nop
 80044b2:	3730      	adds	r7, #48	@ 0x30
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	40021000 	.word	0x40021000
 80044c0:	48000800 	.word	0x48000800

080044c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08c      	sub	sp, #48	@ 0x30
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044cc:	f107 031c 	add.w	r3, r7, #28
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	609a      	str	r2, [r3, #8]
 80044d8:	60da      	str	r2, [r3, #12]
 80044da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a33      	ldr	r2, [pc, #204]	@ (80045b0 <HAL_TIM_Encoder_MspInit+0xec>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d128      	bne.n	8004538 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044e6:	4b33      	ldr	r3, [pc, #204]	@ (80045b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 80044e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ea:	4a32      	ldr	r2, [pc, #200]	@ (80045b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 80044ec:	f043 0302 	orr.w	r3, r3, #2
 80044f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80044f2:	4b30      	ldr	r3, [pc, #192]	@ (80045b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 80044f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	61bb      	str	r3, [r7, #24]
 80044fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044fe:	4b2d      	ldr	r3, [pc, #180]	@ (80045b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004502:	4a2c      	ldr	r2, [pc, #176]	@ (80045b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800450a:	4b2a      	ldr	r3, [pc, #168]	@ (80045b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800450c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004516:	2330      	movs	r3, #48	@ 0x30
 8004518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451a:	2302      	movs	r3, #2
 800451c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451e:	2300      	movs	r3, #0
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004522:	2300      	movs	r3, #0
 8004524:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004526:	2302      	movs	r3, #2
 8004528:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800452a:	f107 031c 	add.w	r3, r7, #28
 800452e:	4619      	mov	r1, r3
 8004530:	4821      	ldr	r0, [pc, #132]	@ (80045b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004532:	f000 ff5d 	bl	80053f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004536:	e036      	b.n	80045a6 <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1f      	ldr	r2, [pc, #124]	@ (80045bc <HAL_TIM_Encoder_MspInit+0xf8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d131      	bne.n	80045a6 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004542:	4b1c      	ldr	r3, [pc, #112]	@ (80045b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004546:	4a1b      	ldr	r2, [pc, #108]	@ (80045b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004548:	f043 0304 	orr.w	r3, r3, #4
 800454c:	6593      	str	r3, [r2, #88]	@ 0x58
 800454e:	4b19      	ldr	r3, [pc, #100]	@ (80045b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800455a:	4b16      	ldr	r3, [pc, #88]	@ (80045b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800455c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800455e:	4a15      	ldr	r2, [pc, #84]	@ (80045b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004566:	4b13      	ldr	r3, [pc, #76]	@ (80045b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004572:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004578:	2302      	movs	r3, #2
 800457a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004580:	2300      	movs	r3, #0
 8004582:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004584:	230a      	movs	r3, #10
 8004586:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004588:	f107 031c 	add.w	r3, r7, #28
 800458c:	4619      	mov	r1, r3
 800458e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004592:	f000 ff2d 	bl	80053f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004596:	2200      	movs	r2, #0
 8004598:	2100      	movs	r1, #0
 800459a:	201e      	movs	r0, #30
 800459c:	f000 fbc1 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80045a0:	201e      	movs	r0, #30
 80045a2:	f000 fbd8 	bl	8004d56 <HAL_NVIC_EnableIRQ>
}
 80045a6:	bf00      	nop
 80045a8:	3730      	adds	r7, #48	@ 0x30
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40021000 	.word	0x40021000
 80045b8:	48000400 	.word	0x48000400
 80045bc:	40000800 	.word	0x40000800

080045c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004680 <HAL_TIM_Base_MspInit+0xc0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d114      	bne.n	80045fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80045d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004684 <HAL_TIM_Base_MspInit+0xc4>)
 80045d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004684 <HAL_TIM_Base_MspInit+0xc4>)
 80045d8:	f043 0308 	orr.w	r3, r3, #8
 80045dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80045de:	4b29      	ldr	r3, [pc, #164]	@ (8004684 <HAL_TIM_Base_MspInit+0xc4>)
 80045e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80045ea:	2200      	movs	r2, #0
 80045ec:	2100      	movs	r1, #0
 80045ee:	2032      	movs	r0, #50	@ 0x32
 80045f0:	f000 fb97 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80045f4:	2032      	movs	r0, #50	@ 0x32
 80045f6:	f000 fbae 	bl	8004d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80045fa:	e03c      	b.n	8004676 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a21      	ldr	r2, [pc, #132]	@ (8004688 <HAL_TIM_Base_MspInit+0xc8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d10c      	bne.n	8004620 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004606:	4b1f      	ldr	r3, [pc, #124]	@ (8004684 <HAL_TIM_Base_MspInit+0xc4>)
 8004608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800460a:	4a1e      	ldr	r2, [pc, #120]	@ (8004684 <HAL_TIM_Base_MspInit+0xc4>)
 800460c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004610:	6613      	str	r3, [r2, #96]	@ 0x60
 8004612:	4b1c      	ldr	r3, [pc, #112]	@ (8004684 <HAL_TIM_Base_MspInit+0xc4>)
 8004614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004616:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	693b      	ldr	r3, [r7, #16]
}
 800461e:	e02a      	b.n	8004676 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM15)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a19      	ldr	r2, [pc, #100]	@ (800468c <HAL_TIM_Base_MspInit+0xcc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d10c      	bne.n	8004644 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800462a:	4b16      	ldr	r3, [pc, #88]	@ (8004684 <HAL_TIM_Base_MspInit+0xc4>)
 800462c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800462e:	4a15      	ldr	r2, [pc, #84]	@ (8004684 <HAL_TIM_Base_MspInit+0xc4>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004634:	6613      	str	r3, [r2, #96]	@ 0x60
 8004636:	4b13      	ldr	r3, [pc, #76]	@ (8004684 <HAL_TIM_Base_MspInit+0xc4>)
 8004638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
}
 8004642:	e018      	b.n	8004676 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a11      	ldr	r2, [pc, #68]	@ (8004690 <HAL_TIM_Base_MspInit+0xd0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d113      	bne.n	8004676 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800464e:	4b0d      	ldr	r3, [pc, #52]	@ (8004684 <HAL_TIM_Base_MspInit+0xc4>)
 8004650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004652:	4a0c      	ldr	r2, [pc, #48]	@ (8004684 <HAL_TIM_Base_MspInit+0xc4>)
 8004654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004658:	6613      	str	r3, [r2, #96]	@ 0x60
 800465a:	4b0a      	ldr	r3, [pc, #40]	@ (8004684 <HAL_TIM_Base_MspInit+0xc4>)
 800465c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004662:	60bb      	str	r3, [r7, #8]
 8004664:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004666:	2200      	movs	r2, #0
 8004668:	2100      	movs	r1, #0
 800466a:	2019      	movs	r0, #25
 800466c:	f000 fb59 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004670:	2019      	movs	r0, #25
 8004672:	f000 fb70 	bl	8004d56 <HAL_NVIC_EnableIRQ>
}
 8004676:	bf00      	nop
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40000c00 	.word	0x40000c00
 8004684:	40021000 	.word	0x40021000
 8004688:	40013400 	.word	0x40013400
 800468c:	40014000 	.word	0x40014000
 8004690:	40014400 	.word	0x40014400

08004694 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	@ 0x28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800469c:	f107 0314 	add.w	r3, r7, #20
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	609a      	str	r2, [r3, #8]
 80046a8:	60da      	str	r2, [r3, #12]
 80046aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a23      	ldr	r2, [pc, #140]	@ (8004740 <HAL_TIM_MspPostInit+0xac>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d11d      	bne.n	80046f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046b6:	4b23      	ldr	r3, [pc, #140]	@ (8004744 <HAL_TIM_MspPostInit+0xb0>)
 80046b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ba:	4a22      	ldr	r2, [pc, #136]	@ (8004744 <HAL_TIM_MspPostInit+0xb0>)
 80046bc:	f043 0304 	orr.w	r3, r3, #4
 80046c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046c2:	4b20      	ldr	r3, [pc, #128]	@ (8004744 <HAL_TIM_MspPostInit+0xb0>)
 80046c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80046ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80046d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d4:	2302      	movs	r3, #2
 80046d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046dc:	2300      	movs	r3, #0
 80046de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80046e0:	2304      	movs	r3, #4
 80046e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046e4:	f107 0314 	add.w	r3, r7, #20
 80046e8:	4619      	mov	r1, r3
 80046ea:	4817      	ldr	r0, [pc, #92]	@ (8004748 <HAL_TIM_MspPostInit+0xb4>)
 80046ec:	f000 fe80 	bl	80053f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80046f0:	e021      	b.n	8004736 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a15      	ldr	r2, [pc, #84]	@ (800474c <HAL_TIM_MspPostInit+0xb8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d11c      	bne.n	8004736 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046fc:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <HAL_TIM_MspPostInit+0xb0>)
 80046fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004700:	4a10      	ldr	r2, [pc, #64]	@ (8004744 <HAL_TIM_MspPostInit+0xb0>)
 8004702:	f043 0302 	orr.w	r3, r3, #2
 8004706:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004708:	4b0e      	ldr	r3, [pc, #56]	@ (8004744 <HAL_TIM_MspPostInit+0xb0>)
 800470a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004714:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471a:	2302      	movs	r3, #2
 800471c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004722:	2300      	movs	r3, #0
 8004724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8004726:	2301      	movs	r3, #1
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800472a:	f107 0314 	add.w	r3, r7, #20
 800472e:	4619      	mov	r1, r3
 8004730:	4807      	ldr	r0, [pc, #28]	@ (8004750 <HAL_TIM_MspPostInit+0xbc>)
 8004732:	f000 fe5d 	bl	80053f0 <HAL_GPIO_Init>
}
 8004736:	bf00      	nop
 8004738:	3728      	adds	r7, #40	@ 0x28
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40013400 	.word	0x40013400
 8004744:	40021000 	.word	0x40021000
 8004748:	48000800 	.word	0x48000800
 800474c:	40014000 	.word	0x40014000
 8004750:	48000400 	.word	0x48000400

08004754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b09e      	sub	sp, #120	@ 0x78
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800475c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	60da      	str	r2, [r3, #12]
 800476a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800476c:	f107 0310 	add.w	r3, r7, #16
 8004770:	2254      	movs	r2, #84	@ 0x54
 8004772:	2100      	movs	r1, #0
 8004774:	4618      	mov	r0, r3
 8004776:	f006 fcbd 	bl	800b0f4 <memset>
  if(huart->Instance==USART2)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a4d      	ldr	r2, [pc, #308]	@ (80048b4 <HAL_UART_MspInit+0x160>)
 8004780:	4293      	cmp	r3, r2
 8004782:	f040 8092 	bne.w	80048aa <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004786:	2302      	movs	r3, #2
 8004788:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800478a:	2300      	movs	r3, #0
 800478c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800478e:	f107 0310 	add.w	r3, r7, #16
 8004792:	4618      	mov	r0, r3
 8004794:	f001 fdd8 	bl	8006348 <HAL_RCCEx_PeriphCLKConfig>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800479e:	f7ff fded 	bl	800437c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80047a2:	4b45      	ldr	r3, [pc, #276]	@ (80048b8 <HAL_UART_MspInit+0x164>)
 80047a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a6:	4a44      	ldr	r2, [pc, #272]	@ (80048b8 <HAL_UART_MspInit+0x164>)
 80047a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80047ae:	4b42      	ldr	r3, [pc, #264]	@ (80048b8 <HAL_UART_MspInit+0x164>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ba:	4b3f      	ldr	r3, [pc, #252]	@ (80048b8 <HAL_UART_MspInit+0x164>)
 80047bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047be:	4a3e      	ldr	r2, [pc, #248]	@ (80048b8 <HAL_UART_MspInit+0x164>)
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047c6:	4b3c      	ldr	r3, [pc, #240]	@ (80048b8 <HAL_UART_MspInit+0x164>)
 80047c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80047d2:	230c      	movs	r3, #12
 80047d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d6:	2302      	movs	r3, #2
 80047d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047de:	2300      	movs	r3, #0
 80047e0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047e2:	2307      	movs	r3, #7
 80047e4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80047ea:	4619      	mov	r1, r3
 80047ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80047f0:	f000 fdfe 	bl	80053f0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80047f4:	4b31      	ldr	r3, [pc, #196]	@ (80048bc <HAL_UART_MspInit+0x168>)
 80047f6:	4a32      	ldr	r2, [pc, #200]	@ (80048c0 <HAL_UART_MspInit+0x16c>)
 80047f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80047fa:	4b30      	ldr	r3, [pc, #192]	@ (80048bc <HAL_UART_MspInit+0x168>)
 80047fc:	221a      	movs	r2, #26
 80047fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004800:	4b2e      	ldr	r3, [pc, #184]	@ (80048bc <HAL_UART_MspInit+0x168>)
 8004802:	2200      	movs	r2, #0
 8004804:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004806:	4b2d      	ldr	r3, [pc, #180]	@ (80048bc <HAL_UART_MspInit+0x168>)
 8004808:	2200      	movs	r2, #0
 800480a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800480c:	4b2b      	ldr	r3, [pc, #172]	@ (80048bc <HAL_UART_MspInit+0x168>)
 800480e:	2280      	movs	r2, #128	@ 0x80
 8004810:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004812:	4b2a      	ldr	r3, [pc, #168]	@ (80048bc <HAL_UART_MspInit+0x168>)
 8004814:	2200      	movs	r2, #0
 8004816:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004818:	4b28      	ldr	r3, [pc, #160]	@ (80048bc <HAL_UART_MspInit+0x168>)
 800481a:	2200      	movs	r2, #0
 800481c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800481e:	4b27      	ldr	r3, [pc, #156]	@ (80048bc <HAL_UART_MspInit+0x168>)
 8004820:	2200      	movs	r2, #0
 8004822:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004824:	4b25      	ldr	r3, [pc, #148]	@ (80048bc <HAL_UART_MspInit+0x168>)
 8004826:	2200      	movs	r2, #0
 8004828:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800482a:	4824      	ldr	r0, [pc, #144]	@ (80048bc <HAL_UART_MspInit+0x168>)
 800482c:	f000 faae 	bl	8004d8c <HAL_DMA_Init>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004836:	f7ff fda1 	bl	800437c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a1f      	ldr	r2, [pc, #124]	@ (80048bc <HAL_UART_MspInit+0x168>)
 800483e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004842:	4a1e      	ldr	r2, [pc, #120]	@ (80048bc <HAL_UART_MspInit+0x168>)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004848:	4b1e      	ldr	r3, [pc, #120]	@ (80048c4 <HAL_UART_MspInit+0x170>)
 800484a:	4a1f      	ldr	r2, [pc, #124]	@ (80048c8 <HAL_UART_MspInit+0x174>)
 800484c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800484e:	4b1d      	ldr	r3, [pc, #116]	@ (80048c4 <HAL_UART_MspInit+0x170>)
 8004850:	221b      	movs	r2, #27
 8004852:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004854:	4b1b      	ldr	r3, [pc, #108]	@ (80048c4 <HAL_UART_MspInit+0x170>)
 8004856:	2210      	movs	r2, #16
 8004858:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800485a:	4b1a      	ldr	r3, [pc, #104]	@ (80048c4 <HAL_UART_MspInit+0x170>)
 800485c:	2200      	movs	r2, #0
 800485e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004860:	4b18      	ldr	r3, [pc, #96]	@ (80048c4 <HAL_UART_MspInit+0x170>)
 8004862:	2280      	movs	r2, #128	@ 0x80
 8004864:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004866:	4b17      	ldr	r3, [pc, #92]	@ (80048c4 <HAL_UART_MspInit+0x170>)
 8004868:	2200      	movs	r2, #0
 800486a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800486c:	4b15      	ldr	r3, [pc, #84]	@ (80048c4 <HAL_UART_MspInit+0x170>)
 800486e:	2200      	movs	r2, #0
 8004870:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004872:	4b14      	ldr	r3, [pc, #80]	@ (80048c4 <HAL_UART_MspInit+0x170>)
 8004874:	2200      	movs	r2, #0
 8004876:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004878:	4b12      	ldr	r3, [pc, #72]	@ (80048c4 <HAL_UART_MspInit+0x170>)
 800487a:	2200      	movs	r2, #0
 800487c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800487e:	4811      	ldr	r0, [pc, #68]	@ (80048c4 <HAL_UART_MspInit+0x170>)
 8004880:	f000 fa84 	bl	8004d8c <HAL_DMA_Init>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800488a:	f7ff fd77 	bl	800437c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a0c      	ldr	r2, [pc, #48]	@ (80048c4 <HAL_UART_MspInit+0x170>)
 8004892:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004894:	4a0b      	ldr	r2, [pc, #44]	@ (80048c4 <HAL_UART_MspInit+0x170>)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800489a:	2200      	movs	r2, #0
 800489c:	2100      	movs	r1, #0
 800489e:	2026      	movs	r0, #38	@ 0x26
 80048a0:	f000 fa3f 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80048a4:	2026      	movs	r0, #38	@ 0x26
 80048a6:	f000 fa56 	bl	8004d56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80048aa:	bf00      	nop
 80048ac:	3778      	adds	r7, #120	@ 0x78
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40004400 	.word	0x40004400
 80048b8:	40021000 	.word	0x40021000
 80048bc:	20000960 	.word	0x20000960
 80048c0:	40020008 	.word	0x40020008
 80048c4:	200009c0 	.word	0x200009c0
 80048c8:	4002001c 	.word	0x4002001c

080048cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80048d0:	bf00      	nop
 80048d2:	e7fd      	b.n	80048d0 <NMI_Handler+0x4>

080048d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048d8:	bf00      	nop
 80048da:	e7fd      	b.n	80048d8 <HardFault_Handler+0x4>

080048dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048e0:	bf00      	nop
 80048e2:	e7fd      	b.n	80048e0 <MemManage_Handler+0x4>

080048e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048e8:	bf00      	nop
 80048ea:	e7fd      	b.n	80048e8 <BusFault_Handler+0x4>

080048ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048f0:	bf00      	nop
 80048f2:	e7fd      	b.n	80048f0 <UsageFault_Handler+0x4>

080048f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048f8:	bf00      	nop
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004902:	b480      	push	{r7}
 8004904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004906:	bf00      	nop
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004914:	bf00      	nop
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004922:	f000 f905 	bl	8004b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004926:	bf00      	nop
 8004928:	bd80      	pop	{r7, pc}

0800492a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800492e:	2001      	movs	r0, #1
 8004930:	f000 ff10 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004934:	bf00      	nop
 8004936:	bd80      	pop	{r7, pc}

08004938 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800493c:	2004      	movs	r0, #4
 800493e:	f000 ff09 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}

08004946 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800494a:	2008      	movs	r0, #8
 800494c:	f000 ff02 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004950:	bf00      	nop
 8004952:	bd80      	pop	{r7, pc}

08004954 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004958:	4802      	ldr	r0, [pc, #8]	@ (8004964 <DMA1_Channel1_IRQHandler+0x10>)
 800495a:	f000 fbfa 	bl	8005152 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800495e:	bf00      	nop
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20000960 	.word	0x20000960

08004968 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800496c:	4802      	ldr	r0, [pc, #8]	@ (8004978 <DMA1_Channel2_IRQHandler+0x10>)
 800496e:	f000 fbf0 	bl	8005152 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004972:	bf00      	nop
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	200009c0 	.word	0x200009c0

0800497c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004980:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004984:	f000 fee6 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004988:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800498c:	f000 fee2 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004990:	bf00      	nop
 8004992:	bd80      	pop	{r7, pc}

08004994 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004998:	4803      	ldr	r0, [pc, #12]	@ (80049a8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800499a:	f002 fd8f 	bl	80074bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800499e:	4803      	ldr	r0, [pc, #12]	@ (80049ac <TIM1_UP_TIM16_IRQHandler+0x18>)
 80049a0:	f002 fd8c 	bl	80074bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80049a4:	bf00      	nop
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	20000234 	.word	0x20000234
 80049ac:	200007c8 	.word	0x200007c8

080049b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80049b4:	4802      	ldr	r0, [pc, #8]	@ (80049c0 <TIM4_IRQHandler+0x10>)
 80049b6:	f002 fd81 	bl	80074bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000498 	.word	0x20000498

080049c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80049c8:	4802      	ldr	r0, [pc, #8]	@ (80049d4 <USART2_IRQHandler+0x10>)
 80049ca:	f004 fe33 	bl	8009634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80049ce:	bf00      	nop
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000894 	.word	0x20000894

080049d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80049dc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80049e0:	f000 feb8 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80049e4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80049e8:	f000 feb4 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80049ec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80049f0:	f000 feb0 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80049f4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80049f8:	f000 feac 	bl	8005754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80049fc:	bf00      	nop
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004a04:	4802      	ldr	r0, [pc, #8]	@ (8004a10 <TIM5_IRQHandler+0x10>)
 8004a06:	f002 fd59 	bl	80074bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000564 	.word	0x20000564

08004a14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004a18:	4b06      	ldr	r3, [pc, #24]	@ (8004a34 <SystemInit+0x20>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1e:	4a05      	ldr	r2, [pc, #20]	@ (8004a34 <SystemInit+0x20>)
 8004a20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a28:	bf00      	nop
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	e000ed00 	.word	0xe000ed00

08004a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004a38:	480d      	ldr	r0, [pc, #52]	@ (8004a70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004a3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a3c:	f7ff ffea 	bl	8004a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a40:	480c      	ldr	r0, [pc, #48]	@ (8004a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8004a42:	490d      	ldr	r1, [pc, #52]	@ (8004a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a44:	4a0d      	ldr	r2, [pc, #52]	@ (8004a7c <LoopForever+0xe>)
  movs r3, #0
 8004a46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004a48:	e002      	b.n	8004a50 <LoopCopyDataInit>

08004a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a4e:	3304      	adds	r3, #4

08004a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a54:	d3f9      	bcc.n	8004a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a56:	4a0a      	ldr	r2, [pc, #40]	@ (8004a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a58:	4c0a      	ldr	r4, [pc, #40]	@ (8004a84 <LoopForever+0x16>)
  movs r3, #0
 8004a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a5c:	e001      	b.n	8004a62 <LoopFillZerobss>

08004a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a60:	3204      	adds	r2, #4

08004a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a64:	d3fb      	bcc.n	8004a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a66:	f006 fb4d 	bl	800b104 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a6a:	f7fd f811 	bl	8001a90 <main>

08004a6e <LoopForever>:

LoopForever:
    b LoopForever
 8004a6e:	e7fe      	b.n	8004a6e <LoopForever>
  ldr   r0, =_estack
 8004a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a78:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8004a7c:	0800c088 	.word	0x0800c088
  ldr r2, =_sbss
 8004a80:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004a84:	2000124c 	.word	0x2000124c

08004a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a88:	e7fe      	b.n	8004a88 <ADC1_2_IRQHandler>

08004a8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a94:	2003      	movs	r0, #3
 8004a96:	f000 f939 	bl	8004d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	f000 f80e 	bl	8004abc <HAL_InitTick>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	71fb      	strb	r3, [r7, #7]
 8004aaa:	e001      	b.n	8004ab0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004aac:	f7ff fc6c 	bl	8004388 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004ab0:	79fb      	ldrb	r3, [r7, #7]

}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
	...

08004abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004ac8:	4b16      	ldr	r3, [pc, #88]	@ (8004b24 <HAL_InitTick+0x68>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d022      	beq.n	8004b16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004ad0:	4b15      	ldr	r3, [pc, #84]	@ (8004b28 <HAL_InitTick+0x6c>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4b13      	ldr	r3, [pc, #76]	@ (8004b24 <HAL_InitTick+0x68>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 f944 	bl	8004d72 <HAL_SYSTICK_Config>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10f      	bne.n	8004b10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b0f      	cmp	r3, #15
 8004af4:	d809      	bhi.n	8004b0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004af6:	2200      	movs	r2, #0
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	f04f 30ff 	mov.w	r0, #4294967295
 8004afe:	f000 f910 	bl	8004d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b02:	4a0a      	ldr	r2, [pc, #40]	@ (8004b2c <HAL_InitTick+0x70>)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	e007      	b.n	8004b1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	73fb      	strb	r3, [r7, #15]
 8004b0e:	e004      	b.n	8004b1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	73fb      	strb	r3, [r7, #15]
 8004b14:	e001      	b.n	8004b1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000208 	.word	0x20000208
 8004b28:	20000200 	.word	0x20000200
 8004b2c:	20000204 	.word	0x20000204

08004b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b34:	4b05      	ldr	r3, [pc, #20]	@ (8004b4c <HAL_IncTick+0x1c>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <HAL_IncTick+0x20>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	4a03      	ldr	r2, [pc, #12]	@ (8004b4c <HAL_IncTick+0x1c>)
 8004b40:	6013      	str	r3, [r2, #0]
}
 8004b42:	bf00      	nop
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	20001248 	.word	0x20001248
 8004b50:	20000208 	.word	0x20000208

08004b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  return uwTick;
 8004b58:	4b03      	ldr	r3, [pc, #12]	@ (8004b68 <HAL_GetTick+0x14>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20001248 	.word	0x20001248

08004b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b9e:	4a04      	ldr	r2, [pc, #16]	@ (8004bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	60d3      	str	r3, [r2, #12]
}
 8004ba4:	bf00      	nop
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	e000ed00 	.word	0xe000ed00

08004bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb8:	4b04      	ldr	r3, [pc, #16]	@ (8004bcc <__NVIC_GetPriorityGrouping+0x18>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	0a1b      	lsrs	r3, r3, #8
 8004bbe:	f003 0307 	and.w	r3, r3, #7
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	db0b      	blt.n	8004bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	f003 021f 	and.w	r2, r3, #31
 8004be8:	4907      	ldr	r1, [pc, #28]	@ (8004c08 <__NVIC_EnableIRQ+0x38>)
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	e000e100 	.word	0xe000e100

08004c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	6039      	str	r1, [r7, #0]
 8004c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	db0a      	blt.n	8004c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	490c      	ldr	r1, [pc, #48]	@ (8004c58 <__NVIC_SetPriority+0x4c>)
 8004c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2a:	0112      	lsls	r2, r2, #4
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	440b      	add	r3, r1
 8004c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c34:	e00a      	b.n	8004c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	4908      	ldr	r1, [pc, #32]	@ (8004c5c <__NVIC_SetPriority+0x50>)
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	3b04      	subs	r3, #4
 8004c44:	0112      	lsls	r2, r2, #4
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	440b      	add	r3, r1
 8004c4a:	761a      	strb	r2, [r3, #24]
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	e000e100 	.word	0xe000e100
 8004c5c:	e000ed00 	.word	0xe000ed00

08004c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b089      	sub	sp, #36	@ 0x24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f1c3 0307 	rsb	r3, r3, #7
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	bf28      	it	cs
 8004c7e:	2304      	movcs	r3, #4
 8004c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	3304      	adds	r3, #4
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d902      	bls.n	8004c90 <NVIC_EncodePriority+0x30>
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	3b03      	subs	r3, #3
 8004c8e:	e000      	b.n	8004c92 <NVIC_EncodePriority+0x32>
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c94:	f04f 32ff 	mov.w	r2, #4294967295
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	43da      	mvns	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb2:	43d9      	mvns	r1, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb8:	4313      	orrs	r3, r2
         );
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3724      	adds	r7, #36	@ 0x24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cd8:	d301      	bcc.n	8004cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e00f      	b.n	8004cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cde:	4a0a      	ldr	r2, [pc, #40]	@ (8004d08 <SysTick_Config+0x40>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ce6:	210f      	movs	r1, #15
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cec:	f7ff ff8e 	bl	8004c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cf0:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <SysTick_Config+0x40>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cf6:	4b04      	ldr	r3, [pc, #16]	@ (8004d08 <SysTick_Config+0x40>)
 8004cf8:	2207      	movs	r2, #7
 8004cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	e000e010 	.word	0xe000e010

08004d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff ff29 	bl	8004b6c <__NVIC_SetPriorityGrouping>
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b086      	sub	sp, #24
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	4603      	mov	r3, r0
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d30:	f7ff ff40 	bl	8004bb4 <__NVIC_GetPriorityGrouping>
 8004d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	6978      	ldr	r0, [r7, #20]
 8004d3c:	f7ff ff90 	bl	8004c60 <NVIC_EncodePriority>
 8004d40:	4602      	mov	r2, r0
 8004d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff ff5f 	bl	8004c0c <__NVIC_SetPriority>
}
 8004d4e:	bf00      	nop
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff ff33 	bl	8004bd0 <__NVIC_EnableIRQ>
}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff ffa4 	bl	8004cc8 <SysTick_Config>
 8004d80:	4603      	mov	r3, r0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e08d      	b.n	8004eba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	4b47      	ldr	r3, [pc, #284]	@ (8004ec4 <HAL_DMA_Init+0x138>)
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d80f      	bhi.n	8004dca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	4b45      	ldr	r3, [pc, #276]	@ (8004ec8 <HAL_DMA_Init+0x13c>)
 8004db2:	4413      	add	r3, r2
 8004db4:	4a45      	ldr	r2, [pc, #276]	@ (8004ecc <HAL_DMA_Init+0x140>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	091b      	lsrs	r3, r3, #4
 8004dbc:	009a      	lsls	r2, r3, #2
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a42      	ldr	r2, [pc, #264]	@ (8004ed0 <HAL_DMA_Init+0x144>)
 8004dc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004dc8:	e00e      	b.n	8004de8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4b40      	ldr	r3, [pc, #256]	@ (8004ed4 <HAL_DMA_Init+0x148>)
 8004dd2:	4413      	add	r3, r2
 8004dd4:	4a3d      	ldr	r2, [pc, #244]	@ (8004ecc <HAL_DMA_Init+0x140>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	009a      	lsls	r2, r3, #2
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ed8 <HAL_DMA_Init+0x14c>)
 8004de6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fa76 	bl	800532c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e48:	d102      	bne.n	8004e50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e64:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d010      	beq.n	8004e90 <HAL_DMA_Init+0x104>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d80c      	bhi.n	8004e90 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fa96 	bl	80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	e008      	b.n	8004ea2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40020407 	.word	0x40020407
 8004ec8:	bffdfff8 	.word	0xbffdfff8
 8004ecc:	cccccccd 	.word	0xcccccccd
 8004ed0:	40020000 	.word	0x40020000
 8004ed4:	bffdfbf8 	.word	0xbffdfbf8
 8004ed8:	40020400 	.word	0x40020400

08004edc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_DMA_Start_IT+0x20>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e066      	b.n	8004fca <HAL_DMA_Start_IT+0xee>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d155      	bne.n	8004fbc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0201 	bic.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f9bb 	bl	80052b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d008      	beq.n	8004f54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 020e 	orr.w	r2, r2, #14
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e00f      	b.n	8004f74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0204 	bic.w	r2, r2, #4
 8004f62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 020a 	orr.w	r2, r2, #10
 8004f72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f90:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fa8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0201 	orr.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	e005      	b.n	8004fc8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b085      	sub	sp, #20
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d005      	beq.n	8004ff6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2204      	movs	r2, #4
 8004fee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
 8004ff4:	e037      	b.n	8005066 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 020e 	bic.w	r2, r2, #14
 8005004:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005010:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005014:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0201 	bic.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502a:	f003 021f 	and.w	r2, r3, #31
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	2101      	movs	r1, #1
 8005034:	fa01 f202 	lsl.w	r2, r1, r2
 8005038:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005042:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00c      	beq.n	8005066 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005056:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800505a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005064:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005076:	7bfb      	ldrb	r3, [r7, #15]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d00d      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2204      	movs	r2, #4
 80050a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	73fb      	strb	r3, [r7, #15]
 80050b6:	e047      	b.n	8005148 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 020e 	bic.w	r2, r2, #14
 80050c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ec:	f003 021f 	and.w	r2, r3, #31
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	2101      	movs	r1, #1
 80050f6:	fa01 f202 	lsl.w	r2, r1, r2
 80050fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005104:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00c      	beq.n	8005128 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005118:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800511c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005126:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	4798      	blx	r3
    }
  }
  return status;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	2204      	movs	r2, #4
 8005174:	409a      	lsls	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4013      	ands	r3, r2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d026      	beq.n	80051cc <HAL_DMA_IRQHandler+0x7a>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d021      	beq.n	80051cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	d107      	bne.n	80051a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0204 	bic.w	r2, r2, #4
 80051a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051aa:	f003 021f 	and.w	r2, r3, #31
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	2104      	movs	r1, #4
 80051b4:	fa01 f202 	lsl.w	r2, r1, r2
 80051b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d071      	beq.n	80052a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80051ca:	e06c      	b.n	80052a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	2202      	movs	r2, #2
 80051d6:	409a      	lsls	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4013      	ands	r3, r2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d02e      	beq.n	800523e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d029      	beq.n	800523e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10b      	bne.n	8005210 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 020a 	bic.w	r2, r2, #10
 8005206:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005214:	f003 021f 	and.w	r2, r3, #31
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521c:	2102      	movs	r1, #2
 800521e:	fa01 f202 	lsl.w	r2, r1, r2
 8005222:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005230:	2b00      	cmp	r3, #0
 8005232:	d038      	beq.n	80052a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800523c:	e033      	b.n	80052a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	2208      	movs	r2, #8
 8005248:	409a      	lsls	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4013      	ands	r3, r2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d02a      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d025      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 020e 	bic.w	r2, r2, #14
 800526a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005270:	f003 021f 	and.w	r2, r3, #31
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005278:	2101      	movs	r1, #1
 800527a:	fa01 f202 	lsl.w	r2, r1, r2
 800527e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800529a:	2b00      	cmp	r3, #0
 800529c:	d004      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80052a6:	bf00      	nop
 80052a8:	bf00      	nop
}
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d004      	beq.n	80052da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80052d8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052de:	f003 021f 	and.w	r2, r3, #31
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	2101      	movs	r1, #1
 80052e8:	fa01 f202 	lsl.w	r2, r1, r2
 80052ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b10      	cmp	r3, #16
 80052fc:	d108      	bne.n	8005310 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800530e:	e007      	b.n	8005320 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	60da      	str	r2, [r3, #12]
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	4b16      	ldr	r3, [pc, #88]	@ (8005394 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800533c:	429a      	cmp	r2, r3
 800533e:	d802      	bhi.n	8005346 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005340:	4b15      	ldr	r3, [pc, #84]	@ (8005398 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	e001      	b.n	800534a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005346:	4b15      	ldr	r3, [pc, #84]	@ (800539c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005348:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	3b08      	subs	r3, #8
 8005356:	4a12      	ldr	r2, [pc, #72]	@ (80053a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005358:	fba2 2303 	umull	r2, r3, r2, r3
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005364:	089b      	lsrs	r3, r3, #2
 8005366:	009a      	lsls	r2, r3, #2
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4413      	add	r3, r2
 800536c:	461a      	mov	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a0b      	ldr	r2, [pc, #44]	@ (80053a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005376:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f003 031f 	and.w	r3, r3, #31
 800537e:	2201      	movs	r2, #1
 8005380:	409a      	lsls	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40020407 	.word	0x40020407
 8005398:	40020800 	.word	0x40020800
 800539c:	40020820 	.word	0x40020820
 80053a0:	cccccccd 	.word	0xcccccccd
 80053a4:	40020880 	.word	0x40020880

080053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	461a      	mov	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a08      	ldr	r2, [pc, #32]	@ (80053ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80053ca:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	2201      	movs	r2, #1
 80053d6:	409a      	lsls	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80053dc:	bf00      	nop
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	1000823f 	.word	0x1000823f
 80053ec:	40020940 	.word	0x40020940

080053f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053fe:	e15a      	b.n	80056b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	2101      	movs	r1, #1
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	fa01 f303 	lsl.w	r3, r1, r3
 800540c:	4013      	ands	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 814c 	beq.w	80056b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	2b01      	cmp	r3, #1
 8005422:	d005      	beq.n	8005430 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800542c:	2b02      	cmp	r3, #2
 800542e:	d130      	bne.n	8005492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	2203      	movs	r2, #3
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	43db      	mvns	r3, r3
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4013      	ands	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	4313      	orrs	r3, r2
 8005458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005466:	2201      	movs	r2, #1
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43db      	mvns	r3, r3
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4013      	ands	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	091b      	lsrs	r3, r3, #4
 800547c:	f003 0201 	and.w	r2, r3, #1
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	2b03      	cmp	r3, #3
 800549c:	d017      	beq.n	80054ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	2203      	movs	r2, #3
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43db      	mvns	r3, r3
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4013      	ands	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d123      	bne.n	8005522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	08da      	lsrs	r2, r3, #3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3208      	adds	r2, #8
 80054e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	220f      	movs	r2, #15
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	43db      	mvns	r3, r3
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4013      	ands	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	08da      	lsrs	r2, r3, #3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3208      	adds	r2, #8
 800551c:	6939      	ldr	r1, [r7, #16]
 800551e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	2203      	movs	r2, #3
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43db      	mvns	r3, r3
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4013      	ands	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f003 0203 	and.w	r2, r3, #3
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 80a6 	beq.w	80056b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005564:	4b5b      	ldr	r3, [pc, #364]	@ (80056d4 <HAL_GPIO_Init+0x2e4>)
 8005566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005568:	4a5a      	ldr	r2, [pc, #360]	@ (80056d4 <HAL_GPIO_Init+0x2e4>)
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005570:	4b58      	ldr	r3, [pc, #352]	@ (80056d4 <HAL_GPIO_Init+0x2e4>)
 8005572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800557c:	4a56      	ldr	r2, [pc, #344]	@ (80056d8 <HAL_GPIO_Init+0x2e8>)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	089b      	lsrs	r3, r3, #2
 8005582:	3302      	adds	r3, #2
 8005584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	220f      	movs	r2, #15
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	43db      	mvns	r3, r3
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4013      	ands	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80055a6:	d01f      	beq.n	80055e8 <HAL_GPIO_Init+0x1f8>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a4c      	ldr	r2, [pc, #304]	@ (80056dc <HAL_GPIO_Init+0x2ec>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d019      	beq.n	80055e4 <HAL_GPIO_Init+0x1f4>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a4b      	ldr	r2, [pc, #300]	@ (80056e0 <HAL_GPIO_Init+0x2f0>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d013      	beq.n	80055e0 <HAL_GPIO_Init+0x1f0>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a4a      	ldr	r2, [pc, #296]	@ (80056e4 <HAL_GPIO_Init+0x2f4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00d      	beq.n	80055dc <HAL_GPIO_Init+0x1ec>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a49      	ldr	r2, [pc, #292]	@ (80056e8 <HAL_GPIO_Init+0x2f8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d007      	beq.n	80055d8 <HAL_GPIO_Init+0x1e8>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a48      	ldr	r2, [pc, #288]	@ (80056ec <HAL_GPIO_Init+0x2fc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d101      	bne.n	80055d4 <HAL_GPIO_Init+0x1e4>
 80055d0:	2305      	movs	r3, #5
 80055d2:	e00a      	b.n	80055ea <HAL_GPIO_Init+0x1fa>
 80055d4:	2306      	movs	r3, #6
 80055d6:	e008      	b.n	80055ea <HAL_GPIO_Init+0x1fa>
 80055d8:	2304      	movs	r3, #4
 80055da:	e006      	b.n	80055ea <HAL_GPIO_Init+0x1fa>
 80055dc:	2303      	movs	r3, #3
 80055de:	e004      	b.n	80055ea <HAL_GPIO_Init+0x1fa>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e002      	b.n	80055ea <HAL_GPIO_Init+0x1fa>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <HAL_GPIO_Init+0x1fa>
 80055e8:	2300      	movs	r3, #0
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	f002 0203 	and.w	r2, r2, #3
 80055f0:	0092      	lsls	r2, r2, #2
 80055f2:	4093      	lsls	r3, r2
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055fa:	4937      	ldr	r1, [pc, #220]	@ (80056d8 <HAL_GPIO_Init+0x2e8>)
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	089b      	lsrs	r3, r3, #2
 8005600:	3302      	adds	r3, #2
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005608:	4b39      	ldr	r3, [pc, #228]	@ (80056f0 <HAL_GPIO_Init+0x300>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	43db      	mvns	r3, r3
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4013      	ands	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800562c:	4a30      	ldr	r2, [pc, #192]	@ (80056f0 <HAL_GPIO_Init+0x300>)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005632:	4b2f      	ldr	r3, [pc, #188]	@ (80056f0 <HAL_GPIO_Init+0x300>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	43db      	mvns	r3, r3
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4013      	ands	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005656:	4a26      	ldr	r2, [pc, #152]	@ (80056f0 <HAL_GPIO_Init+0x300>)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800565c:	4b24      	ldr	r3, [pc, #144]	@ (80056f0 <HAL_GPIO_Init+0x300>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	43db      	mvns	r3, r3
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4013      	ands	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005680:	4a1b      	ldr	r2, [pc, #108]	@ (80056f0 <HAL_GPIO_Init+0x300>)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005686:	4b1a      	ldr	r3, [pc, #104]	@ (80056f0 <HAL_GPIO_Init+0x300>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	43db      	mvns	r3, r3
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4013      	ands	r3, r2
 8005694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056aa:	4a11      	ldr	r2, [pc, #68]	@ (80056f0 <HAL_GPIO_Init+0x300>)
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	3301      	adds	r3, #1
 80056b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f47f ae9d 	bne.w	8005400 <HAL_GPIO_Init+0x10>
  }
}
 80056c6:	bf00      	nop
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	40021000 	.word	0x40021000
 80056d8:	40010000 	.word	0x40010000
 80056dc:	48000400 	.word	0x48000400
 80056e0:	48000800 	.word	0x48000800
 80056e4:	48000c00 	.word	0x48000c00
 80056e8:	48001000 	.word	0x48001000
 80056ec:	48001400 	.word	0x48001400
 80056f0:	40010400 	.word	0x40010400

080056f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	887b      	ldrh	r3, [r7, #2]
 8005706:	4013      	ands	r3, r2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
 8005710:	e001      	b.n	8005716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005712:	2300      	movs	r3, #0
 8005714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005716:	7bfb      	ldrb	r3, [r7, #15]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	807b      	strh	r3, [r7, #2]
 8005730:	4613      	mov	r3, r2
 8005732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005734:	787b      	ldrb	r3, [r7, #1]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800573a:	887a      	ldrh	r2, [r7, #2]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005740:	e002      	b.n	8005748 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005742:	887a      	ldrh	r2, [r7, #2]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800575e:	4b08      	ldr	r3, [pc, #32]	@ (8005780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005760:	695a      	ldr	r2, [r3, #20]
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	4013      	ands	r3, r2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d006      	beq.n	8005778 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800576a:	4a05      	ldr	r2, [pc, #20]	@ (8005780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800576c:	88fb      	ldrh	r3, [r7, #6]
 800576e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	4618      	mov	r0, r3
 8005774:	f7fe fa14 	bl	8003ba0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005778:	bf00      	nop
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40010400 	.word	0x40010400

08005784 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d141      	bne.n	8005816 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005792:	4b4b      	ldr	r3, [pc, #300]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800579a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800579e:	d131      	bne.n	8005804 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057a0:	4b47      	ldr	r3, [pc, #284]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057a6:	4a46      	ldr	r2, [pc, #280]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057b0:	4b43      	ldr	r3, [pc, #268]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057b8:	4a41      	ldr	r2, [pc, #260]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057c0:	4b40      	ldr	r3, [pc, #256]	@ (80058c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2232      	movs	r2, #50	@ 0x32
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	4a3f      	ldr	r2, [pc, #252]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057cc:	fba2 2303 	umull	r2, r3, r2, r3
 80057d0:	0c9b      	lsrs	r3, r3, #18
 80057d2:	3301      	adds	r3, #1
 80057d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057d6:	e002      	b.n	80057de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3b01      	subs	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057de:	4b38      	ldr	r3, [pc, #224]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ea:	d102      	bne.n	80057f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f2      	bne.n	80057d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057f2:	4b33      	ldr	r3, [pc, #204]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057fe:	d158      	bne.n	80058b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e057      	b.n	80058b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005804:	4b2e      	ldr	r3, [pc, #184]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800580a:	4a2d      	ldr	r2, [pc, #180]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800580c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005810:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005814:	e04d      	b.n	80058b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800581c:	d141      	bne.n	80058a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800581e:	4b28      	ldr	r3, [pc, #160]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800582a:	d131      	bne.n	8005890 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800582c:	4b24      	ldr	r3, [pc, #144]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005832:	4a23      	ldr	r2, [pc, #140]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005838:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800583c:	4b20      	ldr	r3, [pc, #128]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005844:	4a1e      	ldr	r2, [pc, #120]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800584a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800584c:	4b1d      	ldr	r3, [pc, #116]	@ (80058c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2232      	movs	r2, #50	@ 0x32
 8005852:	fb02 f303 	mul.w	r3, r2, r3
 8005856:	4a1c      	ldr	r2, [pc, #112]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005858:	fba2 2303 	umull	r2, r3, r2, r3
 800585c:	0c9b      	lsrs	r3, r3, #18
 800585e:	3301      	adds	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005862:	e002      	b.n	800586a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3b01      	subs	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800586a:	4b15      	ldr	r3, [pc, #84]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005876:	d102      	bne.n	800587e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f2      	bne.n	8005864 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800587e:	4b10      	ldr	r3, [pc, #64]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800588a:	d112      	bne.n	80058b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e011      	b.n	80058b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005890:	4b0b      	ldr	r3, [pc, #44]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005896:	4a0a      	ldr	r2, [pc, #40]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800589c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058a0:	e007      	b.n	80058b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058a2:	4b07      	ldr	r3, [pc, #28]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058aa:	4a05      	ldr	r2, [pc, #20]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	40007000 	.word	0x40007000
 80058c4:	20000200 	.word	0x20000200
 80058c8:	431bde83 	.word	0x431bde83

080058cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80058d0:	4b05      	ldr	r3, [pc, #20]	@ (80058e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	4a04      	ldr	r2, [pc, #16]	@ (80058e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058da:	6093      	str	r3, [r2, #8]
}
 80058dc:	bf00      	nop
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40007000 	.word	0x40007000

080058ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e2fe      	b.n	8005efc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d075      	beq.n	80059f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800590a:	4b97      	ldr	r3, [pc, #604]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 030c 	and.w	r3, r3, #12
 8005912:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005914:	4b94      	ldr	r3, [pc, #592]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b0c      	cmp	r3, #12
 8005922:	d102      	bne.n	800592a <HAL_RCC_OscConfig+0x3e>
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2b03      	cmp	r3, #3
 8005928:	d002      	beq.n	8005930 <HAL_RCC_OscConfig+0x44>
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	2b08      	cmp	r3, #8
 800592e:	d10b      	bne.n	8005948 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005930:	4b8d      	ldr	r3, [pc, #564]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d05b      	beq.n	80059f4 <HAL_RCC_OscConfig+0x108>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d157      	bne.n	80059f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e2d9      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005950:	d106      	bne.n	8005960 <HAL_RCC_OscConfig+0x74>
 8005952:	4b85      	ldr	r3, [pc, #532]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a84      	ldr	r2, [pc, #528]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e01d      	b.n	800599c <HAL_RCC_OscConfig+0xb0>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005968:	d10c      	bne.n	8005984 <HAL_RCC_OscConfig+0x98>
 800596a:	4b7f      	ldr	r3, [pc, #508]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	4b7c      	ldr	r3, [pc, #496]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a7b      	ldr	r2, [pc, #492]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 800597c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	e00b      	b.n	800599c <HAL_RCC_OscConfig+0xb0>
 8005984:	4b78      	ldr	r3, [pc, #480]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a77      	ldr	r2, [pc, #476]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 800598a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	4b75      	ldr	r3, [pc, #468]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a74      	ldr	r2, [pc, #464]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800599a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d013      	beq.n	80059cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a4:	f7ff f8d6 	bl	8004b54 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ac:	f7ff f8d2 	bl	8004b54 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b64      	cmp	r3, #100	@ 0x64
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e29e      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059be:	4b6a      	ldr	r3, [pc, #424]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0f0      	beq.n	80059ac <HAL_RCC_OscConfig+0xc0>
 80059ca:	e014      	b.n	80059f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059cc:	f7ff f8c2 	bl	8004b54 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d4:	f7ff f8be 	bl	8004b54 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b64      	cmp	r3, #100	@ 0x64
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e28a      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059e6:	4b60      	ldr	r3, [pc, #384]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f0      	bne.n	80059d4 <HAL_RCC_OscConfig+0xe8>
 80059f2:	e000      	b.n	80059f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d075      	beq.n	8005aee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a02:	4b59      	ldr	r3, [pc, #356]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
 8005a0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a0c:	4b56      	ldr	r3, [pc, #344]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	2b0c      	cmp	r3, #12
 8005a1a:	d102      	bne.n	8005a22 <HAL_RCC_OscConfig+0x136>
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d002      	beq.n	8005a28 <HAL_RCC_OscConfig+0x13c>
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d11f      	bne.n	8005a68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a28:	4b4f      	ldr	r3, [pc, #316]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <HAL_RCC_OscConfig+0x154>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e25d      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a40:	4b49      	ldr	r3, [pc, #292]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	061b      	lsls	r3, r3, #24
 8005a4e:	4946      	ldr	r1, [pc, #280]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a54:	4b45      	ldr	r3, [pc, #276]	@ (8005b6c <HAL_RCC_OscConfig+0x280>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff f82f 	bl	8004abc <HAL_InitTick>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d043      	beq.n	8005aec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e249      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d023      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a70:	4b3d      	ldr	r3, [pc, #244]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a3c      	ldr	r2, [pc, #240]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005a76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7c:	f7ff f86a 	bl	8004b54 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a84:	f7ff f866 	bl	8004b54 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e232      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a96:	4b34      	ldr	r3, [pc, #208]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0f0      	beq.n	8005a84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa2:	4b31      	ldr	r3, [pc, #196]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	061b      	lsls	r3, r3, #24
 8005ab0:	492d      	ldr	r1, [pc, #180]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	604b      	str	r3, [r1, #4]
 8005ab6:	e01a      	b.n	8005aee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a2a      	ldr	r2, [pc, #168]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005abe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac4:	f7ff f846 	bl	8004b54 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005acc:	f7ff f842 	bl	8004b54 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e20e      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ade:	4b22      	ldr	r3, [pc, #136]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f0      	bne.n	8005acc <HAL_RCC_OscConfig+0x1e0>
 8005aea:	e000      	b.n	8005aee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d041      	beq.n	8005b7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d01c      	beq.n	8005b3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b02:	4b19      	ldr	r3, [pc, #100]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b08:	4a17      	ldr	r2, [pc, #92]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005b0a:	f043 0301 	orr.w	r3, r3, #1
 8005b0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b12:	f7ff f81f 	bl	8004b54 <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b1a:	f7ff f81b 	bl	8004b54 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e1e7      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0ef      	beq.n	8005b1a <HAL_RCC_OscConfig+0x22e>
 8005b3a:	e020      	b.n	8005b7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b42:	4a09      	ldr	r2, [pc, #36]	@ (8005b68 <HAL_RCC_OscConfig+0x27c>)
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b4c:	f7ff f802 	bl	8004b54 <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b52:	e00d      	b.n	8005b70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b54:	f7fe fffe 	bl	8004b54 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d906      	bls.n	8005b70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e1ca      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
 8005b66:	bf00      	nop
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b70:	4b8c      	ldr	r3, [pc, #560]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1ea      	bne.n	8005b54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 80a6 	beq.w	8005cd8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b90:	4b84      	ldr	r3, [pc, #528]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x2b4>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <HAL_RCC_OscConfig+0x2b6>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00d      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005baa:	4a7e      	ldr	r2, [pc, #504]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bc2:	4b79      	ldr	r3, [pc, #484]	@ (8005da8 <HAL_RCC_OscConfig+0x4bc>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d118      	bne.n	8005c00 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bce:	4b76      	ldr	r3, [pc, #472]	@ (8005da8 <HAL_RCC_OscConfig+0x4bc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a75      	ldr	r2, [pc, #468]	@ (8005da8 <HAL_RCC_OscConfig+0x4bc>)
 8005bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bda:	f7fe ffbb 	bl	8004b54 <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be2:	f7fe ffb7 	bl	8004b54 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e183      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bf4:	4b6c      	ldr	r3, [pc, #432]	@ (8005da8 <HAL_RCC_OscConfig+0x4bc>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0f0      	beq.n	8005be2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d108      	bne.n	8005c1a <HAL_RCC_OscConfig+0x32e>
 8005c08:	4b66      	ldr	r3, [pc, #408]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0e:	4a65      	ldr	r2, [pc, #404]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005c10:	f043 0301 	orr.w	r3, r3, #1
 8005c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c18:	e024      	b.n	8005c64 <HAL_RCC_OscConfig+0x378>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	2b05      	cmp	r3, #5
 8005c20:	d110      	bne.n	8005c44 <HAL_RCC_OscConfig+0x358>
 8005c22:	4b60      	ldr	r3, [pc, #384]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c28:	4a5e      	ldr	r2, [pc, #376]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005c2a:	f043 0304 	orr.w	r3, r3, #4
 8005c2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c32:	4b5c      	ldr	r3, [pc, #368]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c38:	4a5a      	ldr	r2, [pc, #360]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005c3a:	f043 0301 	orr.w	r3, r3, #1
 8005c3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c42:	e00f      	b.n	8005c64 <HAL_RCC_OscConfig+0x378>
 8005c44:	4b57      	ldr	r3, [pc, #348]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4a:	4a56      	ldr	r2, [pc, #344]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005c4c:	f023 0301 	bic.w	r3, r3, #1
 8005c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c54:	4b53      	ldr	r3, [pc, #332]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c5a:	4a52      	ldr	r2, [pc, #328]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005c5c:	f023 0304 	bic.w	r3, r3, #4
 8005c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d016      	beq.n	8005c9a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c6c:	f7fe ff72 	bl	8004b54 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c72:	e00a      	b.n	8005c8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c74:	f7fe ff6e 	bl	8004b54 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e138      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c8a:	4b46      	ldr	r3, [pc, #280]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0ed      	beq.n	8005c74 <HAL_RCC_OscConfig+0x388>
 8005c98:	e015      	b.n	8005cc6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9a:	f7fe ff5b 	bl	8004b54 <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ca0:	e00a      	b.n	8005cb8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca2:	f7fe ff57 	bl	8004b54 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e121      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cb8:	4b3a      	ldr	r3, [pc, #232]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1ed      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cc6:	7ffb      	ldrb	r3, [r7, #31]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d105      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ccc:	4b35      	ldr	r3, [pc, #212]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd0:	4a34      	ldr	r2, [pc, #208]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cd6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0320 	and.w	r3, r3, #32
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d03c      	beq.n	8005d5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01c      	beq.n	8005d26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cec:	4b2d      	ldr	r3, [pc, #180]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cf2:	4a2c      	ldr	r2, [pc, #176]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005cf4:	f043 0301 	orr.w	r3, r3, #1
 8005cf8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cfc:	f7fe ff2a 	bl	8004b54 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d04:	f7fe ff26 	bl	8004b54 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e0f2      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d16:	4b23      	ldr	r3, [pc, #140]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0ef      	beq.n	8005d04 <HAL_RCC_OscConfig+0x418>
 8005d24:	e01b      	b.n	8005d5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d26:	4b1f      	ldr	r3, [pc, #124]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d36:	f7fe ff0d 	bl	8004b54 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d3e:	f7fe ff09 	bl	8004b54 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e0d5      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d50:	4b14      	ldr	r3, [pc, #80]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1ef      	bne.n	8005d3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 80c9 	beq.w	8005efa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d68:	4b0e      	ldr	r3, [pc, #56]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 030c 	and.w	r3, r3, #12
 8005d70:	2b0c      	cmp	r3, #12
 8005d72:	f000 8083 	beq.w	8005e7c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d15e      	bne.n	8005e3c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d7e:	4b09      	ldr	r3, [pc, #36]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a08      	ldr	r2, [pc, #32]	@ (8005da4 <HAL_RCC_OscConfig+0x4b8>)
 8005d84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8a:	f7fe fee3 	bl	8004b54 <HAL_GetTick>
 8005d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d90:	e00c      	b.n	8005dac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d92:	f7fe fedf 	bl	8004b54 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d905      	bls.n	8005dac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e0ab      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
 8005da4:	40021000 	.word	0x40021000
 8005da8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dac:	4b55      	ldr	r3, [pc, #340]	@ (8005f04 <HAL_RCC_OscConfig+0x618>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1ec      	bne.n	8005d92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005db8:	4b52      	ldr	r3, [pc, #328]	@ (8005f04 <HAL_RCC_OscConfig+0x618>)
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	4b52      	ldr	r3, [pc, #328]	@ (8005f08 <HAL_RCC_OscConfig+0x61c>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6a11      	ldr	r1, [r2, #32]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dc8:	3a01      	subs	r2, #1
 8005dca:	0112      	lsls	r2, r2, #4
 8005dcc:	4311      	orrs	r1, r2
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005dd2:	0212      	lsls	r2, r2, #8
 8005dd4:	4311      	orrs	r1, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005dda:	0852      	lsrs	r2, r2, #1
 8005ddc:	3a01      	subs	r2, #1
 8005dde:	0552      	lsls	r2, r2, #21
 8005de0:	4311      	orrs	r1, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005de6:	0852      	lsrs	r2, r2, #1
 8005de8:	3a01      	subs	r2, #1
 8005dea:	0652      	lsls	r2, r2, #25
 8005dec:	4311      	orrs	r1, r2
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005df2:	06d2      	lsls	r2, r2, #27
 8005df4:	430a      	orrs	r2, r1
 8005df6:	4943      	ldr	r1, [pc, #268]	@ (8005f04 <HAL_RCC_OscConfig+0x618>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dfc:	4b41      	ldr	r3, [pc, #260]	@ (8005f04 <HAL_RCC_OscConfig+0x618>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a40      	ldr	r2, [pc, #256]	@ (8005f04 <HAL_RCC_OscConfig+0x618>)
 8005e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e08:	4b3e      	ldr	r3, [pc, #248]	@ (8005f04 <HAL_RCC_OscConfig+0x618>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	4a3d      	ldr	r2, [pc, #244]	@ (8005f04 <HAL_RCC_OscConfig+0x618>)
 8005e0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e14:	f7fe fe9e 	bl	8004b54 <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e1c:	f7fe fe9a 	bl	8004b54 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e066      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e2e:	4b35      	ldr	r3, [pc, #212]	@ (8005f04 <HAL_RCC_OscConfig+0x618>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0f0      	beq.n	8005e1c <HAL_RCC_OscConfig+0x530>
 8005e3a:	e05e      	b.n	8005efa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e3c:	4b31      	ldr	r3, [pc, #196]	@ (8005f04 <HAL_RCC_OscConfig+0x618>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a30      	ldr	r2, [pc, #192]	@ (8005f04 <HAL_RCC_OscConfig+0x618>)
 8005e42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e48:	f7fe fe84 	bl	8004b54 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e50:	f7fe fe80 	bl	8004b54 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e04c      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e62:	4b28      	ldr	r3, [pc, #160]	@ (8005f04 <HAL_RCC_OscConfig+0x618>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f0      	bne.n	8005e50 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e6e:	4b25      	ldr	r3, [pc, #148]	@ (8005f04 <HAL_RCC_OscConfig+0x618>)
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	4924      	ldr	r1, [pc, #144]	@ (8005f04 <HAL_RCC_OscConfig+0x618>)
 8005e74:	4b25      	ldr	r3, [pc, #148]	@ (8005f0c <HAL_RCC_OscConfig+0x620>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	60cb      	str	r3, [r1, #12]
 8005e7a:	e03e      	b.n	8005efa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e039      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e88:	4b1e      	ldr	r3, [pc, #120]	@ (8005f04 <HAL_RCC_OscConfig+0x618>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f003 0203 	and.w	r2, r3, #3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d12c      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d123      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d11b      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d113      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed8:	085b      	lsrs	r3, r3, #1
 8005eda:	3b01      	subs	r3, #1
 8005edc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d109      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eec:	085b      	lsrs	r3, r3, #1
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d001      	beq.n	8005efa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3720      	adds	r7, #32
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	40021000 	.word	0x40021000
 8005f08:	019f800c 	.word	0x019f800c
 8005f0c:	feeefffc 	.word	0xfeeefffc

08005f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e11e      	b.n	8006166 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f28:	4b91      	ldr	r3, [pc, #580]	@ (8006170 <HAL_RCC_ClockConfig+0x260>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 030f 	and.w	r3, r3, #15
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d910      	bls.n	8005f58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f36:	4b8e      	ldr	r3, [pc, #568]	@ (8006170 <HAL_RCC_ClockConfig+0x260>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f023 020f 	bic.w	r2, r3, #15
 8005f3e:	498c      	ldr	r1, [pc, #560]	@ (8006170 <HAL_RCC_ClockConfig+0x260>)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f46:	4b8a      	ldr	r3, [pc, #552]	@ (8006170 <HAL_RCC_ClockConfig+0x260>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d001      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e106      	b.n	8006166 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d073      	beq.n	800604c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d129      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f6c:	4b81      	ldr	r3, [pc, #516]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e0f4      	b.n	8006166 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f7c:	f000 f99e 	bl	80062bc <RCC_GetSysClockFreqFromPLLSource>
 8005f80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	4a7c      	ldr	r2, [pc, #496]	@ (8006178 <HAL_RCC_ClockConfig+0x268>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d93f      	bls.n	800600a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f8a:	4b7a      	ldr	r3, [pc, #488]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d009      	beq.n	8005faa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d033      	beq.n	800600a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d12f      	bne.n	800600a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005faa:	4b72      	ldr	r3, [pc, #456]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fb2:	4a70      	ldr	r2, [pc, #448]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 8005fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005fba:	2380      	movs	r3, #128	@ 0x80
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	e024      	b.n	800600a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d107      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d109      	bne.n	8005fe8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e0c6      	b.n	8006166 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fd8:	4b66      	ldr	r3, [pc, #408]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e0be      	b.n	8006166 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005fe8:	f000 f8ce 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 8005fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	4a61      	ldr	r2, [pc, #388]	@ (8006178 <HAL_RCC_ClockConfig+0x268>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d909      	bls.n	800600a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ff6:	4b5f      	ldr	r3, [pc, #380]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ffe:	4a5d      	ldr	r2, [pc, #372]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 8006000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006004:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006006:	2380      	movs	r3, #128	@ 0x80
 8006008:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800600a:	4b5a      	ldr	r3, [pc, #360]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f023 0203 	bic.w	r2, r3, #3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	4957      	ldr	r1, [pc, #348]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 8006018:	4313      	orrs	r3, r2
 800601a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800601c:	f7fe fd9a 	bl	8004b54 <HAL_GetTick>
 8006020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006022:	e00a      	b.n	800603a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006024:	f7fe fd96 	bl	8004b54 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006032:	4293      	cmp	r3, r2
 8006034:	d901      	bls.n	800603a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e095      	b.n	8006166 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800603a:	4b4e      	ldr	r3, [pc, #312]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 020c 	and.w	r2, r3, #12
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	429a      	cmp	r2, r3
 800604a:	d1eb      	bne.n	8006024 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d023      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006064:	4b43      	ldr	r3, [pc, #268]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	4a42      	ldr	r2, [pc, #264]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 800606a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800606e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b00      	cmp	r3, #0
 800607a:	d007      	beq.n	800608c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800607c:	4b3d      	ldr	r3, [pc, #244]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006084:	4a3b      	ldr	r2, [pc, #236]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 8006086:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800608a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800608c:	4b39      	ldr	r3, [pc, #228]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	4936      	ldr	r1, [pc, #216]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 800609a:	4313      	orrs	r3, r2
 800609c:	608b      	str	r3, [r1, #8]
 800609e:	e008      	b.n	80060b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2b80      	cmp	r3, #128	@ 0x80
 80060a4:	d105      	bne.n	80060b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060a6:	4b33      	ldr	r3, [pc, #204]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	4a32      	ldr	r2, [pc, #200]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 80060ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060b2:	4b2f      	ldr	r3, [pc, #188]	@ (8006170 <HAL_RCC_ClockConfig+0x260>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d21d      	bcs.n	80060fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006170 <HAL_RCC_ClockConfig+0x260>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f023 020f 	bic.w	r2, r3, #15
 80060c8:	4929      	ldr	r1, [pc, #164]	@ (8006170 <HAL_RCC_ClockConfig+0x260>)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80060d0:	f7fe fd40 	bl	8004b54 <HAL_GetTick>
 80060d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d6:	e00a      	b.n	80060ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060d8:	f7fe fd3c 	bl	8004b54 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e03b      	b.n	8006166 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ee:	4b20      	ldr	r3, [pc, #128]	@ (8006170 <HAL_RCC_ClockConfig+0x260>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d1ed      	bne.n	80060d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d008      	beq.n	800611a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006108:	4b1a      	ldr	r3, [pc, #104]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	4917      	ldr	r1, [pc, #92]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 8006116:	4313      	orrs	r3, r2
 8006118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0308 	and.w	r3, r3, #8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d009      	beq.n	800613a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006126:	4b13      	ldr	r3, [pc, #76]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	490f      	ldr	r1, [pc, #60]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 8006136:	4313      	orrs	r3, r2
 8006138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800613a:	f000 f825 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 800613e:	4602      	mov	r2, r0
 8006140:	4b0c      	ldr	r3, [pc, #48]	@ (8006174 <HAL_RCC_ClockConfig+0x264>)
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	091b      	lsrs	r3, r3, #4
 8006146:	f003 030f 	and.w	r3, r3, #15
 800614a:	490c      	ldr	r1, [pc, #48]	@ (800617c <HAL_RCC_ClockConfig+0x26c>)
 800614c:	5ccb      	ldrb	r3, [r1, r3]
 800614e:	f003 031f 	and.w	r3, r3, #31
 8006152:	fa22 f303 	lsr.w	r3, r2, r3
 8006156:	4a0a      	ldr	r2, [pc, #40]	@ (8006180 <HAL_RCC_ClockConfig+0x270>)
 8006158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800615a:	4b0a      	ldr	r3, [pc, #40]	@ (8006184 <HAL_RCC_ClockConfig+0x274>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe fcac 	bl	8004abc <HAL_InitTick>
 8006164:	4603      	mov	r3, r0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	40022000 	.word	0x40022000
 8006174:	40021000 	.word	0x40021000
 8006178:	04c4b400 	.word	0x04c4b400
 800617c:	0800bc68 	.word	0x0800bc68
 8006180:	20000200 	.word	0x20000200
 8006184:	20000204 	.word	0x20000204

08006188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800618e:	4b2c      	ldr	r3, [pc, #176]	@ (8006240 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 030c 	and.w	r3, r3, #12
 8006196:	2b04      	cmp	r3, #4
 8006198:	d102      	bne.n	80061a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800619a:	4b2a      	ldr	r3, [pc, #168]	@ (8006244 <HAL_RCC_GetSysClockFreq+0xbc>)
 800619c:	613b      	str	r3, [r7, #16]
 800619e:	e047      	b.n	8006230 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80061a0:	4b27      	ldr	r3, [pc, #156]	@ (8006240 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 030c 	and.w	r3, r3, #12
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d102      	bne.n	80061b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061ac:	4b26      	ldr	r3, [pc, #152]	@ (8006248 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061ae:	613b      	str	r3, [r7, #16]
 80061b0:	e03e      	b.n	8006230 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80061b2:	4b23      	ldr	r3, [pc, #140]	@ (8006240 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 030c 	and.w	r3, r3, #12
 80061ba:	2b0c      	cmp	r3, #12
 80061bc:	d136      	bne.n	800622c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061be:	4b20      	ldr	r3, [pc, #128]	@ (8006240 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006240 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	091b      	lsrs	r3, r3, #4
 80061ce:	f003 030f 	and.w	r3, r3, #15
 80061d2:	3301      	adds	r3, #1
 80061d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d10c      	bne.n	80061f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006248 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e4:	4a16      	ldr	r2, [pc, #88]	@ (8006240 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061e6:	68d2      	ldr	r2, [r2, #12]
 80061e8:	0a12      	lsrs	r2, r2, #8
 80061ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061ee:	fb02 f303 	mul.w	r3, r2, r3
 80061f2:	617b      	str	r3, [r7, #20]
      break;
 80061f4:	e00c      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061f6:	4a13      	ldr	r2, [pc, #76]	@ (8006244 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fe:	4a10      	ldr	r2, [pc, #64]	@ (8006240 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006200:	68d2      	ldr	r2, [r2, #12]
 8006202:	0a12      	lsrs	r2, r2, #8
 8006204:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006208:	fb02 f303 	mul.w	r3, r2, r3
 800620c:	617b      	str	r3, [r7, #20]
      break;
 800620e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006210:	4b0b      	ldr	r3, [pc, #44]	@ (8006240 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	0e5b      	lsrs	r3, r3, #25
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	3301      	adds	r3, #1
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	fbb2 f3f3 	udiv	r3, r2, r3
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	e001      	b.n	8006230 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006230:	693b      	ldr	r3, [r7, #16]
}
 8006232:	4618      	mov	r0, r3
 8006234:	371c      	adds	r7, #28
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	40021000 	.word	0x40021000
 8006244:	00f42400 	.word	0x00f42400
 8006248:	016e3600 	.word	0x016e3600

0800624c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006250:	4b03      	ldr	r3, [pc, #12]	@ (8006260 <HAL_RCC_GetHCLKFreq+0x14>)
 8006252:	681b      	ldr	r3, [r3, #0]
}
 8006254:	4618      	mov	r0, r3
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	20000200 	.word	0x20000200

08006264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006268:	f7ff fff0 	bl	800624c <HAL_RCC_GetHCLKFreq>
 800626c:	4602      	mov	r2, r0
 800626e:	4b06      	ldr	r3, [pc, #24]	@ (8006288 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	0a1b      	lsrs	r3, r3, #8
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	4904      	ldr	r1, [pc, #16]	@ (800628c <HAL_RCC_GetPCLK1Freq+0x28>)
 800627a:	5ccb      	ldrb	r3, [r1, r3]
 800627c:	f003 031f 	and.w	r3, r3, #31
 8006280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006284:	4618      	mov	r0, r3
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40021000 	.word	0x40021000
 800628c:	0800bc78 	.word	0x0800bc78

08006290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006294:	f7ff ffda 	bl	800624c <HAL_RCC_GetHCLKFreq>
 8006298:	4602      	mov	r2, r0
 800629a:	4b06      	ldr	r3, [pc, #24]	@ (80062b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	0adb      	lsrs	r3, r3, #11
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	4904      	ldr	r1, [pc, #16]	@ (80062b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062a6:	5ccb      	ldrb	r3, [r1, r3]
 80062a8:	f003 031f 	and.w	r3, r3, #31
 80062ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	40021000 	.word	0x40021000
 80062b8:	0800bc78 	.word	0x0800bc78

080062bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062c2:	4b1e      	ldr	r3, [pc, #120]	@ (800633c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062cc:	4b1b      	ldr	r3, [pc, #108]	@ (800633c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	091b      	lsrs	r3, r3, #4
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	3301      	adds	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d10c      	bne.n	80062fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062e0:	4a17      	ldr	r2, [pc, #92]	@ (8006340 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e8:	4a14      	ldr	r2, [pc, #80]	@ (800633c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062ea:	68d2      	ldr	r2, [r2, #12]
 80062ec:	0a12      	lsrs	r2, r2, #8
 80062ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062f2:	fb02 f303 	mul.w	r3, r2, r3
 80062f6:	617b      	str	r3, [r7, #20]
    break;
 80062f8:	e00c      	b.n	8006314 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062fa:	4a12      	ldr	r2, [pc, #72]	@ (8006344 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006302:	4a0e      	ldr	r2, [pc, #56]	@ (800633c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006304:	68d2      	ldr	r2, [r2, #12]
 8006306:	0a12      	lsrs	r2, r2, #8
 8006308:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800630c:	fb02 f303 	mul.w	r3, r2, r3
 8006310:	617b      	str	r3, [r7, #20]
    break;
 8006312:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006314:	4b09      	ldr	r3, [pc, #36]	@ (800633c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	0e5b      	lsrs	r3, r3, #25
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	3301      	adds	r3, #1
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	fbb2 f3f3 	udiv	r3, r2, r3
 800632c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800632e:	687b      	ldr	r3, [r7, #4]
}
 8006330:	4618      	mov	r0, r3
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	40021000 	.word	0x40021000
 8006340:	016e3600 	.word	0x016e3600
 8006344:	00f42400 	.word	0x00f42400

08006348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006350:	2300      	movs	r3, #0
 8006352:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006354:	2300      	movs	r3, #0
 8006356:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 8098 	beq.w	8006496 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006366:	2300      	movs	r3, #0
 8006368:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800636a:	4b43      	ldr	r3, [pc, #268]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800636c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10d      	bne.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006376:	4b40      	ldr	r3, [pc, #256]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800637a:	4a3f      	ldr	r2, [pc, #252]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800637c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006380:	6593      	str	r3, [r2, #88]	@ 0x58
 8006382:	4b3d      	ldr	r3, [pc, #244]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800638a:	60bb      	str	r3, [r7, #8]
 800638c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800638e:	2301      	movs	r3, #1
 8006390:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006392:	4b3a      	ldr	r3, [pc, #232]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a39      	ldr	r2, [pc, #228]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800639c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800639e:	f7fe fbd9 	bl	8004b54 <HAL_GetTick>
 80063a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063a4:	e009      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063a6:	f7fe fbd5 	bl	8004b54 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d902      	bls.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	74fb      	strb	r3, [r7, #19]
        break;
 80063b8:	e005      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063ba:	4b30      	ldr	r3, [pc, #192]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0ef      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80063c6:	7cfb      	ldrb	r3, [r7, #19]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d159      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d01e      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d019      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063e8:	4b23      	ldr	r3, [pc, #140]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063f4:	4b20      	ldr	r3, [pc, #128]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006404:	4b1c      	ldr	r3, [pc, #112]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800640a:	4a1b      	ldr	r2, [pc, #108]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800640c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006414:	4a18      	ldr	r2, [pc, #96]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d016      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006426:	f7fe fb95 	bl	8004b54 <HAL_GetTick>
 800642a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800642c:	e00b      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800642e:	f7fe fb91 	bl	8004b54 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800643c:	4293      	cmp	r3, r2
 800643e:	d902      	bls.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	74fb      	strb	r3, [r7, #19]
            break;
 8006444:	e006      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006446:	4b0c      	ldr	r3, [pc, #48]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0ec      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006454:	7cfb      	ldrb	r3, [r7, #19]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800645a:	4b07      	ldr	r3, [pc, #28]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800645c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006460:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006468:	4903      	ldr	r1, [pc, #12]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006470:	e008      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006472:	7cfb      	ldrb	r3, [r7, #19]
 8006474:	74bb      	strb	r3, [r7, #18]
 8006476:	e005      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006478:	40021000 	.word	0x40021000
 800647c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006480:	7cfb      	ldrb	r3, [r7, #19]
 8006482:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006484:	7c7b      	ldrb	r3, [r7, #17]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d105      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800648a:	4ba7      	ldr	r3, [pc, #668]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800648c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800648e:	4aa6      	ldr	r2, [pc, #664]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006494:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064a2:	4ba1      	ldr	r3, [pc, #644]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a8:	f023 0203 	bic.w	r2, r3, #3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	499d      	ldr	r1, [pc, #628]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064c4:	4b98      	ldr	r3, [pc, #608]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ca:	f023 020c 	bic.w	r2, r3, #12
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	4995      	ldr	r1, [pc, #596]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0304 	and.w	r3, r3, #4
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064e6:	4b90      	ldr	r3, [pc, #576]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	498c      	ldr	r1, [pc, #560]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0308 	and.w	r3, r3, #8
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006508:	4b87      	ldr	r3, [pc, #540]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	4984      	ldr	r1, [pc, #528]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0310 	and.w	r3, r3, #16
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800652a:	4b7f      	ldr	r3, [pc, #508]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006530:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	497b      	ldr	r1, [pc, #492]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653a:	4313      	orrs	r3, r2
 800653c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800654c:	4b76      	ldr	r3, [pc, #472]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800654e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006552:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	4973      	ldr	r1, [pc, #460]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800656e:	4b6e      	ldr	r3, [pc, #440]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006574:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	496a      	ldr	r1, [pc, #424]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657e:	4313      	orrs	r3, r2
 8006580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006590:	4b65      	ldr	r3, [pc, #404]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006596:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	4962      	ldr	r1, [pc, #392]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065b2:	4b5d      	ldr	r3, [pc, #372]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c0:	4959      	ldr	r1, [pc, #356]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00a      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065d4:	4b54      	ldr	r3, [pc, #336]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065da:	f023 0203 	bic.w	r2, r3, #3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e2:	4951      	ldr	r1, [pc, #324]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006604:	4948      	ldr	r1, [pc, #288]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006606:	4313      	orrs	r3, r2
 8006608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006614:	2b00      	cmp	r3, #0
 8006616:	d015      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006618:	4b43      	ldr	r3, [pc, #268]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800661e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006626:	4940      	ldr	r1, [pc, #256]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006628:	4313      	orrs	r3, r2
 800662a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006636:	d105      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006638:	4b3b      	ldr	r3, [pc, #236]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	4a3a      	ldr	r2, [pc, #232]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800663e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006642:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800664c:	2b00      	cmp	r3, #0
 800664e:	d015      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006650:	4b35      	ldr	r3, [pc, #212]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006656:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800665e:	4932      	ldr	r1, [pc, #200]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006660:	4313      	orrs	r3, r2
 8006662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800666a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800666e:	d105      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006670:	4b2d      	ldr	r3, [pc, #180]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	4a2c      	ldr	r2, [pc, #176]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800667a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d015      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006688:	4b27      	ldr	r3, [pc, #156]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800668a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800668e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006696:	4924      	ldr	r1, [pc, #144]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006698:	4313      	orrs	r3, r2
 800669a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066a6:	d105      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066a8:	4b1f      	ldr	r3, [pc, #124]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d015      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066c0:	4b19      	ldr	r3, [pc, #100]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ce:	4916      	ldr	r1, [pc, #88]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066de:	d105      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066e0:	4b11      	ldr	r3, [pc, #68]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	4a10      	ldr	r2, [pc, #64]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d019      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006706:	4908      	ldr	r1, [pc, #32]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006708:	4313      	orrs	r3, r2
 800670a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006712:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006716:	d109      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006718:	4b03      	ldr	r3, [pc, #12]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	4a02      	ldr	r2, [pc, #8]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800671e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006722:	60d3      	str	r3, [r2, #12]
 8006724:	e002      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006726:	bf00      	nop
 8006728:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d015      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006738:	4b29      	ldr	r3, [pc, #164]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800673a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800673e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006746:	4926      	ldr	r1, [pc, #152]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006748:	4313      	orrs	r3, r2
 800674a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006756:	d105      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006758:	4b21      	ldr	r3, [pc, #132]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	4a20      	ldr	r2, [pc, #128]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800675e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006762:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d015      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006770:	4b1b      	ldr	r3, [pc, #108]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006776:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800677e:	4918      	ldr	r1, [pc, #96]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800678a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800678e:	d105      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006790:	4b13      	ldr	r3, [pc, #76]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	4a12      	ldr	r2, [pc, #72]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800679a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d015      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067a8:	4b0d      	ldr	r3, [pc, #52]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067b6:	490a      	ldr	r1, [pc, #40]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067c6:	d105      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067c8:	4b05      	ldr	r3, [pc, #20]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	4a04      	ldr	r2, [pc, #16]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40021000 	.word	0x40021000

080067e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e054      	b.n	80068a0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d111      	bne.n	8006826 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f002 fb3c 	bl	8008e88 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a23      	ldr	r2, [pc, #140]	@ (80068a8 <HAL_TIM_Base_Init+0xc4>)
 800681c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2202      	movs	r2, #2
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	3304      	adds	r3, #4
 8006836:	4619      	mov	r1, r3
 8006838:	4610      	mov	r0, r2
 800683a:	f001 fc7b 	bl	8008134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	080045c1 	.word	0x080045c1

080068ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d001      	beq.n	80068c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e04c      	b.n	800695e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a26      	ldr	r2, [pc, #152]	@ (800696c <HAL_TIM_Base_Start+0xc0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d022      	beq.n	800691c <HAL_TIM_Base_Start+0x70>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068de:	d01d      	beq.n	800691c <HAL_TIM_Base_Start+0x70>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a22      	ldr	r2, [pc, #136]	@ (8006970 <HAL_TIM_Base_Start+0xc4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d018      	beq.n	800691c <HAL_TIM_Base_Start+0x70>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a21      	ldr	r2, [pc, #132]	@ (8006974 <HAL_TIM_Base_Start+0xc8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d013      	beq.n	800691c <HAL_TIM_Base_Start+0x70>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006978 <HAL_TIM_Base_Start+0xcc>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00e      	beq.n	800691c <HAL_TIM_Base_Start+0x70>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a1e      	ldr	r2, [pc, #120]	@ (800697c <HAL_TIM_Base_Start+0xd0>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d009      	beq.n	800691c <HAL_TIM_Base_Start+0x70>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a1c      	ldr	r2, [pc, #112]	@ (8006980 <HAL_TIM_Base_Start+0xd4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d004      	beq.n	800691c <HAL_TIM_Base_Start+0x70>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a1b      	ldr	r2, [pc, #108]	@ (8006984 <HAL_TIM_Base_Start+0xd8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d115      	bne.n	8006948 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	4b19      	ldr	r3, [pc, #100]	@ (8006988 <HAL_TIM_Base_Start+0xdc>)
 8006924:	4013      	ands	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b06      	cmp	r3, #6
 800692c:	d015      	beq.n	800695a <HAL_TIM_Base_Start+0xae>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006934:	d011      	beq.n	800695a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f042 0201 	orr.w	r2, r2, #1
 8006944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006946:	e008      	b.n	800695a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f042 0201 	orr.w	r2, r2, #1
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	e000      	b.n	800695c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800695a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40012c00 	.word	0x40012c00
 8006970:	40000400 	.word	0x40000400
 8006974:	40000800 	.word	0x40000800
 8006978:	40000c00 	.word	0x40000c00
 800697c:	40013400 	.word	0x40013400
 8006980:	40014000 	.word	0x40014000
 8006984:	40015000 	.word	0x40015000
 8006988:	00010007 	.word	0x00010007

0800698c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b01      	cmp	r3, #1
 800699e:	d001      	beq.n	80069a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e054      	b.n	8006a4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0201 	orr.w	r2, r2, #1
 80069ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a26      	ldr	r2, [pc, #152]	@ (8006a5c <HAL_TIM_Base_Start_IT+0xd0>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d022      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x80>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ce:	d01d      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x80>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a22      	ldr	r2, [pc, #136]	@ (8006a60 <HAL_TIM_Base_Start_IT+0xd4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d018      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x80>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a21      	ldr	r2, [pc, #132]	@ (8006a64 <HAL_TIM_Base_Start_IT+0xd8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d013      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x80>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a68 <HAL_TIM_Base_Start_IT+0xdc>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00e      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x80>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a1e      	ldr	r2, [pc, #120]	@ (8006a6c <HAL_TIM_Base_Start_IT+0xe0>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d009      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x80>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006a70 <HAL_TIM_Base_Start_IT+0xe4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d004      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x80>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a1b      	ldr	r2, [pc, #108]	@ (8006a74 <HAL_TIM_Base_Start_IT+0xe8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d115      	bne.n	8006a38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689a      	ldr	r2, [r3, #8]
 8006a12:	4b19      	ldr	r3, [pc, #100]	@ (8006a78 <HAL_TIM_Base_Start_IT+0xec>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b06      	cmp	r3, #6
 8006a1c:	d015      	beq.n	8006a4a <HAL_TIM_Base_Start_IT+0xbe>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a24:	d011      	beq.n	8006a4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0201 	orr.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a36:	e008      	b.n	8006a4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0201 	orr.w	r2, r2, #1
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	e000      	b.n	8006a4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40012c00 	.word	0x40012c00
 8006a60:	40000400 	.word	0x40000400
 8006a64:	40000800 	.word	0x40000800
 8006a68:	40000c00 	.word	0x40000c00
 8006a6c:	40013400 	.word	0x40013400
 8006a70:	40014000 	.word	0x40014000
 8006a74:	40015000 	.word	0x40015000
 8006a78:	00010007 	.word	0x00010007

08006a7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e054      	b.n	8006b38 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d111      	bne.n	8006abe <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f002 f9f0 	bl	8008e88 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d102      	bne.n	8006ab6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a23      	ldr	r2, [pc, #140]	@ (8006b40 <HAL_TIM_PWM_Init+0xc4>)
 8006ab4:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3304      	adds	r3, #4
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	f001 fb2f 	bl	8008134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	08006b45 	.word	0x08006b45

08006b44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d109      	bne.n	8006b7c <HAL_TIM_PWM_Start+0x24>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	bf14      	ite	ne
 8006b74:	2301      	movne	r3, #1
 8006b76:	2300      	moveq	r3, #0
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	e03c      	b.n	8006bf6 <HAL_TIM_PWM_Start+0x9e>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d109      	bne.n	8006b96 <HAL_TIM_PWM_Start+0x3e>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	bf14      	ite	ne
 8006b8e:	2301      	movne	r3, #1
 8006b90:	2300      	moveq	r3, #0
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	e02f      	b.n	8006bf6 <HAL_TIM_PWM_Start+0x9e>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d109      	bne.n	8006bb0 <HAL_TIM_PWM_Start+0x58>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	bf14      	ite	ne
 8006ba8:	2301      	movne	r3, #1
 8006baa:	2300      	moveq	r3, #0
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	e022      	b.n	8006bf6 <HAL_TIM_PWM_Start+0x9e>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b0c      	cmp	r3, #12
 8006bb4:	d109      	bne.n	8006bca <HAL_TIM_PWM_Start+0x72>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	bf14      	ite	ne
 8006bc2:	2301      	movne	r3, #1
 8006bc4:	2300      	moveq	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	e015      	b.n	8006bf6 <HAL_TIM_PWM_Start+0x9e>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b10      	cmp	r3, #16
 8006bce:	d109      	bne.n	8006be4 <HAL_TIM_PWM_Start+0x8c>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	bf14      	ite	ne
 8006bdc:	2301      	movne	r3, #1
 8006bde:	2300      	moveq	r3, #0
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	e008      	b.n	8006bf6 <HAL_TIM_PWM_Start+0x9e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	bf14      	ite	ne
 8006bf0:	2301      	movne	r3, #1
 8006bf2:	2300      	moveq	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e0a6      	b.n	8006d4c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d104      	bne.n	8006c0e <HAL_TIM_PWM_Start+0xb6>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c0c:	e023      	b.n	8006c56 <HAL_TIM_PWM_Start+0xfe>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	d104      	bne.n	8006c1e <HAL_TIM_PWM_Start+0xc6>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c1c:	e01b      	b.n	8006c56 <HAL_TIM_PWM_Start+0xfe>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d104      	bne.n	8006c2e <HAL_TIM_PWM_Start+0xd6>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c2c:	e013      	b.n	8006c56 <HAL_TIM_PWM_Start+0xfe>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b0c      	cmp	r3, #12
 8006c32:	d104      	bne.n	8006c3e <HAL_TIM_PWM_Start+0xe6>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c3c:	e00b      	b.n	8006c56 <HAL_TIM_PWM_Start+0xfe>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b10      	cmp	r3, #16
 8006c42:	d104      	bne.n	8006c4e <HAL_TIM_PWM_Start+0xf6>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c4c:	e003      	b.n	8006c56 <HAL_TIM_PWM_Start+0xfe>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f002 f8ec 	bl	8008e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a3a      	ldr	r2, [pc, #232]	@ (8006d54 <HAL_TIM_PWM_Start+0x1fc>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d018      	beq.n	8006ca0 <HAL_TIM_PWM_Start+0x148>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a39      	ldr	r2, [pc, #228]	@ (8006d58 <HAL_TIM_PWM_Start+0x200>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d013      	beq.n	8006ca0 <HAL_TIM_PWM_Start+0x148>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a37      	ldr	r2, [pc, #220]	@ (8006d5c <HAL_TIM_PWM_Start+0x204>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00e      	beq.n	8006ca0 <HAL_TIM_PWM_Start+0x148>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a36      	ldr	r2, [pc, #216]	@ (8006d60 <HAL_TIM_PWM_Start+0x208>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d009      	beq.n	8006ca0 <HAL_TIM_PWM_Start+0x148>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a34      	ldr	r2, [pc, #208]	@ (8006d64 <HAL_TIM_PWM_Start+0x20c>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d004      	beq.n	8006ca0 <HAL_TIM_PWM_Start+0x148>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a33      	ldr	r2, [pc, #204]	@ (8006d68 <HAL_TIM_PWM_Start+0x210>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d101      	bne.n	8006ca4 <HAL_TIM_PWM_Start+0x14c>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e000      	b.n	8006ca6 <HAL_TIM_PWM_Start+0x14e>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a25      	ldr	r2, [pc, #148]	@ (8006d54 <HAL_TIM_PWM_Start+0x1fc>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d022      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x1b2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ccc:	d01d      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x1b2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a26      	ldr	r2, [pc, #152]	@ (8006d6c <HAL_TIM_PWM_Start+0x214>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d018      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x1b2>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a24      	ldr	r2, [pc, #144]	@ (8006d70 <HAL_TIM_PWM_Start+0x218>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x1b2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a23      	ldr	r2, [pc, #140]	@ (8006d74 <HAL_TIM_PWM_Start+0x21c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00e      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x1b2>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a19      	ldr	r2, [pc, #100]	@ (8006d58 <HAL_TIM_PWM_Start+0x200>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x1b2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a18      	ldr	r2, [pc, #96]	@ (8006d5c <HAL_TIM_PWM_Start+0x204>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d004      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x1b2>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a18      	ldr	r2, [pc, #96]	@ (8006d68 <HAL_TIM_PWM_Start+0x210>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d115      	bne.n	8006d36 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	4b19      	ldr	r3, [pc, #100]	@ (8006d78 <HAL_TIM_PWM_Start+0x220>)
 8006d12:	4013      	ands	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b06      	cmp	r3, #6
 8006d1a:	d015      	beq.n	8006d48 <HAL_TIM_PWM_Start+0x1f0>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d22:	d011      	beq.n	8006d48 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d34:	e008      	b.n	8006d48 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0201 	orr.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	e000      	b.n	8006d4a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	40012c00 	.word	0x40012c00
 8006d58:	40013400 	.word	0x40013400
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	40014400 	.word	0x40014400
 8006d64:	40014800 	.word	0x40014800
 8006d68:	40015000 	.word	0x40015000
 8006d6c:	40000400 	.word	0x40000400
 8006d70:	40000800 	.word	0x40000800
 8006d74:	40000c00 	.word	0x40000c00
 8006d78:	00010007 	.word	0x00010007

08006d7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e054      	b.n	8006e38 <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d111      	bne.n	8006dbe <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f002 f870 	bl	8008e88 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d102      	bne.n	8006db6 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a23      	ldr	r2, [pc, #140]	@ (8006e40 <HAL_TIM_IC_Init+0xc4>)
 8006db4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f001 f9af 	bl	8008134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	080043d1 	.word	0x080043d1

08006e44 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <HAL_TIM_IC_Start+0x1a>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	e023      	b.n	8006ea6 <HAL_TIM_IC_Start+0x62>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d104      	bne.n	8006e6e <HAL_TIM_IC_Start+0x2a>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	e01b      	b.n	8006ea6 <HAL_TIM_IC_Start+0x62>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d104      	bne.n	8006e7e <HAL_TIM_IC_Start+0x3a>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	e013      	b.n	8006ea6 <HAL_TIM_IC_Start+0x62>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b0c      	cmp	r3, #12
 8006e82:	d104      	bne.n	8006e8e <HAL_TIM_IC_Start+0x4a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	e00b      	b.n	8006ea6 <HAL_TIM_IC_Start+0x62>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b10      	cmp	r3, #16
 8006e92:	d104      	bne.n	8006e9e <HAL_TIM_IC_Start+0x5a>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	e003      	b.n	8006ea6 <HAL_TIM_IC_Start+0x62>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d104      	bne.n	8006eb8 <HAL_TIM_IC_Start+0x74>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	e013      	b.n	8006ee0 <HAL_TIM_IC_Start+0x9c>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d104      	bne.n	8006ec8 <HAL_TIM_IC_Start+0x84>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	e00b      	b.n	8006ee0 <HAL_TIM_IC_Start+0x9c>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d104      	bne.n	8006ed8 <HAL_TIM_IC_Start+0x94>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	e003      	b.n	8006ee0 <HAL_TIM_IC_Start+0x9c>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d102      	bne.n	8006eee <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d001      	beq.n	8006ef2 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e097      	b.n	8007022 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <HAL_TIM_IC_Start+0xbe>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f00:	e023      	b.n	8006f4a <HAL_TIM_IC_Start+0x106>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d104      	bne.n	8006f12 <HAL_TIM_IC_Start+0xce>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f10:	e01b      	b.n	8006f4a <HAL_TIM_IC_Start+0x106>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d104      	bne.n	8006f22 <HAL_TIM_IC_Start+0xde>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f20:	e013      	b.n	8006f4a <HAL_TIM_IC_Start+0x106>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b0c      	cmp	r3, #12
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_IC_Start+0xee>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f30:	e00b      	b.n	8006f4a <HAL_TIM_IC_Start+0x106>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b10      	cmp	r3, #16
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_IC_Start+0xfe>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f40:	e003      	b.n	8006f4a <HAL_TIM_IC_Start+0x106>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2202      	movs	r2, #2
 8006f46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d104      	bne.n	8006f5a <HAL_TIM_IC_Start+0x116>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f58:	e013      	b.n	8006f82 <HAL_TIM_IC_Start+0x13e>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b04      	cmp	r3, #4
 8006f5e:	d104      	bne.n	8006f6a <HAL_TIM_IC_Start+0x126>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f68:	e00b      	b.n	8006f82 <HAL_TIM_IC_Start+0x13e>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d104      	bne.n	8006f7a <HAL_TIM_IC_Start+0x136>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f78:	e003      	b.n	8006f82 <HAL_TIM_IC_Start+0x13e>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2201      	movs	r2, #1
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f001 ff56 	bl	8008e3c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a25      	ldr	r2, [pc, #148]	@ (800702c <HAL_TIM_IC_Start+0x1e8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d022      	beq.n	8006fe0 <HAL_TIM_IC_Start+0x19c>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fa2:	d01d      	beq.n	8006fe0 <HAL_TIM_IC_Start+0x19c>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a21      	ldr	r2, [pc, #132]	@ (8007030 <HAL_TIM_IC_Start+0x1ec>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d018      	beq.n	8006fe0 <HAL_TIM_IC_Start+0x19c>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a20      	ldr	r2, [pc, #128]	@ (8007034 <HAL_TIM_IC_Start+0x1f0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d013      	beq.n	8006fe0 <HAL_TIM_IC_Start+0x19c>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8007038 <HAL_TIM_IC_Start+0x1f4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00e      	beq.n	8006fe0 <HAL_TIM_IC_Start+0x19c>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800703c <HAL_TIM_IC_Start+0x1f8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d009      	beq.n	8006fe0 <HAL_TIM_IC_Start+0x19c>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8007040 <HAL_TIM_IC_Start+0x1fc>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d004      	beq.n	8006fe0 <HAL_TIM_IC_Start+0x19c>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1a      	ldr	r2, [pc, #104]	@ (8007044 <HAL_TIM_IC_Start+0x200>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d115      	bne.n	800700c <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	4b18      	ldr	r3, [pc, #96]	@ (8007048 <HAL_TIM_IC_Start+0x204>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2b06      	cmp	r3, #6
 8006ff0:	d015      	beq.n	800701e <HAL_TIM_IC_Start+0x1da>
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ff8:	d011      	beq.n	800701e <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0201 	orr.w	r2, r2, #1
 8007008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700a:	e008      	b.n	800701e <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0201 	orr.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	e000      	b.n	8007020 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	40012c00 	.word	0x40012c00
 8007030:	40000400 	.word	0x40000400
 8007034:	40000800 	.word	0x40000800
 8007038:	40000c00 	.word	0x40000c00
 800703c:	40013400 	.word	0x40013400
 8007040:	40014000 	.word	0x40014000
 8007044:	40015000 	.word	0x40015000
 8007048:	00010007 	.word	0x00010007

0800704c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e04c      	b.n	80070fa <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d111      	bne.n	8007090 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 ff07 	bl	8008e88 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d102      	bne.n	8007088 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a1f      	ldr	r2, [pc, #124]	@ (8007104 <HAL_TIM_OnePulse_Init+0xb8>)
 8007086:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3304      	adds	r3, #4
 80070a0:	4619      	mov	r1, r3
 80070a2:	4610      	mov	r0, r2
 80070a4:	f001 f846 	bl	8008134 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0208 	bic.w	r2, r2, #8
 80070b6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6819      	ldr	r1, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	08007109 	.word	0x08007109

08007108 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800712c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007134:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800713c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007144:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d108      	bne.n	800715e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800714c:	7bbb      	ldrb	r3, [r7, #14]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d105      	bne.n	800715e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007152:	7b7b      	ldrb	r3, [r7, #13]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d102      	bne.n	800715e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007158:	7b3b      	ldrb	r3, [r7, #12]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d001      	beq.n	8007162 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e059      	b.n	8007216 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2202      	movs	r2, #2
 8007166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2202      	movs	r2, #2
 800716e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2202      	movs	r2, #2
 8007176:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2202      	movs	r2, #2
 800717e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0202 	orr.w	r2, r2, #2
 8007190:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f042 0204 	orr.w	r2, r2, #4
 80071a0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2201      	movs	r2, #1
 80071a8:	2100      	movs	r1, #0
 80071aa:	4618      	mov	r0, r3
 80071ac:	f001 fe46 	bl	8008e3c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2201      	movs	r2, #1
 80071b6:	2104      	movs	r1, #4
 80071b8:	4618      	mov	r0, r3
 80071ba:	f001 fe3f 	bl	8008e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a17      	ldr	r2, [pc, #92]	@ (8007220 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d018      	beq.n	80071fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a15      	ldr	r2, [pc, #84]	@ (8007224 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d013      	beq.n	80071fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a14      	ldr	r2, [pc, #80]	@ (8007228 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d00e      	beq.n	80071fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a12      	ldr	r2, [pc, #72]	@ (800722c <HAL_TIM_OnePulse_Start_IT+0x110>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d009      	beq.n	80071fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a11      	ldr	r2, [pc, #68]	@ (8007230 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d004      	beq.n	80071fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a0f      	ldr	r2, [pc, #60]	@ (8007234 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d101      	bne.n	80071fe <HAL_TIM_OnePulse_Start_IT+0xe2>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e000      	b.n	8007200 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80071fe:	2300      	movs	r3, #0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d007      	beq.n	8007214 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007212:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	40012c00 	.word	0x40012c00
 8007224:	40013400 	.word	0x40013400
 8007228:	40014000 	.word	0x40014000
 800722c:	40014400 	.word	0x40014400
 8007230:	40014800 	.word	0x40014800
 8007234:	40015000 	.word	0x40015000

08007238 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e0a2      	b.n	8007392 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d111      	bne.n	800727c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 fe11 	bl	8008e88 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a4a      	ldr	r2, [pc, #296]	@ (800739c <HAL_TIM_Encoder_Init+0x164>)
 8007272:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6812      	ldr	r2, [r2, #0]
 800728e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007292:	f023 0307 	bic.w	r3, r3, #7
 8007296:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	3304      	adds	r3, #4
 80072a0:	4619      	mov	r1, r3
 80072a2:	4610      	mov	r0, r2
 80072a4:	f000 ff46 	bl	8008134 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072d0:	f023 0303 	bic.w	r3, r3, #3
 80072d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	021b      	lsls	r3, r3, #8
 80072e0:	4313      	orrs	r3, r2
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80072ee:	f023 030c 	bic.w	r3, r3, #12
 80072f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	021b      	lsls	r3, r3, #8
 800730a:	4313      	orrs	r3, r2
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	4313      	orrs	r3, r2
 8007310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	011a      	lsls	r2, r3, #4
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	031b      	lsls	r3, r3, #12
 800731e:	4313      	orrs	r3, r2
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	4313      	orrs	r3, r2
 8007324:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800732c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007334:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	4313      	orrs	r3, r2
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	4313      	orrs	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	080044c5 	.word	0x080044c5

080073a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d110      	bne.n	80073f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d102      	bne.n	80073dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80073d6:	7b7b      	ldrb	r3, [r7, #13]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d001      	beq.n	80073e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e069      	b.n	80074b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073f0:	e031      	b.n	8007456 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b04      	cmp	r3, #4
 80073f6:	d110      	bne.n	800741a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d102      	bne.n	8007404 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80073fe:	7b3b      	ldrb	r3, [r7, #12]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d001      	beq.n	8007408 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e055      	b.n	80074b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007418:	e01d      	b.n	8007456 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d108      	bne.n	8007432 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d105      	bne.n	8007432 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007426:	7b7b      	ldrb	r3, [r7, #13]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d102      	bne.n	8007432 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800742c:	7b3b      	ldrb	r3, [r7, #12]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d001      	beq.n	8007436 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e03e      	b.n	80074b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2202      	movs	r2, #2
 800743a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2202      	movs	r2, #2
 8007442:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2202      	movs	r2, #2
 800744a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2202      	movs	r2, #2
 8007452:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_TIM_Encoder_Start+0xc4>
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2b04      	cmp	r3, #4
 8007460:	d008      	beq.n	8007474 <HAL_TIM_Encoder_Start+0xd4>
 8007462:	e00f      	b.n	8007484 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2201      	movs	r2, #1
 800746a:	2100      	movs	r1, #0
 800746c:	4618      	mov	r0, r3
 800746e:	f001 fce5 	bl	8008e3c <TIM_CCxChannelCmd>
      break;
 8007472:	e016      	b.n	80074a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2201      	movs	r2, #1
 800747a:	2104      	movs	r1, #4
 800747c:	4618      	mov	r0, r3
 800747e:	f001 fcdd 	bl	8008e3c <TIM_CCxChannelCmd>
      break;
 8007482:	e00e      	b.n	80074a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2201      	movs	r2, #1
 800748a:	2100      	movs	r1, #0
 800748c:	4618      	mov	r0, r3
 800748e:	f001 fcd5 	bl	8008e3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2201      	movs	r2, #1
 8007498:	2104      	movs	r1, #4
 800749a:	4618      	mov	r0, r3
 800749c:	f001 fcce 	bl	8008e3c <TIM_CCxChannelCmd>
      break;
 80074a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f042 0201 	orr.w	r2, r2, #1
 80074b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d026      	beq.n	800752c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f003 0302 	and.w	r3, r3, #2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d021      	beq.n	800752c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f06f 0202 	mvn.w	r2, #2
 80074f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	4798      	blx	r3
 8007510:	e009      	b.n	8007526 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f003 0304 	and.w	r3, r3, #4
 8007532:	2b00      	cmp	r3, #0
 8007534:	d026      	beq.n	8007584 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f003 0304 	and.w	r3, r3, #4
 800753c:	2b00      	cmp	r3, #0
 800753e:	d021      	beq.n	8007584 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0204 	mvn.w	r2, #4
 8007548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2202      	movs	r2, #2
 800754e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	4798      	blx	r3
 8007568:	e009      	b.n	800757e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f003 0308 	and.w	r3, r3, #8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d026      	beq.n	80075dc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b00      	cmp	r3, #0
 8007596:	d021      	beq.n	80075dc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f06f 0208 	mvn.w	r2, #8
 80075a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2204      	movs	r2, #4
 80075a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	f003 0303 	and.w	r3, r3, #3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d005      	beq.n	80075c2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	4798      	blx	r3
 80075c0:	e009      	b.n	80075d6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f003 0310 	and.w	r3, r3, #16
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d026      	beq.n	8007634 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f003 0310 	and.w	r3, r3, #16
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d021      	beq.n	8007634 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f06f 0210 	mvn.w	r2, #16
 80075f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2208      	movs	r2, #8
 80075fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	4798      	blx	r3
 8007618:	e009      	b.n	800762e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00e      	beq.n	800765c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d009      	beq.n	800765c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f06f 0201 	mvn.w	r2, #1
 8007650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007662:	2b00      	cmp	r3, #0
 8007664:	d104      	bne.n	8007670 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00e      	beq.n	800768e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007676:	2b00      	cmp	r3, #0
 8007678:	d009      	beq.n	800768e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00e      	beq.n	80076b6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d009      	beq.n	80076b6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80076aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00e      	beq.n	80076de <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d009      	beq.n	80076de <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80076d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f003 0320 	and.w	r3, r3, #32
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00e      	beq.n	8007706 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f003 0320 	and.w	r3, r3, #32
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d009      	beq.n	8007706 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f06f 0220 	mvn.w	r2, #32
 80076fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00e      	beq.n	800772e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d009      	beq.n	800772e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00e      	beq.n	8007756 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d009      	beq.n	8007756 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800774a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00e      	beq.n	800777e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d009      	beq.n	800777e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00e      	beq.n	80077a6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800779a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077a6:	bf00      	nop
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b086      	sub	sp, #24
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d101      	bne.n	80077cc <HAL_TIM_IC_ConfigChannel+0x1e>
 80077c8:	2302      	movs	r3, #2
 80077ca:	e088      	b.n	80078de <HAL_TIM_IC_ConfigChannel+0x130>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d11b      	bne.n	8007812 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80077ea:	f001 f961 	bl	8008ab0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	699a      	ldr	r2, [r3, #24]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 020c 	bic.w	r2, r2, #12
 80077fc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6999      	ldr	r1, [r3, #24]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	619a      	str	r2, [r3, #24]
 8007810:	e060      	b.n	80078d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b04      	cmp	r3, #4
 8007816:	d11c      	bne.n	8007852 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007828:	f001 f9e5 	bl	8008bf6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800783a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6999      	ldr	r1, [r3, #24]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	021a      	lsls	r2, r3, #8
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	619a      	str	r2, [r3, #24]
 8007850:	e040      	b.n	80078d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b08      	cmp	r3, #8
 8007856:	d11b      	bne.n	8007890 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007868:	f001 fa32 	bl	8008cd0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	69da      	ldr	r2, [r3, #28]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 020c 	bic.w	r2, r2, #12
 800787a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	69d9      	ldr	r1, [r3, #28]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	689a      	ldr	r2, [r3, #8]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	61da      	str	r2, [r3, #28]
 800788e:	e021      	b.n	80078d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b0c      	cmp	r3, #12
 8007894:	d11c      	bne.n	80078d0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80078a6:	f001 fa4f 	bl	8008d48 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69da      	ldr	r2, [r3, #28]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80078b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69d9      	ldr	r1, [r3, #28]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	021a      	lsls	r2, r3, #8
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	61da      	str	r2, [r3, #28]
 80078ce:	e001      	b.n	80078d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
	...

080078e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d101      	bne.n	8007906 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007902:	2302      	movs	r3, #2
 8007904:	e0ff      	b.n	8007b06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b14      	cmp	r3, #20
 8007912:	f200 80f0 	bhi.w	8007af6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007916:	a201      	add	r2, pc, #4	@ (adr r2, 800791c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791c:	08007971 	.word	0x08007971
 8007920:	08007af7 	.word	0x08007af7
 8007924:	08007af7 	.word	0x08007af7
 8007928:	08007af7 	.word	0x08007af7
 800792c:	080079b1 	.word	0x080079b1
 8007930:	08007af7 	.word	0x08007af7
 8007934:	08007af7 	.word	0x08007af7
 8007938:	08007af7 	.word	0x08007af7
 800793c:	080079f3 	.word	0x080079f3
 8007940:	08007af7 	.word	0x08007af7
 8007944:	08007af7 	.word	0x08007af7
 8007948:	08007af7 	.word	0x08007af7
 800794c:	08007a33 	.word	0x08007a33
 8007950:	08007af7 	.word	0x08007af7
 8007954:	08007af7 	.word	0x08007af7
 8007958:	08007af7 	.word	0x08007af7
 800795c:	08007a75 	.word	0x08007a75
 8007960:	08007af7 	.word	0x08007af7
 8007964:	08007af7 	.word	0x08007af7
 8007968:	08007af7 	.word	0x08007af7
 800796c:	08007ab5 	.word	0x08007ab5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68b9      	ldr	r1, [r7, #8]
 8007976:	4618      	mov	r0, r3
 8007978:	f000 fc90 	bl	800829c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	699a      	ldr	r2, [r3, #24]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0208 	orr.w	r2, r2, #8
 800798a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0204 	bic.w	r2, r2, #4
 800799a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6999      	ldr	r1, [r3, #24]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	691a      	ldr	r2, [r3, #16]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	619a      	str	r2, [r3, #24]
      break;
 80079ae:	e0a5      	b.n	8007afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68b9      	ldr	r1, [r7, #8]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fd0a 	bl	80083d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699a      	ldr	r2, [r3, #24]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699a      	ldr	r2, [r3, #24]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6999      	ldr	r1, [r3, #24]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	021a      	lsls	r2, r3, #8
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	619a      	str	r2, [r3, #24]
      break;
 80079f0:	e084      	b.n	8007afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68b9      	ldr	r1, [r7, #8]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fd7d 	bl	80084f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69da      	ldr	r2, [r3, #28]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f042 0208 	orr.w	r2, r2, #8
 8007a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69da      	ldr	r2, [r3, #28]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0204 	bic.w	r2, r2, #4
 8007a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69d9      	ldr	r1, [r3, #28]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	691a      	ldr	r2, [r3, #16]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	61da      	str	r2, [r3, #28]
      break;
 8007a30:	e064      	b.n	8007afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68b9      	ldr	r1, [r7, #8]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 fdef 	bl	800861c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69da      	ldr	r2, [r3, #28]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69da      	ldr	r2, [r3, #28]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69d9      	ldr	r1, [r3, #28]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	021a      	lsls	r2, r3, #8
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	61da      	str	r2, [r3, #28]
      break;
 8007a72:	e043      	b.n	8007afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68b9      	ldr	r1, [r7, #8]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fe62 	bl	8008744 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f042 0208 	orr.w	r2, r2, #8
 8007a8e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0204 	bic.w	r2, r2, #4
 8007a9e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	691a      	ldr	r2, [r3, #16]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007ab2:	e023      	b.n	8007afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68b9      	ldr	r1, [r7, #8]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 feac 	bl	8008818 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ace:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ade:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	021a      	lsls	r2, r3, #8
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007af4:	e002      	b.n	8007afc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	75fb      	strb	r3, [r7, #23]
      break;
 8007afa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop

08007b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_TIM_ConfigClockSource+0x1c>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e0f6      	b.n	8007d1a <HAL_TIM_ConfigClockSource+0x20a>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007b4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a6f      	ldr	r2, [pc, #444]	@ (8007d24 <HAL_TIM_ConfigClockSource+0x214>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	f000 80c1 	beq.w	8007cee <HAL_TIM_ConfigClockSource+0x1de>
 8007b6c:	4a6d      	ldr	r2, [pc, #436]	@ (8007d24 <HAL_TIM_ConfigClockSource+0x214>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	f200 80c6 	bhi.w	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b74:	4a6c      	ldr	r2, [pc, #432]	@ (8007d28 <HAL_TIM_ConfigClockSource+0x218>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	f000 80b9 	beq.w	8007cee <HAL_TIM_ConfigClockSource+0x1de>
 8007b7c:	4a6a      	ldr	r2, [pc, #424]	@ (8007d28 <HAL_TIM_ConfigClockSource+0x218>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	f200 80be 	bhi.w	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b84:	4a69      	ldr	r2, [pc, #420]	@ (8007d2c <HAL_TIM_ConfigClockSource+0x21c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	f000 80b1 	beq.w	8007cee <HAL_TIM_ConfigClockSource+0x1de>
 8007b8c:	4a67      	ldr	r2, [pc, #412]	@ (8007d2c <HAL_TIM_ConfigClockSource+0x21c>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	f200 80b6 	bhi.w	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b94:	4a66      	ldr	r2, [pc, #408]	@ (8007d30 <HAL_TIM_ConfigClockSource+0x220>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	f000 80a9 	beq.w	8007cee <HAL_TIM_ConfigClockSource+0x1de>
 8007b9c:	4a64      	ldr	r2, [pc, #400]	@ (8007d30 <HAL_TIM_ConfigClockSource+0x220>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	f200 80ae 	bhi.w	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ba4:	4a63      	ldr	r2, [pc, #396]	@ (8007d34 <HAL_TIM_ConfigClockSource+0x224>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	f000 80a1 	beq.w	8007cee <HAL_TIM_ConfigClockSource+0x1de>
 8007bac:	4a61      	ldr	r2, [pc, #388]	@ (8007d34 <HAL_TIM_ConfigClockSource+0x224>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	f200 80a6 	bhi.w	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bb4:	4a60      	ldr	r2, [pc, #384]	@ (8007d38 <HAL_TIM_ConfigClockSource+0x228>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	f000 8099 	beq.w	8007cee <HAL_TIM_ConfigClockSource+0x1de>
 8007bbc:	4a5e      	ldr	r2, [pc, #376]	@ (8007d38 <HAL_TIM_ConfigClockSource+0x228>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	f200 809e 	bhi.w	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bc4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007bc8:	f000 8091 	beq.w	8007cee <HAL_TIM_ConfigClockSource+0x1de>
 8007bcc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007bd0:	f200 8096 	bhi.w	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bd8:	f000 8089 	beq.w	8007cee <HAL_TIM_ConfigClockSource+0x1de>
 8007bdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007be0:	f200 808e 	bhi.w	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007be8:	d03e      	beq.n	8007c68 <HAL_TIM_ConfigClockSource+0x158>
 8007bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bee:	f200 8087 	bhi.w	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bf6:	f000 8086 	beq.w	8007d06 <HAL_TIM_ConfigClockSource+0x1f6>
 8007bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bfe:	d87f      	bhi.n	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c00:	2b70      	cmp	r3, #112	@ 0x70
 8007c02:	d01a      	beq.n	8007c3a <HAL_TIM_ConfigClockSource+0x12a>
 8007c04:	2b70      	cmp	r3, #112	@ 0x70
 8007c06:	d87b      	bhi.n	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c08:	2b60      	cmp	r3, #96	@ 0x60
 8007c0a:	d050      	beq.n	8007cae <HAL_TIM_ConfigClockSource+0x19e>
 8007c0c:	2b60      	cmp	r3, #96	@ 0x60
 8007c0e:	d877      	bhi.n	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c10:	2b50      	cmp	r3, #80	@ 0x50
 8007c12:	d03c      	beq.n	8007c8e <HAL_TIM_ConfigClockSource+0x17e>
 8007c14:	2b50      	cmp	r3, #80	@ 0x50
 8007c16:	d873      	bhi.n	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c18:	2b40      	cmp	r3, #64	@ 0x40
 8007c1a:	d058      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0x1be>
 8007c1c:	2b40      	cmp	r3, #64	@ 0x40
 8007c1e:	d86f      	bhi.n	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c20:	2b30      	cmp	r3, #48	@ 0x30
 8007c22:	d064      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x1de>
 8007c24:	2b30      	cmp	r3, #48	@ 0x30
 8007c26:	d86b      	bhi.n	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	d060      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x1de>
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	d867      	bhi.n	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d05c      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x1de>
 8007c34:	2b10      	cmp	r3, #16
 8007c36:	d05a      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x1de>
 8007c38:	e062      	b.n	8007d00 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c4a:	f001 f8d7 	bl	8008dfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	609a      	str	r2, [r3, #8]
      break;
 8007c66:	e04f      	b.n	8007d08 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c78:	f001 f8c0 	bl	8008dfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689a      	ldr	r2, [r3, #8]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c8a:	609a      	str	r2, [r3, #8]
      break;
 8007c8c:	e03c      	b.n	8007d08 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f000 ff7c 	bl	8008b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2150      	movs	r1, #80	@ 0x50
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f001 f88b 	bl	8008dc2 <TIM_ITRx_SetConfig>
      break;
 8007cac:	e02c      	b.n	8007d08 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f000 ffd8 	bl	8008c70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2160      	movs	r1, #96	@ 0x60
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f001 f87b 	bl	8008dc2 <TIM_ITRx_SetConfig>
      break;
 8007ccc:	e01c      	b.n	8007d08 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f000 ff5c 	bl	8008b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2140      	movs	r1, #64	@ 0x40
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f001 f86b 	bl	8008dc2 <TIM_ITRx_SetConfig>
      break;
 8007cec:	e00c      	b.n	8007d08 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f001 f862 	bl	8008dc2 <TIM_ITRx_SetConfig>
      break;
 8007cfe:	e003      	b.n	8007d08 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	73fb      	strb	r3, [r7, #15]
      break;
 8007d04:	e000      	b.n	8007d08 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007d06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	00100070 	.word	0x00100070
 8007d28:	00100060 	.word	0x00100060
 8007d2c:	00100050 	.word	0x00100050
 8007d30:	00100040 	.word	0x00100040
 8007d34:	00100030 	.word	0x00100030
 8007d38:	00100020 	.word	0x00100020

08007d3c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d101      	bne.n	8007d54 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007d50:	2302      	movs	r3, #2
 8007d52:	e031      	b.n	8007db8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fdc2 	bl	80088f0 <TIM_SlaveTimer_SetConfig>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d009      	beq.n	8007d86 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e018      	b.n	8007db8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68da      	ldr	r2, [r3, #12]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d94:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68da      	ldr	r2, [r3, #12]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007da4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	607a      	str	r2, [r7, #4]
 8007e80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e14a      	b.n	8008126 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	f040 80dd 	bne.w	8008058 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007e9e:	7afb      	ldrb	r3, [r7, #11]
 8007ea0:	2b1f      	cmp	r3, #31
 8007ea2:	f200 80d6 	bhi.w	8008052 <HAL_TIM_RegisterCallback+0x1de>
 8007ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8007eac <HAL_TIM_RegisterCallback+0x38>)
 8007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eac:	08007f2d 	.word	0x08007f2d
 8007eb0:	08007f35 	.word	0x08007f35
 8007eb4:	08007f3d 	.word	0x08007f3d
 8007eb8:	08007f45 	.word	0x08007f45
 8007ebc:	08007f4d 	.word	0x08007f4d
 8007ec0:	08007f55 	.word	0x08007f55
 8007ec4:	08007f5d 	.word	0x08007f5d
 8007ec8:	08007f65 	.word	0x08007f65
 8007ecc:	08007f6d 	.word	0x08007f6d
 8007ed0:	08007f75 	.word	0x08007f75
 8007ed4:	08007f7d 	.word	0x08007f7d
 8007ed8:	08007f85 	.word	0x08007f85
 8007edc:	08007f8d 	.word	0x08007f8d
 8007ee0:	08007f95 	.word	0x08007f95
 8007ee4:	08007f9f 	.word	0x08007f9f
 8007ee8:	08007fa9 	.word	0x08007fa9
 8007eec:	08007fb3 	.word	0x08007fb3
 8007ef0:	08007fbd 	.word	0x08007fbd
 8007ef4:	08007fc7 	.word	0x08007fc7
 8007ef8:	08007fd1 	.word	0x08007fd1
 8007efc:	08007fdb 	.word	0x08007fdb
 8007f00:	08007fe5 	.word	0x08007fe5
 8007f04:	08007fef 	.word	0x08007fef
 8007f08:	08007ff9 	.word	0x08007ff9
 8007f0c:	08008003 	.word	0x08008003
 8007f10:	0800800d 	.word	0x0800800d
 8007f14:	08008017 	.word	0x08008017
 8007f18:	08008021 	.word	0x08008021
 8007f1c:	0800802b 	.word	0x0800802b
 8007f20:	08008035 	.word	0x08008035
 8007f24:	0800803f 	.word	0x0800803f
 8007f28:	08008049 	.word	0x08008049
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007f32:	e0f7      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007f3a:	e0f3      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007f42:	e0ef      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007f4a:	e0eb      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007f52:	e0e7      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007f5a:	e0e3      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007f62:	e0df      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007f6a:	e0db      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007f72:	e0d7      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007f7a:	e0d3      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007f82:	e0cf      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007f8a:	e0cb      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007f92:	e0c7      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007f9c:	e0c2      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007fa6:	e0bd      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007fb0:	e0b8      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007fba:	e0b3      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007fc4:	e0ae      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007fce:	e0a9      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007fd8:	e0a4      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007fe2:	e09f      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007fec:	e09a      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007ff6:	e095      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008000:	e090      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800800a:	e08b      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008014:	e086      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800801e:	e081      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008028:	e07c      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008032:	e077      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800803c:	e072      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008046:	e06d      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008050:	e068      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	75fb      	strb	r3, [r7, #23]
        break;
 8008056:	e065      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b00      	cmp	r3, #0
 8008062:	d15d      	bne.n	8008120 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008064:	7afb      	ldrb	r3, [r7, #11]
 8008066:	2b0d      	cmp	r3, #13
 8008068:	d857      	bhi.n	800811a <HAL_TIM_RegisterCallback+0x2a6>
 800806a:	a201      	add	r2, pc, #4	@ (adr r2, 8008070 <HAL_TIM_RegisterCallback+0x1fc>)
 800806c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008070:	080080a9 	.word	0x080080a9
 8008074:	080080b1 	.word	0x080080b1
 8008078:	080080b9 	.word	0x080080b9
 800807c:	080080c1 	.word	0x080080c1
 8008080:	080080c9 	.word	0x080080c9
 8008084:	080080d1 	.word	0x080080d1
 8008088:	080080d9 	.word	0x080080d9
 800808c:	080080e1 	.word	0x080080e1
 8008090:	080080e9 	.word	0x080080e9
 8008094:	080080f1 	.word	0x080080f1
 8008098:	080080f9 	.word	0x080080f9
 800809c:	08008101 	.word	0x08008101
 80080a0:	08008109 	.word	0x08008109
 80080a4:	08008111 	.word	0x08008111
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80080ae:	e039      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80080b6:	e035      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80080be:	e031      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80080c6:	e02d      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80080ce:	e029      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80080d6:	e025      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80080de:	e021      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80080e6:	e01d      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80080ee:	e019      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80080f6:	e015      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80080fe:	e011      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008106:	e00d      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800810e:	e009      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008118:	e004      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	75fb      	strb	r3, [r7, #23]
        break;
 800811e:	e001      	b.n	8008124 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008124:	7dfb      	ldrb	r3, [r7, #23]
}
 8008126:	4618      	mov	r0, r3
 8008128:	371c      	adds	r7, #28
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop

08008134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a4c      	ldr	r2, [pc, #304]	@ (8008278 <TIM_Base_SetConfig+0x144>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d017      	beq.n	800817c <TIM_Base_SetConfig+0x48>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008152:	d013      	beq.n	800817c <TIM_Base_SetConfig+0x48>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a49      	ldr	r2, [pc, #292]	@ (800827c <TIM_Base_SetConfig+0x148>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d00f      	beq.n	800817c <TIM_Base_SetConfig+0x48>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a48      	ldr	r2, [pc, #288]	@ (8008280 <TIM_Base_SetConfig+0x14c>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d00b      	beq.n	800817c <TIM_Base_SetConfig+0x48>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a47      	ldr	r2, [pc, #284]	@ (8008284 <TIM_Base_SetConfig+0x150>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d007      	beq.n	800817c <TIM_Base_SetConfig+0x48>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a46      	ldr	r2, [pc, #280]	@ (8008288 <TIM_Base_SetConfig+0x154>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d003      	beq.n	800817c <TIM_Base_SetConfig+0x48>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a45      	ldr	r2, [pc, #276]	@ (800828c <TIM_Base_SetConfig+0x158>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d108      	bne.n	800818e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	4313      	orrs	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a39      	ldr	r2, [pc, #228]	@ (8008278 <TIM_Base_SetConfig+0x144>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d023      	beq.n	80081de <TIM_Base_SetConfig+0xaa>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800819c:	d01f      	beq.n	80081de <TIM_Base_SetConfig+0xaa>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a36      	ldr	r2, [pc, #216]	@ (800827c <TIM_Base_SetConfig+0x148>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d01b      	beq.n	80081de <TIM_Base_SetConfig+0xaa>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a35      	ldr	r2, [pc, #212]	@ (8008280 <TIM_Base_SetConfig+0x14c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d017      	beq.n	80081de <TIM_Base_SetConfig+0xaa>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a34      	ldr	r2, [pc, #208]	@ (8008284 <TIM_Base_SetConfig+0x150>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d013      	beq.n	80081de <TIM_Base_SetConfig+0xaa>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a33      	ldr	r2, [pc, #204]	@ (8008288 <TIM_Base_SetConfig+0x154>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d00f      	beq.n	80081de <TIM_Base_SetConfig+0xaa>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a33      	ldr	r2, [pc, #204]	@ (8008290 <TIM_Base_SetConfig+0x15c>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d00b      	beq.n	80081de <TIM_Base_SetConfig+0xaa>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a32      	ldr	r2, [pc, #200]	@ (8008294 <TIM_Base_SetConfig+0x160>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d007      	beq.n	80081de <TIM_Base_SetConfig+0xaa>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a31      	ldr	r2, [pc, #196]	@ (8008298 <TIM_Base_SetConfig+0x164>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d003      	beq.n	80081de <TIM_Base_SetConfig+0xaa>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a2c      	ldr	r2, [pc, #176]	@ (800828c <TIM_Base_SetConfig+0x158>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d108      	bne.n	80081f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a18      	ldr	r2, [pc, #96]	@ (8008278 <TIM_Base_SetConfig+0x144>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d013      	beq.n	8008244 <TIM_Base_SetConfig+0x110>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a1a      	ldr	r2, [pc, #104]	@ (8008288 <TIM_Base_SetConfig+0x154>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d00f      	beq.n	8008244 <TIM_Base_SetConfig+0x110>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a1a      	ldr	r2, [pc, #104]	@ (8008290 <TIM_Base_SetConfig+0x15c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d00b      	beq.n	8008244 <TIM_Base_SetConfig+0x110>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a19      	ldr	r2, [pc, #100]	@ (8008294 <TIM_Base_SetConfig+0x160>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d007      	beq.n	8008244 <TIM_Base_SetConfig+0x110>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a18      	ldr	r2, [pc, #96]	@ (8008298 <TIM_Base_SetConfig+0x164>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d003      	beq.n	8008244 <TIM_Base_SetConfig+0x110>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a13      	ldr	r2, [pc, #76]	@ (800828c <TIM_Base_SetConfig+0x158>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d103      	bne.n	800824c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	691a      	ldr	r2, [r3, #16]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b01      	cmp	r3, #1
 800825c:	d105      	bne.n	800826a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	f023 0201 	bic.w	r2, r3, #1
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	611a      	str	r2, [r3, #16]
  }
}
 800826a:	bf00      	nop
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	40012c00 	.word	0x40012c00
 800827c:	40000400 	.word	0x40000400
 8008280:	40000800 	.word	0x40000800
 8008284:	40000c00 	.word	0x40000c00
 8008288:	40013400 	.word	0x40013400
 800828c:	40015000 	.word	0x40015000
 8008290:	40014000 	.word	0x40014000
 8008294:	40014400 	.word	0x40014400
 8008298:	40014800 	.word	0x40014800

0800829c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	f023 0201 	bic.w	r2, r3, #1
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f023 0303 	bic.w	r3, r3, #3
 80082d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	4313      	orrs	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f023 0302 	bic.w	r3, r3, #2
 80082e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a30      	ldr	r2, [pc, #192]	@ (80083b8 <TIM_OC1_SetConfig+0x11c>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d013      	beq.n	8008324 <TIM_OC1_SetConfig+0x88>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a2f      	ldr	r2, [pc, #188]	@ (80083bc <TIM_OC1_SetConfig+0x120>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d00f      	beq.n	8008324 <TIM_OC1_SetConfig+0x88>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a2e      	ldr	r2, [pc, #184]	@ (80083c0 <TIM_OC1_SetConfig+0x124>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00b      	beq.n	8008324 <TIM_OC1_SetConfig+0x88>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a2d      	ldr	r2, [pc, #180]	@ (80083c4 <TIM_OC1_SetConfig+0x128>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d007      	beq.n	8008324 <TIM_OC1_SetConfig+0x88>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a2c      	ldr	r2, [pc, #176]	@ (80083c8 <TIM_OC1_SetConfig+0x12c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d003      	beq.n	8008324 <TIM_OC1_SetConfig+0x88>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a2b      	ldr	r2, [pc, #172]	@ (80083cc <TIM_OC1_SetConfig+0x130>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d10c      	bne.n	800833e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f023 0308 	bic.w	r3, r3, #8
 800832a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	4313      	orrs	r3, r2
 8008334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f023 0304 	bic.w	r3, r3, #4
 800833c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a1d      	ldr	r2, [pc, #116]	@ (80083b8 <TIM_OC1_SetConfig+0x11c>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d013      	beq.n	800836e <TIM_OC1_SetConfig+0xd2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a1c      	ldr	r2, [pc, #112]	@ (80083bc <TIM_OC1_SetConfig+0x120>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d00f      	beq.n	800836e <TIM_OC1_SetConfig+0xd2>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a1b      	ldr	r2, [pc, #108]	@ (80083c0 <TIM_OC1_SetConfig+0x124>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d00b      	beq.n	800836e <TIM_OC1_SetConfig+0xd2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a1a      	ldr	r2, [pc, #104]	@ (80083c4 <TIM_OC1_SetConfig+0x128>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d007      	beq.n	800836e <TIM_OC1_SetConfig+0xd2>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a19      	ldr	r2, [pc, #100]	@ (80083c8 <TIM_OC1_SetConfig+0x12c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d003      	beq.n	800836e <TIM_OC1_SetConfig+0xd2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a18      	ldr	r2, [pc, #96]	@ (80083cc <TIM_OC1_SetConfig+0x130>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d111      	bne.n	8008392 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800837c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	4313      	orrs	r3, r2
 8008386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	621a      	str	r2, [r3, #32]
}
 80083ac:	bf00      	nop
 80083ae:	371c      	adds	r7, #28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	40012c00 	.word	0x40012c00
 80083bc:	40013400 	.word	0x40013400
 80083c0:	40014000 	.word	0x40014000
 80083c4:	40014400 	.word	0x40014400
 80083c8:	40014800 	.word	0x40014800
 80083cc:	40015000 	.word	0x40015000

080083d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	f023 0210 	bic.w	r2, r3, #16
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800840a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	021b      	lsls	r3, r3, #8
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	4313      	orrs	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f023 0320 	bic.w	r3, r3, #32
 800841e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	011b      	lsls	r3, r3, #4
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	4313      	orrs	r3, r2
 800842a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a2c      	ldr	r2, [pc, #176]	@ (80084e0 <TIM_OC2_SetConfig+0x110>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d007      	beq.n	8008444 <TIM_OC2_SetConfig+0x74>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a2b      	ldr	r2, [pc, #172]	@ (80084e4 <TIM_OC2_SetConfig+0x114>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d003      	beq.n	8008444 <TIM_OC2_SetConfig+0x74>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a2a      	ldr	r2, [pc, #168]	@ (80084e8 <TIM_OC2_SetConfig+0x118>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d10d      	bne.n	8008460 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800844a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	4313      	orrs	r3, r2
 8008456:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800845e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a1f      	ldr	r2, [pc, #124]	@ (80084e0 <TIM_OC2_SetConfig+0x110>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d013      	beq.n	8008490 <TIM_OC2_SetConfig+0xc0>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a1e      	ldr	r2, [pc, #120]	@ (80084e4 <TIM_OC2_SetConfig+0x114>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d00f      	beq.n	8008490 <TIM_OC2_SetConfig+0xc0>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a1e      	ldr	r2, [pc, #120]	@ (80084ec <TIM_OC2_SetConfig+0x11c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d00b      	beq.n	8008490 <TIM_OC2_SetConfig+0xc0>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a1d      	ldr	r2, [pc, #116]	@ (80084f0 <TIM_OC2_SetConfig+0x120>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d007      	beq.n	8008490 <TIM_OC2_SetConfig+0xc0>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a1c      	ldr	r2, [pc, #112]	@ (80084f4 <TIM_OC2_SetConfig+0x124>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d003      	beq.n	8008490 <TIM_OC2_SetConfig+0xc0>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a17      	ldr	r2, [pc, #92]	@ (80084e8 <TIM_OC2_SetConfig+0x118>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d113      	bne.n	80084b8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008496:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800849e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	621a      	str	r2, [r3, #32]
}
 80084d2:	bf00      	nop
 80084d4:	371c      	adds	r7, #28
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	40012c00 	.word	0x40012c00
 80084e4:	40013400 	.word	0x40013400
 80084e8:	40015000 	.word	0x40015000
 80084ec:	40014000 	.word	0x40014000
 80084f0:	40014400 	.word	0x40014400
 80084f4:	40014800 	.word	0x40014800

080084f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800852a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f023 0303 	bic.w	r3, r3, #3
 8008532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	021b      	lsls	r3, r3, #8
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	4313      	orrs	r3, r2
 8008550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a2b      	ldr	r2, [pc, #172]	@ (8008604 <TIM_OC3_SetConfig+0x10c>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d007      	beq.n	800856a <TIM_OC3_SetConfig+0x72>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a2a      	ldr	r2, [pc, #168]	@ (8008608 <TIM_OC3_SetConfig+0x110>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d003      	beq.n	800856a <TIM_OC3_SetConfig+0x72>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a29      	ldr	r2, [pc, #164]	@ (800860c <TIM_OC3_SetConfig+0x114>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d10d      	bne.n	8008586 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	021b      	lsls	r3, r3, #8
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	4313      	orrs	r3, r2
 800857c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a1e      	ldr	r2, [pc, #120]	@ (8008604 <TIM_OC3_SetConfig+0x10c>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d013      	beq.n	80085b6 <TIM_OC3_SetConfig+0xbe>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a1d      	ldr	r2, [pc, #116]	@ (8008608 <TIM_OC3_SetConfig+0x110>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d00f      	beq.n	80085b6 <TIM_OC3_SetConfig+0xbe>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a1d      	ldr	r2, [pc, #116]	@ (8008610 <TIM_OC3_SetConfig+0x118>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d00b      	beq.n	80085b6 <TIM_OC3_SetConfig+0xbe>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a1c      	ldr	r2, [pc, #112]	@ (8008614 <TIM_OC3_SetConfig+0x11c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d007      	beq.n	80085b6 <TIM_OC3_SetConfig+0xbe>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008618 <TIM_OC3_SetConfig+0x120>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d003      	beq.n	80085b6 <TIM_OC3_SetConfig+0xbe>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a16      	ldr	r2, [pc, #88]	@ (800860c <TIM_OC3_SetConfig+0x114>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d113      	bne.n	80085de <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	011b      	lsls	r3, r3, #4
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	4313      	orrs	r3, r2
 80085dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	621a      	str	r2, [r3, #32]
}
 80085f8:	bf00      	nop
 80085fa:	371c      	adds	r7, #28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	40012c00 	.word	0x40012c00
 8008608:	40013400 	.word	0x40013400
 800860c:	40015000 	.word	0x40015000
 8008610:	40014000 	.word	0x40014000
 8008614:	40014400 	.word	0x40014400
 8008618:	40014800 	.word	0x40014800

0800861c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800864a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800864e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	021b      	lsls	r3, r3, #8
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4313      	orrs	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800866a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	031b      	lsls	r3, r3, #12
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a2c      	ldr	r2, [pc, #176]	@ (800872c <TIM_OC4_SetConfig+0x110>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d007      	beq.n	8008690 <TIM_OC4_SetConfig+0x74>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a2b      	ldr	r2, [pc, #172]	@ (8008730 <TIM_OC4_SetConfig+0x114>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d003      	beq.n	8008690 <TIM_OC4_SetConfig+0x74>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a2a      	ldr	r2, [pc, #168]	@ (8008734 <TIM_OC4_SetConfig+0x118>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d10d      	bne.n	80086ac <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	031b      	lsls	r3, r3, #12
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a1f      	ldr	r2, [pc, #124]	@ (800872c <TIM_OC4_SetConfig+0x110>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d013      	beq.n	80086dc <TIM_OC4_SetConfig+0xc0>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a1e      	ldr	r2, [pc, #120]	@ (8008730 <TIM_OC4_SetConfig+0x114>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d00f      	beq.n	80086dc <TIM_OC4_SetConfig+0xc0>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a1e      	ldr	r2, [pc, #120]	@ (8008738 <TIM_OC4_SetConfig+0x11c>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d00b      	beq.n	80086dc <TIM_OC4_SetConfig+0xc0>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a1d      	ldr	r2, [pc, #116]	@ (800873c <TIM_OC4_SetConfig+0x120>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d007      	beq.n	80086dc <TIM_OC4_SetConfig+0xc0>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008740 <TIM_OC4_SetConfig+0x124>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d003      	beq.n	80086dc <TIM_OC4_SetConfig+0xc0>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a17      	ldr	r2, [pc, #92]	@ (8008734 <TIM_OC4_SetConfig+0x118>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d113      	bne.n	8008704 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086e2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086ea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	019b      	lsls	r3, r3, #6
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	019b      	lsls	r3, r3, #6
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	4313      	orrs	r3, r2
 8008702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	685a      	ldr	r2, [r3, #4]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	621a      	str	r2, [r3, #32]
}
 800871e:	bf00      	nop
 8008720:	371c      	adds	r7, #28
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	40012c00 	.word	0x40012c00
 8008730:	40013400 	.word	0x40013400
 8008734:	40015000 	.word	0x40015000
 8008738:	40014000 	.word	0x40014000
 800873c:	40014400 	.word	0x40014400
 8008740:	40014800 	.word	0x40014800

08008744 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800876a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4313      	orrs	r3, r2
 8008780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008788:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	041b      	lsls	r3, r3, #16
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	4313      	orrs	r3, r2
 8008794:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a19      	ldr	r2, [pc, #100]	@ (8008800 <TIM_OC5_SetConfig+0xbc>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d013      	beq.n	80087c6 <TIM_OC5_SetConfig+0x82>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a18      	ldr	r2, [pc, #96]	@ (8008804 <TIM_OC5_SetConfig+0xc0>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d00f      	beq.n	80087c6 <TIM_OC5_SetConfig+0x82>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a17      	ldr	r2, [pc, #92]	@ (8008808 <TIM_OC5_SetConfig+0xc4>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d00b      	beq.n	80087c6 <TIM_OC5_SetConfig+0x82>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a16      	ldr	r2, [pc, #88]	@ (800880c <TIM_OC5_SetConfig+0xc8>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d007      	beq.n	80087c6 <TIM_OC5_SetConfig+0x82>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a15      	ldr	r2, [pc, #84]	@ (8008810 <TIM_OC5_SetConfig+0xcc>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d003      	beq.n	80087c6 <TIM_OC5_SetConfig+0x82>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a14      	ldr	r2, [pc, #80]	@ (8008814 <TIM_OC5_SetConfig+0xd0>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d109      	bne.n	80087da <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	021b      	lsls	r3, r3, #8
 80087d4:	697a      	ldr	r2, [r7, #20]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	621a      	str	r2, [r3, #32]
}
 80087f4:	bf00      	nop
 80087f6:	371c      	adds	r7, #28
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	40012c00 	.word	0x40012c00
 8008804:	40013400 	.word	0x40013400
 8008808:	40014000 	.word	0x40014000
 800880c:	40014400 	.word	0x40014400
 8008810:	40014800 	.word	0x40014800
 8008814:	40015000 	.word	0x40015000

08008818 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a1b      	ldr	r3, [r3, #32]
 800882c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800883e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800884a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	021b      	lsls	r3, r3, #8
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	4313      	orrs	r3, r2
 8008856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800885e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	051b      	lsls	r3, r3, #20
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	4313      	orrs	r3, r2
 800886a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a1a      	ldr	r2, [pc, #104]	@ (80088d8 <TIM_OC6_SetConfig+0xc0>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d013      	beq.n	800889c <TIM_OC6_SetConfig+0x84>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a19      	ldr	r2, [pc, #100]	@ (80088dc <TIM_OC6_SetConfig+0xc4>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d00f      	beq.n	800889c <TIM_OC6_SetConfig+0x84>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a18      	ldr	r2, [pc, #96]	@ (80088e0 <TIM_OC6_SetConfig+0xc8>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d00b      	beq.n	800889c <TIM_OC6_SetConfig+0x84>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a17      	ldr	r2, [pc, #92]	@ (80088e4 <TIM_OC6_SetConfig+0xcc>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d007      	beq.n	800889c <TIM_OC6_SetConfig+0x84>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a16      	ldr	r2, [pc, #88]	@ (80088e8 <TIM_OC6_SetConfig+0xd0>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d003      	beq.n	800889c <TIM_OC6_SetConfig+0x84>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a15      	ldr	r2, [pc, #84]	@ (80088ec <TIM_OC6_SetConfig+0xd4>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d109      	bne.n	80088b0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80088a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	695b      	ldr	r3, [r3, #20]
 80088a8:	029b      	lsls	r3, r3, #10
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	685a      	ldr	r2, [r3, #4]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	621a      	str	r2, [r3, #32]
}
 80088ca:	bf00      	nop
 80088cc:	371c      	adds	r7, #28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	40012c00 	.word	0x40012c00
 80088dc:	40013400 	.word	0x40013400
 80088e0:	40014000 	.word	0x40014000
 80088e4:	40014400 	.word	0x40014400
 80088e8:	40014800 	.word	0x40014800
 80088ec:	40015000 	.word	0x40015000

080088f0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800890c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008910:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	4313      	orrs	r3, r2
 800891a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008922:	f023 0307 	bic.w	r3, r3, #7
 8008926:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	4313      	orrs	r3, r2
 8008930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	4a56      	ldr	r2, [pc, #344]	@ (8008a98 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8008940:	4293      	cmp	r3, r2
 8008942:	f000 80a2 	beq.w	8008a8a <TIM_SlaveTimer_SetConfig+0x19a>
 8008946:	4a54      	ldr	r2, [pc, #336]	@ (8008a98 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8008948:	4293      	cmp	r3, r2
 800894a:	f200 809b 	bhi.w	8008a84 <TIM_SlaveTimer_SetConfig+0x194>
 800894e:	4a53      	ldr	r2, [pc, #332]	@ (8008a9c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8008950:	4293      	cmp	r3, r2
 8008952:	f000 809a 	beq.w	8008a8a <TIM_SlaveTimer_SetConfig+0x19a>
 8008956:	4a51      	ldr	r2, [pc, #324]	@ (8008a9c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8008958:	4293      	cmp	r3, r2
 800895a:	f200 8093 	bhi.w	8008a84 <TIM_SlaveTimer_SetConfig+0x194>
 800895e:	4a50      	ldr	r2, [pc, #320]	@ (8008aa0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8008960:	4293      	cmp	r3, r2
 8008962:	f000 8092 	beq.w	8008a8a <TIM_SlaveTimer_SetConfig+0x19a>
 8008966:	4a4e      	ldr	r2, [pc, #312]	@ (8008aa0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8008968:	4293      	cmp	r3, r2
 800896a:	f200 808b 	bhi.w	8008a84 <TIM_SlaveTimer_SetConfig+0x194>
 800896e:	4a4d      	ldr	r2, [pc, #308]	@ (8008aa4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008970:	4293      	cmp	r3, r2
 8008972:	f000 808a 	beq.w	8008a8a <TIM_SlaveTimer_SetConfig+0x19a>
 8008976:	4a4b      	ldr	r2, [pc, #300]	@ (8008aa4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008978:	4293      	cmp	r3, r2
 800897a:	f200 8083 	bhi.w	8008a84 <TIM_SlaveTimer_SetConfig+0x194>
 800897e:	4a4a      	ldr	r2, [pc, #296]	@ (8008aa8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008980:	4293      	cmp	r3, r2
 8008982:	f000 8082 	beq.w	8008a8a <TIM_SlaveTimer_SetConfig+0x19a>
 8008986:	4a48      	ldr	r2, [pc, #288]	@ (8008aa8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d87b      	bhi.n	8008a84 <TIM_SlaveTimer_SetConfig+0x194>
 800898c:	4a47      	ldr	r2, [pc, #284]	@ (8008aac <TIM_SlaveTimer_SetConfig+0x1bc>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d07b      	beq.n	8008a8a <TIM_SlaveTimer_SetConfig+0x19a>
 8008992:	4a46      	ldr	r2, [pc, #280]	@ (8008aac <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d875      	bhi.n	8008a84 <TIM_SlaveTimer_SetConfig+0x194>
 8008998:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800899c:	d075      	beq.n	8008a8a <TIM_SlaveTimer_SetConfig+0x19a>
 800899e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80089a2:	d86f      	bhi.n	8008a84 <TIM_SlaveTimer_SetConfig+0x194>
 80089a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089a8:	d06f      	beq.n	8008a8a <TIM_SlaveTimer_SetConfig+0x19a>
 80089aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089ae:	d869      	bhi.n	8008a84 <TIM_SlaveTimer_SetConfig+0x194>
 80089b0:	2b70      	cmp	r3, #112	@ 0x70
 80089b2:	d01a      	beq.n	80089ea <TIM_SlaveTimer_SetConfig+0xfa>
 80089b4:	2b70      	cmp	r3, #112	@ 0x70
 80089b6:	d865      	bhi.n	8008a84 <TIM_SlaveTimer_SetConfig+0x194>
 80089b8:	2b60      	cmp	r3, #96	@ 0x60
 80089ba:	d059      	beq.n	8008a70 <TIM_SlaveTimer_SetConfig+0x180>
 80089bc:	2b60      	cmp	r3, #96	@ 0x60
 80089be:	d861      	bhi.n	8008a84 <TIM_SlaveTimer_SetConfig+0x194>
 80089c0:	2b50      	cmp	r3, #80	@ 0x50
 80089c2:	d04b      	beq.n	8008a5c <TIM_SlaveTimer_SetConfig+0x16c>
 80089c4:	2b50      	cmp	r3, #80	@ 0x50
 80089c6:	d85d      	bhi.n	8008a84 <TIM_SlaveTimer_SetConfig+0x194>
 80089c8:	2b40      	cmp	r3, #64	@ 0x40
 80089ca:	d019      	beq.n	8008a00 <TIM_SlaveTimer_SetConfig+0x110>
 80089cc:	2b40      	cmp	r3, #64	@ 0x40
 80089ce:	d859      	bhi.n	8008a84 <TIM_SlaveTimer_SetConfig+0x194>
 80089d0:	2b30      	cmp	r3, #48	@ 0x30
 80089d2:	d05a      	beq.n	8008a8a <TIM_SlaveTimer_SetConfig+0x19a>
 80089d4:	2b30      	cmp	r3, #48	@ 0x30
 80089d6:	d855      	bhi.n	8008a84 <TIM_SlaveTimer_SetConfig+0x194>
 80089d8:	2b20      	cmp	r3, #32
 80089da:	d056      	beq.n	8008a8a <TIM_SlaveTimer_SetConfig+0x19a>
 80089dc:	2b20      	cmp	r3, #32
 80089de:	d851      	bhi.n	8008a84 <TIM_SlaveTimer_SetConfig+0x194>
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d052      	beq.n	8008a8a <TIM_SlaveTimer_SetConfig+0x19a>
 80089e4:	2b10      	cmp	r3, #16
 80089e6:	d050      	beq.n	8008a8a <TIM_SlaveTimer_SetConfig+0x19a>
 80089e8:	e04c      	b.n	8008a84 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80089fa:	f000 f9ff 	bl	8008dfc <TIM_ETR_SetConfig>
      break;
 80089fe:	e045      	b.n	8008a8c <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b05      	cmp	r3, #5
 8008a06:	d004      	beq.n	8008a12 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008a0c:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8008a10:	d101      	bne.n	8008a16 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e03b      	b.n	8008a8e <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6a1b      	ldr	r3, [r3, #32]
 8008a1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6a1a      	ldr	r2, [r3, #32]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f022 0201 	bic.w	r2, r2, #1
 8008a2c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a3c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	011b      	lsls	r3, r3, #4
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	621a      	str	r2, [r3, #32]
      break;
 8008a5a:	e017      	b.n	8008a8c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a68:	461a      	mov	r2, r3
 8008a6a:	f000 f895 	bl	8008b98 <TIM_TI1_ConfigInputStage>
      break;
 8008a6e:	e00d      	b.n	8008a8c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	f000 f8f7 	bl	8008c70 <TIM_TI2_ConfigInputStage>
      break;
 8008a82:	e003      	b.n	8008a8c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	75fb      	strb	r3, [r7, #23]
      break;
 8008a88:	e000      	b.n	8008a8c <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8008a8a:	bf00      	nop
  }

  return status;
 8008a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	00100070 	.word	0x00100070
 8008a9c:	00100060 	.word	0x00100060
 8008aa0:	00100050 	.word	0x00100050
 8008aa4:	00100040 	.word	0x00100040
 8008aa8:	00100030 	.word	0x00100030
 8008aac:	00100020 	.word	0x00100020

08008ab0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	f023 0201 	bic.w	r2, r3, #1
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	4a28      	ldr	r2, [pc, #160]	@ (8008b7c <TIM_TI1_SetConfig+0xcc>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d01b      	beq.n	8008b16 <TIM_TI1_SetConfig+0x66>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ae4:	d017      	beq.n	8008b16 <TIM_TI1_SetConfig+0x66>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4a25      	ldr	r2, [pc, #148]	@ (8008b80 <TIM_TI1_SetConfig+0xd0>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d013      	beq.n	8008b16 <TIM_TI1_SetConfig+0x66>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4a24      	ldr	r2, [pc, #144]	@ (8008b84 <TIM_TI1_SetConfig+0xd4>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d00f      	beq.n	8008b16 <TIM_TI1_SetConfig+0x66>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	4a23      	ldr	r2, [pc, #140]	@ (8008b88 <TIM_TI1_SetConfig+0xd8>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d00b      	beq.n	8008b16 <TIM_TI1_SetConfig+0x66>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	4a22      	ldr	r2, [pc, #136]	@ (8008b8c <TIM_TI1_SetConfig+0xdc>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d007      	beq.n	8008b16 <TIM_TI1_SetConfig+0x66>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	4a21      	ldr	r2, [pc, #132]	@ (8008b90 <TIM_TI1_SetConfig+0xe0>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d003      	beq.n	8008b16 <TIM_TI1_SetConfig+0x66>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	4a20      	ldr	r2, [pc, #128]	@ (8008b94 <TIM_TI1_SetConfig+0xe4>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d101      	bne.n	8008b1a <TIM_TI1_SetConfig+0x6a>
 8008b16:	2301      	movs	r3, #1
 8008b18:	e000      	b.n	8008b1c <TIM_TI1_SetConfig+0x6c>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d008      	beq.n	8008b32 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f023 0303 	bic.w	r3, r3, #3
 8008b26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	e003      	b.n	8008b3a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f043 0301 	orr.w	r3, r3, #1
 8008b38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	011b      	lsls	r3, r3, #4
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f023 030a 	bic.w	r3, r3, #10
 8008b54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	f003 030a 	and.w	r3, r3, #10
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	621a      	str	r2, [r3, #32]
}
 8008b6e:	bf00      	nop
 8008b70:	371c      	adds	r7, #28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	40012c00 	.word	0x40012c00
 8008b80:	40000400 	.word	0x40000400
 8008b84:	40000800 	.word	0x40000800
 8008b88:	40000c00 	.word	0x40000c00
 8008b8c:	40013400 	.word	0x40013400
 8008b90:	40014000 	.word	0x40014000
 8008b94:	40015000 	.word	0x40015000

08008b98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6a1b      	ldr	r3, [r3, #32]
 8008ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6a1b      	ldr	r3, [r3, #32]
 8008bae:	f023 0201 	bic.w	r2, r3, #1
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	011b      	lsls	r3, r3, #4
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	f023 030a 	bic.w	r3, r3, #10
 8008bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	621a      	str	r2, [r3, #32]
}
 8008bea:	bf00      	nop
 8008bec:	371c      	adds	r7, #28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b087      	sub	sp, #28
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	607a      	str	r2, [r7, #4]
 8008c02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6a1b      	ldr	r3, [r3, #32]
 8008c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	f023 0210 	bic.w	r2, r3, #16
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	021b      	lsls	r3, r3, #8
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	031b      	lsls	r3, r3, #12
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c48:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	011b      	lsls	r3, r3, #4
 8008c4e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	621a      	str	r2, [r3, #32]
}
 8008c64:	bf00      	nop
 8008c66:	371c      	adds	r7, #28
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	f023 0210 	bic.w	r2, r3, #16
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	031b      	lsls	r3, r3, #12
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008cac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	011b      	lsls	r3, r3, #4
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	621a      	str	r2, [r3, #32]
}
 8008cc4:	bf00      	nop
 8008cc6:	371c      	adds	r7, #28
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6a1b      	ldr	r3, [r3, #32]
 8008ce8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	f023 0303 	bic.w	r3, r3, #3
 8008cfc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d0c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	011b      	lsls	r3, r3, #4
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008d20:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	021b      	lsls	r3, r3, #8
 8008d26:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	621a      	str	r2, [r3, #32]
}
 8008d3c:	bf00      	nop
 8008d3e:	371c      	adds	r7, #28
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
 8008d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6a1b      	ldr	r3, [r3, #32]
 8008d60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d74:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	021b      	lsls	r3, r3, #8
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d86:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	031b      	lsls	r3, r3, #12
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008d9a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	031b      	lsls	r3, r3, #12
 8008da0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008da4:	697a      	ldr	r2, [r7, #20]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	621a      	str	r2, [r3, #32]
}
 8008db6:	bf00      	nop
 8008db8:	371c      	adds	r7, #28
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b085      	sub	sp, #20
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	f043 0307 	orr.w	r3, r3, #7
 8008de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	609a      	str	r2, [r3, #8]
}
 8008df0:	bf00      	nop
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b087      	sub	sp, #28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
 8008e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	021a      	lsls	r2, r3, #8
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	609a      	str	r2, [r3, #8]
}
 8008e30:	bf00      	nop
 8008e32:	371c      	adds	r7, #28
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	f003 031f 	and.w	r3, r3, #31
 8008e4e:	2201      	movs	r2, #1
 8008e50:	fa02 f303 	lsl.w	r3, r2, r3
 8008e54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6a1a      	ldr	r2, [r3, #32]
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	43db      	mvns	r3, r3
 8008e5e:	401a      	ands	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6a1a      	ldr	r2, [r3, #32]
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	f003 031f 	and.w	r3, r3, #31
 8008e6e:	6879      	ldr	r1, [r7, #4]
 8008e70:	fa01 f303 	lsl.w	r3, r1, r3
 8008e74:	431a      	orrs	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	621a      	str	r2, [r3, #32]
}
 8008e7a:	bf00      	nop
 8008e7c:	371c      	adds	r7, #28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
	...

08008e88 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a26      	ldr	r2, [pc, #152]	@ (8008f2c <TIM_ResetCallback+0xa4>)
 8008e94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a25      	ldr	r2, [pc, #148]	@ (8008f30 <TIM_ResetCallback+0xa8>)
 8008e9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a24      	ldr	r2, [pc, #144]	@ (8008f34 <TIM_ResetCallback+0xac>)
 8008ea4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a23      	ldr	r2, [pc, #140]	@ (8008f38 <TIM_ResetCallback+0xb0>)
 8008eac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a22      	ldr	r2, [pc, #136]	@ (8008f3c <TIM_ResetCallback+0xb4>)
 8008eb4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a21      	ldr	r2, [pc, #132]	@ (8008f40 <TIM_ResetCallback+0xb8>)
 8008ebc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a20      	ldr	r2, [pc, #128]	@ (8008f44 <TIM_ResetCallback+0xbc>)
 8008ec4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a1f      	ldr	r2, [pc, #124]	@ (8008f48 <TIM_ResetCallback+0xc0>)
 8008ecc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8008f4c <TIM_ResetCallback+0xc4>)
 8008ed4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a1d      	ldr	r2, [pc, #116]	@ (8008f50 <TIM_ResetCallback+0xc8>)
 8008edc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8008f54 <TIM_ResetCallback+0xcc>)
 8008ee4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a1b      	ldr	r2, [pc, #108]	@ (8008f58 <TIM_ResetCallback+0xd0>)
 8008eec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8008f5c <TIM_ResetCallback+0xd4>)
 8008ef4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a19      	ldr	r2, [pc, #100]	@ (8008f60 <TIM_ResetCallback+0xd8>)
 8008efc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a18      	ldr	r2, [pc, #96]	@ (8008f64 <TIM_ResetCallback+0xdc>)
 8008f04:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a17      	ldr	r2, [pc, #92]	@ (8008f68 <TIM_ResetCallback+0xe0>)
 8008f0c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a16      	ldr	r2, [pc, #88]	@ (8008f6c <TIM_ResetCallback+0xe4>)
 8008f14:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a15      	ldr	r2, [pc, #84]	@ (8008f70 <TIM_ResetCallback+0xe8>)
 8008f1c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	08003cfd 	.word	0x08003cfd
 8008f30:	08007dc1 	.word	0x08007dc1
 8008f34:	08007e39 	.word	0x08007e39
 8008f38:	08007e4d 	.word	0x08007e4d
 8008f3c:	08007de9 	.word	0x08007de9
 8008f40:	08007dfd 	.word	0x08007dfd
 8008f44:	08007dd5 	.word	0x08007dd5
 8008f48:	08007e11 	.word	0x08007e11
 8008f4c:	08007e25 	.word	0x08007e25
 8008f50:	08007e61 	.word	0x08007e61
 8008f54:	080091c9 	.word	0x080091c9
 8008f58:	080091dd 	.word	0x080091dd
 8008f5c:	080091f1 	.word	0x080091f1
 8008f60:	08009205 	.word	0x08009205
 8008f64:	08009219 	.word	0x08009219
 8008f68:	0800922d 	.word	0x0800922d
 8008f6c:	08009241 	.word	0x08009241
 8008f70:	08009255 	.word	0x08009255

08008f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d101      	bne.n	8008f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e074      	b.n	8009076 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2202      	movs	r2, #2
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a34      	ldr	r2, [pc, #208]	@ (8009084 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d009      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a33      	ldr	r2, [pc, #204]	@ (8009088 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d004      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a31      	ldr	r2, [pc, #196]	@ (800908c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d108      	bne.n	8008fdc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008fd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a21      	ldr	r2, [pc, #132]	@ (8009084 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d022      	beq.n	800904a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800900c:	d01d      	beq.n	800904a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a1f      	ldr	r2, [pc, #124]	@ (8009090 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d018      	beq.n	800904a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a1d      	ldr	r2, [pc, #116]	@ (8009094 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d013      	beq.n	800904a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a1c      	ldr	r2, [pc, #112]	@ (8009098 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d00e      	beq.n	800904a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a15      	ldr	r2, [pc, #84]	@ (8009088 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d009      	beq.n	800904a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a18      	ldr	r2, [pc, #96]	@ (800909c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d004      	beq.n	800904a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a11      	ldr	r2, [pc, #68]	@ (800908c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d10c      	bne.n	8009064 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	4313      	orrs	r3, r2
 800905a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	40012c00 	.word	0x40012c00
 8009088:	40013400 	.word	0x40013400
 800908c:	40015000 	.word	0x40015000
 8009090:	40000400 	.word	0x40000400
 8009094:	40000800 	.word	0x40000800
 8009098:	40000c00 	.word	0x40000c00
 800909c:	40014000 	.word	0x40014000

080090a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090aa:	2300      	movs	r3, #0
 80090ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d101      	bne.n	80090bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090b8:	2302      	movs	r3, #2
 80090ba:	e078      	b.n	80091ae <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	4313      	orrs	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	4313      	orrs	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	4313      	orrs	r3, r2
 8009116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009122:	4313      	orrs	r3, r2
 8009124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	041b      	lsls	r3, r3, #16
 8009132:	4313      	orrs	r3, r2
 8009134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	4313      	orrs	r3, r2
 8009142:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a1c      	ldr	r2, [pc, #112]	@ (80091bc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d009      	beq.n	8009162 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a1b      	ldr	r2, [pc, #108]	@ (80091c0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d004      	beq.n	8009162 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a19      	ldr	r2, [pc, #100]	@ (80091c4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d11c      	bne.n	800919c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916c:	051b      	lsls	r3, r3, #20
 800916e:	4313      	orrs	r3, r2
 8009170:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	4313      	orrs	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918a:	4313      	orrs	r3, r2
 800918c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009198:	4313      	orrs	r3, r2
 800919a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	40012c00 	.word	0x40012c00
 80091c0:	40013400 	.word	0x40013400
 80091c4:	40015000 	.word	0x40015000

080091c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e050      	b.n	800931c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009280:	2b00      	cmp	r3, #0
 8009282:	d114      	bne.n	80092ae <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fde5 	bl	8009e5c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009298:	2b00      	cmp	r3, #0
 800929a:	d103      	bne.n	80092a4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a21      	ldr	r2, [pc, #132]	@ (8009324 <HAL_UART_Init+0xbc>)
 80092a0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2224      	movs	r2, #36	@ 0x24
 80092b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 0201 	bic.w	r2, r2, #1
 80092c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d002      	beq.n	80092d4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f001 f912 	bl	800a4f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fe13 	bl	8009f00 <UART_SetConfig>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d101      	bne.n	80092e4 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e01b      	b.n	800931c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	685a      	ldr	r2, [r3, #4]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80092f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689a      	ldr	r2, [r3, #8]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f042 0201 	orr.w	r2, r2, #1
 8009312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f001 f991 	bl	800a63c <UART_CheckIdleState>
 800931a:	4603      	mov	r3, r0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	08004755 	.word	0x08004755

08009328 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009328:	b480      	push	{r7}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	460b      	mov	r3, r1
 8009332:	607a      	str	r2, [r7, #4]
 8009334:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d109      	bne.n	8009354 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009346:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e09c      	b.n	800948e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800935a:	2b20      	cmp	r3, #32
 800935c:	d16c      	bne.n	8009438 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800935e:	7afb      	ldrb	r3, [r7, #11]
 8009360:	2b0c      	cmp	r3, #12
 8009362:	d85e      	bhi.n	8009422 <HAL_UART_RegisterCallback+0xfa>
 8009364:	a201      	add	r2, pc, #4	@ (adr r2, 800936c <HAL_UART_RegisterCallback+0x44>)
 8009366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936a:	bf00      	nop
 800936c:	080093a1 	.word	0x080093a1
 8009370:	080093ab 	.word	0x080093ab
 8009374:	080093b5 	.word	0x080093b5
 8009378:	080093bf 	.word	0x080093bf
 800937c:	080093c9 	.word	0x080093c9
 8009380:	080093d3 	.word	0x080093d3
 8009384:	080093dd 	.word	0x080093dd
 8009388:	080093e7 	.word	0x080093e7
 800938c:	080093f1 	.word	0x080093f1
 8009390:	080093fb 	.word	0x080093fb
 8009394:	08009405 	.word	0x08009405
 8009398:	0800940f 	.word	0x0800940f
 800939c:	08009419 	.word	0x08009419
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80093a8:	e070      	b.n	800948c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80093b2:	e06b      	b.n	800948c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80093bc:	e066      	b.n	800948c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80093c6:	e061      	b.n	800948c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80093d0:	e05c      	b.n	800948c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80093da:	e057      	b.n	800948c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80093e4:	e052      	b.n	800948c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80093ee:	e04d      	b.n	800948c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80093f8:	e048      	b.n	800948c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009402:	e043      	b.n	800948c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800940c:	e03e      	b.n	800948c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009416:	e039      	b.n	800948c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009420:	e034      	b.n	800948c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009428:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	75fb      	strb	r3, [r7, #23]
        break;
 8009436:	e029      	b.n	800948c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800943e:	2b00      	cmp	r3, #0
 8009440:	d11a      	bne.n	8009478 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009442:	7afb      	ldrb	r3, [r7, #11]
 8009444:	2b0b      	cmp	r3, #11
 8009446:	d002      	beq.n	800944e <HAL_UART_RegisterCallback+0x126>
 8009448:	2b0c      	cmp	r3, #12
 800944a:	d005      	beq.n	8009458 <HAL_UART_RegisterCallback+0x130>
 800944c:	e009      	b.n	8009462 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009456:	e019      	b.n	800948c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009460:	e014      	b.n	800948c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009468:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	75fb      	strb	r3, [r7, #23]
        break;
 8009476:	e009      	b.n	800948c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800947e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800948c:	7dfb      	ldrb	r3, [r7, #23]
}
 800948e:	4618      	mov	r0, r3
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop

0800949c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08a      	sub	sp, #40	@ 0x28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	4613      	mov	r3, r2
 80094a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094b0:	2b20      	cmp	r3, #32
 80094b2:	d167      	bne.n	8009584 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <HAL_UART_Transmit_DMA+0x24>
 80094ba:	88fb      	ldrh	r3, [r7, #6]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	e060      	b.n	8009586 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	88fa      	ldrh	r2, [r7, #6]
 80094ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	88fa      	ldrh	r2, [r7, #6]
 80094d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2221      	movs	r2, #33	@ 0x21
 80094e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d028      	beq.n	8009544 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094f6:	4a26      	ldr	r2, [pc, #152]	@ (8009590 <HAL_UART_Transmit_DMA+0xf4>)
 80094f8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094fe:	4a25      	ldr	r2, [pc, #148]	@ (8009594 <HAL_UART_Transmit_DMA+0xf8>)
 8009500:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009506:	4a24      	ldr	r2, [pc, #144]	@ (8009598 <HAL_UART_Transmit_DMA+0xfc>)
 8009508:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800950e:	2200      	movs	r2, #0
 8009510:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800951a:	4619      	mov	r1, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	3328      	adds	r3, #40	@ 0x28
 8009522:	461a      	mov	r2, r3
 8009524:	88fb      	ldrh	r3, [r7, #6]
 8009526:	f7fb fcd9 	bl	8004edc <HAL_DMA_Start_IT>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d009      	beq.n	8009544 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2210      	movs	r2, #16
 8009534:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2220      	movs	r2, #32
 800953c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e020      	b.n	8009586 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2240      	movs	r2, #64	@ 0x40
 800954a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3308      	adds	r3, #8
 8009552:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	e853 3f00 	ldrex	r3, [r3]
 800955a:	613b      	str	r3, [r7, #16]
   return(result);
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009562:	627b      	str	r3, [r7, #36]	@ 0x24
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3308      	adds	r3, #8
 800956a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800956c:	623a      	str	r2, [r7, #32]
 800956e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009570:	69f9      	ldr	r1, [r7, #28]
 8009572:	6a3a      	ldr	r2, [r7, #32]
 8009574:	e841 2300 	strex	r3, r2, [r1]
 8009578:	61bb      	str	r3, [r7, #24]
   return(result);
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1e5      	bne.n	800954c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	e000      	b.n	8009586 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009584:	2302      	movs	r3, #2
  }
}
 8009586:	4618      	mov	r0, r3
 8009588:	3728      	adds	r7, #40	@ 0x28
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	0800ab07 	.word	0x0800ab07
 8009594:	0800aba5 	.word	0x0800aba5
 8009598:	0800ad3f 	.word	0x0800ad3f

0800959c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b08a      	sub	sp, #40	@ 0x28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	4613      	mov	r3, r2
 80095a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095b0:	2b20      	cmp	r3, #32
 80095b2:	d137      	bne.n	8009624 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d002      	beq.n	80095c0 <HAL_UART_Receive_DMA+0x24>
 80095ba:	88fb      	ldrh	r3, [r7, #6]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e030      	b.n	8009626 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a18      	ldr	r2, [pc, #96]	@ (8009630 <HAL_UART_Receive_DMA+0x94>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d01f      	beq.n	8009614 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d018      	beq.n	8009614 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	e853 3f00 	ldrex	r3, [r3]
 80095ee:	613b      	str	r3, [r7, #16]
   return(result);
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80095f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	461a      	mov	r2, r3
 80095fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009600:	623b      	str	r3, [r7, #32]
 8009602:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009604:	69f9      	ldr	r1, [r7, #28]
 8009606:	6a3a      	ldr	r2, [r7, #32]
 8009608:	e841 2300 	strex	r3, r2, [r1]
 800960c:	61bb      	str	r3, [r7, #24]
   return(result);
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1e6      	bne.n	80095e2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009614:	88fb      	ldrh	r3, [r7, #6]
 8009616:	461a      	mov	r2, r3
 8009618:	68b9      	ldr	r1, [r7, #8]
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f001 f926 	bl	800a86c <UART_Start_Receive_DMA>
 8009620:	4603      	mov	r3, r0
 8009622:	e000      	b.n	8009626 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009624:	2302      	movs	r3, #2
  }
}
 8009626:	4618      	mov	r0, r3
 8009628:	3728      	adds	r7, #40	@ 0x28
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	40008000 	.word	0x40008000

08009634 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b0ba      	sub	sp, #232	@ 0xe8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800965a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800965e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009662:	4013      	ands	r3, r2
 8009664:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009668:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800966c:	2b00      	cmp	r3, #0
 800966e:	d11b      	bne.n	80096a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009674:	f003 0320 	and.w	r3, r3, #32
 8009678:	2b00      	cmp	r3, #0
 800967a:	d015      	beq.n	80096a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800967c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009680:	f003 0320 	and.w	r3, r3, #32
 8009684:	2b00      	cmp	r3, #0
 8009686:	d105      	bne.n	8009694 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800968c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d009      	beq.n	80096a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 8312 	beq.w	8009cc2 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	4798      	blx	r3
      }
      return;
 80096a6:	e30c      	b.n	8009cc2 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80096a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8129 	beq.w	8009904 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80096b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80096b6:	4b90      	ldr	r3, [pc, #576]	@ (80098f8 <HAL_UART_IRQHandler+0x2c4>)
 80096b8:	4013      	ands	r3, r2
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d106      	bne.n	80096cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80096be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80096c2:	4b8e      	ldr	r3, [pc, #568]	@ (80098fc <HAL_UART_IRQHandler+0x2c8>)
 80096c4:	4013      	ands	r3, r2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 811c 	beq.w	8009904 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d011      	beq.n	80096fc <HAL_UART_IRQHandler+0xc8>
 80096d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2201      	movs	r2, #1
 80096ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f2:	f043 0201 	orr.w	r2, r3, #1
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009700:	f003 0302 	and.w	r3, r3, #2
 8009704:	2b00      	cmp	r3, #0
 8009706:	d011      	beq.n	800972c <HAL_UART_IRQHandler+0xf8>
 8009708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00b      	beq.n	800972c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2202      	movs	r2, #2
 800971a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009722:	f043 0204 	orr.w	r2, r3, #4
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800972c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009730:	f003 0304 	and.w	r3, r3, #4
 8009734:	2b00      	cmp	r3, #0
 8009736:	d011      	beq.n	800975c <HAL_UART_IRQHandler+0x128>
 8009738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00b      	beq.n	800975c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2204      	movs	r2, #4
 800974a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009752:	f043 0202 	orr.w	r2, r3, #2
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800975c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009760:	f003 0308 	and.w	r3, r3, #8
 8009764:	2b00      	cmp	r3, #0
 8009766:	d017      	beq.n	8009798 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800976c:	f003 0320 	and.w	r3, r3, #32
 8009770:	2b00      	cmp	r3, #0
 8009772:	d105      	bne.n	8009780 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009774:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009778:	4b5f      	ldr	r3, [pc, #380]	@ (80098f8 <HAL_UART_IRQHandler+0x2c4>)
 800977a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00b      	beq.n	8009798 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2208      	movs	r2, #8
 8009786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800978e:	f043 0208 	orr.w	r2, r3, #8
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800979c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d012      	beq.n	80097ca <HAL_UART_IRQHandler+0x196>
 80097a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00c      	beq.n	80097ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097c0:	f043 0220 	orr.w	r2, r3, #32
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 8278 	beq.w	8009cc6 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097da:	f003 0320 	and.w	r3, r3, #32
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d013      	beq.n	800980a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097e6:	f003 0320 	and.w	r3, r3, #32
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d105      	bne.n	80097fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d007      	beq.n	800980a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009810:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800981e:	2b40      	cmp	r3, #64	@ 0x40
 8009820:	d005      	beq.n	800982e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009826:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800982a:	2b00      	cmp	r3, #0
 800982c:	d058      	beq.n	80098e0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f001 f903 	bl	800aa3a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800983e:	2b40      	cmp	r3, #64	@ 0x40
 8009840:	d148      	bne.n	80098d4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	3308      	adds	r3, #8
 8009848:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009858:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800985c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009860:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	3308      	adds	r3, #8
 800986a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800986e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009872:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009876:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800987a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800987e:	e841 2300 	strex	r3, r2, [r1]
 8009882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1d9      	bne.n	8009842 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009894:	2b00      	cmp	r3, #0
 8009896:	d017      	beq.n	80098c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800989e:	4a18      	ldr	r2, [pc, #96]	@ (8009900 <HAL_UART_IRQHandler+0x2cc>)
 80098a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fb fbeb 	bl	8005084 <HAL_DMA_Abort_IT>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d01f      	beq.n	80098f4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80098c2:	4610      	mov	r0, r2
 80098c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c6:	e015      	b.n	80098f4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d2:	e00f      	b.n	80098f4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098de:	e009      	b.n	80098f4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80098f2:	e1e8      	b.n	8009cc6 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f4:	bf00      	nop
    return;
 80098f6:	e1e6      	b.n	8009cc6 <HAL_UART_IRQHandler+0x692>
 80098f8:	10000001 	.word	0x10000001
 80098fc:	04000120 	.word	0x04000120
 8009900:	0800adc3 	.word	0x0800adc3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009908:	2b01      	cmp	r3, #1
 800990a:	f040 8176 	bne.w	8009bfa <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800990e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009912:	f003 0310 	and.w	r3, r3, #16
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 816f 	beq.w	8009bfa <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800991c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009920:	f003 0310 	and.w	r3, r3, #16
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 8168 	beq.w	8009bfa <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2210      	movs	r2, #16
 8009930:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800993c:	2b40      	cmp	r3, #64	@ 0x40
 800993e:	f040 80dc 	bne.w	8009afa <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009950:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 80b1 	beq.w	8009abc <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009960:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009964:	429a      	cmp	r2, r3
 8009966:	f080 80a9 	bcs.w	8009abc <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009970:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 0320 	and.w	r3, r3, #32
 8009982:	2b00      	cmp	r3, #0
 8009984:	f040 8087 	bne.w	8009a96 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009990:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800999c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	461a      	mov	r2, r3
 80099ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80099be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80099c2:	e841 2300 	strex	r3, r2, [r1]
 80099c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80099ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1da      	bne.n	8009988 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3308      	adds	r3, #8
 80099d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099dc:	e853 3f00 	ldrex	r3, [r3]
 80099e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80099e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099e4:	f023 0301 	bic.w	r3, r3, #1
 80099e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3308      	adds	r3, #8
 80099f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80099f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80099fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80099fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a02:	e841 2300 	strex	r3, r2, [r1]
 8009a06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1e1      	bne.n	80099d2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3308      	adds	r3, #8
 8009a14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3308      	adds	r3, #8
 8009a2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e3      	bne.n	8009a0e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a5c:	e853 3f00 	ldrex	r3, [r3]
 8009a60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a64:	f023 0310 	bic.w	r3, r3, #16
 8009a68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	461a      	mov	r2, r3
 8009a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a7e:	e841 2300 	strex	r3, r2, [r1]
 8009a82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1e4      	bne.n	8009a54 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fb fa9e 	bl	8004fd2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2202      	movs	r2, #2
 8009a9a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009aae:	b292      	uxth	r2, r2
 8009ab0:	1a8a      	subs	r2, r1, r2
 8009ab2:	b292      	uxth	r2, r2
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009aba:	e106      	b.n	8009cca <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	f040 80ff 	bne.w	8009cca <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 0320 	and.w	r3, r3, #32
 8009ada:	2b20      	cmp	r3, #32
 8009adc:	f040 80f5 	bne.w	8009cca <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009af2:	4611      	mov	r1, r2
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	4798      	blx	r3
      return;
 8009af8:	e0e7      	b.n	8009cca <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f000 80d9 	beq.w	8009cce <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8009b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 80d4 	beq.w	8009cce <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2e:	e853 3f00 	ldrex	r3, [r3]
 8009b32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	461a      	mov	r2, r3
 8009b44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b50:	e841 2300 	strex	r3, r2, [r1]
 8009b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1e4      	bne.n	8009b26 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	3308      	adds	r3, #8
 8009b62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b66:	e853 3f00 	ldrex	r3, [r3]
 8009b6a:	623b      	str	r3, [r7, #32]
   return(result);
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b72:	f023 0301 	bic.w	r3, r3, #1
 8009b76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3308      	adds	r3, #8
 8009b80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b84:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b8c:	e841 2300 	strex	r3, r2, [r1]
 8009b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1e1      	bne.n	8009b5c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	e853 3f00 	ldrex	r3, [r3]
 8009bb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f023 0310 	bic.w	r3, r3, #16
 8009bc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009bce:	61fb      	str	r3, [r7, #28]
 8009bd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd2:	69b9      	ldr	r1, [r7, #24]
 8009bd4:	69fa      	ldr	r2, [r7, #28]
 8009bd6:	e841 2300 	strex	r3, r2, [r1]
 8009bda:	617b      	str	r3, [r7, #20]
   return(result);
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1e4      	bne.n	8009bac <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2202      	movs	r2, #2
 8009be6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009bee:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bf8:	e069      	b.n	8009cce <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d010      	beq.n	8009c28 <HAL_UART_IRQHandler+0x5f4>
 8009c06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00a      	beq.n	8009c28 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009c1a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c26:	e055      	b.n	8009cd4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d014      	beq.n	8009c5e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d105      	bne.n	8009c4c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d008      	beq.n	8009c5e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d03e      	beq.n	8009cd2 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	4798      	blx	r3
    }
    return;
 8009c5c:	e039      	b.n	8009cd2 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d009      	beq.n	8009c7e <HAL_UART_IRQHandler+0x64a>
 8009c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f001 f8b7 	bl	800adea <UART_EndTransmit_IT>
    return;
 8009c7c:	e02a      	b.n	8009cd4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00b      	beq.n	8009ca2 <HAL_UART_IRQHandler+0x66e>
 8009c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c8e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d005      	beq.n	8009ca2 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ca0:	e018      	b.n	8009cd4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ca6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d012      	beq.n	8009cd4 <HAL_UART_IRQHandler+0x6a0>
 8009cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	da0e      	bge.n	8009cd4 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cc0:	e008      	b.n	8009cd4 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009cc2:	bf00      	nop
 8009cc4:	e006      	b.n	8009cd4 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009cc6:	bf00      	nop
 8009cc8:	e004      	b.n	8009cd4 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009cca:	bf00      	nop
 8009ccc:	e002      	b.n	8009cd4 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009cce:	bf00      	nop
 8009cd0:	e000      	b.n	8009cd4 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009cd2:	bf00      	nop
  }
}
 8009cd4:	37e8      	adds	r7, #232	@ 0xe8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop

08009cdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	460b      	mov	r3, r1
 8009d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d88:	bf00      	nop
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a09      	ldr	r2, [pc, #36]	@ (8009dc8 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d009      	beq.n	8009dbc <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	430a      	orrs	r2, r1
 8009dba:	615a      	str	r2, [r3, #20]
  }
}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	40008000 	.word	0x40008000

08009dcc <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a18      	ldr	r2, [pc, #96]	@ (8009e3c <HAL_UART_EnableReceiverTimeout+0x70>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d027      	beq.n	8009e2e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009de4:	2b20      	cmp	r3, #32
 8009de6:	d120      	bne.n	8009e2a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d101      	bne.n	8009df6 <HAL_UART_EnableReceiverTimeout+0x2a>
 8009df2:	2302      	movs	r3, #2
 8009df4:	e01c      	b.n	8009e30 <HAL_UART_EnableReceiverTimeout+0x64>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2224      	movs	r2, #36	@ 0x24
 8009e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009e14:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2220      	movs	r2, #32
 8009e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	e002      	b.n	8009e30 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	e000      	b.n	8009e30 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
  }
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	40008000 	.word	0x40008000

08009e40 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
	...

08009e5c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a1a      	ldr	r2, [pc, #104]	@ (8009ed0 <UART_InitCallbacksToDefault+0x74>)
 8009e68:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a19      	ldr	r2, [pc, #100]	@ (8009ed4 <UART_InitCallbacksToDefault+0x78>)
 8009e70:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a18      	ldr	r2, [pc, #96]	@ (8009ed8 <UART_InitCallbacksToDefault+0x7c>)
 8009e78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a17      	ldr	r2, [pc, #92]	@ (8009edc <UART_InitCallbacksToDefault+0x80>)
 8009e80:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a16      	ldr	r2, [pc, #88]	@ (8009ee0 <UART_InitCallbacksToDefault+0x84>)
 8009e88:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a15      	ldr	r2, [pc, #84]	@ (8009ee4 <UART_InitCallbacksToDefault+0x88>)
 8009e90:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a14      	ldr	r2, [pc, #80]	@ (8009ee8 <UART_InitCallbacksToDefault+0x8c>)
 8009e98:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a13      	ldr	r2, [pc, #76]	@ (8009eec <UART_InitCallbacksToDefault+0x90>)
 8009ea0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a12      	ldr	r2, [pc, #72]	@ (8009ef0 <UART_InitCallbacksToDefault+0x94>)
 8009ea8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a11      	ldr	r2, [pc, #68]	@ (8009ef4 <UART_InitCallbacksToDefault+0x98>)
 8009eb0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a10      	ldr	r2, [pc, #64]	@ (8009ef8 <UART_InitCallbacksToDefault+0x9c>)
 8009eb8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a0f      	ldr	r2, [pc, #60]	@ (8009efc <UART_InitCallbacksToDefault+0xa0>)
 8009ec0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr
 8009ed0:	08009cf1 	.word	0x08009cf1
 8009ed4:	08009cdd 	.word	0x08009cdd
 8009ed8:	08009d19 	.word	0x08009d19
 8009edc:	08009d05 	.word	0x08009d05
 8009ee0:	08009d2d 	.word	0x08009d2d
 8009ee4:	08009d41 	.word	0x08009d41
 8009ee8:	08009d55 	.word	0x08009d55
 8009eec:	08009d69 	.word	0x08009d69
 8009ef0:	0800ae45 	.word	0x0800ae45
 8009ef4:	0800ae59 	.word	0x0800ae59
 8009ef8:	0800ae6d 	.word	0x0800ae6d
 8009efc:	08009d7d 	.word	0x08009d7d

08009f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f04:	b08c      	sub	sp, #48	@ 0x30
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	689a      	ldr	r2, [r3, #8]
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	431a      	orrs	r2, r3
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	431a      	orrs	r2, r3
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	69db      	ldr	r3, [r3, #28]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	4baa      	ldr	r3, [pc, #680]	@ (800a1d8 <UART_SetConfig+0x2d8>)
 8009f30:	4013      	ands	r3, r2
 8009f32:	697a      	ldr	r2, [r7, #20]
 8009f34:	6812      	ldr	r2, [r2, #0]
 8009f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f38:	430b      	orrs	r3, r1
 8009f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	68da      	ldr	r2, [r3, #12]
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a9f      	ldr	r2, [pc, #636]	@ (800a1dc <UART_SetConfig+0x2dc>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d004      	beq.n	8009f6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	6a1b      	ldr	r3, [r3, #32]
 8009f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009f76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	6812      	ldr	r2, [r2, #0]
 8009f7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f80:	430b      	orrs	r3, r1
 8009f82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8a:	f023 010f 	bic.w	r1, r3, #15
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	430a      	orrs	r2, r1
 8009f98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a90      	ldr	r2, [pc, #576]	@ (800a1e0 <UART_SetConfig+0x2e0>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d125      	bne.n	8009ff0 <UART_SetConfig+0xf0>
 8009fa4:	4b8f      	ldr	r3, [pc, #572]	@ (800a1e4 <UART_SetConfig+0x2e4>)
 8009fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009faa:	f003 0303 	and.w	r3, r3, #3
 8009fae:	2b03      	cmp	r3, #3
 8009fb0:	d81a      	bhi.n	8009fe8 <UART_SetConfig+0xe8>
 8009fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb8 <UART_SetConfig+0xb8>)
 8009fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb8:	08009fc9 	.word	0x08009fc9
 8009fbc:	08009fd9 	.word	0x08009fd9
 8009fc0:	08009fd1 	.word	0x08009fd1
 8009fc4:	08009fe1 	.word	0x08009fe1
 8009fc8:	2301      	movs	r3, #1
 8009fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fce:	e116      	b.n	800a1fe <UART_SetConfig+0x2fe>
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fd6:	e112      	b.n	800a1fe <UART_SetConfig+0x2fe>
 8009fd8:	2304      	movs	r3, #4
 8009fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fde:	e10e      	b.n	800a1fe <UART_SetConfig+0x2fe>
 8009fe0:	2308      	movs	r3, #8
 8009fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fe6:	e10a      	b.n	800a1fe <UART_SetConfig+0x2fe>
 8009fe8:	2310      	movs	r3, #16
 8009fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fee:	e106      	b.n	800a1fe <UART_SetConfig+0x2fe>
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a7c      	ldr	r2, [pc, #496]	@ (800a1e8 <UART_SetConfig+0x2e8>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d138      	bne.n	800a06c <UART_SetConfig+0x16c>
 8009ffa:	4b7a      	ldr	r3, [pc, #488]	@ (800a1e4 <UART_SetConfig+0x2e4>)
 8009ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a000:	f003 030c 	and.w	r3, r3, #12
 800a004:	2b0c      	cmp	r3, #12
 800a006:	d82d      	bhi.n	800a064 <UART_SetConfig+0x164>
 800a008:	a201      	add	r2, pc, #4	@ (adr r2, 800a010 <UART_SetConfig+0x110>)
 800a00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00e:	bf00      	nop
 800a010:	0800a045 	.word	0x0800a045
 800a014:	0800a065 	.word	0x0800a065
 800a018:	0800a065 	.word	0x0800a065
 800a01c:	0800a065 	.word	0x0800a065
 800a020:	0800a055 	.word	0x0800a055
 800a024:	0800a065 	.word	0x0800a065
 800a028:	0800a065 	.word	0x0800a065
 800a02c:	0800a065 	.word	0x0800a065
 800a030:	0800a04d 	.word	0x0800a04d
 800a034:	0800a065 	.word	0x0800a065
 800a038:	0800a065 	.word	0x0800a065
 800a03c:	0800a065 	.word	0x0800a065
 800a040:	0800a05d 	.word	0x0800a05d
 800a044:	2300      	movs	r3, #0
 800a046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a04a:	e0d8      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a04c:	2302      	movs	r3, #2
 800a04e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a052:	e0d4      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a054:	2304      	movs	r3, #4
 800a056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a05a:	e0d0      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a05c:	2308      	movs	r3, #8
 800a05e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a062:	e0cc      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a064:	2310      	movs	r3, #16
 800a066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a06a:	e0c8      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a5e      	ldr	r2, [pc, #376]	@ (800a1ec <UART_SetConfig+0x2ec>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d125      	bne.n	800a0c2 <UART_SetConfig+0x1c2>
 800a076:	4b5b      	ldr	r3, [pc, #364]	@ (800a1e4 <UART_SetConfig+0x2e4>)
 800a078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a07c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a080:	2b30      	cmp	r3, #48	@ 0x30
 800a082:	d016      	beq.n	800a0b2 <UART_SetConfig+0x1b2>
 800a084:	2b30      	cmp	r3, #48	@ 0x30
 800a086:	d818      	bhi.n	800a0ba <UART_SetConfig+0x1ba>
 800a088:	2b20      	cmp	r3, #32
 800a08a:	d00a      	beq.n	800a0a2 <UART_SetConfig+0x1a2>
 800a08c:	2b20      	cmp	r3, #32
 800a08e:	d814      	bhi.n	800a0ba <UART_SetConfig+0x1ba>
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <UART_SetConfig+0x19a>
 800a094:	2b10      	cmp	r3, #16
 800a096:	d008      	beq.n	800a0aa <UART_SetConfig+0x1aa>
 800a098:	e00f      	b.n	800a0ba <UART_SetConfig+0x1ba>
 800a09a:	2300      	movs	r3, #0
 800a09c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0a0:	e0ad      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0a8:	e0a9      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a0aa:	2304      	movs	r3, #4
 800a0ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0b0:	e0a5      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a0b2:	2308      	movs	r3, #8
 800a0b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0b8:	e0a1      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a0ba:	2310      	movs	r3, #16
 800a0bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0c0:	e09d      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a4a      	ldr	r2, [pc, #296]	@ (800a1f0 <UART_SetConfig+0x2f0>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d125      	bne.n	800a118 <UART_SetConfig+0x218>
 800a0cc:	4b45      	ldr	r3, [pc, #276]	@ (800a1e4 <UART_SetConfig+0x2e4>)
 800a0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a0d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a0d8:	d016      	beq.n	800a108 <UART_SetConfig+0x208>
 800a0da:	2bc0      	cmp	r3, #192	@ 0xc0
 800a0dc:	d818      	bhi.n	800a110 <UART_SetConfig+0x210>
 800a0de:	2b80      	cmp	r3, #128	@ 0x80
 800a0e0:	d00a      	beq.n	800a0f8 <UART_SetConfig+0x1f8>
 800a0e2:	2b80      	cmp	r3, #128	@ 0x80
 800a0e4:	d814      	bhi.n	800a110 <UART_SetConfig+0x210>
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <UART_SetConfig+0x1f0>
 800a0ea:	2b40      	cmp	r3, #64	@ 0x40
 800a0ec:	d008      	beq.n	800a100 <UART_SetConfig+0x200>
 800a0ee:	e00f      	b.n	800a110 <UART_SetConfig+0x210>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0f6:	e082      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0fe:	e07e      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a100:	2304      	movs	r3, #4
 800a102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a106:	e07a      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a108:	2308      	movs	r3, #8
 800a10a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a10e:	e076      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a110:	2310      	movs	r3, #16
 800a112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a116:	e072      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a35      	ldr	r2, [pc, #212]	@ (800a1f4 <UART_SetConfig+0x2f4>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d12a      	bne.n	800a178 <UART_SetConfig+0x278>
 800a122:	4b30      	ldr	r3, [pc, #192]	@ (800a1e4 <UART_SetConfig+0x2e4>)
 800a124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a128:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a12c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a130:	d01a      	beq.n	800a168 <UART_SetConfig+0x268>
 800a132:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a136:	d81b      	bhi.n	800a170 <UART_SetConfig+0x270>
 800a138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a13c:	d00c      	beq.n	800a158 <UART_SetConfig+0x258>
 800a13e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a142:	d815      	bhi.n	800a170 <UART_SetConfig+0x270>
 800a144:	2b00      	cmp	r3, #0
 800a146:	d003      	beq.n	800a150 <UART_SetConfig+0x250>
 800a148:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a14c:	d008      	beq.n	800a160 <UART_SetConfig+0x260>
 800a14e:	e00f      	b.n	800a170 <UART_SetConfig+0x270>
 800a150:	2300      	movs	r3, #0
 800a152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a156:	e052      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a158:	2302      	movs	r3, #2
 800a15a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a15e:	e04e      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a160:	2304      	movs	r3, #4
 800a162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a166:	e04a      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a168:	2308      	movs	r3, #8
 800a16a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a16e:	e046      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a170:	2310      	movs	r3, #16
 800a172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a176:	e042      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a17      	ldr	r2, [pc, #92]	@ (800a1dc <UART_SetConfig+0x2dc>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d13a      	bne.n	800a1f8 <UART_SetConfig+0x2f8>
 800a182:	4b18      	ldr	r3, [pc, #96]	@ (800a1e4 <UART_SetConfig+0x2e4>)
 800a184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a188:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a18c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a190:	d01a      	beq.n	800a1c8 <UART_SetConfig+0x2c8>
 800a192:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a196:	d81b      	bhi.n	800a1d0 <UART_SetConfig+0x2d0>
 800a198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a19c:	d00c      	beq.n	800a1b8 <UART_SetConfig+0x2b8>
 800a19e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1a2:	d815      	bhi.n	800a1d0 <UART_SetConfig+0x2d0>
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d003      	beq.n	800a1b0 <UART_SetConfig+0x2b0>
 800a1a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1ac:	d008      	beq.n	800a1c0 <UART_SetConfig+0x2c0>
 800a1ae:	e00f      	b.n	800a1d0 <UART_SetConfig+0x2d0>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1b6:	e022      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a1b8:	2302      	movs	r3, #2
 800a1ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1be:	e01e      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a1c0:	2304      	movs	r3, #4
 800a1c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1c6:	e01a      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a1c8:	2308      	movs	r3, #8
 800a1ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ce:	e016      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a1d0:	2310      	movs	r3, #16
 800a1d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1d6:	e012      	b.n	800a1fe <UART_SetConfig+0x2fe>
 800a1d8:	cfff69f3 	.word	0xcfff69f3
 800a1dc:	40008000 	.word	0x40008000
 800a1e0:	40013800 	.word	0x40013800
 800a1e4:	40021000 	.word	0x40021000
 800a1e8:	40004400 	.word	0x40004400
 800a1ec:	40004800 	.word	0x40004800
 800a1f0:	40004c00 	.word	0x40004c00
 800a1f4:	40005000 	.word	0x40005000
 800a1f8:	2310      	movs	r3, #16
 800a1fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4aae      	ldr	r2, [pc, #696]	@ (800a4bc <UART_SetConfig+0x5bc>)
 800a204:	4293      	cmp	r3, r2
 800a206:	f040 8097 	bne.w	800a338 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a20a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a20e:	2b08      	cmp	r3, #8
 800a210:	d823      	bhi.n	800a25a <UART_SetConfig+0x35a>
 800a212:	a201      	add	r2, pc, #4	@ (adr r2, 800a218 <UART_SetConfig+0x318>)
 800a214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a218:	0800a23d 	.word	0x0800a23d
 800a21c:	0800a25b 	.word	0x0800a25b
 800a220:	0800a245 	.word	0x0800a245
 800a224:	0800a25b 	.word	0x0800a25b
 800a228:	0800a24b 	.word	0x0800a24b
 800a22c:	0800a25b 	.word	0x0800a25b
 800a230:	0800a25b 	.word	0x0800a25b
 800a234:	0800a25b 	.word	0x0800a25b
 800a238:	0800a253 	.word	0x0800a253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a23c:	f7fc f812 	bl	8006264 <HAL_RCC_GetPCLK1Freq>
 800a240:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a242:	e010      	b.n	800a266 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a244:	4b9e      	ldr	r3, [pc, #632]	@ (800a4c0 <UART_SetConfig+0x5c0>)
 800a246:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a248:	e00d      	b.n	800a266 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a24a:	f7fb ff9d 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 800a24e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a250:	e009      	b.n	800a266 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a256:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a258:	e005      	b.n	800a266 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a25a:	2300      	movs	r3, #0
 800a25c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a264:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 8130 	beq.w	800a4ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a272:	4a94      	ldr	r2, [pc, #592]	@ (800a4c4 <UART_SetConfig+0x5c4>)
 800a274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a278:	461a      	mov	r2, r3
 800a27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a280:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	4613      	mov	r3, r2
 800a288:	005b      	lsls	r3, r3, #1
 800a28a:	4413      	add	r3, r2
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d305      	bcc.n	800a29e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a298:	69ba      	ldr	r2, [r7, #24]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d903      	bls.n	800a2a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2a4:	e113      	b.n	800a4ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	60bb      	str	r3, [r7, #8]
 800a2ac:	60fa      	str	r2, [r7, #12]
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b2:	4a84      	ldr	r2, [pc, #528]	@ (800a4c4 <UART_SetConfig+0x5c4>)
 800a2b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	603b      	str	r3, [r7, #0]
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2c8:	f7f6 fd7a 	bl	8000dc0 <__aeabi_uldivmod>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	f04f 0200 	mov.w	r2, #0
 800a2d8:	f04f 0300 	mov.w	r3, #0
 800a2dc:	020b      	lsls	r3, r1, #8
 800a2de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a2e2:	0202      	lsls	r2, r0, #8
 800a2e4:	6979      	ldr	r1, [r7, #20]
 800a2e6:	6849      	ldr	r1, [r1, #4]
 800a2e8:	0849      	lsrs	r1, r1, #1
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	460c      	mov	r4, r1
 800a2ee:	4605      	mov	r5, r0
 800a2f0:	eb12 0804 	adds.w	r8, r2, r4
 800a2f4:	eb43 0905 	adc.w	r9, r3, r5
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	469a      	mov	sl, r3
 800a300:	4693      	mov	fp, r2
 800a302:	4652      	mov	r2, sl
 800a304:	465b      	mov	r3, fp
 800a306:	4640      	mov	r0, r8
 800a308:	4649      	mov	r1, r9
 800a30a:	f7f6 fd59 	bl	8000dc0 <__aeabi_uldivmod>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	4613      	mov	r3, r2
 800a314:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a31c:	d308      	bcc.n	800a330 <UART_SetConfig+0x430>
 800a31e:	6a3b      	ldr	r3, [r7, #32]
 800a320:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a324:	d204      	bcs.n	800a330 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	6a3a      	ldr	r2, [r7, #32]
 800a32c:	60da      	str	r2, [r3, #12]
 800a32e:	e0ce      	b.n	800a4ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a336:	e0ca      	b.n	800a4ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	69db      	ldr	r3, [r3, #28]
 800a33c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a340:	d166      	bne.n	800a410 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a342:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a346:	2b08      	cmp	r3, #8
 800a348:	d827      	bhi.n	800a39a <UART_SetConfig+0x49a>
 800a34a:	a201      	add	r2, pc, #4	@ (adr r2, 800a350 <UART_SetConfig+0x450>)
 800a34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a350:	0800a375 	.word	0x0800a375
 800a354:	0800a37d 	.word	0x0800a37d
 800a358:	0800a385 	.word	0x0800a385
 800a35c:	0800a39b 	.word	0x0800a39b
 800a360:	0800a38b 	.word	0x0800a38b
 800a364:	0800a39b 	.word	0x0800a39b
 800a368:	0800a39b 	.word	0x0800a39b
 800a36c:	0800a39b 	.word	0x0800a39b
 800a370:	0800a393 	.word	0x0800a393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a374:	f7fb ff76 	bl	8006264 <HAL_RCC_GetPCLK1Freq>
 800a378:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a37a:	e014      	b.n	800a3a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a37c:	f7fb ff88 	bl	8006290 <HAL_RCC_GetPCLK2Freq>
 800a380:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a382:	e010      	b.n	800a3a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a384:	4b4e      	ldr	r3, [pc, #312]	@ (800a4c0 <UART_SetConfig+0x5c0>)
 800a386:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a388:	e00d      	b.n	800a3a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a38a:	f7fb fefd 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 800a38e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a390:	e009      	b.n	800a3a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a396:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a398:	e005      	b.n	800a3a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a39a:	2300      	movs	r3, #0
 800a39c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a3a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 8090 	beq.w	800a4ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b2:	4a44      	ldr	r2, [pc, #272]	@ (800a4c4 <UART_SetConfig+0x5c4>)
 800a3b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3c0:	005a      	lsls	r2, r3, #1
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	085b      	lsrs	r3, r3, #1
 800a3c8:	441a      	add	r2, r3
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	2b0f      	cmp	r3, #15
 800a3d8:	d916      	bls.n	800a408 <UART_SetConfig+0x508>
 800a3da:	6a3b      	ldr	r3, [r7, #32]
 800a3dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3e0:	d212      	bcs.n	800a408 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3e2:	6a3b      	ldr	r3, [r7, #32]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	f023 030f 	bic.w	r3, r3, #15
 800a3ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	085b      	lsrs	r3, r3, #1
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	f003 0307 	and.w	r3, r3, #7
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	8bfb      	ldrh	r3, [r7, #30]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	8bfa      	ldrh	r2, [r7, #30]
 800a404:	60da      	str	r2, [r3, #12]
 800a406:	e062      	b.n	800a4ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a40e:	e05e      	b.n	800a4ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a410:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a414:	2b08      	cmp	r3, #8
 800a416:	d828      	bhi.n	800a46a <UART_SetConfig+0x56a>
 800a418:	a201      	add	r2, pc, #4	@ (adr r2, 800a420 <UART_SetConfig+0x520>)
 800a41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41e:	bf00      	nop
 800a420:	0800a445 	.word	0x0800a445
 800a424:	0800a44d 	.word	0x0800a44d
 800a428:	0800a455 	.word	0x0800a455
 800a42c:	0800a46b 	.word	0x0800a46b
 800a430:	0800a45b 	.word	0x0800a45b
 800a434:	0800a46b 	.word	0x0800a46b
 800a438:	0800a46b 	.word	0x0800a46b
 800a43c:	0800a46b 	.word	0x0800a46b
 800a440:	0800a463 	.word	0x0800a463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a444:	f7fb ff0e 	bl	8006264 <HAL_RCC_GetPCLK1Freq>
 800a448:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a44a:	e014      	b.n	800a476 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a44c:	f7fb ff20 	bl	8006290 <HAL_RCC_GetPCLK2Freq>
 800a450:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a452:	e010      	b.n	800a476 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a454:	4b1a      	ldr	r3, [pc, #104]	@ (800a4c0 <UART_SetConfig+0x5c0>)
 800a456:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a458:	e00d      	b.n	800a476 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a45a:	f7fb fe95 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 800a45e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a460:	e009      	b.n	800a476 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a468:	e005      	b.n	800a476 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a46a:	2300      	movs	r3, #0
 800a46c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a474:	bf00      	nop
    }

    if (pclk != 0U)
 800a476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d028      	beq.n	800a4ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a480:	4a10      	ldr	r2, [pc, #64]	@ (800a4c4 <UART_SetConfig+0x5c4>)
 800a482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a486:	461a      	mov	r2, r3
 800a488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	085b      	lsrs	r3, r3, #1
 800a494:	441a      	add	r2, r3
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a49e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	2b0f      	cmp	r3, #15
 800a4a4:	d910      	bls.n	800a4c8 <UART_SetConfig+0x5c8>
 800a4a6:	6a3b      	ldr	r3, [r7, #32]
 800a4a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4ac:	d20c      	bcs.n	800a4c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4ae:	6a3b      	ldr	r3, [r7, #32]
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	60da      	str	r2, [r3, #12]
 800a4b8:	e009      	b.n	800a4ce <UART_SetConfig+0x5ce>
 800a4ba:	bf00      	nop
 800a4bc:	40008000 	.word	0x40008000
 800a4c0:	00f42400 	.word	0x00f42400
 800a4c4:	0800bc80 	.word	0x0800bc80
      }
      else
      {
        ret = HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a4ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3730      	adds	r7, #48	@ 0x30
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a4f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a504:	f003 0308 	and.w	r3, r3, #8
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00a      	beq.n	800a522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	430a      	orrs	r2, r1
 800a520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00a      	beq.n	800a544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a548:	f003 0302 	and.w	r3, r3, #2
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00a      	beq.n	800a566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	430a      	orrs	r2, r1
 800a564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a56a:	f003 0304 	and.w	r3, r3, #4
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00a      	beq.n	800a588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	430a      	orrs	r2, r1
 800a586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a58c:	f003 0310 	and.w	r3, r3, #16
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00a      	beq.n	800a5aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ae:	f003 0320 	and.w	r3, r3, #32
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00a      	beq.n	800a5cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	430a      	orrs	r2, r1
 800a5ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d01a      	beq.n	800a60e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5f6:	d10a      	bne.n	800a60e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	430a      	orrs	r2, r1
 800a60c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00a      	beq.n	800a630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	430a      	orrs	r2, r1
 800a62e:	605a      	str	r2, [r3, #4]
  }
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b098      	sub	sp, #96	@ 0x60
 800a640:	af02      	add	r7, sp, #8
 800a642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a64c:	f7fa fa82 	bl	8004b54 <HAL_GetTick>
 800a650:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0308 	and.w	r3, r3, #8
 800a65c:	2b08      	cmp	r3, #8
 800a65e:	d12f      	bne.n	800a6c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a660:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a668:	2200      	movs	r2, #0
 800a66a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f88e 	bl	800a790 <UART_WaitOnFlagUntilTimeout>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d022      	beq.n	800a6c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a682:	e853 3f00 	ldrex	r3, [r3]
 800a686:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a68e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	461a      	mov	r2, r3
 800a696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a698:	647b      	str	r3, [r7, #68]	@ 0x44
 800a69a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a69e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6a0:	e841 2300 	strex	r3, r2, [r1]
 800a6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1e6      	bne.n	800a67a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2220      	movs	r2, #32
 800a6b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e063      	b.n	800a788 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f003 0304 	and.w	r3, r3, #4
 800a6ca:	2b04      	cmp	r3, #4
 800a6cc:	d149      	bne.n	800a762 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f857 	bl	800a790 <UART_WaitOnFlagUntilTimeout>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d03c      	beq.n	800a762 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f0:	e853 3f00 	ldrex	r3, [r3]
 800a6f4:	623b      	str	r3, [r7, #32]
   return(result);
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	461a      	mov	r2, r3
 800a704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a706:	633b      	str	r3, [r7, #48]	@ 0x30
 800a708:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a70c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a70e:	e841 2300 	strex	r3, r2, [r1]
 800a712:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1e6      	bne.n	800a6e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3308      	adds	r3, #8
 800a720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	e853 3f00 	ldrex	r3, [r3]
 800a728:	60fb      	str	r3, [r7, #12]
   return(result);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f023 0301 	bic.w	r3, r3, #1
 800a730:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	3308      	adds	r3, #8
 800a738:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a73a:	61fa      	str	r2, [r7, #28]
 800a73c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73e:	69b9      	ldr	r1, [r7, #24]
 800a740:	69fa      	ldr	r2, [r7, #28]
 800a742:	e841 2300 	strex	r3, r2, [r1]
 800a746:	617b      	str	r3, [r7, #20]
   return(result);
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1e5      	bne.n	800a71a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2220      	movs	r2, #32
 800a752:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a75e:	2303      	movs	r3, #3
 800a760:	e012      	b.n	800a788 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2220      	movs	r2, #32
 800a766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2220      	movs	r2, #32
 800a76e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3758      	adds	r7, #88	@ 0x58
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	603b      	str	r3, [r7, #0]
 800a79c:	4613      	mov	r3, r2
 800a79e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7a0:	e04f      	b.n	800a842 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a8:	d04b      	beq.n	800a842 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7aa:	f7fa f9d3 	bl	8004b54 <HAL_GetTick>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	69ba      	ldr	r2, [r7, #24]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d302      	bcc.n	800a7c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	e04e      	b.n	800a862 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0304 	and.w	r3, r3, #4
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d037      	beq.n	800a842 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	2b80      	cmp	r3, #128	@ 0x80
 800a7d6:	d034      	beq.n	800a842 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	2b40      	cmp	r3, #64	@ 0x40
 800a7dc:	d031      	beq.n	800a842 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	69db      	ldr	r3, [r3, #28]
 800a7e4:	f003 0308 	and.w	r3, r3, #8
 800a7e8:	2b08      	cmp	r3, #8
 800a7ea:	d110      	bne.n	800a80e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2208      	movs	r2, #8
 800a7f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f000 f920 	bl	800aa3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2208      	movs	r2, #8
 800a7fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e029      	b.n	800a862 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	69db      	ldr	r3, [r3, #28]
 800a814:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a81c:	d111      	bne.n	800a842 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 f906 	bl	800aa3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2220      	movs	r2, #32
 800a832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a83e:	2303      	movs	r3, #3
 800a840:	e00f      	b.n	800a862 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	69da      	ldr	r2, [r3, #28]
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	4013      	ands	r3, r2
 800a84c:	68ba      	ldr	r2, [r7, #8]
 800a84e:	429a      	cmp	r2, r3
 800a850:	bf0c      	ite	eq
 800a852:	2301      	moveq	r3, #1
 800a854:	2300      	movne	r3, #0
 800a856:	b2db      	uxtb	r3, r3
 800a858:	461a      	mov	r2, r3
 800a85a:	79fb      	ldrb	r3, [r7, #7]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d0a0      	beq.n	800a7a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
	...

0800a86c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b096      	sub	sp, #88	@ 0x58
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	4613      	mov	r3, r2
 800a878:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	88fa      	ldrh	r2, [r7, #6]
 800a884:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2222      	movs	r2, #34	@ 0x22
 800a894:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d02d      	beq.n	800a8fe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8a8:	4a40      	ldr	r2, [pc, #256]	@ (800a9ac <UART_Start_Receive_DMA+0x140>)
 800a8aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8b2:	4a3f      	ldr	r2, [pc, #252]	@ (800a9b0 <UART_Start_Receive_DMA+0x144>)
 800a8b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8bc:	4a3d      	ldr	r2, [pc, #244]	@ (800a9b4 <UART_Start_Receive_DMA+0x148>)
 800a8be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3324      	adds	r3, #36	@ 0x24
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8dc:	461a      	mov	r2, r3
 800a8de:	88fb      	ldrh	r3, [r7, #6]
 800a8e0:	f7fa fafc 	bl	8004edc <HAL_DMA_Start_IT>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d009      	beq.n	800a8fe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2210      	movs	r2, #16
 800a8ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2220      	movs	r2, #32
 800a8f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e051      	b.n	800a9a2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d018      	beq.n	800a938 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a90e:	e853 3f00 	ldrex	r3, [r3]
 800a912:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a91a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	461a      	mov	r2, r3
 800a922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a924:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a926:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a928:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a92a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a92c:	e841 2300 	strex	r3, r2, [r1]
 800a930:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1e6      	bne.n	800a906 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	3308      	adds	r3, #8
 800a93e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a942:	e853 3f00 	ldrex	r3, [r3]
 800a946:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94a:	f043 0301 	orr.w	r3, r3, #1
 800a94e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	3308      	adds	r3, #8
 800a956:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a958:	637a      	str	r2, [r7, #52]	@ 0x34
 800a95a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a95e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a960:	e841 2300 	strex	r3, r2, [r1]
 800a964:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1e5      	bne.n	800a938 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	3308      	adds	r3, #8
 800a972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	e853 3f00 	ldrex	r3, [r3]
 800a97a:	613b      	str	r3, [r7, #16]
   return(result);
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	3308      	adds	r3, #8
 800a98a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a98c:	623a      	str	r2, [r7, #32]
 800a98e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a990:	69f9      	ldr	r1, [r7, #28]
 800a992:	6a3a      	ldr	r2, [r7, #32]
 800a994:	e841 2300 	strex	r3, r2, [r1]
 800a998:	61bb      	str	r3, [r7, #24]
   return(result);
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1e5      	bne.n	800a96c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3758      	adds	r7, #88	@ 0x58
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	0800abc5 	.word	0x0800abc5
 800a9b0:	0800acf9 	.word	0x0800acf9
 800a9b4:	0800ad3f 	.word	0x0800ad3f

0800a9b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b08f      	sub	sp, #60	@ 0x3c
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c6:	6a3b      	ldr	r3, [r7, #32]
 800a9c8:	e853 3f00 	ldrex	r3, [r3]
 800a9cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a9d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9e0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e6      	bne.n	800a9c0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3308      	adds	r3, #8
 800a9f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	e853 3f00 	ldrex	r3, [r3]
 800aa00:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aa08:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3308      	adds	r3, #8
 800aa10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa12:	61ba      	str	r2, [r7, #24]
 800aa14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa16:	6979      	ldr	r1, [r7, #20]
 800aa18:	69ba      	ldr	r2, [r7, #24]
 800aa1a:	e841 2300 	strex	r3, r2, [r1]
 800aa1e:	613b      	str	r3, [r7, #16]
   return(result);
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1e5      	bne.n	800a9f2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800aa2e:	bf00      	nop
 800aa30:	373c      	adds	r7, #60	@ 0x3c
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b095      	sub	sp, #84	@ 0x54
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4a:	e853 3f00 	ldrex	r3, [r3]
 800aa4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa60:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa68:	e841 2300 	strex	r3, r2, [r1]
 800aa6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1e6      	bne.n	800aa42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3308      	adds	r3, #8
 800aa7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	e853 3f00 	ldrex	r3, [r3]
 800aa82:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa8a:	f023 0301 	bic.w	r3, r3, #1
 800aa8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3308      	adds	r3, #8
 800aa96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aaa0:	e841 2300 	strex	r3, r2, [r1]
 800aaa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1e3      	bne.n	800aa74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d118      	bne.n	800aae6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	e853 3f00 	ldrex	r3, [r3]
 800aac0:	60bb      	str	r3, [r7, #8]
   return(result);
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	f023 0310 	bic.w	r3, r3, #16
 800aac8:	647b      	str	r3, [r7, #68]	@ 0x44
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	461a      	mov	r2, r3
 800aad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aad2:	61bb      	str	r3, [r7, #24]
 800aad4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad6:	6979      	ldr	r1, [r7, #20]
 800aad8:	69ba      	ldr	r2, [r7, #24]
 800aada:	e841 2300 	strex	r3, r2, [r1]
 800aade:	613b      	str	r3, [r7, #16]
   return(result);
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1e6      	bne.n	800aab4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2220      	movs	r2, #32
 800aaea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aafa:	bf00      	nop
 800aafc:	3754      	adds	r7, #84	@ 0x54
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b090      	sub	sp, #64	@ 0x40
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab12:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 0320 	and.w	r3, r3, #32
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d137      	bne.n	800ab92 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ab22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab24:	2200      	movs	r2, #0
 800ab26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	3308      	adds	r3, #8
 800ab30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab34:	e853 3f00 	ldrex	r3, [r3]
 800ab38:	623b      	str	r3, [r7, #32]
   return(result);
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab40:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ab42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3308      	adds	r3, #8
 800ab48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab4a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab52:	e841 2300 	strex	r3, r2, [r1]
 800ab56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1e5      	bne.n	800ab2a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	e853 3f00 	ldrex	r3, [r3]
 800ab6a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab72:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	461a      	mov	r2, r3
 800ab7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab7c:	61fb      	str	r3, [r7, #28]
 800ab7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab80:	69b9      	ldr	r1, [r7, #24]
 800ab82:	69fa      	ldr	r2, [r7, #28]
 800ab84:	e841 2300 	strex	r3, r2, [r1]
 800ab88:	617b      	str	r3, [r7, #20]
   return(result);
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1e6      	bne.n	800ab5e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab90:	e004      	b.n	800ab9c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800ab92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ab98:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ab9a:	4798      	blx	r3
}
 800ab9c:	bf00      	nop
 800ab9e:	3740      	adds	r7, #64	@ 0x40
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abbc:	bf00      	nop
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b09c      	sub	sp, #112	@ 0x70
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abd0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 0320 	and.w	r3, r3, #32
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d171      	bne.n	800acc4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800abe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abe2:	2200      	movs	r2, #0
 800abe4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abf0:	e853 3f00 	ldrex	r3, [r3]
 800abf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800abf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800abfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	461a      	mov	r2, r3
 800ac04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac06:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ac0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac0e:	e841 2300 	strex	r3, r2, [r1]
 800ac12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ac14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1e6      	bne.n	800abe8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	3308      	adds	r3, #8
 800ac20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac24:	e853 3f00 	ldrex	r3, [r3]
 800ac28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac2c:	f023 0301 	bic.w	r3, r3, #1
 800ac30:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3308      	adds	r3, #8
 800ac38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ac3a:	647a      	str	r2, [r7, #68]	@ 0x44
 800ac3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac42:	e841 2300 	strex	r3, r2, [r1]
 800ac46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1e5      	bne.n	800ac1a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	3308      	adds	r3, #8
 800ac54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac58:	e853 3f00 	ldrex	r3, [r3]
 800ac5c:	623b      	str	r3, [r7, #32]
   return(result);
 800ac5e:	6a3b      	ldr	r3, [r7, #32]
 800ac60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac64:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ac6e:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac76:	e841 2300 	strex	r3, r2, [r1]
 800ac7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1e5      	bne.n	800ac4e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac84:	2220      	movs	r2, #32
 800ac86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d118      	bne.n	800acc4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	e853 3f00 	ldrex	r3, [r3]
 800ac9e:	60fb      	str	r3, [r7, #12]
   return(result);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f023 0310 	bic.w	r3, r3, #16
 800aca6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	461a      	mov	r2, r3
 800acae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acb0:	61fb      	str	r3, [r7, #28]
 800acb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb4:	69b9      	ldr	r1, [r7, #24]
 800acb6:	69fa      	ldr	r2, [r7, #28]
 800acb8:	e841 2300 	strex	r3, r2, [r1]
 800acbc:	617b      	str	r3, [r7, #20]
   return(result);
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d1e6      	bne.n	800ac92 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acc6:	2200      	movs	r2, #0
 800acc8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800accc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d109      	bne.n	800ace6 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800acd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800acd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800acda:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800acde:	4611      	mov	r1, r2
 800ace0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ace2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ace4:	e004      	b.n	800acf0 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800ace6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ace8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800acec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800acee:	4798      	blx	r3
}
 800acf0:	bf00      	nop
 800acf2:	3770      	adds	r7, #112	@ 0x70
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad04:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d10b      	bne.n	800ad2c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ad20:	0852      	lsrs	r2, r2, #1
 800ad22:	b292      	uxth	r2, r2
 800ad24:	4611      	mov	r1, r2
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad2a:	e004      	b.n	800ad36 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	4798      	blx	r3
}
 800ad36:	bf00      	nop
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b086      	sub	sp, #24
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad52:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad5a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad66:	2b80      	cmp	r3, #128	@ 0x80
 800ad68:	d109      	bne.n	800ad7e <UART_DMAError+0x40>
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	2b21      	cmp	r3, #33	@ 0x21
 800ad6e:	d106      	bne.n	800ad7e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ad78:	6978      	ldr	r0, [r7, #20]
 800ad7a:	f7ff fe1d 	bl	800a9b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad88:	2b40      	cmp	r3, #64	@ 0x40
 800ad8a:	d109      	bne.n	800ada0 <UART_DMAError+0x62>
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b22      	cmp	r3, #34	@ 0x22
 800ad90:	d106      	bne.n	800ada0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ad9a:	6978      	ldr	r0, [r7, #20]
 800ad9c:	f7ff fe4d 	bl	800aa3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ada6:	f043 0210 	orr.w	r2, r3, #16
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800adb6:	6978      	ldr	r0, [r7, #20]
 800adb8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adba:	bf00      	nop
 800adbc:	3718      	adds	r7, #24
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b084      	sub	sp, #16
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ade2:	bf00      	nop
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b088      	sub	sp, #32
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	e853 3f00 	ldrex	r3, [r3]
 800adfe:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae06:	61fb      	str	r3, [r7, #28]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	61bb      	str	r3, [r7, #24]
 800ae12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae14:	6979      	ldr	r1, [r7, #20]
 800ae16:	69ba      	ldr	r2, [r7, #24]
 800ae18:	e841 2300 	strex	r3, r2, [r1]
 800ae1c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1e6      	bne.n	800adf2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2220      	movs	r2, #32
 800ae28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae3c:	bf00      	nop
 800ae3e:	3720      	adds	r7, #32
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae74:	bf00      	nop
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d101      	bne.n	800ae96 <HAL_UARTEx_DisableFifoMode+0x16>
 800ae92:	2302      	movs	r3, #2
 800ae94:	e027      	b.n	800aee6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2224      	movs	r2, #36	@ 0x24
 800aea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f022 0201 	bic.w	r2, r2, #1
 800aebc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aec4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2220      	movs	r2, #32
 800aed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b084      	sub	sp, #16
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
 800aefa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af02:	2b01      	cmp	r3, #1
 800af04:	d101      	bne.n	800af0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af06:	2302      	movs	r3, #2
 800af08:	e02d      	b.n	800af66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2224      	movs	r2, #36	@ 0x24
 800af16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f022 0201 	bic.w	r2, r2, #1
 800af30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	683a      	ldr	r2, [r7, #0]
 800af42:	430a      	orrs	r2, r1
 800af44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f850 	bl	800afec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2220      	movs	r2, #32
 800af58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b084      	sub	sp, #16
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
 800af76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d101      	bne.n	800af86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af82:	2302      	movs	r3, #2
 800af84:	e02d      	b.n	800afe2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2224      	movs	r2, #36	@ 0x24
 800af92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f022 0201 	bic.w	r2, r2, #1
 800afac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	430a      	orrs	r2, r1
 800afc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f812 	bl	800afec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2220      	movs	r2, #32
 800afd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
	...

0800afec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800afec:	b480      	push	{r7}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d108      	bne.n	800b00e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b00c:	e031      	b.n	800b072 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b00e:	2308      	movs	r3, #8
 800b010:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b012:	2308      	movs	r3, #8
 800b014:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	0e5b      	lsrs	r3, r3, #25
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	f003 0307 	and.w	r3, r3, #7
 800b024:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	0f5b      	lsrs	r3, r3, #29
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	f003 0307 	and.w	r3, r3, #7
 800b034:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b036:	7bbb      	ldrb	r3, [r7, #14]
 800b038:	7b3a      	ldrb	r2, [r7, #12]
 800b03a:	4911      	ldr	r1, [pc, #68]	@ (800b080 <UARTEx_SetNbDataToProcess+0x94>)
 800b03c:	5c8a      	ldrb	r2, [r1, r2]
 800b03e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b042:	7b3a      	ldrb	r2, [r7, #12]
 800b044:	490f      	ldr	r1, [pc, #60]	@ (800b084 <UARTEx_SetNbDataToProcess+0x98>)
 800b046:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b048:	fb93 f3f2 	sdiv	r3, r3, r2
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b054:	7bfb      	ldrb	r3, [r7, #15]
 800b056:	7b7a      	ldrb	r2, [r7, #13]
 800b058:	4909      	ldr	r1, [pc, #36]	@ (800b080 <UARTEx_SetNbDataToProcess+0x94>)
 800b05a:	5c8a      	ldrb	r2, [r1, r2]
 800b05c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b060:	7b7a      	ldrb	r2, [r7, #13]
 800b062:	4908      	ldr	r1, [pc, #32]	@ (800b084 <UARTEx_SetNbDataToProcess+0x98>)
 800b064:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b066:	fb93 f3f2 	sdiv	r3, r3, r2
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b072:	bf00      	nop
 800b074:	3714      	adds	r7, #20
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	0800bc98 	.word	0x0800bc98
 800b084:	0800bca0 	.word	0x0800bca0

0800b088 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	ed93 7a06 	vldr	s14, [r3, #24]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	edd3 7a07 	vldr	s15, [r3, #28]
 800b09e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	edd3 7a08 	vldr	s15, [r3, #32]
 800b0a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	edd3 7a06 	vldr	s15, [r3, #24]
 800b0b8:	eeb1 7a67 	vneg.f32	s14, s15
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	edd3 7a08 	vldr	s15, [r3, #32]
 800b0c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b0c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a1a      	ldr	r2, [r3, #32]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d006      	beq.n	800b0ec <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	330c      	adds	r3, #12
 800b0e2:	220c      	movs	r2, #12
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 f804 	bl	800b0f4 <memset>
  }

}
 800b0ec:	bf00      	nop
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <memset>:
 800b0f4:	4402      	add	r2, r0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d100      	bne.n	800b0fe <memset+0xa>
 800b0fc:	4770      	bx	lr
 800b0fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b102:	e7f9      	b.n	800b0f8 <memset+0x4>

0800b104 <__libc_init_array>:
 800b104:	b570      	push	{r4, r5, r6, lr}
 800b106:	4d0d      	ldr	r5, [pc, #52]	@ (800b13c <__libc_init_array+0x38>)
 800b108:	4c0d      	ldr	r4, [pc, #52]	@ (800b140 <__libc_init_array+0x3c>)
 800b10a:	1b64      	subs	r4, r4, r5
 800b10c:	10a4      	asrs	r4, r4, #2
 800b10e:	2600      	movs	r6, #0
 800b110:	42a6      	cmp	r6, r4
 800b112:	d109      	bne.n	800b128 <__libc_init_array+0x24>
 800b114:	4d0b      	ldr	r5, [pc, #44]	@ (800b144 <__libc_init_array+0x40>)
 800b116:	4c0c      	ldr	r4, [pc, #48]	@ (800b148 <__libc_init_array+0x44>)
 800b118:	f000 fd9a 	bl	800bc50 <_init>
 800b11c:	1b64      	subs	r4, r4, r5
 800b11e:	10a4      	asrs	r4, r4, #2
 800b120:	2600      	movs	r6, #0
 800b122:	42a6      	cmp	r6, r4
 800b124:	d105      	bne.n	800b132 <__libc_init_array+0x2e>
 800b126:	bd70      	pop	{r4, r5, r6, pc}
 800b128:	f855 3b04 	ldr.w	r3, [r5], #4
 800b12c:	4798      	blx	r3
 800b12e:	3601      	adds	r6, #1
 800b130:	e7ee      	b.n	800b110 <__libc_init_array+0xc>
 800b132:	f855 3b04 	ldr.w	r3, [r5], #4
 800b136:	4798      	blx	r3
 800b138:	3601      	adds	r6, #1
 800b13a:	e7f2      	b.n	800b122 <__libc_init_array+0x1e>
 800b13c:	0800c080 	.word	0x0800c080
 800b140:	0800c080 	.word	0x0800c080
 800b144:	0800c080 	.word	0x0800c080
 800b148:	0800c084 	.word	0x0800c084

0800b14c <memcpy>:
 800b14c:	440a      	add	r2, r1
 800b14e:	4291      	cmp	r1, r2
 800b150:	f100 33ff 	add.w	r3, r0, #4294967295
 800b154:	d100      	bne.n	800b158 <memcpy+0xc>
 800b156:	4770      	bx	lr
 800b158:	b510      	push	{r4, lr}
 800b15a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b15e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b162:	4291      	cmp	r1, r2
 800b164:	d1f9      	bne.n	800b15a <memcpy+0xe>
 800b166:	bd10      	pop	{r4, pc}

0800b168 <cosf>:
 800b168:	ee10 3a10 	vmov	r3, s0
 800b16c:	b507      	push	{r0, r1, r2, lr}
 800b16e:	4a1e      	ldr	r2, [pc, #120]	@ (800b1e8 <cosf+0x80>)
 800b170:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b174:	4293      	cmp	r3, r2
 800b176:	d806      	bhi.n	800b186 <cosf+0x1e>
 800b178:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b1ec <cosf+0x84>
 800b17c:	b003      	add	sp, #12
 800b17e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b182:	f000 b87b 	b.w	800b27c <__kernel_cosf>
 800b186:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b18a:	d304      	bcc.n	800b196 <cosf+0x2e>
 800b18c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b190:	b003      	add	sp, #12
 800b192:	f85d fb04 	ldr.w	pc, [sp], #4
 800b196:	4668      	mov	r0, sp
 800b198:	f000 f910 	bl	800b3bc <__ieee754_rem_pio2f>
 800b19c:	f000 0003 	and.w	r0, r0, #3
 800b1a0:	2801      	cmp	r0, #1
 800b1a2:	d009      	beq.n	800b1b8 <cosf+0x50>
 800b1a4:	2802      	cmp	r0, #2
 800b1a6:	d010      	beq.n	800b1ca <cosf+0x62>
 800b1a8:	b9b0      	cbnz	r0, 800b1d8 <cosf+0x70>
 800b1aa:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1ae:	ed9d 0a00 	vldr	s0, [sp]
 800b1b2:	f000 f863 	bl	800b27c <__kernel_cosf>
 800b1b6:	e7eb      	b.n	800b190 <cosf+0x28>
 800b1b8:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1bc:	ed9d 0a00 	vldr	s0, [sp]
 800b1c0:	f000 f8b4 	bl	800b32c <__kernel_sinf>
 800b1c4:	eeb1 0a40 	vneg.f32	s0, s0
 800b1c8:	e7e2      	b.n	800b190 <cosf+0x28>
 800b1ca:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1ce:	ed9d 0a00 	vldr	s0, [sp]
 800b1d2:	f000 f853 	bl	800b27c <__kernel_cosf>
 800b1d6:	e7f5      	b.n	800b1c4 <cosf+0x5c>
 800b1d8:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1dc:	ed9d 0a00 	vldr	s0, [sp]
 800b1e0:	2001      	movs	r0, #1
 800b1e2:	f000 f8a3 	bl	800b32c <__kernel_sinf>
 800b1e6:	e7d3      	b.n	800b190 <cosf+0x28>
 800b1e8:	3f490fd8 	.word	0x3f490fd8
 800b1ec:	00000000 	.word	0x00000000

0800b1f0 <sinf>:
 800b1f0:	ee10 3a10 	vmov	r3, s0
 800b1f4:	b507      	push	{r0, r1, r2, lr}
 800b1f6:	4a1f      	ldr	r2, [pc, #124]	@ (800b274 <sinf+0x84>)
 800b1f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d807      	bhi.n	800b210 <sinf+0x20>
 800b200:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b278 <sinf+0x88>
 800b204:	2000      	movs	r0, #0
 800b206:	b003      	add	sp, #12
 800b208:	f85d eb04 	ldr.w	lr, [sp], #4
 800b20c:	f000 b88e 	b.w	800b32c <__kernel_sinf>
 800b210:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b214:	d304      	bcc.n	800b220 <sinf+0x30>
 800b216:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b21a:	b003      	add	sp, #12
 800b21c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b220:	4668      	mov	r0, sp
 800b222:	f000 f8cb 	bl	800b3bc <__ieee754_rem_pio2f>
 800b226:	f000 0003 	and.w	r0, r0, #3
 800b22a:	2801      	cmp	r0, #1
 800b22c:	d00a      	beq.n	800b244 <sinf+0x54>
 800b22e:	2802      	cmp	r0, #2
 800b230:	d00f      	beq.n	800b252 <sinf+0x62>
 800b232:	b9c0      	cbnz	r0, 800b266 <sinf+0x76>
 800b234:	eddd 0a01 	vldr	s1, [sp, #4]
 800b238:	ed9d 0a00 	vldr	s0, [sp]
 800b23c:	2001      	movs	r0, #1
 800b23e:	f000 f875 	bl	800b32c <__kernel_sinf>
 800b242:	e7ea      	b.n	800b21a <sinf+0x2a>
 800b244:	eddd 0a01 	vldr	s1, [sp, #4]
 800b248:	ed9d 0a00 	vldr	s0, [sp]
 800b24c:	f000 f816 	bl	800b27c <__kernel_cosf>
 800b250:	e7e3      	b.n	800b21a <sinf+0x2a>
 800b252:	eddd 0a01 	vldr	s1, [sp, #4]
 800b256:	ed9d 0a00 	vldr	s0, [sp]
 800b25a:	2001      	movs	r0, #1
 800b25c:	f000 f866 	bl	800b32c <__kernel_sinf>
 800b260:	eeb1 0a40 	vneg.f32	s0, s0
 800b264:	e7d9      	b.n	800b21a <sinf+0x2a>
 800b266:	eddd 0a01 	vldr	s1, [sp, #4]
 800b26a:	ed9d 0a00 	vldr	s0, [sp]
 800b26e:	f000 f805 	bl	800b27c <__kernel_cosf>
 800b272:	e7f5      	b.n	800b260 <sinf+0x70>
 800b274:	3f490fd8 	.word	0x3f490fd8
 800b278:	00000000 	.word	0x00000000

0800b27c <__kernel_cosf>:
 800b27c:	ee10 3a10 	vmov	r3, s0
 800b280:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b284:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b288:	eef0 6a40 	vmov.f32	s13, s0
 800b28c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b290:	d204      	bcs.n	800b29c <__kernel_cosf+0x20>
 800b292:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b296:	ee17 2a90 	vmov	r2, s15
 800b29a:	b342      	cbz	r2, 800b2ee <__kernel_cosf+0x72>
 800b29c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b2a0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b30c <__kernel_cosf+0x90>
 800b2a4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b310 <__kernel_cosf+0x94>
 800b2a8:	4a1a      	ldr	r2, [pc, #104]	@ (800b314 <__kernel_cosf+0x98>)
 800b2aa:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b318 <__kernel_cosf+0x9c>
 800b2b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b2b8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b31c <__kernel_cosf+0xa0>
 800b2bc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b2c0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b320 <__kernel_cosf+0xa4>
 800b2c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b2c8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b324 <__kernel_cosf+0xa8>
 800b2cc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b2d0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b2d4:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b2d8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b2dc:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b2e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2e4:	d804      	bhi.n	800b2f0 <__kernel_cosf+0x74>
 800b2e6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b2ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b2ee:	4770      	bx	lr
 800b2f0:	4a0d      	ldr	r2, [pc, #52]	@ (800b328 <__kernel_cosf+0xac>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	bf9a      	itte	ls
 800b2f6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b2fa:	ee07 3a10 	vmovls	s14, r3
 800b2fe:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b302:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b30a:	e7ec      	b.n	800b2e6 <__kernel_cosf+0x6a>
 800b30c:	ad47d74e 	.word	0xad47d74e
 800b310:	310f74f6 	.word	0x310f74f6
 800b314:	3e999999 	.word	0x3e999999
 800b318:	b493f27c 	.word	0xb493f27c
 800b31c:	37d00d01 	.word	0x37d00d01
 800b320:	bab60b61 	.word	0xbab60b61
 800b324:	3d2aaaab 	.word	0x3d2aaaab
 800b328:	3f480000 	.word	0x3f480000

0800b32c <__kernel_sinf>:
 800b32c:	ee10 3a10 	vmov	r3, s0
 800b330:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b334:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b338:	d204      	bcs.n	800b344 <__kernel_sinf+0x18>
 800b33a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b33e:	ee17 3a90 	vmov	r3, s15
 800b342:	b35b      	cbz	r3, 800b39c <__kernel_sinf+0x70>
 800b344:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b348:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b3a0 <__kernel_sinf+0x74>
 800b34c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b3a4 <__kernel_sinf+0x78>
 800b350:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b354:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b3a8 <__kernel_sinf+0x7c>
 800b358:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b35c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b3ac <__kernel_sinf+0x80>
 800b360:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b364:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b3b0 <__kernel_sinf+0x84>
 800b368:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b36c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b370:	b930      	cbnz	r0, 800b380 <__kernel_sinf+0x54>
 800b372:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b3b4 <__kernel_sinf+0x88>
 800b376:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b37a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b37e:	4770      	bx	lr
 800b380:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b384:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b388:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b38c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b390:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b3b8 <__kernel_sinf+0x8c>
 800b394:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b398:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	2f2ec9d3 	.word	0x2f2ec9d3
 800b3a4:	b2d72f34 	.word	0xb2d72f34
 800b3a8:	3638ef1b 	.word	0x3638ef1b
 800b3ac:	b9500d01 	.word	0xb9500d01
 800b3b0:	3c088889 	.word	0x3c088889
 800b3b4:	be2aaaab 	.word	0xbe2aaaab
 800b3b8:	3e2aaaab 	.word	0x3e2aaaab

0800b3bc <__ieee754_rem_pio2f>:
 800b3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3be:	ee10 6a10 	vmov	r6, s0
 800b3c2:	4b88      	ldr	r3, [pc, #544]	@ (800b5e4 <__ieee754_rem_pio2f+0x228>)
 800b3c4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b3c8:	429d      	cmp	r5, r3
 800b3ca:	b087      	sub	sp, #28
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	d805      	bhi.n	800b3dc <__ieee754_rem_pio2f+0x20>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	ed80 0a00 	vstr	s0, [r0]
 800b3d6:	6043      	str	r3, [r0, #4]
 800b3d8:	2000      	movs	r0, #0
 800b3da:	e022      	b.n	800b422 <__ieee754_rem_pio2f+0x66>
 800b3dc:	4b82      	ldr	r3, [pc, #520]	@ (800b5e8 <__ieee754_rem_pio2f+0x22c>)
 800b3de:	429d      	cmp	r5, r3
 800b3e0:	d83a      	bhi.n	800b458 <__ieee754_rem_pio2f+0x9c>
 800b3e2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b3e6:	2e00      	cmp	r6, #0
 800b3e8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b5ec <__ieee754_rem_pio2f+0x230>
 800b3ec:	4a80      	ldr	r2, [pc, #512]	@ (800b5f0 <__ieee754_rem_pio2f+0x234>)
 800b3ee:	f023 030f 	bic.w	r3, r3, #15
 800b3f2:	dd18      	ble.n	800b426 <__ieee754_rem_pio2f+0x6a>
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b3fa:	bf09      	itett	eq
 800b3fc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b5f4 <__ieee754_rem_pio2f+0x238>
 800b400:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b5f8 <__ieee754_rem_pio2f+0x23c>
 800b404:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b5fc <__ieee754_rem_pio2f+0x240>
 800b408:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b40c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b410:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b414:	ed80 7a00 	vstr	s14, [r0]
 800b418:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b41c:	edc0 7a01 	vstr	s15, [r0, #4]
 800b420:	2001      	movs	r0, #1
 800b422:	b007      	add	sp, #28
 800b424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b426:	4293      	cmp	r3, r2
 800b428:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b42c:	bf09      	itett	eq
 800b42e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b5f4 <__ieee754_rem_pio2f+0x238>
 800b432:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b5f8 <__ieee754_rem_pio2f+0x23c>
 800b436:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b5fc <__ieee754_rem_pio2f+0x240>
 800b43a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b43e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b442:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b446:	ed80 7a00 	vstr	s14, [r0]
 800b44a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b44e:	edc0 7a01 	vstr	s15, [r0, #4]
 800b452:	f04f 30ff 	mov.w	r0, #4294967295
 800b456:	e7e4      	b.n	800b422 <__ieee754_rem_pio2f+0x66>
 800b458:	4b69      	ldr	r3, [pc, #420]	@ (800b600 <__ieee754_rem_pio2f+0x244>)
 800b45a:	429d      	cmp	r5, r3
 800b45c:	d873      	bhi.n	800b546 <__ieee754_rem_pio2f+0x18a>
 800b45e:	f000 f8dd 	bl	800b61c <fabsf>
 800b462:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b604 <__ieee754_rem_pio2f+0x248>
 800b466:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b46a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b46e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b476:	ee17 0a90 	vmov	r0, s15
 800b47a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b5ec <__ieee754_rem_pio2f+0x230>
 800b47e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b482:	281f      	cmp	r0, #31
 800b484:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b5f8 <__ieee754_rem_pio2f+0x23c>
 800b488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b48c:	eeb1 6a47 	vneg.f32	s12, s14
 800b490:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b494:	ee16 1a90 	vmov	r1, s13
 800b498:	dc09      	bgt.n	800b4ae <__ieee754_rem_pio2f+0xf2>
 800b49a:	4a5b      	ldr	r2, [pc, #364]	@ (800b608 <__ieee754_rem_pio2f+0x24c>)
 800b49c:	1e47      	subs	r7, r0, #1
 800b49e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b4a2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b4a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d107      	bne.n	800b4be <__ieee754_rem_pio2f+0x102>
 800b4ae:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b4b2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b4b6:	2a08      	cmp	r2, #8
 800b4b8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b4bc:	dc14      	bgt.n	800b4e8 <__ieee754_rem_pio2f+0x12c>
 800b4be:	6021      	str	r1, [r4, #0]
 800b4c0:	ed94 7a00 	vldr	s14, [r4]
 800b4c4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b4c8:	2e00      	cmp	r6, #0
 800b4ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b4ce:	ed84 0a01 	vstr	s0, [r4, #4]
 800b4d2:	daa6      	bge.n	800b422 <__ieee754_rem_pio2f+0x66>
 800b4d4:	eeb1 7a47 	vneg.f32	s14, s14
 800b4d8:	eeb1 0a40 	vneg.f32	s0, s0
 800b4dc:	ed84 7a00 	vstr	s14, [r4]
 800b4e0:	ed84 0a01 	vstr	s0, [r4, #4]
 800b4e4:	4240      	negs	r0, r0
 800b4e6:	e79c      	b.n	800b422 <__ieee754_rem_pio2f+0x66>
 800b4e8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b5f4 <__ieee754_rem_pio2f+0x238>
 800b4ec:	eef0 6a40 	vmov.f32	s13, s0
 800b4f0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b4f4:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b4f8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b4fc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b5fc <__ieee754_rem_pio2f+0x240>
 800b500:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b504:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b508:	ee15 2a90 	vmov	r2, s11
 800b50c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b510:	1a5b      	subs	r3, r3, r1
 800b512:	2b19      	cmp	r3, #25
 800b514:	dc04      	bgt.n	800b520 <__ieee754_rem_pio2f+0x164>
 800b516:	edc4 5a00 	vstr	s11, [r4]
 800b51a:	eeb0 0a66 	vmov.f32	s0, s13
 800b51e:	e7cf      	b.n	800b4c0 <__ieee754_rem_pio2f+0x104>
 800b520:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b60c <__ieee754_rem_pio2f+0x250>
 800b524:	eeb0 0a66 	vmov.f32	s0, s13
 800b528:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b52c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b530:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b610 <__ieee754_rem_pio2f+0x254>
 800b534:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b538:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b53c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b540:	ed84 7a00 	vstr	s14, [r4]
 800b544:	e7bc      	b.n	800b4c0 <__ieee754_rem_pio2f+0x104>
 800b546:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b54a:	d306      	bcc.n	800b55a <__ieee754_rem_pio2f+0x19e>
 800b54c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b550:	edc0 7a01 	vstr	s15, [r0, #4]
 800b554:	edc0 7a00 	vstr	s15, [r0]
 800b558:	e73e      	b.n	800b3d8 <__ieee754_rem_pio2f+0x1c>
 800b55a:	15ea      	asrs	r2, r5, #23
 800b55c:	3a86      	subs	r2, #134	@ 0x86
 800b55e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b562:	ee07 3a90 	vmov	s15, r3
 800b566:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b56a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b614 <__ieee754_rem_pio2f+0x258>
 800b56e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b572:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b576:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b57a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b57e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b582:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b586:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b58a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b58e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b592:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59a:	edcd 7a05 	vstr	s15, [sp, #20]
 800b59e:	d11e      	bne.n	800b5de <__ieee754_rem_pio2f+0x222>
 800b5a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a8:	bf0c      	ite	eq
 800b5aa:	2301      	moveq	r3, #1
 800b5ac:	2302      	movne	r3, #2
 800b5ae:	491a      	ldr	r1, [pc, #104]	@ (800b618 <__ieee754_rem_pio2f+0x25c>)
 800b5b0:	9101      	str	r1, [sp, #4]
 800b5b2:	2102      	movs	r1, #2
 800b5b4:	9100      	str	r1, [sp, #0]
 800b5b6:	a803      	add	r0, sp, #12
 800b5b8:	4621      	mov	r1, r4
 800b5ba:	f000 f89d 	bl	800b6f8 <__kernel_rem_pio2f>
 800b5be:	2e00      	cmp	r6, #0
 800b5c0:	f6bf af2f 	bge.w	800b422 <__ieee754_rem_pio2f+0x66>
 800b5c4:	edd4 7a00 	vldr	s15, [r4]
 800b5c8:	eef1 7a67 	vneg.f32	s15, s15
 800b5cc:	edc4 7a00 	vstr	s15, [r4]
 800b5d0:	edd4 7a01 	vldr	s15, [r4, #4]
 800b5d4:	eef1 7a67 	vneg.f32	s15, s15
 800b5d8:	edc4 7a01 	vstr	s15, [r4, #4]
 800b5dc:	e782      	b.n	800b4e4 <__ieee754_rem_pio2f+0x128>
 800b5de:	2303      	movs	r3, #3
 800b5e0:	e7e5      	b.n	800b5ae <__ieee754_rem_pio2f+0x1f2>
 800b5e2:	bf00      	nop
 800b5e4:	3f490fd8 	.word	0x3f490fd8
 800b5e8:	4016cbe3 	.word	0x4016cbe3
 800b5ec:	3fc90f80 	.word	0x3fc90f80
 800b5f0:	3fc90fd0 	.word	0x3fc90fd0
 800b5f4:	37354400 	.word	0x37354400
 800b5f8:	37354443 	.word	0x37354443
 800b5fc:	2e85a308 	.word	0x2e85a308
 800b600:	43490f80 	.word	0x43490f80
 800b604:	3f22f984 	.word	0x3f22f984
 800b608:	0800bca8 	.word	0x0800bca8
 800b60c:	2e85a300 	.word	0x2e85a300
 800b610:	248d3132 	.word	0x248d3132
 800b614:	43800000 	.word	0x43800000
 800b618:	0800bd28 	.word	0x0800bd28

0800b61c <fabsf>:
 800b61c:	ee10 3a10 	vmov	r3, s0
 800b620:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b624:	ee00 3a10 	vmov	s0, r3
 800b628:	4770      	bx	lr
	...

0800b62c <scalbnf>:
 800b62c:	ee10 3a10 	vmov	r3, s0
 800b630:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b634:	d02b      	beq.n	800b68e <scalbnf+0x62>
 800b636:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b63a:	d302      	bcc.n	800b642 <scalbnf+0x16>
 800b63c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b640:	4770      	bx	lr
 800b642:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b646:	d123      	bne.n	800b690 <scalbnf+0x64>
 800b648:	4b24      	ldr	r3, [pc, #144]	@ (800b6dc <scalbnf+0xb0>)
 800b64a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b6e0 <scalbnf+0xb4>
 800b64e:	4298      	cmp	r0, r3
 800b650:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b654:	db17      	blt.n	800b686 <scalbnf+0x5a>
 800b656:	ee10 3a10 	vmov	r3, s0
 800b65a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b65e:	3a19      	subs	r2, #25
 800b660:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b664:	4288      	cmp	r0, r1
 800b666:	dd15      	ble.n	800b694 <scalbnf+0x68>
 800b668:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b6e4 <scalbnf+0xb8>
 800b66c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b6e8 <scalbnf+0xbc>
 800b670:	ee10 3a10 	vmov	r3, s0
 800b674:	eeb0 7a67 	vmov.f32	s14, s15
 800b678:	2b00      	cmp	r3, #0
 800b67a:	bfb8      	it	lt
 800b67c:	eef0 7a66 	vmovlt.f32	s15, s13
 800b680:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b684:	4770      	bx	lr
 800b686:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b6ec <scalbnf+0xc0>
 800b68a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b68e:	4770      	bx	lr
 800b690:	0dd2      	lsrs	r2, r2, #23
 800b692:	e7e5      	b.n	800b660 <scalbnf+0x34>
 800b694:	4410      	add	r0, r2
 800b696:	28fe      	cmp	r0, #254	@ 0xfe
 800b698:	dce6      	bgt.n	800b668 <scalbnf+0x3c>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	dd06      	ble.n	800b6ac <scalbnf+0x80>
 800b69e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b6a2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b6a6:	ee00 3a10 	vmov	s0, r3
 800b6aa:	4770      	bx	lr
 800b6ac:	f110 0f16 	cmn.w	r0, #22
 800b6b0:	da09      	bge.n	800b6c6 <scalbnf+0x9a>
 800b6b2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b6ec <scalbnf+0xc0>
 800b6b6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b6f0 <scalbnf+0xc4>
 800b6ba:	ee10 3a10 	vmov	r3, s0
 800b6be:	eeb0 7a67 	vmov.f32	s14, s15
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	e7d9      	b.n	800b67a <scalbnf+0x4e>
 800b6c6:	3019      	adds	r0, #25
 800b6c8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b6cc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b6d0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b6f4 <scalbnf+0xc8>
 800b6d4:	ee07 3a90 	vmov	s15, r3
 800b6d8:	e7d7      	b.n	800b68a <scalbnf+0x5e>
 800b6da:	bf00      	nop
 800b6dc:	ffff3cb0 	.word	0xffff3cb0
 800b6e0:	4c000000 	.word	0x4c000000
 800b6e4:	7149f2ca 	.word	0x7149f2ca
 800b6e8:	f149f2ca 	.word	0xf149f2ca
 800b6ec:	0da24260 	.word	0x0da24260
 800b6f0:	8da24260 	.word	0x8da24260
 800b6f4:	33000000 	.word	0x33000000

0800b6f8 <__kernel_rem_pio2f>:
 800b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fc:	ed2d 8b04 	vpush	{d8-d9}
 800b700:	b0d9      	sub	sp, #356	@ 0x164
 800b702:	4690      	mov	r8, r2
 800b704:	9001      	str	r0, [sp, #4]
 800b706:	4ab6      	ldr	r2, [pc, #728]	@ (800b9e0 <__kernel_rem_pio2f+0x2e8>)
 800b708:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b70a:	f118 0f04 	cmn.w	r8, #4
 800b70e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b712:	460f      	mov	r7, r1
 800b714:	f103 3bff 	add.w	fp, r3, #4294967295
 800b718:	db26      	blt.n	800b768 <__kernel_rem_pio2f+0x70>
 800b71a:	f1b8 0203 	subs.w	r2, r8, #3
 800b71e:	bf48      	it	mi
 800b720:	f108 0204 	addmi.w	r2, r8, #4
 800b724:	10d2      	asrs	r2, r2, #3
 800b726:	1c55      	adds	r5, r2, #1
 800b728:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b72a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800b9f0 <__kernel_rem_pio2f+0x2f8>
 800b72e:	00e8      	lsls	r0, r5, #3
 800b730:	eba2 060b 	sub.w	r6, r2, fp
 800b734:	9002      	str	r0, [sp, #8]
 800b736:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b73a:	eb0a 0c0b 	add.w	ip, sl, fp
 800b73e:	ac1c      	add	r4, sp, #112	@ 0x70
 800b740:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b744:	2000      	movs	r0, #0
 800b746:	4560      	cmp	r0, ip
 800b748:	dd10      	ble.n	800b76c <__kernel_rem_pio2f+0x74>
 800b74a:	a91c      	add	r1, sp, #112	@ 0x70
 800b74c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b750:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b754:	2600      	movs	r6, #0
 800b756:	4556      	cmp	r6, sl
 800b758:	dc24      	bgt.n	800b7a4 <__kernel_rem_pio2f+0xac>
 800b75a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b75e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800b9f0 <__kernel_rem_pio2f+0x2f8>
 800b762:	4684      	mov	ip, r0
 800b764:	2400      	movs	r4, #0
 800b766:	e016      	b.n	800b796 <__kernel_rem_pio2f+0x9e>
 800b768:	2200      	movs	r2, #0
 800b76a:	e7dc      	b.n	800b726 <__kernel_rem_pio2f+0x2e>
 800b76c:	42c6      	cmn	r6, r0
 800b76e:	bf5d      	ittte	pl
 800b770:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b774:	ee07 1a90 	vmovpl	s15, r1
 800b778:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b77c:	eef0 7a47 	vmovmi.f32	s15, s14
 800b780:	ece4 7a01 	vstmia	r4!, {s15}
 800b784:	3001      	adds	r0, #1
 800b786:	e7de      	b.n	800b746 <__kernel_rem_pio2f+0x4e>
 800b788:	ecfe 6a01 	vldmia	lr!, {s13}
 800b78c:	ed3c 7a01 	vldmdb	ip!, {s14}
 800b790:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b794:	3401      	adds	r4, #1
 800b796:	455c      	cmp	r4, fp
 800b798:	ddf6      	ble.n	800b788 <__kernel_rem_pio2f+0x90>
 800b79a:	ece9 7a01 	vstmia	r9!, {s15}
 800b79e:	3601      	adds	r6, #1
 800b7a0:	3004      	adds	r0, #4
 800b7a2:	e7d8      	b.n	800b756 <__kernel_rem_pio2f+0x5e>
 800b7a4:	a908      	add	r1, sp, #32
 800b7a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7aa:	9104      	str	r1, [sp, #16]
 800b7ac:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b7ae:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800b9ec <__kernel_rem_pio2f+0x2f4>
 800b7b2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800b9e8 <__kernel_rem_pio2f+0x2f0>
 800b7b6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b7ba:	9203      	str	r2, [sp, #12]
 800b7bc:	4654      	mov	r4, sl
 800b7be:	00a2      	lsls	r2, r4, #2
 800b7c0:	9205      	str	r2, [sp, #20]
 800b7c2:	aa58      	add	r2, sp, #352	@ 0x160
 800b7c4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b7c8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b7cc:	a944      	add	r1, sp, #272	@ 0x110
 800b7ce:	aa08      	add	r2, sp, #32
 800b7d0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b7d4:	4694      	mov	ip, r2
 800b7d6:	4626      	mov	r6, r4
 800b7d8:	2e00      	cmp	r6, #0
 800b7da:	dc4c      	bgt.n	800b876 <__kernel_rem_pio2f+0x17e>
 800b7dc:	4628      	mov	r0, r5
 800b7de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b7e2:	f7ff ff23 	bl	800b62c <scalbnf>
 800b7e6:	eeb0 8a40 	vmov.f32	s16, s0
 800b7ea:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b7ee:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b7f2:	f000 f9e9 	bl	800bbc8 <floorf>
 800b7f6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b7fa:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b7fe:	2d00      	cmp	r5, #0
 800b800:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b804:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b808:	ee17 9a90 	vmov	r9, s15
 800b80c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b810:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b814:	dd41      	ble.n	800b89a <__kernel_rem_pio2f+0x1a2>
 800b816:	f104 3cff 	add.w	ip, r4, #4294967295
 800b81a:	a908      	add	r1, sp, #32
 800b81c:	f1c5 0e08 	rsb	lr, r5, #8
 800b820:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b824:	fa46 f00e 	asr.w	r0, r6, lr
 800b828:	4481      	add	r9, r0
 800b82a:	fa00 f00e 	lsl.w	r0, r0, lr
 800b82e:	1a36      	subs	r6, r6, r0
 800b830:	f1c5 0007 	rsb	r0, r5, #7
 800b834:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b838:	4106      	asrs	r6, r0
 800b83a:	2e00      	cmp	r6, #0
 800b83c:	dd3c      	ble.n	800b8b8 <__kernel_rem_pio2f+0x1c0>
 800b83e:	f04f 0e00 	mov.w	lr, #0
 800b842:	f109 0901 	add.w	r9, r9, #1
 800b846:	4670      	mov	r0, lr
 800b848:	4574      	cmp	r4, lr
 800b84a:	dc68      	bgt.n	800b91e <__kernel_rem_pio2f+0x226>
 800b84c:	2d00      	cmp	r5, #0
 800b84e:	dd03      	ble.n	800b858 <__kernel_rem_pio2f+0x160>
 800b850:	2d01      	cmp	r5, #1
 800b852:	d074      	beq.n	800b93e <__kernel_rem_pio2f+0x246>
 800b854:	2d02      	cmp	r5, #2
 800b856:	d07d      	beq.n	800b954 <__kernel_rem_pio2f+0x25c>
 800b858:	2e02      	cmp	r6, #2
 800b85a:	d12d      	bne.n	800b8b8 <__kernel_rem_pio2f+0x1c0>
 800b85c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b860:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b864:	b340      	cbz	r0, 800b8b8 <__kernel_rem_pio2f+0x1c0>
 800b866:	4628      	mov	r0, r5
 800b868:	9306      	str	r3, [sp, #24]
 800b86a:	f7ff fedf 	bl	800b62c <scalbnf>
 800b86e:	9b06      	ldr	r3, [sp, #24]
 800b870:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b874:	e020      	b.n	800b8b8 <__kernel_rem_pio2f+0x1c0>
 800b876:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b87a:	3e01      	subs	r6, #1
 800b87c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b884:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b888:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b88c:	ecac 0a01 	vstmia	ip!, {s0}
 800b890:	ed30 0a01 	vldmdb	r0!, {s0}
 800b894:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b898:	e79e      	b.n	800b7d8 <__kernel_rem_pio2f+0xe0>
 800b89a:	d105      	bne.n	800b8a8 <__kernel_rem_pio2f+0x1b0>
 800b89c:	1e60      	subs	r0, r4, #1
 800b89e:	a908      	add	r1, sp, #32
 800b8a0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b8a4:	11f6      	asrs	r6, r6, #7
 800b8a6:	e7c8      	b.n	800b83a <__kernel_rem_pio2f+0x142>
 800b8a8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b8ac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b4:	da31      	bge.n	800b91a <__kernel_rem_pio2f+0x222>
 800b8b6:	2600      	movs	r6, #0
 800b8b8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c0:	f040 8098 	bne.w	800b9f4 <__kernel_rem_pio2f+0x2fc>
 800b8c4:	1e60      	subs	r0, r4, #1
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	4550      	cmp	r0, sl
 800b8ca:	da4b      	bge.n	800b964 <__kernel_rem_pio2f+0x26c>
 800b8cc:	2a00      	cmp	r2, #0
 800b8ce:	d065      	beq.n	800b99c <__kernel_rem_pio2f+0x2a4>
 800b8d0:	3c01      	subs	r4, #1
 800b8d2:	ab08      	add	r3, sp, #32
 800b8d4:	3d08      	subs	r5, #8
 800b8d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d0f8      	beq.n	800b8d0 <__kernel_rem_pio2f+0x1d8>
 800b8de:	4628      	mov	r0, r5
 800b8e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b8e4:	f7ff fea2 	bl	800b62c <scalbnf>
 800b8e8:	1c63      	adds	r3, r4, #1
 800b8ea:	aa44      	add	r2, sp, #272	@ 0x110
 800b8ec:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800b9ec <__kernel_rem_pio2f+0x2f4>
 800b8f0:	0099      	lsls	r1, r3, #2
 800b8f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b8f6:	4623      	mov	r3, r4
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f280 80a9 	bge.w	800ba50 <__kernel_rem_pio2f+0x358>
 800b8fe:	4623      	mov	r3, r4
 800b900:	2b00      	cmp	r3, #0
 800b902:	f2c0 80c7 	blt.w	800ba94 <__kernel_rem_pio2f+0x39c>
 800b906:	aa44      	add	r2, sp, #272	@ 0x110
 800b908:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b90c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800b9e4 <__kernel_rem_pio2f+0x2ec>
 800b910:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800b9f0 <__kernel_rem_pio2f+0x2f8>
 800b914:	2000      	movs	r0, #0
 800b916:	1ae2      	subs	r2, r4, r3
 800b918:	e0b1      	b.n	800ba7e <__kernel_rem_pio2f+0x386>
 800b91a:	2602      	movs	r6, #2
 800b91c:	e78f      	b.n	800b83e <__kernel_rem_pio2f+0x146>
 800b91e:	f852 1b04 	ldr.w	r1, [r2], #4
 800b922:	b948      	cbnz	r0, 800b938 <__kernel_rem_pio2f+0x240>
 800b924:	b121      	cbz	r1, 800b930 <__kernel_rem_pio2f+0x238>
 800b926:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b92a:	f842 1c04 	str.w	r1, [r2, #-4]
 800b92e:	2101      	movs	r1, #1
 800b930:	f10e 0e01 	add.w	lr, lr, #1
 800b934:	4608      	mov	r0, r1
 800b936:	e787      	b.n	800b848 <__kernel_rem_pio2f+0x150>
 800b938:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b93c:	e7f5      	b.n	800b92a <__kernel_rem_pio2f+0x232>
 800b93e:	f104 3cff 	add.w	ip, r4, #4294967295
 800b942:	aa08      	add	r2, sp, #32
 800b944:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b948:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b94c:	a908      	add	r1, sp, #32
 800b94e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b952:	e781      	b.n	800b858 <__kernel_rem_pio2f+0x160>
 800b954:	f104 3cff 	add.w	ip, r4, #4294967295
 800b958:	aa08      	add	r2, sp, #32
 800b95a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b95e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b962:	e7f3      	b.n	800b94c <__kernel_rem_pio2f+0x254>
 800b964:	a908      	add	r1, sp, #32
 800b966:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b96a:	3801      	subs	r0, #1
 800b96c:	430a      	orrs	r2, r1
 800b96e:	e7ab      	b.n	800b8c8 <__kernel_rem_pio2f+0x1d0>
 800b970:	3201      	adds	r2, #1
 800b972:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b976:	2e00      	cmp	r6, #0
 800b978:	d0fa      	beq.n	800b970 <__kernel_rem_pio2f+0x278>
 800b97a:	9905      	ldr	r1, [sp, #20]
 800b97c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b980:	eb0d 0001 	add.w	r0, sp, r1
 800b984:	18e6      	adds	r6, r4, r3
 800b986:	a91c      	add	r1, sp, #112	@ 0x70
 800b988:	f104 0c01 	add.w	ip, r4, #1
 800b98c:	384c      	subs	r0, #76	@ 0x4c
 800b98e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800b992:	4422      	add	r2, r4
 800b994:	4562      	cmp	r2, ip
 800b996:	da04      	bge.n	800b9a2 <__kernel_rem_pio2f+0x2aa>
 800b998:	4614      	mov	r4, r2
 800b99a:	e710      	b.n	800b7be <__kernel_rem_pio2f+0xc6>
 800b99c:	9804      	ldr	r0, [sp, #16]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	e7e7      	b.n	800b972 <__kernel_rem_pio2f+0x27a>
 800b9a2:	9903      	ldr	r1, [sp, #12]
 800b9a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b9a8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800b9ac:	9105      	str	r1, [sp, #20]
 800b9ae:	ee07 1a90 	vmov	s15, r1
 800b9b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9b6:	2400      	movs	r4, #0
 800b9b8:	ece6 7a01 	vstmia	r6!, {s15}
 800b9bc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800b9f0 <__kernel_rem_pio2f+0x2f8>
 800b9c0:	46b1      	mov	r9, r6
 800b9c2:	455c      	cmp	r4, fp
 800b9c4:	dd04      	ble.n	800b9d0 <__kernel_rem_pio2f+0x2d8>
 800b9c6:	ece0 7a01 	vstmia	r0!, {s15}
 800b9ca:	f10c 0c01 	add.w	ip, ip, #1
 800b9ce:	e7e1      	b.n	800b994 <__kernel_rem_pio2f+0x29c>
 800b9d0:	ecfe 6a01 	vldmia	lr!, {s13}
 800b9d4:	ed39 7a01 	vldmdb	r9!, {s14}
 800b9d8:	3401      	adds	r4, #1
 800b9da:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b9de:	e7f0      	b.n	800b9c2 <__kernel_rem_pio2f+0x2ca>
 800b9e0:	0800c06c 	.word	0x0800c06c
 800b9e4:	0800c040 	.word	0x0800c040
 800b9e8:	43800000 	.word	0x43800000
 800b9ec:	3b800000 	.word	0x3b800000
 800b9f0:	00000000 	.word	0x00000000
 800b9f4:	9b02      	ldr	r3, [sp, #8]
 800b9f6:	eeb0 0a48 	vmov.f32	s0, s16
 800b9fa:	eba3 0008 	sub.w	r0, r3, r8
 800b9fe:	f7ff fe15 	bl	800b62c <scalbnf>
 800ba02:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800b9e8 <__kernel_rem_pio2f+0x2f0>
 800ba06:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ba0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba0e:	db19      	blt.n	800ba44 <__kernel_rem_pio2f+0x34c>
 800ba10:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800b9ec <__kernel_rem_pio2f+0x2f4>
 800ba14:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ba18:	aa08      	add	r2, sp, #32
 800ba1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba1e:	3508      	adds	r5, #8
 800ba20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba24:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ba28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba2c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba30:	ee10 3a10 	vmov	r3, s0
 800ba34:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba38:	ee17 3a90 	vmov	r3, s15
 800ba3c:	3401      	adds	r4, #1
 800ba3e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba42:	e74c      	b.n	800b8de <__kernel_rem_pio2f+0x1e6>
 800ba44:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba48:	aa08      	add	r2, sp, #32
 800ba4a:	ee10 3a10 	vmov	r3, s0
 800ba4e:	e7f6      	b.n	800ba3e <__kernel_rem_pio2f+0x346>
 800ba50:	a808      	add	r0, sp, #32
 800ba52:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ba56:	9001      	str	r0, [sp, #4]
 800ba58:	ee07 0a90 	vmov	s15, r0
 800ba5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba60:	3b01      	subs	r3, #1
 800ba62:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ba66:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ba6a:	ed62 7a01 	vstmdb	r2!, {s15}
 800ba6e:	e743      	b.n	800b8f8 <__kernel_rem_pio2f+0x200>
 800ba70:	ecfc 6a01 	vldmia	ip!, {s13}
 800ba74:	ecb5 7a01 	vldmia	r5!, {s14}
 800ba78:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	4550      	cmp	r0, sl
 800ba80:	dc01      	bgt.n	800ba86 <__kernel_rem_pio2f+0x38e>
 800ba82:	4290      	cmp	r0, r2
 800ba84:	ddf4      	ble.n	800ba70 <__kernel_rem_pio2f+0x378>
 800ba86:	a858      	add	r0, sp, #352	@ 0x160
 800ba88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ba8c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ba90:	3b01      	subs	r3, #1
 800ba92:	e735      	b.n	800b900 <__kernel_rem_pio2f+0x208>
 800ba94:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	dc09      	bgt.n	800baae <__kernel_rem_pio2f+0x3b6>
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	dc27      	bgt.n	800baee <__kernel_rem_pio2f+0x3f6>
 800ba9e:	d040      	beq.n	800bb22 <__kernel_rem_pio2f+0x42a>
 800baa0:	f009 0007 	and.w	r0, r9, #7
 800baa4:	b059      	add	sp, #356	@ 0x164
 800baa6:	ecbd 8b04 	vpop	{d8-d9}
 800baaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baae:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800bab0:	2b03      	cmp	r3, #3
 800bab2:	d1f5      	bne.n	800baa0 <__kernel_rem_pio2f+0x3a8>
 800bab4:	aa30      	add	r2, sp, #192	@ 0xc0
 800bab6:	1f0b      	subs	r3, r1, #4
 800bab8:	4413      	add	r3, r2
 800baba:	461a      	mov	r2, r3
 800babc:	4620      	mov	r0, r4
 800babe:	2800      	cmp	r0, #0
 800bac0:	dc50      	bgt.n	800bb64 <__kernel_rem_pio2f+0x46c>
 800bac2:	4622      	mov	r2, r4
 800bac4:	2a01      	cmp	r2, #1
 800bac6:	dc5d      	bgt.n	800bb84 <__kernel_rem_pio2f+0x48c>
 800bac8:	ab30      	add	r3, sp, #192	@ 0xc0
 800baca:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800b9f0 <__kernel_rem_pio2f+0x2f8>
 800bace:	440b      	add	r3, r1
 800bad0:	2c01      	cmp	r4, #1
 800bad2:	dc67      	bgt.n	800bba4 <__kernel_rem_pio2f+0x4ac>
 800bad4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bad8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800badc:	2e00      	cmp	r6, #0
 800bade:	d167      	bne.n	800bbb0 <__kernel_rem_pio2f+0x4b8>
 800bae0:	edc7 6a00 	vstr	s13, [r7]
 800bae4:	ed87 7a01 	vstr	s14, [r7, #4]
 800bae8:	edc7 7a02 	vstr	s15, [r7, #8]
 800baec:	e7d8      	b.n	800baa0 <__kernel_rem_pio2f+0x3a8>
 800baee:	ab30      	add	r3, sp, #192	@ 0xc0
 800baf0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800b9f0 <__kernel_rem_pio2f+0x2f8>
 800baf4:	440b      	add	r3, r1
 800baf6:	4622      	mov	r2, r4
 800baf8:	2a00      	cmp	r2, #0
 800bafa:	da24      	bge.n	800bb46 <__kernel_rem_pio2f+0x44e>
 800bafc:	b34e      	cbz	r6, 800bb52 <__kernel_rem_pio2f+0x45a>
 800bafe:	eef1 7a47 	vneg.f32	s15, s14
 800bb02:	edc7 7a00 	vstr	s15, [r7]
 800bb06:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800bb0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb0e:	aa31      	add	r2, sp, #196	@ 0xc4
 800bb10:	2301      	movs	r3, #1
 800bb12:	429c      	cmp	r4, r3
 800bb14:	da20      	bge.n	800bb58 <__kernel_rem_pio2f+0x460>
 800bb16:	b10e      	cbz	r6, 800bb1c <__kernel_rem_pio2f+0x424>
 800bb18:	eef1 7a67 	vneg.f32	s15, s15
 800bb1c:	edc7 7a01 	vstr	s15, [r7, #4]
 800bb20:	e7be      	b.n	800baa0 <__kernel_rem_pio2f+0x3a8>
 800bb22:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb24:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800b9f0 <__kernel_rem_pio2f+0x2f8>
 800bb28:	440b      	add	r3, r1
 800bb2a:	2c00      	cmp	r4, #0
 800bb2c:	da05      	bge.n	800bb3a <__kernel_rem_pio2f+0x442>
 800bb2e:	b10e      	cbz	r6, 800bb34 <__kernel_rem_pio2f+0x43c>
 800bb30:	eef1 7a67 	vneg.f32	s15, s15
 800bb34:	edc7 7a00 	vstr	s15, [r7]
 800bb38:	e7b2      	b.n	800baa0 <__kernel_rem_pio2f+0x3a8>
 800bb3a:	ed33 7a01 	vldmdb	r3!, {s14}
 800bb3e:	3c01      	subs	r4, #1
 800bb40:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb44:	e7f1      	b.n	800bb2a <__kernel_rem_pio2f+0x432>
 800bb46:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb4a:	3a01      	subs	r2, #1
 800bb4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb50:	e7d2      	b.n	800baf8 <__kernel_rem_pio2f+0x400>
 800bb52:	eef0 7a47 	vmov.f32	s15, s14
 800bb56:	e7d4      	b.n	800bb02 <__kernel_rem_pio2f+0x40a>
 800bb58:	ecb2 7a01 	vldmia	r2!, {s14}
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb62:	e7d6      	b.n	800bb12 <__kernel_rem_pio2f+0x41a>
 800bb64:	ed72 7a01 	vldmdb	r2!, {s15}
 800bb68:	edd2 6a01 	vldr	s13, [r2, #4]
 800bb6c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb70:	3801      	subs	r0, #1
 800bb72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb76:	ed82 7a00 	vstr	s14, [r2]
 800bb7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb7e:	edc2 7a01 	vstr	s15, [r2, #4]
 800bb82:	e79c      	b.n	800babe <__kernel_rem_pio2f+0x3c6>
 800bb84:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb88:	edd3 6a01 	vldr	s13, [r3, #4]
 800bb8c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb90:	3a01      	subs	r2, #1
 800bb92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb96:	ed83 7a00 	vstr	s14, [r3]
 800bb9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb9e:	edc3 7a01 	vstr	s15, [r3, #4]
 800bba2:	e78f      	b.n	800bac4 <__kernel_rem_pio2f+0x3cc>
 800bba4:	ed33 7a01 	vldmdb	r3!, {s14}
 800bba8:	3c01      	subs	r4, #1
 800bbaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbae:	e78f      	b.n	800bad0 <__kernel_rem_pio2f+0x3d8>
 800bbb0:	eef1 6a66 	vneg.f32	s13, s13
 800bbb4:	eeb1 7a47 	vneg.f32	s14, s14
 800bbb8:	edc7 6a00 	vstr	s13, [r7]
 800bbbc:	ed87 7a01 	vstr	s14, [r7, #4]
 800bbc0:	eef1 7a67 	vneg.f32	s15, s15
 800bbc4:	e790      	b.n	800bae8 <__kernel_rem_pio2f+0x3f0>
 800bbc6:	bf00      	nop

0800bbc8 <floorf>:
 800bbc8:	ee10 3a10 	vmov	r3, s0
 800bbcc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bbd0:	3a7f      	subs	r2, #127	@ 0x7f
 800bbd2:	2a16      	cmp	r2, #22
 800bbd4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bbd8:	dc2b      	bgt.n	800bc32 <floorf+0x6a>
 800bbda:	2a00      	cmp	r2, #0
 800bbdc:	da12      	bge.n	800bc04 <floorf+0x3c>
 800bbde:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bc44 <floorf+0x7c>
 800bbe2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bbe6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bbea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbee:	dd06      	ble.n	800bbfe <floorf+0x36>
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	da24      	bge.n	800bc3e <floorf+0x76>
 800bbf4:	2900      	cmp	r1, #0
 800bbf6:	4b14      	ldr	r3, [pc, #80]	@ (800bc48 <floorf+0x80>)
 800bbf8:	bf08      	it	eq
 800bbfa:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bbfe:	ee00 3a10 	vmov	s0, r3
 800bc02:	4770      	bx	lr
 800bc04:	4911      	ldr	r1, [pc, #68]	@ (800bc4c <floorf+0x84>)
 800bc06:	4111      	asrs	r1, r2
 800bc08:	420b      	tst	r3, r1
 800bc0a:	d0fa      	beq.n	800bc02 <floorf+0x3a>
 800bc0c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bc44 <floorf+0x7c>
 800bc10:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc14:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc1c:	ddef      	ble.n	800bbfe <floorf+0x36>
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	bfbe      	ittt	lt
 800bc22:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bc26:	fa40 f202 	asrlt.w	r2, r0, r2
 800bc2a:	189b      	addlt	r3, r3, r2
 800bc2c:	ea23 0301 	bic.w	r3, r3, r1
 800bc30:	e7e5      	b.n	800bbfe <floorf+0x36>
 800bc32:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bc36:	d3e4      	bcc.n	800bc02 <floorf+0x3a>
 800bc38:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc3c:	4770      	bx	lr
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e7dd      	b.n	800bbfe <floorf+0x36>
 800bc42:	bf00      	nop
 800bc44:	7149f2ca 	.word	0x7149f2ca
 800bc48:	bf800000 	.word	0xbf800000
 800bc4c:	007fffff 	.word	0x007fffff

0800bc50 <_init>:
 800bc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc52:	bf00      	nop
 800bc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc56:	bc08      	pop	{r3}
 800bc58:	469e      	mov	lr, r3
 800bc5a:	4770      	bx	lr

0800bc5c <_fini>:
 800bc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5e:	bf00      	nop
 800bc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc62:	bc08      	pop	{r3}
 800bc64:	469e      	mov	lr, r3
 800bc66:	4770      	bx	lr
