
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba8c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800bc64  0800bc64  0000cc64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c074  0800c074  0000e20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c074  0800c074  0000d074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c07c  0800c07c  0000e20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c07c  0800c07c  0000d07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c080  0800c080  0000d080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800c084  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000103c  20000210  0800c290  0000e210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000124c  0800c290  0000e24c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017461  00000000  00000000  0000e23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf5  00000000  00000000  0002569d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00028298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e81  00000000  00000000  00029500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271ff  00000000  00000000  0002a381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fcd  00000000  00000000  00051580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffbe1  00000000  00000000  0006754d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016712e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005268  00000000  00000000  00167174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0016c3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000210 	.word	0x20000210
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bc4c 	.word	0x0800bc4c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000214 	.word	0x20000214
 8000214:	0800bc4c 	.word	0x0800bc4c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	@ 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c24:	d2ed      	bcs.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_uldivmod>:
 8000d80:	b953      	cbnz	r3, 8000d98 <__aeabi_uldivmod+0x18>
 8000d82:	b94a      	cbnz	r2, 8000d98 <__aeabi_uldivmod+0x18>
 8000d84:	2900      	cmp	r1, #0
 8000d86:	bf08      	it	eq
 8000d88:	2800      	cmpeq	r0, #0
 8000d8a:	bf1c      	itt	ne
 8000d8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d90:	f04f 30ff 	movne.w	r0, #4294967295
 8000d94:	f000 b988 	b.w	80010a8 <__aeabi_idiv0>
 8000d98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da0:	f000 f806 	bl	8000db0 <__udivmoddi4>
 8000da4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dac:	b004      	add	sp, #16
 8000dae:	4770      	bx	lr

08000db0 <__udivmoddi4>:
 8000db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db4:	9d08      	ldr	r5, [sp, #32]
 8000db6:	468e      	mov	lr, r1
 8000db8:	4604      	mov	r4, r0
 8000dba:	4688      	mov	r8, r1
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d14a      	bne.n	8000e56 <__udivmoddi4+0xa6>
 8000dc0:	428a      	cmp	r2, r1
 8000dc2:	4617      	mov	r7, r2
 8000dc4:	d962      	bls.n	8000e8c <__udivmoddi4+0xdc>
 8000dc6:	fab2 f682 	clz	r6, r2
 8000dca:	b14e      	cbz	r6, 8000de0 <__udivmoddi4+0x30>
 8000dcc:	f1c6 0320 	rsb	r3, r6, #32
 8000dd0:	fa01 f806 	lsl.w	r8, r1, r6
 8000dd4:	fa20 f303 	lsr.w	r3, r0, r3
 8000dd8:	40b7      	lsls	r7, r6
 8000dda:	ea43 0808 	orr.w	r8, r3, r8
 8000dde:	40b4      	lsls	r4, r6
 8000de0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de4:	fa1f fc87 	uxth.w	ip, r7
 8000de8:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dec:	0c23      	lsrs	r3, r4, #16
 8000dee:	fb0e 8811 	mls	r8, lr, r1, r8
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fb01 f20c 	mul.w	r2, r1, ip
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x62>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e04:	f080 80ea 	bcs.w	8000fdc <__udivmoddi4+0x22c>
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f240 80e7 	bls.w	8000fdc <__udivmoddi4+0x22c>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	443b      	add	r3, r7
 8000e12:	1a9a      	subs	r2, r3, r2
 8000e14:	b2a3      	uxth	r3, r4
 8000e16:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e1a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e22:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e26:	459c      	cmp	ip, r3
 8000e28:	d909      	bls.n	8000e3e <__udivmoddi4+0x8e>
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e30:	f080 80d6 	bcs.w	8000fe0 <__udivmoddi4+0x230>
 8000e34:	459c      	cmp	ip, r3
 8000e36:	f240 80d3 	bls.w	8000fe0 <__udivmoddi4+0x230>
 8000e3a:	443b      	add	r3, r7
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e42:	eba3 030c 	sub.w	r3, r3, ip
 8000e46:	2100      	movs	r1, #0
 8000e48:	b11d      	cbz	r5, 8000e52 <__udivmoddi4+0xa2>
 8000e4a:	40f3      	lsrs	r3, r6
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d905      	bls.n	8000e66 <__udivmoddi4+0xb6>
 8000e5a:	b10d      	cbz	r5, 8000e60 <__udivmoddi4+0xb0>
 8000e5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000e60:	2100      	movs	r1, #0
 8000e62:	4608      	mov	r0, r1
 8000e64:	e7f5      	b.n	8000e52 <__udivmoddi4+0xa2>
 8000e66:	fab3 f183 	clz	r1, r3
 8000e6a:	2900      	cmp	r1, #0
 8000e6c:	d146      	bne.n	8000efc <__udivmoddi4+0x14c>
 8000e6e:	4573      	cmp	r3, lr
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0xc8>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 8105 	bhi.w	8001082 <__udivmoddi4+0x2d2>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	4690      	mov	r8, r2
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0e5      	beq.n	8000e52 <__udivmoddi4+0xa2>
 8000e86:	e9c5 4800 	strd	r4, r8, [r5]
 8000e8a:	e7e2      	b.n	8000e52 <__udivmoddi4+0xa2>
 8000e8c:	2a00      	cmp	r2, #0
 8000e8e:	f000 8090 	beq.w	8000fb2 <__udivmoddi4+0x202>
 8000e92:	fab2 f682 	clz	r6, r2
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	f040 80a4 	bne.w	8000fe4 <__udivmoddi4+0x234>
 8000e9c:	1a8a      	subs	r2, r1, r2
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	b2bc      	uxth	r4, r7
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eae:	fb0e 221c 	mls	r2, lr, ip, r2
 8000eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000eb6:	fb04 f20c 	mul.w	r2, r4, ip
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x11e>
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ec4:	d202      	bcs.n	8000ecc <__udivmoddi4+0x11c>
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	f200 80e0 	bhi.w	800108c <__udivmoddi4+0x2dc>
 8000ecc:	46c4      	mov	ip, r8
 8000ece:	1a9b      	subs	r3, r3, r2
 8000ed0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ed4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ed8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000edc:	fb02 f404 	mul.w	r4, r2, r4
 8000ee0:	429c      	cmp	r4, r3
 8000ee2:	d907      	bls.n	8000ef4 <__udivmoddi4+0x144>
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eea:	d202      	bcs.n	8000ef2 <__udivmoddi4+0x142>
 8000eec:	429c      	cmp	r4, r3
 8000eee:	f200 80ca 	bhi.w	8001086 <__udivmoddi4+0x2d6>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	1b1b      	subs	r3, r3, r4
 8000ef6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000efa:	e7a5      	b.n	8000e48 <__udivmoddi4+0x98>
 8000efc:	f1c1 0620 	rsb	r6, r1, #32
 8000f00:	408b      	lsls	r3, r1
 8000f02:	fa22 f706 	lsr.w	r7, r2, r6
 8000f06:	431f      	orrs	r7, r3
 8000f08:	fa0e f401 	lsl.w	r4, lr, r1
 8000f0c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f10:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f14:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f18:	4323      	orrs	r3, r4
 8000f1a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f1e:	fa1f fc87 	uxth.w	ip, r7
 8000f22:	fbbe f0f9 	udiv	r0, lr, r9
 8000f26:	0c1c      	lsrs	r4, r3, #16
 8000f28:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f2c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f30:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	fa02 f201 	lsl.w	r2, r2, r1
 8000f3a:	d909      	bls.n	8000f50 <__udivmoddi4+0x1a0>
 8000f3c:	193c      	adds	r4, r7, r4
 8000f3e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f42:	f080 809c 	bcs.w	800107e <__udivmoddi4+0x2ce>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	f240 8099 	bls.w	800107e <__udivmoddi4+0x2ce>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	443c      	add	r4, r7
 8000f50:	eba4 040e 	sub.w	r4, r4, lr
 8000f54:	fa1f fe83 	uxth.w	lr, r3
 8000f58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f60:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f64:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f68:	45a4      	cmp	ip, r4
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x1ce>
 8000f6c:	193c      	adds	r4, r7, r4
 8000f6e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f72:	f080 8082 	bcs.w	800107a <__udivmoddi4+0x2ca>
 8000f76:	45a4      	cmp	ip, r4
 8000f78:	d97f      	bls.n	800107a <__udivmoddi4+0x2ca>
 8000f7a:	3b02      	subs	r3, #2
 8000f7c:	443c      	add	r4, r7
 8000f7e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f82:	eba4 040c 	sub.w	r4, r4, ip
 8000f86:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f8a:	4564      	cmp	r4, ip
 8000f8c:	4673      	mov	r3, lr
 8000f8e:	46e1      	mov	r9, ip
 8000f90:	d362      	bcc.n	8001058 <__udivmoddi4+0x2a8>
 8000f92:	d05f      	beq.n	8001054 <__udivmoddi4+0x2a4>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x1fe>
 8000f96:	ebb8 0203 	subs.w	r2, r8, r3
 8000f9a:	eb64 0409 	sbc.w	r4, r4, r9
 8000f9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000fa2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fa6:	431e      	orrs	r6, r3
 8000fa8:	40cc      	lsrs	r4, r1
 8000faa:	e9c5 6400 	strd	r6, r4, [r5]
 8000fae:	2100      	movs	r1, #0
 8000fb0:	e74f      	b.n	8000e52 <__udivmoddi4+0xa2>
 8000fb2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fb6:	0c01      	lsrs	r1, r0, #16
 8000fb8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000fbc:	b280      	uxth	r0, r0
 8000fbe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4638      	mov	r0, r7
 8000fc6:	463c      	mov	r4, r7
 8000fc8:	46b8      	mov	r8, r7
 8000fca:	46be      	mov	lr, r7
 8000fcc:	2620      	movs	r6, #32
 8000fce:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fd2:	eba2 0208 	sub.w	r2, r2, r8
 8000fd6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fda:	e766      	b.n	8000eaa <__udivmoddi4+0xfa>
 8000fdc:	4601      	mov	r1, r0
 8000fde:	e718      	b.n	8000e12 <__udivmoddi4+0x62>
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	e72c      	b.n	8000e3e <__udivmoddi4+0x8e>
 8000fe4:	f1c6 0220 	rsb	r2, r6, #32
 8000fe8:	fa2e f302 	lsr.w	r3, lr, r2
 8000fec:	40b7      	lsls	r7, r6
 8000fee:	40b1      	lsls	r1, r6
 8000ff0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ff4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ffe:	b2bc      	uxth	r4, r7
 8001000:	fb0e 3318 	mls	r3, lr, r8, r3
 8001004:	0c11      	lsrs	r1, r2, #16
 8001006:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800100a:	fb08 f904 	mul.w	r9, r8, r4
 800100e:	40b0      	lsls	r0, r6
 8001010:	4589      	cmp	r9, r1
 8001012:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001016:	b280      	uxth	r0, r0
 8001018:	d93e      	bls.n	8001098 <__udivmoddi4+0x2e8>
 800101a:	1879      	adds	r1, r7, r1
 800101c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001020:	d201      	bcs.n	8001026 <__udivmoddi4+0x276>
 8001022:	4589      	cmp	r9, r1
 8001024:	d81f      	bhi.n	8001066 <__udivmoddi4+0x2b6>
 8001026:	eba1 0109 	sub.w	r1, r1, r9
 800102a:	fbb1 f9fe 	udiv	r9, r1, lr
 800102e:	fb09 f804 	mul.w	r8, r9, r4
 8001032:	fb0e 1119 	mls	r1, lr, r9, r1
 8001036:	b292      	uxth	r2, r2
 8001038:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800103c:	4542      	cmp	r2, r8
 800103e:	d229      	bcs.n	8001094 <__udivmoddi4+0x2e4>
 8001040:	18ba      	adds	r2, r7, r2
 8001042:	f109 31ff 	add.w	r1, r9, #4294967295
 8001046:	d2c4      	bcs.n	8000fd2 <__udivmoddi4+0x222>
 8001048:	4542      	cmp	r2, r8
 800104a:	d2c2      	bcs.n	8000fd2 <__udivmoddi4+0x222>
 800104c:	f1a9 0102 	sub.w	r1, r9, #2
 8001050:	443a      	add	r2, r7
 8001052:	e7be      	b.n	8000fd2 <__udivmoddi4+0x222>
 8001054:	45f0      	cmp	r8, lr
 8001056:	d29d      	bcs.n	8000f94 <__udivmoddi4+0x1e4>
 8001058:	ebbe 0302 	subs.w	r3, lr, r2
 800105c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001060:	3801      	subs	r0, #1
 8001062:	46e1      	mov	r9, ip
 8001064:	e796      	b.n	8000f94 <__udivmoddi4+0x1e4>
 8001066:	eba7 0909 	sub.w	r9, r7, r9
 800106a:	4449      	add	r1, r9
 800106c:	f1a8 0c02 	sub.w	ip, r8, #2
 8001070:	fbb1 f9fe 	udiv	r9, r1, lr
 8001074:	fb09 f804 	mul.w	r8, r9, r4
 8001078:	e7db      	b.n	8001032 <__udivmoddi4+0x282>
 800107a:	4673      	mov	r3, lr
 800107c:	e77f      	b.n	8000f7e <__udivmoddi4+0x1ce>
 800107e:	4650      	mov	r0, sl
 8001080:	e766      	b.n	8000f50 <__udivmoddi4+0x1a0>
 8001082:	4608      	mov	r0, r1
 8001084:	e6fd      	b.n	8000e82 <__udivmoddi4+0xd2>
 8001086:	443b      	add	r3, r7
 8001088:	3a02      	subs	r2, #2
 800108a:	e733      	b.n	8000ef4 <__udivmoddi4+0x144>
 800108c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001090:	443b      	add	r3, r7
 8001092:	e71c      	b.n	8000ece <__udivmoddi4+0x11e>
 8001094:	4649      	mov	r1, r9
 8001096:	e79c      	b.n	8000fd2 <__udivmoddi4+0x222>
 8001098:	eba1 0109 	sub.w	r1, r1, r9
 800109c:	46c4      	mov	ip, r8
 800109e:	fbb1 f9fe 	udiv	r9, r1, lr
 80010a2:	fb09 f804 	mul.w	r8, r9, r4
 80010a6:	e7c4      	b.n	8001032 <__udivmoddi4+0x282>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef *huart);

// function for interrupt
void modbus_1t5_Timeout() {
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <modbus_1t5_Timeout+0x3c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2201      	movs	r2, #1
 80010b6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <modbus_1t5_Timeout+0x3c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2200      	movs	r2, #0
 80010c2:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <modbus_1t5_Timeout+0x3c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <modbus_1t5_Timeout+0x3c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0201 	orr.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	2000022c 	.word	0x2000022c

080010ec <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <modbus_3t5_Timeout+0x1c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2201      	movs	r2, #1
 80010fa:	755a      	strb	r2, [r3, #21]

}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	2000022c 	.word	0x2000022c

0800110c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef *huart) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(huart) == HAL_UART_ERROR_RTO) {
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f008 fe91 	bl	8009e3c <HAL_UART_GetError>
 800111a:	4603      	mov	r3, r0
 800111c:	2b20      	cmp	r3, #32
 800111e:	d101      	bne.n	8001124 <modbus_ErrorTimeout+0x18>
		modbus_1t5_Timeout();
 8001120:	f7ff ffc4 	bl	80010ac <modbus_1t5_Timeout>

	}
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001136:	4a25      	ldr	r2, [pc, #148]	@ (80011cc <Modbus_init+0xa0>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800113c:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <Modbus_init+0xa0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID,
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	4a21      	ldr	r2, [pc, #132]	@ (80011d0 <Modbus_init+0xa4>)
 800114a:	210e      	movs	r1, #14
 800114c:	4618      	mov	r0, r3
 800114e:	f006 fe8f 	bl	8007e70 <HAL_TIM_RegisterCallback>
			(void*) modbus_3t5_Timeout);

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2110      	movs	r1, #16
 8001158:	4618      	mov	r0, r3
 800115a:	f008 fe19 	bl	8009d90 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	4618      	mov	r0, r3
 8001164:	f008 fe30 	bl	8009dc8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4a19      	ldr	r2, [pc, #100]	@ (80011d4 <Modbus_init+0xa8>)
 800116e:	2104      	movs	r1, #4
 8001170:	4618      	mov	r0, r3
 8001172:	f008 f8d7 	bl	8009324 <HAL_UART_RegisterCallback>
			(void*) modbus_ErrorTimeout);
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
	HAL_UART_Receive_DMA(hModbus->huart,
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <Modbus_init+0xa0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68d8      	ldr	r0, [r3, #12]
			&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800117c:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <Modbus_init+0xa0>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <Modbus_init+0xa0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
	HAL_UART_Receive_DMA(hModbus->huart,
 8001188:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800118c:	4413      	add	r3, r2
 800118e:	3302      	adds	r3, #2
 8001190:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001194:	4619      	mov	r1, r3
 8001196:	f008 f9ff 	bl	8009598 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE);

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <Modbus_init+0xa0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d10c      	bne.n	80011c4 <Modbus_init+0x98>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <Modbus_init+0xa0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f005 fbe9 	bl	8006988 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011b6:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <Modbus_init+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f005 ffaa 	bl	8007118 <HAL_TIM_OnePulse_Start_IT>
	}

}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2000022c 	.word	0x2000022c
 80011d0:	080010ed 	.word	0x080010ed
 80011d4:	0800110d 	.word	0x0800110d

080011d8 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 80011e4:	23ff      	movs	r3, #255	@ 0xff
 80011e6:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 80011e8:	23ff      	movs	r3, #255	@ 0xff
 80011ea:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80011ec:	e013      	b.n	8001216 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	7bbb      	ldrb	r3, [r7, #14]
 80011f8:	4053      	eors	r3, r2
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 80011fe:	4a10      	ldr	r2, [pc, #64]	@ (8001240 <CRC16+0x68>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	4053      	eors	r3, r2
 800120a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 800120c:	4a0d      	ldr	r2, [pc, #52]	@ (8001244 <CRC16+0x6c>)
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001216:	883b      	ldrh	r3, [r7, #0]
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	803a      	strh	r2, [r7, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1e6      	bne.n	80011ee <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	b21b      	sxth	r3, r3
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	7bbb      	ldrb	r3, [r7, #14]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21b      	sxth	r3, r3
 8001230:	b29b      	uxth	r3, r3
}
 8001232:	4618      	mov	r0, r3
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000100 	.word	0x20000100
 8001244:	20000000 	.word	0x20000000

08001248 <ResetAllTargets>:

void ResetAllTargets(void) {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	e020      	b.n	8001296 <ResetAllTargets+0x4e>
		SET_TARGET(i, 0, 0);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b04      	cmp	r3, #4
 8001258:	dc03      	bgt.n	8001262 <ResetAllTargets+0x1a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3310      	adds	r3, #16
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	e002      	b.n	8001268 <ResetAllTargets+0x20>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3313      	adds	r3, #19
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4a10      	ldr	r2, [pc, #64]	@ (80012ac <ResetAllTargets+0x64>)
 800126a:	2100      	movs	r1, #0
 800126c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b04      	cmp	r3, #4
 8001274:	dc04      	bgt.n	8001280 <ResetAllTargets+0x38>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3310      	adds	r3, #16
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	3301      	adds	r3, #1
 800127e:	e003      	b.n	8001288 <ResetAllTargets+0x40>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3313      	adds	r3, #19
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	3301      	adds	r3, #1
 8001288:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <ResetAllTargets+0x64>)
 800128a:	2100      	movs	r1, #0
 800128c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 10; i++) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3301      	adds	r3, #1
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b09      	cmp	r3, #9
 800129a:	dddb      	ble.n	8001254 <ResetAllTargets+0xc>
	}
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20001080 	.word	0x20001080

080012b0 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b08d      	sub	sp, #52	@ 0x34
 80012b4:	af02      	add	r7, sp, #8
//	//-- value

	REG16(HEART_BEAT) = 22881;
 80012b6:	4bb4      	ldr	r3, [pc, #720]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 80012b8:	f645 1261 	movw	r2, #22881	@ 0x5961
 80012bc:	801a      	strh	r2, [r3, #0]
	REG16(REG_SERVO_LIMIT_SWITCH) = Pen_Status ? 2 : 1;
 80012be:	4bb3      	ldr	r3, [pc, #716]	@ (800158c <Modbus_Protocal_Worker+0x2dc>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <Modbus_Protocal_Worker+0x1a>
 80012c6:	2202      	movs	r2, #2
 80012c8:	e000      	b.n	80012cc <Modbus_Protocal_Worker+0x1c>
 80012ca:	2201      	movs	r2, #1
 80012cc:	4bae      	ldr	r3, [pc, #696]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 80012ce:	80da      	strh	r2, [r3, #6]
	Pen_BaseSystem = REG16(REG_SERVO_CMD_DOWN) ? 1 : 0;
 80012d0:	4bad      	ldr	r3, [pc, #692]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 80012d2:	895b      	ldrh	r3, [r3, #10]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bf14      	ite	ne
 80012d8:	2301      	movne	r3, #1
 80012da:	2300      	moveq	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	4bab      	ldr	r3, [pc, #684]	@ (8001590 <Modbus_Protocal_Worker+0x2e0>)
 80012e2:	701a      	strb	r2, [r3, #0]
	TargetR_BaseSystem = REG16(REG_TARGET_GOAL_R) * 0.1f;
 80012e4:	4ba8      	ldr	r3, [pc, #672]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 80012e6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f2:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 8001594 <Modbus_Protocal_Worker+0x2e4>
 80012f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fa:	4ba7      	ldr	r3, [pc, #668]	@ (8001598 <Modbus_Protocal_Worker+0x2e8>)
 80012fc:	edc3 7a00 	vstr	s15, [r3]
	TargetP_BaseSystem = REG16(REG_TARGET_GOAL_THETA) * 0.1f;
 8001300:	4ba1      	ldr	r3, [pc, #644]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 8001302:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8001306:	ee07 3a90 	vmov	s15, r3
 800130a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130e:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8001594 <Modbus_Protocal_Worker+0x2e4>
 8001312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001316:	4ba1      	ldr	r3, [pc, #644]	@ (800159c <Modbus_Protocal_Worker+0x2ec>)
 8001318:	edc3 7a00 	vstr	s15, [r3]

	uint16_t base_status = REG16(REG_BASE_STATUS);
 800131c:	4b9a      	ldr	r3, [pc, #616]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 800131e:	885b      	ldrh	r3, [r3, #2]
 8001320:	84fb      	strh	r3, [r7, #38]	@ 0x26
	REG16(REG_MOTION_STATUS) = base_status;
 8001322:	4a99      	ldr	r2, [pc, #612]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 8001324:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001326:	8413      	strh	r3, [r2, #32]

	static int currentSlot = 0;
	switch (base_status) {
 8001328:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800132a:	2b08      	cmp	r3, #8
 800132c:	d01d      	beq.n	800136a <Modbus_Protocal_Worker+0xba>
 800132e:	2b08      	cmp	r3, #8
 8001330:	dc55      	bgt.n	80013de <Modbus_Protocal_Worker+0x12e>
 8001332:	2b01      	cmp	r3, #1
 8001334:	d002      	beq.n	800133c <Modbus_Protocal_Worker+0x8c>
 8001336:	2b02      	cmp	r3, #2
 8001338:	d013      	beq.n	8001362 <Modbus_Protocal_Worker+0xb2>
 800133a:	e050      	b.n	80013de <Modbus_Protocal_Worker+0x12e>
	case 1:  // Home
		State_BaseSystem = 3;
 800133c:	4b98      	ldr	r3, [pc, #608]	@ (80015a0 <Modbus_Protocal_Worker+0x2f0>)
 800133e:	2203      	movs	r2, #3
 8001340:	701a      	strb	r2, [r3, #0]
		// if either of the first two target registers is non-zero
		if (REG16(REG_TARGET_BASE_ADDR) || REG16(REG_TARGET_BASE_ADDR + 1)) {
 8001342:	4b91      	ldr	r3, [pc, #580]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 8001344:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001348:	2b00      	cmp	r3, #0
 800134a:	d104      	bne.n	8001356 <Modbus_Protocal_Worker+0xa6>
 800134c:	4b8e      	ldr	r3, [pc, #568]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 800134e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001352:	2b00      	cmp	r3, #0
 8001354:	d047      	beq.n	80013e6 <Modbus_Protocal_Worker+0x136>
			ResetAllTargets();
 8001356:	f7ff ff77 	bl	8001248 <ResetAllTargets>
			currentSlot = 0;
 800135a:	4b92      	ldr	r3, [pc, #584]	@ (80015a4 <Modbus_Protocal_Worker+0x2f4>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
		}
		break;
 8001360:	e041      	b.n	80013e6 <Modbus_Protocal_Worker+0x136>

	case 2:  // Run Jog Mode
		State_BaseSystem = 1;
 8001362:	4b8f      	ldr	r3, [pc, #572]	@ (80015a0 <Modbus_Protocal_Worker+0x2f0>)
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
		break;
 8001368:	e040      	b.n	80013ec <Modbus_Protocal_Worker+0x13c>

	case 8:  // Go To Target
		State_BaseSystem = 2;
 800136a:	4b8d      	ldr	r3, [pc, #564]	@ (80015a0 <Modbus_Protocal_Worker+0x2f0>)
 800136c:	2202      	movs	r2, #2
 800136e:	701a      	strb	r2, [r3, #0]
		// enqueue the next target
		SET_TARGET(currentSlot, REG16(REG_TARGET_GOAL_R),
 8001370:	4b8c      	ldr	r3, [pc, #560]	@ (80015a4 <Modbus_Protocal_Worker+0x2f4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b04      	cmp	r3, #4
 8001376:	dc04      	bgt.n	8001382 <Modbus_Protocal_Worker+0xd2>
 8001378:	4b8a      	ldr	r3, [pc, #552]	@ (80015a4 <Modbus_Protocal_Worker+0x2f4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3310      	adds	r3, #16
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	e003      	b.n	800138a <Modbus_Protocal_Worker+0xda>
 8001382:	4b88      	ldr	r3, [pc, #544]	@ (80015a4 <Modbus_Protocal_Worker+0x2f4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3313      	adds	r3, #19
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4a7f      	ldr	r2, [pc, #508]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 800138c:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 8001390:	4a7d      	ldr	r2, [pc, #500]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 8001392:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001396:	4b83      	ldr	r3, [pc, #524]	@ (80015a4 <Modbus_Protocal_Worker+0x2f4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b04      	cmp	r3, #4
 800139c:	dc05      	bgt.n	80013aa <Modbus_Protocal_Worker+0xfa>
 800139e:	4b81      	ldr	r3, [pc, #516]	@ (80015a4 <Modbus_Protocal_Worker+0x2f4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3310      	adds	r3, #16
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	3301      	adds	r3, #1
 80013a8:	e004      	b.n	80013b4 <Modbus_Protocal_Worker+0x104>
 80013aa:	4b7e      	ldr	r3, [pc, #504]	@ (80015a4 <Modbus_Protocal_Worker+0x2f4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3313      	adds	r3, #19
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a74      	ldr	r2, [pc, #464]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 80013b6:	f8b2 1082 	ldrh.w	r1, [r2, #130]	@ 0x82
 80013ba:	4a73      	ldr	r2, [pc, #460]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 80013bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				REG16(REG_TARGET_GOAL_THETA));

		// increment _and_ wrap+reset in one go
		if (++currentSlot >= 10) {
 80013c0:	4b78      	ldr	r3, [pc, #480]	@ (80015a4 <Modbus_Protocal_Worker+0x2f4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	4a77      	ldr	r2, [pc, #476]	@ (80015a4 <Modbus_Protocal_Worker+0x2f4>)
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b76      	ldr	r3, [pc, #472]	@ (80015a4 <Modbus_Protocal_Worker+0x2f4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b09      	cmp	r3, #9
 80013d0:	dd0b      	ble.n	80013ea <Modbus_Protocal_Worker+0x13a>
			currentSlot = 0;
 80013d2:	4b74      	ldr	r3, [pc, #464]	@ (80015a4 <Modbus_Protocal_Worker+0x2f4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
			ResetAllTargets();
 80013d8:	f7ff ff36 	bl	8001248 <ResetAllTargets>
		}
		break;
 80013dc:	e005      	b.n	80013ea <Modbus_Protocal_Worker+0x13a>

	default: // Run Point Mode
		State_BaseSystem = 0;
 80013de:	4b70      	ldr	r3, [pc, #448]	@ (80015a0 <Modbus_Protocal_Worker+0x2f0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
		break;
 80013e4:	e002      	b.n	80013ec <Modbus_Protocal_Worker+0x13c>
		break;
 80013e6:	bf00      	nop
 80013e8:	e000      	b.n	80013ec <Modbus_Protocal_Worker+0x13c>
		break;
 80013ea:	bf00      	nop
	}

	float Velocity_mm, Acceleration_mm, mmPosition, AngularVelocity_rad,
			AngularAcceleration_rad, RadPosition;
	Get_QRIdata(&Velocity_mm, &Acceleration_mm, &mmPosition,
 80013ec:	f107 0410 	add.w	r4, r7, #16
 80013f0:	f107 0214 	add.w	r2, r7, #20
 80013f4:	f107 0118 	add.w	r1, r7, #24
 80013f8:	f107 001c 	add.w	r0, r7, #28
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4623      	mov	r3, r4
 800140a:	f002 ff67 	bl	80042dc <Get_QRIdata>
			&AngularVelocity_rad, &AngularAcceleration_rad, &RadPosition);

// Position remap: [-π/2, 3π/2] → [0, 360]
	float mappedDeg = RAD_TO_DEG(RadPosition + (M_PI / 2.0f));
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f865 	bl	80004e0 <__aeabi_f2d>
 8001416:	a358      	add	r3, pc, #352	@ (adr r3, 8001578 <Modbus_Protocal_Worker+0x2c8>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7fe ff02 	bl	8000224 <__adddf3>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	a355      	add	r3, pc, #340	@ (adr r3, 8001580 <Modbus_Protocal_Worker+0x2d0>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff f8af 	bl	8000590 <__aeabi_dmul>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fb43 	bl	8000ac4 <__aeabi_d2f>
 800143e:	4603      	mov	r3, r0
 8001440:	623b      	str	r3, [r7, #32]
	REG16(REG_POSITION_R) = (int16_t) (mappedDeg * 10.0f);
 8001442:	edd7 7a08 	vldr	s15, [r7, #32]
 8001446:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800144a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800144e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001452:	ee17 3a90 	vmov	r3, s15
 8001456:	b21b      	sxth	r3, r3
 8001458:	b29a      	uxth	r2, r3
 800145a:	4b4b      	ldr	r3, [pc, #300]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 800145c:	845a      	strh	r2, [r3, #34]	@ 0x22

// Speed and acceleration: normal conversion
	REG16(REG_SPEED_R) = (int16_t)(fabsf(RAD_TO_DEG(AngularVelocity_rad)) * 10.0f);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f83d 	bl	80004e0 <__aeabi_f2d>
 8001466:	a346      	add	r3, pc, #280	@ (adr r3, 8001580 <Modbus_Protocal_Worker+0x2d0>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f890 	bl	8000590 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fb24 	bl	8000ac4 <__aeabi_d2f>
 800147c:	ee07 0a90 	vmov	s15, r0
 8001480:	eef0 7ae7 	vabs.f32	s15, s15
 8001484:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001490:	ee17 3a90 	vmov	r3, s15
 8001494:	b21b      	sxth	r3, r3
 8001496:	b29a      	uxth	r2, r3
 8001498:	4b3b      	ldr	r3, [pc, #236]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 800149a:	84da      	strh	r2, [r3, #38]	@ 0x26
	REG16(REG_ACCELERATION_R) = (int16_t)(fabsf(RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f81e 	bl	80004e0 <__aeabi_f2d>
 80014a4:	a336      	add	r3, pc, #216	@ (adr r3, 8001580 <Modbus_Protocal_Worker+0x2d0>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7ff f871 	bl	8000590 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff fb05 	bl	8000ac4 <__aeabi_d2f>
 80014ba:	ee07 0a90 	vmov	s15, r0
 80014be:	eef0 7ae7 	vabs.f32	s15, s15
 80014c2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ce:	ee17 3a90 	vmov	r3, s15
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 80014d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

	REG16(REG_SPEED_THETA) = (int16_t)(fabsf(Velocity_mm) * 10.0f);
 80014da:	edd7 7a07 	vldr	s15, [r7, #28]
 80014de:	eef0 7ae7 	vabs.f32	s15, s15
 80014e2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ee:	ee17 3a90 	vmov	r3, s15
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b24      	ldr	r3, [pc, #144]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 80014f8:	851a      	strh	r2, [r3, #40]	@ 0x28
	REG16(REG_ACCELERATION_THETA) = (int16_t)(fabsf(Acceleration_mm) * 10.0f);
 80014fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80014fe:	eef0 7ae7 	vabs.f32	s15, s15
 8001502:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150e:	ee17 3a90 	vmov	r3, s15
 8001512:	b21b      	sxth	r3, r3
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 8001518:	859a      	strh	r2, [r3, #44]	@ 0x2c
	REG16(REG_POSITION_THETA) = (int16_t) mmPosition * 10.0f;
 800151a:	edd7 7a05 	vldr	s15, [r7, #20]
 800151e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001522:	ee17 3a90 	vmov	r3, s15
 8001526:	b21b      	sxth	r3, r3
 8001528:	ee07 3a90 	vmov	s15, r3
 800152c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001530:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800153c:	ee17 3a90 	vmov	r3, s15
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <Modbus_Protocal_Worker+0x2d8>)
 8001544:	849a      	strh	r2, [r3, #36]	@ 0x24

	//--Modbus
	switch (hModbus->Mstatus) {
 8001546:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <Modbus_Protocal_Worker+0x2f8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	7ddb      	ldrb	r3, [r3, #23]
 800154c:	3b01      	subs	r3, #1
 800154e:	2b03      	cmp	r3, #3
 8001550:	d80a      	bhi.n	8001568 <Modbus_Protocal_Worker+0x2b8>
 8001552:	a201      	add	r2, pc, #4	@ (adr r2, 8001558 <Modbus_Protocal_Worker+0x2a8>)
 8001554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001558:	080015ad 	.word	0x080015ad
 800155c:	08001741 	.word	0x08001741
 8001560:	08001639 	.word	0x08001639
 8001564:	0800167d 	.word	0x0800167d
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <Modbus_Protocal_Worker+0x2f8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2201      	movs	r2, #1
 800156e:	75da      	strb	r2, [r3, #23]
		break;
 8001570:	e0fe      	b.n	8001770 <Modbus_Protocal_Worker+0x4c0>
 8001572:	bf00      	nop
 8001574:	f3af 8000 	nop.w
 8001578:	54442d18 	.word	0x54442d18
 800157c:	3ff921fb 	.word	0x3ff921fb
 8001580:	1a63c1f8 	.word	0x1a63c1f8
 8001584:	404ca5dc 	.word	0x404ca5dc
 8001588:	20001080 	.word	0x20001080
 800158c:	20000b2b 	.word	0x20000b2b
 8001590:	20000ba5 	.word	0x20000ba5
 8001594:	3dcccccd 	.word	0x3dcccccd
 8001598:	20000b9c 	.word	0x20000b9c
 800159c:	20000ba0 	.word	0x20000ba0
 80015a0:	20000ba4 	.word	0x20000ba4
 80015a4:	20000230 	.word	0x20000230
 80015a8:	2000022c 	.word	0x2000022c
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 80015ac:	4b72      	ldr	r3, [pc, #456]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <Modbus_Protocal_Worker+0x316>
			/*set state*/
			hModbus->Mstatus = Modbus_state_Emission;
 80015b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2202      	movs	r2, #2
 80015be:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80015c0:	f000 f9cc 	bl	800195c <Modbus_Emission>
 80015c4:	e018      	b.n	80015f8 <Modbus_Protocal_Worker+0x348>
		}

		// Received character
		else if (hModbus->huart->RxXferSize != hModbus->huart->RxXferCount) {
 80015c6:	4b6c      	ldr	r3, [pc, #432]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80015d0:	4b69      	ldr	r3, [pc, #420]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80015da:	b29b      	uxth	r3, r3
 80015dc:	429a      	cmp	r2, r3
 80015de:	d00b      	beq.n	80015f8 <Modbus_Protocal_Worker+0x348>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80015e0:	4b65      	ldr	r3, [pc, #404]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2200      	movs	r2, #0
 80015e6:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80015e8:	4b63      	ldr	r3, [pc, #396]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2200      	movs	r2, #0
 80015ee:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 80015f0:	4b61      	ldr	r3, [pc, #388]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2203      	movs	r2, #3
 80015f6:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 80015f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001602:	2b20      	cmp	r3, #32
 8001604:	f040 80ad 	bne.w	8001762 <Modbus_Protocal_Worker+0x4b2>
			hModbus->modbusUartStructure.RxTail = 0;
 8001608:	4b5b      	ldr	r3, [pc, #364]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2200      	movs	r2, #0
 800160e:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001612:	4b59      	ldr	r3, [pc, #356]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68d8      	ldr	r0, [r3, #12]
					&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001618:	4b57      	ldr	r3, [pc, #348]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b56      	ldr	r3, [pc, #344]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001624:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001628:	4413      	add	r3, r2
 800162a:	3302      	adds	r3, #2
 800162c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001630:	4619      	mov	r1, r3
 8001632:	f007 ffb1 	bl	8009598 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE);

		}
		break;
 8001636:	e094      	b.n	8001762 <Modbus_Protocal_Worker+0x4b2>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 8001638:	4b4f      	ldr	r3, [pc, #316]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	7d1b      	ldrb	r3, [r3, #20]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8091 	beq.w	8001766 <Modbus_Protocal_Worker+0x4b6>
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001644:	4b4c      	ldr	r3, [pc, #304]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	22fe      	movs	r2, #254	@ 0xfe
 800164a:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 800164c:	4b4a      	ldr	r3, [pc, #296]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 8001656:	4b48      	ldr	r3, [pc, #288]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 8001666:	4b44      	ldr	r3, [pc, #272]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 8001668:	681b      	ldr	r3, [r3, #0]
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 800166a:	1a8a      	subs	r2, r1, r2
 800166c:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 800166e:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001672:	4b41      	ldr	r3, [pc, #260]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2204      	movs	r2, #4
 8001678:	75da      	strb	r2, [r3, #23]
		}
		break;
 800167a:	e074      	b.n	8001766 <Modbus_Protocal_Worker+0x4b6>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 800167c:	4b3e      	ldr	r3, [pc, #248]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001684:	f113 0f02 	cmn.w	r3, #2
 8001688:	d150      	bne.n	800172c <Modbus_Protocal_Worker+0x47c>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800168a:	4b3b      	ldr	r3, [pc, #236]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2200      	movs	r2, #0
 8001690:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(
					hModbus->modbusUartStructure.MessageBufferRx,
 8001692:	4b39      	ldr	r3, [pc, #228]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f203 2272 	addw	r2, r3, #626	@ 0x272
					hModbus->modbusUartStructure.RxTail - 2);
 800169a:	4b37      	ldr	r3, [pc, #220]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			CalculateCRC.U16 = CRC16(
 80016a2:	3b02      	subs	r3, #2
 80016a4:	4619      	mov	r1, r3
 80016a6:	4610      	mov	r0, r2
 80016a8:	f7ff fd96 	bl	80011d8 <CRC16>
 80016ac:	4603      	mov	r3, r0
 80016ae:	80bb      	strh	r3, [r7, #4]

			if (!(CalculateCRC.U8[0]
 80016b0:	793a      	ldrb	r2, [r7, #4]
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80016b2:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 80016b4:	6819      	ldr	r1, [r3, #0]
 80016b6:	4b30      	ldr	r3, [pc, #192]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
							- 2]
 80016be:	3b02      	subs	r3, #2
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80016c0:	440b      	add	r3, r1
 80016c2:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d10c      	bne.n	80016e4 <Modbus_Protocal_Worker+0x434>
					&& CalculateCRC.U8[1]
 80016ca:	797a      	ldrb	r2, [r7, #5]
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80016cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 80016ce:	6819      	ldr	r1, [r3, #0]
 80016d0:	4b29      	ldr	r3, [pc, #164]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
									- 1])) {
 80016d8:	3b01      	subs	r3, #1
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80016da:	440b      	add	r3, r1
 80016dc:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d004      	beq.n	80016ee <Modbus_Protocal_Worker+0x43e>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80016e4:	4b24      	ldr	r3, [pc, #144]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	22ff      	movs	r2, #255	@ 0xff
 80016ea:	759a      	strb	r2, [r3, #22]
				break;
 80016ec:	e040      	b.n	8001770 <Modbus_Protocal_Worker+0x4c0>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 80016ee:	4b22      	ldr	r3, [pc, #136]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
					!= hModbus->slaveAddress)
 80016f6:	4b20      	ldr	r3, [pc, #128]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	781b      	ldrb	r3, [r3, #0]
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d113      	bne.n	8001728 <Modbus_Protocal_Worker+0x478>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001700:	4b1d      	ldr	r3, [pc, #116]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx + 1,
 8001708:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001710:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail - 3);
 8001712:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800171a:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800171c:	461a      	mov	r2, r3
 800171e:	f009 fd13 	bl	800b148 <memcpy>

			//execute command
			Modbus_frame_response();
 8001722:	f000 f903 	bl	800192c <Modbus_frame_response>
 8001726:	e001      	b.n	800172c <Modbus_Protocal_Worker+0x47c>
				break;
 8001728:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 800172a:	e021      	b.n	8001770 <Modbus_Protocal_Worker+0x4c0>
		if (hModbus->Flag_T35TimeOut) {
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	7d5b      	ldrb	r3, [r3, #21]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d019      	beq.n	800176a <Modbus_Protocal_Worker+0x4ba>
			hModbus->Mstatus = Modbus_state_Idle;
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2201      	movs	r2, #1
 800173c:	75da      	strb	r2, [r3, #23]
		break;
 800173e:	e014      	b.n	800176a <Modbus_Protocal_Worker+0x4ba>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001740:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800174a:	2b20      	cmp	r3, #32
 800174c:	d10f      	bne.n	800176e <Modbus_Protocal_Worker+0x4be>
			hModbus->TxCount = 0;
 800174e:	4b0a      	ldr	r3, [pc, #40]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001758:	4b07      	ldr	r3, [pc, #28]	@ (8001778 <Modbus_Protocal_Worker+0x4c8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2201      	movs	r2, #1
 800175e:	75da      	strb	r2, [r3, #23]
		break;
 8001760:	e005      	b.n	800176e <Modbus_Protocal_Worker+0x4be>
		break;
 8001762:	bf00      	nop
 8001764:	e004      	b.n	8001770 <Modbus_Protocal_Worker+0x4c0>
		break;
 8001766:	bf00      	nop
 8001768:	e002      	b.n	8001770 <Modbus_Protocal_Worker+0x4c0>
		break;
 800176a:	bf00      	nop
 800176c:	e000      	b.n	8001770 <Modbus_Protocal_Worker+0x4c0>
		break;
 800176e:	bf00      	nop
}
 8001770:	bf00      	nop
 8001772:	372c      	adds	r7, #44	@ 0x2c
 8001774:	46bd      	mov	sp, r7
 8001776:	bd90      	pop	{r4, r7, pc}
 8001778:	2000022c 	.word	0x2000022c

0800177c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 8001782:	4b1d      	ldr	r3, [pc, #116]	@ (80017f8 <modbusWrite1Register+0x7c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	7e5b      	ldrb	r3, [r3, #25]
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	b29b      	uxth	r3, r3
 800178c:	4a1a      	ldr	r2, [pc, #104]	@ (80017f8 <modbusWrite1Register+0x7c>)
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	7e92      	ldrb	r2, [r2, #26]
 8001792:	4413      	add	r3, r2
 8001794:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 8001796:	88fa      	ldrh	r2, [r7, #6]
 8001798:	4b17      	ldr	r3, [pc, #92]	@ (80017f8 <modbusWrite1Register+0x7c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d903      	bls.n	80017aa <modbusWrite1Register+0x2e>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80017a2:	2002      	movs	r0, #2
 80017a4:	f000 f8a0 	bl	80018e8 <ModbusErrorReply>
		return;
 80017a8:	e023      	b.n	80017f2 <modbusWrite1Register+0x76>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80017aa:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <modbusWrite1Register+0x7c>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <modbusWrite1Register+0x7c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	440b      	add	r3, r1
 80017ba:	7ed2      	ldrb	r2, [r2, #27]
 80017bc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80017be:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <modbusWrite1Register+0x7c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <modbusWrite1Register+0x7c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6859      	ldr	r1, [r3, #4]
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	440b      	add	r3, r1
 80017ce:	7f12      	ldrb	r2, [r2, #28]
 80017d0:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <modbusWrite1Register+0x7c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 80017da:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <modbusWrite1Register+0x7c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3318      	adds	r3, #24
 80017e0:	2208      	movs	r2, #8
 80017e2:	4619      	mov	r1, r3
 80017e4:	f009 fcb0 	bl	800b148 <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <modbusWrite1Register+0x7c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2205      	movs	r2, #5
 80017ee:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2000022c 	.word	0x2000022c

080017fc <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 8001802:	4b38      	ldr	r3, [pc, #224]	@ (80018e4 <modbusRead1Register+0xe8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	7edb      	ldrb	r3, [r3, #27]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	b29b      	uxth	r3, r3
			+ (hModbus->Rxframe[4]));
 800180c:	4a35      	ldr	r2, [pc, #212]	@ (80018e4 <modbusRead1Register+0xe8>)
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	7f12      	ldrb	r2, [r2, #28]
	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 8001812:	4413      	add	r3, r2
 8001814:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 8001816:	4b33      	ldr	r3, [pc, #204]	@ (80018e4 <modbusRead1Register+0xe8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	7e5b      	ldrb	r3, [r3, #25]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	b29b      	uxth	r3, r3
 8001820:	4a30      	ldr	r2, [pc, #192]	@ (80018e4 <modbusRead1Register+0xe8>)
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	7e92      	ldrb	r2, [r2, #26]
 8001826:	4413      	add	r3, r2
 8001828:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <modbusRead1Register+0x3a>
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	2b7d      	cmp	r3, #125	@ 0x7d
 8001834:	d903      	bls.n	800183e <modbusRead1Register+0x42>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001836:	2003      	movs	r0, #3
 8001838:	f000 f856 	bl	80018e8 <ModbusErrorReply>
		return;
 800183c:	e04e      	b.n	80018dc <modbusRead1Register+0xe0>
	}

	if (startAddress > hModbus->RegisterSize
 800183e:	88ba      	ldrh	r2, [r7, #4]
 8001840:	4b28      	ldr	r3, [pc, #160]	@ (80018e4 <modbusRead1Register+0xe8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	429a      	cmp	r2, r3
 8001848:	d808      	bhi.n	800185c <modbusRead1Register+0x60>
			|| (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 800184a:	88ba      	ldrh	r2, [r7, #4]
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	4413      	add	r3, r2
 8001850:	461a      	mov	r2, r3
 8001852:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <modbusRead1Register+0xe8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	429a      	cmp	r2, r3
 800185a:	d903      	bls.n	8001864 <modbusRead1Register+0x68>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800185c:	2002      	movs	r0, #2
 800185e:	f000 f843 	bl	80018e8 <ModbusErrorReply>
		return;
 8001862:	e03b      	b.n	80018dc <modbusRead1Register+0xe0>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001864:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <modbusRead1Register+0xe8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2203      	movs	r2, #3
 800186a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <modbusRead1Register+0xe8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	0052      	lsls	r2, r2, #1
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 800187e:	2400      	movs	r4, #0
 8001880:	e020      	b.n	80018c4 <modbusRead1Register+0xc8>
		hModbus->Txframe[2 * i + 2] =
				hModbus->RegisterAddress[startAddress + i].U8[1];
 8001882:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <modbusRead1Register+0xe8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	88bb      	ldrh	r3, [r7, #4]
 800188a:	4423      	add	r3, r4
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 2] =
 8001890:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <modbusRead1Register+0xe8>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	1c63      	adds	r3, r4, #1
 8001896:	005b      	lsls	r3, r3, #1
				hModbus->RegisterAddress[startAddress + i].U8[1];
 8001898:	7849      	ldrb	r1, [r1, #1]
		hModbus->Txframe[2 * i + 2] =
 800189a:	4413      	add	r3, r2
 800189c:	460a      	mov	r2, r1
 800189e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2 * i + 3] =
				hModbus->RegisterAddress[startAddress + i].U8[0];
 80018a2:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <modbusRead1Register+0xe8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	88bb      	ldrh	r3, [r7, #4]
 80018aa:	4423      	add	r3, r4
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 3] =
 80018b0:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <modbusRead1Register+0xe8>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	0063      	lsls	r3, r4, #1
 80018b6:	3303      	adds	r3, #3
				hModbus->RegisterAddress[startAddress + i].U8[0];
 80018b8:	7809      	ldrb	r1, [r1, #0]
		hModbus->Txframe[2 * i + 3] =
 80018ba:	4413      	add	r3, r2
 80018bc:	460a      	mov	r2, r1
 80018be:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for (i = 0; i < numberOfDataToRead; i++) {
 80018c2:	3401      	adds	r4, #1
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	429c      	cmp	r4, r3
 80018c8:	dbdb      	blt.n	8001882 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <modbusRead1Register+0xe8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	0052      	lsls	r2, r2, #1
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd90      	pop	{r4, r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000022c 	.word	0x2000022c

080018e8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <ModbusErrorReply+0x40>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	7e1a      	ldrb	r2, [r3, #24]
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <ModbusErrorReply+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <ModbusErrorReply+0x40>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001910:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <ModbusErrorReply+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2202      	movs	r2, #2
 8001916:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	2000022c 	.word	0x2000022c

0800192c <Modbus_frame_response>:

void Modbus_frame_response() {
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <Modbus_frame_response+0x2c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	7e1b      	ldrb	r3, [r3, #24]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d004      	beq.n	8001944 <Modbus_frame_response+0x18>
 800193a:	2b06      	cmp	r3, #6
 800193c:	d105      	bne.n	800194a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800193e:	f7ff ff1d 	bl	800177c <modbusWrite1Register>
		break;
 8001942:	e006      	b.n	8001952 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001944:	f7ff ff5a 	bl	80017fc <modbusRead1Register>
		break;
 8001948:	e003      	b.n	8001952 <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800194a:	2001      	movs	r0, #1
 800194c:	f7ff ffcc 	bl	80018e8 <ModbusErrorReply>
		break;
 8001950:	bf00      	nop

	}
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000022c 	.word	0x2000022c

0800195c <Modbus_Emission>:

void Modbus_Emission() {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001962:	4b38      	ldr	r3, [pc, #224]	@ (8001a44 <Modbus_Emission+0xe8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800196c:	2b20      	cmp	r3, #32
 800196e:	d15d      	bne.n	8001a2c <Modbus_Emission+0xd0>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001970:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <Modbus_Emission+0xe8>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b33      	ldr	r3, [pc, #204]	@ (8001a44 <Modbus_Emission+0xe8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	7812      	ldrb	r2, [r2, #0]
 800197a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 800197e:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <Modbus_Emission+0xe8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8001986:	1c58      	adds	r0, r3, #1
				hModbus->Txframe, hModbus->TxCount);
 8001988:	4b2e      	ldr	r3, [pc, #184]	@ (8001a44 <Modbus_Emission+0xe8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
 8001990:	4b2c      	ldr	r3, [pc, #176]	@ (8001a44 <Modbus_Emission+0xe8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 8001998:	461a      	mov	r2, r3
 800199a:	f009 fbd5 	bl	800b148 <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 800199e:	4b29      	ldr	r3, [pc, #164]	@ (8001a44 <Modbus_Emission+0xe8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b26      	ldr	r3, [pc, #152]	@ (8001a44 <Modbus_Emission+0xe8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3203      	adds	r2, #3
 80019ae:	b292      	uxth	r2, r2
 80019b0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80019b4:	4b23      	ldr	r3, [pc, #140]	@ (8001a44 <Modbus_Emission+0xe8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80019bc:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <Modbus_Emission+0xe8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80019c4:	3b02      	subs	r3, #2
 80019c6:	4619      	mov	r1, r3
 80019c8:	4610      	mov	r0, r2
 80019ca:	f7ff fc05 	bl	80011d8 <CRC16>
 80019ce:	4603      	mov	r3, r0
 80019d0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 80019d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a44 <Modbus_Emission+0xe8>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a44 <Modbus_Emission+0xe8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 2] = CalculateCRC.U8[0];
 80019de:	3b02      	subs	r3, #2
 80019e0:	7939      	ldrb	r1, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	460a      	mov	r2, r1
 80019e6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 80019ea:	4b16      	ldr	r3, [pc, #88]	@ (8001a44 <Modbus_Emission+0xe8>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <Modbus_Emission+0xe8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 1] = CalculateCRC.U8[1];
 80019f6:	3b01      	subs	r3, #1
 80019f8:	7979      	ldrb	r1, [r7, #5]
 80019fa:	4413      	add	r3, r2
 80019fc:	460a      	mov	r2, r1
 80019fe:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		//sent modbus

		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <Modbus_Emission+0xe8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0c:	2b20      	cmp	r3, #32
 8001a0e:	d10d      	bne.n	8001a2c <Modbus_Emission+0xd0>
			HAL_UART_Transmit_DMA(hModbus->huart,
 8001a10:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <Modbus_Emission+0xe8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68d8      	ldr	r0, [r3, #12]
					hModbus->modbusUartStructure.MessageBufferTx,
 8001a16:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <Modbus_Emission+0xe8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					hModbus->modbusUartStructure.TxTail);
 8001a1e:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <Modbus_Emission+0xe8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart,
 8001a22:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a26:	461a      	mov	r2, r3
 8001a28:	f007 fd36 	bl	8009498 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <Modbus_Emission+0xe8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001a34:	4b03      	ldr	r3, [pc, #12]	@ (8001a44 <Modbus_Emission+0xe8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	755a      	strb	r2, [r3, #21]

}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	2000022c 	.word	0x2000022c

08001a48 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a4c:	ed2d 8b02 	vpush	{d8}
 8001a50:	b0a7      	sub	sp, #156	@ 0x9c
 8001a52:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a54:	f003 f817 	bl	8004a86 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a58:	f001 fac6 	bl	8002fe8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a5c:	f001 ff20 	bl	80038a0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001a60:	f001 feec 	bl	800383c <MX_DMA_Init>
	MX_TIM4_Init();
 8001a64:	f001 fc68 	bl	8003338 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001a68:	f001 fcbc 	bl	80033e4 <MX_TIM5_Init>
	MX_TIM3_Init();
 8001a6c:	f001 fc0e 	bl	800328c <MX_TIM3_Init>
	MX_TIM8_Init();
 8001a70:	f001 fd06 	bl	8003480 <MX_TIM8_Init>
	MX_TIM15_Init();
 8001a74:	f001 fdc0 	bl	80035f8 <MX_TIM15_Init>
	MX_TIM1_Init();
 8001a78:	f001 fb02 	bl	8003080 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001a7c:	f001 fb86 	bl	800318c <MX_TIM2_Init>
	MX_USART2_UART_Init();
 8001a80:	f001 fe8e 	bl	80037a0 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8001a84:	f001 fe5c 	bl	8003740 <MX_TIM16_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001a88:	48b9      	ldr	r0, [pc, #740]	@ (8001d70 <main+0x328>)
 8001a8a:	f004 ff0d 	bl	80068a8 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001a8e:	2100      	movs	r1, #0
 8001a90:	48b7      	ldr	r0, [pc, #732]	@ (8001d70 <main+0x328>)
 8001a92:	f005 f9d5 	bl	8006e40 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001a96:	2104      	movs	r1, #4
 8001a98:	48b5      	ldr	r0, [pc, #724]	@ (8001d70 <main+0x328>)
 8001a9a:	f005 f9d1 	bl	8006e40 <HAL_TIM_IC_Start>
	HAL_TIM_Base_Start(&htim2);
 8001a9e:	48b5      	ldr	r0, [pc, #724]	@ (8001d74 <main+0x32c>)
 8001aa0:	f004 ff02 	bl	80068a8 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	48b3      	ldr	r0, [pc, #716]	@ (8001d74 <main+0x32c>)
 8001aa8:	f005 f9ca 	bl	8006e40 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001aac:	2104      	movs	r1, #4
 8001aae:	48b1      	ldr	r0, [pc, #708]	@ (8001d74 <main+0x32c>)
 8001ab0:	f005 f9c6 	bl	8006e40 <HAL_TIM_IC_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001ab4:	213c      	movs	r1, #60	@ 0x3c
 8001ab6:	48b0      	ldr	r0, [pc, #704]	@ (8001d78 <main+0x330>)
 8001ab8:	f005 fc70 	bl	800739c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001abc:	213c      	movs	r1, #60	@ 0x3c
 8001abe:	48af      	ldr	r0, [pc, #700]	@ (8001d7c <main+0x334>)
 8001ac0:	f005 fc6c 	bl	800739c <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001ac4:	48ae      	ldr	r0, [pc, #696]	@ (8001d80 <main+0x338>)
 8001ac6:	f004 ff5f 	bl	8006988 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8);
 8001aca:	48ae      	ldr	r0, [pc, #696]	@ (8001d84 <main+0x33c>)
 8001acc:	f004 feec 	bl	80068a8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001ad0:	2108      	movs	r1, #8
 8001ad2:	48ac      	ldr	r0, [pc, #688]	@ (8001d84 <main+0x33c>)
 8001ad4:	f005 f83e 	bl	8006b54 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001ad8:	210c      	movs	r1, #12
 8001ada:	48aa      	ldr	r0, [pc, #680]	@ (8001d84 <main+0x33c>)
 8001adc:	f005 f83a 	bl	8006b54 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim15);
 8001ae0:	48a9      	ldr	r0, [pc, #676]	@ (8001d88 <main+0x340>)
 8001ae2:	f004 fee1 	bl	80068a8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	48a7      	ldr	r0, [pc, #668]	@ (8001d88 <main+0x340>)
 8001aea:	f005 f833 	bl	8006b54 <HAL_TIM_PWM_Start>
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
	DWT_Init();
 8001aee:	f001 ffef 	bl	8003ad0 <DWT_Init>

	PID.Kp = 0.1;
 8001af2:	4aa6      	ldr	r2, [pc, #664]	@ (8001d8c <main+0x344>)
 8001af4:	4ba6      	ldr	r3, [pc, #664]	@ (8001d90 <main+0x348>)
 8001af6:	6193      	str	r3, [r2, #24]
	PID.Ki = 0.00001;
 8001af8:	4aa4      	ldr	r2, [pc, #656]	@ (8001d8c <main+0x344>)
 8001afa:	4ba6      	ldr	r3, [pc, #664]	@ (8001d94 <main+0x34c>)
 8001afc:	61d3      	str	r3, [r2, #28]
	PID.Kd = 0.1;
 8001afe:	4aa3      	ldr	r2, [pc, #652]	@ (8001d8c <main+0x344>)
 8001b00:	4ba3      	ldr	r3, [pc, #652]	@ (8001d90 <main+0x348>)
 8001b02:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8001b04:	2100      	movs	r1, #0
 8001b06:	48a1      	ldr	r0, [pc, #644]	@ (8001d8c <main+0x344>)
 8001b08:	f009 fabc 	bl	800b084 <arm_pid_init_f32>

	Reset_R();
 8001b0c:	f002 fbc4 	bl	8004298 <Reset_R>
	Reset_P();
 8001b10:	f002 fbd2 	bl	80042b8 <Reset_P>
	calibState = CALIB_IDLE;
 8001b14:	4aa0      	ldr	r2, [pc, #640]	@ (8001d98 <main+0x350>)
 8001b16:	2300      	movs	r3, #0
 8001b18:	7013      	strb	r3, [r2, #0]

	Set_Servo(0);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f002 fb92 	bl	8004244 <Set_Servo>

	//BaseSystem//////////
	hmodbus.huart = &huart2;
 8001b20:	4a9e      	ldr	r2, [pc, #632]	@ (8001d9c <main+0x354>)
 8001b22:	4b9f      	ldr	r3, [pc, #636]	@ (8001da0 <main+0x358>)
 8001b24:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim16;
 8001b26:	4a9d      	ldr	r2, [pc, #628]	@ (8001d9c <main+0x354>)
 8001b28:	4b9e      	ldr	r3, [pc, #632]	@ (8001da4 <main+0x35c>)
 8001b2a:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8001b2c:	4a9b      	ldr	r2, [pc, #620]	@ (8001d9c <main+0x354>)
 8001b2e:	2315      	movs	r3, #21
 8001b30:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8001b32:	4a9a      	ldr	r2, [pc, #616]	@ (8001d9c <main+0x354>)
 8001b34:	23c8      	movs	r3, #200	@ 0xc8
 8001b36:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001b38:	499b      	ldr	r1, [pc, #620]	@ (8001da8 <main+0x360>)
 8001b3a:	4898      	ldr	r0, [pc, #608]	@ (8001d9c <main+0x354>)
 8001b3c:	f7ff faf6 	bl	800112c <Modbus_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//BaseSystem//////////
		Modbus_Protocal_Worker();
 8001b40:	f7ff fbb6 	bl	80012b0 <Modbus_Protocal_Worker>
		//////////////////////

		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8001b44:	4b8d      	ldr	r3, [pc, #564]	@ (8001d7c <main+0x334>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b4a:	4b98      	ldr	r3, [pc, #608]	@ (8001dac <main+0x364>)
 8001b4c:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8001b4e:	4b8a      	ldr	r3, [pc, #552]	@ (8001d78 <main+0x330>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b54:	4b96      	ldr	r3, [pc, #600]	@ (8001db0 <main+0x368>)
 8001b56:	601a      	str	r2, [r3, #0]
		//Call every 0.01 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 8001b58:	f002 f89a 	bl	8003c90 <micros>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
		if (currentTime > timestamp) {
 8001b64:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001b68:	4b92      	ldr	r3, [pc, #584]	@ (8001db4 <main+0x36c>)
 8001b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6e:	4282      	cmp	r2, r0
 8001b70:	418b      	sbcs	r3, r1
 8001b72:	d211      	bcs.n	8001b98 <main+0x150>
			timestamp = currentTime + 10000;  //us
 8001b74:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001b78:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001b7c:	1851      	adds	r1, r2, r1
 8001b7e:	6639      	str	r1, [r7, #96]	@ 0x60
 8001b80:	f143 0300 	adc.w	r3, r3, #0
 8001b84:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b86:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001b8a:	4b8a      	ldr	r3, [pc, #552]	@ (8001db4 <main+0x36c>)
 8001b8c:	e9c3 0100 	strd	r0, r1, [r3]
			Prismatic_PosVel_Update();
 8001b90:	f002 fa30 	bl	8003ff4 <Prismatic_PosVel_Update>
			Revolute_PosVel_Update();
 8001b94:	f002 f960 	bl	8003e58 <Revolute_PosVel_Update>
		}
		//Call every 0.1 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 8001b98:	f002 f87a 	bl	8003c90 <micros>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		if (currentTime1 > timestamp1) {
 8001ba4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001ba8:	4b83      	ldr	r3, [pc, #524]	@ (8001db8 <main+0x370>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	4282      	cmp	r2, r0
 8001bb0:	418b      	sbcs	r3, r1
 8001bb2:	d20c      	bcs.n	8001bce <main+0x186>
			timestamp1 = currentTime1 + 100000;  //us
 8001bb4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001bb8:	4980      	ldr	r1, [pc, #512]	@ (8001dbc <main+0x374>)
 8001bba:	1851      	adds	r1, r2, r1
 8001bbc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001bbe:	f143 0300 	adc.w	r3, r3, #0
 8001bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001bc4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001bc8:	4b7b      	ldr	r3, [pc, #492]	@ (8001db8 <main+0x370>)
 8001bca:	e9c3 0100 	strd	r0, r1, [r3]

		}
		End_x = Prismatic_QEIdata.mmPosition
 8001bce:	4b7c      	ldr	r3, [pc, #496]	@ (8001dc0 <main+0x378>)
 8001bd0:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
				* cosf(Revolute_QEIdata.RadPosition * -1);
 8001bd4:	4b7b      	ldr	r3, [pc, #492]	@ (8001dc4 <main+0x37c>)
 8001bd6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001bda:	eef1 7a67 	vneg.f32	s15, s15
 8001bde:	eeb0 0a67 	vmov.f32	s0, s15
 8001be2:	f009 fabf 	bl	800b164 <cosf>
 8001be6:	eef0 7a40 	vmov.f32	s15, s0
 8001bea:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_x = Prismatic_QEIdata.mmPosition
 8001bee:	4b76      	ldr	r3, [pc, #472]	@ (8001dc8 <main+0x380>)
 8001bf0:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition
 8001bf4:	4b72      	ldr	r3, [pc, #456]	@ (8001dc0 <main+0x378>)
 8001bf6:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
				* sinf(Revolute_QEIdata.RadPosition);
 8001bfa:	4b72      	ldr	r3, [pc, #456]	@ (8001dc4 <main+0x37c>)
 8001bfc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001c00:	eeb0 0a67 	vmov.f32	s0, s15
 8001c04:	f009 faf2 	bl	800b1ec <sinf>
 8001c08:	eef0 7a40 	vmov.f32	s15, s0
 8001c0c:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_y = Prismatic_QEIdata.mmPosition
 8001c10:	4b6e      	ldr	r3, [pc, #440]	@ (8001dcc <main+0x384>)
 8001c12:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<RECEIVER>> ////////////////////////
		Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8001c16:	4b57      	ldr	r3, [pc, #348]	@ (8001d74 <main+0x32c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b6c      	ldr	r3, [pc, #432]	@ (8001dd0 <main+0x388>)
 8001c20:	601a      	str	r2, [r3, #0]
		Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8001c22:	4b53      	ldr	r3, [pc, #332]	@ (8001d70 <main+0x328>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b69      	ldr	r3, [pc, #420]	@ (8001dd0 <main+0x388>)
 8001c2c:	605a      	str	r2, [r3, #4]
		float RX_temp = map(
		__HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_2) - 1500.00, -500.00, 500.00,
 8001c2e:	4b51      	ldr	r3, [pc, #324]	@ (8001d74 <main+0x32c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fc31 	bl	800049c <__aeabi_ui2d>
 8001c3a:	a349      	add	r3, pc, #292	@ (adr r3, 8001d60 <main+0x318>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	f7fe faee 	bl	8000220 <__aeabi_dsub>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
		float RX_temp = map(
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ff3a 	bl	8000ac4 <__aeabi_d2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	ed9f 2a60 	vldr	s4, [pc, #384]	@ 8001dd4 <main+0x38c>
 8001c56:	eddf 1a65 	vldr	s3, [pc, #404]	@ 8001dec <main+0x3a4>
 8001c5a:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 8001dd8 <main+0x390>
 8001c5e:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001ddc <main+0x394>
 8001c62:	ee00 3a10 	vmov	s0, r3
 8001c66:	f001 ff05 	bl	8003a74 <map>
 8001c6a:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
				-100.00, 100.00);
		float RY_temp = map(
		__HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1) - 18530.00, -500.00, 500.00,
 8001c6e:	4b40      	ldr	r3, [pc, #256]	@ (8001d70 <main+0x328>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fc11 	bl	800049c <__aeabi_ui2d>
 8001c7a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001d68 <main+0x320>)
 8001c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c80:	f7fe face 	bl	8000220 <__aeabi_dsub>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
		float RY_temp = map(
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f7fe ff1a 	bl	8000ac4 <__aeabi_d2f>
 8001c90:	4603      	mov	r3, r0
 8001c92:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 8001dd4 <main+0x38c>
 8001c96:	eddf 1a55 	vldr	s3, [pc, #340]	@ 8001dec <main+0x3a4>
 8001c9a:	ed9f 1a4f 	vldr	s2, [pc, #316]	@ 8001dd8 <main+0x390>
 8001c9e:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 8001ddc <main+0x394>
 8001ca2:	ee00 3a10 	vmov	s0, r3
 8001ca6:	f001 fee5 	bl	8003a74 <map>
 8001caa:	ed87 0a20 	vstr	s0, [r7, #128]	@ 0x80
				-100.00, 100.00);

		if (RX_temp >= -4 && RX_temp <= 4)
 8001cae:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001cb2:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8001cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbe:	db0d      	blt.n	8001cdc <main+0x294>
 8001cc0:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001cc4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001cc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd0:	d804      	bhi.n	8001cdc <main+0x294>
			Receiver[0] = 0.00;
 8001cd2:	4a43      	ldr	r2, [pc, #268]	@ (8001de0 <main+0x398>)
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e01d      	b.n	8001d18 <main+0x2d0>
		else if (RX_temp > 100)
 8001cdc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001ce0:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001dd4 <main+0x38c>
 8001ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cec:	dd03      	ble.n	8001cf6 <main+0x2ae>
			Receiver[0] = 100.00;
 8001cee:	4a3c      	ldr	r2, [pc, #240]	@ (8001de0 <main+0x398>)
 8001cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8001de4 <main+0x39c>)
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e010      	b.n	8001d18 <main+0x2d0>
		else if (RX_temp < -100)
 8001cf6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001cfa:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001dec <main+0x3a4>
 8001cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	d503      	bpl.n	8001d10 <main+0x2c8>
			Receiver[0] = -100.00;
 8001d08:	4a35      	ldr	r2, [pc, #212]	@ (8001de0 <main+0x398>)
 8001d0a:	4b37      	ldr	r3, [pc, #220]	@ (8001de8 <main+0x3a0>)
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e003      	b.n	8001d18 <main+0x2d0>
		else
			Receiver[0] = RX_temp;
 8001d10:	4a33      	ldr	r2, [pc, #204]	@ (8001de0 <main+0x398>)
 8001d12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d16:	6013      	str	r3, [r2, #0]
		if (RY_temp >= -4 && RY_temp <= 4)
 8001d18:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001d1c:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8001d20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d28:	db0d      	blt.n	8001d46 <main+0x2fe>
 8001d2a:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001d2e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3a:	d804      	bhi.n	8001d46 <main+0x2fe>
			Receiver[1] = 0.00;
 8001d3c:	4a28      	ldr	r2, [pc, #160]	@ (8001de0 <main+0x398>)
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	6053      	str	r3, [r2, #4]
 8001d44:	e065      	b.n	8001e12 <main+0x3ca>
		else if (RY_temp > 100)
 8001d46:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001d4a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001dd4 <main+0x38c>
 8001d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d56:	dd4b      	ble.n	8001df0 <main+0x3a8>
			Receiver[1] = 100.00;
 8001d58:	4a21      	ldr	r2, [pc, #132]	@ (8001de0 <main+0x398>)
 8001d5a:	4b22      	ldr	r3, [pc, #136]	@ (8001de4 <main+0x39c>)
 8001d5c:	6053      	str	r3, [r2, #4]
 8001d5e:	e058      	b.n	8001e12 <main+0x3ca>
 8001d60:	00000000 	.word	0x00000000
 8001d64:	40977000 	.word	0x40977000
 8001d68:	00000000 	.word	0x00000000
 8001d6c:	40d21880 	.word	0x40d21880
 8001d70:	20000234 	.word	0x20000234
 8001d74:	20000300 	.word	0x20000300
 8001d78:	200003cc 	.word	0x200003cc
 8001d7c:	20000498 	.word	0x20000498
 8001d80:	20000564 	.word	0x20000564
 8001d84:	20000630 	.word	0x20000630
 8001d88:	200006fc 	.word	0x200006fc
 8001d8c:	20000b38 	.word	0x20000b38
 8001d90:	3dcccccd 	.word	0x3dcccccd
 8001d94:	3727c5ac 	.word	0x3727c5ac
 8001d98:	20000b7c 	.word	0x20000b7c
 8001d9c:	20000ba8 	.word	0x20000ba8
 8001da0:	20000894 	.word	0x20000894
 8001da4:	200007c8 	.word	0x200007c8
 8001da8:	20001080 	.word	0x20001080
 8001dac:	20000a68 	.word	0x20000a68
 8001db0:	20000a6c 	.word	0x20000a6c
 8001db4:	20001210 	.word	0x20001210
 8001db8:	20001218 	.word	0x20001218
 8001dbc:	000186a0 	.word	0x000186a0
 8001dc0:	20000ab0 	.word	0x20000ab0
 8001dc4:	20000a70 	.word	0x20000a70
 8001dc8:	20000af0 	.word	0x20000af0
 8001dcc:	20000af4 	.word	0x20000af4
 8001dd0:	20000a3c 	.word	0x20000a3c
 8001dd4:	42c80000 	.word	0x42c80000
 8001dd8:	43fa0000 	.word	0x43fa0000
 8001ddc:	c3fa0000 	.word	0xc3fa0000
 8001de0:	20000a28 	.word	0x20000a28
 8001de4:	42c80000 	.word	0x42c80000
 8001de8:	c2c80000 	.word	0xc2c80000
 8001dec:	c2c80000 	.word	0xc2c80000
		else if (RY_temp < -100)
 8001df0:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001df4:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8001dec <main+0x3a4>
 8001df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e00:	d503      	bpl.n	8001e0a <main+0x3c2>
			Receiver[1] = -100.00;
 8001e02:	4ab7      	ldr	r2, [pc, #732]	@ (80020e0 <main+0x698>)
 8001e04:	4bb7      	ldr	r3, [pc, #732]	@ (80020e4 <main+0x69c>)
 8001e06:	6053      	str	r3, [r2, #4]
 8001e08:	e003      	b.n	8001e12 <main+0x3ca>
		else
			Receiver[1] = RY_temp;
 8001e0a:	4ab5      	ldr	r2, [pc, #724]	@ (80020e0 <main+0x698>)
 8001e0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e10:	6053      	str	r3, [r2, #4]

		Receiver[2] = map((float) pulse_width_us[0] - 1500.00, -500.00, 500.00,
 8001e12:	4bb5      	ldr	r3, [pc, #724]	@ (80020e8 <main+0x6a0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e1e:	ee17 0a90 	vmov	r0, s15
 8001e22:	f7fe fb5d 	bl	80004e0 <__aeabi_f2d>
 8001e26:	a3ac      	add	r3, pc, #688	@ (adr r3, 80020d8 <main+0x690>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	f7fe f9f8 	bl	8000220 <__aeabi_dsub>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	f7fe fe44 	bl	8000ac4 <__aeabi_d2f>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	ed9f 2aab 	vldr	s4, [pc, #684]	@ 80020ec <main+0x6a4>
 8001e42:	eddf 1aab 	vldr	s3, [pc, #684]	@ 80020f0 <main+0x6a8>
 8001e46:	ed9f 1aab 	vldr	s2, [pc, #684]	@ 80020f4 <main+0x6ac>
 8001e4a:	eddf 0aab 	vldr	s1, [pc, #684]	@ 80020f8 <main+0x6b0>
 8001e4e:	ee00 3a10 	vmov	s0, r3
 8001e52:	f001 fe0f 	bl	8003a74 <map>
 8001e56:	eef0 7a40 	vmov.f32	s15, s0
 8001e5a:	4ba1      	ldr	r3, [pc, #644]	@ (80020e0 <main+0x698>)
 8001e5c:	edc3 7a02 	vstr	s15, [r3, #8]
				-100.00, 100.00);
		Receiver[3] = map((float) pulse_width_us[1] - 1500.00, -500.00, 500.00,
 8001e60:	4ba1      	ldr	r3, [pc, #644]	@ (80020e8 <main+0x6a0>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e6c:	ee17 0a90 	vmov	r0, s15
 8001e70:	f7fe fb36 	bl	80004e0 <__aeabi_f2d>
 8001e74:	a398      	add	r3, pc, #608	@ (adr r3, 80020d8 <main+0x690>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	f7fe f9d1 	bl	8000220 <__aeabi_dsub>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fe1d 	bl	8000ac4 <__aeabi_d2f>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	ed9f 2a97 	vldr	s4, [pc, #604]	@ 80020ec <main+0x6a4>
 8001e90:	eddf 1a97 	vldr	s3, [pc, #604]	@ 80020f0 <main+0x6a8>
 8001e94:	ed9f 1a97 	vldr	s2, [pc, #604]	@ 80020f4 <main+0x6ac>
 8001e98:	eddf 0a97 	vldr	s1, [pc, #604]	@ 80020f8 <main+0x6b0>
 8001e9c:	ee00 3a10 	vmov	s0, r3
 8001ea0:	f001 fde8 	bl	8003a74 <map>
 8001ea4:	eef0 7a40 	vmov.f32	s15, s0
 8001ea8:	4b8d      	ldr	r3, [pc, #564]	@ (80020e0 <main+0x698>)
 8001eaa:	edc3 7a03 	vstr	s15, [r3, #12]
				-100.00, 100.00);
		Receiver[4] = map((float) pulse_width_us[2] - 1500.00, -500.00, 500.00,
 8001eae:	4b8e      	ldr	r3, [pc, #568]	@ (80020e8 <main+0x6a0>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eba:	ee17 0a90 	vmov	r0, s15
 8001ebe:	f7fe fb0f 	bl	80004e0 <__aeabi_f2d>
 8001ec2:	a385      	add	r3, pc, #532	@ (adr r3, 80020d8 <main+0x690>)
 8001ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec8:	f7fe f9aa 	bl	8000220 <__aeabi_dsub>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f7fe fdf6 	bl	8000ac4 <__aeabi_d2f>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	ed9f 2a84 	vldr	s4, [pc, #528]	@ 80020ec <main+0x6a4>
 8001ede:	eddf 1a84 	vldr	s3, [pc, #528]	@ 80020f0 <main+0x6a8>
 8001ee2:	ed9f 1a84 	vldr	s2, [pc, #528]	@ 80020f4 <main+0x6ac>
 8001ee6:	eddf 0a84 	vldr	s1, [pc, #528]	@ 80020f8 <main+0x6b0>
 8001eea:	ee00 3a10 	vmov	s0, r3
 8001eee:	f001 fdc1 	bl	8003a74 <map>
 8001ef2:	eef0 7a40 	vmov.f32	s15, s0
 8001ef6:	4b7a      	ldr	r3, [pc, #488]	@ (80020e0 <main+0x698>)
 8001ef8:	edc3 7a04 	vstr	s15, [r3, #16]
				-100.00, 100.00);

		//Adjust as needed
		vx = map((float) Receiver[0], -100.00, 100.00, -300.00, 300.00);
 8001efc:	4b78      	ldr	r3, [pc, #480]	@ (80020e0 <main+0x698>)
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	ed9f 2a7e 	vldr	s4, [pc, #504]	@ 80020fc <main+0x6b4>
 8001f06:	eddf 1a7e 	vldr	s3, [pc, #504]	@ 8002100 <main+0x6b8>
 8001f0a:	ed9f 1a78 	vldr	s2, [pc, #480]	@ 80020ec <main+0x6a4>
 8001f0e:	eddf 0a78 	vldr	s1, [pc, #480]	@ 80020f0 <main+0x6a8>
 8001f12:	eeb0 0a67 	vmov.f32	s0, s15
 8001f16:	f001 fdad 	bl	8003a74 <map>
 8001f1a:	eef0 7a40 	vmov.f32	s15, s0
 8001f1e:	4b79      	ldr	r3, [pc, #484]	@ (8002104 <main+0x6bc>)
 8001f20:	edc3 7a00 	vstr	s15, [r3]
		vy = map((float) Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8001f24:	4b6e      	ldr	r3, [pc, #440]	@ (80020e0 <main+0x698>)
 8001f26:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f2a:	ed9f 2a74 	vldr	s4, [pc, #464]	@ 80020fc <main+0x6b4>
 8001f2e:	eddf 1a74 	vldr	s3, [pc, #464]	@ 8002100 <main+0x6b8>
 8001f32:	ed9f 1a6e 	vldr	s2, [pc, #440]	@ 80020ec <main+0x6a4>
 8001f36:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 80020f0 <main+0x6a8>
 8001f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f3e:	f001 fd99 	bl	8003a74 <map>
 8001f42:	eef0 7a40 	vmov.f32	s15, s0
 8001f46:	4b70      	ldr	r3, [pc, #448]	@ (8002108 <main+0x6c0>)
 8001f48:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8001f4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f50:	486e      	ldr	r0, [pc, #440]	@ (800210c <main+0x6c4>)
 8001f52:	f003 fbcd 	bl	80056f0 <HAL_GPIO_ReadPin>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d10e      	bne.n	8001f7a <main+0x532>
			Mode = 0;
 8001f5c:	4a6c      	ldr	r2, [pc, #432]	@ (8002110 <main+0x6c8>)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 8001f62:	4a6c      	ldr	r2, [pc, #432]	@ (8002114 <main+0x6cc>)
 8001f64:	2301      	movs	r3, #1
 8001f66:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f002 f96b 	bl	8004244 <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f74:	4865      	ldr	r0, [pc, #404]	@ (800210c <main+0x6c4>)
 8001f76:	f003 fbd3 	bl	8005720 <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1) {
 8001f7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f7e:	4866      	ldr	r0, [pc, #408]	@ (8002118 <main+0x6d0>)
 8001f80:	f003 fbb6 	bl	80056f0 <HAL_GPIO_ReadPin>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d108      	bne.n	8001f9c <main+0x554>
			EmergencyState = 0;
 8001f8a:	4a62      	ldr	r2, [pc, #392]	@ (8002114 <main+0x6cc>)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f96:	485d      	ldr	r0, [pc, #372]	@ (800210c <main+0x6c4>)
 8001f98:	f003 fbc2 	bl	8005720 <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 8001f9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fa0:	485d      	ldr	r0, [pc, #372]	@ (8002118 <main+0x6d0>)
 8001fa2:	f003 fba5 	bl	80056f0 <HAL_GPIO_ReadPin>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d102      	bne.n	8001fb2 <main+0x56a>
			Pen_Status = 0;
 8001fac:	4a5b      	ldr	r2, [pc, #364]	@ (800211c <main+0x6d4>)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1) {
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	4858      	ldr	r0, [pc, #352]	@ (8002118 <main+0x6d0>)
 8001fb6:	f003 fb9b 	bl	80056f0 <HAL_GPIO_ReadPin>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d102      	bne.n	8001fc6 <main+0x57e>
			Pen_Status = 1;
 8001fc0:	4a56      	ldr	r2, [pc, #344]	@ (800211c <main+0x6d4>)
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	7013      	strb	r3, [r2, #0]
		}

		if (EmergencyState == 1) {
 8001fc6:	4b53      	ldr	r3, [pc, #332]	@ (8002114 <main+0x6cc>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d103      	bne.n	8001fd6 <main+0x58e>
			Mode = 0;
 8001fce:	4a50      	ldr	r2, [pc, #320]	@ (8002110 <main+0x6c8>)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	7013      	strb	r3, [r2, #0]
 8001fd4:	e197      	b.n	8002306 <main+0x8be>
		} else if (Receiver[2] < -30 && Receiver[4] < -30) {
 8001fd6:	4b42      	ldr	r3, [pc, #264]	@ (80020e0 <main+0x698>)
 8001fd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fdc:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe8:	d513      	bpl.n	8002012 <main+0x5ca>
 8001fea:	4b3d      	ldr	r3, [pc, #244]	@ (80020e0 <main+0x698>)
 8001fec:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ff0:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffc:	d509      	bpl.n	8002012 <main+0x5ca>
			Mode = 0;
 8001ffe:	4a44      	ldr	r2, [pc, #272]	@ (8002110 <main+0x6c8>)
 8002000:	2300      	movs	r3, #0
 8002002:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800200a:	4840      	ldr	r0, [pc, #256]	@ (800210c <main+0x6c4>)
 800200c:	f003 fb88 	bl	8005720 <HAL_GPIO_WritePin>
 8002010:	e179      	b.n	8002306 <main+0x8be>
		} else if (Receiver[3] > 0 && IsPress == 0) {
 8002012:	4b33      	ldr	r3, [pc, #204]	@ (80020e0 <main+0x698>)
 8002014:	edd3 7a03 	vldr	s15, [r3, #12]
 8002018:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800201c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002020:	f340 816e 	ble.w	8002300 <main+0x8b8>
 8002024:	4b3e      	ldr	r3, [pc, #248]	@ (8002120 <main+0x6d8>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	f040 8169 	bne.w	8002300 <main+0x8b8>
			IsPress = 1;
 800202e:	4a3c      	ldr	r2, [pc, #240]	@ (8002120 <main+0x6d8>)
 8002030:	2301      	movs	r3, #1
 8002032:	7013      	strb	r3, [r2, #0]
			calibState = CALIB_IDLE;
 8002034:	4a3b      	ldr	r2, [pc, #236]	@ (8002124 <main+0x6dc>)
 8002036:	2300      	movs	r3, #0
 8002038:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 800203a:	4b29      	ldr	r3, [pc, #164]	@ (80020e0 <main+0x698>)
 800203c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002040:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204c:	dd2c      	ble.n	80020a8 <main+0x660>
 800204e:	4b24      	ldr	r3, [pc, #144]	@ (80020e0 <main+0x698>)
 8002050:	edd3 7a02 	vldr	s15, [r3, #8]
 8002054:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800205c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002060:	d522      	bpl.n	80020a8 <main+0x660>
 8002062:	4b1f      	ldr	r3, [pc, #124]	@ (80020e0 <main+0x698>)
 8002064:	edd3 7a04 	vldr	s15, [r3, #16]
 8002068:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800206c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002074:	d518      	bpl.n	80020a8 <main+0x660>
				if (Mode != 1) {
 8002076:	4b26      	ldr	r3, [pc, #152]	@ (8002110 <main+0x6c8>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d003      	beq.n	8002086 <main+0x63e>
					Mode = 1;
 800207e:	4a24      	ldr	r2, [pc, #144]	@ (8002110 <main+0x6c8>)
 8002080:	2301      	movs	r3, #1
 8002082:	7013      	strb	r3, [r2, #0]
				if (Mode != 1) {
 8002084:	e12d      	b.n	80022e2 <main+0x89a>
				} else {
					TargetX = End_x;
 8002086:	4b28      	ldr	r3, [pc, #160]	@ (8002128 <main+0x6e0>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b28      	ldr	r3, [pc, #160]	@ (800212c <main+0x6e4>)
 800208c:	601a      	str	r2, [r3, #0]
					TargetY = End_y;
 800208e:	4b28      	ldr	r3, [pc, #160]	@ (8002130 <main+0x6e8>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	4b28      	ldr	r3, [pc, #160]	@ (8002134 <main+0x6ec>)
 8002094:	601a      	str	r2, [r3, #0]
					TargetR = Revolute_QEIdata.RadPosition;
 8002096:	4b28      	ldr	r3, [pc, #160]	@ (8002138 <main+0x6f0>)
 8002098:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800209a:	4b28      	ldr	r3, [pc, #160]	@ (800213c <main+0x6f4>)
 800209c:	601a      	str	r2, [r3, #0]
					TargetP = Prismatic_QEIdata.mmPosition;
 800209e:	4b28      	ldr	r3, [pc, #160]	@ (8002140 <main+0x6f8>)
 80020a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020a2:	4b28      	ldr	r3, [pc, #160]	@ (8002144 <main+0x6fc>)
 80020a4:	601a      	str	r2, [r3, #0]
				if (Mode != 1) {
 80020a6:	e11c      	b.n	80022e2 <main+0x89a>
				}
			} else if (Receiver[2] > 30 && Receiver[4] < -30) {
 80020a8:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <main+0x698>)
 80020aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80020ae:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80020b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ba:	dd45      	ble.n	8002148 <main+0x700>
 80020bc:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <main+0x698>)
 80020be:	edd3 7a04 	vldr	s15, [r3, #16]
 80020c2:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80020c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ce:	d53b      	bpl.n	8002148 <main+0x700>
				Mode = 2;
 80020d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002110 <main+0x6c8>)
 80020d2:	2302      	movs	r3, #2
 80020d4:	7013      	strb	r3, [r2, #0]
 80020d6:	e104      	b.n	80022e2 <main+0x89a>
 80020d8:	00000000 	.word	0x00000000
 80020dc:	40977000 	.word	0x40977000
 80020e0:	20000a28 	.word	0x20000a28
 80020e4:	c2c80000 	.word	0xc2c80000
 80020e8:	20000a5c 	.word	0x20000a5c
 80020ec:	42c80000 	.word	0x42c80000
 80020f0:	c2c80000 	.word	0xc2c80000
 80020f4:	43fa0000 	.word	0x43fa0000
 80020f8:	c3fa0000 	.word	0xc3fa0000
 80020fc:	43960000 	.word	0x43960000
 8002100:	c3960000 	.word	0xc3960000
 8002104:	20000ae8 	.word	0x20000ae8
 8002108:	20000aec 	.word	0x20000aec
 800210c:	48000800 	.word	0x48000800
 8002110:	20000b28 	.word	0x20000b28
 8002114:	20000b29 	.word	0x20000b29
 8002118:	48000400 	.word	0x48000400
 800211c:	20000b2b 	.word	0x20000b2b
 8002120:	20000b2a 	.word	0x20000b2a
 8002124:	20000b7c 	.word	0x20000b7c
 8002128:	20000af0 	.word	0x20000af0
 800212c:	20000af8 	.word	0x20000af8
 8002130:	20000af4 	.word	0x20000af4
 8002134:	20000afc 	.word	0x20000afc
 8002138:	20000a70 	.word	0x20000a70
 800213c:	20000b00 	.word	0x20000b00
 8002140:	20000ab0 	.word	0x20000ab0
 8002144:	20000b04 	.word	0x20000b04
			} else if (Receiver[2] < -30 && Receiver[4] > -30
 8002148:	4b66      	ldr	r3, [pc, #408]	@ (80022e4 <main+0x89c>)
 800214a:	edd3 7a02 	vldr	s15, [r3, #8]
 800214e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215a:	d517      	bpl.n	800218c <main+0x744>
 800215c:	4b61      	ldr	r3, [pc, #388]	@ (80022e4 <main+0x89c>)
 800215e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002162:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800216a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216e:	dd0d      	ble.n	800218c <main+0x744>
					&& Receiver[4] < 30) {
 8002170:	4b5c      	ldr	r3, [pc, #368]	@ (80022e4 <main+0x89c>)
 8002172:	edd3 7a04 	vldr	s15, [r3, #16]
 8002176:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800217a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002182:	d503      	bpl.n	800218c <main+0x744>
				Mode = 3;
 8002184:	4a58      	ldr	r2, [pc, #352]	@ (80022e8 <main+0x8a0>)
 8002186:	2303      	movs	r3, #3
 8002188:	7013      	strb	r3, [r2, #0]
 800218a:	e0aa      	b.n	80022e2 <main+0x89a>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 800218c:	4b55      	ldr	r3, [pc, #340]	@ (80022e4 <main+0x89c>)
 800218e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002192:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219e:	dd21      	ble.n	80021e4 <main+0x79c>
 80021a0:	4b50      	ldr	r3, [pc, #320]	@ (80022e4 <main+0x89c>)
 80021a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80021a6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80021aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b2:	d517      	bpl.n	80021e4 <main+0x79c>
					&& Receiver[4] > -30 && Receiver[4] < 30) {
 80021b4:	4b4b      	ldr	r3, [pc, #300]	@ (80022e4 <main+0x89c>)
 80021b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80021ba:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80021be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c6:	dd0d      	ble.n	80021e4 <main+0x79c>
 80021c8:	4b46      	ldr	r3, [pc, #280]	@ (80022e4 <main+0x89c>)
 80021ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80021ce:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80021d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021da:	d503      	bpl.n	80021e4 <main+0x79c>
				Mode = 4;
 80021dc:	4a42      	ldr	r2, [pc, #264]	@ (80022e8 <main+0x8a0>)
 80021de:	2304      	movs	r3, #4
 80021e0:	7013      	strb	r3, [r2, #0]
 80021e2:	e07e      	b.n	80022e2 <main+0x89a>
			} else if (Receiver[2] > 30 && Receiver[4] > -30
 80021e4:	4b3f      	ldr	r3, [pc, #252]	@ (80022e4 <main+0x89c>)
 80021e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80021ea:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80021ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f6:	dd17      	ble.n	8002228 <main+0x7e0>
 80021f8:	4b3a      	ldr	r3, [pc, #232]	@ (80022e4 <main+0x89c>)
 80021fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80021fe:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	dd0d      	ble.n	8002228 <main+0x7e0>
					&& Receiver[4] < 30) {
 800220c:	4b35      	ldr	r3, [pc, #212]	@ (80022e4 <main+0x89c>)
 800220e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002212:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800221a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221e:	d503      	bpl.n	8002228 <main+0x7e0>
				Mode = 5;
 8002220:	4a31      	ldr	r2, [pc, #196]	@ (80022e8 <main+0x8a0>)
 8002222:	2305      	movs	r3, #5
 8002224:	7013      	strb	r3, [r2, #0]
 8002226:	e05c      	b.n	80022e2 <main+0x89a>
			} else if (Receiver[2] < -30 && Receiver[4] > 30) {
 8002228:	4b2e      	ldr	r3, [pc, #184]	@ (80022e4 <main+0x89c>)
 800222a:	edd3 7a02 	vldr	s15, [r3, #8]
 800222e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223a:	d50d      	bpl.n	8002258 <main+0x810>
 800223c:	4b29      	ldr	r3, [pc, #164]	@ (80022e4 <main+0x89c>)
 800223e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002242:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224e:	dd03      	ble.n	8002258 <main+0x810>
				Mode = 6;
 8002250:	4a25      	ldr	r2, [pc, #148]	@ (80022e8 <main+0x8a0>)
 8002252:	2306      	movs	r3, #6
 8002254:	7013      	strb	r3, [r2, #0]
 8002256:	e044      	b.n	80022e2 <main+0x89a>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 8002258:	4b22      	ldr	r3, [pc, #136]	@ (80022e4 <main+0x89c>)
 800225a:	edd3 7a02 	vldr	s15, [r3, #8]
 800225e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226a:	dd17      	ble.n	800229c <main+0x854>
 800226c:	4b1d      	ldr	r3, [pc, #116]	@ (80022e4 <main+0x89c>)
 800226e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002272:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	d50d      	bpl.n	800229c <main+0x854>
					&& Receiver[4] > 30) {
 8002280:	4b18      	ldr	r3, [pc, #96]	@ (80022e4 <main+0x89c>)
 8002282:	edd3 7a04 	vldr	s15, [r3, #16]
 8002286:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800228a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	dd03      	ble.n	800229c <main+0x854>
				Mode = 7;
 8002294:	4a14      	ldr	r2, [pc, #80]	@ (80022e8 <main+0x8a0>)
 8002296:	2307      	movs	r3, #7
 8002298:	7013      	strb	r3, [r2, #0]
 800229a:	e022      	b.n	80022e2 <main+0x89a>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 800229c:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <main+0x89c>)
 800229e:	edd3 7a02 	vldr	s15, [r3, #8]
 80022a2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80022a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ae:	dc00      	bgt.n	80022b2 <main+0x86a>
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 80022b0:	e029      	b.n	8002306 <main+0x8be>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 80022b2:	4b0c      	ldr	r3, [pc, #48]	@ (80022e4 <main+0x89c>)
 80022b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80022b8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80022bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c4:	dc00      	bgt.n	80022c8 <main+0x880>
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 80022c6:	e01e      	b.n	8002306 <main+0x8be>
				loop_counter = 0;
 80022c8:	4a08      	ldr	r2, [pc, #32]	@ (80022ec <main+0x8a4>)
 80022ca:	2300      	movs	r3, #0
 80022cc:	6013      	str	r3, [r2, #0]
				TargetR = 4.18879;
 80022ce:	4a08      	ldr	r2, [pc, #32]	@ (80022f0 <main+0x8a8>)
 80022d0:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <main+0x8ac>)
 80022d2:	6013      	str	r3, [r2, #0]
				TargetP = 50;
 80022d4:	4a08      	ldr	r2, [pc, #32]	@ (80022f8 <main+0x8b0>)
 80022d6:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <main+0x8b4>)
 80022d8:	6013      	str	r3, [r2, #0]
				Mode = 8;
 80022da:	4a03      	ldr	r2, [pc, #12]	@ (80022e8 <main+0x8a0>)
 80022dc:	2308      	movs	r3, #8
 80022de:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 80022e0:	e011      	b.n	8002306 <main+0x8be>
 80022e2:	e010      	b.n	8002306 <main+0x8be>
 80022e4:	20000a28 	.word	0x20000a28
 80022e8:	20000b28 	.word	0x20000b28
 80022ec:	20000b98 	.word	0x20000b98
 80022f0:	20000b00 	.word	0x20000b00
 80022f4:	40860a91 	.word	0x40860a91
 80022f8:	20000b04 	.word	0x20000b04
 80022fc:	42480000 	.word	0x42480000
			}
		} else {
			IsPress = 0;
 8002300:	4acd      	ldr	r2, [pc, #820]	@ (8002638 <main+0xbf0>)
 8002302:	2300      	movs	r3, #0
 8002304:	7013      	strb	r3, [r2, #0]
//			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
//		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<STOP>> ////////////////////////////
		if (Mode == 0) {
 8002306:	4bcd      	ldr	r3, [pc, #820]	@ (800263c <main+0xbf4>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10c      	bne.n	8002328 <main+0x8e0>
			Set_Motor(0, 0);
 800230e:	ed9f 0acc 	vldr	s0, [pc, #816]	@ 8002640 <main+0xbf8>
 8002312:	2000      	movs	r0, #0
 8002314:	f001 ff18 	bl	8004148 <Set_Motor>
			Set_Motor(1, 0);
 8002318:	ed9f 0ac9 	vldr	s0, [pc, #804]	@ 8002640 <main+0xbf8>
 800231c:	2001      	movs	r0, #1
 800231e:	f001 ff13 	bl	8004148 <Set_Motor>
			Set_Servo(0);
 8002322:	2000      	movs	r0, #0
 8002324:	f001 ff8e 	bl	8004244 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MANUAL>> //////////////////////////
		if (Mode == 1) {
 8002328:	4bc4      	ldr	r3, [pc, #784]	@ (800263c <main+0xbf4>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b01      	cmp	r3, #1
 800232e:	f040 8102 	bne.w	8002536 <main+0xaee>
			//////////////////////// <<CONTROL>> /////////////////////////
//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
			TargetRVel =
					(map((float) Receiver[0], -100.00, 100.00, -1.00, 1.00))
 8002332:	4bc4      	ldr	r3, [pc, #784]	@ (8002644 <main+0xbfc>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 800233c:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 8002340:	ed9f 1ac1 	vldr	s2, [pc, #772]	@ 8002648 <main+0xc00>
 8002344:	eddf 0ac1 	vldr	s1, [pc, #772]	@ 800264c <main+0xc04>
 8002348:	eeb0 0a67 	vmov.f32	s0, s15
 800234c:	f001 fb92 	bl	8003a74 <map>
 8002350:	eef0 7a40 	vmov.f32	s15, s0
							* -1;
 8002354:	eef1 7a67 	vneg.f32	s15, s15
			TargetRVel =
 8002358:	4bbd      	ldr	r3, [pc, #756]	@ (8002650 <main+0xc08>)
 800235a:	edc3 7a00 	vstr	s15, [r3]
			TargetPVel = map((float) Receiver[1], -100.00, 100.00, -500.00,
 800235e:	4bb9      	ldr	r3, [pc, #740]	@ (8002644 <main+0xbfc>)
 8002360:	edd3 7a01 	vldr	s15, [r3, #4]
 8002364:	ed9f 2abb 	vldr	s4, [pc, #748]	@ 8002654 <main+0xc0c>
 8002368:	eddf 1abb 	vldr	s3, [pc, #748]	@ 8002658 <main+0xc10>
 800236c:	ed9f 1ab6 	vldr	s2, [pc, #728]	@ 8002648 <main+0xc00>
 8002370:	eddf 0ab6 	vldr	s1, [pc, #728]	@ 800264c <main+0xc04>
 8002374:	eeb0 0a67 	vmov.f32	s0, s15
 8002378:	f001 fb7c 	bl	8003a74 <map>
 800237c:	eef0 7a40 	vmov.f32	s15, s0
 8002380:	4bb6      	ldr	r3, [pc, #728]	@ (800265c <main+0xc14>)
 8002382:	edc3 7a00 	vstr	s15, [r3]
					500.00);
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MOTOR>> ///////////////////////////
			R_Velo_Error = (TargetRVel - Revolute_QEIdata.AngularVelocity_rad)
 8002386:	4bb2      	ldr	r3, [pc, #712]	@ (8002650 <main+0xc08>)
 8002388:	ed93 7a00 	vldr	s14, [r3]
 800238c:	4bb4      	ldr	r3, [pc, #720]	@ (8002660 <main+0xc18>)
 800238e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002392:	ee77 7a67 	vsub.f32	s15, s14, s15
					* -1;
 8002396:	eef1 7a67 	vneg.f32	s15, s15
			R_Velo_Error = (TargetRVel - Revolute_QEIdata.AngularVelocity_rad)
 800239a:	4bb2      	ldr	r3, [pc, #712]	@ (8002664 <main+0xc1c>)
 800239c:	edc3 7a00 	vstr	s15, [r3]
			P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity_mm;
 80023a0:	4bae      	ldr	r3, [pc, #696]	@ (800265c <main+0xc14>)
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	4bb0      	ldr	r3, [pc, #704]	@ (8002668 <main+0xc20>)
 80023a8:	edd3 7a08 	vldr	s15, [r3, #32]
 80023ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b0:	4bae      	ldr	r3, [pc, #696]	@ (800266c <main+0xc24>)
 80023b2:	edc3 7a00 	vstr	s15, [r3]
//			PID.Kd = 0.0;
//			arm_pid_init_f32(&PID, 1);
//			P_Speed = arm_pid_f32(&PID, P_Velo_Error);

			static uint64_t timestampState1 = 0;
			int64_t currentTimeState1 = micros();
 80023b6:	f001 fc6b 	bl	8003c90 <micros>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
			if (currentTimeState1 > timestampState1) {
 80023c2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80023c6:	4baa      	ldr	r3, [pc, #680]	@ (8002670 <main+0xc28>)
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	4282      	cmp	r2, r0
 80023ce:	418b      	sbcs	r3, r1
 80023d0:	d23f      	bcs.n	8002452 <main+0xa0a>
				timestampState1 = currentTimeState1 + 10000;		//us
 80023d2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80023d6:	f242 7110 	movw	r1, #10000	@ 0x2710
 80023da:	1851      	adds	r1, r2, r1
 80023dc:	6539      	str	r1, [r7, #80]	@ 0x50
 80023de:	f143 0300 	adc.w	r3, r3, #0
 80023e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80023e4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80023e8:	4ba1      	ldr	r3, [pc, #644]	@ (8002670 <main+0xc28>)
 80023ea:	e9c3 0100 	strd	r0, r1, [r3]
				R_Speed = PID_Update(R_Velo_Error, 100.00f, 0.10f, 0.00f, 0.01f,
 80023ee:	4b9d      	ldr	r3, [pc, #628]	@ (8002664 <main+0xc1c>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	489f      	ldr	r0, [pc, #636]	@ (8002674 <main+0xc2c>)
 80023f6:	ed9f 3a94 	vldr	s6, [pc, #592]	@ 8002648 <main+0xc00>
 80023fa:	eddf 2a94 	vldr	s5, [pc, #592]	@ 800264c <main+0xc04>
 80023fe:	ed9f 2a9e 	vldr	s4, [pc, #632]	@ 8002678 <main+0xc30>
 8002402:	eddf 1a8f 	vldr	s3, [pc, #572]	@ 8002640 <main+0xbf8>
 8002406:	ed9f 1a9d 	vldr	s2, [pc, #628]	@ 800267c <main+0xc34>
 800240a:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 8002648 <main+0xc00>
 800240e:	eeb0 0a67 	vmov.f32	s0, s15
 8002412:	f001 fc57 	bl	8003cc4 <PID_Update>
 8002416:	eef0 7a40 	vmov.f32	s15, s0
 800241a:	4b99      	ldr	r3, [pc, #612]	@ (8002680 <main+0xc38>)
 800241c:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_r_v);
				P_Speed = PID_Update(P_Velo_Error, 0.2f, 1.5f, 0.00f, 0.01f,
 8002420:	4b92      	ldr	r3, [pc, #584]	@ (800266c <main+0xc24>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	4897      	ldr	r0, [pc, #604]	@ (8002684 <main+0xc3c>)
 8002428:	ed9f 3a87 	vldr	s6, [pc, #540]	@ 8002648 <main+0xc00>
 800242c:	eddf 2a87 	vldr	s5, [pc, #540]	@ 800264c <main+0xc04>
 8002430:	ed9f 2a91 	vldr	s4, [pc, #580]	@ 8002678 <main+0xc30>
 8002434:	eddf 1a82 	vldr	s3, [pc, #520]	@ 8002640 <main+0xbf8>
 8002438:	eeb7 1a08 	vmov.f32	s2, #120	@ 0x3fc00000  1.5
 800243c:	eddf 0a92 	vldr	s1, [pc, #584]	@ 8002688 <main+0xc40>
 8002440:	eeb0 0a67 	vmov.f32	s0, s15
 8002444:	f001 fc3e 	bl	8003cc4 <PID_Update>
 8002448:	eef0 7a40 	vmov.f32	s15, s0
 800244c:	4b8f      	ldr	r3, [pc, #572]	@ (800268c <main+0xc44>)
 800244e:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_p_v);
			}

			R_Speed = Receiver[0];
 8002452:	4b7c      	ldr	r3, [pc, #496]	@ (8002644 <main+0xbfc>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b8a      	ldr	r3, [pc, #552]	@ (8002680 <main+0xc38>)
 8002458:	601a      	str	r2, [r3, #0]
//			P_Speed = Receiver[1];

			if (Revolute_QEIdata.RadPosition < -1.91986 && R_Speed > 0) {
 800245a:	4b81      	ldr	r3, [pc, #516]	@ (8002660 <main+0xc18>)
 800245c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe f83e 	bl	80004e0 <__aeabi_f2d>
 8002464:	a370      	add	r3, pc, #448	@ (adr r3, 8002628 <main+0xbe0>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fe fb03 	bl	8000a74 <__aeabi_dcmplt>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00b      	beq.n	800248c <main+0xa44>
 8002474:	4b82      	ldr	r3, [pc, #520]	@ (8002680 <main+0xc38>)
 8002476:	edd3 7a00 	vldr	s15, [r3]
 800247a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800247e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002482:	dd03      	ble.n	800248c <main+0xa44>
				R_Speed = 0;
 8002484:	4a7e      	ldr	r2, [pc, #504]	@ (8002680 <main+0xc38>)
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	6013      	str	r3, [r2, #0]
			}
			if (Revolute_QEIdata.RadPosition > 5.06145 && R_Speed < 0) {
 800248c:	4b74      	ldr	r3, [pc, #464]	@ (8002660 <main+0xc18>)
 800248e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe f825 	bl	80004e0 <__aeabi_f2d>
 8002496:	a366      	add	r3, pc, #408	@ (adr r3, 8002630 <main+0xbe8>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	f7fe fb08 	bl	8000ab0 <__aeabi_dcmpgt>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <main+0xa76>
 80024a6:	4b76      	ldr	r3, [pc, #472]	@ (8002680 <main+0xc38>)
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	d503      	bpl.n	80024be <main+0xa76>
				R_Speed = 0;
 80024b6:	4a72      	ldr	r2, [pc, #456]	@ (8002680 <main+0xc38>)
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition > 305 && P_Speed > 0) {
 80024be:	4b6a      	ldr	r3, [pc, #424]	@ (8002668 <main+0xc20>)
 80024c0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80024c4:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8002690 <main+0xc48>
 80024c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	dd0b      	ble.n	80024ea <main+0xaa2>
 80024d2:	4b6e      	ldr	r3, [pc, #440]	@ (800268c <main+0xc44>)
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e0:	dd03      	ble.n	80024ea <main+0xaa2>
				P_Speed = 0;
 80024e2:	4a6a      	ldr	r2, [pc, #424]	@ (800268c <main+0xc44>)
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition < -1 && P_Speed < 0) {
 80024ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002668 <main+0xc20>)
 80024ec:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80024f0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80024f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fc:	d50b      	bpl.n	8002516 <main+0xace>
 80024fe:	4b63      	ldr	r3, [pc, #396]	@ (800268c <main+0xc44>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d503      	bpl.n	8002516 <main+0xace>
				P_Speed = 0;
 800250e:	4a5f      	ldr	r2, [pc, #380]	@ (800268c <main+0xc44>)
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	6013      	str	r3, [r2, #0]
			}

			Set_Motor(0, R_Speed);
 8002516:	4b5a      	ldr	r3, [pc, #360]	@ (8002680 <main+0xc38>)
 8002518:	edd3 7a00 	vldr	s15, [r3]
 800251c:	eeb0 0a67 	vmov.f32	s0, s15
 8002520:	2000      	movs	r0, #0
 8002522:	f001 fe11 	bl	8004148 <Set_Motor>
			Set_Motor(1, P_Speed);
 8002526:	4b59      	ldr	r3, [pc, #356]	@ (800268c <main+0xc44>)
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	eeb0 0a67 	vmov.f32	s0, s15
 8002530:	2001      	movs	r0, #1
 8002532:	f001 fe09 	bl	8004148 <Set_Motor>
			//////////////////////////////////////////////////////////////
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<GOTO>> ////////////////////////////
		if (Mode == 2) {
 8002536:	4b41      	ldr	r3, [pc, #260]	@ (800263c <main+0xbf4>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b02      	cmp	r3, #2
 800253c:	f040 8105 	bne.w	800274a <main+0xd02>
			R_Pos_Error = (TargetR - Revolute_QEIdata.RadPosition) * -1;
 8002540:	4b54      	ldr	r3, [pc, #336]	@ (8002694 <main+0xc4c>)
 8002542:	ed93 7a00 	vldr	s14, [r3]
 8002546:	4b46      	ldr	r3, [pc, #280]	@ (8002660 <main+0xc18>)
 8002548:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800254c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002550:	eef1 7a67 	vneg.f32	s15, s15
 8002554:	4b50      	ldr	r3, [pc, #320]	@ (8002698 <main+0xc50>)
 8002556:	edc3 7a00 	vstr	s15, [r3]
//			PID.Ki = 10;
//			PID.Kd = 0.1;
//			arm_pid_init_f32(&PID, 1);
//			R_Speed = arm_pid_f32(&PID, R_Pos_Error);
//
			P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 800255a:	4b50      	ldr	r3, [pc, #320]	@ (800269c <main+0xc54>)
 800255c:	ed93 7a00 	vldr	s14, [r3]
 8002560:	4b41      	ldr	r3, [pc, #260]	@ (8002668 <main+0xc20>)
 8002562:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800256a:	4b4d      	ldr	r3, [pc, #308]	@ (80026a0 <main+0xc58>)
 800256c:	edc3 7a00 	vstr	s15, [r3]
//			PID.Kd = 0.25;
//			arm_pid_init_f32(&PID, 1);
//			P_Speed = arm_pid_f32(&PID, P_Pos_Error);

			static uint64_t timestampState2 = 0;
			int64_t currentTimeState2 = micros();
 8002570:	f001 fb8e 	bl	8003c90 <micros>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
			if (currentTimeState2 > timestampState2) {
 800257c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002580:	4b48      	ldr	r3, [pc, #288]	@ (80026a4 <main+0xc5c>)
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	4282      	cmp	r2, r0
 8002588:	418b      	sbcs	r3, r1
 800258a:	d23f      	bcs.n	800260c <main+0xbc4>
				timestampState2 = currentTimeState2 + 10000;		//us
 800258c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002590:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002594:	1851      	adds	r1, r2, r1
 8002596:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002598:	f143 0300 	adc.w	r3, r3, #0
 800259c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800259e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80025a2:	4b40      	ldr	r3, [pc, #256]	@ (80026a4 <main+0xc5c>)
 80025a4:	e9c3 0100 	strd	r0, r1, [r3]
				R_Speed = PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f, 0.01f,
 80025a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002698 <main+0xc50>)
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	483e      	ldr	r0, [pc, #248]	@ (80026a8 <main+0xc60>)
 80025b0:	ed9f 3a25 	vldr	s6, [pc, #148]	@ 8002648 <main+0xc00>
 80025b4:	eddf 2a25 	vldr	s5, [pc, #148]	@ 800264c <main+0xc04>
 80025b8:	ed9f 2a2f 	vldr	s4, [pc, #188]	@ 8002678 <main+0xc30>
 80025bc:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 80025c0:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80025c4:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 80025c8:	eeb0 0a67 	vmov.f32	s0, s15
 80025cc:	f001 fb7a 	bl	8003cc4 <PID_Update>
 80025d0:	eef0 7a40 	vmov.f32	s15, s0
 80025d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002680 <main+0xc38>)
 80025d6:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_r);
				P_Speed = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f,
 80025da:	4b31      	ldr	r3, [pc, #196]	@ (80026a0 <main+0xc58>)
 80025dc:	edd3 7a00 	vldr	s15, [r3]
 80025e0:	4832      	ldr	r0, [pc, #200]	@ (80026ac <main+0xc64>)
 80025e2:	ed9f 3a19 	vldr	s6, [pc, #100]	@ 8002648 <main+0xc00>
 80025e6:	eddf 2a19 	vldr	s5, [pc, #100]	@ 800264c <main+0xc04>
 80025ea:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 8002678 <main+0xc30>
 80025ee:	eddf 1a30 	vldr	s3, [pc, #192]	@ 80026b0 <main+0xc68>
 80025f2:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 80026b4 <main+0xc6c>
 80025f6:	eddf 0a30 	vldr	s1, [pc, #192]	@ 80026b8 <main+0xc70>
 80025fa:	eeb0 0a67 	vmov.f32	s0, s15
 80025fe:	f001 fb61 	bl	8003cc4 <PID_Update>
 8002602:	eef0 7a40 	vmov.f32	s15, s0
 8002606:	4b21      	ldr	r3, [pc, #132]	@ (800268c <main+0xc44>)
 8002608:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_p);
			}

			Set_Motor(0, R_Speed);
 800260c:	4b1c      	ldr	r3, [pc, #112]	@ (8002680 <main+0xc38>)
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	eeb0 0a67 	vmov.f32	s0, s15
 8002616:	2000      	movs	r0, #0
 8002618:	f001 fd96 	bl	8004148 <Set_Motor>
			Set_Motor(1, P_Speed);
 800261c:	4b1b      	ldr	r3, [pc, #108]	@ (800268c <main+0xc44>)
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	e04b      	b.n	80026bc <main+0xc74>
 8002624:	f3af 8000 	nop.w
 8002628:	1e8e6080 	.word	0x1e8e6080
 800262c:	bffeb7bf 	.word	0xbffeb7bf
 8002630:	bfb15b57 	.word	0xbfb15b57
 8002634:	40143eec 	.word	0x40143eec
 8002638:	20000b2a 	.word	0x20000b2a
 800263c:	20000b28 	.word	0x20000b28
 8002640:	00000000 	.word	0x00000000
 8002644:	20000a28 	.word	0x20000a28
 8002648:	42c80000 	.word	0x42c80000
 800264c:	c2c80000 	.word	0xc2c80000
 8002650:	20000b08 	.word	0x20000b08
 8002654:	43fa0000 	.word	0x43fa0000
 8002658:	c3fa0000 	.word	0xc3fa0000
 800265c:	20000b0c 	.word	0x20000b0c
 8002660:	20000a70 	.word	0x20000a70
 8002664:	20000b18 	.word	0x20000b18
 8002668:	20000ab0 	.word	0x20000ab0
 800266c:	20000b1c 	.word	0x20000b1c
 8002670:	20001220 	.word	0x20001220
 8002674:	20000b6c 	.word	0x20000b6c
 8002678:	3c23d70a 	.word	0x3c23d70a
 800267c:	3dcccccd 	.word	0x3dcccccd
 8002680:	20000b20 	.word	0x20000b20
 8002684:	20000b74 	.word	0x20000b74
 8002688:	3e4ccccd 	.word	0x3e4ccccd
 800268c:	20000b24 	.word	0x20000b24
 8002690:	43988000 	.word	0x43988000
 8002694:	20000b00 	.word	0x20000b00
 8002698:	20000b10 	.word	0x20000b10
 800269c:	20000b04 	.word	0x20000b04
 80026a0:	20000b14 	.word	0x20000b14
 80026a4:	20001228 	.word	0x20001228
 80026a8:	20000b5c 	.word	0x20000b5c
 80026ac:	20000b64 	.word	0x20000b64
 80026b0:	3e19999a 	.word	0x3e19999a
 80026b4:	3f99999a 	.word	0x3f99999a
 80026b8:	3eaa7efa 	.word	0x3eaa7efa
 80026bc:	eeb0 0a67 	vmov.f32	s0, s15
 80026c0:	2001      	movs	r0, #1
 80026c2:	f001 fd41 	bl	8004148 <Set_Motor>
			if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 80026c6:	4bb7      	ldr	r3, [pc, #732]	@ (80029a4 <main+0xf5c>)
 80026c8:	edd3 7a00 	vldr	s15, [r3]
 80026cc:	eef0 7ae7 	vabs.f32	s15, s15
 80026d0:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 80029a8 <main+0xf60>
 80026d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026dc:	d52c      	bpl.n	8002738 <main+0xcf0>
					&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 80026de:	4bb3      	ldr	r3, [pc, #716]	@ (80029ac <main+0xf64>)
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	eef0 7ae7 	vabs.f32	s15, s15
 80026e8:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80029b0 <main+0xf68>
 80026ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f4:	d520      	bpl.n	8002738 <main+0xcf0>
				/* within window —— start or continue timer */
				if (lock_timer_us == 0)
 80026f6:	4baf      	ldr	r3, [pc, #700]	@ (80029b4 <main+0xf6c>)
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	d107      	bne.n	8002710 <main+0xcc8>
					lock_timer_us = micros(); /* start timing */
 8002700:	f001 fac6 	bl	8003c90 <micros>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	49aa      	ldr	r1, [pc, #680]	@ (80029b4 <main+0xf6c>)
 800270a:	e9c1 2300 	strd	r2, r3, [r1]
				if (lock_timer_us == 0)
 800270e:	e01b      	b.n	8002748 <main+0xd00>

				else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8002710:	f001 fabe 	bl	8003c90 <micros>
 8002714:	4ba7      	ldr	r3, [pc, #668]	@ (80029b4 <main+0xf6c>)
 8002716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271a:	1a84      	subs	r4, r0, r2
 800271c:	eb61 0503 	sbc.w	r5, r1, r3
 8002720:	4ba5      	ldr	r3, [pc, #660]	@ (80029b8 <main+0xf70>)
 8002722:	429c      	cmp	r4, r3
 8002724:	f175 0300 	sbcs.w	r3, r5, #0
 8002728:	d30e      	bcc.n	8002748 <main+0xd00>
					Set_Servo(1);
 800272a:	2001      	movs	r0, #1
 800272c:	f001 fd8a 	bl	8004244 <Set_Servo>
					Mode = 1;
 8002730:	4aa2      	ldr	r2, [pc, #648]	@ (80029bc <main+0xf74>)
 8002732:	2301      	movs	r3, #1
 8002734:	7013      	strb	r3, [r2, #0]
				if (lock_timer_us == 0)
 8002736:	e007      	b.n	8002748 <main+0xd00>
				}
			} else {
				lock_timer_us = 0;
 8002738:	499e      	ldr	r1, [pc, #632]	@ (80029b4 <main+0xf6c>)
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	e9c1 2300 	strd	r2, r3, [r1]
 8002746:	e000      	b.n	800274a <main+0xd02>
				if (lock_timer_us == 0)
 8002748:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<CALIBRATING>> /////////////////////
		if (Mode == 3) {
 800274a:	4b9c      	ldr	r3, [pc, #624]	@ (80029bc <main+0xf74>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b03      	cmp	r3, #3
 8002750:	f040 825c 	bne.w	8002c0c <main+0x11c4>
			switch (calibState) {
 8002754:	4b9a      	ldr	r3, [pc, #616]	@ (80029c0 <main+0xf78>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b0c      	cmp	r3, #12
 800275a:	f200 8257 	bhi.w	8002c0c <main+0x11c4>
 800275e:	a201      	add	r2, pc, #4	@ (adr r2, 8002764 <main+0xd1c>)
 8002760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002764:	08002799 	.word	0x08002799
 8002768:	080027cf 	.word	0x080027cf
 800276c:	08002815 	.word	0x08002815
 8002770:	0800285f 	.word	0x0800285f
 8002774:	080028a9 	.word	0x080028a9
 8002778:	080028f7 	.word	0x080028f7
 800277c:	0800294f 	.word	0x0800294f
 8002780:	0800298f 	.word	0x0800298f
 8002784:	08002a37 	.word	0x08002a37
 8002788:	08002aa3 	.word	0x08002aa3
 800278c:	08002b0f 	.word	0x08002b0f
 8002790:	08002b79 	.word	0x08002b79
 8002794:	08002bcb 	.word	0x08002bcb
			case CALIB_IDLE:
				Set_Motor(0, 0);
 8002798:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 80029c4 <main+0xf7c>
 800279c:	2000      	movs	r0, #0
 800279e:	f001 fcd3 	bl	8004148 <Set_Motor>
				Set_Motor(1, 0);
 80027a2:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 80029c4 <main+0xf7c>
 80027a6:	2001      	movs	r0, #1
 80027a8:	f001 fcce 	bl	8004148 <Set_Motor>
				P_Limit = 0;
 80027ac:	4a86      	ldr	r2, [pc, #536]	@ (80029c8 <main+0xf80>)
 80027ae:	2300      	movs	r3, #0
 80027b0:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 80027b2:	4a86      	ldr	r2, [pc, #536]	@ (80029cc <main+0xf84>)
 80027b4:	2300      	movs	r3, #0
 80027b6:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 80027b8:	4a81      	ldr	r2, [pc, #516]	@ (80029c0 <main+0xf78>)
 80027ba:	2301      	movs	r3, #1
 80027bc:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 80027be:	f001 fa67 	bl	8003c90 <micros>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4982      	ldr	r1, [pc, #520]	@ (80029d0 <main+0xf88>)
 80027c8:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 80027cc:	e21e      	b.n	8002c0c <main+0x11c4>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80) {
 80027ce:	4b81      	ldr	r3, [pc, #516]	@ (80029d4 <main+0xf8c>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80029d8 <main+0xf90>
 80027d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e0:	dd06      	ble.n	80027f0 <main+0xda8>
					Cal_Side = 1;
 80027e2:	4a7e      	ldr	r2, [pc, #504]	@ (80029dc <main+0xf94>)
 80027e4:	2301      	movs	r3, #1
 80027e6:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 80027e8:	4a75      	ldr	r2, [pc, #468]	@ (80029c0 <main+0xf78>)
 80027ea:	2302      	movs	r3, #2
 80027ec:	7013      	strb	r3, [r2, #0]
				} else if (Receiver[0] < -80) {
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 80027ee:	e20d      	b.n	8002c0c <main+0x11c4>
				} else if (Receiver[0] < -80) {
 80027f0:	4b78      	ldr	r3, [pc, #480]	@ (80029d4 <main+0xf8c>)
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80029e0 <main+0xf98>
 80027fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002802:	d400      	bmi.n	8002806 <main+0xdbe>
				break;
 8002804:	e202      	b.n	8002c0c <main+0x11c4>
					Cal_Side = 2;
 8002806:	4a75      	ldr	r2, [pc, #468]	@ (80029dc <main+0xf94>)
 8002808:	2302      	movs	r3, #2
 800280a:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 800280c:	4a6c      	ldr	r2, [pc, #432]	@ (80029c0 <main+0xf78>)
 800280e:	2302      	movs	r3, #2
 8002810:	7013      	strb	r3, [r2, #0]
				break;
 8002812:	e1fb      	b.n	8002c0c <main+0x11c4>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -15);
 8002814:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8002818:	2001      	movs	r0, #1
 800281a:	f001 fc95 	bl	8004148 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 800281e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002822:	4870      	ldr	r0, [pc, #448]	@ (80029e4 <main+0xf9c>)
 8002824:	f002 ff64 	bl	80056f0 <HAL_GPIO_ReadPin>
 8002828:	4603      	mov	r3, r0
 800282a:	2b01      	cmp	r3, #1
 800282c:	d004      	beq.n	8002838 <main+0xdf0>
 800282e:	4b66      	ldr	r3, [pc, #408]	@ (80029c8 <main+0xf80>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 81d9 	beq.w	8002bea <main+0x11a2>
					Set_Motor(1, 0);
 8002838:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80029c4 <main+0xf7c>
 800283c:	2001      	movs	r0, #1
 800283e:	f001 fc83 	bl	8004148 <Set_Motor>
					calib_timer = micros();
 8002842:	f001 fa25 	bl	8003c90 <micros>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4961      	ldr	r1, [pc, #388]	@ (80029d0 <main+0xf88>)
 800284c:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002850:	4a5d      	ldr	r2, [pc, #372]	@ (80029c8 <main+0xf80>)
 8002852:	2300      	movs	r3, #0
 8002854:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 8002856:	4a5a      	ldr	r2, [pc, #360]	@ (80029c0 <main+0xf78>)
 8002858:	2303      	movs	r3, #3
 800285a:	7013      	strb	r3, [r2, #0]
				}
				break;
 800285c:	e1c5      	b.n	8002bea <main+0x11a2>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 800285e:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 80029c4 <main+0xf7c>
 8002862:	2001      	movs	r0, #1
 8002864:	f001 fc70 	bl	8004148 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002868:	f001 fa12 	bl	8003c90 <micros>
 800286c:	4b58      	ldr	r3, [pc, #352]	@ (80029d0 <main+0xf88>)
 800286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002872:	ebb0 0802 	subs.w	r8, r0, r2
 8002876:	eb61 0903 	sbc.w	r9, r1, r3
 800287a:	4b5b      	ldr	r3, [pc, #364]	@ (80029e8 <main+0xfa0>)
 800287c:	4598      	cmp	r8, r3
 800287e:	f179 0300 	sbcs.w	r3, r9, #0
 8002882:	d311      	bcc.n	80028a8 <main+0xe60>
					Set_Motor(1, 15);
 8002884:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002888:	2001      	movs	r0, #1
 800288a:	f001 fc5d 	bl	8004148 <Set_Motor>
					calib_timer = micros();
 800288e:	f001 f9ff 	bl	8003c90 <micros>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	494e      	ldr	r1, [pc, #312]	@ (80029d0 <main+0xf88>)
 8002898:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 800289c:	4a4a      	ldr	r2, [pc, #296]	@ (80029c8 <main+0xf80>)
 800289e:	2300      	movs	r3, #0
 80028a0:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 80028a2:	4a47      	ldr	r2, [pc, #284]	@ (80029c0 <main+0xf78>)
 80028a4:	2304      	movs	r3, #4
 80028a6:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 15);
 80028a8:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 80028ac:	2001      	movs	r0, #1
 80028ae:	f001 fc4b 	bl	8004148 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 80028b2:	f001 f9ed 	bl	8003c90 <micros>
 80028b6:	4b46      	ldr	r3, [pc, #280]	@ (80029d0 <main+0xf88>)
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	ebb0 0a02 	subs.w	sl, r0, r2
 80028c0:	eb61 0b03 	sbc.w	fp, r1, r3
 80028c4:	4b48      	ldr	r3, [pc, #288]	@ (80029e8 <main+0xfa0>)
 80028c6:	459a      	cmp	sl, r3
 80028c8:	f17b 0300 	sbcs.w	r3, fp, #0
 80028cc:	f0c0 818f 	bcc.w	8002bee <main+0x11a6>
					Set_Motor(1, 0);
 80028d0:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 80029c4 <main+0xf7c>
 80028d4:	2001      	movs	r0, #1
 80028d6:	f001 fc37 	bl	8004148 <Set_Motor>
					calib_timer = micros();
 80028da:	f001 f9d9 	bl	8003c90 <micros>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	493b      	ldr	r1, [pc, #236]	@ (80029d0 <main+0xf88>)
 80028e4:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80028e8:	4a37      	ldr	r2, [pc, #220]	@ (80029c8 <main+0xf80>)
 80028ea:	2300      	movs	r3, #0
 80028ec:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 80028ee:	4a34      	ldr	r2, [pc, #208]	@ (80029c0 <main+0xf78>)
 80028f0:	2305      	movs	r3, #5
 80028f2:	7013      	strb	r3, [r2, #0]
				}
				break;
 80028f4:	e17b      	b.n	8002bee <main+0x11a6>

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 80028f6:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 80029c4 <main+0xf7c>
 80028fa:	2001      	movs	r0, #1
 80028fc:	f001 fc24 	bl	8004148 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002900:	f001 f9c6 	bl	8003c90 <micros>
 8002904:	4b32      	ldr	r3, [pc, #200]	@ (80029d0 <main+0xf88>)
 8002906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290a:	1a86      	subs	r6, r0, r2
 800290c:	643e      	str	r6, [r7, #64]	@ 0x40
 800290e:	eb61 0303 	sbc.w	r3, r1, r3
 8002912:	647b      	str	r3, [r7, #68]	@ 0x44
 8002914:	4b34      	ldr	r3, [pc, #208]	@ (80029e8 <main+0xfa0>)
 8002916:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800291a:	4602      	mov	r2, r0
 800291c:	429a      	cmp	r2, r3
 800291e:	460b      	mov	r3, r1
 8002920:	f173 0300 	sbcs.w	r3, r3, #0
 8002924:	f0c0 8165 	bcc.w	8002bf2 <main+0x11aa>
					Set_Motor(1, -5);
 8002928:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 800292c:	2001      	movs	r0, #1
 800292e:	f001 fc0b 	bl	8004148 <Set_Motor>
					calib_timer = micros();
 8002932:	f001 f9ad 	bl	8003c90 <micros>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4925      	ldr	r1, [pc, #148]	@ (80029d0 <main+0xf88>)
 800293c:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002940:	4a21      	ldr	r2, [pc, #132]	@ (80029c8 <main+0xf80>)
 8002942:	2300      	movs	r3, #0
 8002944:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 8002946:	4a1e      	ldr	r2, [pc, #120]	@ (80029c0 <main+0xf78>)
 8002948:	2306      	movs	r3, #6
 800294a:	7013      	strb	r3, [r2, #0]
				}
				break;
 800294c:	e151      	b.n	8002bf2 <main+0x11aa>

			case CALIB_RETOUCH_P:
				Set_Motor(1, -5);
 800294e:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8002952:	2001      	movs	r0, #1
 8002954:	f001 fbf8 	bl	8004148 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8002958:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800295c:	4821      	ldr	r0, [pc, #132]	@ (80029e4 <main+0xf9c>)
 800295e:	f002 fec7 	bl	80056f0 <HAL_GPIO_ReadPin>
 8002962:	4603      	mov	r3, r0
 8002964:	2b01      	cmp	r3, #1
 8002966:	d004      	beq.n	8002972 <main+0xf2a>
 8002968:	4b17      	ldr	r3, [pc, #92]	@ (80029c8 <main+0xf80>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 8142 	beq.w	8002bf6 <main+0x11ae>
					Set_Motor(1, 0);
 8002972:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 80029c4 <main+0xf7c>
 8002976:	2001      	movs	r0, #1
 8002978:	f001 fbe6 	bl	8004148 <Set_Motor>
					Reset_P();
 800297c:	f001 fc9c 	bl	80042b8 <Reset_P>
					P_Limit = 0;
 8002980:	4a11      	ldr	r2, [pc, #68]	@ (80029c8 <main+0xf80>)
 8002982:	2300      	movs	r3, #0
 8002984:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 8002986:	4a0e      	ldr	r2, [pc, #56]	@ (80029c0 <main+0xf78>)
 8002988:	2307      	movs	r3, #7
 800298a:	7013      	strb	r3, [r2, #0]
				}
				break;
 800298c:	e133      	b.n	8002bf6 <main+0x11ae>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 800298e:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <main+0xf94>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d12a      	bne.n	80029ec <main+0xfa4>
					Set_Motor(0, 30);
 8002996:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800299a:	2000      	movs	r0, #0
 800299c:	f001 fbd4 	bl	8004148 <Set_Motor>
 80029a0:	e029      	b.n	80029f6 <main+0xfae>
 80029a2:	bf00      	nop
 80029a4:	20000b10 	.word	0x20000b10
 80029a8:	3d0b4396 	.word	0x3d0b4396
 80029ac:	20000b14 	.word	0x20000b14
 80029b0:	3dcccccd 	.word	0x3dcccccd
 80029b4:	20000b30 	.word	0x20000b30
 80029b8:	000f4240 	.word	0x000f4240
 80029bc:	20000b28 	.word	0x20000b28
 80029c0:	20000b7c 	.word	0x20000b7c
 80029c4:	00000000 	.word	0x00000000
 80029c8:	20000b2d 	.word	0x20000b2d
 80029cc:	20000b2e 	.word	0x20000b2e
 80029d0:	20000b80 	.word	0x20000b80
 80029d4:	20000a28 	.word	0x20000a28
 80029d8:	42a00000 	.word	0x42a00000
 80029dc:	20000b88 	.word	0x20000b88
 80029e0:	c2a00000 	.word	0xc2a00000
 80029e4:	48000400 	.word	0x48000400
 80029e8:	000186a1 	.word	0x000186a1
				else
					Set_Motor(0, -30);
 80029ec:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 80029f0:	2000      	movs	r0, #0
 80029f2:	f001 fba9 	bl	8004148 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 80029f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029fa:	48ae      	ldr	r0, [pc, #696]	@ (8002cb4 <main+0x126c>)
 80029fc:	f002 fe78 	bl	80056f0 <HAL_GPIO_ReadPin>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d004      	beq.n	8002a10 <main+0xfc8>
 8002a06:	4bac      	ldr	r3, [pc, #688]	@ (8002cb8 <main+0x1270>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 80f5 	beq.w	8002bfa <main+0x11b2>
					Set_Motor(0, 0);
 8002a10:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 8002cbc <main+0x1274>
 8002a14:	2000      	movs	r0, #0
 8002a16:	f001 fb97 	bl	8004148 <Set_Motor>
					calib_timer = micros();
 8002a1a:	f001 f939 	bl	8003c90 <micros>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	49a7      	ldr	r1, [pc, #668]	@ (8002cc0 <main+0x1278>)
 8002a24:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002a28:	4aa3      	ldr	r2, [pc, #652]	@ (8002cb8 <main+0x1270>)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 8002a2e:	4aa5      	ldr	r2, [pc, #660]	@ (8002cc4 <main+0x127c>)
 8002a30:	2308      	movs	r3, #8
 8002a32:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002a34:	e0e1      	b.n	8002bfa <main+0x11b2>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 8002a36:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8002cbc <main+0x1274>
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f001 fb84 	bl	8004148 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002a40:	f001 f926 	bl	8003c90 <micros>
 8002a44:	4b9e      	ldr	r3, [pc, #632]	@ (8002cc0 <main+0x1278>)
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	1a86      	subs	r6, r0, r2
 8002a4c:	63be      	str	r6, [r7, #56]	@ 0x38
 8002a4e:	eb61 0303 	sbc.w	r3, r1, r3
 8002a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a54:	4b9c      	ldr	r3, [pc, #624]	@ (8002cc8 <main+0x1280>)
 8002a56:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	460b      	mov	r3, r1
 8002a60:	f173 0300 	sbcs.w	r3, r3, #0
 8002a64:	f0c0 80cb 	bcc.w	8002bfe <main+0x11b6>
					if (Cal_Side == 1)
 8002a68:	4b98      	ldr	r3, [pc, #608]	@ (8002ccc <main+0x1284>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <main+0x1034>
						Set_Motor(0, -30);
 8002a70:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002a74:	2000      	movs	r0, #0
 8002a76:	f001 fb67 	bl	8004148 <Set_Motor>
 8002a7a:	e004      	b.n	8002a86 <main+0x103e>
					else
						Set_Motor(0, 30);
 8002a7c:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002a80:	2000      	movs	r0, #0
 8002a82:	f001 fb61 	bl	8004148 <Set_Motor>
					calib_timer = micros();
 8002a86:	f001 f903 	bl	8003c90 <micros>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	498c      	ldr	r1, [pc, #560]	@ (8002cc0 <main+0x1278>)
 8002a90:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002a94:	4a88      	ldr	r2, [pc, #544]	@ (8002cb8 <main+0x1270>)
 8002a96:	2300      	movs	r3, #0
 8002a98:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 8002a9a:	4a8a      	ldr	r2, [pc, #552]	@ (8002cc4 <main+0x127c>)
 8002a9c:	2309      	movs	r3, #9
 8002a9e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002aa0:	e0ad      	b.n	8002bfe <main+0x11b6>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 8002aa2:	4b8a      	ldr	r3, [pc, #552]	@ (8002ccc <main+0x1284>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d105      	bne.n	8002ab6 <main+0x106e>
					Set_Motor(0, -30);
 8002aaa:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f001 fb4a 	bl	8004148 <Set_Motor>
 8002ab4:	e004      	b.n	8002ac0 <main+0x1078>
				else
					Set_Motor(0, 30);
 8002ab6:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002aba:	2000      	movs	r0, #0
 8002abc:	f001 fb44 	bl	8004148 <Set_Motor>

				if (micros() - calib_timer > 200000) {
 8002ac0:	f001 f8e6 	bl	8003c90 <micros>
 8002ac4:	4b7e      	ldr	r3, [pc, #504]	@ (8002cc0 <main+0x1278>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	1a86      	subs	r6, r0, r2
 8002acc:	633e      	str	r6, [r7, #48]	@ 0x30
 8002ace:	eb61 0303 	sbc.w	r3, r1, r3
 8002ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ad4:	4b7e      	ldr	r3, [pc, #504]	@ (8002cd0 <main+0x1288>)
 8002ad6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002ada:	4602      	mov	r2, r0
 8002adc:	429a      	cmp	r2, r3
 8002ade:	460b      	mov	r3, r1
 8002ae0:	f173 0300 	sbcs.w	r3, r3, #0
 8002ae4:	f0c0 808d 	bcc.w	8002c02 <main+0x11ba>
					Set_Motor(0, 0);
 8002ae8:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8002cbc <main+0x1274>
 8002aec:	2000      	movs	r0, #0
 8002aee:	f001 fb2b 	bl	8004148 <Set_Motor>
					calib_timer = micros();
 8002af2:	f001 f8cd 	bl	8003c90 <micros>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4971      	ldr	r1, [pc, #452]	@ (8002cc0 <main+0x1278>)
 8002afc:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002b00:	4a6d      	ldr	r2, [pc, #436]	@ (8002cb8 <main+0x1270>)
 8002b02:	2300      	movs	r3, #0
 8002b04:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 8002b06:	4a6f      	ldr	r2, [pc, #444]	@ (8002cc4 <main+0x127c>)
 8002b08:	230a      	movs	r3, #10
 8002b0a:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002b0c:	e079      	b.n	8002c02 <main+0x11ba>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 8002b0e:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8002cbc <main+0x1274>
 8002b12:	2000      	movs	r0, #0
 8002b14:	f001 fb18 	bl	8004148 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002b18:	f001 f8ba 	bl	8003c90 <micros>
 8002b1c:	4b68      	ldr	r3, [pc, #416]	@ (8002cc0 <main+0x1278>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	1a86      	subs	r6, r0, r2
 8002b24:	62be      	str	r6, [r7, #40]	@ 0x28
 8002b26:	eb61 0303 	sbc.w	r3, r1, r3
 8002b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b2c:	4b66      	ldr	r3, [pc, #408]	@ (8002cc8 <main+0x1280>)
 8002b2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b32:	4602      	mov	r2, r0
 8002b34:	429a      	cmp	r2, r3
 8002b36:	460b      	mov	r3, r1
 8002b38:	f173 0300 	sbcs.w	r3, r3, #0
 8002b3c:	d363      	bcc.n	8002c06 <main+0x11be>
					if (Cal_Side == 1)
 8002b3e:	4b63      	ldr	r3, [pc, #396]	@ (8002ccc <main+0x1284>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d105      	bne.n	8002b52 <main+0x110a>
						Set_Motor(0, 15);
 8002b46:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f001 fafc 	bl	8004148 <Set_Motor>
 8002b50:	e004      	b.n	8002b5c <main+0x1114>
					else
						Set_Motor(0, -15);
 8002b52:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8002b56:	2000      	movs	r0, #0
 8002b58:	f001 faf6 	bl	8004148 <Set_Motor>
					calib_timer = micros();
 8002b5c:	f001 f898 	bl	8003c90 <micros>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4956      	ldr	r1, [pc, #344]	@ (8002cc0 <main+0x1278>)
 8002b66:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002b6a:	4a53      	ldr	r2, [pc, #332]	@ (8002cb8 <main+0x1270>)
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 8002b70:	4a54      	ldr	r2, [pc, #336]	@ (8002cc4 <main+0x127c>)
 8002b72:	230b      	movs	r3, #11
 8002b74:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002b76:	e046      	b.n	8002c06 <main+0x11be>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 8002b78:	4b54      	ldr	r3, [pc, #336]	@ (8002ccc <main+0x1284>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <main+0x1144>
					Set_Motor(0, 15);
 8002b80:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002b84:	2000      	movs	r0, #0
 8002b86:	f001 fadf 	bl	8004148 <Set_Motor>
 8002b8a:	e004      	b.n	8002b96 <main+0x114e>
				else
					Set_Motor(0, -15);
 8002b8c:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8002b90:	2000      	movs	r0, #0
 8002b92:	f001 fad9 	bl	8004148 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8002b96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b9a:	4846      	ldr	r0, [pc, #280]	@ (8002cb4 <main+0x126c>)
 8002b9c:	f002 fda8 	bl	80056f0 <HAL_GPIO_ReadPin>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d003      	beq.n	8002bae <main+0x1166>
 8002ba6:	4b44      	ldr	r3, [pc, #272]	@ (8002cb8 <main+0x1270>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d02d      	beq.n	8002c0a <main+0x11c2>
					Set_Motor(0, 0);
 8002bae:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8002cbc <main+0x1274>
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f001 fac8 	bl	8004148 <Set_Motor>
					Reset_R();
 8002bb8:	f001 fb6e 	bl	8004298 <Reset_R>
					R_Limit = 0;
 8002bbc:	4a3e      	ldr	r2, [pc, #248]	@ (8002cb8 <main+0x1270>)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 8002bc2:	4a40      	ldr	r2, [pc, #256]	@ (8002cc4 <main+0x127c>)
 8002bc4:	230c      	movs	r3, #12
 8002bc6:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002bc8:	e01f      	b.n	8002c0a <main+0x11c2>

			case CALIB_DONE:
				Cal_Side = 0;
 8002bca:	4a40      	ldr	r2, [pc, #256]	@ (8002ccc <main+0x1284>)
 8002bcc:	2300      	movs	r3, #0
 8002bce:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 8002bd0:	4a40      	ldr	r2, [pc, #256]	@ (8002cd4 <main+0x128c>)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 8002bd6:	4a40      	ldr	r2, [pc, #256]	@ (8002cd8 <main+0x1290>)
 8002bd8:	2300      	movs	r3, #0
 8002bda:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8002bdc:	4a36      	ldr	r2, [pc, #216]	@ (8002cb8 <main+0x1270>)
 8002bde:	2300      	movs	r3, #0
 8002be0:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002be2:	4a38      	ldr	r2, [pc, #224]	@ (8002cc4 <main+0x127c>)
 8002be4:	2300      	movs	r3, #0
 8002be6:	7013      	strb	r3, [r2, #0]
				break;
 8002be8:	e010      	b.n	8002c0c <main+0x11c4>
				break;
 8002bea:	bf00      	nop
 8002bec:	e00e      	b.n	8002c0c <main+0x11c4>
				break;
 8002bee:	bf00      	nop
 8002bf0:	e00c      	b.n	8002c0c <main+0x11c4>
				break;
 8002bf2:	bf00      	nop
 8002bf4:	e00a      	b.n	8002c0c <main+0x11c4>
				break;
 8002bf6:	bf00      	nop
 8002bf8:	e008      	b.n	8002c0c <main+0x11c4>
				break;
 8002bfa:	bf00      	nop
 8002bfc:	e006      	b.n	8002c0c <main+0x11c4>
				break;
 8002bfe:	bf00      	nop
 8002c00:	e004      	b.n	8002c0c <main+0x11c4>
				break;
 8002c02:	bf00      	nop
 8002c04:	e002      	b.n	8002c0c <main+0x11c4>
				break;
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <main+0x11c4>
				break;
 8002c0a:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 6) {
 8002c0c:	4b31      	ldr	r3, [pc, #196]	@ (8002cd4 <main+0x128c>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b06      	cmp	r3, #6
 8002c12:	d102      	bne.n	8002c1a <main+0x11d2>
			Set_Servo(0);
 8002c14:	2000      	movs	r0, #0
 8002c16:	f001 fb15 	bl	8004244 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 7) {
 8002c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd4 <main+0x128c>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b07      	cmp	r3, #7
 8002c20:	d102      	bne.n	8002c28 <main+0x11e0>
			Set_Servo(1);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f001 fb0e 	bl	8004244 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 8) {
 8002c28:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd4 <main+0x128c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	f47e af87 	bne.w	8001b40 <main+0xf8>
			static uint64_t pen_delay_timer;
			if (loop_counter == 1 && micros() - pen_delay_timer < 300000) {
 8002c32:	4b2a      	ldr	r3, [pc, #168]	@ (8002cdc <main+0x1294>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d120      	bne.n	8002c7c <main+0x1234>
 8002c3a:	f001 f829 	bl	8003c90 <micros>
 8002c3e:	4b28      	ldr	r3, [pc, #160]	@ (8002ce0 <main+0x1298>)
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	1a86      	subs	r6, r0, r2
 8002c46:	623e      	str	r6, [r7, #32]
 8002c48:	eb61 0303 	sbc.w	r3, r1, r3
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c4e:	4b25      	ldr	r3, [pc, #148]	@ (8002ce4 <main+0x129c>)
 8002c50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c54:	4602      	mov	r2, r0
 8002c56:	429a      	cmp	r2, r3
 8002c58:	460b      	mov	r3, r1
 8002c5a:	f173 0300 	sbcs.w	r3, r3, #0
 8002c5e:	d20d      	bcs.n	8002c7c <main+0x1234>
				Set_Motor(0, 0);
 8002c60:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8002cbc <main+0x1274>
 8002c64:	2000      	movs	r0, #0
 8002c66:	f001 fa6f 	bl	8004148 <Set_Motor>
				Set_Motor(1, 0);
 8002c6a:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002cbc <main+0x1274>
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f001 fa6a 	bl	8004148 <Set_Motor>
				Set_Servo(1);
 8002c74:	2001      	movs	r0, #1
 8002c76:	f001 fae5 	bl	8004244 <Set_Servo>
 8002c7a:	e175      	b.n	8002f68 <main+0x1520>
			} else if (loop_counter == 1
 8002c7c:	4b17      	ldr	r3, [pc, #92]	@ (8002cdc <main+0x1294>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d133      	bne.n	8002cec <main+0x12a4>
					&& micros() - pen_delay_timer < 500000) {
 8002c84:	f001 f804 	bl	8003c90 <micros>
 8002c88:	4b15      	ldr	r3, [pc, #84]	@ (8002ce0 <main+0x1298>)
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	1a86      	subs	r6, r0, r2
 8002c90:	61be      	str	r6, [r7, #24]
 8002c92:	eb61 0303 	sbc.w	r3, r1, r3
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <main+0x12a0>)
 8002c9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	f173 0300 	sbcs.w	r3, r3, #0
 8002ca8:	d220      	bcs.n	8002cec <main+0x12a4>
				Set_Servo(0);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f001 faca 	bl	8004244 <Set_Servo>
 8002cb0:	e15a      	b.n	8002f68 <main+0x1520>
 8002cb2:	bf00      	nop
 8002cb4:	48000400 	.word	0x48000400
 8002cb8:	20000b2e 	.word	0x20000b2e
 8002cbc:	00000000 	.word	0x00000000
 8002cc0:	20000b80 	.word	0x20000b80
 8002cc4:	20000b7c 	.word	0x20000b7c
 8002cc8:	000186a1 	.word	0x000186a1
 8002ccc:	20000b88 	.word	0x20000b88
 8002cd0:	00030d41 	.word	0x00030d41
 8002cd4:	20000b28 	.word	0x20000b28
 8002cd8:	20000b2d 	.word	0x20000b2d
 8002cdc:	20000b98 	.word	0x20000b98
 8002ce0:	20001230 	.word	0x20001230
 8002ce4:	000493e0 	.word	0x000493e0
 8002ce8:	0007a120 	.word	0x0007a120
			} else if (loop_counter < 100) {
 8002cec:	4b9f      	ldr	r3, [pc, #636]	@ (8002f6c <main+0x1524>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b63      	cmp	r3, #99	@ 0x63
 8002cf2:	f300 810e 	bgt.w	8002f12 <main+0x14ca>
				static uint16_t loop_temp = 0;
				Set_Servo(0);
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f001 faa4 	bl	8004244 <Set_Servo>

				R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8002cfc:	4b9c      	ldr	r3, [pc, #624]	@ (8002f70 <main+0x1528>)
 8002cfe:	ed93 7a00 	vldr	s14, [r3]
 8002d02:	4b9c      	ldr	r3, [pc, #624]	@ (8002f74 <main+0x152c>)
 8002d04:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d0c:	4b9a      	ldr	r3, [pc, #616]	@ (8002f78 <main+0x1530>)
 8002d0e:	edc3 7a00 	vstr	s15, [r3]
				P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8002d12:	4b9a      	ldr	r3, [pc, #616]	@ (8002f7c <main+0x1534>)
 8002d14:	ed93 7a00 	vldr	s14, [r3]
 8002d18:	4b99      	ldr	r3, [pc, #612]	@ (8002f80 <main+0x1538>)
 8002d1a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d22:	4b98      	ldr	r3, [pc, #608]	@ (8002f84 <main+0x153c>)
 8002d24:	edc3 7a00 	vstr	s15, [r3]

				static uint64_t timestampState8 = 0;
				int64_t currentTimeState8 = micros();
 8002d28:	f000 ffb2 	bl	8003c90 <micros>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
				if (currentTimeState8 > timestampState8) {
 8002d34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d38:	4b93      	ldr	r3, [pc, #588]	@ (8002f88 <main+0x1540>)
 8002d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3e:	4282      	cmp	r2, r0
 8002d40:	418b      	sbcs	r3, r1
 8002d42:	d241      	bcs.n	8002dc8 <main+0x1380>
					timestampState8 = currentTimeState8 + 10000;		//us
 8002d44:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002d48:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002d4c:	1851      	adds	r1, r2, r1
 8002d4e:	6139      	str	r1, [r7, #16]
 8002d50:	f143 0300 	adc.w	r3, r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d5a:	4b8b      	ldr	r3, [pc, #556]	@ (8002f88 <main+0x1540>)
 8002d5c:	e9c3 0100 	strd	r0, r1, [r3]
					R_Speed = -1
							* (PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f,
 8002d60:	4b85      	ldr	r3, [pc, #532]	@ (8002f78 <main+0x1530>)
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	4889      	ldr	r0, [pc, #548]	@ (8002f8c <main+0x1544>)
 8002d68:	ed9f 3a89 	vldr	s6, [pc, #548]	@ 8002f90 <main+0x1548>
 8002d6c:	eddf 2a89 	vldr	s5, [pc, #548]	@ 8002f94 <main+0x154c>
 8002d70:	ed9f 2a89 	vldr	s4, [pc, #548]	@ 8002f98 <main+0x1550>
 8002d74:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 8002d78:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8002d7c:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 8002d80:	eeb0 0a67 	vmov.f32	s0, s15
 8002d84:	f000 ff9e 	bl	8003cc4 <PID_Update>
 8002d88:	eef0 7a40 	vmov.f32	s15, s0
 8002d8c:	eef1 7a67 	vneg.f32	s15, s15
					R_Speed = -1
 8002d90:	4b82      	ldr	r3, [pc, #520]	@ (8002f9c <main+0x1554>)
 8002d92:	edc3 7a00 	vstr	s15, [r3]
									0.01f, -100.0f, 100.0f, &pid_r));
					P_Speed = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f,
 8002d96:	4b7b      	ldr	r3, [pc, #492]	@ (8002f84 <main+0x153c>)
 8002d98:	edd3 7a00 	vldr	s15, [r3]
 8002d9c:	4880      	ldr	r0, [pc, #512]	@ (8002fa0 <main+0x1558>)
 8002d9e:	ed9f 3a7c 	vldr	s6, [pc, #496]	@ 8002f90 <main+0x1548>
 8002da2:	eddf 2a7c 	vldr	s5, [pc, #496]	@ 8002f94 <main+0x154c>
 8002da6:	ed9f 2a7c 	vldr	s4, [pc, #496]	@ 8002f98 <main+0x1550>
 8002daa:	eddf 1a7e 	vldr	s3, [pc, #504]	@ 8002fa4 <main+0x155c>
 8002dae:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 8002fa8 <main+0x1560>
 8002db2:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8002fac <main+0x1564>
 8002db6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dba:	f000 ff83 	bl	8003cc4 <PID_Update>
 8002dbe:	eef0 7a40 	vmov.f32	s15, s0
 8002dc2:	4b7b      	ldr	r3, [pc, #492]	@ (8002fb0 <main+0x1568>)
 8002dc4:	edc3 7a00 	vstr	s15, [r3]
							0.01f, -100.0f, 100.0f, &pid_p);
				}

				Set_Motor(0, R_Speed);
 8002dc8:	4b74      	ldr	r3, [pc, #464]	@ (8002f9c <main+0x1554>)
 8002dca:	edd3 7a00 	vldr	s15, [r3]
 8002dce:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f001 f9b8 	bl	8004148 <Set_Motor>
				Set_Motor(1, P_Speed);
 8002dd8:	4b75      	ldr	r3, [pc, #468]	@ (8002fb0 <main+0x1568>)
 8002dda:	edd3 7a00 	vldr	s15, [r3]
 8002dde:	eeb0 0a67 	vmov.f32	s0, s15
 8002de2:	2001      	movs	r0, #1
 8002de4:	f001 f9b0 	bl	8004148 <Set_Motor>
				if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 8002de8:	4b63      	ldr	r3, [pc, #396]	@ (8002f78 <main+0x1530>)
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	eef0 7ae7 	vabs.f32	s15, s15
 8002df2:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8002fb4 <main+0x156c>
 8002df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfe:	d57f      	bpl.n	8002f00 <main+0x14b8>
						&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 8002e00:	4b60      	ldr	r3, [pc, #384]	@ (8002f84 <main+0x153c>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	eef0 7ae7 	vabs.f32	s15, s15
 8002e0a:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8002fb8 <main+0x1570>
 8002e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e16:	d573      	bpl.n	8002f00 <main+0x14b8>
					/* within window —— start or continue timer */
					if (lock_timer_us == 0)
 8002e18:	4b68      	ldr	r3, [pc, #416]	@ (8002fbc <main+0x1574>)
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	d107      	bne.n	8002e32 <main+0x13ea>
						lock_timer_us = micros(); /* start timing */
 8002e22:	f000 ff35 	bl	8003c90 <micros>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4964      	ldr	r1, [pc, #400]	@ (8002fbc <main+0x1574>)
 8002e2c:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 8002e30:	e099      	b.n	8002f66 <main+0x151e>

					else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8002e32:	f000 ff2d 	bl	8003c90 <micros>
 8002e36:	4b61      	ldr	r3, [pc, #388]	@ (8002fbc <main+0x1574>)
 8002e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3c:	1a86      	subs	r6, r0, r2
 8002e3e:	60be      	str	r6, [r7, #8]
 8002e40:	eb61 0303 	sbc.w	r3, r1, r3
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	4b5e      	ldr	r3, [pc, #376]	@ (8002fc0 <main+0x1578>)
 8002e48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	460b      	mov	r3, r1
 8002e52:	f173 0300 	sbcs.w	r3, r3, #0
 8002e56:	f0c0 8086 	bcc.w	8002f66 <main+0x151e>
						if (loop_temp == 0) {
 8002e5a:	4b5a      	ldr	r3, [pc, #360]	@ (8002fc4 <main+0x157c>)
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d119      	bne.n	8002e96 <main+0x144e>
							pid_r.integ = 0;
 8002e62:	4a4a      	ldr	r2, [pc, #296]	@ (8002f8c <main+0x1544>)
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 8002e6a:	4a48      	ldr	r2, [pc, #288]	@ (8002f8c <main+0x1544>)
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 8002e72:	4a4b      	ldr	r2, [pc, #300]	@ (8002fa0 <main+0x1558>)
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 8002e7a:	4a49      	ldr	r2, [pc, #292]	@ (8002fa0 <main+0x1558>)
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	6053      	str	r3, [r2, #4]
							TargetR = -1.0472;
 8002e82:	4a3b      	ldr	r2, [pc, #236]	@ (8002f70 <main+0x1528>)
 8002e84:	4b50      	ldr	r3, [pc, #320]	@ (8002fc8 <main+0x1580>)
 8002e86:	6013      	str	r3, [r2, #0]
							TargetP = 250;
 8002e88:	4a3c      	ldr	r2, [pc, #240]	@ (8002f7c <main+0x1534>)
 8002e8a:	4b50      	ldr	r3, [pc, #320]	@ (8002fcc <main+0x1584>)
 8002e8c:	6013      	str	r3, [r2, #0]
							loop_temp = 1;
 8002e8e:	4a4d      	ldr	r2, [pc, #308]	@ (8002fc4 <main+0x157c>)
 8002e90:	2301      	movs	r3, #1
 8002e92:	8013      	strh	r3, [r2, #0]
					if (lock_timer_us == 0)
 8002e94:	e067      	b.n	8002f66 <main+0x151e>
						} else {
							pid_r.integ = 0;
 8002e96:	4a3d      	ldr	r2, [pc, #244]	@ (8002f8c <main+0x1544>)
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 8002e9e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f8c <main+0x1544>)
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 8002ea6:	4a3e      	ldr	r2, [pc, #248]	@ (8002fa0 <main+0x1558>)
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 8002eae:	4a3c      	ldr	r2, [pc, #240]	@ (8002fa0 <main+0x1558>)
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	6053      	str	r3, [r2, #4]
							TargetR = 4.18879;
 8002eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8002f70 <main+0x1528>)
 8002eb8:	4b45      	ldr	r3, [pc, #276]	@ (8002fd0 <main+0x1588>)
 8002eba:	6013      	str	r3, [r2, #0]
							TargetP = 50;
 8002ebc:	4a2f      	ldr	r2, [pc, #188]	@ (8002f7c <main+0x1534>)
 8002ebe:	4b45      	ldr	r3, [pc, #276]	@ (8002fd4 <main+0x158c>)
 8002ec0:	6013      	str	r3, [r2, #0]
							loop_temp = 0;
 8002ec2:	4a40      	ldr	r2, [pc, #256]	@ (8002fc4 <main+0x157c>)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	8013      	strh	r3, [r2, #0]
							loop_counter++;
 8002ec8:	4b28      	ldr	r3, [pc, #160]	@ (8002f6c <main+0x1524>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	4b27      	ldr	r3, [pc, #156]	@ (8002f6c <main+0x1524>)
 8002ed0:	601a      	str	r2, [r3, #0]
							if (loop_counter == 1) {
 8002ed2:	4b26      	ldr	r3, [pc, #152]	@ (8002f6c <main+0x1524>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d106      	bne.n	8002ee8 <main+0x14a0>
								pen_delay_timer = micros();
 8002eda:	f000 fed9 	bl	8003c90 <micros>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	493d      	ldr	r1, [pc, #244]	@ (8002fd8 <main+0x1590>)
 8002ee4:	e9c1 2300 	strd	r2, r3, [r1]
							}
							if (loop_counter == 100) {
 8002ee8:	4b20      	ldr	r3, [pc, #128]	@ (8002f6c <main+0x1524>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b64      	cmp	r3, #100	@ 0x64
 8002eee:	d13a      	bne.n	8002f66 <main+0x151e>
								pen_delay_timer = micros();
 8002ef0:	f000 fece 	bl	8003c90 <micros>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4937      	ldr	r1, [pc, #220]	@ (8002fd8 <main+0x1590>)
 8002efa:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 8002efe:	e032      	b.n	8002f66 <main+0x151e>
							}
						}
					}
				} else {
					lock_timer_us = 0;
 8002f00:	492e      	ldr	r1, [pc, #184]	@ (8002fbc <main+0x1574>)
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	e9c1 2300 	strd	r2, r3, [r1]
 8002f0e:	f7fe be17 	b.w	8001b40 <main+0xf8>
				}
			} else {
				if (micros() - pen_delay_timer < 500000) {
 8002f12:	f000 febd 	bl	8003c90 <micros>
 8002f16:	4b30      	ldr	r3, [pc, #192]	@ (8002fd8 <main+0x1590>)
 8002f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1c:	1a86      	subs	r6, r0, r2
 8002f1e:	603e      	str	r6, [r7, #0]
 8002f20:	eb61 0303 	sbc.w	r3, r1, r3
 8002f24:	607b      	str	r3, [r7, #4]
 8002f26:	4b2d      	ldr	r3, [pc, #180]	@ (8002fdc <main+0x1594>)
 8002f28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	460b      	mov	r3, r1
 8002f32:	f173 0300 	sbcs.w	r3, r3, #0
 8002f36:	d20e      	bcs.n	8002f56 <main+0x150e>
					Set_Motor(0, 0);
 8002f38:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8002fe0 <main+0x1598>
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f001 f903 	bl	8004148 <Set_Motor>
					Set_Motor(1, 0);
 8002f42:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8002fe0 <main+0x1598>
 8002f46:	2001      	movs	r0, #1
 8002f48:	f001 f8fe 	bl	8004148 <Set_Motor>
					Set_Servo(1);
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f001 f979 	bl	8004244 <Set_Servo>
 8002f52:	f7fe bdf5 	b.w	8001b40 <main+0xf8>
				} else {
					Set_Servo(0);
 8002f56:	2000      	movs	r0, #0
 8002f58:	f001 f974 	bl	8004244 <Set_Servo>
					Mode = 0;
 8002f5c:	4a21      	ldr	r2, [pc, #132]	@ (8002fe4 <main+0x159c>)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	7013      	strb	r3, [r2, #0]
 8002f62:	f7fe bded 	b.w	8001b40 <main+0xf8>
					if (lock_timer_us == 0)
 8002f66:	bf00      	nop
	while (1) {
 8002f68:	f7fe bdea 	b.w	8001b40 <main+0xf8>
 8002f6c:	20000b98 	.word	0x20000b98
 8002f70:	20000b00 	.word	0x20000b00
 8002f74:	20000a70 	.word	0x20000a70
 8002f78:	20000b10 	.word	0x20000b10
 8002f7c:	20000b04 	.word	0x20000b04
 8002f80:	20000ab0 	.word	0x20000ab0
 8002f84:	20000b14 	.word	0x20000b14
 8002f88:	20001238 	.word	0x20001238
 8002f8c:	20000b5c 	.word	0x20000b5c
 8002f90:	42c80000 	.word	0x42c80000
 8002f94:	c2c80000 	.word	0xc2c80000
 8002f98:	3c23d70a 	.word	0x3c23d70a
 8002f9c:	20000b20 	.word	0x20000b20
 8002fa0:	20000b64 	.word	0x20000b64
 8002fa4:	3e19999a 	.word	0x3e19999a
 8002fa8:	3f99999a 	.word	0x3f99999a
 8002fac:	3eaa7efa 	.word	0x3eaa7efa
 8002fb0:	20000b24 	.word	0x20000b24
 8002fb4:	3d0b4396 	.word	0x3d0b4396
 8002fb8:	3dcccccd 	.word	0x3dcccccd
 8002fbc:	20000b30 	.word	0x20000b30
 8002fc0:	000f4240 	.word	0x000f4240
 8002fc4:	20001240 	.word	0x20001240
 8002fc8:	bf860aa6 	.word	0xbf860aa6
 8002fcc:	437a0000 	.word	0x437a0000
 8002fd0:	40860a91 	.word	0x40860a91
 8002fd4:	42480000 	.word	0x42480000
 8002fd8:	20001230 	.word	0x20001230
 8002fdc:	0007a120 	.word	0x0007a120
 8002fe0:	00000000 	.word	0x00000000
 8002fe4:	20000b28 	.word	0x20000b28

08002fe8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b094      	sub	sp, #80	@ 0x50
 8002fec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002fee:	f107 0318 	add.w	r3, r7, #24
 8002ff2:	2238      	movs	r2, #56	@ 0x38
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f008 f87a 	bl	800b0f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002ffc:	1d3b      	adds	r3, r7, #4
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	609a      	str	r2, [r3, #8]
 8003006:	60da      	str	r2, [r3, #12]
 8003008:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800300a:	2000      	movs	r0, #0
 800300c:	f002 fbb8 	bl	8005780 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003010:	2302      	movs	r3, #2
 8003012:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003014:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800301a:	2340      	movs	r3, #64	@ 0x40
 800301c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800301e:	2302      	movs	r3, #2
 8003020:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003022:	2302      	movs	r3, #2
 8003024:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003026:	2304      	movs	r3, #4
 8003028:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800302a:	2355      	movs	r3, #85	@ 0x55
 800302c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800302e:	2302      	movs	r3, #2
 8003030:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003032:	2302      	movs	r3, #2
 8003034:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003036:	2302      	movs	r3, #2
 8003038:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800303a:	f107 0318 	add.w	r3, r7, #24
 800303e:	4618      	mov	r0, r3
 8003040:	f002 fc52 	bl	80058e8 <HAL_RCC_OscConfig>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <SystemClock_Config+0x66>
		Error_Handler();
 800304a:	f001 f983 	bl	8004354 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800304e:	230f      	movs	r3, #15
 8003050:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003052:	2303      	movs	r3, #3
 8003054:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003062:	1d3b      	adds	r3, r7, #4
 8003064:	2104      	movs	r1, #4
 8003066:	4618      	mov	r0, r3
 8003068:	f002 ff50 	bl	8005f0c <HAL_RCC_ClockConfig>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <SystemClock_Config+0x8e>
		Error_Handler();
 8003072:	f001 f96f 	bl	8004354 <Error_Handler>
	}
}
 8003076:	bf00      	nop
 8003078:	3750      	adds	r7, #80	@ 0x50
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b08c      	sub	sp, #48	@ 0x30
 8003084:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003086:	f107 031c 	add.w	r3, r7, #28
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	609a      	str	r2, [r3, #8]
 8003092:	60da      	str	r2, [r3, #12]
 8003094:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003096:	f107 030c 	add.w	r3, r7, #12
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80030a4:	463b      	mov	r3, r7
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80030ae:	4b35      	ldr	r3, [pc, #212]	@ (8003184 <MX_TIM1_Init+0x104>)
 80030b0:	4a35      	ldr	r2, [pc, #212]	@ (8003188 <MX_TIM1_Init+0x108>)
 80030b2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 80030b4:	4b33      	ldr	r3, [pc, #204]	@ (8003184 <MX_TIM1_Init+0x104>)
 80030b6:	22a9      	movs	r2, #169	@ 0xa9
 80030b8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ba:	4b32      	ldr	r3, [pc, #200]	@ (8003184 <MX_TIM1_Init+0x104>)
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80030c0:	4b30      	ldr	r3, [pc, #192]	@ (8003184 <MX_TIM1_Init+0x104>)
 80030c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030c6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003184 <MX_TIM1_Init+0x104>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80030ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003184 <MX_TIM1_Init+0x104>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003184 <MX_TIM1_Init+0x104>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 80030da:	482a      	ldr	r0, [pc, #168]	@ (8003184 <MX_TIM1_Init+0x104>)
 80030dc:	f003 fe4c 	bl	8006d78 <HAL_TIM_IC_Init>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_TIM1_Init+0x6a>
		Error_Handler();
 80030e6:	f001 f935 	bl	8004354 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80030ea:	2304      	movs	r3, #4
 80030ec:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80030ee:	2360      	movs	r3, #96	@ 0x60
 80030f0:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80030f2:	2302      	movs	r3, #2
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80030f6:	2300      	movs	r3, #0
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 80030fe:	f107 031c 	add.w	r3, r7, #28
 8003102:	4619      	mov	r1, r3
 8003104:	481f      	ldr	r0, [pc, #124]	@ (8003184 <MX_TIM1_Init+0x104>)
 8003106:	f004 fe17 	bl	8007d38 <HAL_TIM_SlaveConfigSynchro>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_TIM1_Init+0x94>
		Error_Handler();
 8003110:	f001 f920 	bl	8004354 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003118:	2302      	movs	r3, #2
 800311a:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003124:	f107 030c 	add.w	r3, r7, #12
 8003128:	2200      	movs	r2, #0
 800312a:	4619      	mov	r1, r3
 800312c:	4815      	ldr	r0, [pc, #84]	@ (8003184 <MX_TIM1_Init+0x104>)
 800312e:	f004 fb3c 	bl	80077aa <HAL_TIM_IC_ConfigChannel>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_TIM1_Init+0xbc>
		Error_Handler();
 8003138:	f001 f90c 	bl	8004354 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800313c:	2302      	movs	r3, #2
 800313e:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003140:	2301      	movs	r3, #1
 8003142:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003144:	f107 030c 	add.w	r3, r7, #12
 8003148:	2204      	movs	r2, #4
 800314a:	4619      	mov	r1, r3
 800314c:	480d      	ldr	r0, [pc, #52]	@ (8003184 <MX_TIM1_Init+0x104>)
 800314e:	f004 fb2c 	bl	80077aa <HAL_TIM_IC_ConfigChannel>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <MX_TIM1_Init+0xdc>
		Error_Handler();
 8003158:	f001 f8fc 	bl	8004354 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800315c:	2300      	movs	r3, #0
 800315e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003160:	2300      	movs	r3, #0
 8003162:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003164:	2300      	movs	r3, #0
 8003166:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003168:	463b      	mov	r3, r7
 800316a:	4619      	mov	r1, r3
 800316c:	4805      	ldr	r0, [pc, #20]	@ (8003184 <MX_TIM1_Init+0x104>)
 800316e:	f005 feff 	bl	8008f70 <HAL_TIMEx_MasterConfigSynchronization>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003178:	f001 f8ec 	bl	8004354 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800317c:	bf00      	nop
 800317e:	3730      	adds	r7, #48	@ 0x30
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000234 	.word	0x20000234
 8003188:	40012c00 	.word	0x40012c00

0800318c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b08c      	sub	sp, #48	@ 0x30
 8003190:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003192:	f107 031c 	add.w	r3, r7, #28
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	60da      	str	r2, [r3, #12]
 80031a0:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80031a2:	f107 030c 	add.w	r3, r7, #12
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	609a      	str	r2, [r3, #8]
 80031ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80031b0:	463b      	mov	r3, r7
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80031ba:	4b33      	ldr	r3, [pc, #204]	@ (8003288 <MX_TIM2_Init+0xfc>)
 80031bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80031c0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 80031c2:	4b31      	ldr	r3, [pc, #196]	@ (8003288 <MX_TIM2_Init+0xfc>)
 80031c4:	22a9      	movs	r2, #169	@ 0xa9
 80031c6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003288 <MX_TIM2_Init+0xfc>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80031ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003288 <MX_TIM2_Init+0xfc>)
 80031d0:	f04f 32ff 	mov.w	r2, #4294967295
 80031d4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003288 <MX_TIM2_Init+0xfc>)
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003288 <MX_TIM2_Init+0xfc>)
 80031de:	2200      	movs	r2, #0
 80031e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80031e2:	4829      	ldr	r0, [pc, #164]	@ (8003288 <MX_TIM2_Init+0xfc>)
 80031e4:	f003 fdc8 	bl	8006d78 <HAL_TIM_IC_Init>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <MX_TIM2_Init+0x66>
		Error_Handler();
 80031ee:	f001 f8b1 	bl	8004354 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80031f2:	2304      	movs	r3, #4
 80031f4:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80031f6:	2350      	movs	r3, #80	@ 0x50
 80031f8:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80031fe:	2300      	movs	r3, #0
 8003200:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003206:	f107 031c 	add.w	r3, r7, #28
 800320a:	4619      	mov	r1, r3
 800320c:	481e      	ldr	r0, [pc, #120]	@ (8003288 <MX_TIM2_Init+0xfc>)
 800320e:	f004 fd93 	bl	8007d38 <HAL_TIM_SlaveConfigSynchro>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_TIM2_Init+0x90>
		Error_Handler();
 8003218:	f001 f89c 	bl	8004354 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003220:	2301      	movs	r3, #1
 8003222:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	2200      	movs	r2, #0
 8003232:	4619      	mov	r1, r3
 8003234:	4814      	ldr	r0, [pc, #80]	@ (8003288 <MX_TIM2_Init+0xfc>)
 8003236:	f004 fab8 	bl	80077aa <HAL_TIM_IC_ConfigChannel>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM2_Init+0xb8>
		Error_Handler();
 8003240:	f001 f888 	bl	8004354 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003244:	2302      	movs	r3, #2
 8003246:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003248:	2302      	movs	r3, #2
 800324a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 800324c:	f107 030c 	add.w	r3, r7, #12
 8003250:	2204      	movs	r2, #4
 8003252:	4619      	mov	r1, r3
 8003254:	480c      	ldr	r0, [pc, #48]	@ (8003288 <MX_TIM2_Init+0xfc>)
 8003256:	f004 faa8 	bl	80077aa <HAL_TIM_IC_ConfigChannel>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_TIM2_Init+0xd8>
		Error_Handler();
 8003260:	f001 f878 	bl	8004354 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003264:	2300      	movs	r3, #0
 8003266:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800326c:	463b      	mov	r3, r7
 800326e:	4619      	mov	r1, r3
 8003270:	4805      	ldr	r0, [pc, #20]	@ (8003288 <MX_TIM2_Init+0xfc>)
 8003272:	f005 fe7d 	bl	8008f70 <HAL_TIMEx_MasterConfigSynchronization>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <MX_TIM2_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 800327c:	f001 f86a 	bl	8004354 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003280:	bf00      	nop
 8003282:	3730      	adds	r7, #48	@ 0x30
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000300 	.word	0x20000300

0800328c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b08c      	sub	sp, #48	@ 0x30
 8003290:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003292:	f107 030c 	add.w	r3, r7, #12
 8003296:	2224      	movs	r2, #36	@ 0x24
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f007 ff28 	bl	800b0f0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80032a0:	463b      	mov	r3, r7
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]
 80032a8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80032aa:	4b21      	ldr	r3, [pc, #132]	@ (8003330 <MX_TIM3_Init+0xa4>)
 80032ac:	4a21      	ldr	r2, [pc, #132]	@ (8003334 <MX_TIM3_Init+0xa8>)
 80032ae:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80032b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003330 <MX_TIM3_Init+0xa4>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003330 <MX_TIM3_Init+0xa4>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80032bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003330 <MX_TIM3_Init+0xa4>)
 80032be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032c2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003330 <MX_TIM3_Init+0xa4>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ca:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <MX_TIM3_Init+0xa4>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80032d0:	2303      	movs	r3, #3
 80032d2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032d4:	2300      	movs	r3, #0
 80032d6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032d8:	2301      	movs	r3, #1
 80032da:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80032e4:	2300      	movs	r3, #0
 80032e6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032e8:	2301      	movs	r3, #1
 80032ea:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032ec:	2300      	movs	r3, #0
 80032ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80032f4:	f107 030c 	add.w	r3, r7, #12
 80032f8:	4619      	mov	r1, r3
 80032fa:	480d      	ldr	r0, [pc, #52]	@ (8003330 <MX_TIM3_Init+0xa4>)
 80032fc:	f003 ff9a 	bl	8007234 <HAL_TIM_Encoder_Init>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <MX_TIM3_Init+0x7e>
		Error_Handler();
 8003306:	f001 f825 	bl	8004354 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003312:	463b      	mov	r3, r7
 8003314:	4619      	mov	r1, r3
 8003316:	4806      	ldr	r0, [pc, #24]	@ (8003330 <MX_TIM3_Init+0xa4>)
 8003318:	f005 fe2a 	bl	8008f70 <HAL_TIMEx_MasterConfigSynchronization>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003322:	f001 f817 	bl	8004354 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003326:	bf00      	nop
 8003328:	3730      	adds	r7, #48	@ 0x30
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	200003cc 	.word	0x200003cc
 8003334:	40000400 	.word	0x40000400

08003338 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b08c      	sub	sp, #48	@ 0x30
 800333c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800333e:	f107 030c 	add.w	r3, r7, #12
 8003342:	2224      	movs	r2, #36	@ 0x24
 8003344:	2100      	movs	r1, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f007 fed2 	bl	800b0f0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800334c:	463b      	mov	r3, r7
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003356:	4b21      	ldr	r3, [pc, #132]	@ (80033dc <MX_TIM4_Init+0xa4>)
 8003358:	4a21      	ldr	r2, [pc, #132]	@ (80033e0 <MX_TIM4_Init+0xa8>)
 800335a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800335c:	4b1f      	ldr	r3, [pc, #124]	@ (80033dc <MX_TIM4_Init+0xa4>)
 800335e:	2200      	movs	r2, #0
 8003360:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003362:	4b1e      	ldr	r3, [pc, #120]	@ (80033dc <MX_TIM4_Init+0xa4>)
 8003364:	2200      	movs	r2, #0
 8003366:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003368:	4b1c      	ldr	r3, [pc, #112]	@ (80033dc <MX_TIM4_Init+0xa4>)
 800336a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800336e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003370:	4b1a      	ldr	r3, [pc, #104]	@ (80033dc <MX_TIM4_Init+0xa4>)
 8003372:	2200      	movs	r2, #0
 8003374:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003376:	4b19      	ldr	r3, [pc, #100]	@ (80033dc <MX_TIM4_Init+0xa4>)
 8003378:	2200      	movs	r2, #0
 800337a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800337c:	2303      	movs	r3, #3
 800337e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003380:	2300      	movs	r3, #0
 8003382:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003384:	2301      	movs	r3, #1
 8003386:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003388:	2300      	movs	r3, #0
 800338a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003390:	2300      	movs	r3, #0
 8003392:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003394:	2301      	movs	r3, #1
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003398:	2300      	movs	r3, #0
 800339a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 80033a0:	f107 030c 	add.w	r3, r7, #12
 80033a4:	4619      	mov	r1, r3
 80033a6:	480d      	ldr	r0, [pc, #52]	@ (80033dc <MX_TIM4_Init+0xa4>)
 80033a8:	f003 ff44 	bl	8007234 <HAL_TIM_Encoder_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <MX_TIM4_Init+0x7e>
		Error_Handler();
 80033b2:	f000 ffcf 	bl	8004354 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033b6:	2300      	movs	r3, #0
 80033b8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80033be:	463b      	mov	r3, r7
 80033c0:	4619      	mov	r1, r3
 80033c2:	4806      	ldr	r0, [pc, #24]	@ (80033dc <MX_TIM4_Init+0xa4>)
 80033c4:	f005 fdd4 	bl	8008f70 <HAL_TIMEx_MasterConfigSynchronization>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80033ce:	f000 ffc1 	bl	8004354 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80033d2:	bf00      	nop
 80033d4:	3730      	adds	r7, #48	@ 0x30
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000498 	.word	0x20000498
 80033e0:	40000800 	.word	0x40000800

080033e4 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80033ea:	f107 0310 	add.w	r3, r7, #16
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003402:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <MX_TIM5_Init+0x94>)
 8003404:	4a1d      	ldr	r2, [pc, #116]	@ (800347c <MX_TIM5_Init+0x98>)
 8003406:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 8003408:	4b1b      	ldr	r3, [pc, #108]	@ (8003478 <MX_TIM5_Init+0x94>)
 800340a:	22a9      	movs	r2, #169	@ 0xa9
 800340c:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800340e:	4b1a      	ldr	r3, [pc, #104]	@ (8003478 <MX_TIM5_Init+0x94>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003414:	4b18      	ldr	r3, [pc, #96]	@ (8003478 <MX_TIM5_Init+0x94>)
 8003416:	f04f 32ff 	mov.w	r2, #4294967295
 800341a:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800341c:	4b16      	ldr	r3, [pc, #88]	@ (8003478 <MX_TIM5_Init+0x94>)
 800341e:	2200      	movs	r2, #0
 8003420:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003422:	4b15      	ldr	r3, [pc, #84]	@ (8003478 <MX_TIM5_Init+0x94>)
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003428:	4813      	ldr	r0, [pc, #76]	@ (8003478 <MX_TIM5_Init+0x94>)
 800342a:	f003 f9d9 	bl	80067e0 <HAL_TIM_Base_Init>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_TIM5_Init+0x54>
		Error_Handler();
 8003434:	f000 ff8e 	bl	8004354 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003438:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800343c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 800343e:	f107 0310 	add.w	r3, r7, #16
 8003442:	4619      	mov	r1, r3
 8003444:	480c      	ldr	r0, [pc, #48]	@ (8003478 <MX_TIM5_Init+0x94>)
 8003446:	f004 fb61 	bl	8007b0c <HAL_TIM_ConfigClockSource>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <MX_TIM5_Init+0x70>
		Error_Handler();
 8003450:	f000 ff80 	bl	8004354 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	4619      	mov	r1, r3
 8003460:	4805      	ldr	r0, [pc, #20]	@ (8003478 <MX_TIM5_Init+0x94>)
 8003462:	f005 fd85 	bl	8008f70 <HAL_TIMEx_MasterConfigSynchronization>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 800346c:	f000 ff72 	bl	8004354 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8003470:	bf00      	nop
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20000564 	.word	0x20000564
 800347c:	40000c00 	.word	0x40000c00

08003480 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b09c      	sub	sp, #112	@ 0x70
 8003484:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003486:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	609a      	str	r2, [r3, #8]
 8003492:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003494:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80034a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	611a      	str	r2, [r3, #16]
 80034b0:	615a      	str	r2, [r3, #20]
 80034b2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	2234      	movs	r2, #52	@ 0x34
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f007 fe18 	bl	800b0f0 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80034c0:	4b4b      	ldr	r3, [pc, #300]	@ (80035f0 <MX_TIM8_Init+0x170>)
 80034c2:	4a4c      	ldr	r2, [pc, #304]	@ (80035f4 <MX_TIM8_Init+0x174>)
 80034c4:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 80034c6:	4b4a      	ldr	r3, [pc, #296]	@ (80035f0 <MX_TIM8_Init+0x170>)
 80034c8:	22a9      	movs	r2, #169	@ 0xa9
 80034ca:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034cc:	4b48      	ldr	r3, [pc, #288]	@ (80035f0 <MX_TIM8_Init+0x170>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 100;
 80034d2:	4b47      	ldr	r3, [pc, #284]	@ (80035f0 <MX_TIM8_Init+0x170>)
 80034d4:	2264      	movs	r2, #100	@ 0x64
 80034d6:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034d8:	4b45      	ldr	r3, [pc, #276]	@ (80035f0 <MX_TIM8_Init+0x170>)
 80034da:	2200      	movs	r2, #0
 80034dc:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80034de:	4b44      	ldr	r3, [pc, #272]	@ (80035f0 <MX_TIM8_Init+0x170>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034e4:	4b42      	ldr	r3, [pc, #264]	@ (80035f0 <MX_TIM8_Init+0x170>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 80034ea:	4841      	ldr	r0, [pc, #260]	@ (80035f0 <MX_TIM8_Init+0x170>)
 80034ec:	f003 f978 	bl	80067e0 <HAL_TIM_Base_Init>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <MX_TIM8_Init+0x7a>
		Error_Handler();
 80034f6:	f000 ff2d 	bl	8004354 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034fe:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8003500:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003504:	4619      	mov	r1, r3
 8003506:	483a      	ldr	r0, [pc, #232]	@ (80035f0 <MX_TIM8_Init+0x170>)
 8003508:	f004 fb00 	bl	8007b0c <HAL_TIM_ConfigClockSource>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <MX_TIM8_Init+0x96>
		Error_Handler();
 8003512:	f000 ff1f 	bl	8004354 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8003516:	4836      	ldr	r0, [pc, #216]	@ (80035f0 <MX_TIM8_Init+0x170>)
 8003518:	f003 faae 	bl	8006a78 <HAL_TIM_PWM_Init>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_TIM8_Init+0xa6>
		Error_Handler();
 8003522:	f000 ff17 	bl	8004354 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003526:	2300      	movs	r3, #0
 8003528:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800352a:	2300      	movs	r3, #0
 800352c:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800352e:	2300      	movs	r3, #0
 8003530:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8003532:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003536:	4619      	mov	r1, r3
 8003538:	482d      	ldr	r0, [pc, #180]	@ (80035f0 <MX_TIM8_Init+0x170>)
 800353a:	f005 fd19 	bl	8008f70 <HAL_TIMEx_MasterConfigSynchronization>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <MX_TIM8_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8003544:	f000 ff06 	bl	8004354 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003548:	2360      	movs	r3, #96	@ 0x60
 800354a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 100;
 800354c:	2364      	movs	r3, #100	@ 0x64
 800354e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003550:	2300      	movs	r3, #0
 8003552:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003554:	2300      	movs	r3, #0
 8003556:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003558:	2300      	movs	r3, #0
 800355a:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800355c:	2300      	movs	r3, #0
 800355e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003560:	2300      	movs	r3, #0
 8003562:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 8003564:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003568:	2208      	movs	r2, #8
 800356a:	4619      	mov	r1, r3
 800356c:	4820      	ldr	r0, [pc, #128]	@ (80035f0 <MX_TIM8_Init+0x170>)
 800356e:	f004 f9b9 	bl	80078e4 <HAL_TIM_PWM_ConfigChannel>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <MX_TIM8_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003578:	f000 feec 	bl	8004354 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 800357c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003580:	220c      	movs	r2, #12
 8003582:	4619      	mov	r1, r3
 8003584:	481a      	ldr	r0, [pc, #104]	@ (80035f0 <MX_TIM8_Init+0x170>)
 8003586:	f004 f9ad 	bl	80078e4 <HAL_TIM_PWM_ConfigChannel>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <MX_TIM8_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 8003590:	f000 fee0 	bl	8004354 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003594:	2300      	movs	r3, #0
 8003596:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003598:	2300      	movs	r3, #0
 800359a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035ac:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80035b2:	2300      	movs	r3, #0
 80035b4:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80035ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035be:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80035c4:	2300      	movs	r3, #0
 80035c6:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	4619      	mov	r1, r3
 80035d0:	4807      	ldr	r0, [pc, #28]	@ (80035f0 <MX_TIM8_Init+0x170>)
 80035d2:	f005 fd63 	bl	800909c <HAL_TIMEx_ConfigBreakDeadTime>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <MX_TIM8_Init+0x160>
			!= HAL_OK) {
		Error_Handler();
 80035dc:	f000 feba 	bl	8004354 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 80035e0:	4803      	ldr	r0, [pc, #12]	@ (80035f0 <MX_TIM8_Init+0x170>)
 80035e2:	f001 f84b 	bl	800467c <HAL_TIM_MspPostInit>

}
 80035e6:	bf00      	nop
 80035e8:	3770      	adds	r7, #112	@ 0x70
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000630 	.word	0x20000630
 80035f4:	40013400 	.word	0x40013400

080035f8 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b09c      	sub	sp, #112	@ 0x70
 80035fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80035fe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800360c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003618:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	611a      	str	r2, [r3, #16]
 8003628:	615a      	str	r2, [r3, #20]
 800362a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800362c:	1d3b      	adds	r3, r7, #4
 800362e:	2234      	movs	r2, #52	@ 0x34
 8003630:	2100      	movs	r1, #0
 8003632:	4618      	mov	r0, r3
 8003634:	f007 fd5c 	bl	800b0f0 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8003638:	4b3f      	ldr	r3, [pc, #252]	@ (8003738 <MX_TIM15_Init+0x140>)
 800363a:	4a40      	ldr	r2, [pc, #256]	@ (800373c <MX_TIM15_Init+0x144>)
 800363c:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 169;
 800363e:	4b3e      	ldr	r3, [pc, #248]	@ (8003738 <MX_TIM15_Init+0x140>)
 8003640:	22a9      	movs	r2, #169	@ 0xa9
 8003642:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003644:	4b3c      	ldr	r3, [pc, #240]	@ (8003738 <MX_TIM15_Init+0x140>)
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 20000;
 800364a:	4b3b      	ldr	r3, [pc, #236]	@ (8003738 <MX_TIM15_Init+0x140>)
 800364c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8003650:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003652:	4b39      	ldr	r3, [pc, #228]	@ (8003738 <MX_TIM15_Init+0x140>)
 8003654:	2200      	movs	r2, #0
 8003656:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8003658:	4b37      	ldr	r3, [pc, #220]	@ (8003738 <MX_TIM15_Init+0x140>)
 800365a:	2200      	movs	r2, #0
 800365c:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800365e:	4b36      	ldr	r3, [pc, #216]	@ (8003738 <MX_TIM15_Init+0x140>)
 8003660:	2200      	movs	r2, #0
 8003662:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8003664:	4834      	ldr	r0, [pc, #208]	@ (8003738 <MX_TIM15_Init+0x140>)
 8003666:	f003 f8bb 	bl	80067e0 <HAL_TIM_Base_Init>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <MX_TIM15_Init+0x7c>
		Error_Handler();
 8003670:	f000 fe70 	bl	8004354 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003678:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 800367a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800367e:	4619      	mov	r1, r3
 8003680:	482d      	ldr	r0, [pc, #180]	@ (8003738 <MX_TIM15_Init+0x140>)
 8003682:	f004 fa43 	bl	8007b0c <HAL_TIM_ConfigClockSource>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_TIM15_Init+0x98>
		Error_Handler();
 800368c:	f000 fe62 	bl	8004354 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8003690:	4829      	ldr	r0, [pc, #164]	@ (8003738 <MX_TIM15_Init+0x140>)
 8003692:	f003 f9f1 	bl	8006a78 <HAL_TIM_PWM_Init>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM15_Init+0xa8>
		Error_Handler();
 800369c:	f000 fe5a 	bl	8004354 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036a0:	2300      	movs	r3, #0
 80036a2:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 80036a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80036ac:	4619      	mov	r1, r3
 80036ae:	4822      	ldr	r0, [pc, #136]	@ (8003738 <MX_TIM15_Init+0x140>)
 80036b0:	f005 fc5e 	bl	8008f70 <HAL_TIMEx_MasterConfigSynchronization>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <MX_TIM15_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 80036ba:	f000 fe4b 	bl	8004354 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036be:	2360      	movs	r3, #96	@ 0x60
 80036c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036c6:	2300      	movs	r3, #0
 80036c8:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036ca:	2300      	movs	r3, #0
 80036cc:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036d2:	2300      	movs	r3, #0
 80036d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036d6:	2300      	movs	r3, #0
 80036d8:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 80036da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80036de:	2200      	movs	r2, #0
 80036e0:	4619      	mov	r1, r3
 80036e2:	4815      	ldr	r0, [pc, #84]	@ (8003738 <MX_TIM15_Init+0x140>)
 80036e4:	f004 f8fe 	bl	80078e4 <HAL_TIM_PWM_ConfigChannel>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <MX_TIM15_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 80036ee:	f000 fe31 	bl	8004354 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003706:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800370a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003710:	2300      	movs	r3, #0
 8003712:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	4619      	mov	r1, r3
 8003718:	4807      	ldr	r0, [pc, #28]	@ (8003738 <MX_TIM15_Init+0x140>)
 800371a:	f005 fcbf 	bl	800909c <HAL_TIMEx_ConfigBreakDeadTime>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <MX_TIM15_Init+0x130>
			!= HAL_OK) {
		Error_Handler();
 8003724:	f000 fe16 	bl	8004354 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8003728:	4803      	ldr	r0, [pc, #12]	@ (8003738 <MX_TIM15_Init+0x140>)
 800372a:	f000 ffa7 	bl	800467c <HAL_TIM_MspPostInit>

}
 800372e:	bf00      	nop
 8003730:	3770      	adds	r7, #112	@ 0x70
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200006fc 	.word	0x200006fc
 800373c:	40014000 	.word	0x40014000

08003740 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8003744:	4b14      	ldr	r3, [pc, #80]	@ (8003798 <MX_TIM16_Init+0x58>)
 8003746:	4a15      	ldr	r2, [pc, #84]	@ (800379c <MX_TIM16_Init+0x5c>)
 8003748:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 800374a:	4b13      	ldr	r3, [pc, #76]	@ (8003798 <MX_TIM16_Init+0x58>)
 800374c:	22a9      	movs	r2, #169	@ 0xa9
 800374e:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003750:	4b11      	ldr	r3, [pc, #68]	@ (8003798 <MX_TIM16_Init+0x58>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 8003756:	4b10      	ldr	r3, [pc, #64]	@ (8003798 <MX_TIM16_Init+0x58>)
 8003758:	f240 4279 	movw	r2, #1145	@ 0x479
 800375c:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800375e:	4b0e      	ldr	r3, [pc, #56]	@ (8003798 <MX_TIM16_Init+0x58>)
 8003760:	2200      	movs	r2, #0
 8003762:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8003764:	4b0c      	ldr	r3, [pc, #48]	@ (8003798 <MX_TIM16_Init+0x58>)
 8003766:	2200      	movs	r2, #0
 8003768:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800376a:	4b0b      	ldr	r3, [pc, #44]	@ (8003798 <MX_TIM16_Init+0x58>)
 800376c:	2200      	movs	r2, #0
 800376e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8003770:	4809      	ldr	r0, [pc, #36]	@ (8003798 <MX_TIM16_Init+0x58>)
 8003772:	f003 f835 	bl	80067e0 <HAL_TIM_Base_Init>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <MX_TIM16_Init+0x40>
		Error_Handler();
 800377c:	f000 fdea 	bl	8004354 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 8003780:	2108      	movs	r1, #8
 8003782:	4805      	ldr	r0, [pc, #20]	@ (8003798 <MX_TIM16_Init+0x58>)
 8003784:	f003 fc60 	bl	8007048 <HAL_TIM_OnePulse_Init>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <MX_TIM16_Init+0x52>
		Error_Handler();
 800378e:	f000 fde1 	bl	8004354 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	200007c8 	.word	0x200007c8
 800379c:	40014400 	.word	0x40014400

080037a0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80037a4:	4b23      	ldr	r3, [pc, #140]	@ (8003834 <MX_USART2_UART_Init+0x94>)
 80037a6:	4a24      	ldr	r2, [pc, #144]	@ (8003838 <MX_USART2_UART_Init+0x98>)
 80037a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 80037aa:	4b22      	ldr	r3, [pc, #136]	@ (8003834 <MX_USART2_UART_Init+0x94>)
 80037ac:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80037b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80037b2:	4b20      	ldr	r3, [pc, #128]	@ (8003834 <MX_USART2_UART_Init+0x94>)
 80037b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80037b8:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80037ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003834 <MX_USART2_UART_Init+0x94>)
 80037bc:	2200      	movs	r2, #0
 80037be:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 80037c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003834 <MX_USART2_UART_Init+0x94>)
 80037c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037c6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80037c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003834 <MX_USART2_UART_Init+0x94>)
 80037ca:	220c      	movs	r2, #12
 80037cc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ce:	4b19      	ldr	r3, [pc, #100]	@ (8003834 <MX_USART2_UART_Init+0x94>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d4:	4b17      	ldr	r3, [pc, #92]	@ (8003834 <MX_USART2_UART_Init+0x94>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037da:	4b16      	ldr	r3, [pc, #88]	@ (8003834 <MX_USART2_UART_Init+0x94>)
 80037dc:	2200      	movs	r2, #0
 80037de:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80037e0:	4b14      	ldr	r3, [pc, #80]	@ (8003834 <MX_USART2_UART_Init+0x94>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037e6:	4b13      	ldr	r3, [pc, #76]	@ (8003834 <MX_USART2_UART_Init+0x94>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80037ec:	4811      	ldr	r0, [pc, #68]	@ (8003834 <MX_USART2_UART_Init+0x94>)
 80037ee:	f005 fd39 	bl	8009264 <HAL_UART_Init>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 80037f8:	f000 fdac 	bl	8004354 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80037fc:	2100      	movs	r1, #0
 80037fe:	480d      	ldr	r0, [pc, #52]	@ (8003834 <MX_USART2_UART_Init+0x94>)
 8003800:	f007 fb75 	bl	800aeee <HAL_UARTEx_SetTxFifoThreshold>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 800380a:	f000 fda3 	bl	8004354 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 800380e:	2100      	movs	r1, #0
 8003810:	4808      	ldr	r0, [pc, #32]	@ (8003834 <MX_USART2_UART_Init+0x94>)
 8003812:	f007 fbaa 	bl	800af6a <HAL_UARTEx_SetRxFifoThreshold>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 800381c:	f000 fd9a 	bl	8004354 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8003820:	4804      	ldr	r0, [pc, #16]	@ (8003834 <MX_USART2_UART_Init+0x94>)
 8003822:	f007 fb2b 	bl	800ae7c <HAL_UARTEx_DisableFifoMode>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <MX_USART2_UART_Init+0x90>
		Error_Handler();
 800382c:	f000 fd92 	bl	8004354 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003830:	bf00      	nop
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20000894 	.word	0x20000894
 8003838:	40004400 	.word	0x40004400

0800383c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003842:	4b16      	ldr	r3, [pc, #88]	@ (800389c <MX_DMA_Init+0x60>)
 8003844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003846:	4a15      	ldr	r2, [pc, #84]	@ (800389c <MX_DMA_Init+0x60>)
 8003848:	f043 0304 	orr.w	r3, r3, #4
 800384c:	6493      	str	r3, [r2, #72]	@ 0x48
 800384e:	4b13      	ldr	r3, [pc, #76]	@ (800389c <MX_DMA_Init+0x60>)
 8003850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800385a:	4b10      	ldr	r3, [pc, #64]	@ (800389c <MX_DMA_Init+0x60>)
 800385c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800385e:	4a0f      	ldr	r2, [pc, #60]	@ (800389c <MX_DMA_Init+0x60>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6493      	str	r3, [r2, #72]	@ 0x48
 8003866:	4b0d      	ldr	r3, [pc, #52]	@ (800389c <MX_DMA_Init+0x60>)
 8003868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003872:	2200      	movs	r2, #0
 8003874:	2100      	movs	r1, #0
 8003876:	200b      	movs	r0, #11
 8003878:	f001 fa51 	bl	8004d1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800387c:	200b      	movs	r0, #11
 800387e:	f001 fa68 	bl	8004d52 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003882:	2200      	movs	r2, #0
 8003884:	2100      	movs	r1, #0
 8003886:	200c      	movs	r0, #12
 8003888:	f001 fa49 	bl	8004d1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800388c:	200c      	movs	r0, #12
 800388e:	f001 fa60 	bl	8004d52 <HAL_NVIC_EnableIRQ>

}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000

080038a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	@ 0x28
 80038a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80038a6:	f107 0314 	add.w	r3, r7, #20
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	60da      	str	r2, [r3, #12]
 80038b4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80038b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003a68 <MX_GPIO_Init+0x1c8>)
 80038b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ba:	4a6b      	ldr	r2, [pc, #428]	@ (8003a68 <MX_GPIO_Init+0x1c8>)
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038c2:	4b69      	ldr	r3, [pc, #420]	@ (8003a68 <MX_GPIO_Init+0x1c8>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80038ce:	4b66      	ldr	r3, [pc, #408]	@ (8003a68 <MX_GPIO_Init+0x1c8>)
 80038d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d2:	4a65      	ldr	r2, [pc, #404]	@ (8003a68 <MX_GPIO_Init+0x1c8>)
 80038d4:	f043 0320 	orr.w	r3, r3, #32
 80038d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038da:	4b63      	ldr	r3, [pc, #396]	@ (8003a68 <MX_GPIO_Init+0x1c8>)
 80038dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80038e6:	4b60      	ldr	r3, [pc, #384]	@ (8003a68 <MX_GPIO_Init+0x1c8>)
 80038e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ea:	4a5f      	ldr	r2, [pc, #380]	@ (8003a68 <MX_GPIO_Init+0x1c8>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a68 <MX_GPIO_Init+0x1c8>)
 80038f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80038fe:	4b5a      	ldr	r3, [pc, #360]	@ (8003a68 <MX_GPIO_Init+0x1c8>)
 8003900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003902:	4a59      	ldr	r2, [pc, #356]	@ (8003a68 <MX_GPIO_Init+0x1c8>)
 8003904:	f043 0302 	orr.w	r3, r3, #2
 8003908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800390a:	4b57      	ldr	r3, [pc, #348]	@ (8003a68 <MX_GPIO_Init+0x1c8>)
 800390c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	607b      	str	r3, [r7, #4]
 8003914:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003916:	2200      	movs	r2, #0
 8003918:	2120      	movs	r1, #32
 800391a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800391e:	f001 feff 	bl	8005720 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12,
 8003922:	2200      	movs	r2, #0
 8003924:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8003928:	4850      	ldr	r0, [pc, #320]	@ (8003a6c <MX_GPIO_Init+0x1cc>)
 800392a:	f001 fef9 	bl	8005720 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC0 PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 800392e:	230d      	movs	r3, #13
 8003930:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003932:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003936:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800393c:	f107 0314 	add.w	r3, r7, #20
 8003940:	4619      	mov	r1, r3
 8003942:	484a      	ldr	r0, [pc, #296]	@ (8003a6c <MX_GPIO_Init+0x1cc>)
 8003944:	f001 fd52 	bl	80053ec <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8003948:	2320      	movs	r3, #32
 800394a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800394c:	2301      	movs	r3, #1
 800394e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003954:	2300      	movs	r3, #0
 8003956:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	4619      	mov	r1, r3
 800395e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003962:	f001 fd43 	bl	80053ec <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12;
 8003966:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 800396a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800396c:	2301      	movs	r3, #1
 800396e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003974:	2300      	movs	r3, #0
 8003976:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003978:	f107 0314 	add.w	r3, r7, #20
 800397c:	4619      	mov	r1, r3
 800397e:	483b      	ldr	r0, [pc, #236]	@ (8003a6c <MX_GPIO_Init+0x1cc>)
 8003980:	f001 fd34 	bl	80053ec <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11;
 8003984:	f640 0304 	movw	r3, #2052	@ 0x804
 8003988:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800398a:	2300      	movs	r3, #0
 800398c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003992:	f107 0314 	add.w	r3, r7, #20
 8003996:	4619      	mov	r1, r3
 8003998:	4835      	ldr	r0, [pc, #212]	@ (8003a70 <MX_GPIO_Init+0x1d0>)
 800399a:	f001 fd27 	bl	80053ec <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 800399e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80039a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80039a4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80039a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039aa:	2302      	movs	r3, #2
 80039ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ae:	f107 0314 	add.w	r3, r7, #20
 80039b2:	4619      	mov	r1, r3
 80039b4:	482e      	ldr	r0, [pc, #184]	@ (8003a70 <MX_GPIO_Init+0x1d0>)
 80039b6:	f001 fd19 	bl	80053ec <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80039ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80039c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039c6:	2302      	movs	r3, #2
 80039c8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ca:	f107 0314 	add.w	r3, r7, #20
 80039ce:	4619      	mov	r1, r3
 80039d0:	4827      	ldr	r0, [pc, #156]	@ (8003a70 <MX_GPIO_Init+0x1d0>)
 80039d2:	f001 fd0b 	bl	80053ec <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80039d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80039da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80039e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e6:	f107 0314 	add.w	r3, r7, #20
 80039ea:	4619      	mov	r1, r3
 80039ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039f0:	f001 fcfc 	bl	80053ec <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80039f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80039fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a00:	2302      	movs	r3, #2
 8003a02:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a04:	f107 0314 	add.w	r3, r7, #20
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4818      	ldr	r0, [pc, #96]	@ (8003a6c <MX_GPIO_Init+0x1cc>)
 8003a0c:	f001 fcee 	bl	80053ec <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003a10:	2200      	movs	r2, #0
 8003a12:	2100      	movs	r1, #0
 8003a14:	2006      	movs	r0, #6
 8003a16:	f001 f982 	bl	8004d1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003a1a:	2006      	movs	r0, #6
 8003a1c:	f001 f999 	bl	8004d52 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003a20:	2200      	movs	r2, #0
 8003a22:	2100      	movs	r1, #0
 8003a24:	2008      	movs	r0, #8
 8003a26:	f001 f97a 	bl	8004d1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003a2a:	2008      	movs	r0, #8
 8003a2c:	f001 f991 	bl	8004d52 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003a30:	2200      	movs	r2, #0
 8003a32:	2100      	movs	r1, #0
 8003a34:	2009      	movs	r0, #9
 8003a36:	f001 f972 	bl	8004d1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003a3a:	2009      	movs	r0, #9
 8003a3c:	f001 f989 	bl	8004d52 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003a40:	2200      	movs	r2, #0
 8003a42:	2100      	movs	r1, #0
 8003a44:	2017      	movs	r0, #23
 8003a46:	f001 f96a 	bl	8004d1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a4a:	2017      	movs	r0, #23
 8003a4c:	f001 f981 	bl	8004d52 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	2100      	movs	r1, #0
 8003a54:	2028      	movs	r0, #40	@ 0x28
 8003a56:	f001 f962 	bl	8004d1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003a5a:	2028      	movs	r0, #40	@ 0x28
 8003a5c:	f001 f979 	bl	8004d52 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003a60:	bf00      	nop
 8003a62:	3728      	adds	r7, #40	@ 0x28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	48000800 	.word	0x48000800
 8003a70:	48000400 	.word	0x48000400

08003a74 <map>:

/* USER CODE BEGIN 4 */
float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	ed87 0a05 	vstr	s0, [r7, #20]
 8003a7e:	edc7 0a04 	vstr	s1, [r7, #16]
 8003a82:	ed87 1a03 	vstr	s2, [r7, #12]
 8003a86:	edc7 1a02 	vstr	s3, [r7, #8]
 8003a8a:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003a8e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a92:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a9a:	edd7 6a01 	vldr	s13, [r7, #4]
 8003a9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003aa2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003aa6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003aaa:	ed97 7a03 	vldr	s14, [r7, #12]
 8003aae:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aba:	edd7 7a02 	vldr	s15, [r7, #8]
 8003abe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <DWT_Init>:

void DWT_Init(void) {
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003ad4:	4b08      	ldr	r3, [pc, #32]	@ (8003af8 <DWT_Init+0x28>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4a07      	ldr	r2, [pc, #28]	@ (8003af8 <DWT_Init+0x28>)
 8003ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ade:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003ae0:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <DWT_Init+0x2c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a05      	ldr	r2, [pc, #20]	@ (8003afc <DWT_Init+0x2c>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	6013      	str	r3, [r2, #0]
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	e000edf0 	.word	0xe000edf0
 8003afc:	e0001000 	.word	0xe0001000

08003b00 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10) {
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b10:	d10d      	bne.n	8003b2e <HAL_GPIO_EXTI_Callback+0x2e>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8003b12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b16:	4845      	ldr	r0, [pc, #276]	@ (8003c2c <HAL_GPIO_EXTI_Callback+0x12c>)
 8003b18:	f001 fdea 	bl	80056f0 <HAL_GPIO_ReadPin>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d105      	bne.n	8003b2e <HAL_GPIO_EXTI_Callback+0x2e>
			Mode = 0;
 8003b22:	4b43      	ldr	r3, [pc, #268]	@ (8003c30 <HAL_GPIO_EXTI_Callback+0x130>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 8003b28:	4b42      	ldr	r3, [pc, #264]	@ (8003c34 <HAL_GPIO_EXTI_Callback+0x134>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 8003b2e:	88fb      	ldrh	r3, [r7, #6]
 8003b30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b34:	d10e      	bne.n	8003b54 <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 8003b36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b3a:	483f      	ldr	r0, [pc, #252]	@ (8003c38 <HAL_GPIO_EXTI_Callback+0x138>)
 8003b3c:	f001 fdd8 	bl	80056f0 <HAL_GPIO_ReadPin>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d103      	bne.n	8003b4e <HAL_GPIO_EXTI_Callback+0x4e>
			P_Limit = 1;
 8003b46:	4b3d      	ldr	r3, [pc, #244]	@ (8003c3c <HAL_GPIO_EXTI_Callback+0x13c>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]
 8003b4c:	e002      	b.n	8003b54 <HAL_GPIO_EXTI_Callback+0x54>
		} else {
			P_Limit = 0;
 8003b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c3c <HAL_GPIO_EXTI_Callback+0x13c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b5a:	d10e      	bne.n	8003b7a <HAL_GPIO_EXTI_Callback+0x7a>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1) {
 8003b5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b60:	4835      	ldr	r0, [pc, #212]	@ (8003c38 <HAL_GPIO_EXTI_Callback+0x138>)
 8003b62:	f001 fdc5 	bl	80056f0 <HAL_GPIO_ReadPin>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d103      	bne.n	8003b74 <HAL_GPIO_EXTI_Callback+0x74>
			R_Limit = 1;
 8003b6c:	4b34      	ldr	r3, [pc, #208]	@ (8003c40 <HAL_GPIO_EXTI_Callback+0x140>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	e002      	b.n	8003b7a <HAL_GPIO_EXTI_Callback+0x7a>
		} else {
			R_Limit = 0;
 8003b74:	4b32      	ldr	r3, [pc, #200]	@ (8003c40 <HAL_GPIO_EXTI_Callback+0x140>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15) {
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b80:	d102      	bne.n	8003b88 <HAL_GPIO_EXTI_Callback+0x88>
		EmergencyState = 0;
 8003b82:	4b2c      	ldr	r3, [pc, #176]	@ (8003c34 <HAL_GPIO_EXTI_Callback+0x134>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t state[3] = { 0 }; // 0 = waiting for rise, 1 = waiting for fall

	uint32_t now = DWT->CYCCNT;
 8003b88:	4b2e      	ldr	r3, [pc, #184]	@ (8003c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]
	uint32_t idx;

	if (GPIO_Pin == GPIO_PIN_0)
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d102      	bne.n	8003b9a <HAL_GPIO_EXTI_Callback+0x9a>
		idx = 0;      // PC0
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e00a      	b.n	8003bb0 <HAL_GPIO_EXTI_Callback+0xb0>
	else if (GPIO_Pin == GPIO_PIN_2)
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d102      	bne.n	8003ba6 <HAL_GPIO_EXTI_Callback+0xa6>
		idx = 1; // PC2
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	e004      	b.n	8003bb0 <HAL_GPIO_EXTI_Callback+0xb0>
	else if (GPIO_Pin == GPIO_PIN_3)
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d13b      	bne.n	8003c24 <HAL_GPIO_EXTI_Callback+0x124>
		idx = 2; // PC3
 8003bac:	2302      	movs	r3, #2
 8003bae:	617b      	str	r3, [r7, #20]
	else
		return;

	if (state[idx] == 0) {
 8003bb0:	4a25      	ldr	r2, [pc, #148]	@ (8003c48 <HAL_GPIO_EXTI_Callback+0x148>)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <HAL_GPIO_EXTI_Callback+0xd2>
		rise_time[idx] = now;
 8003bbc:	4923      	ldr	r1, [pc, #140]	@ (8003c4c <HAL_GPIO_EXTI_Callback+0x14c>)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 1;
 8003bc6:	4a20      	ldr	r2, [pc, #128]	@ (8003c48 <HAL_GPIO_EXTI_Callback+0x148>)
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	4413      	add	r3, r2
 8003bcc:	2201      	movs	r2, #1
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	e029      	b.n	8003c26 <HAL_GPIO_EXTI_Callback+0x126>
	} else {
		uint32_t delta =
				(now >= rise_time[idx]) ?
 8003bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8003c4c <HAL_GPIO_EXTI_Callback+0x14c>)
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						(now - rise_time[idx]) :
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d306      	bcc.n	8003bee <HAL_GPIO_EXTI_Callback+0xee>
 8003be0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c4c <HAL_GPIO_EXTI_Callback+0x14c>)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	e006      	b.n	8003bfc <HAL_GPIO_EXTI_Callback+0xfc>
						(0xFFFFFFFF - rise_time[idx] + now);
 8003bee:	4a17      	ldr	r2, [pc, #92]	@ (8003c4c <HAL_GPIO_EXTI_Callback+0x14c>)
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
						(now - rise_time[idx]) :
 8003bfa:	3b01      	subs	r3, #1
		uint32_t delta =
 8003bfc:	60fb      	str	r3, [r7, #12]
		pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 8003bfe:	4b14      	ldr	r3, [pc, #80]	@ (8003c50 <HAL_GPIO_EXTI_Callback+0x150>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a14      	ldr	r2, [pc, #80]	@ (8003c54 <HAL_GPIO_EXTI_Callback+0x154>)
 8003c04:	fba2 2303 	umull	r2, r3, r2, r3
 8003c08:	0c9b      	lsrs	r3, r3, #18
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c10:	4911      	ldr	r1, [pc, #68]	@ (8003c58 <HAL_GPIO_EXTI_Callback+0x158>)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 0;
 8003c18:	4a0b      	ldr	r2, [pc, #44]	@ (8003c48 <HAL_GPIO_EXTI_Callback+0x148>)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e000      	b.n	8003c26 <HAL_GPIO_EXTI_Callback+0x126>
		return;
 8003c24:	bf00      	nop
	}
}
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	48000800 	.word	0x48000800
 8003c30:	20000b28 	.word	0x20000b28
 8003c34:	20000b29 	.word	0x20000b29
 8003c38:	48000400 	.word	0x48000400
 8003c3c:	20000b2d 	.word	0x20000b2d
 8003c40:	20000b2e 	.word	0x20000b2e
 8003c44:	e0001000 	.word	0xe0001000
 8003c48:	20001244 	.word	0x20001244
 8003c4c:	20000a50 	.word	0x20000a50
 8003c50:	20000200 	.word	0x20000200
 8003c54:	431bde83 	.word	0x431bde83
 8003c58:	20000a5c 	.word	0x20000a5c

08003c5c <HAL_TIM_PeriodElapsedCallback>:

//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003c5c:	b4b0      	push	{r4, r5, r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a08      	ldr	r2, [pc, #32]	@ (8003c88 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d108      	bne.n	8003c7e <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8003c6c:	4b07      	ldr	r3, [pc, #28]	@ (8003c8c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	1e54      	subs	r4, r2, #1
 8003c74:	f143 0500 	adc.w	r5, r3, #0
 8003c78:	4b04      	ldr	r3, [pc, #16]	@ (8003c8c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003c7a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bcb0      	pop	{r4, r5, r7}
 8003c86:	4770      	bx	lr
 8003c88:	20000564 	.word	0x20000564
 8003c8c:	20000a20 	.word	0x20000a20

08003c90 <micros>:
uint64_t micros() {
 8003c90:	b4b0      	push	{r4, r5, r7}
 8003c92:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8003c94:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <micros+0x2c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4b07      	ldr	r3, [pc, #28]	@ (8003cc0 <micros+0x30>)
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	1884      	adds	r4, r0, r2
 8003ca8:	eb41 0503 	adc.w	r5, r1, r3
 8003cac:	4622      	mov	r2, r4
 8003cae:	462b      	mov	r3, r5
}
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bcb0      	pop	{r4, r5, r7}
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000564 	.word	0x20000564
 8003cc0:	20000a20 	.word	0x20000a20

08003cc4 <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
		float outMin, float outMax, PID_State *state) {
 8003cc4:	b480      	push	{r7}
 8003cc6:	b08f      	sub	sp, #60	@ 0x3c
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	ed87 0a07 	vstr	s0, [r7, #28]
 8003cce:	edc7 0a06 	vstr	s1, [r7, #24]
 8003cd2:	ed87 1a05 	vstr	s2, [r7, #20]
 8003cd6:	edc7 1a04 	vstr	s3, [r7, #16]
 8003cda:	ed87 2a03 	vstr	s4, [r7, #12]
 8003cde:	edc7 2a02 	vstr	s5, [r7, #8]
 8003ce2:	ed87 3a01 	vstr	s6, [r7, #4]
 8003ce6:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 8003ce8:	ed97 7a06 	vldr	s14, [r7, #24]
 8003cec:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	ed93 7a00 	vldr	s14, [r3]
 8003cfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d02:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	ed93 7a00 	vldr	s14, [r3]
 8003d1a:	ed97 6a01 	vldr	s12, [r7, #4]
 8003d1e:	edd7 6a05 	vldr	s13, [r7, #20]
 8003d22:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003d26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2e:	dd08      	ble.n	8003d42 <PID_Update+0x7e>
		state->integ = outMax / kI;
 8003d30:	edd7 6a01 	vldr	s13, [r7, #4]
 8003d34:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	ed93 7a00 	vldr	s14, [r3]
 8003d48:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d4c:	edd7 6a05 	vldr	s13, [r7, #20]
 8003d50:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003d54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5c:	d508      	bpl.n	8003d70 <PID_Update+0xac>
		state->integ = outMin / kI;
 8003d5e:	edd7 6a02 	vldr	s13, [r7, #8]
 8003d62:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 8003d70:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7c:	dd0b      	ble.n	8003d96 <PID_Update+0xd2>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	edd3 7a00 	vldr	s15, [r3]
 8003d84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8c:	d503      	bpl.n	8003d96 <PID_Update+0xd2>
		state->integ = 0;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 8003d96:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da2:	d50b      	bpl.n	8003dbc <PID_Update+0xf8>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	edd3 7a00 	vldr	s15, [r3]
 8003daa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db2:	dd03      	ble.n	8003dbc <PID_Update+0xf8>
		state->integ = 0;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	edd3 7a00 	vldr	s15, [r3]
 8003dc2:	ed97 7a05 	vldr	s14, [r7, #20]
 8003dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dca:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8003dd4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003dd8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003ddc:	ed97 7a03 	vldr	s14, [r7, #12]
 8003de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 8003de8:	ed97 7a04 	vldr	s14, [r7, #16]
 8003dec:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 8003dfe:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003e02:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e0a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e12:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 8003e16:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e26:	dd01      	ble.n	8003e2c <PID_Update+0x168>
		out = outMax;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 8003e2c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e30:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3c:	d501      	bpl.n	8003e42 <PID_Update+0x17e>
		out = outMin;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 8003e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e44:	ee07 3a90 	vmov	s15, r3
}
 8003e48:	eeb0 0a67 	vmov.f32	s0, s15
 8003e4c:	373c      	adds	r7, #60	@ 0x3c
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update() {
 8003e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
	// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 8003e60:	f7ff ff16 	bl	8003c90 <micros>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	495f      	ldr	r1, [pc, #380]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003e6a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 8003e6e:	4b5f      	ldr	r3, [pc, #380]	@ (8003fec <Revolute_PosVel_Update+0x194>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	4a5c      	ldr	r2, [pc, #368]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003e76:	6013      	str	r3, [r2, #0]

	// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8003e78:	4b5b      	ldr	r3, [pc, #364]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003e80:	ee07 3a90 	vmov	s15, r3
 8003e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e88:	4b57      	ldr	r3, [pc, #348]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003e8a:	edc3 7a06 	vstr	s15, [r3, #24]

	// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8003e8e:	4b56      	ldr	r3, [pc, #344]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003e90:	681a      	ldr	r2, [r3, #0]
			- Revolute_QEIdata.Position[OLD];
 8003e92:	4b55      	ldr	r3, [pc, #340]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8003e98:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea0:	dd04      	ble.n	8003eac <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	e007      	b.n	8003ebc <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8003eb2:	da03      	bge.n	8003ebc <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003eba:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8003ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003ebe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8003ec2:	4b49      	ldr	r3, [pc, #292]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003ec4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003ec8:	ebb0 0a02 	subs.w	sl, r0, r2
 8003ecc:	eb61 0b03 	sbc.w	fp, r1, r3
 8003ed0:	4650      	mov	r0, sl
 8003ed2:	4659      	mov	r1, fp
 8003ed4:	f7fc ff0e 	bl	8000cf4 <__aeabi_ul2f>
 8003ed8:	ee07 0a10 	vmov	s14, r0
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8003edc:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8003ff0 <Revolute_PosVel_Update+0x198>
 8003ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee4:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 8003ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003eec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef4:	d06d      	beq.n	8003fd2 <Revolute_PosVel_Update+0x17a>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_r = (float) diffPosition_r / diffTime_r;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	ee07 3a90 	vmov	s15, r3
 8003efc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f00:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f08:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAngularAcceleration = (Vel_counts_r
			- Revolute_QEIdata.QEIAngularVelocity) / diffTime_r;
 8003f0c:	4b36      	ldr	r3, [pc, #216]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003f0e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003f12:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f16:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003f1a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Revolute_QEIdata.QEIAngularAcceleration = (Vel_counts_r
 8003f22:	4b31      	ldr	r3, [pc, #196]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003f24:	edc3 7a08 	vstr	s15, [r3, #32]

	// Store raw velocity
	Revolute_QEIdata.QEIAngularVelocity = Vel_counts_r;
 8003f28:	4a2f      	ldr	r2, [pc, #188]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	61d3      	str	r3, [r2, #28]

	// Angular velocity in rad/s
	Revolute_QEIdata.AngularVelocity_rad = Vel_counts_r
			* (2.0f * M_PI / 16384.0f);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fc fad6 	bl	80004e0 <__aeabi_f2d>
 8003f34:	a32a      	add	r3, pc, #168	@ (adr r3, 8003fe0 <Revolute_PosVel_Update+0x188>)
 8003f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3a:	f7fc fb29 	bl	8000590 <__aeabi_dmul>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	f7fc fdbd 	bl	8000ac4 <__aeabi_d2f>
 8003f4a:	4603      	mov	r3, r0
	Revolute_QEIdata.AngularVelocity_rad = Vel_counts_r
 8003f4c:	4a26      	ldr	r2, [pc, #152]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003f4e:	6253      	str	r3, [r2, #36]	@ 0x24

	// Angular acceleration in rad/s²
	Revolute_QEIdata.AngularAcceleration_rad =
			Revolute_QEIdata.QEIAngularAcceleration * (2.0f * M_PI / 16384.0f);
 8003f50:	4b25      	ldr	r3, [pc, #148]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fc fac3 	bl	80004e0 <__aeabi_f2d>
 8003f5a:	a321      	add	r3, pc, #132	@ (adr r3, 8003fe0 <Revolute_PosVel_Update+0x188>)
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f7fc fb16 	bl	8000590 <__aeabi_dmul>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4610      	mov	r0, r2
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	f7fc fdaa 	bl	8000ac4 <__aeabi_d2f>
 8003f70:	4603      	mov	r3, r0
	Revolute_QEIdata.AngularAcceleration_rad =
 8003f72:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003f74:	6293      	str	r3, [r2, #40]	@ 0x28

	// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 8003f76:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003f78:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003f7c:	68f9      	ldr	r1, [r7, #12]
 8003f7e:	17c8      	asrs	r0, r1, #31
 8003f80:	460c      	mov	r4, r1
 8003f82:	4605      	mov	r5, r0
 8003f84:	eb12 0804 	adds.w	r8, r2, r4
 8003f88:	eb43 0905 	adc.w	r9, r3, r5
 8003f8c:	4b16      	ldr	r3, [pc, #88]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003f8e:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8003f92:	4b15      	ldr	r3, [pc, #84]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003f94:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (2.0f * M_PI / 16384.0f);
 8003f98:	4610      	mov	r0, r2
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	f7fc faca 	bl	8000534 <__aeabi_l2d>
 8003fa0:	a30f      	add	r3, pc, #60	@ (adr r3, 8003fe0 <Revolute_PosVel_Update+0x188>)
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f7fc faf3 	bl	8000590 <__aeabi_dmul>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f7fc fd87 	bl	8000ac4 <__aeabi_d2f>
 8003fb6:	4603      	mov	r3, r0
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8003fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003fba:	6393      	str	r3, [r2, #56]	@ 0x38

	// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a09      	ldr	r2, [pc, #36]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003fc2:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 8003fc4:	4b08      	ldr	r3, [pc, #32]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003fc6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003fca:	4907      	ldr	r1, [pc, #28]	@ (8003fe8 <Revolute_PosVel_Update+0x190>)
 8003fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003fd0:	e000      	b.n	8003fd4 <Revolute_PosVel_Update+0x17c>
		return;
 8003fd2:	bf00      	nop
}
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fdc:	f3af 8000 	nop.w
 8003fe0:	54442d18 	.word	0x54442d18
 8003fe4:	3f3921fb 	.word	0x3f3921fb
 8003fe8:	20000a70 	.word	0x20000a70
 8003fec:	20000498 	.word	0x20000498
 8003ff0:	358637bd 	.word	0x358637bd

08003ff4 <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update() {
 8003ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
	// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 8003ffc:	f7ff fe48 	bl	8003c90 <micros>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	494c      	ldr	r1, [pc, #304]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 8004006:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 800400a:	4b4c      	ldr	r3, [pc, #304]	@ (800413c <Prismatic_PosVel_Update+0x148>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	4a49      	ldr	r2, [pc, #292]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 8004012:	6013      	str	r3, [r2, #0]

	// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004014:	4b48      	ldr	r3, [pc, #288]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 8004016:	681a      	ldr	r2, [r3, #0]
			- Prismatic_QEIdata.Position[OLD];
 8004018:	4b47      	ldr	r3, [pc, #284]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 800401e:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004026:	dd04      	ble.n	8004032 <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	e007      	b.n	8004042 <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004038:	da03      	bge.n	8004042 <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004040:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 8004042:	4b3d      	ldr	r3, [pc, #244]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 8004044:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004048:	4b3b      	ldr	r3, [pc, #236]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 800404a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800404e:	ebb0 0a02 	subs.w	sl, r0, r2
 8004052:	eb61 0b03 	sbc.w	fp, r1, r3
 8004056:	4650      	mov	r0, sl
 8004058:	4659      	mov	r1, fp
 800405a:	f7fc fe4b 	bl	8000cf4 <__aeabi_ul2f>
 800405e:	ee07 0a10 	vmov	s14, r0
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 8004062:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8004140 <Prismatic_PosVel_Update+0x14c>
 8004066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406a:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 800406e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004072:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407a:	d057      	beq.n	800412c <Prismatic_PosVel_Update+0x138>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_p = (float) diffPosition_p / diffTime_p;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004086:	ed97 7a02 	vldr	s14, [r7, #8]
 800408a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800408e:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
			- Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 8004092:	4b29      	ldr	r3, [pc, #164]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 8004094:	edd3 7a06 	vldr	s15, [r3, #24]
 8004098:	ed97 7a01 	vldr	s14, [r7, #4]
 800409c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80040a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80040a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
 80040a8:	4b23      	ldr	r3, [pc, #140]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 80040aa:	edc3 7a07 	vstr	s15, [r3, #28]

	// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 80040ae:	4a22      	ldr	r2, [pc, #136]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6193      	str	r3, [r2, #24]

	// Velocity in mm/s
	Prismatic_QEIdata.Velocity_mm = Vel_counts_p * (10.0f / 8192.0f);
 80040b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80040b8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004144 <Prismatic_PosVel_Update+0x150>
 80040bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 80040c2:	edc3 7a08 	vstr	s15, [r3, #32]

	// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration_mm = Prismatic_QEIdata.QEIAcceleration
 80040c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 80040c8:	edd3 7a07 	vldr	s15, [r3, #28]
			* (10.0f / 8192.0f);
 80040cc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004144 <Prismatic_PosVel_Update+0x150>
 80040d0:	ee67 7a87 	vmul.f32	s15, s15, s14
	Prismatic_QEIdata.Acceleration_mm = Prismatic_QEIdata.QEIAcceleration
 80040d4:	4b18      	ldr	r3, [pc, #96]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 80040d6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 80040da:	4b17      	ldr	r3, [pc, #92]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 80040dc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80040e0:	68f9      	ldr	r1, [r7, #12]
 80040e2:	17c8      	asrs	r0, r1, #31
 80040e4:	460c      	mov	r4, r1
 80040e6:	4605      	mov	r5, r0
 80040e8:	eb12 0804 	adds.w	r8, r2, r4
 80040ec:	eb43 0905 	adc.w	r9, r3, r5
 80040f0:	4b11      	ldr	r3, [pc, #68]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 80040f2:	e9c3 890a 	strd	r8, r9, [r3, #40]	@ 0x28

	// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 80040f6:	4b10      	ldr	r3, [pc, #64]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 80040f8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
			* (10.0f / 8192.0f);
 80040fc:	4610      	mov	r0, r2
 80040fe:	4619      	mov	r1, r3
 8004100:	f7fc fe00 	bl	8000d04 <__aeabi_l2f>
 8004104:	ee07 0a10 	vmov	s14, r0
 8004108:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004144 <Prismatic_PosVel_Update+0x150>
 800410c:	ee67 7a27 	vmul.f32	s15, s14, s15
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004110:	4b09      	ldr	r3, [pc, #36]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 8004112:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 8004116:	4b08      	ldr	r3, [pc, #32]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a07      	ldr	r2, [pc, #28]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 800411c:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 800411e:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 8004120:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004124:	4904      	ldr	r1, [pc, #16]	@ (8004138 <Prismatic_PosVel_Update+0x144>)
 8004126:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800412a:	e000      	b.n	800412e <Prismatic_PosVel_Update+0x13a>
		return;
 800412c:	bf00      	nop
}
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004136:	bf00      	nop
 8004138:	20000ab0 	.word	0x20000ab0
 800413c:	200003cc 	.word	0x200003cc
 8004140:	358637bd 	.word	0x358637bd
 8004144:	3aa00000 	.word	0x3aa00000

08004148 <Set_Motor>:

void Set_Motor(int motor_num, float speed) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)
 8004154:	edd7 7a00 	vldr	s15, [r7]
 8004158:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800422c <Set_Motor+0xe4>
 800415c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004164:	dd01      	ble.n	800416a <Set_Motor+0x22>
		speed = 100.0f;
 8004166:	4b32      	ldr	r3, [pc, #200]	@ (8004230 <Set_Motor+0xe8>)
 8004168:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f)
 800416a:	edd7 7a00 	vldr	s15, [r7]
 800416e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004234 <Set_Motor+0xec>
 8004172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417a:	d501      	bpl.n	8004180 <Set_Motor+0x38>
		speed = -100.0f;
 800417c:	4b2e      	ldr	r3, [pc, #184]	@ (8004238 <Set_Motor+0xf0>)
 800417e:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t) ((fabsf(speed) * 100) / 100);
 8004180:	edd7 7a00 	vldr	s15, [r7]
 8004184:	eef0 7ae7 	vabs.f32	s15, s15
 8004188:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800422c <Set_Motor+0xe4>
 800418c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004190:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800422c <Set_Motor+0xe4>
 8004194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800419c:	ee17 3a90 	vmov	r3, s15
 80041a0:	60fb      	str	r3, [r7, #12]
	if (motor_num == 0) {
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d11d      	bne.n	80041e4 <Set_Motor+0x9c>
		if (speed > 0) {
 80041a8:	edd7 7a00 	vldr	s15, [r7]
 80041ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b4:	dd05      	ble.n	80041c2 <Set_Motor+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80041b6:	2201      	movs	r2, #1
 80041b8:	2120      	movs	r1, #32
 80041ba:	4820      	ldr	r0, [pc, #128]	@ (800423c <Set_Motor+0xf4>)
 80041bc:	f001 fab0 	bl	8005720 <HAL_GPIO_WritePin>
 80041c0:	e00b      	b.n	80041da <Set_Motor+0x92>
		} else if (speed < 0) {
 80041c2:	edd7 7a00 	vldr	s15, [r7]
 80041c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ce:	d504      	bpl.n	80041da <Set_Motor+0x92>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80041d0:	2200      	movs	r2, #0
 80041d2:	2120      	movs	r1, #32
 80041d4:	4819      	ldr	r0, [pc, #100]	@ (800423c <Set_Motor+0xf4>)
 80041d6:	f001 faa3 	bl	8005720 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 80041da:	4b19      	ldr	r3, [pc, #100]	@ (8004240 <Set_Motor+0xf8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	63da      	str	r2, [r3, #60]	@ 0x3c
		} else if (speed < 0) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 80041e2:	e01f      	b.n	8004224 <Set_Motor+0xdc>
	} else if (motor_num == 1) {
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d11c      	bne.n	8004224 <Set_Motor+0xdc>
		if (speed > 0) {
 80041ea:	edd7 7a00 	vldr	s15, [r7]
 80041ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f6:	dd05      	ble.n	8004204 <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80041f8:	2200      	movs	r2, #0
 80041fa:	2140      	movs	r1, #64	@ 0x40
 80041fc:	480f      	ldr	r0, [pc, #60]	@ (800423c <Set_Motor+0xf4>)
 80041fe:	f001 fa8f 	bl	8005720 <HAL_GPIO_WritePin>
 8004202:	e00b      	b.n	800421c <Set_Motor+0xd4>
		} else if (speed < 0) {
 8004204:	edd7 7a00 	vldr	s15, [r7]
 8004208:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800420c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004210:	d504      	bpl.n	800421c <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8004212:	2201      	movs	r2, #1
 8004214:	2140      	movs	r1, #64	@ 0x40
 8004216:	4809      	ldr	r0, [pc, #36]	@ (800423c <Set_Motor+0xf4>)
 8004218:	f001 fa82 	bl	8005720 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 800421c:	4b08      	ldr	r3, [pc, #32]	@ (8004240 <Set_Motor+0xf8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	42c80000 	.word	0x42c80000
 8004230:	42c80000 	.word	0x42c80000
 8004234:	c2c80000 	.word	0xc2c80000
 8004238:	c2c80000 	.word	0xc2c80000
 800423c:	48000800 	.word	0x48000800
 8004240:	20000630 	.word	0x20000630

08004244 <Set_Servo>:

void Set_Servo(int Pen_Pos) {
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0) {
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10f      	bne.n	8004272 <Set_Servo+0x2e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 8004252:	4b0e      	ldr	r3, [pc, #56]	@ (800428c <Set_Servo+0x48>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800425a:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 800425c:	4b0c      	ldr	r3, [pc, #48]	@ (8004290 <Set_Servo+0x4c>)
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 8004262:	f7ff fd15 	bl	8003c90 <micros>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	490a      	ldr	r1, [pc, #40]	@ (8004294 <Set_Servo+0x50>)
 800426c:	e9c1 2300 	strd	r2, r3, [r1]
	} else {
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 8004270:	e007      	b.n	8004282 <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 8004272:	4b06      	ldr	r3, [pc, #24]	@ (800428c <Set_Servo+0x48>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800427a:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 800427c:	4b04      	ldr	r3, [pc, #16]	@ (8004290 <Set_Servo+0x4c>)
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	200006fc 	.word	0x200006fc
 8004290:	20000b2c 	.word	0x20000b2c
 8004294:	20000b90 	.word	0x20000b90

08004298 <Reset_R>:

void Reset_R() {
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 800429c:	4905      	ldr	r1, [pc, #20]	@ (80042b4 <Reset_R+0x1c>)
 800429e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 80042aa:	bf00      	nop
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	20000a70 	.word	0x20000a70

080042b8 <Reset_P>:
void Reset_P() {
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 80042bc:	4905      	ldr	r1, [pc, #20]	@ (80042d4 <Reset_P+0x1c>)
 80042be:	4a06      	ldr	r2, [pc, #24]	@ (80042d8 <Reset_P+0x20>)
 80042c0:	f04f 33ff 	mov.w	r3, #4294967295
 80042c4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//	Prismatic_QEIdata.mmPosition = 0;
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20000ab0 	.word	0x20000ab0
 80042d8:	fffff99a 	.word	0xfffff99a

080042dc <Get_QRIdata>:

void Get_QRIdata(float *prism_vel_mm, float *prism_acc_mm, float *prism_mm_pos,
		float *rev_ang_vel_rad, float *rev_ang_acc_rad, float *rev_rad_pos) {
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
	if (prism_vel_mm)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <Get_QRIdata+0x1c>
		*prism_vel_mm = Prismatic_QEIdata.Velocity_mm;
 80042f0:	4b16      	ldr	r3, [pc, #88]	@ (800434c <Get_QRIdata+0x70>)
 80042f2:	6a1a      	ldr	r2, [r3, #32]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	601a      	str	r2, [r3, #0]
	if (prism_acc_mm)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <Get_QRIdata+0x2a>
		*prism_acc_mm = Prismatic_QEIdata.Acceleration_mm;
 80042fe:	4b13      	ldr	r3, [pc, #76]	@ (800434c <Get_QRIdata+0x70>)
 8004300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	601a      	str	r2, [r3, #0]
	if (prism_mm_pos)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <Get_QRIdata+0x38>
		*prism_mm_pos = Prismatic_QEIdata.mmPosition;
 800430c:	4b0f      	ldr	r3, [pc, #60]	@ (800434c <Get_QRIdata+0x70>)
 800430e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	601a      	str	r2, [r3, #0]
	if (rev_ang_vel_rad)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <Get_QRIdata+0x46>
		*rev_ang_vel_rad = Revolute_QEIdata.AngularVelocity_rad;
 800431a:	4b0d      	ldr	r3, [pc, #52]	@ (8004350 <Get_QRIdata+0x74>)
 800431c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	601a      	str	r2, [r3, #0]
	if (rev_ang_acc_rad)
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <Get_QRIdata+0x54>
		*rev_ang_acc_rad = Revolute_QEIdata.AngularAcceleration_rad;
 8004328:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <Get_QRIdata+0x74>)
 800432a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	601a      	str	r2, [r3, #0]
	if (rev_rad_pos)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <Get_QRIdata+0x62>
		*rev_rad_pos = Revolute_QEIdata.RadPosition;
 8004336:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <Get_QRIdata+0x74>)
 8004338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	601a      	str	r2, [r3, #0]
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20000ab0 	.word	0x20000ab0
 8004350:	20000a70 	.word	0x20000a70

08004354 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004358:	b672      	cpsid	i
}
 800435a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800435c:	bf00      	nop
 800435e:	e7fd      	b.n	800435c <Error_Handler+0x8>

08004360 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004366:	4b0f      	ldr	r3, [pc, #60]	@ (80043a4 <HAL_MspInit+0x44>)
 8004368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800436a:	4a0e      	ldr	r2, [pc, #56]	@ (80043a4 <HAL_MspInit+0x44>)
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	6613      	str	r3, [r2, #96]	@ 0x60
 8004372:	4b0c      	ldr	r3, [pc, #48]	@ (80043a4 <HAL_MspInit+0x44>)
 8004374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	607b      	str	r3, [r7, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800437e:	4b09      	ldr	r3, [pc, #36]	@ (80043a4 <HAL_MspInit+0x44>)
 8004380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004382:	4a08      	ldr	r2, [pc, #32]	@ (80043a4 <HAL_MspInit+0x44>)
 8004384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004388:	6593      	str	r3, [r2, #88]	@ 0x58
 800438a:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <HAL_MspInit+0x44>)
 800438c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004396:	f001 fa97 	bl	80058c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000

080043a8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08c      	sub	sp, #48	@ 0x30
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b0:	f107 031c 	add.w	r3, r7, #28
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a32      	ldr	r2, [pc, #200]	@ (8004490 <HAL_TIM_IC_MspInit+0xe8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d130      	bne.n	800442c <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043ca:	4b32      	ldr	r3, [pc, #200]	@ (8004494 <HAL_TIM_IC_MspInit+0xec>)
 80043cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ce:	4a31      	ldr	r2, [pc, #196]	@ (8004494 <HAL_TIM_IC_MspInit+0xec>)
 80043d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80043d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80043d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004494 <HAL_TIM_IC_MspInit+0xec>)
 80043d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004494 <HAL_TIM_IC_MspInit+0xec>)
 80043e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004494 <HAL_TIM_IC_MspInit+0xec>)
 80043e8:	f043 0304 	orr.w	r3, r3, #4
 80043ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043ee:	4b29      	ldr	r3, [pc, #164]	@ (8004494 <HAL_TIM_IC_MspInit+0xec>)
 80043f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80043fa:	2302      	movs	r3, #2
 80043fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fe:	2302      	movs	r3, #2
 8004400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004402:	2300      	movs	r3, #0
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004406:	2300      	movs	r3, #0
 8004408:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800440a:	2302      	movs	r3, #2
 800440c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800440e:	f107 031c 	add.w	r3, r7, #28
 8004412:	4619      	mov	r1, r3
 8004414:	4820      	ldr	r0, [pc, #128]	@ (8004498 <HAL_TIM_IC_MspInit+0xf0>)
 8004416:	f000 ffe9 	bl	80053ec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800441a:	2200      	movs	r2, #0
 800441c:	2100      	movs	r1, #0
 800441e:	2019      	movs	r0, #25
 8004420:	f000 fc7d 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004424:	2019      	movs	r0, #25
 8004426:	f000 fc94 	bl	8004d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800442a:	e02d      	b.n	8004488 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004434:	d128      	bne.n	8004488 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004436:	4b17      	ldr	r3, [pc, #92]	@ (8004494 <HAL_TIM_IC_MspInit+0xec>)
 8004438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443a:	4a16      	ldr	r2, [pc, #88]	@ (8004494 <HAL_TIM_IC_MspInit+0xec>)
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	6593      	str	r3, [r2, #88]	@ 0x58
 8004442:	4b14      	ldr	r3, [pc, #80]	@ (8004494 <HAL_TIM_IC_MspInit+0xec>)
 8004444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800444e:	4b11      	ldr	r3, [pc, #68]	@ (8004494 <HAL_TIM_IC_MspInit+0xec>)
 8004450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004452:	4a10      	ldr	r2, [pc, #64]	@ (8004494 <HAL_TIM_IC_MspInit+0xec>)
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800445a:	4b0e      	ldr	r3, [pc, #56]	@ (8004494 <HAL_TIM_IC_MspInit+0xec>)
 800445c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004466:	2301      	movs	r3, #1
 8004468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446a:	2302      	movs	r3, #2
 800446c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446e:	2300      	movs	r3, #0
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004472:	2300      	movs	r3, #0
 8004474:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004476:	2301      	movs	r3, #1
 8004478:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800447a:	f107 031c 	add.w	r3, r7, #28
 800447e:	4619      	mov	r1, r3
 8004480:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004484:	f000 ffb2 	bl	80053ec <HAL_GPIO_Init>
}
 8004488:	bf00      	nop
 800448a:	3730      	adds	r7, #48	@ 0x30
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40012c00 	.word	0x40012c00
 8004494:	40021000 	.word	0x40021000
 8004498:	48000800 	.word	0x48000800

0800449c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08c      	sub	sp, #48	@ 0x30
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a4:	f107 031c 	add.w	r3, r7, #28
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a37      	ldr	r2, [pc, #220]	@ (8004598 <HAL_TIM_Encoder_MspInit+0xfc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d130      	bne.n	8004520 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044be:	4b37      	ldr	r3, [pc, #220]	@ (800459c <HAL_TIM_Encoder_MspInit+0x100>)
 80044c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c2:	4a36      	ldr	r2, [pc, #216]	@ (800459c <HAL_TIM_Encoder_MspInit+0x100>)
 80044c4:	f043 0302 	orr.w	r3, r3, #2
 80044c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80044ca:	4b34      	ldr	r3, [pc, #208]	@ (800459c <HAL_TIM_Encoder_MspInit+0x100>)
 80044cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	61bb      	str	r3, [r7, #24]
 80044d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044d6:	4b31      	ldr	r3, [pc, #196]	@ (800459c <HAL_TIM_Encoder_MspInit+0x100>)
 80044d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044da:	4a30      	ldr	r2, [pc, #192]	@ (800459c <HAL_TIM_Encoder_MspInit+0x100>)
 80044dc:	f043 0302 	orr.w	r3, r3, #2
 80044e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044e2:	4b2e      	ldr	r3, [pc, #184]	@ (800459c <HAL_TIM_Encoder_MspInit+0x100>)
 80044e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80044ee:	2330      	movs	r3, #48	@ 0x30
 80044f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f2:	2302      	movs	r3, #2
 80044f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fa:	2300      	movs	r3, #0
 80044fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044fe:	2302      	movs	r3, #2
 8004500:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004502:	f107 031c 	add.w	r3, r7, #28
 8004506:	4619      	mov	r1, r3
 8004508:	4825      	ldr	r0, [pc, #148]	@ (80045a0 <HAL_TIM_Encoder_MspInit+0x104>)
 800450a:	f000 ff6f 	bl	80053ec <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800450e:	2200      	movs	r2, #0
 8004510:	2100      	movs	r1, #0
 8004512:	201d      	movs	r0, #29
 8004514:	f000 fc03 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004518:	201d      	movs	r0, #29
 800451a:	f000 fc1a 	bl	8004d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800451e:	e036      	b.n	800458e <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM4)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1f      	ldr	r2, [pc, #124]	@ (80045a4 <HAL_TIM_Encoder_MspInit+0x108>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d131      	bne.n	800458e <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800452a:	4b1c      	ldr	r3, [pc, #112]	@ (800459c <HAL_TIM_Encoder_MspInit+0x100>)
 800452c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452e:	4a1b      	ldr	r2, [pc, #108]	@ (800459c <HAL_TIM_Encoder_MspInit+0x100>)
 8004530:	f043 0304 	orr.w	r3, r3, #4
 8004534:	6593      	str	r3, [r2, #88]	@ 0x58
 8004536:	4b19      	ldr	r3, [pc, #100]	@ (800459c <HAL_TIM_Encoder_MspInit+0x100>)
 8004538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004542:	4b16      	ldr	r3, [pc, #88]	@ (800459c <HAL_TIM_Encoder_MspInit+0x100>)
 8004544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004546:	4a15      	ldr	r2, [pc, #84]	@ (800459c <HAL_TIM_Encoder_MspInit+0x100>)
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800454e:	4b13      	ldr	r3, [pc, #76]	@ (800459c <HAL_TIM_Encoder_MspInit+0x100>)
 8004550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800455a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800455e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004560:	2302      	movs	r3, #2
 8004562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004564:	2300      	movs	r3, #0
 8004566:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004568:	2300      	movs	r3, #0
 800456a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800456c:	230a      	movs	r3, #10
 800456e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004570:	f107 031c 	add.w	r3, r7, #28
 8004574:	4619      	mov	r1, r3
 8004576:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800457a:	f000 ff37 	bl	80053ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800457e:	2200      	movs	r2, #0
 8004580:	2100      	movs	r1, #0
 8004582:	201e      	movs	r0, #30
 8004584:	f000 fbcb 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004588:	201e      	movs	r0, #30
 800458a:	f000 fbe2 	bl	8004d52 <HAL_NVIC_EnableIRQ>
}
 800458e:	bf00      	nop
 8004590:	3730      	adds	r7, #48	@ 0x30
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40000400 	.word	0x40000400
 800459c:	40021000 	.word	0x40021000
 80045a0:	48000400 	.word	0x48000400
 80045a4:	40000800 	.word	0x40000800

080045a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004668 <HAL_TIM_Base_MspInit+0xc0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d114      	bne.n	80045e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80045ba:	4b2c      	ldr	r3, [pc, #176]	@ (800466c <HAL_TIM_Base_MspInit+0xc4>)
 80045bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045be:	4a2b      	ldr	r2, [pc, #172]	@ (800466c <HAL_TIM_Base_MspInit+0xc4>)
 80045c0:	f043 0308 	orr.w	r3, r3, #8
 80045c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80045c6:	4b29      	ldr	r3, [pc, #164]	@ (800466c <HAL_TIM_Base_MspInit+0xc4>)
 80045c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80045d2:	2200      	movs	r2, #0
 80045d4:	2100      	movs	r1, #0
 80045d6:	2032      	movs	r0, #50	@ 0x32
 80045d8:	f000 fba1 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80045dc:	2032      	movs	r0, #50	@ 0x32
 80045de:	f000 fbb8 	bl	8004d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80045e2:	e03c      	b.n	800465e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a21      	ldr	r2, [pc, #132]	@ (8004670 <HAL_TIM_Base_MspInit+0xc8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d10c      	bne.n	8004608 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80045ee:	4b1f      	ldr	r3, [pc, #124]	@ (800466c <HAL_TIM_Base_MspInit+0xc4>)
 80045f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045f2:	4a1e      	ldr	r2, [pc, #120]	@ (800466c <HAL_TIM_Base_MspInit+0xc4>)
 80045f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80045f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80045fa:	4b1c      	ldr	r3, [pc, #112]	@ (800466c <HAL_TIM_Base_MspInit+0xc4>)
 80045fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	693b      	ldr	r3, [r7, #16]
}
 8004606:	e02a      	b.n	800465e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM15)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a19      	ldr	r2, [pc, #100]	@ (8004674 <HAL_TIM_Base_MspInit+0xcc>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d10c      	bne.n	800462c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004612:	4b16      	ldr	r3, [pc, #88]	@ (800466c <HAL_TIM_Base_MspInit+0xc4>)
 8004614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004616:	4a15      	ldr	r2, [pc, #84]	@ (800466c <HAL_TIM_Base_MspInit+0xc4>)
 8004618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800461c:	6613      	str	r3, [r2, #96]	@ 0x60
 800461e:	4b13      	ldr	r3, [pc, #76]	@ (800466c <HAL_TIM_Base_MspInit+0xc4>)
 8004620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004622:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
}
 800462a:	e018      	b.n	800465e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a11      	ldr	r2, [pc, #68]	@ (8004678 <HAL_TIM_Base_MspInit+0xd0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d113      	bne.n	800465e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004636:	4b0d      	ldr	r3, [pc, #52]	@ (800466c <HAL_TIM_Base_MspInit+0xc4>)
 8004638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463a:	4a0c      	ldr	r2, [pc, #48]	@ (800466c <HAL_TIM_Base_MspInit+0xc4>)
 800463c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004640:	6613      	str	r3, [r2, #96]	@ 0x60
 8004642:	4b0a      	ldr	r3, [pc, #40]	@ (800466c <HAL_TIM_Base_MspInit+0xc4>)
 8004644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464a:	60bb      	str	r3, [r7, #8]
 800464c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800464e:	2200      	movs	r2, #0
 8004650:	2100      	movs	r1, #0
 8004652:	2019      	movs	r0, #25
 8004654:	f000 fb63 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004658:	2019      	movs	r0, #25
 800465a:	f000 fb7a 	bl	8004d52 <HAL_NVIC_EnableIRQ>
}
 800465e:	bf00      	nop
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40000c00 	.word	0x40000c00
 800466c:	40021000 	.word	0x40021000
 8004670:	40013400 	.word	0x40013400
 8004674:	40014000 	.word	0x40014000
 8004678:	40014400 	.word	0x40014400

0800467c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	@ 0x28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004684:	f107 0314 	add.w	r3, r7, #20
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	605a      	str	r2, [r3, #4]
 800468e:	609a      	str	r2, [r3, #8]
 8004690:	60da      	str	r2, [r3, #12]
 8004692:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a23      	ldr	r2, [pc, #140]	@ (8004728 <HAL_TIM_MspPostInit+0xac>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d11d      	bne.n	80046da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800469e:	4b23      	ldr	r3, [pc, #140]	@ (800472c <HAL_TIM_MspPostInit+0xb0>)
 80046a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a2:	4a22      	ldr	r2, [pc, #136]	@ (800472c <HAL_TIM_MspPostInit+0xb0>)
 80046a4:	f043 0304 	orr.w	r3, r3, #4
 80046a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046aa:	4b20      	ldr	r3, [pc, #128]	@ (800472c <HAL_TIM_MspPostInit+0xb0>)
 80046ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80046b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80046ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046bc:	2302      	movs	r3, #2
 80046be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c4:	2300      	movs	r3, #0
 80046c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80046c8:	2304      	movs	r3, #4
 80046ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046cc:	f107 0314 	add.w	r3, r7, #20
 80046d0:	4619      	mov	r1, r3
 80046d2:	4817      	ldr	r0, [pc, #92]	@ (8004730 <HAL_TIM_MspPostInit+0xb4>)
 80046d4:	f000 fe8a 	bl	80053ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80046d8:	e021      	b.n	800471e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a15      	ldr	r2, [pc, #84]	@ (8004734 <HAL_TIM_MspPostInit+0xb8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d11c      	bne.n	800471e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046e4:	4b11      	ldr	r3, [pc, #68]	@ (800472c <HAL_TIM_MspPostInit+0xb0>)
 80046e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046e8:	4a10      	ldr	r2, [pc, #64]	@ (800472c <HAL_TIM_MspPostInit+0xb0>)
 80046ea:	f043 0302 	orr.w	r3, r3, #2
 80046ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046f0:	4b0e      	ldr	r3, [pc, #56]	@ (800472c <HAL_TIM_MspPostInit+0xb0>)
 80046f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80046fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004702:	2302      	movs	r3, #2
 8004704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800470a:	2300      	movs	r3, #0
 800470c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800470e:	2301      	movs	r3, #1
 8004710:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004712:	f107 0314 	add.w	r3, r7, #20
 8004716:	4619      	mov	r1, r3
 8004718:	4807      	ldr	r0, [pc, #28]	@ (8004738 <HAL_TIM_MspPostInit+0xbc>)
 800471a:	f000 fe67 	bl	80053ec <HAL_GPIO_Init>
}
 800471e:	bf00      	nop
 8004720:	3728      	adds	r7, #40	@ 0x28
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40013400 	.word	0x40013400
 800472c:	40021000 	.word	0x40021000
 8004730:	48000800 	.word	0x48000800
 8004734:	40014000 	.word	0x40014000
 8004738:	48000400 	.word	0x48000400

0800473c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b09e      	sub	sp, #120	@ 0x78
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004744:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	605a      	str	r2, [r3, #4]
 800474e:	609a      	str	r2, [r3, #8]
 8004750:	60da      	str	r2, [r3, #12]
 8004752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004754:	f107 0310 	add.w	r3, r7, #16
 8004758:	2254      	movs	r2, #84	@ 0x54
 800475a:	2100      	movs	r1, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f006 fcc7 	bl	800b0f0 <memset>
  if(huart->Instance==USART2)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a4d      	ldr	r2, [pc, #308]	@ (800489c <HAL_UART_MspInit+0x160>)
 8004768:	4293      	cmp	r3, r2
 800476a:	f040 8092 	bne.w	8004892 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800476e:	2302      	movs	r3, #2
 8004770:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004772:	2300      	movs	r3, #0
 8004774:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004776:	f107 0310 	add.w	r3, r7, #16
 800477a:	4618      	mov	r0, r3
 800477c:	f001 fde2 	bl	8006344 <HAL_RCCEx_PeriphCLKConfig>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004786:	f7ff fde5 	bl	8004354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800478a:	4b45      	ldr	r3, [pc, #276]	@ (80048a0 <HAL_UART_MspInit+0x164>)
 800478c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478e:	4a44      	ldr	r2, [pc, #272]	@ (80048a0 <HAL_UART_MspInit+0x164>)
 8004790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004794:	6593      	str	r3, [r2, #88]	@ 0x58
 8004796:	4b42      	ldr	r3, [pc, #264]	@ (80048a0 <HAL_UART_MspInit+0x164>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047a2:	4b3f      	ldr	r3, [pc, #252]	@ (80048a0 <HAL_UART_MspInit+0x164>)
 80047a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a6:	4a3e      	ldr	r2, [pc, #248]	@ (80048a0 <HAL_UART_MspInit+0x164>)
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047ae:	4b3c      	ldr	r3, [pc, #240]	@ (80048a0 <HAL_UART_MspInit+0x164>)
 80047b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	60bb      	str	r3, [r7, #8]
 80047b8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80047ba:	230c      	movs	r3, #12
 80047bc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047be:	2302      	movs	r3, #2
 80047c0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c6:	2300      	movs	r3, #0
 80047c8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047ca:	2307      	movs	r3, #7
 80047cc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ce:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80047d2:	4619      	mov	r1, r3
 80047d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80047d8:	f000 fe08 	bl	80053ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80047dc:	4b31      	ldr	r3, [pc, #196]	@ (80048a4 <HAL_UART_MspInit+0x168>)
 80047de:	4a32      	ldr	r2, [pc, #200]	@ (80048a8 <HAL_UART_MspInit+0x16c>)
 80047e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80047e2:	4b30      	ldr	r3, [pc, #192]	@ (80048a4 <HAL_UART_MspInit+0x168>)
 80047e4:	221a      	movs	r2, #26
 80047e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047e8:	4b2e      	ldr	r3, [pc, #184]	@ (80048a4 <HAL_UART_MspInit+0x168>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ee:	4b2d      	ldr	r3, [pc, #180]	@ (80048a4 <HAL_UART_MspInit+0x168>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047f4:	4b2b      	ldr	r3, [pc, #172]	@ (80048a4 <HAL_UART_MspInit+0x168>)
 80047f6:	2280      	movs	r2, #128	@ 0x80
 80047f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047fa:	4b2a      	ldr	r3, [pc, #168]	@ (80048a4 <HAL_UART_MspInit+0x168>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004800:	4b28      	ldr	r3, [pc, #160]	@ (80048a4 <HAL_UART_MspInit+0x168>)
 8004802:	2200      	movs	r2, #0
 8004804:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004806:	4b27      	ldr	r3, [pc, #156]	@ (80048a4 <HAL_UART_MspInit+0x168>)
 8004808:	2200      	movs	r2, #0
 800480a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800480c:	4b25      	ldr	r3, [pc, #148]	@ (80048a4 <HAL_UART_MspInit+0x168>)
 800480e:	2200      	movs	r2, #0
 8004810:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004812:	4824      	ldr	r0, [pc, #144]	@ (80048a4 <HAL_UART_MspInit+0x168>)
 8004814:	f000 fab8 	bl	8004d88 <HAL_DMA_Init>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800481e:	f7ff fd99 	bl	8004354 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1f      	ldr	r2, [pc, #124]	@ (80048a4 <HAL_UART_MspInit+0x168>)
 8004826:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800482a:	4a1e      	ldr	r2, [pc, #120]	@ (80048a4 <HAL_UART_MspInit+0x168>)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004830:	4b1e      	ldr	r3, [pc, #120]	@ (80048ac <HAL_UART_MspInit+0x170>)
 8004832:	4a1f      	ldr	r2, [pc, #124]	@ (80048b0 <HAL_UART_MspInit+0x174>)
 8004834:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004836:	4b1d      	ldr	r3, [pc, #116]	@ (80048ac <HAL_UART_MspInit+0x170>)
 8004838:	221b      	movs	r2, #27
 800483a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800483c:	4b1b      	ldr	r3, [pc, #108]	@ (80048ac <HAL_UART_MspInit+0x170>)
 800483e:	2210      	movs	r2, #16
 8004840:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004842:	4b1a      	ldr	r3, [pc, #104]	@ (80048ac <HAL_UART_MspInit+0x170>)
 8004844:	2200      	movs	r2, #0
 8004846:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004848:	4b18      	ldr	r3, [pc, #96]	@ (80048ac <HAL_UART_MspInit+0x170>)
 800484a:	2280      	movs	r2, #128	@ 0x80
 800484c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800484e:	4b17      	ldr	r3, [pc, #92]	@ (80048ac <HAL_UART_MspInit+0x170>)
 8004850:	2200      	movs	r2, #0
 8004852:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004854:	4b15      	ldr	r3, [pc, #84]	@ (80048ac <HAL_UART_MspInit+0x170>)
 8004856:	2200      	movs	r2, #0
 8004858:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800485a:	4b14      	ldr	r3, [pc, #80]	@ (80048ac <HAL_UART_MspInit+0x170>)
 800485c:	2200      	movs	r2, #0
 800485e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004860:	4b12      	ldr	r3, [pc, #72]	@ (80048ac <HAL_UART_MspInit+0x170>)
 8004862:	2200      	movs	r2, #0
 8004864:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004866:	4811      	ldr	r0, [pc, #68]	@ (80048ac <HAL_UART_MspInit+0x170>)
 8004868:	f000 fa8e 	bl	8004d88 <HAL_DMA_Init>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8004872:	f7ff fd6f 	bl	8004354 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a0c      	ldr	r2, [pc, #48]	@ (80048ac <HAL_UART_MspInit+0x170>)
 800487a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800487c:	4a0b      	ldr	r2, [pc, #44]	@ (80048ac <HAL_UART_MspInit+0x170>)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004882:	2200      	movs	r2, #0
 8004884:	2100      	movs	r1, #0
 8004886:	2026      	movs	r0, #38	@ 0x26
 8004888:	f000 fa49 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800488c:	2026      	movs	r0, #38	@ 0x26
 800488e:	f000 fa60 	bl	8004d52 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004892:	bf00      	nop
 8004894:	3778      	adds	r7, #120	@ 0x78
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40004400 	.word	0x40004400
 80048a0:	40021000 	.word	0x40021000
 80048a4:	20000960 	.word	0x20000960
 80048a8:	40020008 	.word	0x40020008
 80048ac:	200009c0 	.word	0x200009c0
 80048b0:	4002001c 	.word	0x4002001c

080048b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80048b8:	bf00      	nop
 80048ba:	e7fd      	b.n	80048b8 <NMI_Handler+0x4>

080048bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048c0:	bf00      	nop
 80048c2:	e7fd      	b.n	80048c0 <HardFault_Handler+0x4>

080048c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048c8:	bf00      	nop
 80048ca:	e7fd      	b.n	80048c8 <MemManage_Handler+0x4>

080048cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048d0:	bf00      	nop
 80048d2:	e7fd      	b.n	80048d0 <BusFault_Handler+0x4>

080048d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048d8:	bf00      	nop
 80048da:	e7fd      	b.n	80048d8 <UsageFault_Handler+0x4>

080048dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048ea:	b480      	push	{r7}
 80048ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048fc:	bf00      	nop
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800490a:	f000 f90f 	bl	8004b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800490e:	bf00      	nop
 8004910:	bd80      	pop	{r7, pc}

08004912 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004916:	2001      	movs	r0, #1
 8004918:	f000 ff1a 	bl	8005750 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800491c:	bf00      	nop
 800491e:	bd80      	pop	{r7, pc}

08004920 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004924:	2004      	movs	r0, #4
 8004926:	f000 ff13 	bl	8005750 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}

0800492e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004932:	2008      	movs	r0, #8
 8004934:	f000 ff0c 	bl	8005750 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004938:	bf00      	nop
 800493a:	bd80      	pop	{r7, pc}

0800493c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004940:	4802      	ldr	r0, [pc, #8]	@ (800494c <DMA1_Channel1_IRQHandler+0x10>)
 8004942:	f000 fc04 	bl	800514e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004946:	bf00      	nop
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000960 	.word	0x20000960

08004950 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004954:	4802      	ldr	r0, [pc, #8]	@ (8004960 <DMA1_Channel2_IRQHandler+0x10>)
 8004956:	f000 fbfa 	bl	800514e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	200009c0 	.word	0x200009c0

08004964 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004968:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800496c:	f000 fef0 	bl	8005750 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004970:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004974:	f000 feec 	bl	8005750 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004978:	bf00      	nop
 800497a:	bd80      	pop	{r7, pc}

0800497c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004980:	4803      	ldr	r0, [pc, #12]	@ (8004990 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004982:	f002 fd99 	bl	80074b8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004986:	4803      	ldr	r0, [pc, #12]	@ (8004994 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004988:	f002 fd96 	bl	80074b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800498c:	bf00      	nop
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000234 	.word	0x20000234
 8004994:	200007c8 	.word	0x200007c8

08004998 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800499c:	4802      	ldr	r0, [pc, #8]	@ (80049a8 <TIM3_IRQHandler+0x10>)
 800499e:	f002 fd8b 	bl	80074b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	200003cc 	.word	0x200003cc

080049ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80049b0:	4802      	ldr	r0, [pc, #8]	@ (80049bc <TIM4_IRQHandler+0x10>)
 80049b2:	f002 fd81 	bl	80074b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80049b6:	bf00      	nop
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000498 	.word	0x20000498

080049c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80049c4:	4802      	ldr	r0, [pc, #8]	@ (80049d0 <USART2_IRQHandler+0x10>)
 80049c6:	f004 fe33 	bl	8009630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80049ca:	bf00      	nop
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000894 	.word	0x20000894

080049d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80049d8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80049dc:	f000 feb8 	bl	8005750 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80049e0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80049e4:	f000 feb4 	bl	8005750 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80049e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80049ec:	f000 feb0 	bl	8005750 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80049f0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80049f4:	f000 feac 	bl	8005750 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80049f8:	bf00      	nop
 80049fa:	bd80      	pop	{r7, pc}

080049fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004a00:	4802      	ldr	r0, [pc, #8]	@ (8004a0c <TIM5_IRQHandler+0x10>)
 8004a02:	f002 fd59 	bl	80074b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000564 	.word	0x20000564

08004a10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004a14:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <SystemInit+0x20>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1a:	4a05      	ldr	r2, [pc, #20]	@ (8004a30 <SystemInit+0x20>)
 8004a1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	e000ed00 	.word	0xe000ed00

08004a34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004a34:	480d      	ldr	r0, [pc, #52]	@ (8004a6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004a36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a38:	f7ff ffea 	bl	8004a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a3c:	480c      	ldr	r0, [pc, #48]	@ (8004a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8004a3e:	490d      	ldr	r1, [pc, #52]	@ (8004a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a40:	4a0d      	ldr	r2, [pc, #52]	@ (8004a78 <LoopForever+0xe>)
  movs r3, #0
 8004a42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004a44:	e002      	b.n	8004a4c <LoopCopyDataInit>

08004a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a4a:	3304      	adds	r3, #4

08004a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a50:	d3f9      	bcc.n	8004a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a52:	4a0a      	ldr	r2, [pc, #40]	@ (8004a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a54:	4c0a      	ldr	r4, [pc, #40]	@ (8004a80 <LoopForever+0x16>)
  movs r3, #0
 8004a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a58:	e001      	b.n	8004a5e <LoopFillZerobss>

08004a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a5c:	3204      	adds	r2, #4

08004a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a60:	d3fb      	bcc.n	8004a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a62:	f006 fb4d 	bl	800b100 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a66:	f7fc ffef 	bl	8001a48 <main>

08004a6a <LoopForever>:

LoopForever:
    b LoopForever
 8004a6a:	e7fe      	b.n	8004a6a <LoopForever>
  ldr   r0, =_estack
 8004a6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a74:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8004a78:	0800c084 	.word	0x0800c084
  ldr r2, =_sbss
 8004a7c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004a80:	2000124c 	.word	0x2000124c

08004a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a84:	e7fe      	b.n	8004a84 <ADC1_2_IRQHandler>

08004a86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a90:	2003      	movs	r0, #3
 8004a92:	f000 f939 	bl	8004d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a96:	2000      	movs	r0, #0
 8004a98:	f000 f80e 	bl	8004ab8 <HAL_InitTick>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	71fb      	strb	r3, [r7, #7]
 8004aa6:	e001      	b.n	8004aac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004aa8:	f7ff fc5a 	bl	8004360 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004aac:	79fb      	ldrb	r3, [r7, #7]

}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004ac4:	4b16      	ldr	r3, [pc, #88]	@ (8004b20 <HAL_InitTick+0x68>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d022      	beq.n	8004b12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004acc:	4b15      	ldr	r3, [pc, #84]	@ (8004b24 <HAL_InitTick+0x6c>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4b13      	ldr	r3, [pc, #76]	@ (8004b20 <HAL_InitTick+0x68>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 f944 	bl	8004d6e <HAL_SYSTICK_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10f      	bne.n	8004b0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b0f      	cmp	r3, #15
 8004af0:	d809      	bhi.n	8004b06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004af2:	2200      	movs	r2, #0
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	f04f 30ff 	mov.w	r0, #4294967295
 8004afa:	f000 f910 	bl	8004d1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004afe:	4a0a      	ldr	r2, [pc, #40]	@ (8004b28 <HAL_InitTick+0x70>)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	e007      	b.n	8004b16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
 8004b0a:	e004      	b.n	8004b16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	73fb      	strb	r3, [r7, #15]
 8004b10:	e001      	b.n	8004b16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20000208 	.word	0x20000208
 8004b24:	20000200 	.word	0x20000200
 8004b28:	20000204 	.word	0x20000204

08004b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b30:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_IncTick+0x1c>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	4b05      	ldr	r3, [pc, #20]	@ (8004b4c <HAL_IncTick+0x20>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4413      	add	r3, r2
 8004b3a:	4a03      	ldr	r2, [pc, #12]	@ (8004b48 <HAL_IncTick+0x1c>)
 8004b3c:	6013      	str	r3, [r2, #0]
}
 8004b3e:	bf00      	nop
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	20001248 	.word	0x20001248
 8004b4c:	20000208 	.word	0x20000208

08004b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  return uwTick;
 8004b54:	4b03      	ldr	r3, [pc, #12]	@ (8004b64 <HAL_GetTick+0x14>)
 8004b56:	681b      	ldr	r3, [r3, #0]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20001248 	.word	0x20001248

08004b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b78:	4b0c      	ldr	r3, [pc, #48]	@ (8004bac <__NVIC_SetPriorityGrouping+0x44>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b84:	4013      	ands	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b9a:	4a04      	ldr	r2, [pc, #16]	@ (8004bac <__NVIC_SetPriorityGrouping+0x44>)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	60d3      	str	r3, [r2, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb4:	4b04      	ldr	r3, [pc, #16]	@ (8004bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	f003 0307 	and.w	r3, r3, #7
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	db0b      	blt.n	8004bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	f003 021f 	and.w	r2, r3, #31
 8004be4:	4907      	ldr	r1, [pc, #28]	@ (8004c04 <__NVIC_EnableIRQ+0x38>)
 8004be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	2001      	movs	r0, #1
 8004bee:	fa00 f202 	lsl.w	r2, r0, r2
 8004bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	e000e100 	.word	0xe000e100

08004c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	6039      	str	r1, [r7, #0]
 8004c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	db0a      	blt.n	8004c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	490c      	ldr	r1, [pc, #48]	@ (8004c54 <__NVIC_SetPriority+0x4c>)
 8004c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c26:	0112      	lsls	r2, r2, #4
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c30:	e00a      	b.n	8004c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	4908      	ldr	r1, [pc, #32]	@ (8004c58 <__NVIC_SetPriority+0x50>)
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	3b04      	subs	r3, #4
 8004c40:	0112      	lsls	r2, r2, #4
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	440b      	add	r3, r1
 8004c46:	761a      	strb	r2, [r3, #24]
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	e000e100 	.word	0xe000e100
 8004c58:	e000ed00 	.word	0xe000ed00

08004c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b089      	sub	sp, #36	@ 0x24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f1c3 0307 	rsb	r3, r3, #7
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	bf28      	it	cs
 8004c7a:	2304      	movcs	r3, #4
 8004c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3304      	adds	r3, #4
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d902      	bls.n	8004c8c <NVIC_EncodePriority+0x30>
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3b03      	subs	r3, #3
 8004c8a:	e000      	b.n	8004c8e <NVIC_EncodePriority+0x32>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c90:	f04f 32ff 	mov.w	r2, #4294967295
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	401a      	ands	r2, r3
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cae:	43d9      	mvns	r1, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb4:	4313      	orrs	r3, r2
         );
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3724      	adds	r7, #36	@ 0x24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
	...

08004cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cd4:	d301      	bcc.n	8004cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e00f      	b.n	8004cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cda:	4a0a      	ldr	r2, [pc, #40]	@ (8004d04 <SysTick_Config+0x40>)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ce2:	210f      	movs	r1, #15
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	f7ff ff8e 	bl	8004c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cec:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <SysTick_Config+0x40>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cf2:	4b04      	ldr	r3, [pc, #16]	@ (8004d04 <SysTick_Config+0x40>)
 8004cf4:	2207      	movs	r2, #7
 8004cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	e000e010 	.word	0xe000e010

08004d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff ff29 	bl	8004b68 <__NVIC_SetPriorityGrouping>
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	4603      	mov	r3, r0
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
 8004d2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d2c:	f7ff ff40 	bl	8004bb0 <__NVIC_GetPriorityGrouping>
 8004d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	6978      	ldr	r0, [r7, #20]
 8004d38:	f7ff ff90 	bl	8004c5c <NVIC_EncodePriority>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d42:	4611      	mov	r1, r2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff ff5f 	bl	8004c08 <__NVIC_SetPriority>
}
 8004d4a:	bf00      	nop
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	4603      	mov	r3, r0
 8004d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff ff33 	bl	8004bcc <__NVIC_EnableIRQ>
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff ffa4 	bl	8004cc4 <SysTick_Config>
 8004d7c:	4603      	mov	r3, r0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e08d      	b.n	8004eb6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4b47      	ldr	r3, [pc, #284]	@ (8004ec0 <HAL_DMA_Init+0x138>)
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d80f      	bhi.n	8004dc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	4b45      	ldr	r3, [pc, #276]	@ (8004ec4 <HAL_DMA_Init+0x13c>)
 8004dae:	4413      	add	r3, r2
 8004db0:	4a45      	ldr	r2, [pc, #276]	@ (8004ec8 <HAL_DMA_Init+0x140>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	091b      	lsrs	r3, r3, #4
 8004db8:	009a      	lsls	r2, r3, #2
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a42      	ldr	r2, [pc, #264]	@ (8004ecc <HAL_DMA_Init+0x144>)
 8004dc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8004dc4:	e00e      	b.n	8004de4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b40      	ldr	r3, [pc, #256]	@ (8004ed0 <HAL_DMA_Init+0x148>)
 8004dce:	4413      	add	r3, r2
 8004dd0:	4a3d      	ldr	r2, [pc, #244]	@ (8004ec8 <HAL_DMA_Init+0x140>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	091b      	lsrs	r3, r3, #4
 8004dd8:	009a      	lsls	r2, r3, #2
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ed4 <HAL_DMA_Init+0x14c>)
 8004de2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fa76 	bl	8005328 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e44:	d102      	bne.n	8004e4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e60:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d010      	beq.n	8004e8c <HAL_DMA_Init+0x104>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d80c      	bhi.n	8004e8c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fa96 	bl	80053a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	e008      	b.n	8004e9e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40020407 	.word	0x40020407
 8004ec4:	bffdfff8 	.word	0xbffdfff8
 8004ec8:	cccccccd 	.word	0xcccccccd
 8004ecc:	40020000 	.word	0x40020000
 8004ed0:	bffdfbf8 	.word	0xbffdfbf8
 8004ed4:	40020400 	.word	0x40020400

08004ed8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_DMA_Start_IT+0x20>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e066      	b.n	8004fc6 <HAL_DMA_Start_IT+0xee>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d155      	bne.n	8004fb8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0201 	bic.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	68b9      	ldr	r1, [r7, #8]
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f9bb 	bl	80052ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 020e 	orr.w	r2, r2, #14
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	e00f      	b.n	8004f70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0204 	bic.w	r2, r2, #4
 8004f5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 020a 	orr.w	r2, r2, #10
 8004f6e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d007      	beq.n	8004f8e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f8c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fa4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0201 	orr.w	r2, r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	e005      	b.n	8004fc4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d005      	beq.n	8004ff2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2204      	movs	r2, #4
 8004fea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
 8004ff0:	e037      	b.n	8005062 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 020e 	bic.w	r2, r2, #14
 8005000:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800500c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005010:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0201 	bic.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005026:	f003 021f 	and.w	r2, r3, #31
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	2101      	movs	r1, #1
 8005030:	fa01 f202 	lsl.w	r2, r1, r2
 8005034:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800503e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00c      	beq.n	8005062 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005052:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005056:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005060:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005072:	7bfb      	ldrb	r3, [r7, #15]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d00d      	beq.n	80050b4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2204      	movs	r2, #4
 800509c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	73fb      	strb	r3, [r7, #15]
 80050b2:	e047      	b.n	8005144 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 020e 	bic.w	r2, r2, #14
 80050c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0201 	bic.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e8:	f003 021f 	and.w	r2, r3, #31
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f0:	2101      	movs	r1, #1
 80050f2:	fa01 f202 	lsl.w	r2, r1, r2
 80050f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005100:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00c      	beq.n	8005124 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005114:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005118:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005122:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	4798      	blx	r3
    }
  }
  return status;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	2204      	movs	r2, #4
 8005170:	409a      	lsls	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4013      	ands	r3, r2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d026      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x7a>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	d021      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b00      	cmp	r3, #0
 8005190:	d107      	bne.n	80051a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0204 	bic.w	r2, r2, #4
 80051a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a6:	f003 021f 	and.w	r2, r3, #31
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	2104      	movs	r1, #4
 80051b0:	fa01 f202 	lsl.w	r2, r1, r2
 80051b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d071      	beq.n	80052a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80051c6:	e06c      	b.n	80052a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051cc:	f003 031f 	and.w	r3, r3, #31
 80051d0:	2202      	movs	r2, #2
 80051d2:	409a      	lsls	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4013      	ands	r3, r2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d02e      	beq.n	800523a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d029      	beq.n	800523a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 020a 	bic.w	r2, r2, #10
 8005202:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005210:	f003 021f 	and.w	r2, r3, #31
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005218:	2102      	movs	r1, #2
 800521a:	fa01 f202 	lsl.w	r2, r1, r2
 800521e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d038      	beq.n	80052a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005238:	e033      	b.n	80052a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	2208      	movs	r2, #8
 8005244:	409a      	lsls	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4013      	ands	r3, r2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d02a      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d025      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 020e 	bic.w	r2, r2, #14
 8005266:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526c:	f003 021f 	and.w	r2, r3, #31
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005274:	2101      	movs	r1, #1
 8005276:	fa01 f202 	lsl.w	r2, r1, r2
 800527a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005296:	2b00      	cmp	r3, #0
 8005298:	d004      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
}
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d004      	beq.n	80052d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80052d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052da:	f003 021f 	and.w	r2, r3, #31
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e2:	2101      	movs	r1, #1
 80052e4:	fa01 f202 	lsl.w	r2, r1, r2
 80052e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d108      	bne.n	800530c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800530a:	e007      	b.n	800531c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	60da      	str	r2, [r3, #12]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	461a      	mov	r2, r3
 8005336:	4b16      	ldr	r3, [pc, #88]	@ (8005390 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005338:	429a      	cmp	r2, r3
 800533a:	d802      	bhi.n	8005342 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800533c:	4b15      	ldr	r3, [pc, #84]	@ (8005394 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	e001      	b.n	8005346 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005342:	4b15      	ldr	r3, [pc, #84]	@ (8005398 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005344:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	3b08      	subs	r3, #8
 8005352:	4a12      	ldr	r2, [pc, #72]	@ (800539c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005354:	fba2 2303 	umull	r2, r3, r2, r3
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005360:	089b      	lsrs	r3, r3, #2
 8005362:	009a      	lsls	r2, r3, #2
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	4413      	add	r3, r2
 8005368:	461a      	mov	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a0b      	ldr	r2, [pc, #44]	@ (80053a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005372:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	2201      	movs	r2, #1
 800537c:	409a      	lsls	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40020407 	.word	0x40020407
 8005394:	40020800 	.word	0x40020800
 8005398:	40020820 	.word	0x40020820
 800539c:	cccccccd 	.word	0xcccccccd
 80053a0:	40020880 	.word	0x40020880

080053a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4b0b      	ldr	r3, [pc, #44]	@ (80053e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	461a      	mov	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a08      	ldr	r2, [pc, #32]	@ (80053e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80053c6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	2201      	movs	r2, #1
 80053d2:	409a      	lsls	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	1000823f 	.word	0x1000823f
 80053e8:	40020940 	.word	0x40020940

080053ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053fa:	e15a      	b.n	80056b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	2101      	movs	r1, #1
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	fa01 f303 	lsl.w	r3, r1, r3
 8005408:	4013      	ands	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 814c 	beq.w	80056ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 0303 	and.w	r3, r3, #3
 800541c:	2b01      	cmp	r3, #1
 800541e:	d005      	beq.n	800542c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005428:	2b02      	cmp	r3, #2
 800542a:	d130      	bne.n	800548e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	2203      	movs	r2, #3
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	43db      	mvns	r3, r3
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4013      	ands	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005462:	2201      	movs	r2, #1
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	43db      	mvns	r3, r3
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4013      	ands	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	f003 0201 	and.w	r2, r3, #1
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	2b03      	cmp	r3, #3
 8005498:	d017      	beq.n	80054ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	2203      	movs	r2, #3
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	43db      	mvns	r3, r3
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4013      	ands	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d123      	bne.n	800551e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	08da      	lsrs	r2, r3, #3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3208      	adds	r2, #8
 80054de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	220f      	movs	r2, #15
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	43db      	mvns	r3, r3
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4013      	ands	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	08da      	lsrs	r2, r3, #3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3208      	adds	r2, #8
 8005518:	6939      	ldr	r1, [r7, #16]
 800551a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	2203      	movs	r2, #3
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43db      	mvns	r3, r3
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4013      	ands	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f003 0203 	and.w	r2, r3, #3
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 80a6 	beq.w	80056ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005560:	4b5b      	ldr	r3, [pc, #364]	@ (80056d0 <HAL_GPIO_Init+0x2e4>)
 8005562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005564:	4a5a      	ldr	r2, [pc, #360]	@ (80056d0 <HAL_GPIO_Init+0x2e4>)
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	6613      	str	r3, [r2, #96]	@ 0x60
 800556c:	4b58      	ldr	r3, [pc, #352]	@ (80056d0 <HAL_GPIO_Init+0x2e4>)
 800556e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005578:	4a56      	ldr	r2, [pc, #344]	@ (80056d4 <HAL_GPIO_Init+0x2e8>)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	089b      	lsrs	r3, r3, #2
 800557e:	3302      	adds	r3, #2
 8005580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	220f      	movs	r2, #15
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	43db      	mvns	r3, r3
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4013      	ands	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80055a2:	d01f      	beq.n	80055e4 <HAL_GPIO_Init+0x1f8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a4c      	ldr	r2, [pc, #304]	@ (80056d8 <HAL_GPIO_Init+0x2ec>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d019      	beq.n	80055e0 <HAL_GPIO_Init+0x1f4>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a4b      	ldr	r2, [pc, #300]	@ (80056dc <HAL_GPIO_Init+0x2f0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d013      	beq.n	80055dc <HAL_GPIO_Init+0x1f0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a4a      	ldr	r2, [pc, #296]	@ (80056e0 <HAL_GPIO_Init+0x2f4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d00d      	beq.n	80055d8 <HAL_GPIO_Init+0x1ec>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a49      	ldr	r2, [pc, #292]	@ (80056e4 <HAL_GPIO_Init+0x2f8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d007      	beq.n	80055d4 <HAL_GPIO_Init+0x1e8>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a48      	ldr	r2, [pc, #288]	@ (80056e8 <HAL_GPIO_Init+0x2fc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d101      	bne.n	80055d0 <HAL_GPIO_Init+0x1e4>
 80055cc:	2305      	movs	r3, #5
 80055ce:	e00a      	b.n	80055e6 <HAL_GPIO_Init+0x1fa>
 80055d0:	2306      	movs	r3, #6
 80055d2:	e008      	b.n	80055e6 <HAL_GPIO_Init+0x1fa>
 80055d4:	2304      	movs	r3, #4
 80055d6:	e006      	b.n	80055e6 <HAL_GPIO_Init+0x1fa>
 80055d8:	2303      	movs	r3, #3
 80055da:	e004      	b.n	80055e6 <HAL_GPIO_Init+0x1fa>
 80055dc:	2302      	movs	r3, #2
 80055de:	e002      	b.n	80055e6 <HAL_GPIO_Init+0x1fa>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <HAL_GPIO_Init+0x1fa>
 80055e4:	2300      	movs	r3, #0
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	f002 0203 	and.w	r2, r2, #3
 80055ec:	0092      	lsls	r2, r2, #2
 80055ee:	4093      	lsls	r3, r2
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055f6:	4937      	ldr	r1, [pc, #220]	@ (80056d4 <HAL_GPIO_Init+0x2e8>)
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	089b      	lsrs	r3, r3, #2
 80055fc:	3302      	adds	r3, #2
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005604:	4b39      	ldr	r3, [pc, #228]	@ (80056ec <HAL_GPIO_Init+0x300>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	43db      	mvns	r3, r3
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4013      	ands	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005628:	4a30      	ldr	r2, [pc, #192]	@ (80056ec <HAL_GPIO_Init+0x300>)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800562e:	4b2f      	ldr	r3, [pc, #188]	@ (80056ec <HAL_GPIO_Init+0x300>)
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	43db      	mvns	r3, r3
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4013      	ands	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005652:	4a26      	ldr	r2, [pc, #152]	@ (80056ec <HAL_GPIO_Init+0x300>)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005658:	4b24      	ldr	r3, [pc, #144]	@ (80056ec <HAL_GPIO_Init+0x300>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	43db      	mvns	r3, r3
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4013      	ands	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800567c:	4a1b      	ldr	r2, [pc, #108]	@ (80056ec <HAL_GPIO_Init+0x300>)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005682:	4b1a      	ldr	r3, [pc, #104]	@ (80056ec <HAL_GPIO_Init+0x300>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	43db      	mvns	r3, r3
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4013      	ands	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056a6:	4a11      	ldr	r2, [pc, #68]	@ (80056ec <HAL_GPIO_Init+0x300>)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	3301      	adds	r3, #1
 80056b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f47f ae9d 	bne.w	80053fc <HAL_GPIO_Init+0x10>
  }
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	40021000 	.word	0x40021000
 80056d4:	40010000 	.word	0x40010000
 80056d8:	48000400 	.word	0x48000400
 80056dc:	48000800 	.word	0x48000800
 80056e0:	48000c00 	.word	0x48000c00
 80056e4:	48001000 	.word	0x48001000
 80056e8:	48001400 	.word	0x48001400
 80056ec:	40010400 	.word	0x40010400

080056f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	887b      	ldrh	r3, [r7, #2]
 8005702:	4013      	ands	r3, r2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
 800570c:	e001      	b.n	8005712 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800570e:	2300      	movs	r3, #0
 8005710:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005712:	7bfb      	ldrb	r3, [r7, #15]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	807b      	strh	r3, [r7, #2]
 800572c:	4613      	mov	r3, r2
 800572e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005730:	787b      	ldrb	r3, [r7, #1]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005736:	887a      	ldrh	r2, [r7, #2]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800573c:	e002      	b.n	8005744 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800573e:	887a      	ldrh	r2, [r7, #2]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	4603      	mov	r3, r0
 8005758:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800575a:	4b08      	ldr	r3, [pc, #32]	@ (800577c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800575c:	695a      	ldr	r2, [r3, #20]
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	4013      	ands	r3, r2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d006      	beq.n	8005774 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005766:	4a05      	ldr	r2, [pc, #20]	@ (800577c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800576c:	88fb      	ldrh	r3, [r7, #6]
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe f9c6 	bl	8003b00 <HAL_GPIO_EXTI_Callback>
  }
}
 8005774:	bf00      	nop
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40010400 	.word	0x40010400

08005780 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d141      	bne.n	8005812 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800578e:	4b4b      	ldr	r3, [pc, #300]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800579a:	d131      	bne.n	8005800 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800579c:	4b47      	ldr	r3, [pc, #284]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800579e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057a2:	4a46      	ldr	r2, [pc, #280]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057ac:	4b43      	ldr	r3, [pc, #268]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057b4:	4a41      	ldr	r2, [pc, #260]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057bc:	4b40      	ldr	r3, [pc, #256]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2232      	movs	r2, #50	@ 0x32
 80057c2:	fb02 f303 	mul.w	r3, r2, r3
 80057c6:	4a3f      	ldr	r2, [pc, #252]	@ (80058c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057c8:	fba2 2303 	umull	r2, r3, r2, r3
 80057cc:	0c9b      	lsrs	r3, r3, #18
 80057ce:	3301      	adds	r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057d2:	e002      	b.n	80057da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057da:	4b38      	ldr	r3, [pc, #224]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057e6:	d102      	bne.n	80057ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f2      	bne.n	80057d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057ee:	4b33      	ldr	r3, [pc, #204]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057fa:	d158      	bne.n	80058ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e057      	b.n	80058b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005800:	4b2e      	ldr	r3, [pc, #184]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005806:	4a2d      	ldr	r2, [pc, #180]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800580c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005810:	e04d      	b.n	80058ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005818:	d141      	bne.n	800589e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800581a:	4b28      	ldr	r3, [pc, #160]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005826:	d131      	bne.n	800588c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005828:	4b24      	ldr	r3, [pc, #144]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800582e:	4a23      	ldr	r2, [pc, #140]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005834:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005838:	4b20      	ldr	r3, [pc, #128]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005840:	4a1e      	ldr	r2, [pc, #120]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005842:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005846:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005848:	4b1d      	ldr	r3, [pc, #116]	@ (80058c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2232      	movs	r2, #50	@ 0x32
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	4a1c      	ldr	r2, [pc, #112]	@ (80058c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005854:	fba2 2303 	umull	r2, r3, r2, r3
 8005858:	0c9b      	lsrs	r3, r3, #18
 800585a:	3301      	adds	r3, #1
 800585c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800585e:	e002      	b.n	8005866 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3b01      	subs	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005866:	4b15      	ldr	r3, [pc, #84]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800586e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005872:	d102      	bne.n	800587a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f2      	bne.n	8005860 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800587a:	4b10      	ldr	r3, [pc, #64]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005886:	d112      	bne.n	80058ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e011      	b.n	80058b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800588c:	4b0b      	ldr	r3, [pc, #44]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800588e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005892:	4a0a      	ldr	r2, [pc, #40]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005898:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800589c:	e007      	b.n	80058ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800589e:	4b07      	ldr	r3, [pc, #28]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058a6:	4a05      	ldr	r2, [pc, #20]	@ (80058bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	40007000 	.word	0x40007000
 80058c0:	20000200 	.word	0x20000200
 80058c4:	431bde83 	.word	0x431bde83

080058c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80058cc:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	4a04      	ldr	r2, [pc, #16]	@ (80058e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058d6:	6093      	str	r3, [r2, #8]
}
 80058d8:	bf00      	nop
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	40007000 	.word	0x40007000

080058e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e2fe      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d075      	beq.n	80059f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005906:	4b97      	ldr	r3, [pc, #604]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 030c 	and.w	r3, r3, #12
 800590e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005910:	4b94      	ldr	r3, [pc, #592]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0303 	and.w	r3, r3, #3
 8005918:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b0c      	cmp	r3, #12
 800591e:	d102      	bne.n	8005926 <HAL_RCC_OscConfig+0x3e>
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2b03      	cmp	r3, #3
 8005924:	d002      	beq.n	800592c <HAL_RCC_OscConfig+0x44>
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	2b08      	cmp	r3, #8
 800592a:	d10b      	bne.n	8005944 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592c:	4b8d      	ldr	r3, [pc, #564]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d05b      	beq.n	80059f0 <HAL_RCC_OscConfig+0x108>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d157      	bne.n	80059f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e2d9      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800594c:	d106      	bne.n	800595c <HAL_RCC_OscConfig+0x74>
 800594e:	4b85      	ldr	r3, [pc, #532]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a84      	ldr	r2, [pc, #528]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	e01d      	b.n	8005998 <HAL_RCC_OscConfig+0xb0>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005964:	d10c      	bne.n	8005980 <HAL_RCC_OscConfig+0x98>
 8005966:	4b7f      	ldr	r3, [pc, #508]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a7e      	ldr	r2, [pc, #504]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 800596c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	4b7c      	ldr	r3, [pc, #496]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a7b      	ldr	r2, [pc, #492]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	e00b      	b.n	8005998 <HAL_RCC_OscConfig+0xb0>
 8005980:	4b78      	ldr	r3, [pc, #480]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a77      	ldr	r2, [pc, #476]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	4b75      	ldr	r3, [pc, #468]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a74      	ldr	r2, [pc, #464]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d013      	beq.n	80059c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a0:	f7ff f8d6 	bl	8004b50 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059a8:	f7ff f8d2 	bl	8004b50 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b64      	cmp	r3, #100	@ 0x64
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e29e      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0xc0>
 80059c6:	e014      	b.n	80059f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c8:	f7ff f8c2 	bl	8004b50 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d0:	f7ff f8be 	bl	8004b50 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b64      	cmp	r3, #100	@ 0x64
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e28a      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059e2:	4b60      	ldr	r3, [pc, #384]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1f0      	bne.n	80059d0 <HAL_RCC_OscConfig+0xe8>
 80059ee:	e000      	b.n	80059f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d075      	beq.n	8005aea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059fe:	4b59      	ldr	r3, [pc, #356]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a08:	4b56      	ldr	r3, [pc, #344]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	2b0c      	cmp	r3, #12
 8005a16:	d102      	bne.n	8005a1e <HAL_RCC_OscConfig+0x136>
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d002      	beq.n	8005a24 <HAL_RCC_OscConfig+0x13c>
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d11f      	bne.n	8005a64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a24:	4b4f      	ldr	r3, [pc, #316]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <HAL_RCC_OscConfig+0x154>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e25d      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a3c:	4b49      	ldr	r3, [pc, #292]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	061b      	lsls	r3, r3, #24
 8005a4a:	4946      	ldr	r1, [pc, #280]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a50:	4b45      	ldr	r3, [pc, #276]	@ (8005b68 <HAL_RCC_OscConfig+0x280>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff f82f 	bl	8004ab8 <HAL_InitTick>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d043      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e249      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d023      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a3c      	ldr	r2, [pc, #240]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a78:	f7ff f86a 	bl	8004b50 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a80:	f7ff f866 	bl	8004b50 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e232      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a92:	4b34      	ldr	r3, [pc, #208]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0f0      	beq.n	8005a80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a9e:	4b31      	ldr	r3, [pc, #196]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	061b      	lsls	r3, r3, #24
 8005aac:	492d      	ldr	r1, [pc, #180]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	604b      	str	r3, [r1, #4]
 8005ab2:	e01a      	b.n	8005aea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a2a      	ldr	r2, [pc, #168]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005aba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac0:	f7ff f846 	bl	8004b50 <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ac8:	f7ff f842 	bl	8004b50 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e20e      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ada:	4b22      	ldr	r3, [pc, #136]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f0      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x1e0>
 8005ae6:	e000      	b.n	8005aea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ae8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d041      	beq.n	8005b7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d01c      	beq.n	8005b38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005afe:	4b19      	ldr	r3, [pc, #100]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b04:	4a17      	ldr	r2, [pc, #92]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0e:	f7ff f81f 	bl	8004b50 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b14:	e008      	b.n	8005b28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b16:	f7ff f81b 	bl	8004b50 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e1e7      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b28:	4b0e      	ldr	r3, [pc, #56]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0ef      	beq.n	8005b16 <HAL_RCC_OscConfig+0x22e>
 8005b36:	e020      	b.n	8005b7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b38:	4b0a      	ldr	r3, [pc, #40]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b3e:	4a09      	ldr	r2, [pc, #36]	@ (8005b64 <HAL_RCC_OscConfig+0x27c>)
 8005b40:	f023 0301 	bic.w	r3, r3, #1
 8005b44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b48:	f7ff f802 	bl	8004b50 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b4e:	e00d      	b.n	8005b6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b50:	f7fe fffe 	bl	8004b50 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d906      	bls.n	8005b6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e1ca      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
 8005b62:	bf00      	nop
 8005b64:	40021000 	.word	0x40021000
 8005b68:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b6c:	4b8c      	ldr	r3, [pc, #560]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1ea      	bne.n	8005b50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 80a6 	beq.w	8005cd4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b8c:	4b84      	ldr	r3, [pc, #528]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <HAL_RCC_OscConfig+0x2b4>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <HAL_RCC_OscConfig+0x2b6>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00d      	beq.n	8005bbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba2:	4b7f      	ldr	r3, [pc, #508]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba6:	4a7e      	ldr	r2, [pc, #504]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bac:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bae:	4b7c      	ldr	r3, [pc, #496]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bbe:	4b79      	ldr	r3, [pc, #484]	@ (8005da4 <HAL_RCC_OscConfig+0x4bc>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d118      	bne.n	8005bfc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bca:	4b76      	ldr	r3, [pc, #472]	@ (8005da4 <HAL_RCC_OscConfig+0x4bc>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a75      	ldr	r2, [pc, #468]	@ (8005da4 <HAL_RCC_OscConfig+0x4bc>)
 8005bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bd6:	f7fe ffbb 	bl	8004b50 <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bdc:	e008      	b.n	8005bf0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bde:	f7fe ffb7 	bl	8004b50 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e183      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8005da4 <HAL_RCC_OscConfig+0x4bc>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0f0      	beq.n	8005bde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d108      	bne.n	8005c16 <HAL_RCC_OscConfig+0x32e>
 8005c04:	4b66      	ldr	r3, [pc, #408]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0a:	4a65      	ldr	r2, [pc, #404]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c14:	e024      	b.n	8005c60 <HAL_RCC_OscConfig+0x378>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b05      	cmp	r3, #5
 8005c1c:	d110      	bne.n	8005c40 <HAL_RCC_OscConfig+0x358>
 8005c1e:	4b60      	ldr	r3, [pc, #384]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c24:	4a5e      	ldr	r2, [pc, #376]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005c26:	f043 0304 	orr.w	r3, r3, #4
 8005c2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c2e:	4b5c      	ldr	r3, [pc, #368]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c34:	4a5a      	ldr	r2, [pc, #360]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005c36:	f043 0301 	orr.w	r3, r3, #1
 8005c3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c3e:	e00f      	b.n	8005c60 <HAL_RCC_OscConfig+0x378>
 8005c40:	4b57      	ldr	r3, [pc, #348]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c46:	4a56      	ldr	r2, [pc, #344]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005c48:	f023 0301 	bic.w	r3, r3, #1
 8005c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c50:	4b53      	ldr	r3, [pc, #332]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c56:	4a52      	ldr	r2, [pc, #328]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005c58:	f023 0304 	bic.w	r3, r3, #4
 8005c5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d016      	beq.n	8005c96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c68:	f7fe ff72 	bl	8004b50 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c6e:	e00a      	b.n	8005c86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c70:	f7fe ff6e 	bl	8004b50 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e138      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c86:	4b46      	ldr	r3, [pc, #280]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0ed      	beq.n	8005c70 <HAL_RCC_OscConfig+0x388>
 8005c94:	e015      	b.n	8005cc2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c96:	f7fe ff5b 	bl	8004b50 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c9c:	e00a      	b.n	8005cb4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c9e:	f7fe ff57 	bl	8004b50 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e121      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1ed      	bne.n	8005c9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cc2:	7ffb      	ldrb	r3, [r7, #31]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d105      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cc8:	4b35      	ldr	r3, [pc, #212]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ccc:	4a34      	ldr	r2, [pc, #208]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005cce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cd2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d03c      	beq.n	8005d5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01c      	beq.n	8005d22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cee:	4a2c      	ldr	r2, [pc, #176]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005cf0:	f043 0301 	orr.w	r3, r3, #1
 8005cf4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf8:	f7fe ff2a 	bl	8004b50 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d00:	f7fe ff26 	bl	8004b50 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e0f2      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d12:	4b23      	ldr	r3, [pc, #140]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0ef      	beq.n	8005d00 <HAL_RCC_OscConfig+0x418>
 8005d20:	e01b      	b.n	8005d5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d22:	4b1f      	ldr	r3, [pc, #124]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d28:	4a1d      	ldr	r2, [pc, #116]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d32:	f7fe ff0d 	bl	8004b50 <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d38:	e008      	b.n	8005d4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d3a:	f7fe ff09 	bl	8004b50 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e0d5      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d4c:	4b14      	ldr	r3, [pc, #80]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1ef      	bne.n	8005d3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 80c9 	beq.w	8005ef6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d64:	4b0e      	ldr	r3, [pc, #56]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 030c 	and.w	r3, r3, #12
 8005d6c:	2b0c      	cmp	r3, #12
 8005d6e:	f000 8083 	beq.w	8005e78 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d15e      	bne.n	8005e38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d7a:	4b09      	ldr	r3, [pc, #36]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a08      	ldr	r2, [pc, #32]	@ (8005da0 <HAL_RCC_OscConfig+0x4b8>)
 8005d80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d86:	f7fe fee3 	bl	8004b50 <HAL_GetTick>
 8005d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d8c:	e00c      	b.n	8005da8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d8e:	f7fe fedf 	bl	8004b50 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d905      	bls.n	8005da8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e0ab      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
 8005da0:	40021000 	.word	0x40021000
 8005da4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005da8:	4b55      	ldr	r3, [pc, #340]	@ (8005f00 <HAL_RCC_OscConfig+0x618>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1ec      	bne.n	8005d8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005db4:	4b52      	ldr	r3, [pc, #328]	@ (8005f00 <HAL_RCC_OscConfig+0x618>)
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	4b52      	ldr	r3, [pc, #328]	@ (8005f04 <HAL_RCC_OscConfig+0x61c>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6a11      	ldr	r1, [r2, #32]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dc4:	3a01      	subs	r2, #1
 8005dc6:	0112      	lsls	r2, r2, #4
 8005dc8:	4311      	orrs	r1, r2
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005dce:	0212      	lsls	r2, r2, #8
 8005dd0:	4311      	orrs	r1, r2
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005dd6:	0852      	lsrs	r2, r2, #1
 8005dd8:	3a01      	subs	r2, #1
 8005dda:	0552      	lsls	r2, r2, #21
 8005ddc:	4311      	orrs	r1, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005de2:	0852      	lsrs	r2, r2, #1
 8005de4:	3a01      	subs	r2, #1
 8005de6:	0652      	lsls	r2, r2, #25
 8005de8:	4311      	orrs	r1, r2
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005dee:	06d2      	lsls	r2, r2, #27
 8005df0:	430a      	orrs	r2, r1
 8005df2:	4943      	ldr	r1, [pc, #268]	@ (8005f00 <HAL_RCC_OscConfig+0x618>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005df8:	4b41      	ldr	r3, [pc, #260]	@ (8005f00 <HAL_RCC_OscConfig+0x618>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a40      	ldr	r2, [pc, #256]	@ (8005f00 <HAL_RCC_OscConfig+0x618>)
 8005dfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e04:	4b3e      	ldr	r3, [pc, #248]	@ (8005f00 <HAL_RCC_OscConfig+0x618>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	4a3d      	ldr	r2, [pc, #244]	@ (8005f00 <HAL_RCC_OscConfig+0x618>)
 8005e0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e10:	f7fe fe9e 	bl	8004b50 <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e18:	f7fe fe9a 	bl	8004b50 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e066      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e2a:	4b35      	ldr	r3, [pc, #212]	@ (8005f00 <HAL_RCC_OscConfig+0x618>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0f0      	beq.n	8005e18 <HAL_RCC_OscConfig+0x530>
 8005e36:	e05e      	b.n	8005ef6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e38:	4b31      	ldr	r3, [pc, #196]	@ (8005f00 <HAL_RCC_OscConfig+0x618>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a30      	ldr	r2, [pc, #192]	@ (8005f00 <HAL_RCC_OscConfig+0x618>)
 8005e3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e44:	f7fe fe84 	bl	8004b50 <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e4c:	f7fe fe80 	bl	8004b50 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e04c      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e5e:	4b28      	ldr	r3, [pc, #160]	@ (8005f00 <HAL_RCC_OscConfig+0x618>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1f0      	bne.n	8005e4c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e6a:	4b25      	ldr	r3, [pc, #148]	@ (8005f00 <HAL_RCC_OscConfig+0x618>)
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	4924      	ldr	r1, [pc, #144]	@ (8005f00 <HAL_RCC_OscConfig+0x618>)
 8005e70:	4b25      	ldr	r3, [pc, #148]	@ (8005f08 <HAL_RCC_OscConfig+0x620>)
 8005e72:	4013      	ands	r3, r2
 8005e74:	60cb      	str	r3, [r1, #12]
 8005e76:	e03e      	b.n	8005ef6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e039      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e84:	4b1e      	ldr	r3, [pc, #120]	@ (8005f00 <HAL_RCC_OscConfig+0x618>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f003 0203 	and.w	r2, r3, #3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d12c      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d123      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d11b      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d113      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed4:	085b      	lsrs	r3, r3, #1
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d109      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee8:	085b      	lsrs	r3, r3, #1
 8005eea:	3b01      	subs	r3, #1
 8005eec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d001      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	40021000 	.word	0x40021000
 8005f04:	019f800c 	.word	0x019f800c
 8005f08:	feeefffc 	.word	0xfeeefffc

08005f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e11e      	b.n	8006162 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f24:	4b91      	ldr	r3, [pc, #580]	@ (800616c <HAL_RCC_ClockConfig+0x260>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d910      	bls.n	8005f54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f32:	4b8e      	ldr	r3, [pc, #568]	@ (800616c <HAL_RCC_ClockConfig+0x260>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f023 020f 	bic.w	r2, r3, #15
 8005f3a:	498c      	ldr	r1, [pc, #560]	@ (800616c <HAL_RCC_ClockConfig+0x260>)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f42:	4b8a      	ldr	r3, [pc, #552]	@ (800616c <HAL_RCC_ClockConfig+0x260>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d001      	beq.n	8005f54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e106      	b.n	8006162 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d073      	beq.n	8006048 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d129      	bne.n	8005fbc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f68:	4b81      	ldr	r3, [pc, #516]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e0f4      	b.n	8006162 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f78:	f000 f99e 	bl	80062b8 <RCC_GetSysClockFreqFromPLLSource>
 8005f7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	4a7c      	ldr	r2, [pc, #496]	@ (8006174 <HAL_RCC_ClockConfig+0x268>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d93f      	bls.n	8006006 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f86:	4b7a      	ldr	r3, [pc, #488]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d033      	beq.n	8006006 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d12f      	bne.n	8006006 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fa6:	4b72      	ldr	r3, [pc, #456]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fae:	4a70      	ldr	r2, [pc, #448]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8005fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005fb6:	2380      	movs	r3, #128	@ 0x80
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	e024      	b.n	8006006 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d107      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0c6      	b.n	8006162 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fd4:	4b66      	ldr	r3, [pc, #408]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e0be      	b.n	8006162 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005fe4:	f000 f8ce 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8005fe8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4a61      	ldr	r2, [pc, #388]	@ (8006174 <HAL_RCC_ClockConfig+0x268>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d909      	bls.n	8006006 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ffa:	4a5d      	ldr	r2, [pc, #372]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8005ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006000:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006002:	2380      	movs	r3, #128	@ 0x80
 8006004:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006006:	4b5a      	ldr	r3, [pc, #360]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f023 0203 	bic.w	r2, r3, #3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	4957      	ldr	r1, [pc, #348]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8006014:	4313      	orrs	r3, r2
 8006016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006018:	f7fe fd9a 	bl	8004b50 <HAL_GetTick>
 800601c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800601e:	e00a      	b.n	8006036 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006020:	f7fe fd96 	bl	8004b50 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800602e:	4293      	cmp	r3, r2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e095      	b.n	8006162 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006036:	4b4e      	ldr	r3, [pc, #312]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 020c 	and.w	r2, r3, #12
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	429a      	cmp	r2, r3
 8006046:	d1eb      	bne.n	8006020 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d023      	beq.n	800609c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006060:	4b43      	ldr	r3, [pc, #268]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	4a42      	ldr	r2, [pc, #264]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8006066:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800606a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b00      	cmp	r3, #0
 8006076:	d007      	beq.n	8006088 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006078:	4b3d      	ldr	r3, [pc, #244]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006080:	4a3b      	ldr	r2, [pc, #236]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8006082:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006086:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006088:	4b39      	ldr	r3, [pc, #228]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	4936      	ldr	r1, [pc, #216]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8006096:	4313      	orrs	r3, r2
 8006098:	608b      	str	r3, [r1, #8]
 800609a:	e008      	b.n	80060ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2b80      	cmp	r3, #128	@ 0x80
 80060a0:	d105      	bne.n	80060ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060a2:	4b33      	ldr	r3, [pc, #204]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	4a32      	ldr	r2, [pc, #200]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 80060a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060ae:	4b2f      	ldr	r3, [pc, #188]	@ (800616c <HAL_RCC_ClockConfig+0x260>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 030f 	and.w	r3, r3, #15
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d21d      	bcs.n	80060f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060bc:	4b2b      	ldr	r3, [pc, #172]	@ (800616c <HAL_RCC_ClockConfig+0x260>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f023 020f 	bic.w	r2, r3, #15
 80060c4:	4929      	ldr	r1, [pc, #164]	@ (800616c <HAL_RCC_ClockConfig+0x260>)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80060cc:	f7fe fd40 	bl	8004b50 <HAL_GetTick>
 80060d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d2:	e00a      	b.n	80060ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060d4:	f7fe fd3c 	bl	8004b50 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e03b      	b.n	8006162 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ea:	4b20      	ldr	r3, [pc, #128]	@ (800616c <HAL_RCC_ClockConfig+0x260>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d1ed      	bne.n	80060d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d008      	beq.n	8006116 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006104:	4b1a      	ldr	r3, [pc, #104]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	4917      	ldr	r1, [pc, #92]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8006112:	4313      	orrs	r3, r2
 8006114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006122:	4b13      	ldr	r3, [pc, #76]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	490f      	ldr	r1, [pc, #60]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 8006132:	4313      	orrs	r3, r2
 8006134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006136:	f000 f825 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 800613a:	4602      	mov	r2, r0
 800613c:	4b0c      	ldr	r3, [pc, #48]	@ (8006170 <HAL_RCC_ClockConfig+0x264>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	091b      	lsrs	r3, r3, #4
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	490c      	ldr	r1, [pc, #48]	@ (8006178 <HAL_RCC_ClockConfig+0x26c>)
 8006148:	5ccb      	ldrb	r3, [r1, r3]
 800614a:	f003 031f 	and.w	r3, r3, #31
 800614e:	fa22 f303 	lsr.w	r3, r2, r3
 8006152:	4a0a      	ldr	r2, [pc, #40]	@ (800617c <HAL_RCC_ClockConfig+0x270>)
 8006154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006156:	4b0a      	ldr	r3, [pc, #40]	@ (8006180 <HAL_RCC_ClockConfig+0x274>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe fcac 	bl	8004ab8 <HAL_InitTick>
 8006160:	4603      	mov	r3, r0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40022000 	.word	0x40022000
 8006170:	40021000 	.word	0x40021000
 8006174:	04c4b400 	.word	0x04c4b400
 8006178:	0800bc64 	.word	0x0800bc64
 800617c:	20000200 	.word	0x20000200
 8006180:	20000204 	.word	0x20000204

08006184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800618a:	4b2c      	ldr	r3, [pc, #176]	@ (800623c <HAL_RCC_GetSysClockFreq+0xb8>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 030c 	and.w	r3, r3, #12
 8006192:	2b04      	cmp	r3, #4
 8006194:	d102      	bne.n	800619c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006196:	4b2a      	ldr	r3, [pc, #168]	@ (8006240 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	e047      	b.n	800622c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800619c:	4b27      	ldr	r3, [pc, #156]	@ (800623c <HAL_RCC_GetSysClockFreq+0xb8>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 030c 	and.w	r3, r3, #12
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d102      	bne.n	80061ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061a8:	4b26      	ldr	r3, [pc, #152]	@ (8006244 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	e03e      	b.n	800622c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80061ae:	4b23      	ldr	r3, [pc, #140]	@ (800623c <HAL_RCC_GetSysClockFreq+0xb8>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 030c 	and.w	r3, r3, #12
 80061b6:	2b0c      	cmp	r3, #12
 80061b8:	d136      	bne.n	8006228 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061ba:	4b20      	ldr	r3, [pc, #128]	@ (800623c <HAL_RCC_GetSysClockFreq+0xb8>)
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061c4:	4b1d      	ldr	r3, [pc, #116]	@ (800623c <HAL_RCC_GetSysClockFreq+0xb8>)
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	091b      	lsrs	r3, r3, #4
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	3301      	adds	r3, #1
 80061d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d10c      	bne.n	80061f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006244 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e0:	4a16      	ldr	r2, [pc, #88]	@ (800623c <HAL_RCC_GetSysClockFreq+0xb8>)
 80061e2:	68d2      	ldr	r2, [r2, #12]
 80061e4:	0a12      	lsrs	r2, r2, #8
 80061e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061ea:	fb02 f303 	mul.w	r3, r2, r3
 80061ee:	617b      	str	r3, [r7, #20]
      break;
 80061f0:	e00c      	b.n	800620c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061f2:	4a13      	ldr	r2, [pc, #76]	@ (8006240 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fa:	4a10      	ldr	r2, [pc, #64]	@ (800623c <HAL_RCC_GetSysClockFreq+0xb8>)
 80061fc:	68d2      	ldr	r2, [r2, #12]
 80061fe:	0a12      	lsrs	r2, r2, #8
 8006200:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006204:	fb02 f303 	mul.w	r3, r2, r3
 8006208:	617b      	str	r3, [r7, #20]
      break;
 800620a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800620c:	4b0b      	ldr	r3, [pc, #44]	@ (800623c <HAL_RCC_GetSysClockFreq+0xb8>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	0e5b      	lsrs	r3, r3, #25
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	3301      	adds	r3, #1
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	fbb2 f3f3 	udiv	r3, r2, r3
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	e001      	b.n	800622c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800622c:	693b      	ldr	r3, [r7, #16]
}
 800622e:	4618      	mov	r0, r3
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	40021000 	.word	0x40021000
 8006240:	00f42400 	.word	0x00f42400
 8006244:	016e3600 	.word	0x016e3600

08006248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800624c:	4b03      	ldr	r3, [pc, #12]	@ (800625c <HAL_RCC_GetHCLKFreq+0x14>)
 800624e:	681b      	ldr	r3, [r3, #0]
}
 8006250:	4618      	mov	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	20000200 	.word	0x20000200

08006260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006264:	f7ff fff0 	bl	8006248 <HAL_RCC_GetHCLKFreq>
 8006268:	4602      	mov	r2, r0
 800626a:	4b06      	ldr	r3, [pc, #24]	@ (8006284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	0a1b      	lsrs	r3, r3, #8
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	4904      	ldr	r1, [pc, #16]	@ (8006288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006276:	5ccb      	ldrb	r3, [r1, r3]
 8006278:	f003 031f 	and.w	r3, r3, #31
 800627c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006280:	4618      	mov	r0, r3
 8006282:	bd80      	pop	{r7, pc}
 8006284:	40021000 	.word	0x40021000
 8006288:	0800bc74 	.word	0x0800bc74

0800628c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006290:	f7ff ffda 	bl	8006248 <HAL_RCC_GetHCLKFreq>
 8006294:	4602      	mov	r2, r0
 8006296:	4b06      	ldr	r3, [pc, #24]	@ (80062b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	0adb      	lsrs	r3, r3, #11
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	4904      	ldr	r1, [pc, #16]	@ (80062b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062a2:	5ccb      	ldrb	r3, [r1, r3]
 80062a4:	f003 031f 	and.w	r3, r3, #31
 80062a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40021000 	.word	0x40021000
 80062b4:	0800bc74 	.word	0x0800bc74

080062b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062be:	4b1e      	ldr	r3, [pc, #120]	@ (8006338 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006338 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	091b      	lsrs	r3, r3, #4
 80062ce:	f003 030f 	and.w	r3, r3, #15
 80062d2:	3301      	adds	r3, #1
 80062d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d10c      	bne.n	80062f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062dc:	4a17      	ldr	r2, [pc, #92]	@ (800633c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	4a14      	ldr	r2, [pc, #80]	@ (8006338 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062e6:	68d2      	ldr	r2, [r2, #12]
 80062e8:	0a12      	lsrs	r2, r2, #8
 80062ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062ee:	fb02 f303 	mul.w	r3, r2, r3
 80062f2:	617b      	str	r3, [r7, #20]
    break;
 80062f4:	e00c      	b.n	8006310 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062f6:	4a12      	ldr	r2, [pc, #72]	@ (8006340 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006338 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006300:	68d2      	ldr	r2, [r2, #12]
 8006302:	0a12      	lsrs	r2, r2, #8
 8006304:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006308:	fb02 f303 	mul.w	r3, r2, r3
 800630c:	617b      	str	r3, [r7, #20]
    break;
 800630e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006310:	4b09      	ldr	r3, [pc, #36]	@ (8006338 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	0e5b      	lsrs	r3, r3, #25
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	3301      	adds	r3, #1
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	fbb2 f3f3 	udiv	r3, r2, r3
 8006328:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800632a:	687b      	ldr	r3, [r7, #4]
}
 800632c:	4618      	mov	r0, r3
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	40021000 	.word	0x40021000
 800633c:	016e3600 	.word	0x016e3600
 8006340:	00f42400 	.word	0x00f42400

08006344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800634c:	2300      	movs	r3, #0
 800634e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006350:	2300      	movs	r3, #0
 8006352:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 8098 	beq.w	8006492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006362:	2300      	movs	r3, #0
 8006364:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006366:	4b43      	ldr	r3, [pc, #268]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10d      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006372:	4b40      	ldr	r3, [pc, #256]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006376:	4a3f      	ldr	r2, [pc, #252]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800637c:	6593      	str	r3, [r2, #88]	@ 0x58
 800637e:	4b3d      	ldr	r3, [pc, #244]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006386:	60bb      	str	r3, [r7, #8]
 8006388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800638a:	2301      	movs	r3, #1
 800638c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800638e:	4b3a      	ldr	r3, [pc, #232]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a39      	ldr	r2, [pc, #228]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006398:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800639a:	f7fe fbd9 	bl	8004b50 <HAL_GetTick>
 800639e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063a0:	e009      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063a2:	f7fe fbd5 	bl	8004b50 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d902      	bls.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	74fb      	strb	r3, [r7, #19]
        break;
 80063b4:	e005      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063b6:	4b30      	ldr	r3, [pc, #192]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0ef      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80063c2:	7cfb      	ldrb	r3, [r7, #19]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d159      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063c8:	4b2a      	ldr	r3, [pc, #168]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d01e      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d019      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063e4:	4b23      	ldr	r3, [pc, #140]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063f0:	4b20      	ldr	r3, [pc, #128]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006400:	4b1c      	ldr	r3, [pc, #112]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006406:	4a1b      	ldr	r2, [pc, #108]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800640c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006410:	4a18      	ldr	r2, [pc, #96]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d016      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006422:	f7fe fb95 	bl	8004b50 <HAL_GetTick>
 8006426:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006428:	e00b      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800642a:	f7fe fb91 	bl	8004b50 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006438:	4293      	cmp	r3, r2
 800643a:	d902      	bls.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	74fb      	strb	r3, [r7, #19]
            break;
 8006440:	e006      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006442:	4b0c      	ldr	r3, [pc, #48]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0ec      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006450:	7cfb      	ldrb	r3, [r7, #19]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10b      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006456:	4b07      	ldr	r3, [pc, #28]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800645c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006464:	4903      	ldr	r1, [pc, #12]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006466:	4313      	orrs	r3, r2
 8006468:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800646c:	e008      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800646e:	7cfb      	ldrb	r3, [r7, #19]
 8006470:	74bb      	strb	r3, [r7, #18]
 8006472:	e005      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006474:	40021000 	.word	0x40021000
 8006478:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647c:	7cfb      	ldrb	r3, [r7, #19]
 800647e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006480:	7c7b      	ldrb	r3, [r7, #17]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d105      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006486:	4ba7      	ldr	r3, [pc, #668]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800648a:	4aa6      	ldr	r2, [pc, #664]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800648c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006490:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800649e:	4ba1      	ldr	r3, [pc, #644]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a4:	f023 0203 	bic.w	r2, r3, #3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	499d      	ldr	r1, [pc, #628]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064c0:	4b98      	ldr	r3, [pc, #608]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c6:	f023 020c 	bic.w	r2, r3, #12
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	4995      	ldr	r1, [pc, #596]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064e2:	4b90      	ldr	r3, [pc, #576]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	498c      	ldr	r1, [pc, #560]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006504:	4b87      	ldr	r3, [pc, #540]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	4984      	ldr	r1, [pc, #528]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006526:	4b7f      	ldr	r3, [pc, #508]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800652c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	497b      	ldr	r1, [pc, #492]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0320 	and.w	r3, r3, #32
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006548:	4b76      	ldr	r3, [pc, #472]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	4973      	ldr	r1, [pc, #460]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800656a:	4b6e      	ldr	r3, [pc, #440]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006570:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	496a      	ldr	r1, [pc, #424]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800658c:	4b65      	ldr	r3, [pc, #404]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006592:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	4962      	ldr	r1, [pc, #392]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065ae:	4b5d      	ldr	r3, [pc, #372]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065bc:	4959      	ldr	r1, [pc, #356]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065d0:	4b54      	ldr	r3, [pc, #336]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065d6:	f023 0203 	bic.w	r2, r3, #3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065de:	4951      	ldr	r1, [pc, #324]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065f2:	4b4c      	ldr	r3, [pc, #304]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006600:	4948      	ldr	r1, [pc, #288]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006602:	4313      	orrs	r3, r2
 8006604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006610:	2b00      	cmp	r3, #0
 8006612:	d015      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006614:	4b43      	ldr	r3, [pc, #268]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800661a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006622:	4940      	ldr	r1, [pc, #256]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006624:	4313      	orrs	r3, r2
 8006626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006632:	d105      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006634:	4b3b      	ldr	r3, [pc, #236]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4a3a      	ldr	r2, [pc, #232]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800663a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800663e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006648:	2b00      	cmp	r3, #0
 800664a:	d015      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800664c:	4b35      	ldr	r3, [pc, #212]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800664e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006652:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800665a:	4932      	ldr	r1, [pc, #200]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800665c:	4313      	orrs	r3, r2
 800665e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006666:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800666a:	d105      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800666c:	4b2d      	ldr	r3, [pc, #180]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4a2c      	ldr	r2, [pc, #176]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006672:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006676:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d015      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006684:	4b27      	ldr	r3, [pc, #156]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800668a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006692:	4924      	ldr	r1, [pc, #144]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006694:	4313      	orrs	r3, r2
 8006696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066a2:	d105      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d015      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066bc:	4b19      	ldr	r3, [pc, #100]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ca:	4916      	ldr	r1, [pc, #88]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066da:	d105      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066dc:	4b11      	ldr	r3, [pc, #68]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	4a10      	ldr	r2, [pc, #64]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d019      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006702:	4908      	ldr	r1, [pc, #32]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006704:	4313      	orrs	r3, r2
 8006706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006712:	d109      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006714:	4b03      	ldr	r3, [pc, #12]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	4a02      	ldr	r2, [pc, #8]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800671a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800671e:	60d3      	str	r3, [r2, #12]
 8006720:	e002      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006722:	bf00      	nop
 8006724:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d015      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006734:	4b29      	ldr	r3, [pc, #164]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800673a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006742:	4926      	ldr	r1, [pc, #152]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006744:	4313      	orrs	r3, r2
 8006746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800674e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006752:	d105      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006754:	4b21      	ldr	r3, [pc, #132]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	4a20      	ldr	r2, [pc, #128]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800675a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800675e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d015      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800676c:	4b1b      	ldr	r3, [pc, #108]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800676e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006772:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800677a:	4918      	ldr	r1, [pc, #96]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800677c:	4313      	orrs	r3, r2
 800677e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800678a:	d105      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800678c:	4b13      	ldr	r3, [pc, #76]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	4a12      	ldr	r2, [pc, #72]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006796:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d015      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067a4:	4b0d      	ldr	r3, [pc, #52]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067b2:	490a      	ldr	r1, [pc, #40]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067c2:	d105      	bne.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067c4:	4b05      	ldr	r3, [pc, #20]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	4a04      	ldr	r2, [pc, #16]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	40021000 	.word	0x40021000

080067e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e054      	b.n	800689c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d111      	bne.n	8006822 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f002 fb3c 	bl	8008e84 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006810:	2b00      	cmp	r3, #0
 8006812:	d102      	bne.n	800681a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a23      	ldr	r2, [pc, #140]	@ (80068a4 <HAL_TIM_Base_Init+0xc4>)
 8006818:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2202      	movs	r2, #2
 8006826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3304      	adds	r3, #4
 8006832:	4619      	mov	r1, r3
 8006834:	4610      	mov	r0, r2
 8006836:	f001 fc7b 	bl	8008130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	080045a9 	.word	0x080045a9

080068a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d001      	beq.n	80068c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e04c      	b.n	800695a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a26      	ldr	r2, [pc, #152]	@ (8006968 <HAL_TIM_Base_Start+0xc0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d022      	beq.n	8006918 <HAL_TIM_Base_Start+0x70>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068da:	d01d      	beq.n	8006918 <HAL_TIM_Base_Start+0x70>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a22      	ldr	r2, [pc, #136]	@ (800696c <HAL_TIM_Base_Start+0xc4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d018      	beq.n	8006918 <HAL_TIM_Base_Start+0x70>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a21      	ldr	r2, [pc, #132]	@ (8006970 <HAL_TIM_Base_Start+0xc8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d013      	beq.n	8006918 <HAL_TIM_Base_Start+0x70>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006974 <HAL_TIM_Base_Start+0xcc>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00e      	beq.n	8006918 <HAL_TIM_Base_Start+0x70>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006978 <HAL_TIM_Base_Start+0xd0>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d009      	beq.n	8006918 <HAL_TIM_Base_Start+0x70>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1c      	ldr	r2, [pc, #112]	@ (800697c <HAL_TIM_Base_Start+0xd4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d004      	beq.n	8006918 <HAL_TIM_Base_Start+0x70>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1b      	ldr	r2, [pc, #108]	@ (8006980 <HAL_TIM_Base_Start+0xd8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d115      	bne.n	8006944 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	4b19      	ldr	r3, [pc, #100]	@ (8006984 <HAL_TIM_Base_Start+0xdc>)
 8006920:	4013      	ands	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b06      	cmp	r3, #6
 8006928:	d015      	beq.n	8006956 <HAL_TIM_Base_Start+0xae>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006930:	d011      	beq.n	8006956 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0201 	orr.w	r2, r2, #1
 8006940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006942:	e008      	b.n	8006956 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0201 	orr.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	e000      	b.n	8006958 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006956:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40012c00 	.word	0x40012c00
 800696c:	40000400 	.word	0x40000400
 8006970:	40000800 	.word	0x40000800
 8006974:	40000c00 	.word	0x40000c00
 8006978:	40013400 	.word	0x40013400
 800697c:	40014000 	.word	0x40014000
 8006980:	40015000 	.word	0x40015000
 8006984:	00010007 	.word	0x00010007

08006988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b01      	cmp	r3, #1
 800699a:	d001      	beq.n	80069a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e054      	b.n	8006a4a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0201 	orr.w	r2, r2, #1
 80069b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a26      	ldr	r2, [pc, #152]	@ (8006a58 <HAL_TIM_Base_Start_IT+0xd0>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d022      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x80>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ca:	d01d      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x80>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a22      	ldr	r2, [pc, #136]	@ (8006a5c <HAL_TIM_Base_Start_IT+0xd4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d018      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x80>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a21      	ldr	r2, [pc, #132]	@ (8006a60 <HAL_TIM_Base_Start_IT+0xd8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d013      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x80>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a64 <HAL_TIM_Base_Start_IT+0xdc>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00e      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x80>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006a68 <HAL_TIM_Base_Start_IT+0xe0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d009      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x80>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a6c <HAL_TIM_Base_Start_IT+0xe4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d004      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x80>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1b      	ldr	r2, [pc, #108]	@ (8006a70 <HAL_TIM_Base_Start_IT+0xe8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d115      	bne.n	8006a34 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	4b19      	ldr	r3, [pc, #100]	@ (8006a74 <HAL_TIM_Base_Start_IT+0xec>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b06      	cmp	r3, #6
 8006a18:	d015      	beq.n	8006a46 <HAL_TIM_Base_Start_IT+0xbe>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a20:	d011      	beq.n	8006a46 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f042 0201 	orr.w	r2, r2, #1
 8006a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a32:	e008      	b.n	8006a46 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0201 	orr.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	e000      	b.n	8006a48 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	40012c00 	.word	0x40012c00
 8006a5c:	40000400 	.word	0x40000400
 8006a60:	40000800 	.word	0x40000800
 8006a64:	40000c00 	.word	0x40000c00
 8006a68:	40013400 	.word	0x40013400
 8006a6c:	40014000 	.word	0x40014000
 8006a70:	40015000 	.word	0x40015000
 8006a74:	00010007 	.word	0x00010007

08006a78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e054      	b.n	8006b34 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d111      	bne.n	8006aba <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f002 f9f0 	bl	8008e84 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d102      	bne.n	8006ab2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a23      	ldr	r2, [pc, #140]	@ (8006b3c <HAL_TIM_PWM_Init+0xc4>)
 8006ab0:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2202      	movs	r2, #2
 8006abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3304      	adds	r3, #4
 8006aca:	4619      	mov	r1, r3
 8006acc:	4610      	mov	r0, r2
 8006ace:	f001 fb2f 	bl	8008130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	08006b41 	.word	0x08006b41

08006b40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d109      	bne.n	8006b78 <HAL_TIM_PWM_Start+0x24>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	bf14      	ite	ne
 8006b70:	2301      	movne	r3, #1
 8006b72:	2300      	moveq	r3, #0
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	e03c      	b.n	8006bf2 <HAL_TIM_PWM_Start+0x9e>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d109      	bne.n	8006b92 <HAL_TIM_PWM_Start+0x3e>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	bf14      	ite	ne
 8006b8a:	2301      	movne	r3, #1
 8006b8c:	2300      	moveq	r3, #0
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	e02f      	b.n	8006bf2 <HAL_TIM_PWM_Start+0x9e>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d109      	bne.n	8006bac <HAL_TIM_PWM_Start+0x58>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	bf14      	ite	ne
 8006ba4:	2301      	movne	r3, #1
 8006ba6:	2300      	moveq	r3, #0
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	e022      	b.n	8006bf2 <HAL_TIM_PWM_Start+0x9e>
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b0c      	cmp	r3, #12
 8006bb0:	d109      	bne.n	8006bc6 <HAL_TIM_PWM_Start+0x72>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	bf14      	ite	ne
 8006bbe:	2301      	movne	r3, #1
 8006bc0:	2300      	moveq	r3, #0
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	e015      	b.n	8006bf2 <HAL_TIM_PWM_Start+0x9e>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d109      	bne.n	8006be0 <HAL_TIM_PWM_Start+0x8c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	bf14      	ite	ne
 8006bd8:	2301      	movne	r3, #1
 8006bda:	2300      	moveq	r3, #0
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	e008      	b.n	8006bf2 <HAL_TIM_PWM_Start+0x9e>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	bf14      	ite	ne
 8006bec:	2301      	movne	r3, #1
 8006bee:	2300      	moveq	r3, #0
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e0a6      	b.n	8006d48 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d104      	bne.n	8006c0a <HAL_TIM_PWM_Start+0xb6>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c08:	e023      	b.n	8006c52 <HAL_TIM_PWM_Start+0xfe>
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d104      	bne.n	8006c1a <HAL_TIM_PWM_Start+0xc6>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c18:	e01b      	b.n	8006c52 <HAL_TIM_PWM_Start+0xfe>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d104      	bne.n	8006c2a <HAL_TIM_PWM_Start+0xd6>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c28:	e013      	b.n	8006c52 <HAL_TIM_PWM_Start+0xfe>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b0c      	cmp	r3, #12
 8006c2e:	d104      	bne.n	8006c3a <HAL_TIM_PWM_Start+0xe6>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c38:	e00b      	b.n	8006c52 <HAL_TIM_PWM_Start+0xfe>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b10      	cmp	r3, #16
 8006c3e:	d104      	bne.n	8006c4a <HAL_TIM_PWM_Start+0xf6>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c48:	e003      	b.n	8006c52 <HAL_TIM_PWM_Start+0xfe>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2201      	movs	r2, #1
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f002 f8ec 	bl	8008e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a3a      	ldr	r2, [pc, #232]	@ (8006d50 <HAL_TIM_PWM_Start+0x1fc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d018      	beq.n	8006c9c <HAL_TIM_PWM_Start+0x148>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a39      	ldr	r2, [pc, #228]	@ (8006d54 <HAL_TIM_PWM_Start+0x200>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d013      	beq.n	8006c9c <HAL_TIM_PWM_Start+0x148>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a37      	ldr	r2, [pc, #220]	@ (8006d58 <HAL_TIM_PWM_Start+0x204>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d00e      	beq.n	8006c9c <HAL_TIM_PWM_Start+0x148>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a36      	ldr	r2, [pc, #216]	@ (8006d5c <HAL_TIM_PWM_Start+0x208>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d009      	beq.n	8006c9c <HAL_TIM_PWM_Start+0x148>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a34      	ldr	r2, [pc, #208]	@ (8006d60 <HAL_TIM_PWM_Start+0x20c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d004      	beq.n	8006c9c <HAL_TIM_PWM_Start+0x148>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a33      	ldr	r2, [pc, #204]	@ (8006d64 <HAL_TIM_PWM_Start+0x210>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d101      	bne.n	8006ca0 <HAL_TIM_PWM_Start+0x14c>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <HAL_TIM_PWM_Start+0x14e>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a25      	ldr	r2, [pc, #148]	@ (8006d50 <HAL_TIM_PWM_Start+0x1fc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d022      	beq.n	8006d06 <HAL_TIM_PWM_Start+0x1b2>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc8:	d01d      	beq.n	8006d06 <HAL_TIM_PWM_Start+0x1b2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a26      	ldr	r2, [pc, #152]	@ (8006d68 <HAL_TIM_PWM_Start+0x214>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d018      	beq.n	8006d06 <HAL_TIM_PWM_Start+0x1b2>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a24      	ldr	r2, [pc, #144]	@ (8006d6c <HAL_TIM_PWM_Start+0x218>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d013      	beq.n	8006d06 <HAL_TIM_PWM_Start+0x1b2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a23      	ldr	r2, [pc, #140]	@ (8006d70 <HAL_TIM_PWM_Start+0x21c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00e      	beq.n	8006d06 <HAL_TIM_PWM_Start+0x1b2>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a19      	ldr	r2, [pc, #100]	@ (8006d54 <HAL_TIM_PWM_Start+0x200>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d009      	beq.n	8006d06 <HAL_TIM_PWM_Start+0x1b2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a18      	ldr	r2, [pc, #96]	@ (8006d58 <HAL_TIM_PWM_Start+0x204>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <HAL_TIM_PWM_Start+0x1b2>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a18      	ldr	r2, [pc, #96]	@ (8006d64 <HAL_TIM_PWM_Start+0x210>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d115      	bne.n	8006d32 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	4b19      	ldr	r3, [pc, #100]	@ (8006d74 <HAL_TIM_PWM_Start+0x220>)
 8006d0e:	4013      	ands	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b06      	cmp	r3, #6
 8006d16:	d015      	beq.n	8006d44 <HAL_TIM_PWM_Start+0x1f0>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d1e:	d011      	beq.n	8006d44 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0201 	orr.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d30:	e008      	b.n	8006d44 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0201 	orr.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	e000      	b.n	8006d46 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	40012c00 	.word	0x40012c00
 8006d54:	40013400 	.word	0x40013400
 8006d58:	40014000 	.word	0x40014000
 8006d5c:	40014400 	.word	0x40014400
 8006d60:	40014800 	.word	0x40014800
 8006d64:	40015000 	.word	0x40015000
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800
 8006d70:	40000c00 	.word	0x40000c00
 8006d74:	00010007 	.word	0x00010007

08006d78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e054      	b.n	8006e34 <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d111      	bne.n	8006dba <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f002 f870 	bl	8008e84 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d102      	bne.n	8006db2 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a23      	ldr	r2, [pc, #140]	@ (8006e3c <HAL_TIM_IC_Init+0xc4>)
 8006db0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4610      	mov	r0, r2
 8006dce:	f001 f9af 	bl	8008130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	080043a9 	.word	0x080043a9

08006e40 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d104      	bne.n	8006e5a <HAL_TIM_IC_Start+0x1a>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	e023      	b.n	8006ea2 <HAL_TIM_IC_Start+0x62>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	d104      	bne.n	8006e6a <HAL_TIM_IC_Start+0x2a>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	e01b      	b.n	8006ea2 <HAL_TIM_IC_Start+0x62>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b08      	cmp	r3, #8
 8006e6e:	d104      	bne.n	8006e7a <HAL_TIM_IC_Start+0x3a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	e013      	b.n	8006ea2 <HAL_TIM_IC_Start+0x62>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b0c      	cmp	r3, #12
 8006e7e:	d104      	bne.n	8006e8a <HAL_TIM_IC_Start+0x4a>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	e00b      	b.n	8006ea2 <HAL_TIM_IC_Start+0x62>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b10      	cmp	r3, #16
 8006e8e:	d104      	bne.n	8006e9a <HAL_TIM_IC_Start+0x5a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	e003      	b.n	8006ea2 <HAL_TIM_IC_Start+0x62>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d104      	bne.n	8006eb4 <HAL_TIM_IC_Start+0x74>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	e013      	b.n	8006edc <HAL_TIM_IC_Start+0x9c>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d104      	bne.n	8006ec4 <HAL_TIM_IC_Start+0x84>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	e00b      	b.n	8006edc <HAL_TIM_IC_Start+0x9c>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b08      	cmp	r3, #8
 8006ec8:	d104      	bne.n	8006ed4 <HAL_TIM_IC_Start+0x94>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	e003      	b.n	8006edc <HAL_TIM_IC_Start+0x9c>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d102      	bne.n	8006eea <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d001      	beq.n	8006eee <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e097      	b.n	800701e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d104      	bne.n	8006efe <HAL_TIM_IC_Start+0xbe>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006efc:	e023      	b.n	8006f46 <HAL_TIM_IC_Start+0x106>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	d104      	bne.n	8006f0e <HAL_TIM_IC_Start+0xce>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f0c:	e01b      	b.n	8006f46 <HAL_TIM_IC_Start+0x106>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b08      	cmp	r3, #8
 8006f12:	d104      	bne.n	8006f1e <HAL_TIM_IC_Start+0xde>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f1c:	e013      	b.n	8006f46 <HAL_TIM_IC_Start+0x106>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b0c      	cmp	r3, #12
 8006f22:	d104      	bne.n	8006f2e <HAL_TIM_IC_Start+0xee>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f2c:	e00b      	b.n	8006f46 <HAL_TIM_IC_Start+0x106>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b10      	cmp	r3, #16
 8006f32:	d104      	bne.n	8006f3e <HAL_TIM_IC_Start+0xfe>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f3c:	e003      	b.n	8006f46 <HAL_TIM_IC_Start+0x106>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2202      	movs	r2, #2
 8006f42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d104      	bne.n	8006f56 <HAL_TIM_IC_Start+0x116>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f54:	e013      	b.n	8006f7e <HAL_TIM_IC_Start+0x13e>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d104      	bne.n	8006f66 <HAL_TIM_IC_Start+0x126>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f64:	e00b      	b.n	8006f7e <HAL_TIM_IC_Start+0x13e>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	d104      	bne.n	8006f76 <HAL_TIM_IC_Start+0x136>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f74:	e003      	b.n	8006f7e <HAL_TIM_IC_Start+0x13e>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2201      	movs	r2, #1
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f001 ff56 	bl	8008e38 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a25      	ldr	r2, [pc, #148]	@ (8007028 <HAL_TIM_IC_Start+0x1e8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d022      	beq.n	8006fdc <HAL_TIM_IC_Start+0x19c>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f9e:	d01d      	beq.n	8006fdc <HAL_TIM_IC_Start+0x19c>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a21      	ldr	r2, [pc, #132]	@ (800702c <HAL_TIM_IC_Start+0x1ec>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d018      	beq.n	8006fdc <HAL_TIM_IC_Start+0x19c>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a20      	ldr	r2, [pc, #128]	@ (8007030 <HAL_TIM_IC_Start+0x1f0>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d013      	beq.n	8006fdc <HAL_TIM_IC_Start+0x19c>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8007034 <HAL_TIM_IC_Start+0x1f4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00e      	beq.n	8006fdc <HAL_TIM_IC_Start+0x19c>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8007038 <HAL_TIM_IC_Start+0x1f8>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d009      	beq.n	8006fdc <HAL_TIM_IC_Start+0x19c>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800703c <HAL_TIM_IC_Start+0x1fc>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d004      	beq.n	8006fdc <HAL_TIM_IC_Start+0x19c>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8007040 <HAL_TIM_IC_Start+0x200>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d115      	bne.n	8007008 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689a      	ldr	r2, [r3, #8]
 8006fe2:	4b18      	ldr	r3, [pc, #96]	@ (8007044 <HAL_TIM_IC_Start+0x204>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b06      	cmp	r3, #6
 8006fec:	d015      	beq.n	800701a <HAL_TIM_IC_Start+0x1da>
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ff4:	d011      	beq.n	800701a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f042 0201 	orr.w	r2, r2, #1
 8007004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007006:	e008      	b.n	800701a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0201 	orr.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	e000      	b.n	800701c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	40012c00 	.word	0x40012c00
 800702c:	40000400 	.word	0x40000400
 8007030:	40000800 	.word	0x40000800
 8007034:	40000c00 	.word	0x40000c00
 8007038:	40013400 	.word	0x40013400
 800703c:	40014000 	.word	0x40014000
 8007040:	40015000 	.word	0x40015000
 8007044:	00010007 	.word	0x00010007

08007048 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e04c      	b.n	80070f6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d111      	bne.n	800708c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 ff07 	bl	8008e84 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800707a:	2b00      	cmp	r3, #0
 800707c:	d102      	bne.n	8007084 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a1f      	ldr	r2, [pc, #124]	@ (8007100 <HAL_TIM_OnePulse_Init+0xb8>)
 8007082:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3304      	adds	r3, #4
 800709c:	4619      	mov	r1, r3
 800709e:	4610      	mov	r0, r2
 80070a0:	f001 f846 	bl	8008130 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0208 	bic.w	r2, r2, #8
 80070b2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6819      	ldr	r1, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	08007105 	.word	0x08007105

08007104 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007128:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007130:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007138:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007140:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d108      	bne.n	800715a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007148:	7bbb      	ldrb	r3, [r7, #14]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d105      	bne.n	800715a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800714e:	7b7b      	ldrb	r3, [r7, #13]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d102      	bne.n	800715a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007154:	7b3b      	ldrb	r3, [r7, #12]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d001      	beq.n	800715e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e059      	b.n	8007212 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2202      	movs	r2, #2
 8007162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2202      	movs	r2, #2
 800716a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2202      	movs	r2, #2
 8007172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2202      	movs	r2, #2
 800717a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f042 0202 	orr.w	r2, r2, #2
 800718c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0204 	orr.w	r2, r2, #4
 800719c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2201      	movs	r2, #1
 80071a4:	2100      	movs	r1, #0
 80071a6:	4618      	mov	r0, r3
 80071a8:	f001 fe46 	bl	8008e38 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2201      	movs	r2, #1
 80071b2:	2104      	movs	r1, #4
 80071b4:	4618      	mov	r0, r3
 80071b6:	f001 fe3f 	bl	8008e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a17      	ldr	r2, [pc, #92]	@ (800721c <HAL_TIM_OnePulse_Start_IT+0x104>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d018      	beq.n	80071f6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a15      	ldr	r2, [pc, #84]	@ (8007220 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d013      	beq.n	80071f6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a14      	ldr	r2, [pc, #80]	@ (8007224 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00e      	beq.n	80071f6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a12      	ldr	r2, [pc, #72]	@ (8007228 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d009      	beq.n	80071f6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a11      	ldr	r2, [pc, #68]	@ (800722c <HAL_TIM_OnePulse_Start_IT+0x114>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d004      	beq.n	80071f6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a0f      	ldr	r2, [pc, #60]	@ (8007230 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d101      	bne.n	80071fa <HAL_TIM_OnePulse_Start_IT+0xe2>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e000      	b.n	80071fc <HAL_TIM_OnePulse_Start_IT+0xe4>
 80071fa:	2300      	movs	r3, #0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d007      	beq.n	8007210 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800720e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	40012c00 	.word	0x40012c00
 8007220:	40013400 	.word	0x40013400
 8007224:	40014000 	.word	0x40014000
 8007228:	40014400 	.word	0x40014400
 800722c:	40014800 	.word	0x40014800
 8007230:	40015000 	.word	0x40015000

08007234 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e0a2      	b.n	800738e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d111      	bne.n	8007278 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 fe11 	bl	8008e84 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007266:	2b00      	cmp	r3, #0
 8007268:	d102      	bne.n	8007270 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a4a      	ldr	r2, [pc, #296]	@ (8007398 <HAL_TIM_Encoder_Init+0x164>)
 800726e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800728e:	f023 0307 	bic.w	r3, r3, #7
 8007292:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3304      	adds	r3, #4
 800729c:	4619      	mov	r1, r3
 800729e:	4610      	mov	r0, r2
 80072a0:	f000 ff46 	bl	8008130 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072cc:	f023 0303 	bic.w	r3, r3, #3
 80072d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	689a      	ldr	r2, [r3, #8]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	021b      	lsls	r3, r3, #8
 80072dc:	4313      	orrs	r3, r2
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80072ea:	f023 030c 	bic.w	r3, r3, #12
 80072ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	68da      	ldr	r2, [r3, #12]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	021b      	lsls	r3, r3, #8
 8007306:	4313      	orrs	r3, r2
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	011a      	lsls	r2, r3, #4
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	031b      	lsls	r3, r3, #12
 800731a:	4313      	orrs	r3, r2
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	4313      	orrs	r3, r2
 8007320:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007328:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007330:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	4313      	orrs	r3, r2
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4313      	orrs	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	0800449d 	.word	0x0800449d

0800739c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d110      	bne.n	80073ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d102      	bne.n	80073d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80073d2:	7b7b      	ldrb	r3, [r7, #13]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d001      	beq.n	80073dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e069      	b.n	80074b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073ec:	e031      	b.n	8007452 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b04      	cmp	r3, #4
 80073f2:	d110      	bne.n	8007416 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d102      	bne.n	8007400 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80073fa:	7b3b      	ldrb	r3, [r7, #12]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d001      	beq.n	8007404 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e055      	b.n	80074b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007414:	e01d      	b.n	8007452 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d108      	bne.n	800742e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d105      	bne.n	800742e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007422:	7b7b      	ldrb	r3, [r7, #13]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d102      	bne.n	800742e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007428:	7b3b      	ldrb	r3, [r7, #12]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d001      	beq.n	8007432 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e03e      	b.n	80074b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2202      	movs	r2, #2
 8007436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2202      	movs	r2, #2
 800743e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2202      	movs	r2, #2
 8007446:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2202      	movs	r2, #2
 800744e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <HAL_TIM_Encoder_Start+0xc4>
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	2b04      	cmp	r3, #4
 800745c:	d008      	beq.n	8007470 <HAL_TIM_Encoder_Start+0xd4>
 800745e:	e00f      	b.n	8007480 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2201      	movs	r2, #1
 8007466:	2100      	movs	r1, #0
 8007468:	4618      	mov	r0, r3
 800746a:	f001 fce5 	bl	8008e38 <TIM_CCxChannelCmd>
      break;
 800746e:	e016      	b.n	800749e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2201      	movs	r2, #1
 8007476:	2104      	movs	r1, #4
 8007478:	4618      	mov	r0, r3
 800747a:	f001 fcdd 	bl	8008e38 <TIM_CCxChannelCmd>
      break;
 800747e:	e00e      	b.n	800749e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2201      	movs	r2, #1
 8007486:	2100      	movs	r1, #0
 8007488:	4618      	mov	r0, r3
 800748a:	f001 fcd5 	bl	8008e38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2201      	movs	r2, #1
 8007494:	2104      	movs	r1, #4
 8007496:	4618      	mov	r0, r3
 8007498:	f001 fcce 	bl	8008e38 <TIM_CCxChannelCmd>
      break;
 800749c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f042 0201 	orr.w	r2, r2, #1
 80074ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d026      	beq.n	8007528 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d021      	beq.n	8007528 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f06f 0202 	mvn.w	r2, #2
 80074ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d005      	beq.n	800750e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	4798      	blx	r3
 800750c:	e009      	b.n	8007522 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f003 0304 	and.w	r3, r3, #4
 800752e:	2b00      	cmp	r3, #0
 8007530:	d026      	beq.n	8007580 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b00      	cmp	r3, #0
 800753a:	d021      	beq.n	8007580 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f06f 0204 	mvn.w	r2, #4
 8007544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2202      	movs	r2, #2
 800754a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	4798      	blx	r3
 8007564:	e009      	b.n	800757a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f003 0308 	and.w	r3, r3, #8
 8007586:	2b00      	cmp	r3, #0
 8007588:	d026      	beq.n	80075d8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f003 0308 	and.w	r3, r3, #8
 8007590:	2b00      	cmp	r3, #0
 8007592:	d021      	beq.n	80075d8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f06f 0208 	mvn.w	r2, #8
 800759c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2204      	movs	r2, #4
 80075a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	f003 0303 	and.w	r3, r3, #3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d005      	beq.n	80075be <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
 80075bc:	e009      	b.n	80075d2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f003 0310 	and.w	r3, r3, #16
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d026      	beq.n	8007630 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f003 0310 	and.w	r3, r3, #16
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d021      	beq.n	8007630 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f06f 0210 	mvn.w	r2, #16
 80075f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2208      	movs	r2, #8
 80075fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007606:	2b00      	cmp	r3, #0
 8007608:	d005      	beq.n	8007616 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
 8007614:	e009      	b.n	800762a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00e      	beq.n	8007658 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d009      	beq.n	8007658 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f06f 0201 	mvn.w	r2, #1
 800764c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800765e:	2b00      	cmp	r3, #0
 8007660:	d104      	bne.n	800766c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00e      	beq.n	800768a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007672:	2b00      	cmp	r3, #0
 8007674:	d009      	beq.n	800768a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800767e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00e      	beq.n	80076b2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80076a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00e      	beq.n	80076da <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d009      	beq.n	80076da <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80076ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f003 0320 	and.w	r3, r3, #32
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00e      	beq.n	8007702 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f003 0320 	and.w	r3, r3, #32
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d009      	beq.n	8007702 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f06f 0220 	mvn.w	r2, #32
 80076f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00e      	beq.n	800772a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d009      	beq.n	800772a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800771e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00e      	beq.n	8007752 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d009      	beq.n	8007752 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00e      	beq.n	800777a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d009      	beq.n	800777a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800776e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00e      	beq.n	80077a2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d009      	beq.n	80077a2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077a2:	bf00      	nop
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b086      	sub	sp, #24
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e088      	b.n	80078da <HAL_TIM_IC_ConfigChannel+0x130>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d11b      	bne.n	800780e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80077e6:	f001 f961 	bl	8008aac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	699a      	ldr	r2, [r3, #24]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f022 020c 	bic.w	r2, r2, #12
 80077f8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6999      	ldr	r1, [r3, #24]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	619a      	str	r2, [r3, #24]
 800780c:	e060      	b.n	80078d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b04      	cmp	r3, #4
 8007812:	d11c      	bne.n	800784e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007824:	f001 f9e5 	bl	8008bf2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699a      	ldr	r2, [r3, #24]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007836:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6999      	ldr	r1, [r3, #24]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	021a      	lsls	r2, r3, #8
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	619a      	str	r2, [r3, #24]
 800784c:	e040      	b.n	80078d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b08      	cmp	r3, #8
 8007852:	d11b      	bne.n	800788c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007864:	f001 fa32 	bl	8008ccc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	69da      	ldr	r2, [r3, #28]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 020c 	bic.w	r2, r2, #12
 8007876:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	69d9      	ldr	r1, [r3, #28]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	689a      	ldr	r2, [r3, #8]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	61da      	str	r2, [r3, #28]
 800788a:	e021      	b.n	80078d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b0c      	cmp	r3, #12
 8007890:	d11c      	bne.n	80078cc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80078a2:	f001 fa4f 	bl	8008d44 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	69da      	ldr	r2, [r3, #28]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80078b4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	69d9      	ldr	r1, [r3, #28]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	021a      	lsls	r2, r3, #8
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	61da      	str	r2, [r3, #28]
 80078ca:	e001      	b.n	80078d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3718      	adds	r7, #24
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d101      	bne.n	8007902 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078fe:	2302      	movs	r3, #2
 8007900:	e0ff      	b.n	8007b02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b14      	cmp	r3, #20
 800790e:	f200 80f0 	bhi.w	8007af2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007912:	a201      	add	r2, pc, #4	@ (adr r2, 8007918 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007918:	0800796d 	.word	0x0800796d
 800791c:	08007af3 	.word	0x08007af3
 8007920:	08007af3 	.word	0x08007af3
 8007924:	08007af3 	.word	0x08007af3
 8007928:	080079ad 	.word	0x080079ad
 800792c:	08007af3 	.word	0x08007af3
 8007930:	08007af3 	.word	0x08007af3
 8007934:	08007af3 	.word	0x08007af3
 8007938:	080079ef 	.word	0x080079ef
 800793c:	08007af3 	.word	0x08007af3
 8007940:	08007af3 	.word	0x08007af3
 8007944:	08007af3 	.word	0x08007af3
 8007948:	08007a2f 	.word	0x08007a2f
 800794c:	08007af3 	.word	0x08007af3
 8007950:	08007af3 	.word	0x08007af3
 8007954:	08007af3 	.word	0x08007af3
 8007958:	08007a71 	.word	0x08007a71
 800795c:	08007af3 	.word	0x08007af3
 8007960:	08007af3 	.word	0x08007af3
 8007964:	08007af3 	.word	0x08007af3
 8007968:	08007ab1 	.word	0x08007ab1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68b9      	ldr	r1, [r7, #8]
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fc90 	bl	8008298 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	699a      	ldr	r2, [r3, #24]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f042 0208 	orr.w	r2, r2, #8
 8007986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	699a      	ldr	r2, [r3, #24]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 0204 	bic.w	r2, r2, #4
 8007996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6999      	ldr	r1, [r3, #24]
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	691a      	ldr	r2, [r3, #16]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	619a      	str	r2, [r3, #24]
      break;
 80079aa:	e0a5      	b.n	8007af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68b9      	ldr	r1, [r7, #8]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 fd0a 	bl	80083cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	699a      	ldr	r2, [r3, #24]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	699a      	ldr	r2, [r3, #24]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6999      	ldr	r1, [r3, #24]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	021a      	lsls	r2, r3, #8
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	619a      	str	r2, [r3, #24]
      break;
 80079ec:	e084      	b.n	8007af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68b9      	ldr	r1, [r7, #8]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f000 fd7d 	bl	80084f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69da      	ldr	r2, [r3, #28]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f042 0208 	orr.w	r2, r2, #8
 8007a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	69da      	ldr	r2, [r3, #28]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0204 	bic.w	r2, r2, #4
 8007a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	69d9      	ldr	r1, [r3, #28]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	691a      	ldr	r2, [r3, #16]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	61da      	str	r2, [r3, #28]
      break;
 8007a2c:	e064      	b.n	8007af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68b9      	ldr	r1, [r7, #8]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f000 fdef 	bl	8008618 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69da      	ldr	r2, [r3, #28]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	69da      	ldr	r2, [r3, #28]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69d9      	ldr	r1, [r3, #28]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	021a      	lsls	r2, r3, #8
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	61da      	str	r2, [r3, #28]
      break;
 8007a6e:	e043      	b.n	8007af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68b9      	ldr	r1, [r7, #8]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fe62 	bl	8008740 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0208 	orr.w	r2, r2, #8
 8007a8a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0204 	bic.w	r2, r2, #4
 8007a9a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	691a      	ldr	r2, [r3, #16]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007aae:	e023      	b.n	8007af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 feac 	bl	8008814 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007aca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ada:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	021a      	lsls	r2, r3, #8
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007af0:	e002      	b.n	8007af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	75fb      	strb	r3, [r7, #23]
      break;
 8007af6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop

08007b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d101      	bne.n	8007b28 <HAL_TIM_ConfigClockSource+0x1c>
 8007b24:	2302      	movs	r3, #2
 8007b26:	e0f6      	b.n	8007d16 <HAL_TIM_ConfigClockSource+0x20a>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007b46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a6f      	ldr	r2, [pc, #444]	@ (8007d20 <HAL_TIM_ConfigClockSource+0x214>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	f000 80c1 	beq.w	8007cea <HAL_TIM_ConfigClockSource+0x1de>
 8007b68:	4a6d      	ldr	r2, [pc, #436]	@ (8007d20 <HAL_TIM_ConfigClockSource+0x214>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	f200 80c6 	bhi.w	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007b70:	4a6c      	ldr	r2, [pc, #432]	@ (8007d24 <HAL_TIM_ConfigClockSource+0x218>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	f000 80b9 	beq.w	8007cea <HAL_TIM_ConfigClockSource+0x1de>
 8007b78:	4a6a      	ldr	r2, [pc, #424]	@ (8007d24 <HAL_TIM_ConfigClockSource+0x218>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	f200 80be 	bhi.w	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007b80:	4a69      	ldr	r2, [pc, #420]	@ (8007d28 <HAL_TIM_ConfigClockSource+0x21c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	f000 80b1 	beq.w	8007cea <HAL_TIM_ConfigClockSource+0x1de>
 8007b88:	4a67      	ldr	r2, [pc, #412]	@ (8007d28 <HAL_TIM_ConfigClockSource+0x21c>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	f200 80b6 	bhi.w	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007b90:	4a66      	ldr	r2, [pc, #408]	@ (8007d2c <HAL_TIM_ConfigClockSource+0x220>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	f000 80a9 	beq.w	8007cea <HAL_TIM_ConfigClockSource+0x1de>
 8007b98:	4a64      	ldr	r2, [pc, #400]	@ (8007d2c <HAL_TIM_ConfigClockSource+0x220>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	f200 80ae 	bhi.w	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007ba0:	4a63      	ldr	r2, [pc, #396]	@ (8007d30 <HAL_TIM_ConfigClockSource+0x224>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	f000 80a1 	beq.w	8007cea <HAL_TIM_ConfigClockSource+0x1de>
 8007ba8:	4a61      	ldr	r2, [pc, #388]	@ (8007d30 <HAL_TIM_ConfigClockSource+0x224>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	f200 80a6 	bhi.w	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007bb0:	4a60      	ldr	r2, [pc, #384]	@ (8007d34 <HAL_TIM_ConfigClockSource+0x228>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	f000 8099 	beq.w	8007cea <HAL_TIM_ConfigClockSource+0x1de>
 8007bb8:	4a5e      	ldr	r2, [pc, #376]	@ (8007d34 <HAL_TIM_ConfigClockSource+0x228>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	f200 809e 	bhi.w	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007bc0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007bc4:	f000 8091 	beq.w	8007cea <HAL_TIM_ConfigClockSource+0x1de>
 8007bc8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007bcc:	f200 8096 	bhi.w	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007bd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bd4:	f000 8089 	beq.w	8007cea <HAL_TIM_ConfigClockSource+0x1de>
 8007bd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bdc:	f200 808e 	bhi.w	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007be4:	d03e      	beq.n	8007c64 <HAL_TIM_ConfigClockSource+0x158>
 8007be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bea:	f200 8087 	bhi.w	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bf2:	f000 8086 	beq.w	8007d02 <HAL_TIM_ConfigClockSource+0x1f6>
 8007bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bfa:	d87f      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007bfc:	2b70      	cmp	r3, #112	@ 0x70
 8007bfe:	d01a      	beq.n	8007c36 <HAL_TIM_ConfigClockSource+0x12a>
 8007c00:	2b70      	cmp	r3, #112	@ 0x70
 8007c02:	d87b      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007c04:	2b60      	cmp	r3, #96	@ 0x60
 8007c06:	d050      	beq.n	8007caa <HAL_TIM_ConfigClockSource+0x19e>
 8007c08:	2b60      	cmp	r3, #96	@ 0x60
 8007c0a:	d877      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007c0c:	2b50      	cmp	r3, #80	@ 0x50
 8007c0e:	d03c      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x17e>
 8007c10:	2b50      	cmp	r3, #80	@ 0x50
 8007c12:	d873      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007c14:	2b40      	cmp	r3, #64	@ 0x40
 8007c16:	d058      	beq.n	8007cca <HAL_TIM_ConfigClockSource+0x1be>
 8007c18:	2b40      	cmp	r3, #64	@ 0x40
 8007c1a:	d86f      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007c1c:	2b30      	cmp	r3, #48	@ 0x30
 8007c1e:	d064      	beq.n	8007cea <HAL_TIM_ConfigClockSource+0x1de>
 8007c20:	2b30      	cmp	r3, #48	@ 0x30
 8007c22:	d86b      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007c24:	2b20      	cmp	r3, #32
 8007c26:	d060      	beq.n	8007cea <HAL_TIM_ConfigClockSource+0x1de>
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	d867      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d05c      	beq.n	8007cea <HAL_TIM_ConfigClockSource+0x1de>
 8007c30:	2b10      	cmp	r3, #16
 8007c32:	d05a      	beq.n	8007cea <HAL_TIM_ConfigClockSource+0x1de>
 8007c34:	e062      	b.n	8007cfc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c46:	f001 f8d7 	bl	8008df8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	609a      	str	r2, [r3, #8]
      break;
 8007c62:	e04f      	b.n	8007d04 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c74:	f001 f8c0 	bl	8008df8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689a      	ldr	r2, [r3, #8]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c86:	609a      	str	r2, [r3, #8]
      break;
 8007c88:	e03c      	b.n	8007d04 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c96:	461a      	mov	r2, r3
 8007c98:	f000 ff7c 	bl	8008b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2150      	movs	r1, #80	@ 0x50
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f001 f88b 	bl	8008dbe <TIM_ITRx_SetConfig>
      break;
 8007ca8:	e02c      	b.n	8007d04 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f000 ffd8 	bl	8008c6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2160      	movs	r1, #96	@ 0x60
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f001 f87b 	bl	8008dbe <TIM_ITRx_SetConfig>
      break;
 8007cc8:	e01c      	b.n	8007d04 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f000 ff5c 	bl	8008b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2140      	movs	r1, #64	@ 0x40
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 f86b 	bl	8008dbe <TIM_ITRx_SetConfig>
      break;
 8007ce8:	e00c      	b.n	8007d04 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	f001 f862 	bl	8008dbe <TIM_ITRx_SetConfig>
      break;
 8007cfa:	e003      	b.n	8007d04 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8007d00:	e000      	b.n	8007d04 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	00100070 	.word	0x00100070
 8007d24:	00100060 	.word	0x00100060
 8007d28:	00100050 	.word	0x00100050
 8007d2c:	00100040 	.word	0x00100040
 8007d30:	00100030 	.word	0x00100030
 8007d34:	00100020 	.word	0x00100020

08007d38 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d101      	bne.n	8007d50 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e031      	b.n	8007db4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fdc2 	bl	80088ec <TIM_SlaveTimer_SetConfig>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d009      	beq.n	8007d82 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e018      	b.n	8007db4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68da      	ldr	r2, [r3, #12]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d90:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68da      	ldr	r2, [r3, #12]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007da0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e14a      	b.n	8008122 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	f040 80dd 	bne.w	8008054 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007e9a:	7afb      	ldrb	r3, [r7, #11]
 8007e9c:	2b1f      	cmp	r3, #31
 8007e9e:	f200 80d6 	bhi.w	800804e <HAL_TIM_RegisterCallback+0x1de>
 8007ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea8 <HAL_TIM_RegisterCallback+0x38>)
 8007ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea8:	08007f29 	.word	0x08007f29
 8007eac:	08007f31 	.word	0x08007f31
 8007eb0:	08007f39 	.word	0x08007f39
 8007eb4:	08007f41 	.word	0x08007f41
 8007eb8:	08007f49 	.word	0x08007f49
 8007ebc:	08007f51 	.word	0x08007f51
 8007ec0:	08007f59 	.word	0x08007f59
 8007ec4:	08007f61 	.word	0x08007f61
 8007ec8:	08007f69 	.word	0x08007f69
 8007ecc:	08007f71 	.word	0x08007f71
 8007ed0:	08007f79 	.word	0x08007f79
 8007ed4:	08007f81 	.word	0x08007f81
 8007ed8:	08007f89 	.word	0x08007f89
 8007edc:	08007f91 	.word	0x08007f91
 8007ee0:	08007f9b 	.word	0x08007f9b
 8007ee4:	08007fa5 	.word	0x08007fa5
 8007ee8:	08007faf 	.word	0x08007faf
 8007eec:	08007fb9 	.word	0x08007fb9
 8007ef0:	08007fc3 	.word	0x08007fc3
 8007ef4:	08007fcd 	.word	0x08007fcd
 8007ef8:	08007fd7 	.word	0x08007fd7
 8007efc:	08007fe1 	.word	0x08007fe1
 8007f00:	08007feb 	.word	0x08007feb
 8007f04:	08007ff5 	.word	0x08007ff5
 8007f08:	08007fff 	.word	0x08007fff
 8007f0c:	08008009 	.word	0x08008009
 8007f10:	08008013 	.word	0x08008013
 8007f14:	0800801d 	.word	0x0800801d
 8007f18:	08008027 	.word	0x08008027
 8007f1c:	08008031 	.word	0x08008031
 8007f20:	0800803b 	.word	0x0800803b
 8007f24:	08008045 	.word	0x08008045
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007f2e:	e0f7      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007f36:	e0f3      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007f3e:	e0ef      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007f46:	e0eb      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007f4e:	e0e7      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007f56:	e0e3      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007f5e:	e0df      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007f66:	e0db      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007f6e:	e0d7      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007f76:	e0d3      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007f7e:	e0cf      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007f86:	e0cb      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007f8e:	e0c7      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007f98:	e0c2      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007fa2:	e0bd      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007fac:	e0b8      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007fb6:	e0b3      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007fc0:	e0ae      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007fca:	e0a9      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007fd4:	e0a4      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007fde:	e09f      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007fe8:	e09a      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007ff2:	e095      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007ffc:	e090      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008006:	e08b      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008010:	e086      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800801a:	e081      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008024:	e07c      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800802e:	e077      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008038:	e072      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008042:	e06d      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800804c:	e068      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	75fb      	strb	r3, [r7, #23]
        break;
 8008052:	e065      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d15d      	bne.n	800811c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008060:	7afb      	ldrb	r3, [r7, #11]
 8008062:	2b0d      	cmp	r3, #13
 8008064:	d857      	bhi.n	8008116 <HAL_TIM_RegisterCallback+0x2a6>
 8008066:	a201      	add	r2, pc, #4	@ (adr r2, 800806c <HAL_TIM_RegisterCallback+0x1fc>)
 8008068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806c:	080080a5 	.word	0x080080a5
 8008070:	080080ad 	.word	0x080080ad
 8008074:	080080b5 	.word	0x080080b5
 8008078:	080080bd 	.word	0x080080bd
 800807c:	080080c5 	.word	0x080080c5
 8008080:	080080cd 	.word	0x080080cd
 8008084:	080080d5 	.word	0x080080d5
 8008088:	080080dd 	.word	0x080080dd
 800808c:	080080e5 	.word	0x080080e5
 8008090:	080080ed 	.word	0x080080ed
 8008094:	080080f5 	.word	0x080080f5
 8008098:	080080fd 	.word	0x080080fd
 800809c:	08008105 	.word	0x08008105
 80080a0:	0800810d 	.word	0x0800810d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80080aa:	e039      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80080b2:	e035      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80080ba:	e031      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80080c2:	e02d      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80080ca:	e029      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80080d2:	e025      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80080da:	e021      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80080e2:	e01d      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80080ea:	e019      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80080f2:	e015      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80080fa:	e011      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008102:	e00d      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800810a:	e009      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008114:	e004      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	75fb      	strb	r3, [r7, #23]
        break;
 800811a:	e001      	b.n	8008120 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008120:	7dfb      	ldrb	r3, [r7, #23]
}
 8008122:	4618      	mov	r0, r3
 8008124:	371c      	adds	r7, #28
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop

08008130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a4c      	ldr	r2, [pc, #304]	@ (8008274 <TIM_Base_SetConfig+0x144>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d017      	beq.n	8008178 <TIM_Base_SetConfig+0x48>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800814e:	d013      	beq.n	8008178 <TIM_Base_SetConfig+0x48>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a49      	ldr	r2, [pc, #292]	@ (8008278 <TIM_Base_SetConfig+0x148>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d00f      	beq.n	8008178 <TIM_Base_SetConfig+0x48>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a48      	ldr	r2, [pc, #288]	@ (800827c <TIM_Base_SetConfig+0x14c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d00b      	beq.n	8008178 <TIM_Base_SetConfig+0x48>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a47      	ldr	r2, [pc, #284]	@ (8008280 <TIM_Base_SetConfig+0x150>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d007      	beq.n	8008178 <TIM_Base_SetConfig+0x48>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a46      	ldr	r2, [pc, #280]	@ (8008284 <TIM_Base_SetConfig+0x154>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d003      	beq.n	8008178 <TIM_Base_SetConfig+0x48>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a45      	ldr	r2, [pc, #276]	@ (8008288 <TIM_Base_SetConfig+0x158>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d108      	bne.n	800818a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800817e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	4313      	orrs	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a39      	ldr	r2, [pc, #228]	@ (8008274 <TIM_Base_SetConfig+0x144>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d023      	beq.n	80081da <TIM_Base_SetConfig+0xaa>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008198:	d01f      	beq.n	80081da <TIM_Base_SetConfig+0xaa>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a36      	ldr	r2, [pc, #216]	@ (8008278 <TIM_Base_SetConfig+0x148>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d01b      	beq.n	80081da <TIM_Base_SetConfig+0xaa>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a35      	ldr	r2, [pc, #212]	@ (800827c <TIM_Base_SetConfig+0x14c>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d017      	beq.n	80081da <TIM_Base_SetConfig+0xaa>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a34      	ldr	r2, [pc, #208]	@ (8008280 <TIM_Base_SetConfig+0x150>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d013      	beq.n	80081da <TIM_Base_SetConfig+0xaa>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a33      	ldr	r2, [pc, #204]	@ (8008284 <TIM_Base_SetConfig+0x154>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d00f      	beq.n	80081da <TIM_Base_SetConfig+0xaa>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a33      	ldr	r2, [pc, #204]	@ (800828c <TIM_Base_SetConfig+0x15c>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d00b      	beq.n	80081da <TIM_Base_SetConfig+0xaa>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a32      	ldr	r2, [pc, #200]	@ (8008290 <TIM_Base_SetConfig+0x160>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d007      	beq.n	80081da <TIM_Base_SetConfig+0xaa>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a31      	ldr	r2, [pc, #196]	@ (8008294 <TIM_Base_SetConfig+0x164>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d003      	beq.n	80081da <TIM_Base_SetConfig+0xaa>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a2c      	ldr	r2, [pc, #176]	@ (8008288 <TIM_Base_SetConfig+0x158>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d108      	bne.n	80081ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a18      	ldr	r2, [pc, #96]	@ (8008274 <TIM_Base_SetConfig+0x144>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d013      	beq.n	8008240 <TIM_Base_SetConfig+0x110>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a1a      	ldr	r2, [pc, #104]	@ (8008284 <TIM_Base_SetConfig+0x154>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d00f      	beq.n	8008240 <TIM_Base_SetConfig+0x110>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a1a      	ldr	r2, [pc, #104]	@ (800828c <TIM_Base_SetConfig+0x15c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d00b      	beq.n	8008240 <TIM_Base_SetConfig+0x110>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a19      	ldr	r2, [pc, #100]	@ (8008290 <TIM_Base_SetConfig+0x160>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d007      	beq.n	8008240 <TIM_Base_SetConfig+0x110>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a18      	ldr	r2, [pc, #96]	@ (8008294 <TIM_Base_SetConfig+0x164>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d003      	beq.n	8008240 <TIM_Base_SetConfig+0x110>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a13      	ldr	r2, [pc, #76]	@ (8008288 <TIM_Base_SetConfig+0x158>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d103      	bne.n	8008248 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	691a      	ldr	r2, [r3, #16]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b01      	cmp	r3, #1
 8008258:	d105      	bne.n	8008266 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	f023 0201 	bic.w	r2, r3, #1
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	611a      	str	r2, [r3, #16]
  }
}
 8008266:	bf00      	nop
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	40012c00 	.word	0x40012c00
 8008278:	40000400 	.word	0x40000400
 800827c:	40000800 	.word	0x40000800
 8008280:	40000c00 	.word	0x40000c00
 8008284:	40013400 	.word	0x40013400
 8008288:	40015000 	.word	0x40015000
 800828c:	40014000 	.word	0x40014000
 8008290:	40014400 	.word	0x40014400
 8008294:	40014800 	.word	0x40014800

08008298 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	f023 0201 	bic.w	r2, r3, #1
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 0303 	bic.w	r3, r3, #3
 80082d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f023 0302 	bic.w	r3, r3, #2
 80082e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a30      	ldr	r2, [pc, #192]	@ (80083b4 <TIM_OC1_SetConfig+0x11c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d013      	beq.n	8008320 <TIM_OC1_SetConfig+0x88>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a2f      	ldr	r2, [pc, #188]	@ (80083b8 <TIM_OC1_SetConfig+0x120>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d00f      	beq.n	8008320 <TIM_OC1_SetConfig+0x88>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a2e      	ldr	r2, [pc, #184]	@ (80083bc <TIM_OC1_SetConfig+0x124>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d00b      	beq.n	8008320 <TIM_OC1_SetConfig+0x88>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a2d      	ldr	r2, [pc, #180]	@ (80083c0 <TIM_OC1_SetConfig+0x128>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d007      	beq.n	8008320 <TIM_OC1_SetConfig+0x88>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a2c      	ldr	r2, [pc, #176]	@ (80083c4 <TIM_OC1_SetConfig+0x12c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d003      	beq.n	8008320 <TIM_OC1_SetConfig+0x88>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a2b      	ldr	r2, [pc, #172]	@ (80083c8 <TIM_OC1_SetConfig+0x130>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d10c      	bne.n	800833a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f023 0308 	bic.w	r3, r3, #8
 8008326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	4313      	orrs	r3, r2
 8008330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	f023 0304 	bic.w	r3, r3, #4
 8008338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a1d      	ldr	r2, [pc, #116]	@ (80083b4 <TIM_OC1_SetConfig+0x11c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d013      	beq.n	800836a <TIM_OC1_SetConfig+0xd2>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a1c      	ldr	r2, [pc, #112]	@ (80083b8 <TIM_OC1_SetConfig+0x120>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00f      	beq.n	800836a <TIM_OC1_SetConfig+0xd2>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a1b      	ldr	r2, [pc, #108]	@ (80083bc <TIM_OC1_SetConfig+0x124>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d00b      	beq.n	800836a <TIM_OC1_SetConfig+0xd2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a1a      	ldr	r2, [pc, #104]	@ (80083c0 <TIM_OC1_SetConfig+0x128>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d007      	beq.n	800836a <TIM_OC1_SetConfig+0xd2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a19      	ldr	r2, [pc, #100]	@ (80083c4 <TIM_OC1_SetConfig+0x12c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d003      	beq.n	800836a <TIM_OC1_SetConfig+0xd2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a18      	ldr	r2, [pc, #96]	@ (80083c8 <TIM_OC1_SetConfig+0x130>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d111      	bne.n	800838e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	4313      	orrs	r3, r2
 8008382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	4313      	orrs	r3, r2
 800838c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	621a      	str	r2, [r3, #32]
}
 80083a8:	bf00      	nop
 80083aa:	371c      	adds	r7, #28
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	40012c00 	.word	0x40012c00
 80083b8:	40013400 	.word	0x40013400
 80083bc:	40014000 	.word	0x40014000
 80083c0:	40014400 	.word	0x40014400
 80083c4:	40014800 	.word	0x40014800
 80083c8:	40015000 	.word	0x40015000

080083cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b087      	sub	sp, #28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	f023 0210 	bic.w	r2, r3, #16
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	021b      	lsls	r3, r3, #8
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	4313      	orrs	r3, r2
 8008412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f023 0320 	bic.w	r3, r3, #32
 800841a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	011b      	lsls	r3, r3, #4
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	4313      	orrs	r3, r2
 8008426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a2c      	ldr	r2, [pc, #176]	@ (80084dc <TIM_OC2_SetConfig+0x110>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d007      	beq.n	8008440 <TIM_OC2_SetConfig+0x74>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a2b      	ldr	r2, [pc, #172]	@ (80084e0 <TIM_OC2_SetConfig+0x114>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d003      	beq.n	8008440 <TIM_OC2_SetConfig+0x74>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a2a      	ldr	r2, [pc, #168]	@ (80084e4 <TIM_OC2_SetConfig+0x118>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d10d      	bne.n	800845c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	011b      	lsls	r3, r3, #4
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	4313      	orrs	r3, r2
 8008452:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800845a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a1f      	ldr	r2, [pc, #124]	@ (80084dc <TIM_OC2_SetConfig+0x110>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d013      	beq.n	800848c <TIM_OC2_SetConfig+0xc0>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a1e      	ldr	r2, [pc, #120]	@ (80084e0 <TIM_OC2_SetConfig+0x114>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00f      	beq.n	800848c <TIM_OC2_SetConfig+0xc0>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a1e      	ldr	r2, [pc, #120]	@ (80084e8 <TIM_OC2_SetConfig+0x11c>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00b      	beq.n	800848c <TIM_OC2_SetConfig+0xc0>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a1d      	ldr	r2, [pc, #116]	@ (80084ec <TIM_OC2_SetConfig+0x120>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d007      	beq.n	800848c <TIM_OC2_SetConfig+0xc0>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a1c      	ldr	r2, [pc, #112]	@ (80084f0 <TIM_OC2_SetConfig+0x124>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d003      	beq.n	800848c <TIM_OC2_SetConfig+0xc0>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a17      	ldr	r2, [pc, #92]	@ (80084e4 <TIM_OC2_SetConfig+0x118>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d113      	bne.n	80084b4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008492:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800849a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	621a      	str	r2, [r3, #32]
}
 80084ce:	bf00      	nop
 80084d0:	371c      	adds	r7, #28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	40012c00 	.word	0x40012c00
 80084e0:	40013400 	.word	0x40013400
 80084e4:	40015000 	.word	0x40015000
 80084e8:	40014000 	.word	0x40014000
 80084ec:	40014400 	.word	0x40014400
 80084f0:	40014800 	.word	0x40014800

080084f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f023 0303 	bic.w	r3, r3, #3
 800852e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	4313      	orrs	r3, r2
 8008538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	021b      	lsls	r3, r3, #8
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	4313      	orrs	r3, r2
 800854c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a2b      	ldr	r2, [pc, #172]	@ (8008600 <TIM_OC3_SetConfig+0x10c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d007      	beq.n	8008566 <TIM_OC3_SetConfig+0x72>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a2a      	ldr	r2, [pc, #168]	@ (8008604 <TIM_OC3_SetConfig+0x110>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d003      	beq.n	8008566 <TIM_OC3_SetConfig+0x72>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a29      	ldr	r2, [pc, #164]	@ (8008608 <TIM_OC3_SetConfig+0x114>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d10d      	bne.n	8008582 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800856c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	021b      	lsls	r3, r3, #8
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	4313      	orrs	r3, r2
 8008578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a1e      	ldr	r2, [pc, #120]	@ (8008600 <TIM_OC3_SetConfig+0x10c>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d013      	beq.n	80085b2 <TIM_OC3_SetConfig+0xbe>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a1d      	ldr	r2, [pc, #116]	@ (8008604 <TIM_OC3_SetConfig+0x110>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d00f      	beq.n	80085b2 <TIM_OC3_SetConfig+0xbe>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a1d      	ldr	r2, [pc, #116]	@ (800860c <TIM_OC3_SetConfig+0x118>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d00b      	beq.n	80085b2 <TIM_OC3_SetConfig+0xbe>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a1c      	ldr	r2, [pc, #112]	@ (8008610 <TIM_OC3_SetConfig+0x11c>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d007      	beq.n	80085b2 <TIM_OC3_SetConfig+0xbe>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008614 <TIM_OC3_SetConfig+0x120>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d003      	beq.n	80085b2 <TIM_OC3_SetConfig+0xbe>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a16      	ldr	r2, [pc, #88]	@ (8008608 <TIM_OC3_SetConfig+0x114>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d113      	bne.n	80085da <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	011b      	lsls	r3, r3, #4
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	621a      	str	r2, [r3, #32]
}
 80085f4:	bf00      	nop
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	40012c00 	.word	0x40012c00
 8008604:	40013400 	.word	0x40013400
 8008608:	40015000 	.word	0x40015000
 800860c:	40014000 	.word	0x40014000
 8008610:	40014400 	.word	0x40014400
 8008614:	40014800 	.word	0x40014800

08008618 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800864a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	021b      	lsls	r3, r3, #8
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	4313      	orrs	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	031b      	lsls	r3, r3, #12
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	4313      	orrs	r3, r2
 8008672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a2c      	ldr	r2, [pc, #176]	@ (8008728 <TIM_OC4_SetConfig+0x110>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d007      	beq.n	800868c <TIM_OC4_SetConfig+0x74>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a2b      	ldr	r2, [pc, #172]	@ (800872c <TIM_OC4_SetConfig+0x114>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d003      	beq.n	800868c <TIM_OC4_SetConfig+0x74>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a2a      	ldr	r2, [pc, #168]	@ (8008730 <TIM_OC4_SetConfig+0x118>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d10d      	bne.n	80086a8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	031b      	lsls	r3, r3, #12
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	4313      	orrs	r3, r2
 800869e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008728 <TIM_OC4_SetConfig+0x110>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d013      	beq.n	80086d8 <TIM_OC4_SetConfig+0xc0>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a1e      	ldr	r2, [pc, #120]	@ (800872c <TIM_OC4_SetConfig+0x114>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d00f      	beq.n	80086d8 <TIM_OC4_SetConfig+0xc0>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a1e      	ldr	r2, [pc, #120]	@ (8008734 <TIM_OC4_SetConfig+0x11c>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d00b      	beq.n	80086d8 <TIM_OC4_SetConfig+0xc0>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a1d      	ldr	r2, [pc, #116]	@ (8008738 <TIM_OC4_SetConfig+0x120>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d007      	beq.n	80086d8 <TIM_OC4_SetConfig+0xc0>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a1c      	ldr	r2, [pc, #112]	@ (800873c <TIM_OC4_SetConfig+0x124>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d003      	beq.n	80086d8 <TIM_OC4_SetConfig+0xc0>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a17      	ldr	r2, [pc, #92]	@ (8008730 <TIM_OC4_SetConfig+0x118>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d113      	bne.n	8008700 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086de:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086e6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	695b      	ldr	r3, [r3, #20]
 80086ec:	019b      	lsls	r3, r3, #6
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	019b      	lsls	r3, r3, #6
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	621a      	str	r2, [r3, #32]
}
 800871a:	bf00      	nop
 800871c:	371c      	adds	r7, #28
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	40012c00 	.word	0x40012c00
 800872c:	40013400 	.word	0x40013400
 8008730:	40015000 	.word	0x40015000
 8008734:	40014000 	.word	0x40014000
 8008738:	40014400 	.word	0x40014400
 800873c:	40014800 	.word	0x40014800

08008740 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008740:	b480      	push	{r7}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800876e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008784:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	041b      	lsls	r3, r3, #16
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	4313      	orrs	r3, r2
 8008790:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a19      	ldr	r2, [pc, #100]	@ (80087fc <TIM_OC5_SetConfig+0xbc>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d013      	beq.n	80087c2 <TIM_OC5_SetConfig+0x82>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a18      	ldr	r2, [pc, #96]	@ (8008800 <TIM_OC5_SetConfig+0xc0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d00f      	beq.n	80087c2 <TIM_OC5_SetConfig+0x82>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a17      	ldr	r2, [pc, #92]	@ (8008804 <TIM_OC5_SetConfig+0xc4>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d00b      	beq.n	80087c2 <TIM_OC5_SetConfig+0x82>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a16      	ldr	r2, [pc, #88]	@ (8008808 <TIM_OC5_SetConfig+0xc8>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d007      	beq.n	80087c2 <TIM_OC5_SetConfig+0x82>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a15      	ldr	r2, [pc, #84]	@ (800880c <TIM_OC5_SetConfig+0xcc>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d003      	beq.n	80087c2 <TIM_OC5_SetConfig+0x82>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a14      	ldr	r2, [pc, #80]	@ (8008810 <TIM_OC5_SetConfig+0xd0>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d109      	bne.n	80087d6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	021b      	lsls	r3, r3, #8
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	621a      	str	r2, [r3, #32]
}
 80087f0:	bf00      	nop
 80087f2:	371c      	adds	r7, #28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	40012c00 	.word	0x40012c00
 8008800:	40013400 	.word	0x40013400
 8008804:	40014000 	.word	0x40014000
 8008808:	40014400 	.word	0x40014400
 800880c:	40014800 	.word	0x40014800
 8008810:	40015000 	.word	0x40015000

08008814 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800883a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	021b      	lsls	r3, r3, #8
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	4313      	orrs	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800885a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	051b      	lsls	r3, r3, #20
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	4313      	orrs	r3, r2
 8008866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a1a      	ldr	r2, [pc, #104]	@ (80088d4 <TIM_OC6_SetConfig+0xc0>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d013      	beq.n	8008898 <TIM_OC6_SetConfig+0x84>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a19      	ldr	r2, [pc, #100]	@ (80088d8 <TIM_OC6_SetConfig+0xc4>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d00f      	beq.n	8008898 <TIM_OC6_SetConfig+0x84>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a18      	ldr	r2, [pc, #96]	@ (80088dc <TIM_OC6_SetConfig+0xc8>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d00b      	beq.n	8008898 <TIM_OC6_SetConfig+0x84>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a17      	ldr	r2, [pc, #92]	@ (80088e0 <TIM_OC6_SetConfig+0xcc>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d007      	beq.n	8008898 <TIM_OC6_SetConfig+0x84>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a16      	ldr	r2, [pc, #88]	@ (80088e4 <TIM_OC6_SetConfig+0xd0>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d003      	beq.n	8008898 <TIM_OC6_SetConfig+0x84>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a15      	ldr	r2, [pc, #84]	@ (80088e8 <TIM_OC6_SetConfig+0xd4>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d109      	bne.n	80088ac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800889e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	029b      	lsls	r3, r3, #10
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	621a      	str	r2, [r3, #32]
}
 80088c6:	bf00      	nop
 80088c8:	371c      	adds	r7, #28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	40012c00 	.word	0x40012c00
 80088d8:	40013400 	.word	0x40013400
 80088dc:	40014000 	.word	0x40014000
 80088e0:	40014400 	.word	0x40014400
 80088e4:	40014800 	.word	0x40014800
 80088e8:	40015000 	.word	0x40015000

080088ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800890c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	4313      	orrs	r3, r2
 8008916:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800891e:	f023 0307 	bic.w	r3, r3, #7
 8008922:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	4313      	orrs	r3, r2
 800892c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	4a56      	ldr	r2, [pc, #344]	@ (8008a94 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800893c:	4293      	cmp	r3, r2
 800893e:	f000 80a2 	beq.w	8008a86 <TIM_SlaveTimer_SetConfig+0x19a>
 8008942:	4a54      	ldr	r2, [pc, #336]	@ (8008a94 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8008944:	4293      	cmp	r3, r2
 8008946:	f200 809b 	bhi.w	8008a80 <TIM_SlaveTimer_SetConfig+0x194>
 800894a:	4a53      	ldr	r2, [pc, #332]	@ (8008a98 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800894c:	4293      	cmp	r3, r2
 800894e:	f000 809a 	beq.w	8008a86 <TIM_SlaveTimer_SetConfig+0x19a>
 8008952:	4a51      	ldr	r2, [pc, #324]	@ (8008a98 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8008954:	4293      	cmp	r3, r2
 8008956:	f200 8093 	bhi.w	8008a80 <TIM_SlaveTimer_SetConfig+0x194>
 800895a:	4a50      	ldr	r2, [pc, #320]	@ (8008a9c <TIM_SlaveTimer_SetConfig+0x1b0>)
 800895c:	4293      	cmp	r3, r2
 800895e:	f000 8092 	beq.w	8008a86 <TIM_SlaveTimer_SetConfig+0x19a>
 8008962:	4a4e      	ldr	r2, [pc, #312]	@ (8008a9c <TIM_SlaveTimer_SetConfig+0x1b0>)
 8008964:	4293      	cmp	r3, r2
 8008966:	f200 808b 	bhi.w	8008a80 <TIM_SlaveTimer_SetConfig+0x194>
 800896a:	4a4d      	ldr	r2, [pc, #308]	@ (8008aa0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800896c:	4293      	cmp	r3, r2
 800896e:	f000 808a 	beq.w	8008a86 <TIM_SlaveTimer_SetConfig+0x19a>
 8008972:	4a4b      	ldr	r2, [pc, #300]	@ (8008aa0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008974:	4293      	cmp	r3, r2
 8008976:	f200 8083 	bhi.w	8008a80 <TIM_SlaveTimer_SetConfig+0x194>
 800897a:	4a4a      	ldr	r2, [pc, #296]	@ (8008aa4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800897c:	4293      	cmp	r3, r2
 800897e:	f000 8082 	beq.w	8008a86 <TIM_SlaveTimer_SetConfig+0x19a>
 8008982:	4a48      	ldr	r2, [pc, #288]	@ (8008aa4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d87b      	bhi.n	8008a80 <TIM_SlaveTimer_SetConfig+0x194>
 8008988:	4a47      	ldr	r2, [pc, #284]	@ (8008aa8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d07b      	beq.n	8008a86 <TIM_SlaveTimer_SetConfig+0x19a>
 800898e:	4a46      	ldr	r2, [pc, #280]	@ (8008aa8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d875      	bhi.n	8008a80 <TIM_SlaveTimer_SetConfig+0x194>
 8008994:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008998:	d075      	beq.n	8008a86 <TIM_SlaveTimer_SetConfig+0x19a>
 800899a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800899e:	d86f      	bhi.n	8008a80 <TIM_SlaveTimer_SetConfig+0x194>
 80089a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089a4:	d06f      	beq.n	8008a86 <TIM_SlaveTimer_SetConfig+0x19a>
 80089a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089aa:	d869      	bhi.n	8008a80 <TIM_SlaveTimer_SetConfig+0x194>
 80089ac:	2b70      	cmp	r3, #112	@ 0x70
 80089ae:	d01a      	beq.n	80089e6 <TIM_SlaveTimer_SetConfig+0xfa>
 80089b0:	2b70      	cmp	r3, #112	@ 0x70
 80089b2:	d865      	bhi.n	8008a80 <TIM_SlaveTimer_SetConfig+0x194>
 80089b4:	2b60      	cmp	r3, #96	@ 0x60
 80089b6:	d059      	beq.n	8008a6c <TIM_SlaveTimer_SetConfig+0x180>
 80089b8:	2b60      	cmp	r3, #96	@ 0x60
 80089ba:	d861      	bhi.n	8008a80 <TIM_SlaveTimer_SetConfig+0x194>
 80089bc:	2b50      	cmp	r3, #80	@ 0x50
 80089be:	d04b      	beq.n	8008a58 <TIM_SlaveTimer_SetConfig+0x16c>
 80089c0:	2b50      	cmp	r3, #80	@ 0x50
 80089c2:	d85d      	bhi.n	8008a80 <TIM_SlaveTimer_SetConfig+0x194>
 80089c4:	2b40      	cmp	r3, #64	@ 0x40
 80089c6:	d019      	beq.n	80089fc <TIM_SlaveTimer_SetConfig+0x110>
 80089c8:	2b40      	cmp	r3, #64	@ 0x40
 80089ca:	d859      	bhi.n	8008a80 <TIM_SlaveTimer_SetConfig+0x194>
 80089cc:	2b30      	cmp	r3, #48	@ 0x30
 80089ce:	d05a      	beq.n	8008a86 <TIM_SlaveTimer_SetConfig+0x19a>
 80089d0:	2b30      	cmp	r3, #48	@ 0x30
 80089d2:	d855      	bhi.n	8008a80 <TIM_SlaveTimer_SetConfig+0x194>
 80089d4:	2b20      	cmp	r3, #32
 80089d6:	d056      	beq.n	8008a86 <TIM_SlaveTimer_SetConfig+0x19a>
 80089d8:	2b20      	cmp	r3, #32
 80089da:	d851      	bhi.n	8008a80 <TIM_SlaveTimer_SetConfig+0x194>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d052      	beq.n	8008a86 <TIM_SlaveTimer_SetConfig+0x19a>
 80089e0:	2b10      	cmp	r3, #16
 80089e2:	d050      	beq.n	8008a86 <TIM_SlaveTimer_SetConfig+0x19a>
 80089e4:	e04c      	b.n	8008a80 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80089f6:	f000 f9ff 	bl	8008df8 <TIM_ETR_SetConfig>
      break;
 80089fa:	e045      	b.n	8008a88 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b05      	cmp	r3, #5
 8008a02:	d004      	beq.n	8008a0e <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008a08:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8008a0c:	d101      	bne.n	8008a12 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e03b      	b.n	8008a8a <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6a1b      	ldr	r3, [r3, #32]
 8008a18:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6a1a      	ldr	r2, [r3, #32]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f022 0201 	bic.w	r2, r2, #1
 8008a28:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a38:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	011b      	lsls	r3, r3, #4
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	621a      	str	r2, [r3, #32]
      break;
 8008a56:	e017      	b.n	8008a88 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a64:	461a      	mov	r2, r3
 8008a66:	f000 f895 	bl	8008b94 <TIM_TI1_ConfigInputStage>
      break;
 8008a6a:	e00d      	b.n	8008a88 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a78:	461a      	mov	r2, r3
 8008a7a:	f000 f8f7 	bl	8008c6c <TIM_TI2_ConfigInputStage>
      break;
 8008a7e:	e003      	b.n	8008a88 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	75fb      	strb	r3, [r7, #23]
      break;
 8008a84:	e000      	b.n	8008a88 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8008a86:	bf00      	nop
  }

  return status;
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	00100070 	.word	0x00100070
 8008a98:	00100060 	.word	0x00100060
 8008a9c:	00100050 	.word	0x00100050
 8008aa0:	00100040 	.word	0x00100040
 8008aa4:	00100030 	.word	0x00100030
 8008aa8:	00100020 	.word	0x00100020

08008aac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	f023 0201 	bic.w	r2, r3, #1
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	4a28      	ldr	r2, [pc, #160]	@ (8008b78 <TIM_TI1_SetConfig+0xcc>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d01b      	beq.n	8008b12 <TIM_TI1_SetConfig+0x66>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ae0:	d017      	beq.n	8008b12 <TIM_TI1_SetConfig+0x66>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4a25      	ldr	r2, [pc, #148]	@ (8008b7c <TIM_TI1_SetConfig+0xd0>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d013      	beq.n	8008b12 <TIM_TI1_SetConfig+0x66>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4a24      	ldr	r2, [pc, #144]	@ (8008b80 <TIM_TI1_SetConfig+0xd4>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d00f      	beq.n	8008b12 <TIM_TI1_SetConfig+0x66>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	4a23      	ldr	r2, [pc, #140]	@ (8008b84 <TIM_TI1_SetConfig+0xd8>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d00b      	beq.n	8008b12 <TIM_TI1_SetConfig+0x66>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	4a22      	ldr	r2, [pc, #136]	@ (8008b88 <TIM_TI1_SetConfig+0xdc>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d007      	beq.n	8008b12 <TIM_TI1_SetConfig+0x66>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	4a21      	ldr	r2, [pc, #132]	@ (8008b8c <TIM_TI1_SetConfig+0xe0>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d003      	beq.n	8008b12 <TIM_TI1_SetConfig+0x66>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	4a20      	ldr	r2, [pc, #128]	@ (8008b90 <TIM_TI1_SetConfig+0xe4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d101      	bne.n	8008b16 <TIM_TI1_SetConfig+0x6a>
 8008b12:	2301      	movs	r3, #1
 8008b14:	e000      	b.n	8008b18 <TIM_TI1_SetConfig+0x6c>
 8008b16:	2300      	movs	r3, #0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d008      	beq.n	8008b2e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	f023 0303 	bic.w	r3, r3, #3
 8008b22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	e003      	b.n	8008b36 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f043 0301 	orr.w	r3, r3, #1
 8008b34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	011b      	lsls	r3, r3, #4
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	f023 030a 	bic.w	r3, r3, #10
 8008b50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f003 030a 	and.w	r3, r3, #10
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	621a      	str	r2, [r3, #32]
}
 8008b6a:	bf00      	nop
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	40012c00 	.word	0x40012c00
 8008b7c:	40000400 	.word	0x40000400
 8008b80:	40000800 	.word	0x40000800
 8008b84:	40000c00 	.word	0x40000c00
 8008b88:	40013400 	.word	0x40013400
 8008b8c:	40014000 	.word	0x40014000
 8008b90:	40015000 	.word	0x40015000

08008b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6a1b      	ldr	r3, [r3, #32]
 8008ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	f023 0201 	bic.w	r2, r3, #1
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	011b      	lsls	r3, r3, #4
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f023 030a 	bic.w	r3, r3, #10
 8008bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	621a      	str	r2, [r3, #32]
}
 8008be6:	bf00      	nop
 8008be8:	371c      	adds	r7, #28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b087      	sub	sp, #28
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	60f8      	str	r0, [r7, #12]
 8008bfa:	60b9      	str	r1, [r7, #8]
 8008bfc:	607a      	str	r2, [r7, #4]
 8008bfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	f023 0210 	bic.w	r2, r3, #16
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	021b      	lsls	r3, r3, #8
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	031b      	lsls	r3, r3, #12
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c44:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	011b      	lsls	r3, r3, #4
 8008c4a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	621a      	str	r2, [r3, #32]
}
 8008c60:	bf00      	nop
 8008c62:	371c      	adds	r7, #28
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b087      	sub	sp, #28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	f023 0210 	bic.w	r2, r3, #16
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	031b      	lsls	r3, r3, #12
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	011b      	lsls	r3, r3, #4
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	621a      	str	r2, [r3, #32]
}
 8008cc0:	bf00      	nop
 8008cc2:	371c      	adds	r7, #28
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b087      	sub	sp, #28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6a1b      	ldr	r3, [r3, #32]
 8008ce4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f023 0303 	bic.w	r3, r3, #3
 8008cf8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d08:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	011b      	lsls	r3, r3, #4
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	021b      	lsls	r3, r3, #8
 8008d22:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	697a      	ldr	r2, [r7, #20]
 8008d36:	621a      	str	r2, [r3, #32]
}
 8008d38:	bf00      	nop
 8008d3a:	371c      	adds	r7, #28
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6a1b      	ldr	r3, [r3, #32]
 8008d5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d70:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	021b      	lsls	r3, r3, #8
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d82:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	031b      	lsls	r3, r3, #12
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008d96:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	031b      	lsls	r3, r3, #12
 8008d9c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	621a      	str	r2, [r3, #32]
}
 8008db2:	bf00      	nop
 8008db4:	371c      	adds	r7, #28
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b085      	sub	sp, #20
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008dd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	f043 0307 	orr.w	r3, r3, #7
 8008de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	609a      	str	r2, [r3, #8]
}
 8008dec:	bf00      	nop
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
 8008e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	021a      	lsls	r2, r3, #8
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	431a      	orrs	r2, r3
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	609a      	str	r2, [r3, #8]
}
 8008e2c:	bf00      	nop
 8008e2e:	371c      	adds	r7, #28
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f003 031f 	and.w	r3, r3, #31
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6a1a      	ldr	r2, [r3, #32]
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	43db      	mvns	r3, r3
 8008e5a:	401a      	ands	r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6a1a      	ldr	r2, [r3, #32]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f003 031f 	and.w	r3, r3, #31
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e70:	431a      	orrs	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	621a      	str	r2, [r3, #32]
}
 8008e76:	bf00      	nop
 8008e78:	371c      	adds	r7, #28
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
	...

08008e84 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a26      	ldr	r2, [pc, #152]	@ (8008f28 <TIM_ResetCallback+0xa4>)
 8008e90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a25      	ldr	r2, [pc, #148]	@ (8008f2c <TIM_ResetCallback+0xa8>)
 8008e98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a24      	ldr	r2, [pc, #144]	@ (8008f30 <TIM_ResetCallback+0xac>)
 8008ea0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a23      	ldr	r2, [pc, #140]	@ (8008f34 <TIM_ResetCallback+0xb0>)
 8008ea8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a22      	ldr	r2, [pc, #136]	@ (8008f38 <TIM_ResetCallback+0xb4>)
 8008eb0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a21      	ldr	r2, [pc, #132]	@ (8008f3c <TIM_ResetCallback+0xb8>)
 8008eb8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a20      	ldr	r2, [pc, #128]	@ (8008f40 <TIM_ResetCallback+0xbc>)
 8008ec0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8008f44 <TIM_ResetCallback+0xc0>)
 8008ec8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a1e      	ldr	r2, [pc, #120]	@ (8008f48 <TIM_ResetCallback+0xc4>)
 8008ed0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8008f4c <TIM_ResetCallback+0xc8>)
 8008ed8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a1c      	ldr	r2, [pc, #112]	@ (8008f50 <TIM_ResetCallback+0xcc>)
 8008ee0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8008f54 <TIM_ResetCallback+0xd0>)
 8008ee8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a1a      	ldr	r2, [pc, #104]	@ (8008f58 <TIM_ResetCallback+0xd4>)
 8008ef0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a19      	ldr	r2, [pc, #100]	@ (8008f5c <TIM_ResetCallback+0xd8>)
 8008ef8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a18      	ldr	r2, [pc, #96]	@ (8008f60 <TIM_ResetCallback+0xdc>)
 8008f00:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a17      	ldr	r2, [pc, #92]	@ (8008f64 <TIM_ResetCallback+0xe0>)
 8008f08:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a16      	ldr	r2, [pc, #88]	@ (8008f68 <TIM_ResetCallback+0xe4>)
 8008f10:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a15      	ldr	r2, [pc, #84]	@ (8008f6c <TIM_ResetCallback+0xe8>)
 8008f18:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	08003c5d 	.word	0x08003c5d
 8008f2c:	08007dbd 	.word	0x08007dbd
 8008f30:	08007e35 	.word	0x08007e35
 8008f34:	08007e49 	.word	0x08007e49
 8008f38:	08007de5 	.word	0x08007de5
 8008f3c:	08007df9 	.word	0x08007df9
 8008f40:	08007dd1 	.word	0x08007dd1
 8008f44:	08007e0d 	.word	0x08007e0d
 8008f48:	08007e21 	.word	0x08007e21
 8008f4c:	08007e5d 	.word	0x08007e5d
 8008f50:	080091c5 	.word	0x080091c5
 8008f54:	080091d9 	.word	0x080091d9
 8008f58:	080091ed 	.word	0x080091ed
 8008f5c:	08009201 	.word	0x08009201
 8008f60:	08009215 	.word	0x08009215
 8008f64:	08009229 	.word	0x08009229
 8008f68:	0800923d 	.word	0x0800923d
 8008f6c:	08009251 	.word	0x08009251

08008f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d101      	bne.n	8008f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f84:	2302      	movs	r3, #2
 8008f86:	e074      	b.n	8009072 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2202      	movs	r2, #2
 8008f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a34      	ldr	r2, [pc, #208]	@ (8009080 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d009      	beq.n	8008fc6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a33      	ldr	r2, [pc, #204]	@ (8009084 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d004      	beq.n	8008fc6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a31      	ldr	r2, [pc, #196]	@ (8009088 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d108      	bne.n	8008fd8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008fcc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fe2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a21      	ldr	r2, [pc, #132]	@ (8009080 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d022      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009008:	d01d      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a1f      	ldr	r2, [pc, #124]	@ (800908c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d018      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a1d      	ldr	r2, [pc, #116]	@ (8009090 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d013      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a1c      	ldr	r2, [pc, #112]	@ (8009094 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d00e      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a15      	ldr	r2, [pc, #84]	@ (8009084 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d009      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a18      	ldr	r2, [pc, #96]	@ (8009098 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d004      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a11      	ldr	r2, [pc, #68]	@ (8009088 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d10c      	bne.n	8009060 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800904c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	4313      	orrs	r3, r2
 8009056:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	40012c00 	.word	0x40012c00
 8009084:	40013400 	.word	0x40013400
 8009088:	40015000 	.word	0x40015000
 800908c:	40000400 	.word	0x40000400
 8009090:	40000800 	.word	0x40000800
 8009094:	40000c00 	.word	0x40000c00
 8009098:	40014000 	.word	0x40014000

0800909c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d101      	bne.n	80090b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090b4:	2302      	movs	r3, #2
 80090b6:	e078      	b.n	80091aa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	4313      	orrs	r3, r2
 80090da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	4313      	orrs	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	4313      	orrs	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911e:	4313      	orrs	r3, r2
 8009120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	041b      	lsls	r3, r3, #16
 800912e:	4313      	orrs	r3, r2
 8009130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	69db      	ldr	r3, [r3, #28]
 800913c:	4313      	orrs	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a1c      	ldr	r2, [pc, #112]	@ (80091b8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d009      	beq.n	800915e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a1b      	ldr	r2, [pc, #108]	@ (80091bc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d004      	beq.n	800915e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a19      	ldr	r2, [pc, #100]	@ (80091c0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d11c      	bne.n	8009198 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009168:	051b      	lsls	r3, r3, #20
 800916a:	4313      	orrs	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	4313      	orrs	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009186:	4313      	orrs	r3, r2
 8009188:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009194:	4313      	orrs	r3, r2
 8009196:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	40012c00 	.word	0x40012c00
 80091bc:	40013400 	.word	0x40013400
 80091c0:	40015000 	.word	0x40015000

080091c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e050      	b.n	8009318 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800927c:	2b00      	cmp	r3, #0
 800927e:	d114      	bne.n	80092aa <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 fde5 	bl	8009e58 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009294:	2b00      	cmp	r3, #0
 8009296:	d103      	bne.n	80092a0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a21      	ldr	r2, [pc, #132]	@ (8009320 <HAL_UART_Init+0xbc>)
 800929c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2224      	movs	r2, #36	@ 0x24
 80092ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f022 0201 	bic.w	r2, r2, #1
 80092c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f001 f912 	bl	800a4f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fe13 	bl	8009efc <UART_SetConfig>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d101      	bne.n	80092e0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e01b      	b.n	8009318 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80092ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	689a      	ldr	r2, [r3, #8]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80092fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f042 0201 	orr.w	r2, r2, #1
 800930e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f001 f991 	bl	800a638 <UART_CheckIdleState>
 8009316:	4603      	mov	r3, r0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	0800473d 	.word	0x0800473d

08009324 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009324:	b480      	push	{r7}
 8009326:	b087      	sub	sp, #28
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	460b      	mov	r3, r1
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d109      	bne.n	8009350 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009342:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e09c      	b.n	800948a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009356:	2b20      	cmp	r3, #32
 8009358:	d16c      	bne.n	8009434 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800935a:	7afb      	ldrb	r3, [r7, #11]
 800935c:	2b0c      	cmp	r3, #12
 800935e:	d85e      	bhi.n	800941e <HAL_UART_RegisterCallback+0xfa>
 8009360:	a201      	add	r2, pc, #4	@ (adr r2, 8009368 <HAL_UART_RegisterCallback+0x44>)
 8009362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009366:	bf00      	nop
 8009368:	0800939d 	.word	0x0800939d
 800936c:	080093a7 	.word	0x080093a7
 8009370:	080093b1 	.word	0x080093b1
 8009374:	080093bb 	.word	0x080093bb
 8009378:	080093c5 	.word	0x080093c5
 800937c:	080093cf 	.word	0x080093cf
 8009380:	080093d9 	.word	0x080093d9
 8009384:	080093e3 	.word	0x080093e3
 8009388:	080093ed 	.word	0x080093ed
 800938c:	080093f7 	.word	0x080093f7
 8009390:	08009401 	.word	0x08009401
 8009394:	0800940b 	.word	0x0800940b
 8009398:	08009415 	.word	0x08009415
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80093a4:	e070      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80093ae:	e06b      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80093b8:	e066      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80093c2:	e061      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80093cc:	e05c      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80093d6:	e057      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80093e0:	e052      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80093ea:	e04d      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80093f4:	e048      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80093fe:	e043      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009408:	e03e      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009412:	e039      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800941c:	e034      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009424:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	75fb      	strb	r3, [r7, #23]
        break;
 8009432:	e029      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800943a:	2b00      	cmp	r3, #0
 800943c:	d11a      	bne.n	8009474 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800943e:	7afb      	ldrb	r3, [r7, #11]
 8009440:	2b0b      	cmp	r3, #11
 8009442:	d002      	beq.n	800944a <HAL_UART_RegisterCallback+0x126>
 8009444:	2b0c      	cmp	r3, #12
 8009446:	d005      	beq.n	8009454 <HAL_UART_RegisterCallback+0x130>
 8009448:	e009      	b.n	800945e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009452:	e019      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800945c:	e014      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009464:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	75fb      	strb	r3, [r7, #23]
        break;
 8009472:	e009      	b.n	8009488 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800947a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009488:	7dfb      	ldrb	r3, [r7, #23]
}
 800948a:	4618      	mov	r0, r3
 800948c:	371c      	adds	r7, #28
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop

08009498 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b08a      	sub	sp, #40	@ 0x28
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	4613      	mov	r3, r2
 80094a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ac:	2b20      	cmp	r3, #32
 80094ae:	d167      	bne.n	8009580 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d002      	beq.n	80094bc <HAL_UART_Transmit_DMA+0x24>
 80094b6:	88fb      	ldrh	r3, [r7, #6]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d101      	bne.n	80094c0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e060      	b.n	8009582 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	88fa      	ldrh	r2, [r7, #6]
 80094ca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	88fa      	ldrh	r2, [r7, #6]
 80094d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2221      	movs	r2, #33	@ 0x21
 80094e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d028      	beq.n	8009540 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094f2:	4a26      	ldr	r2, [pc, #152]	@ (800958c <HAL_UART_Transmit_DMA+0xf4>)
 80094f4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094fa:	4a25      	ldr	r2, [pc, #148]	@ (8009590 <HAL_UART_Transmit_DMA+0xf8>)
 80094fc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009502:	4a24      	ldr	r2, [pc, #144]	@ (8009594 <HAL_UART_Transmit_DMA+0xfc>)
 8009504:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800950a:	2200      	movs	r2, #0
 800950c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009516:	4619      	mov	r1, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3328      	adds	r3, #40	@ 0x28
 800951e:	461a      	mov	r2, r3
 8009520:	88fb      	ldrh	r3, [r7, #6]
 8009522:	f7fb fcd9 	bl	8004ed8 <HAL_DMA_Start_IT>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d009      	beq.n	8009540 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2210      	movs	r2, #16
 8009530:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2220      	movs	r2, #32
 8009538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e020      	b.n	8009582 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2240      	movs	r2, #64	@ 0x40
 8009546:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3308      	adds	r3, #8
 800954e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	e853 3f00 	ldrex	r3, [r3]
 8009556:	613b      	str	r3, [r7, #16]
   return(result);
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800955e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3308      	adds	r3, #8
 8009566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009568:	623a      	str	r2, [r7, #32]
 800956a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956c:	69f9      	ldr	r1, [r7, #28]
 800956e:	6a3a      	ldr	r2, [r7, #32]
 8009570:	e841 2300 	strex	r3, r2, [r1]
 8009574:	61bb      	str	r3, [r7, #24]
   return(result);
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1e5      	bne.n	8009548 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	e000      	b.n	8009582 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009580:	2302      	movs	r3, #2
  }
}
 8009582:	4618      	mov	r0, r3
 8009584:	3728      	adds	r7, #40	@ 0x28
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	0800ab03 	.word	0x0800ab03
 8009590:	0800aba1 	.word	0x0800aba1
 8009594:	0800ad3b 	.word	0x0800ad3b

08009598 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b08a      	sub	sp, #40	@ 0x28
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	4613      	mov	r3, r2
 80095a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095ac:	2b20      	cmp	r3, #32
 80095ae:	d137      	bne.n	8009620 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d002      	beq.n	80095bc <HAL_UART_Receive_DMA+0x24>
 80095b6:	88fb      	ldrh	r3, [r7, #6]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e030      	b.n	8009622 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a18      	ldr	r2, [pc, #96]	@ (800962c <HAL_UART_Receive_DMA+0x94>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d01f      	beq.n	8009610 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d018      	beq.n	8009610 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	e853 3f00 	ldrex	r3, [r3]
 80095ea:	613b      	str	r3, [r7, #16]
   return(result);
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80095f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	461a      	mov	r2, r3
 80095fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fc:	623b      	str	r3, [r7, #32]
 80095fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009600:	69f9      	ldr	r1, [r7, #28]
 8009602:	6a3a      	ldr	r2, [r7, #32]
 8009604:	e841 2300 	strex	r3, r2, [r1]
 8009608:	61bb      	str	r3, [r7, #24]
   return(result);
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e6      	bne.n	80095de <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009610:	88fb      	ldrh	r3, [r7, #6]
 8009612:	461a      	mov	r2, r3
 8009614:	68b9      	ldr	r1, [r7, #8]
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f001 f926 	bl	800a868 <UART_Start_Receive_DMA>
 800961c:	4603      	mov	r3, r0
 800961e:	e000      	b.n	8009622 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009620:	2302      	movs	r3, #2
  }
}
 8009622:	4618      	mov	r0, r3
 8009624:	3728      	adds	r7, #40	@ 0x28
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	40008000 	.word	0x40008000

08009630 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b0ba      	sub	sp, #232	@ 0xe8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009656:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800965a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800965e:	4013      	ands	r3, r2
 8009660:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009668:	2b00      	cmp	r3, #0
 800966a:	d11b      	bne.n	80096a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800966c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009670:	f003 0320 	and.w	r3, r3, #32
 8009674:	2b00      	cmp	r3, #0
 8009676:	d015      	beq.n	80096a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800967c:	f003 0320 	and.w	r3, r3, #32
 8009680:	2b00      	cmp	r3, #0
 8009682:	d105      	bne.n	8009690 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d009      	beq.n	80096a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009694:	2b00      	cmp	r3, #0
 8009696:	f000 8312 	beq.w	8009cbe <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	4798      	blx	r3
      }
      return;
 80096a2:	e30c      	b.n	8009cbe <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80096a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 8129 	beq.w	8009900 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80096ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80096b2:	4b90      	ldr	r3, [pc, #576]	@ (80098f4 <HAL_UART_IRQHandler+0x2c4>)
 80096b4:	4013      	ands	r3, r2
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d106      	bne.n	80096c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80096ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80096be:	4b8e      	ldr	r3, [pc, #568]	@ (80098f8 <HAL_UART_IRQHandler+0x2c8>)
 80096c0:	4013      	ands	r3, r2
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f000 811c 	beq.w	8009900 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d011      	beq.n	80096f8 <HAL_UART_IRQHandler+0xc8>
 80096d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00b      	beq.n	80096f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2201      	movs	r2, #1
 80096e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ee:	f043 0201 	orr.w	r2, r3, #1
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096fc:	f003 0302 	and.w	r3, r3, #2
 8009700:	2b00      	cmp	r3, #0
 8009702:	d011      	beq.n	8009728 <HAL_UART_IRQHandler+0xf8>
 8009704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00b      	beq.n	8009728 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2202      	movs	r2, #2
 8009716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800971e:	f043 0204 	orr.w	r2, r3, #4
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d011      	beq.n	8009758 <HAL_UART_IRQHandler+0x128>
 8009734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009738:	f003 0301 	and.w	r3, r3, #1
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00b      	beq.n	8009758 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2204      	movs	r2, #4
 8009746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800974e:	f043 0202 	orr.w	r2, r3, #2
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800975c:	f003 0308 	and.w	r3, r3, #8
 8009760:	2b00      	cmp	r3, #0
 8009762:	d017      	beq.n	8009794 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009768:	f003 0320 	and.w	r3, r3, #32
 800976c:	2b00      	cmp	r3, #0
 800976e:	d105      	bne.n	800977c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009770:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009774:	4b5f      	ldr	r3, [pc, #380]	@ (80098f4 <HAL_UART_IRQHandler+0x2c4>)
 8009776:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00b      	beq.n	8009794 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2208      	movs	r2, #8
 8009782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800978a:	f043 0208 	orr.w	r2, r3, #8
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800979c:	2b00      	cmp	r3, #0
 800979e:	d012      	beq.n	80097c6 <HAL_UART_IRQHandler+0x196>
 80097a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00c      	beq.n	80097c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097bc:	f043 0220 	orr.w	r2, r3, #32
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 8278 	beq.w	8009cc2 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097d6:	f003 0320 	and.w	r3, r3, #32
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d013      	beq.n	8009806 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097e2:	f003 0320 	and.w	r3, r3, #32
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d105      	bne.n	80097f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d007      	beq.n	8009806 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d003      	beq.n	8009806 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800980c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800981a:	2b40      	cmp	r3, #64	@ 0x40
 800981c:	d005      	beq.n	800982a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800981e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009822:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009826:	2b00      	cmp	r3, #0
 8009828:	d058      	beq.n	80098dc <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f001 f903 	bl	800aa36 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800983a:	2b40      	cmp	r3, #64	@ 0x40
 800983c:	d148      	bne.n	80098d0 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3308      	adds	r3, #8
 8009844:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009848:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800984c:	e853 3f00 	ldrex	r3, [r3]
 8009850:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009854:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009858:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800985c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3308      	adds	r3, #8
 8009866:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800986a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800986e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009872:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009876:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800987a:	e841 2300 	strex	r3, r2, [r1]
 800987e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1d9      	bne.n	800983e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009890:	2b00      	cmp	r3, #0
 8009892:	d017      	beq.n	80098c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800989a:	4a18      	ldr	r2, [pc, #96]	@ (80098fc <HAL_UART_IRQHandler+0x2cc>)
 800989c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fb fbeb 	bl	8005080 <HAL_DMA_Abort_IT>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d01f      	beq.n	80098f0 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80098be:	4610      	mov	r0, r2
 80098c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c2:	e015      	b.n	80098f0 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ce:	e00f      	b.n	80098f0 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098da:	e009      	b.n	80098f0 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80098ee:	e1e8      	b.n	8009cc2 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f0:	bf00      	nop
    return;
 80098f2:	e1e6      	b.n	8009cc2 <HAL_UART_IRQHandler+0x692>
 80098f4:	10000001 	.word	0x10000001
 80098f8:	04000120 	.word	0x04000120
 80098fc:	0800adbf 	.word	0x0800adbf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009904:	2b01      	cmp	r3, #1
 8009906:	f040 8176 	bne.w	8009bf6 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800990a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800990e:	f003 0310 	and.w	r3, r3, #16
 8009912:	2b00      	cmp	r3, #0
 8009914:	f000 816f 	beq.w	8009bf6 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800991c:	f003 0310 	and.w	r3, r3, #16
 8009920:	2b00      	cmp	r3, #0
 8009922:	f000 8168 	beq.w	8009bf6 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2210      	movs	r2, #16
 800992c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009938:	2b40      	cmp	r3, #64	@ 0x40
 800993a:	f040 80dc 	bne.w	8009af6 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800994c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 80b1 	beq.w	8009ab8 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800995c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009960:	429a      	cmp	r2, r3
 8009962:	f080 80a9 	bcs.w	8009ab8 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800996c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0320 	and.w	r3, r3, #32
 800997e:	2b00      	cmp	r3, #0
 8009980:	f040 8087 	bne.w	8009a92 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009990:	e853 3f00 	ldrex	r3, [r3]
 8009994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009998:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800999c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	461a      	mov	r2, r3
 80099aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80099ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80099be:	e841 2300 	strex	r3, r2, [r1]
 80099c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80099c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1da      	bne.n	8009984 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3308      	adds	r3, #8
 80099d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099d8:	e853 3f00 	ldrex	r3, [r3]
 80099dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80099de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099e0:	f023 0301 	bic.w	r3, r3, #1
 80099e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3308      	adds	r3, #8
 80099ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80099f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80099f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80099fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80099fe:	e841 2300 	strex	r3, r2, [r1]
 8009a02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1e1      	bne.n	80099ce <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	3308      	adds	r3, #8
 8009a10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a14:	e853 3f00 	ldrex	r3, [r3]
 8009a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3308      	adds	r3, #8
 8009a2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a36:	e841 2300 	strex	r3, r2, [r1]
 8009a3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1e3      	bne.n	8009a0a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2220      	movs	r2, #32
 8009a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a58:	e853 3f00 	ldrex	r3, [r3]
 8009a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a60:	f023 0310 	bic.w	r3, r3, #16
 8009a64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a7a:	e841 2300 	strex	r3, r2, [r1]
 8009a7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1e4      	bne.n	8009a50 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fb fa9e 	bl	8004fce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2202      	movs	r2, #2
 8009a96:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009aaa:	b292      	uxth	r2, r2
 8009aac:	1a8a      	subs	r2, r1, r2
 8009aae:	b292      	uxth	r2, r2
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009ab6:	e106      	b.n	8009cc6 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	f040 80ff 	bne.w	8009cc6 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0320 	and.w	r3, r3, #32
 8009ad6:	2b20      	cmp	r3, #32
 8009ad8:	f040 80f5 	bne.w	8009cc6 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2202      	movs	r2, #2
 8009ae0:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009aee:	4611      	mov	r1, r2
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	4798      	blx	r3
      return;
 8009af4:	e0e7      	b.n	8009cc6 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f000 80d9 	beq.w	8009cca <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8009b18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 80d4 	beq.w	8009cca <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2a:	e853 3f00 	ldrex	r3, [r3]
 8009b2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b4c:	e841 2300 	strex	r3, r2, [r1]
 8009b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e4      	bne.n	8009b22 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3308      	adds	r3, #8
 8009b5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b62:	e853 3f00 	ldrex	r3, [r3]
 8009b66:	623b      	str	r3, [r7, #32]
   return(result);
 8009b68:	6a3b      	ldr	r3, [r7, #32]
 8009b6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b6e:	f023 0301 	bic.w	r3, r3, #1
 8009b72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3308      	adds	r3, #8
 8009b7c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b80:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b88:	e841 2300 	strex	r3, r2, [r1]
 8009b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1e1      	bne.n	8009b58 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2220      	movs	r2, #32
 8009b98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	e853 3f00 	ldrex	r3, [r3]
 8009bb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f023 0310 	bic.w	r3, r3, #16
 8009bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009bca:	61fb      	str	r3, [r7, #28]
 8009bcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bce:	69b9      	ldr	r1, [r7, #24]
 8009bd0:	69fa      	ldr	r2, [r7, #28]
 8009bd2:	e841 2300 	strex	r3, r2, [r1]
 8009bd6:	617b      	str	r3, [r7, #20]
   return(result);
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1e4      	bne.n	8009ba8 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2202      	movs	r2, #2
 8009be2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009bea:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009bee:	4611      	mov	r1, r2
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bf4:	e069      	b.n	8009cca <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d010      	beq.n	8009c24 <HAL_UART_IRQHandler+0x5f4>
 8009c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00a      	beq.n	8009c24 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009c16:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c22:	e055      	b.n	8009cd0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d014      	beq.n	8009c5a <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d105      	bne.n	8009c48 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d008      	beq.n	8009c5a <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d03e      	beq.n	8009cce <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	4798      	blx	r3
    }
    return;
 8009c58:	e039      	b.n	8009cce <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d009      	beq.n	8009c7a <HAL_UART_IRQHandler+0x64a>
 8009c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f001 f8b7 	bl	800ade6 <UART_EndTransmit_IT>
    return;
 8009c78:	e02a      	b.n	8009cd0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00b      	beq.n	8009c9e <HAL_UART_IRQHandler+0x66e>
 8009c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c8a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d005      	beq.n	8009c9e <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c9c:	e018      	b.n	8009cd0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ca2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d012      	beq.n	8009cd0 <HAL_UART_IRQHandler+0x6a0>
 8009caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	da0e      	bge.n	8009cd0 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cbc:	e008      	b.n	8009cd0 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009cbe:	bf00      	nop
 8009cc0:	e006      	b.n	8009cd0 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009cc2:	bf00      	nop
 8009cc4:	e004      	b.n	8009cd0 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009cc6:	bf00      	nop
 8009cc8:	e002      	b.n	8009cd0 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009cca:	bf00      	nop
 8009ccc:	e000      	b.n	8009cd0 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009cce:	bf00      	nop
  }
}
 8009cd0:	37e8      	adds	r7, #232	@ 0xe8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop

08009cd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009d44:	bf00      	nop
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	460b      	mov	r3, r1
 8009d82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a09      	ldr	r2, [pc, #36]	@ (8009dc4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d009      	beq.n	8009db8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	430a      	orrs	r2, r1
 8009db6:	615a      	str	r2, [r3, #20]
  }
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	40008000 	.word	0x40008000

08009dc8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a18      	ldr	r2, [pc, #96]	@ (8009e38 <HAL_UART_EnableReceiverTimeout+0x70>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d027      	beq.n	8009e2a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009de0:	2b20      	cmp	r3, #32
 8009de2:	d120      	bne.n	8009e26 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d101      	bne.n	8009df2 <HAL_UART_EnableReceiverTimeout+0x2a>
 8009dee:	2302      	movs	r3, #2
 8009df0:	e01c      	b.n	8009e2c <HAL_UART_EnableReceiverTimeout+0x64>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2224      	movs	r2, #36	@ 0x24
 8009dfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009e10:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2220      	movs	r2, #32
 8009e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	e002      	b.n	8009e2c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009e26:	2302      	movs	r3, #2
 8009e28:	e000      	b.n	8009e2c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
  }
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr
 8009e38:	40008000 	.word	0x40008000

08009e3c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	370c      	adds	r7, #12
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr
	...

08009e58 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a1a      	ldr	r2, [pc, #104]	@ (8009ecc <UART_InitCallbacksToDefault+0x74>)
 8009e64:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a19      	ldr	r2, [pc, #100]	@ (8009ed0 <UART_InitCallbacksToDefault+0x78>)
 8009e6c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a18      	ldr	r2, [pc, #96]	@ (8009ed4 <UART_InitCallbacksToDefault+0x7c>)
 8009e74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a17      	ldr	r2, [pc, #92]	@ (8009ed8 <UART_InitCallbacksToDefault+0x80>)
 8009e7c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a16      	ldr	r2, [pc, #88]	@ (8009edc <UART_InitCallbacksToDefault+0x84>)
 8009e84:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a15      	ldr	r2, [pc, #84]	@ (8009ee0 <UART_InitCallbacksToDefault+0x88>)
 8009e8c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a14      	ldr	r2, [pc, #80]	@ (8009ee4 <UART_InitCallbacksToDefault+0x8c>)
 8009e94:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a13      	ldr	r2, [pc, #76]	@ (8009ee8 <UART_InitCallbacksToDefault+0x90>)
 8009e9c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a12      	ldr	r2, [pc, #72]	@ (8009eec <UART_InitCallbacksToDefault+0x94>)
 8009ea4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a11      	ldr	r2, [pc, #68]	@ (8009ef0 <UART_InitCallbacksToDefault+0x98>)
 8009eac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a10      	ldr	r2, [pc, #64]	@ (8009ef4 <UART_InitCallbacksToDefault+0x9c>)
 8009eb4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a0f      	ldr	r2, [pc, #60]	@ (8009ef8 <UART_InitCallbacksToDefault+0xa0>)
 8009ebc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr
 8009ecc:	08009ced 	.word	0x08009ced
 8009ed0:	08009cd9 	.word	0x08009cd9
 8009ed4:	08009d15 	.word	0x08009d15
 8009ed8:	08009d01 	.word	0x08009d01
 8009edc:	08009d29 	.word	0x08009d29
 8009ee0:	08009d3d 	.word	0x08009d3d
 8009ee4:	08009d51 	.word	0x08009d51
 8009ee8:	08009d65 	.word	0x08009d65
 8009eec:	0800ae41 	.word	0x0800ae41
 8009ef0:	0800ae55 	.word	0x0800ae55
 8009ef4:	0800ae69 	.word	0x0800ae69
 8009ef8:	08009d79 	.word	0x08009d79

08009efc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f00:	b08c      	sub	sp, #48	@ 0x30
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f06:	2300      	movs	r3, #0
 8009f08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	689a      	ldr	r2, [r3, #8]
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	431a      	orrs	r2, r3
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	69db      	ldr	r3, [r3, #28]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	4baa      	ldr	r3, [pc, #680]	@ (800a1d4 <UART_SetConfig+0x2d8>)
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	6812      	ldr	r2, [r2, #0]
 8009f32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f34:	430b      	orrs	r3, r1
 8009f36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	68da      	ldr	r2, [r3, #12]
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a9f      	ldr	r2, [pc, #636]	@ (800a1d8 <UART_SetConfig+0x2dc>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d004      	beq.n	8009f68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f64:	4313      	orrs	r3, r2
 8009f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009f72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	6812      	ldr	r2, [r2, #0]
 8009f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f7c:	430b      	orrs	r3, r1
 8009f7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f86:	f023 010f 	bic.w	r1, r3, #15
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	430a      	orrs	r2, r1
 8009f94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a90      	ldr	r2, [pc, #576]	@ (800a1dc <UART_SetConfig+0x2e0>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d125      	bne.n	8009fec <UART_SetConfig+0xf0>
 8009fa0:	4b8f      	ldr	r3, [pc, #572]	@ (800a1e0 <UART_SetConfig+0x2e4>)
 8009fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fa6:	f003 0303 	and.w	r3, r3, #3
 8009faa:	2b03      	cmp	r3, #3
 8009fac:	d81a      	bhi.n	8009fe4 <UART_SetConfig+0xe8>
 8009fae:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb4 <UART_SetConfig+0xb8>)
 8009fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb4:	08009fc5 	.word	0x08009fc5
 8009fb8:	08009fd5 	.word	0x08009fd5
 8009fbc:	08009fcd 	.word	0x08009fcd
 8009fc0:	08009fdd 	.word	0x08009fdd
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fca:	e116      	b.n	800a1fa <UART_SetConfig+0x2fe>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fd2:	e112      	b.n	800a1fa <UART_SetConfig+0x2fe>
 8009fd4:	2304      	movs	r3, #4
 8009fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fda:	e10e      	b.n	800a1fa <UART_SetConfig+0x2fe>
 8009fdc:	2308      	movs	r3, #8
 8009fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fe2:	e10a      	b.n	800a1fa <UART_SetConfig+0x2fe>
 8009fe4:	2310      	movs	r3, #16
 8009fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fea:	e106      	b.n	800a1fa <UART_SetConfig+0x2fe>
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a7c      	ldr	r2, [pc, #496]	@ (800a1e4 <UART_SetConfig+0x2e8>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d138      	bne.n	800a068 <UART_SetConfig+0x16c>
 8009ff6:	4b7a      	ldr	r3, [pc, #488]	@ (800a1e0 <UART_SetConfig+0x2e4>)
 8009ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ffc:	f003 030c 	and.w	r3, r3, #12
 800a000:	2b0c      	cmp	r3, #12
 800a002:	d82d      	bhi.n	800a060 <UART_SetConfig+0x164>
 800a004:	a201      	add	r2, pc, #4	@ (adr r2, 800a00c <UART_SetConfig+0x110>)
 800a006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00a:	bf00      	nop
 800a00c:	0800a041 	.word	0x0800a041
 800a010:	0800a061 	.word	0x0800a061
 800a014:	0800a061 	.word	0x0800a061
 800a018:	0800a061 	.word	0x0800a061
 800a01c:	0800a051 	.word	0x0800a051
 800a020:	0800a061 	.word	0x0800a061
 800a024:	0800a061 	.word	0x0800a061
 800a028:	0800a061 	.word	0x0800a061
 800a02c:	0800a049 	.word	0x0800a049
 800a030:	0800a061 	.word	0x0800a061
 800a034:	0800a061 	.word	0x0800a061
 800a038:	0800a061 	.word	0x0800a061
 800a03c:	0800a059 	.word	0x0800a059
 800a040:	2300      	movs	r3, #0
 800a042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a046:	e0d8      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a048:	2302      	movs	r3, #2
 800a04a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a04e:	e0d4      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a050:	2304      	movs	r3, #4
 800a052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a056:	e0d0      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a058:	2308      	movs	r3, #8
 800a05a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a05e:	e0cc      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a060:	2310      	movs	r3, #16
 800a062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a066:	e0c8      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a5e      	ldr	r2, [pc, #376]	@ (800a1e8 <UART_SetConfig+0x2ec>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d125      	bne.n	800a0be <UART_SetConfig+0x1c2>
 800a072:	4b5b      	ldr	r3, [pc, #364]	@ (800a1e0 <UART_SetConfig+0x2e4>)
 800a074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a078:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a07c:	2b30      	cmp	r3, #48	@ 0x30
 800a07e:	d016      	beq.n	800a0ae <UART_SetConfig+0x1b2>
 800a080:	2b30      	cmp	r3, #48	@ 0x30
 800a082:	d818      	bhi.n	800a0b6 <UART_SetConfig+0x1ba>
 800a084:	2b20      	cmp	r3, #32
 800a086:	d00a      	beq.n	800a09e <UART_SetConfig+0x1a2>
 800a088:	2b20      	cmp	r3, #32
 800a08a:	d814      	bhi.n	800a0b6 <UART_SetConfig+0x1ba>
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <UART_SetConfig+0x19a>
 800a090:	2b10      	cmp	r3, #16
 800a092:	d008      	beq.n	800a0a6 <UART_SetConfig+0x1aa>
 800a094:	e00f      	b.n	800a0b6 <UART_SetConfig+0x1ba>
 800a096:	2300      	movs	r3, #0
 800a098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a09c:	e0ad      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a09e:	2302      	movs	r3, #2
 800a0a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0a4:	e0a9      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a0a6:	2304      	movs	r3, #4
 800a0a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ac:	e0a5      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a0ae:	2308      	movs	r3, #8
 800a0b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0b4:	e0a1      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a0b6:	2310      	movs	r3, #16
 800a0b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0bc:	e09d      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a4a      	ldr	r2, [pc, #296]	@ (800a1ec <UART_SetConfig+0x2f0>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d125      	bne.n	800a114 <UART_SetConfig+0x218>
 800a0c8:	4b45      	ldr	r3, [pc, #276]	@ (800a1e0 <UART_SetConfig+0x2e4>)
 800a0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a0d2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a0d4:	d016      	beq.n	800a104 <UART_SetConfig+0x208>
 800a0d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a0d8:	d818      	bhi.n	800a10c <UART_SetConfig+0x210>
 800a0da:	2b80      	cmp	r3, #128	@ 0x80
 800a0dc:	d00a      	beq.n	800a0f4 <UART_SetConfig+0x1f8>
 800a0de:	2b80      	cmp	r3, #128	@ 0x80
 800a0e0:	d814      	bhi.n	800a10c <UART_SetConfig+0x210>
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d002      	beq.n	800a0ec <UART_SetConfig+0x1f0>
 800a0e6:	2b40      	cmp	r3, #64	@ 0x40
 800a0e8:	d008      	beq.n	800a0fc <UART_SetConfig+0x200>
 800a0ea:	e00f      	b.n	800a10c <UART_SetConfig+0x210>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0f2:	e082      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0fa:	e07e      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a0fc:	2304      	movs	r3, #4
 800a0fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a102:	e07a      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a104:	2308      	movs	r3, #8
 800a106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a10a:	e076      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a10c:	2310      	movs	r3, #16
 800a10e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a112:	e072      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a35      	ldr	r2, [pc, #212]	@ (800a1f0 <UART_SetConfig+0x2f4>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d12a      	bne.n	800a174 <UART_SetConfig+0x278>
 800a11e:	4b30      	ldr	r3, [pc, #192]	@ (800a1e0 <UART_SetConfig+0x2e4>)
 800a120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a124:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a128:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a12c:	d01a      	beq.n	800a164 <UART_SetConfig+0x268>
 800a12e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a132:	d81b      	bhi.n	800a16c <UART_SetConfig+0x270>
 800a134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a138:	d00c      	beq.n	800a154 <UART_SetConfig+0x258>
 800a13a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a13e:	d815      	bhi.n	800a16c <UART_SetConfig+0x270>
 800a140:	2b00      	cmp	r3, #0
 800a142:	d003      	beq.n	800a14c <UART_SetConfig+0x250>
 800a144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a148:	d008      	beq.n	800a15c <UART_SetConfig+0x260>
 800a14a:	e00f      	b.n	800a16c <UART_SetConfig+0x270>
 800a14c:	2300      	movs	r3, #0
 800a14e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a152:	e052      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a154:	2302      	movs	r3, #2
 800a156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a15a:	e04e      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a15c:	2304      	movs	r3, #4
 800a15e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a162:	e04a      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a164:	2308      	movs	r3, #8
 800a166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a16a:	e046      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a16c:	2310      	movs	r3, #16
 800a16e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a172:	e042      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a17      	ldr	r2, [pc, #92]	@ (800a1d8 <UART_SetConfig+0x2dc>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d13a      	bne.n	800a1f4 <UART_SetConfig+0x2f8>
 800a17e:	4b18      	ldr	r3, [pc, #96]	@ (800a1e0 <UART_SetConfig+0x2e4>)
 800a180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a184:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a188:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a18c:	d01a      	beq.n	800a1c4 <UART_SetConfig+0x2c8>
 800a18e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a192:	d81b      	bhi.n	800a1cc <UART_SetConfig+0x2d0>
 800a194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a198:	d00c      	beq.n	800a1b4 <UART_SetConfig+0x2b8>
 800a19a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a19e:	d815      	bhi.n	800a1cc <UART_SetConfig+0x2d0>
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d003      	beq.n	800a1ac <UART_SetConfig+0x2b0>
 800a1a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1a8:	d008      	beq.n	800a1bc <UART_SetConfig+0x2c0>
 800a1aa:	e00f      	b.n	800a1cc <UART_SetConfig+0x2d0>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1b2:	e022      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ba:	e01e      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a1bc:	2304      	movs	r3, #4
 800a1be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1c2:	e01a      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a1c4:	2308      	movs	r3, #8
 800a1c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ca:	e016      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a1cc:	2310      	movs	r3, #16
 800a1ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1d2:	e012      	b.n	800a1fa <UART_SetConfig+0x2fe>
 800a1d4:	cfff69f3 	.word	0xcfff69f3
 800a1d8:	40008000 	.word	0x40008000
 800a1dc:	40013800 	.word	0x40013800
 800a1e0:	40021000 	.word	0x40021000
 800a1e4:	40004400 	.word	0x40004400
 800a1e8:	40004800 	.word	0x40004800
 800a1ec:	40004c00 	.word	0x40004c00
 800a1f0:	40005000 	.word	0x40005000
 800a1f4:	2310      	movs	r3, #16
 800a1f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4aae      	ldr	r2, [pc, #696]	@ (800a4b8 <UART_SetConfig+0x5bc>)
 800a200:	4293      	cmp	r3, r2
 800a202:	f040 8097 	bne.w	800a334 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a206:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a20a:	2b08      	cmp	r3, #8
 800a20c:	d823      	bhi.n	800a256 <UART_SetConfig+0x35a>
 800a20e:	a201      	add	r2, pc, #4	@ (adr r2, 800a214 <UART_SetConfig+0x318>)
 800a210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a214:	0800a239 	.word	0x0800a239
 800a218:	0800a257 	.word	0x0800a257
 800a21c:	0800a241 	.word	0x0800a241
 800a220:	0800a257 	.word	0x0800a257
 800a224:	0800a247 	.word	0x0800a247
 800a228:	0800a257 	.word	0x0800a257
 800a22c:	0800a257 	.word	0x0800a257
 800a230:	0800a257 	.word	0x0800a257
 800a234:	0800a24f 	.word	0x0800a24f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a238:	f7fc f812 	bl	8006260 <HAL_RCC_GetPCLK1Freq>
 800a23c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a23e:	e010      	b.n	800a262 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a240:	4b9e      	ldr	r3, [pc, #632]	@ (800a4bc <UART_SetConfig+0x5c0>)
 800a242:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a244:	e00d      	b.n	800a262 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a246:	f7fb ff9d 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 800a24a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a24c:	e009      	b.n	800a262 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a24e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a254:	e005      	b.n	800a262 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a256:	2300      	movs	r3, #0
 800a258:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a260:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 8130 	beq.w	800a4ca <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a26e:	4a94      	ldr	r2, [pc, #592]	@ (800a4c0 <UART_SetConfig+0x5c4>)
 800a270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a274:	461a      	mov	r2, r3
 800a276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a278:	fbb3 f3f2 	udiv	r3, r3, r2
 800a27c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	685a      	ldr	r2, [r3, #4]
 800a282:	4613      	mov	r3, r2
 800a284:	005b      	lsls	r3, r3, #1
 800a286:	4413      	add	r3, r2
 800a288:	69ba      	ldr	r2, [r7, #24]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d305      	bcc.n	800a29a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a294:	69ba      	ldr	r2, [r7, #24]
 800a296:	429a      	cmp	r2, r3
 800a298:	d903      	bls.n	800a2a2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2a0:	e113      	b.n	800a4ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	60bb      	str	r3, [r7, #8]
 800a2a8:	60fa      	str	r2, [r7, #12]
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ae:	4a84      	ldr	r2, [pc, #528]	@ (800a4c0 <UART_SetConfig+0x5c4>)
 800a2b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	603b      	str	r3, [r7, #0]
 800a2ba:	607a      	str	r2, [r7, #4]
 800a2bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2c4:	f7f6 fd5c 	bl	8000d80 <__aeabi_uldivmod>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	f04f 0200 	mov.w	r2, #0
 800a2d4:	f04f 0300 	mov.w	r3, #0
 800a2d8:	020b      	lsls	r3, r1, #8
 800a2da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a2de:	0202      	lsls	r2, r0, #8
 800a2e0:	6979      	ldr	r1, [r7, #20]
 800a2e2:	6849      	ldr	r1, [r1, #4]
 800a2e4:	0849      	lsrs	r1, r1, #1
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	eb12 0804 	adds.w	r8, r2, r4
 800a2f0:	eb43 0905 	adc.w	r9, r3, r5
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	469a      	mov	sl, r3
 800a2fc:	4693      	mov	fp, r2
 800a2fe:	4652      	mov	r2, sl
 800a300:	465b      	mov	r3, fp
 800a302:	4640      	mov	r0, r8
 800a304:	4649      	mov	r1, r9
 800a306:	f7f6 fd3b 	bl	8000d80 <__aeabi_uldivmod>
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	4613      	mov	r3, r2
 800a310:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a312:	6a3b      	ldr	r3, [r7, #32]
 800a314:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a318:	d308      	bcc.n	800a32c <UART_SetConfig+0x430>
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a320:	d204      	bcs.n	800a32c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	6a3a      	ldr	r2, [r7, #32]
 800a328:	60da      	str	r2, [r3, #12]
 800a32a:	e0ce      	b.n	800a4ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a332:	e0ca      	b.n	800a4ca <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	69db      	ldr	r3, [r3, #28]
 800a338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a33c:	d166      	bne.n	800a40c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a33e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a342:	2b08      	cmp	r3, #8
 800a344:	d827      	bhi.n	800a396 <UART_SetConfig+0x49a>
 800a346:	a201      	add	r2, pc, #4	@ (adr r2, 800a34c <UART_SetConfig+0x450>)
 800a348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34c:	0800a371 	.word	0x0800a371
 800a350:	0800a379 	.word	0x0800a379
 800a354:	0800a381 	.word	0x0800a381
 800a358:	0800a397 	.word	0x0800a397
 800a35c:	0800a387 	.word	0x0800a387
 800a360:	0800a397 	.word	0x0800a397
 800a364:	0800a397 	.word	0x0800a397
 800a368:	0800a397 	.word	0x0800a397
 800a36c:	0800a38f 	.word	0x0800a38f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a370:	f7fb ff76 	bl	8006260 <HAL_RCC_GetPCLK1Freq>
 800a374:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a376:	e014      	b.n	800a3a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a378:	f7fb ff88 	bl	800628c <HAL_RCC_GetPCLK2Freq>
 800a37c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a37e:	e010      	b.n	800a3a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a380:	4b4e      	ldr	r3, [pc, #312]	@ (800a4bc <UART_SetConfig+0x5c0>)
 800a382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a384:	e00d      	b.n	800a3a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a386:	f7fb fefd 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 800a38a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a38c:	e009      	b.n	800a3a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a38e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a392:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a394:	e005      	b.n	800a3a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a396:	2300      	movs	r3, #0
 800a398:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a3a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 8090 	beq.w	800a4ca <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ae:	4a44      	ldr	r2, [pc, #272]	@ (800a4c0 <UART_SetConfig+0x5c4>)
 800a3b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3bc:	005a      	lsls	r2, r3, #1
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	085b      	lsrs	r3, r3, #1
 800a3c4:	441a      	add	r2, r3
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3d0:	6a3b      	ldr	r3, [r7, #32]
 800a3d2:	2b0f      	cmp	r3, #15
 800a3d4:	d916      	bls.n	800a404 <UART_SetConfig+0x508>
 800a3d6:	6a3b      	ldr	r3, [r7, #32]
 800a3d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3dc:	d212      	bcs.n	800a404 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3de:	6a3b      	ldr	r3, [r7, #32]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	f023 030f 	bic.w	r3, r3, #15
 800a3e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	085b      	lsrs	r3, r3, #1
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	f003 0307 	and.w	r3, r3, #7
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	8bfb      	ldrh	r3, [r7, #30]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	8bfa      	ldrh	r2, [r7, #30]
 800a400:	60da      	str	r2, [r3, #12]
 800a402:	e062      	b.n	800a4ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a40a:	e05e      	b.n	800a4ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a40c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a410:	2b08      	cmp	r3, #8
 800a412:	d828      	bhi.n	800a466 <UART_SetConfig+0x56a>
 800a414:	a201      	add	r2, pc, #4	@ (adr r2, 800a41c <UART_SetConfig+0x520>)
 800a416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41a:	bf00      	nop
 800a41c:	0800a441 	.word	0x0800a441
 800a420:	0800a449 	.word	0x0800a449
 800a424:	0800a451 	.word	0x0800a451
 800a428:	0800a467 	.word	0x0800a467
 800a42c:	0800a457 	.word	0x0800a457
 800a430:	0800a467 	.word	0x0800a467
 800a434:	0800a467 	.word	0x0800a467
 800a438:	0800a467 	.word	0x0800a467
 800a43c:	0800a45f 	.word	0x0800a45f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a440:	f7fb ff0e 	bl	8006260 <HAL_RCC_GetPCLK1Freq>
 800a444:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a446:	e014      	b.n	800a472 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a448:	f7fb ff20 	bl	800628c <HAL_RCC_GetPCLK2Freq>
 800a44c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a44e:	e010      	b.n	800a472 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a450:	4b1a      	ldr	r3, [pc, #104]	@ (800a4bc <UART_SetConfig+0x5c0>)
 800a452:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a454:	e00d      	b.n	800a472 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a456:	f7fb fe95 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 800a45a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a45c:	e009      	b.n	800a472 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a45e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a462:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a464:	e005      	b.n	800a472 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a466:	2300      	movs	r3, #0
 800a468:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a470:	bf00      	nop
    }

    if (pclk != 0U)
 800a472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a474:	2b00      	cmp	r3, #0
 800a476:	d028      	beq.n	800a4ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a47c:	4a10      	ldr	r2, [pc, #64]	@ (800a4c0 <UART_SetConfig+0x5c4>)
 800a47e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a482:	461a      	mov	r2, r3
 800a484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a486:	fbb3 f2f2 	udiv	r2, r3, r2
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	085b      	lsrs	r3, r3, #1
 800a490:	441a      	add	r2, r3
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	fbb2 f3f3 	udiv	r3, r2, r3
 800a49a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a49c:	6a3b      	ldr	r3, [r7, #32]
 800a49e:	2b0f      	cmp	r3, #15
 800a4a0:	d910      	bls.n	800a4c4 <UART_SetConfig+0x5c8>
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4a8:	d20c      	bcs.n	800a4c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4aa:	6a3b      	ldr	r3, [r7, #32]
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	60da      	str	r2, [r3, #12]
 800a4b4:	e009      	b.n	800a4ca <UART_SetConfig+0x5ce>
 800a4b6:	bf00      	nop
 800a4b8:	40008000 	.word	0x40008000
 800a4bc:	00f42400 	.word	0x00f42400
 800a4c0:	0800bc7c 	.word	0x0800bc7c
      }
      else
      {
        ret = HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a4e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3730      	adds	r7, #48	@ 0x30
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a4f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a500:	f003 0308 	and.w	r3, r3, #8
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00a      	beq.n	800a51e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	430a      	orrs	r2, r1
 800a51c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00a      	beq.n	800a540 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	430a      	orrs	r2, r1
 800a53e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a544:	f003 0302 	and.w	r3, r3, #2
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00a      	beq.n	800a562 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	430a      	orrs	r2, r1
 800a560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a566:	f003 0304 	and.w	r3, r3, #4
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00a      	beq.n	800a584 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	430a      	orrs	r2, r1
 800a582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a588:	f003 0310 	and.w	r3, r3, #16
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00a      	beq.n	800a5a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5aa:	f003 0320 	and.w	r3, r3, #32
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00a      	beq.n	800a5c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	430a      	orrs	r2, r1
 800a5c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d01a      	beq.n	800a60a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5f2:	d10a      	bne.n	800a60a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	430a      	orrs	r2, r1
 800a608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a60e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00a      	beq.n	800a62c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	430a      	orrs	r2, r1
 800a62a:	605a      	str	r2, [r3, #4]
  }
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b098      	sub	sp, #96	@ 0x60
 800a63c:	af02      	add	r7, sp, #8
 800a63e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a648:	f7fa fa82 	bl	8004b50 <HAL_GetTick>
 800a64c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 0308 	and.w	r3, r3, #8
 800a658:	2b08      	cmp	r3, #8
 800a65a:	d12f      	bne.n	800a6bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a65c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a660:	9300      	str	r3, [sp, #0]
 800a662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a664:	2200      	movs	r2, #0
 800a666:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f88e 	bl	800a78c <UART_WaitOnFlagUntilTimeout>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d022      	beq.n	800a6bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67e:	e853 3f00 	ldrex	r3, [r3]
 800a682:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a686:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a68a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	461a      	mov	r2, r3
 800a692:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a694:	647b      	str	r3, [r7, #68]	@ 0x44
 800a696:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a698:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a69a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a69c:	e841 2300 	strex	r3, r2, [r1]
 800a6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d1e6      	bne.n	800a676 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	e063      	b.n	800a784 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 0304 	and.w	r3, r3, #4
 800a6c6:	2b04      	cmp	r3, #4
 800a6c8:	d149      	bne.n	800a75e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 f857 	bl	800a78c <UART_WaitOnFlagUntilTimeout>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d03c      	beq.n	800a75e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ec:	e853 3f00 	ldrex	r3, [r3]
 800a6f0:	623b      	str	r3, [r7, #32]
   return(result);
 800a6f2:	6a3b      	ldr	r3, [r7, #32]
 800a6f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a702:	633b      	str	r3, [r7, #48]	@ 0x30
 800a704:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a706:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a70a:	e841 2300 	strex	r3, r2, [r1]
 800a70e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1e6      	bne.n	800a6e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3308      	adds	r3, #8
 800a71c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	e853 3f00 	ldrex	r3, [r3]
 800a724:	60fb      	str	r3, [r7, #12]
   return(result);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f023 0301 	bic.w	r3, r3, #1
 800a72c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3308      	adds	r3, #8
 800a734:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a736:	61fa      	str	r2, [r7, #28]
 800a738:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73a:	69b9      	ldr	r1, [r7, #24]
 800a73c:	69fa      	ldr	r2, [r7, #28]
 800a73e:	e841 2300 	strex	r3, r2, [r1]
 800a742:	617b      	str	r3, [r7, #20]
   return(result);
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1e5      	bne.n	800a716 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2220      	movs	r2, #32
 800a74e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e012      	b.n	800a784 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2220      	movs	r2, #32
 800a762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2220      	movs	r2, #32
 800a76a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3758      	adds	r7, #88	@ 0x58
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	603b      	str	r3, [r7, #0]
 800a798:	4613      	mov	r3, r2
 800a79a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a79c:	e04f      	b.n	800a83e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a4:	d04b      	beq.n	800a83e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7a6:	f7fa f9d3 	bl	8004b50 <HAL_GetTick>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	69ba      	ldr	r2, [r7, #24]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d302      	bcc.n	800a7bc <UART_WaitOnFlagUntilTimeout+0x30>
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d101      	bne.n	800a7c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e04e      	b.n	800a85e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f003 0304 	and.w	r3, r3, #4
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d037      	beq.n	800a83e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	2b80      	cmp	r3, #128	@ 0x80
 800a7d2:	d034      	beq.n	800a83e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	2b40      	cmp	r3, #64	@ 0x40
 800a7d8:	d031      	beq.n	800a83e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	69db      	ldr	r3, [r3, #28]
 800a7e0:	f003 0308 	and.w	r3, r3, #8
 800a7e4:	2b08      	cmp	r3, #8
 800a7e6:	d110      	bne.n	800a80a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2208      	movs	r2, #8
 800a7ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f000 f920 	bl	800aa36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2208      	movs	r2, #8
 800a7fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	e029      	b.n	800a85e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	69db      	ldr	r3, [r3, #28]
 800a810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a818:	d111      	bne.n	800a83e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a822:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f000 f906 	bl	800aa36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2220      	movs	r2, #32
 800a82e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a83a:	2303      	movs	r3, #3
 800a83c:	e00f      	b.n	800a85e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	69da      	ldr	r2, [r3, #28]
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	4013      	ands	r3, r2
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	bf0c      	ite	eq
 800a84e:	2301      	moveq	r3, #1
 800a850:	2300      	movne	r3, #0
 800a852:	b2db      	uxtb	r3, r3
 800a854:	461a      	mov	r2, r3
 800a856:	79fb      	ldrb	r3, [r7, #7]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d0a0      	beq.n	800a79e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
	...

0800a868 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b096      	sub	sp, #88	@ 0x58
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	4613      	mov	r3, r2
 800a874:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	88fa      	ldrh	r2, [r7, #6]
 800a880:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2222      	movs	r2, #34	@ 0x22
 800a890:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d02d      	beq.n	800a8fa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8a4:	4a40      	ldr	r2, [pc, #256]	@ (800a9a8 <UART_Start_Receive_DMA+0x140>)
 800a8a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8ae:	4a3f      	ldr	r2, [pc, #252]	@ (800a9ac <UART_Start_Receive_DMA+0x144>)
 800a8b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8b8:	4a3d      	ldr	r2, [pc, #244]	@ (800a9b0 <UART_Start_Receive_DMA+0x148>)
 800a8ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3324      	adds	r3, #36	@ 0x24
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8d8:	461a      	mov	r2, r3
 800a8da:	88fb      	ldrh	r3, [r7, #6]
 800a8dc:	f7fa fafc 	bl	8004ed8 <HAL_DMA_Start_IT>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d009      	beq.n	800a8fa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2210      	movs	r2, #16
 800a8ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2220      	movs	r2, #32
 800a8f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e051      	b.n	800a99e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d018      	beq.n	800a934 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a90a:	e853 3f00 	ldrex	r3, [r3]
 800a90e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a916:	657b      	str	r3, [r7, #84]	@ 0x54
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	461a      	mov	r2, r3
 800a91e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a920:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a922:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a924:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a926:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a928:	e841 2300 	strex	r3, r2, [r1]
 800a92c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a92e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1e6      	bne.n	800a902 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	3308      	adds	r3, #8
 800a93a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93e:	e853 3f00 	ldrex	r3, [r3]
 800a942:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a946:	f043 0301 	orr.w	r3, r3, #1
 800a94a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3308      	adds	r3, #8
 800a952:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a954:	637a      	str	r2, [r7, #52]	@ 0x34
 800a956:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a958:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a95a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a95c:	e841 2300 	strex	r3, r2, [r1]
 800a960:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1e5      	bne.n	800a934 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3308      	adds	r3, #8
 800a96e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	e853 3f00 	ldrex	r3, [r3]
 800a976:	613b      	str	r3, [r7, #16]
   return(result);
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a97e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3308      	adds	r3, #8
 800a986:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a988:	623a      	str	r2, [r7, #32]
 800a98a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98c:	69f9      	ldr	r1, [r7, #28]
 800a98e:	6a3a      	ldr	r2, [r7, #32]
 800a990:	e841 2300 	strex	r3, r2, [r1]
 800a994:	61bb      	str	r3, [r7, #24]
   return(result);
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1e5      	bne.n	800a968 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3758      	adds	r7, #88	@ 0x58
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	0800abc1 	.word	0x0800abc1
 800a9ac:	0800acf5 	.word	0x0800acf5
 800a9b0:	0800ad3b 	.word	0x0800ad3b

0800a9b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b08f      	sub	sp, #60	@ 0x3c
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c2:	6a3b      	ldr	r3, [r7, #32]
 800a9c4:	e853 3f00 	ldrex	r3, [r3]
 800a9c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a9d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9dc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9e2:	e841 2300 	strex	r3, r2, [r1]
 800a9e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d1e6      	bne.n	800a9bc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	3308      	adds	r3, #8
 800a9f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	e853 3f00 	ldrex	r3, [r3]
 800a9fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aa04:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	3308      	adds	r3, #8
 800aa0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa0e:	61ba      	str	r2, [r7, #24]
 800aa10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa12:	6979      	ldr	r1, [r7, #20]
 800aa14:	69ba      	ldr	r2, [r7, #24]
 800aa16:	e841 2300 	strex	r3, r2, [r1]
 800aa1a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1e5      	bne.n	800a9ee <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2220      	movs	r2, #32
 800aa26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800aa2a:	bf00      	nop
 800aa2c:	373c      	adds	r7, #60	@ 0x3c
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b095      	sub	sp, #84	@ 0x54
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa46:	e853 3f00 	ldrex	r3, [r3]
 800aa4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	461a      	mov	r2, r3
 800aa5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa5c:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa64:	e841 2300 	strex	r3, r2, [r1]
 800aa68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1e6      	bne.n	800aa3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3308      	adds	r3, #8
 800aa76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa78:	6a3b      	ldr	r3, [r7, #32]
 800aa7a:	e853 3f00 	ldrex	r3, [r3]
 800aa7e:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa86:	f023 0301 	bic.w	r3, r3, #1
 800aa8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3308      	adds	r3, #8
 800aa92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa9c:	e841 2300 	strex	r3, r2, [r1]
 800aaa0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1e3      	bne.n	800aa70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d118      	bne.n	800aae2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	e853 3f00 	ldrex	r3, [r3]
 800aabc:	60bb      	str	r3, [r7, #8]
   return(result);
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	f023 0310 	bic.w	r3, r3, #16
 800aac4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	461a      	mov	r2, r3
 800aacc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aace:	61bb      	str	r3, [r7, #24]
 800aad0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad2:	6979      	ldr	r1, [r7, #20]
 800aad4:	69ba      	ldr	r2, [r7, #24]
 800aad6:	e841 2300 	strex	r3, r2, [r1]
 800aada:	613b      	str	r3, [r7, #16]
   return(result);
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e6      	bne.n	800aab0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2220      	movs	r2, #32
 800aae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aaf6:	bf00      	nop
 800aaf8:	3754      	adds	r7, #84	@ 0x54
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b090      	sub	sp, #64	@ 0x40
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab0e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0320 	and.w	r3, r3, #32
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d137      	bne.n	800ab8e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ab1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab20:	2200      	movs	r2, #0
 800ab22:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3308      	adds	r3, #8
 800ab2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab30:	e853 3f00 	ldrex	r3, [r3]
 800ab34:	623b      	str	r3, [r7, #32]
   return(result);
 800ab36:	6a3b      	ldr	r3, [r7, #32]
 800ab38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ab3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	3308      	adds	r3, #8
 800ab44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab46:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab4e:	e841 2300 	strex	r3, r2, [r1]
 800ab52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1e5      	bne.n	800ab26 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	e853 3f00 	ldrex	r3, [r3]
 800ab66:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	461a      	mov	r2, r3
 800ab76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab78:	61fb      	str	r3, [r7, #28]
 800ab7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7c:	69b9      	ldr	r1, [r7, #24]
 800ab7e:	69fa      	ldr	r2, [r7, #28]
 800ab80:	e841 2300 	strex	r3, r2, [r1]
 800ab84:	617b      	str	r3, [r7, #20]
   return(result);
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1e6      	bne.n	800ab5a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab8c:	e004      	b.n	800ab98 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800ab8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ab94:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ab96:	4798      	blx	r3
}
 800ab98:	bf00      	nop
 800ab9a:	3740      	adds	r7, #64	@ 0x40
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abb8:	bf00      	nop
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b09c      	sub	sp, #112	@ 0x70
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abcc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 0320 	and.w	r3, r3, #32
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d171      	bne.n	800acc0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800abdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abde:	2200      	movs	r2, #0
 800abe0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abec:	e853 3f00 	ldrex	r3, [r3]
 800abf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800abf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800abfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	461a      	mov	r2, r3
 800ac00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac02:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ac08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac0a:	e841 2300 	strex	r3, r2, [r1]
 800ac0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ac10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1e6      	bne.n	800abe4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	3308      	adds	r3, #8
 800ac1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac20:	e853 3f00 	ldrex	r3, [r3]
 800ac24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac28:	f023 0301 	bic.w	r3, r3, #1
 800ac2c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	3308      	adds	r3, #8
 800ac34:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ac36:	647a      	str	r2, [r7, #68]	@ 0x44
 800ac38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac3e:	e841 2300 	strex	r3, r2, [r1]
 800ac42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1e5      	bne.n	800ac16 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	3308      	adds	r3, #8
 800ac50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac54:	e853 3f00 	ldrex	r3, [r3]
 800ac58:	623b      	str	r3, [r7, #32]
   return(result);
 800ac5a:	6a3b      	ldr	r3, [r7, #32]
 800ac5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac60:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	3308      	adds	r3, #8
 800ac68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ac6a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac72:	e841 2300 	strex	r3, r2, [r1]
 800ac76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1e5      	bne.n	800ac4a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac80:	2220      	movs	r2, #32
 800ac82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d118      	bne.n	800acc0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	e853 3f00 	ldrex	r3, [r3]
 800ac9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f023 0310 	bic.w	r3, r3, #16
 800aca2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aca4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	461a      	mov	r2, r3
 800acaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acac:	61fb      	str	r3, [r7, #28]
 800acae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb0:	69b9      	ldr	r1, [r7, #24]
 800acb2:	69fa      	ldr	r2, [r7, #28]
 800acb4:	e841 2300 	strex	r3, r2, [r1]
 800acb8:	617b      	str	r3, [r7, #20]
   return(result);
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1e6      	bne.n	800ac8e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acc2:	2200      	movs	r2, #0
 800acc4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acca:	2b01      	cmp	r3, #1
 800accc:	d109      	bne.n	800ace2 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800acce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800acd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800acd6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800acda:	4611      	mov	r1, r2
 800acdc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800acde:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ace0:	e004      	b.n	800acec <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800ace2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ace4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ace8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800acea:	4798      	blx	r3
}
 800acec:	bf00      	nop
 800acee:	3770      	adds	r7, #112	@ 0x70
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad00:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2201      	movs	r2, #1
 800ad06:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d10b      	bne.n	800ad28 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ad1c:	0852      	lsrs	r2, r2, #1
 800ad1e:	b292      	uxth	r2, r2
 800ad20:	4611      	mov	r1, r2
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad26:	e004      	b.n	800ad32 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	4798      	blx	r3
}
 800ad32:	bf00      	nop
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b086      	sub	sp, #24
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad46:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad56:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad62:	2b80      	cmp	r3, #128	@ 0x80
 800ad64:	d109      	bne.n	800ad7a <UART_DMAError+0x40>
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	2b21      	cmp	r3, #33	@ 0x21
 800ad6a:	d106      	bne.n	800ad7a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ad74:	6978      	ldr	r0, [r7, #20]
 800ad76:	f7ff fe1d 	bl	800a9b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad84:	2b40      	cmp	r3, #64	@ 0x40
 800ad86:	d109      	bne.n	800ad9c <UART_DMAError+0x62>
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b22      	cmp	r3, #34	@ 0x22
 800ad8c:	d106      	bne.n	800ad9c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ad96:	6978      	ldr	r0, [r7, #20]
 800ad98:	f7ff fe4d 	bl	800aa36 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ada2:	f043 0210 	orr.w	r2, r3, #16
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800adb2:	6978      	ldr	r0, [r7, #20]
 800adb4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adb6:	bf00      	nop
 800adb8:	3718      	adds	r7, #24
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b084      	sub	sp, #16
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2200      	movs	r2, #0
 800add0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adde:	bf00      	nop
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b088      	sub	sp, #32
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	e853 3f00 	ldrex	r3, [r3]
 800adfa:	60bb      	str	r3, [r7, #8]
   return(result);
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae02:	61fb      	str	r3, [r7, #28]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	461a      	mov	r2, r3
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	61bb      	str	r3, [r7, #24]
 800ae0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae10:	6979      	ldr	r1, [r7, #20]
 800ae12:	69ba      	ldr	r2, [r7, #24]
 800ae14:	e841 2300 	strex	r3, r2, [r1]
 800ae18:	613b      	str	r3, [r7, #16]
   return(result);
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1e6      	bne.n	800adee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2220      	movs	r2, #32
 800ae24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae38:	bf00      	nop
 800ae3a:	3720      	adds	r7, #32
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d101      	bne.n	800ae92 <HAL_UARTEx_DisableFifoMode+0x16>
 800ae8e:	2302      	movs	r3, #2
 800ae90:	e027      	b.n	800aee2 <HAL_UARTEx_DisableFifoMode+0x66>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2224      	movs	r2, #36	@ 0x24
 800ae9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f022 0201 	bic.w	r2, r2, #1
 800aeb8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aec0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2220      	movs	r2, #32
 800aed4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr

0800aeee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d101      	bne.n	800af06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af02:	2302      	movs	r3, #2
 800af04:	e02d      	b.n	800af62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2201      	movs	r2, #1
 800af0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2224      	movs	r2, #36	@ 0x24
 800af12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f022 0201 	bic.w	r2, r2, #1
 800af2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	683a      	ldr	r2, [r7, #0]
 800af3e:	430a      	orrs	r2, r1
 800af40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f850 	bl	800afe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2220      	movs	r2, #32
 800af54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b084      	sub	sp, #16
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
 800af72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d101      	bne.n	800af82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af7e:	2302      	movs	r3, #2
 800af80:	e02d      	b.n	800afde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2201      	movs	r2, #1
 800af86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2224      	movs	r2, #36	@ 0x24
 800af8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f022 0201 	bic.w	r2, r2, #1
 800afa8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	430a      	orrs	r2, r1
 800afbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 f812 	bl	800afe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2220      	movs	r2, #32
 800afd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
	...

0800afe8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d108      	bne.n	800b00a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b008:	e031      	b.n	800b06e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b00a:	2308      	movs	r3, #8
 800b00c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b00e:	2308      	movs	r3, #8
 800b010:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	0e5b      	lsrs	r3, r3, #25
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	f003 0307 	and.w	r3, r3, #7
 800b020:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	0f5b      	lsrs	r3, r3, #29
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	f003 0307 	and.w	r3, r3, #7
 800b030:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b032:	7bbb      	ldrb	r3, [r7, #14]
 800b034:	7b3a      	ldrb	r2, [r7, #12]
 800b036:	4911      	ldr	r1, [pc, #68]	@ (800b07c <UARTEx_SetNbDataToProcess+0x94>)
 800b038:	5c8a      	ldrb	r2, [r1, r2]
 800b03a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b03e:	7b3a      	ldrb	r2, [r7, #12]
 800b040:	490f      	ldr	r1, [pc, #60]	@ (800b080 <UARTEx_SetNbDataToProcess+0x98>)
 800b042:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b044:	fb93 f3f2 	sdiv	r3, r3, r2
 800b048:	b29a      	uxth	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b050:	7bfb      	ldrb	r3, [r7, #15]
 800b052:	7b7a      	ldrb	r2, [r7, #13]
 800b054:	4909      	ldr	r1, [pc, #36]	@ (800b07c <UARTEx_SetNbDataToProcess+0x94>)
 800b056:	5c8a      	ldrb	r2, [r1, r2]
 800b058:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b05c:	7b7a      	ldrb	r2, [r7, #13]
 800b05e:	4908      	ldr	r1, [pc, #32]	@ (800b080 <UARTEx_SetNbDataToProcess+0x98>)
 800b060:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b062:	fb93 f3f2 	sdiv	r3, r3, r2
 800b066:	b29a      	uxth	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b06e:	bf00      	nop
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	0800bc94 	.word	0x0800bc94
 800b080:	0800bc9c 	.word	0x0800bc9c

0800b084 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	ed93 7a06 	vldr	s14, [r3, #24]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	edd3 7a07 	vldr	s15, [r3, #28]
 800b09a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	edd3 7a08 	vldr	s15, [r3, #32]
 800b0a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	edd3 7a06 	vldr	s15, [r3, #24]
 800b0b4:	eeb1 7a67 	vneg.f32	s14, s15
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	edd3 7a08 	vldr	s15, [r3, #32]
 800b0be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b0c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a1a      	ldr	r2, [r3, #32]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d006      	beq.n	800b0e8 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	330c      	adds	r3, #12
 800b0de:	220c      	movs	r2, #12
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 f804 	bl	800b0f0 <memset>
  }

}
 800b0e8:	bf00      	nop
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <memset>:
 800b0f0:	4402      	add	r2, r0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d100      	bne.n	800b0fa <memset+0xa>
 800b0f8:	4770      	bx	lr
 800b0fa:	f803 1b01 	strb.w	r1, [r3], #1
 800b0fe:	e7f9      	b.n	800b0f4 <memset+0x4>

0800b100 <__libc_init_array>:
 800b100:	b570      	push	{r4, r5, r6, lr}
 800b102:	4d0d      	ldr	r5, [pc, #52]	@ (800b138 <__libc_init_array+0x38>)
 800b104:	4c0d      	ldr	r4, [pc, #52]	@ (800b13c <__libc_init_array+0x3c>)
 800b106:	1b64      	subs	r4, r4, r5
 800b108:	10a4      	asrs	r4, r4, #2
 800b10a:	2600      	movs	r6, #0
 800b10c:	42a6      	cmp	r6, r4
 800b10e:	d109      	bne.n	800b124 <__libc_init_array+0x24>
 800b110:	4d0b      	ldr	r5, [pc, #44]	@ (800b140 <__libc_init_array+0x40>)
 800b112:	4c0c      	ldr	r4, [pc, #48]	@ (800b144 <__libc_init_array+0x44>)
 800b114:	f000 fd9a 	bl	800bc4c <_init>
 800b118:	1b64      	subs	r4, r4, r5
 800b11a:	10a4      	asrs	r4, r4, #2
 800b11c:	2600      	movs	r6, #0
 800b11e:	42a6      	cmp	r6, r4
 800b120:	d105      	bne.n	800b12e <__libc_init_array+0x2e>
 800b122:	bd70      	pop	{r4, r5, r6, pc}
 800b124:	f855 3b04 	ldr.w	r3, [r5], #4
 800b128:	4798      	blx	r3
 800b12a:	3601      	adds	r6, #1
 800b12c:	e7ee      	b.n	800b10c <__libc_init_array+0xc>
 800b12e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b132:	4798      	blx	r3
 800b134:	3601      	adds	r6, #1
 800b136:	e7f2      	b.n	800b11e <__libc_init_array+0x1e>
 800b138:	0800c07c 	.word	0x0800c07c
 800b13c:	0800c07c 	.word	0x0800c07c
 800b140:	0800c07c 	.word	0x0800c07c
 800b144:	0800c080 	.word	0x0800c080

0800b148 <memcpy>:
 800b148:	440a      	add	r2, r1
 800b14a:	4291      	cmp	r1, r2
 800b14c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b150:	d100      	bne.n	800b154 <memcpy+0xc>
 800b152:	4770      	bx	lr
 800b154:	b510      	push	{r4, lr}
 800b156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b15a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b15e:	4291      	cmp	r1, r2
 800b160:	d1f9      	bne.n	800b156 <memcpy+0xe>
 800b162:	bd10      	pop	{r4, pc}

0800b164 <cosf>:
 800b164:	ee10 3a10 	vmov	r3, s0
 800b168:	b507      	push	{r0, r1, r2, lr}
 800b16a:	4a1e      	ldr	r2, [pc, #120]	@ (800b1e4 <cosf+0x80>)
 800b16c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b170:	4293      	cmp	r3, r2
 800b172:	d806      	bhi.n	800b182 <cosf+0x1e>
 800b174:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b1e8 <cosf+0x84>
 800b178:	b003      	add	sp, #12
 800b17a:	f85d eb04 	ldr.w	lr, [sp], #4
 800b17e:	f000 b87b 	b.w	800b278 <__kernel_cosf>
 800b182:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b186:	d304      	bcc.n	800b192 <cosf+0x2e>
 800b188:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b18c:	b003      	add	sp, #12
 800b18e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b192:	4668      	mov	r0, sp
 800b194:	f000 f910 	bl	800b3b8 <__ieee754_rem_pio2f>
 800b198:	f000 0003 	and.w	r0, r0, #3
 800b19c:	2801      	cmp	r0, #1
 800b19e:	d009      	beq.n	800b1b4 <cosf+0x50>
 800b1a0:	2802      	cmp	r0, #2
 800b1a2:	d010      	beq.n	800b1c6 <cosf+0x62>
 800b1a4:	b9b0      	cbnz	r0, 800b1d4 <cosf+0x70>
 800b1a6:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1aa:	ed9d 0a00 	vldr	s0, [sp]
 800b1ae:	f000 f863 	bl	800b278 <__kernel_cosf>
 800b1b2:	e7eb      	b.n	800b18c <cosf+0x28>
 800b1b4:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1b8:	ed9d 0a00 	vldr	s0, [sp]
 800b1bc:	f000 f8b4 	bl	800b328 <__kernel_sinf>
 800b1c0:	eeb1 0a40 	vneg.f32	s0, s0
 800b1c4:	e7e2      	b.n	800b18c <cosf+0x28>
 800b1c6:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1ca:	ed9d 0a00 	vldr	s0, [sp]
 800b1ce:	f000 f853 	bl	800b278 <__kernel_cosf>
 800b1d2:	e7f5      	b.n	800b1c0 <cosf+0x5c>
 800b1d4:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1d8:	ed9d 0a00 	vldr	s0, [sp]
 800b1dc:	2001      	movs	r0, #1
 800b1de:	f000 f8a3 	bl	800b328 <__kernel_sinf>
 800b1e2:	e7d3      	b.n	800b18c <cosf+0x28>
 800b1e4:	3f490fd8 	.word	0x3f490fd8
 800b1e8:	00000000 	.word	0x00000000

0800b1ec <sinf>:
 800b1ec:	ee10 3a10 	vmov	r3, s0
 800b1f0:	b507      	push	{r0, r1, r2, lr}
 800b1f2:	4a1f      	ldr	r2, [pc, #124]	@ (800b270 <sinf+0x84>)
 800b1f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d807      	bhi.n	800b20c <sinf+0x20>
 800b1fc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b274 <sinf+0x88>
 800b200:	2000      	movs	r0, #0
 800b202:	b003      	add	sp, #12
 800b204:	f85d eb04 	ldr.w	lr, [sp], #4
 800b208:	f000 b88e 	b.w	800b328 <__kernel_sinf>
 800b20c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b210:	d304      	bcc.n	800b21c <sinf+0x30>
 800b212:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b216:	b003      	add	sp, #12
 800b218:	f85d fb04 	ldr.w	pc, [sp], #4
 800b21c:	4668      	mov	r0, sp
 800b21e:	f000 f8cb 	bl	800b3b8 <__ieee754_rem_pio2f>
 800b222:	f000 0003 	and.w	r0, r0, #3
 800b226:	2801      	cmp	r0, #1
 800b228:	d00a      	beq.n	800b240 <sinf+0x54>
 800b22a:	2802      	cmp	r0, #2
 800b22c:	d00f      	beq.n	800b24e <sinf+0x62>
 800b22e:	b9c0      	cbnz	r0, 800b262 <sinf+0x76>
 800b230:	eddd 0a01 	vldr	s1, [sp, #4]
 800b234:	ed9d 0a00 	vldr	s0, [sp]
 800b238:	2001      	movs	r0, #1
 800b23a:	f000 f875 	bl	800b328 <__kernel_sinf>
 800b23e:	e7ea      	b.n	800b216 <sinf+0x2a>
 800b240:	eddd 0a01 	vldr	s1, [sp, #4]
 800b244:	ed9d 0a00 	vldr	s0, [sp]
 800b248:	f000 f816 	bl	800b278 <__kernel_cosf>
 800b24c:	e7e3      	b.n	800b216 <sinf+0x2a>
 800b24e:	eddd 0a01 	vldr	s1, [sp, #4]
 800b252:	ed9d 0a00 	vldr	s0, [sp]
 800b256:	2001      	movs	r0, #1
 800b258:	f000 f866 	bl	800b328 <__kernel_sinf>
 800b25c:	eeb1 0a40 	vneg.f32	s0, s0
 800b260:	e7d9      	b.n	800b216 <sinf+0x2a>
 800b262:	eddd 0a01 	vldr	s1, [sp, #4]
 800b266:	ed9d 0a00 	vldr	s0, [sp]
 800b26a:	f000 f805 	bl	800b278 <__kernel_cosf>
 800b26e:	e7f5      	b.n	800b25c <sinf+0x70>
 800b270:	3f490fd8 	.word	0x3f490fd8
 800b274:	00000000 	.word	0x00000000

0800b278 <__kernel_cosf>:
 800b278:	ee10 3a10 	vmov	r3, s0
 800b27c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b280:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b284:	eef0 6a40 	vmov.f32	s13, s0
 800b288:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b28c:	d204      	bcs.n	800b298 <__kernel_cosf+0x20>
 800b28e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b292:	ee17 2a90 	vmov	r2, s15
 800b296:	b342      	cbz	r2, 800b2ea <__kernel_cosf+0x72>
 800b298:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b29c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b308 <__kernel_cosf+0x90>
 800b2a0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b30c <__kernel_cosf+0x94>
 800b2a4:	4a1a      	ldr	r2, [pc, #104]	@ (800b310 <__kernel_cosf+0x98>)
 800b2a6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b314 <__kernel_cosf+0x9c>
 800b2b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b2b4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b318 <__kernel_cosf+0xa0>
 800b2b8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b2bc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b31c <__kernel_cosf+0xa4>
 800b2c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b2c4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b320 <__kernel_cosf+0xa8>
 800b2c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b2cc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b2d0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b2d4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b2d8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b2dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2e0:	d804      	bhi.n	800b2ec <__kernel_cosf+0x74>
 800b2e2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b2e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b2ea:	4770      	bx	lr
 800b2ec:	4a0d      	ldr	r2, [pc, #52]	@ (800b324 <__kernel_cosf+0xac>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	bf9a      	itte	ls
 800b2f2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b2f6:	ee07 3a10 	vmovls	s14, r3
 800b2fa:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b2fe:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b302:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b306:	e7ec      	b.n	800b2e2 <__kernel_cosf+0x6a>
 800b308:	ad47d74e 	.word	0xad47d74e
 800b30c:	310f74f6 	.word	0x310f74f6
 800b310:	3e999999 	.word	0x3e999999
 800b314:	b493f27c 	.word	0xb493f27c
 800b318:	37d00d01 	.word	0x37d00d01
 800b31c:	bab60b61 	.word	0xbab60b61
 800b320:	3d2aaaab 	.word	0x3d2aaaab
 800b324:	3f480000 	.word	0x3f480000

0800b328 <__kernel_sinf>:
 800b328:	ee10 3a10 	vmov	r3, s0
 800b32c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b330:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b334:	d204      	bcs.n	800b340 <__kernel_sinf+0x18>
 800b336:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b33a:	ee17 3a90 	vmov	r3, s15
 800b33e:	b35b      	cbz	r3, 800b398 <__kernel_sinf+0x70>
 800b340:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b344:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b39c <__kernel_sinf+0x74>
 800b348:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b3a0 <__kernel_sinf+0x78>
 800b34c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b350:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b3a4 <__kernel_sinf+0x7c>
 800b354:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b358:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b3a8 <__kernel_sinf+0x80>
 800b35c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b360:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b3ac <__kernel_sinf+0x84>
 800b364:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b368:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b36c:	b930      	cbnz	r0, 800b37c <__kernel_sinf+0x54>
 800b36e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b3b0 <__kernel_sinf+0x88>
 800b372:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b376:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b37a:	4770      	bx	lr
 800b37c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b380:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b384:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b388:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b38c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b3b4 <__kernel_sinf+0x8c>
 800b390:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b394:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	2f2ec9d3 	.word	0x2f2ec9d3
 800b3a0:	b2d72f34 	.word	0xb2d72f34
 800b3a4:	3638ef1b 	.word	0x3638ef1b
 800b3a8:	b9500d01 	.word	0xb9500d01
 800b3ac:	3c088889 	.word	0x3c088889
 800b3b0:	be2aaaab 	.word	0xbe2aaaab
 800b3b4:	3e2aaaab 	.word	0x3e2aaaab

0800b3b8 <__ieee754_rem_pio2f>:
 800b3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ba:	ee10 6a10 	vmov	r6, s0
 800b3be:	4b88      	ldr	r3, [pc, #544]	@ (800b5e0 <__ieee754_rem_pio2f+0x228>)
 800b3c0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b3c4:	429d      	cmp	r5, r3
 800b3c6:	b087      	sub	sp, #28
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	d805      	bhi.n	800b3d8 <__ieee754_rem_pio2f+0x20>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	ed80 0a00 	vstr	s0, [r0]
 800b3d2:	6043      	str	r3, [r0, #4]
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	e022      	b.n	800b41e <__ieee754_rem_pio2f+0x66>
 800b3d8:	4b82      	ldr	r3, [pc, #520]	@ (800b5e4 <__ieee754_rem_pio2f+0x22c>)
 800b3da:	429d      	cmp	r5, r3
 800b3dc:	d83a      	bhi.n	800b454 <__ieee754_rem_pio2f+0x9c>
 800b3de:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b3e2:	2e00      	cmp	r6, #0
 800b3e4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b5e8 <__ieee754_rem_pio2f+0x230>
 800b3e8:	4a80      	ldr	r2, [pc, #512]	@ (800b5ec <__ieee754_rem_pio2f+0x234>)
 800b3ea:	f023 030f 	bic.w	r3, r3, #15
 800b3ee:	dd18      	ble.n	800b422 <__ieee754_rem_pio2f+0x6a>
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b3f6:	bf09      	itett	eq
 800b3f8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b5f0 <__ieee754_rem_pio2f+0x238>
 800b3fc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b5f4 <__ieee754_rem_pio2f+0x23c>
 800b400:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b5f8 <__ieee754_rem_pio2f+0x240>
 800b404:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b408:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b40c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b410:	ed80 7a00 	vstr	s14, [r0]
 800b414:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b418:	edc0 7a01 	vstr	s15, [r0, #4]
 800b41c:	2001      	movs	r0, #1
 800b41e:	b007      	add	sp, #28
 800b420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b422:	4293      	cmp	r3, r2
 800b424:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b428:	bf09      	itett	eq
 800b42a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b5f0 <__ieee754_rem_pio2f+0x238>
 800b42e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b5f4 <__ieee754_rem_pio2f+0x23c>
 800b432:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b5f8 <__ieee754_rem_pio2f+0x240>
 800b436:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b43a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b43e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b442:	ed80 7a00 	vstr	s14, [r0]
 800b446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b44a:	edc0 7a01 	vstr	s15, [r0, #4]
 800b44e:	f04f 30ff 	mov.w	r0, #4294967295
 800b452:	e7e4      	b.n	800b41e <__ieee754_rem_pio2f+0x66>
 800b454:	4b69      	ldr	r3, [pc, #420]	@ (800b5fc <__ieee754_rem_pio2f+0x244>)
 800b456:	429d      	cmp	r5, r3
 800b458:	d873      	bhi.n	800b542 <__ieee754_rem_pio2f+0x18a>
 800b45a:	f000 f8dd 	bl	800b618 <fabsf>
 800b45e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b600 <__ieee754_rem_pio2f+0x248>
 800b462:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b466:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b46a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b46e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b472:	ee17 0a90 	vmov	r0, s15
 800b476:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b5e8 <__ieee754_rem_pio2f+0x230>
 800b47a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b47e:	281f      	cmp	r0, #31
 800b480:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b5f4 <__ieee754_rem_pio2f+0x23c>
 800b484:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b488:	eeb1 6a47 	vneg.f32	s12, s14
 800b48c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b490:	ee16 1a90 	vmov	r1, s13
 800b494:	dc09      	bgt.n	800b4aa <__ieee754_rem_pio2f+0xf2>
 800b496:	4a5b      	ldr	r2, [pc, #364]	@ (800b604 <__ieee754_rem_pio2f+0x24c>)
 800b498:	1e47      	subs	r7, r0, #1
 800b49a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b49e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b4a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d107      	bne.n	800b4ba <__ieee754_rem_pio2f+0x102>
 800b4aa:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b4ae:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b4b2:	2a08      	cmp	r2, #8
 800b4b4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b4b8:	dc14      	bgt.n	800b4e4 <__ieee754_rem_pio2f+0x12c>
 800b4ba:	6021      	str	r1, [r4, #0]
 800b4bc:	ed94 7a00 	vldr	s14, [r4]
 800b4c0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b4c4:	2e00      	cmp	r6, #0
 800b4c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b4ca:	ed84 0a01 	vstr	s0, [r4, #4]
 800b4ce:	daa6      	bge.n	800b41e <__ieee754_rem_pio2f+0x66>
 800b4d0:	eeb1 7a47 	vneg.f32	s14, s14
 800b4d4:	eeb1 0a40 	vneg.f32	s0, s0
 800b4d8:	ed84 7a00 	vstr	s14, [r4]
 800b4dc:	ed84 0a01 	vstr	s0, [r4, #4]
 800b4e0:	4240      	negs	r0, r0
 800b4e2:	e79c      	b.n	800b41e <__ieee754_rem_pio2f+0x66>
 800b4e4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b5f0 <__ieee754_rem_pio2f+0x238>
 800b4e8:	eef0 6a40 	vmov.f32	s13, s0
 800b4ec:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b4f0:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b4f4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b4f8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b5f8 <__ieee754_rem_pio2f+0x240>
 800b4fc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b500:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b504:	ee15 2a90 	vmov	r2, s11
 800b508:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b50c:	1a5b      	subs	r3, r3, r1
 800b50e:	2b19      	cmp	r3, #25
 800b510:	dc04      	bgt.n	800b51c <__ieee754_rem_pio2f+0x164>
 800b512:	edc4 5a00 	vstr	s11, [r4]
 800b516:	eeb0 0a66 	vmov.f32	s0, s13
 800b51a:	e7cf      	b.n	800b4bc <__ieee754_rem_pio2f+0x104>
 800b51c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b608 <__ieee754_rem_pio2f+0x250>
 800b520:	eeb0 0a66 	vmov.f32	s0, s13
 800b524:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b528:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b52c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b60c <__ieee754_rem_pio2f+0x254>
 800b530:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b534:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b538:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b53c:	ed84 7a00 	vstr	s14, [r4]
 800b540:	e7bc      	b.n	800b4bc <__ieee754_rem_pio2f+0x104>
 800b542:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b546:	d306      	bcc.n	800b556 <__ieee754_rem_pio2f+0x19e>
 800b548:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b54c:	edc0 7a01 	vstr	s15, [r0, #4]
 800b550:	edc0 7a00 	vstr	s15, [r0]
 800b554:	e73e      	b.n	800b3d4 <__ieee754_rem_pio2f+0x1c>
 800b556:	15ea      	asrs	r2, r5, #23
 800b558:	3a86      	subs	r2, #134	@ 0x86
 800b55a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b55e:	ee07 3a90 	vmov	s15, r3
 800b562:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b566:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b610 <__ieee754_rem_pio2f+0x258>
 800b56a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b56e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b572:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b576:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b57a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b57e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b582:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b586:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b58a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b58e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b596:	edcd 7a05 	vstr	s15, [sp, #20]
 800b59a:	d11e      	bne.n	800b5da <__ieee754_rem_pio2f+0x222>
 800b59c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a4:	bf0c      	ite	eq
 800b5a6:	2301      	moveq	r3, #1
 800b5a8:	2302      	movne	r3, #2
 800b5aa:	491a      	ldr	r1, [pc, #104]	@ (800b614 <__ieee754_rem_pio2f+0x25c>)
 800b5ac:	9101      	str	r1, [sp, #4]
 800b5ae:	2102      	movs	r1, #2
 800b5b0:	9100      	str	r1, [sp, #0]
 800b5b2:	a803      	add	r0, sp, #12
 800b5b4:	4621      	mov	r1, r4
 800b5b6:	f000 f89d 	bl	800b6f4 <__kernel_rem_pio2f>
 800b5ba:	2e00      	cmp	r6, #0
 800b5bc:	f6bf af2f 	bge.w	800b41e <__ieee754_rem_pio2f+0x66>
 800b5c0:	edd4 7a00 	vldr	s15, [r4]
 800b5c4:	eef1 7a67 	vneg.f32	s15, s15
 800b5c8:	edc4 7a00 	vstr	s15, [r4]
 800b5cc:	edd4 7a01 	vldr	s15, [r4, #4]
 800b5d0:	eef1 7a67 	vneg.f32	s15, s15
 800b5d4:	edc4 7a01 	vstr	s15, [r4, #4]
 800b5d8:	e782      	b.n	800b4e0 <__ieee754_rem_pio2f+0x128>
 800b5da:	2303      	movs	r3, #3
 800b5dc:	e7e5      	b.n	800b5aa <__ieee754_rem_pio2f+0x1f2>
 800b5de:	bf00      	nop
 800b5e0:	3f490fd8 	.word	0x3f490fd8
 800b5e4:	4016cbe3 	.word	0x4016cbe3
 800b5e8:	3fc90f80 	.word	0x3fc90f80
 800b5ec:	3fc90fd0 	.word	0x3fc90fd0
 800b5f0:	37354400 	.word	0x37354400
 800b5f4:	37354443 	.word	0x37354443
 800b5f8:	2e85a308 	.word	0x2e85a308
 800b5fc:	43490f80 	.word	0x43490f80
 800b600:	3f22f984 	.word	0x3f22f984
 800b604:	0800bca4 	.word	0x0800bca4
 800b608:	2e85a300 	.word	0x2e85a300
 800b60c:	248d3132 	.word	0x248d3132
 800b610:	43800000 	.word	0x43800000
 800b614:	0800bd24 	.word	0x0800bd24

0800b618 <fabsf>:
 800b618:	ee10 3a10 	vmov	r3, s0
 800b61c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b620:	ee00 3a10 	vmov	s0, r3
 800b624:	4770      	bx	lr
	...

0800b628 <scalbnf>:
 800b628:	ee10 3a10 	vmov	r3, s0
 800b62c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b630:	d02b      	beq.n	800b68a <scalbnf+0x62>
 800b632:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b636:	d302      	bcc.n	800b63e <scalbnf+0x16>
 800b638:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b63c:	4770      	bx	lr
 800b63e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b642:	d123      	bne.n	800b68c <scalbnf+0x64>
 800b644:	4b24      	ldr	r3, [pc, #144]	@ (800b6d8 <scalbnf+0xb0>)
 800b646:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b6dc <scalbnf+0xb4>
 800b64a:	4298      	cmp	r0, r3
 800b64c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b650:	db17      	blt.n	800b682 <scalbnf+0x5a>
 800b652:	ee10 3a10 	vmov	r3, s0
 800b656:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b65a:	3a19      	subs	r2, #25
 800b65c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b660:	4288      	cmp	r0, r1
 800b662:	dd15      	ble.n	800b690 <scalbnf+0x68>
 800b664:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b6e0 <scalbnf+0xb8>
 800b668:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b6e4 <scalbnf+0xbc>
 800b66c:	ee10 3a10 	vmov	r3, s0
 800b670:	eeb0 7a67 	vmov.f32	s14, s15
 800b674:	2b00      	cmp	r3, #0
 800b676:	bfb8      	it	lt
 800b678:	eef0 7a66 	vmovlt.f32	s15, s13
 800b67c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b680:	4770      	bx	lr
 800b682:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b6e8 <scalbnf+0xc0>
 800b686:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b68a:	4770      	bx	lr
 800b68c:	0dd2      	lsrs	r2, r2, #23
 800b68e:	e7e5      	b.n	800b65c <scalbnf+0x34>
 800b690:	4410      	add	r0, r2
 800b692:	28fe      	cmp	r0, #254	@ 0xfe
 800b694:	dce6      	bgt.n	800b664 <scalbnf+0x3c>
 800b696:	2800      	cmp	r0, #0
 800b698:	dd06      	ble.n	800b6a8 <scalbnf+0x80>
 800b69a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b69e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b6a2:	ee00 3a10 	vmov	s0, r3
 800b6a6:	4770      	bx	lr
 800b6a8:	f110 0f16 	cmn.w	r0, #22
 800b6ac:	da09      	bge.n	800b6c2 <scalbnf+0x9a>
 800b6ae:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b6e8 <scalbnf+0xc0>
 800b6b2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b6ec <scalbnf+0xc4>
 800b6b6:	ee10 3a10 	vmov	r3, s0
 800b6ba:	eeb0 7a67 	vmov.f32	s14, s15
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	e7d9      	b.n	800b676 <scalbnf+0x4e>
 800b6c2:	3019      	adds	r0, #25
 800b6c4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b6c8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b6cc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b6f0 <scalbnf+0xc8>
 800b6d0:	ee07 3a90 	vmov	s15, r3
 800b6d4:	e7d7      	b.n	800b686 <scalbnf+0x5e>
 800b6d6:	bf00      	nop
 800b6d8:	ffff3cb0 	.word	0xffff3cb0
 800b6dc:	4c000000 	.word	0x4c000000
 800b6e0:	7149f2ca 	.word	0x7149f2ca
 800b6e4:	f149f2ca 	.word	0xf149f2ca
 800b6e8:	0da24260 	.word	0x0da24260
 800b6ec:	8da24260 	.word	0x8da24260
 800b6f0:	33000000 	.word	0x33000000

0800b6f4 <__kernel_rem_pio2f>:
 800b6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f8:	ed2d 8b04 	vpush	{d8-d9}
 800b6fc:	b0d9      	sub	sp, #356	@ 0x164
 800b6fe:	4690      	mov	r8, r2
 800b700:	9001      	str	r0, [sp, #4]
 800b702:	4ab6      	ldr	r2, [pc, #728]	@ (800b9dc <__kernel_rem_pio2f+0x2e8>)
 800b704:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b706:	f118 0f04 	cmn.w	r8, #4
 800b70a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b70e:	460f      	mov	r7, r1
 800b710:	f103 3bff 	add.w	fp, r3, #4294967295
 800b714:	db26      	blt.n	800b764 <__kernel_rem_pio2f+0x70>
 800b716:	f1b8 0203 	subs.w	r2, r8, #3
 800b71a:	bf48      	it	mi
 800b71c:	f108 0204 	addmi.w	r2, r8, #4
 800b720:	10d2      	asrs	r2, r2, #3
 800b722:	1c55      	adds	r5, r2, #1
 800b724:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b726:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800b9ec <__kernel_rem_pio2f+0x2f8>
 800b72a:	00e8      	lsls	r0, r5, #3
 800b72c:	eba2 060b 	sub.w	r6, r2, fp
 800b730:	9002      	str	r0, [sp, #8]
 800b732:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b736:	eb0a 0c0b 	add.w	ip, sl, fp
 800b73a:	ac1c      	add	r4, sp, #112	@ 0x70
 800b73c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b740:	2000      	movs	r0, #0
 800b742:	4560      	cmp	r0, ip
 800b744:	dd10      	ble.n	800b768 <__kernel_rem_pio2f+0x74>
 800b746:	a91c      	add	r1, sp, #112	@ 0x70
 800b748:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b74c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b750:	2600      	movs	r6, #0
 800b752:	4556      	cmp	r6, sl
 800b754:	dc24      	bgt.n	800b7a0 <__kernel_rem_pio2f+0xac>
 800b756:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b75a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800b9ec <__kernel_rem_pio2f+0x2f8>
 800b75e:	4684      	mov	ip, r0
 800b760:	2400      	movs	r4, #0
 800b762:	e016      	b.n	800b792 <__kernel_rem_pio2f+0x9e>
 800b764:	2200      	movs	r2, #0
 800b766:	e7dc      	b.n	800b722 <__kernel_rem_pio2f+0x2e>
 800b768:	42c6      	cmn	r6, r0
 800b76a:	bf5d      	ittte	pl
 800b76c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b770:	ee07 1a90 	vmovpl	s15, r1
 800b774:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b778:	eef0 7a47 	vmovmi.f32	s15, s14
 800b77c:	ece4 7a01 	vstmia	r4!, {s15}
 800b780:	3001      	adds	r0, #1
 800b782:	e7de      	b.n	800b742 <__kernel_rem_pio2f+0x4e>
 800b784:	ecfe 6a01 	vldmia	lr!, {s13}
 800b788:	ed3c 7a01 	vldmdb	ip!, {s14}
 800b78c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b790:	3401      	adds	r4, #1
 800b792:	455c      	cmp	r4, fp
 800b794:	ddf6      	ble.n	800b784 <__kernel_rem_pio2f+0x90>
 800b796:	ece9 7a01 	vstmia	r9!, {s15}
 800b79a:	3601      	adds	r6, #1
 800b79c:	3004      	adds	r0, #4
 800b79e:	e7d8      	b.n	800b752 <__kernel_rem_pio2f+0x5e>
 800b7a0:	a908      	add	r1, sp, #32
 800b7a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7a6:	9104      	str	r1, [sp, #16]
 800b7a8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b7aa:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800b9e8 <__kernel_rem_pio2f+0x2f4>
 800b7ae:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800b9e4 <__kernel_rem_pio2f+0x2f0>
 800b7b2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b7b6:	9203      	str	r2, [sp, #12]
 800b7b8:	4654      	mov	r4, sl
 800b7ba:	00a2      	lsls	r2, r4, #2
 800b7bc:	9205      	str	r2, [sp, #20]
 800b7be:	aa58      	add	r2, sp, #352	@ 0x160
 800b7c0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b7c4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b7c8:	a944      	add	r1, sp, #272	@ 0x110
 800b7ca:	aa08      	add	r2, sp, #32
 800b7cc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b7d0:	4694      	mov	ip, r2
 800b7d2:	4626      	mov	r6, r4
 800b7d4:	2e00      	cmp	r6, #0
 800b7d6:	dc4c      	bgt.n	800b872 <__kernel_rem_pio2f+0x17e>
 800b7d8:	4628      	mov	r0, r5
 800b7da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b7de:	f7ff ff23 	bl	800b628 <scalbnf>
 800b7e2:	eeb0 8a40 	vmov.f32	s16, s0
 800b7e6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b7ea:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b7ee:	f000 f9e9 	bl	800bbc4 <floorf>
 800b7f2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b7f6:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b7fa:	2d00      	cmp	r5, #0
 800b7fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b800:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b804:	ee17 9a90 	vmov	r9, s15
 800b808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b80c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b810:	dd41      	ble.n	800b896 <__kernel_rem_pio2f+0x1a2>
 800b812:	f104 3cff 	add.w	ip, r4, #4294967295
 800b816:	a908      	add	r1, sp, #32
 800b818:	f1c5 0e08 	rsb	lr, r5, #8
 800b81c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b820:	fa46 f00e 	asr.w	r0, r6, lr
 800b824:	4481      	add	r9, r0
 800b826:	fa00 f00e 	lsl.w	r0, r0, lr
 800b82a:	1a36      	subs	r6, r6, r0
 800b82c:	f1c5 0007 	rsb	r0, r5, #7
 800b830:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b834:	4106      	asrs	r6, r0
 800b836:	2e00      	cmp	r6, #0
 800b838:	dd3c      	ble.n	800b8b4 <__kernel_rem_pio2f+0x1c0>
 800b83a:	f04f 0e00 	mov.w	lr, #0
 800b83e:	f109 0901 	add.w	r9, r9, #1
 800b842:	4670      	mov	r0, lr
 800b844:	4574      	cmp	r4, lr
 800b846:	dc68      	bgt.n	800b91a <__kernel_rem_pio2f+0x226>
 800b848:	2d00      	cmp	r5, #0
 800b84a:	dd03      	ble.n	800b854 <__kernel_rem_pio2f+0x160>
 800b84c:	2d01      	cmp	r5, #1
 800b84e:	d074      	beq.n	800b93a <__kernel_rem_pio2f+0x246>
 800b850:	2d02      	cmp	r5, #2
 800b852:	d07d      	beq.n	800b950 <__kernel_rem_pio2f+0x25c>
 800b854:	2e02      	cmp	r6, #2
 800b856:	d12d      	bne.n	800b8b4 <__kernel_rem_pio2f+0x1c0>
 800b858:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b85c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b860:	b340      	cbz	r0, 800b8b4 <__kernel_rem_pio2f+0x1c0>
 800b862:	4628      	mov	r0, r5
 800b864:	9306      	str	r3, [sp, #24]
 800b866:	f7ff fedf 	bl	800b628 <scalbnf>
 800b86a:	9b06      	ldr	r3, [sp, #24]
 800b86c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b870:	e020      	b.n	800b8b4 <__kernel_rem_pio2f+0x1c0>
 800b872:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b876:	3e01      	subs	r6, #1
 800b878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b87c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b880:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b884:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b888:	ecac 0a01 	vstmia	ip!, {s0}
 800b88c:	ed30 0a01 	vldmdb	r0!, {s0}
 800b890:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b894:	e79e      	b.n	800b7d4 <__kernel_rem_pio2f+0xe0>
 800b896:	d105      	bne.n	800b8a4 <__kernel_rem_pio2f+0x1b0>
 800b898:	1e60      	subs	r0, r4, #1
 800b89a:	a908      	add	r1, sp, #32
 800b89c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b8a0:	11f6      	asrs	r6, r6, #7
 800b8a2:	e7c8      	b.n	800b836 <__kernel_rem_pio2f+0x142>
 800b8a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b8a8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b0:	da31      	bge.n	800b916 <__kernel_rem_pio2f+0x222>
 800b8b2:	2600      	movs	r6, #0
 800b8b4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8bc:	f040 8098 	bne.w	800b9f0 <__kernel_rem_pio2f+0x2fc>
 800b8c0:	1e60      	subs	r0, r4, #1
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	4550      	cmp	r0, sl
 800b8c6:	da4b      	bge.n	800b960 <__kernel_rem_pio2f+0x26c>
 800b8c8:	2a00      	cmp	r2, #0
 800b8ca:	d065      	beq.n	800b998 <__kernel_rem_pio2f+0x2a4>
 800b8cc:	3c01      	subs	r4, #1
 800b8ce:	ab08      	add	r3, sp, #32
 800b8d0:	3d08      	subs	r5, #8
 800b8d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d0f8      	beq.n	800b8cc <__kernel_rem_pio2f+0x1d8>
 800b8da:	4628      	mov	r0, r5
 800b8dc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b8e0:	f7ff fea2 	bl	800b628 <scalbnf>
 800b8e4:	1c63      	adds	r3, r4, #1
 800b8e6:	aa44      	add	r2, sp, #272	@ 0x110
 800b8e8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800b9e8 <__kernel_rem_pio2f+0x2f4>
 800b8ec:	0099      	lsls	r1, r3, #2
 800b8ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b8f2:	4623      	mov	r3, r4
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f280 80a9 	bge.w	800ba4c <__kernel_rem_pio2f+0x358>
 800b8fa:	4623      	mov	r3, r4
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f2c0 80c7 	blt.w	800ba90 <__kernel_rem_pio2f+0x39c>
 800b902:	aa44      	add	r2, sp, #272	@ 0x110
 800b904:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b908:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800b9e0 <__kernel_rem_pio2f+0x2ec>
 800b90c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800b9ec <__kernel_rem_pio2f+0x2f8>
 800b910:	2000      	movs	r0, #0
 800b912:	1ae2      	subs	r2, r4, r3
 800b914:	e0b1      	b.n	800ba7a <__kernel_rem_pio2f+0x386>
 800b916:	2602      	movs	r6, #2
 800b918:	e78f      	b.n	800b83a <__kernel_rem_pio2f+0x146>
 800b91a:	f852 1b04 	ldr.w	r1, [r2], #4
 800b91e:	b948      	cbnz	r0, 800b934 <__kernel_rem_pio2f+0x240>
 800b920:	b121      	cbz	r1, 800b92c <__kernel_rem_pio2f+0x238>
 800b922:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b926:	f842 1c04 	str.w	r1, [r2, #-4]
 800b92a:	2101      	movs	r1, #1
 800b92c:	f10e 0e01 	add.w	lr, lr, #1
 800b930:	4608      	mov	r0, r1
 800b932:	e787      	b.n	800b844 <__kernel_rem_pio2f+0x150>
 800b934:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b938:	e7f5      	b.n	800b926 <__kernel_rem_pio2f+0x232>
 800b93a:	f104 3cff 	add.w	ip, r4, #4294967295
 800b93e:	aa08      	add	r2, sp, #32
 800b940:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b944:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b948:	a908      	add	r1, sp, #32
 800b94a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b94e:	e781      	b.n	800b854 <__kernel_rem_pio2f+0x160>
 800b950:	f104 3cff 	add.w	ip, r4, #4294967295
 800b954:	aa08      	add	r2, sp, #32
 800b956:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b95a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b95e:	e7f3      	b.n	800b948 <__kernel_rem_pio2f+0x254>
 800b960:	a908      	add	r1, sp, #32
 800b962:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b966:	3801      	subs	r0, #1
 800b968:	430a      	orrs	r2, r1
 800b96a:	e7ab      	b.n	800b8c4 <__kernel_rem_pio2f+0x1d0>
 800b96c:	3201      	adds	r2, #1
 800b96e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b972:	2e00      	cmp	r6, #0
 800b974:	d0fa      	beq.n	800b96c <__kernel_rem_pio2f+0x278>
 800b976:	9905      	ldr	r1, [sp, #20]
 800b978:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b97c:	eb0d 0001 	add.w	r0, sp, r1
 800b980:	18e6      	adds	r6, r4, r3
 800b982:	a91c      	add	r1, sp, #112	@ 0x70
 800b984:	f104 0c01 	add.w	ip, r4, #1
 800b988:	384c      	subs	r0, #76	@ 0x4c
 800b98a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800b98e:	4422      	add	r2, r4
 800b990:	4562      	cmp	r2, ip
 800b992:	da04      	bge.n	800b99e <__kernel_rem_pio2f+0x2aa>
 800b994:	4614      	mov	r4, r2
 800b996:	e710      	b.n	800b7ba <__kernel_rem_pio2f+0xc6>
 800b998:	9804      	ldr	r0, [sp, #16]
 800b99a:	2201      	movs	r2, #1
 800b99c:	e7e7      	b.n	800b96e <__kernel_rem_pio2f+0x27a>
 800b99e:	9903      	ldr	r1, [sp, #12]
 800b9a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b9a4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800b9a8:	9105      	str	r1, [sp, #20]
 800b9aa:	ee07 1a90 	vmov	s15, r1
 800b9ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9b2:	2400      	movs	r4, #0
 800b9b4:	ece6 7a01 	vstmia	r6!, {s15}
 800b9b8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800b9ec <__kernel_rem_pio2f+0x2f8>
 800b9bc:	46b1      	mov	r9, r6
 800b9be:	455c      	cmp	r4, fp
 800b9c0:	dd04      	ble.n	800b9cc <__kernel_rem_pio2f+0x2d8>
 800b9c2:	ece0 7a01 	vstmia	r0!, {s15}
 800b9c6:	f10c 0c01 	add.w	ip, ip, #1
 800b9ca:	e7e1      	b.n	800b990 <__kernel_rem_pio2f+0x29c>
 800b9cc:	ecfe 6a01 	vldmia	lr!, {s13}
 800b9d0:	ed39 7a01 	vldmdb	r9!, {s14}
 800b9d4:	3401      	adds	r4, #1
 800b9d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b9da:	e7f0      	b.n	800b9be <__kernel_rem_pio2f+0x2ca>
 800b9dc:	0800c068 	.word	0x0800c068
 800b9e0:	0800c03c 	.word	0x0800c03c
 800b9e4:	43800000 	.word	0x43800000
 800b9e8:	3b800000 	.word	0x3b800000
 800b9ec:	00000000 	.word	0x00000000
 800b9f0:	9b02      	ldr	r3, [sp, #8]
 800b9f2:	eeb0 0a48 	vmov.f32	s0, s16
 800b9f6:	eba3 0008 	sub.w	r0, r3, r8
 800b9fa:	f7ff fe15 	bl	800b628 <scalbnf>
 800b9fe:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800b9e4 <__kernel_rem_pio2f+0x2f0>
 800ba02:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ba06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba0a:	db19      	blt.n	800ba40 <__kernel_rem_pio2f+0x34c>
 800ba0c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800b9e8 <__kernel_rem_pio2f+0x2f4>
 800ba10:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ba14:	aa08      	add	r2, sp, #32
 800ba16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba1a:	3508      	adds	r5, #8
 800ba1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba20:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ba24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba28:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba2c:	ee10 3a10 	vmov	r3, s0
 800ba30:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba34:	ee17 3a90 	vmov	r3, s15
 800ba38:	3401      	adds	r4, #1
 800ba3a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba3e:	e74c      	b.n	800b8da <__kernel_rem_pio2f+0x1e6>
 800ba40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba44:	aa08      	add	r2, sp, #32
 800ba46:	ee10 3a10 	vmov	r3, s0
 800ba4a:	e7f6      	b.n	800ba3a <__kernel_rem_pio2f+0x346>
 800ba4c:	a808      	add	r0, sp, #32
 800ba4e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ba52:	9001      	str	r0, [sp, #4]
 800ba54:	ee07 0a90 	vmov	s15, r0
 800ba58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ba62:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ba66:	ed62 7a01 	vstmdb	r2!, {s15}
 800ba6a:	e743      	b.n	800b8f4 <__kernel_rem_pio2f+0x200>
 800ba6c:	ecfc 6a01 	vldmia	ip!, {s13}
 800ba70:	ecb5 7a01 	vldmia	r5!, {s14}
 800ba74:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ba78:	3001      	adds	r0, #1
 800ba7a:	4550      	cmp	r0, sl
 800ba7c:	dc01      	bgt.n	800ba82 <__kernel_rem_pio2f+0x38e>
 800ba7e:	4290      	cmp	r0, r2
 800ba80:	ddf4      	ble.n	800ba6c <__kernel_rem_pio2f+0x378>
 800ba82:	a858      	add	r0, sp, #352	@ 0x160
 800ba84:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ba88:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	e735      	b.n	800b8fc <__kernel_rem_pio2f+0x208>
 800ba90:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	dc09      	bgt.n	800baaa <__kernel_rem_pio2f+0x3b6>
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	dc27      	bgt.n	800baea <__kernel_rem_pio2f+0x3f6>
 800ba9a:	d040      	beq.n	800bb1e <__kernel_rem_pio2f+0x42a>
 800ba9c:	f009 0007 	and.w	r0, r9, #7
 800baa0:	b059      	add	sp, #356	@ 0x164
 800baa2:	ecbd 8b04 	vpop	{d8-d9}
 800baa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baaa:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800baac:	2b03      	cmp	r3, #3
 800baae:	d1f5      	bne.n	800ba9c <__kernel_rem_pio2f+0x3a8>
 800bab0:	aa30      	add	r2, sp, #192	@ 0xc0
 800bab2:	1f0b      	subs	r3, r1, #4
 800bab4:	4413      	add	r3, r2
 800bab6:	461a      	mov	r2, r3
 800bab8:	4620      	mov	r0, r4
 800baba:	2800      	cmp	r0, #0
 800babc:	dc50      	bgt.n	800bb60 <__kernel_rem_pio2f+0x46c>
 800babe:	4622      	mov	r2, r4
 800bac0:	2a01      	cmp	r2, #1
 800bac2:	dc5d      	bgt.n	800bb80 <__kernel_rem_pio2f+0x48c>
 800bac4:	ab30      	add	r3, sp, #192	@ 0xc0
 800bac6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800b9ec <__kernel_rem_pio2f+0x2f8>
 800baca:	440b      	add	r3, r1
 800bacc:	2c01      	cmp	r4, #1
 800bace:	dc67      	bgt.n	800bba0 <__kernel_rem_pio2f+0x4ac>
 800bad0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bad4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800bad8:	2e00      	cmp	r6, #0
 800bada:	d167      	bne.n	800bbac <__kernel_rem_pio2f+0x4b8>
 800badc:	edc7 6a00 	vstr	s13, [r7]
 800bae0:	ed87 7a01 	vstr	s14, [r7, #4]
 800bae4:	edc7 7a02 	vstr	s15, [r7, #8]
 800bae8:	e7d8      	b.n	800ba9c <__kernel_rem_pio2f+0x3a8>
 800baea:	ab30      	add	r3, sp, #192	@ 0xc0
 800baec:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800b9ec <__kernel_rem_pio2f+0x2f8>
 800baf0:	440b      	add	r3, r1
 800baf2:	4622      	mov	r2, r4
 800baf4:	2a00      	cmp	r2, #0
 800baf6:	da24      	bge.n	800bb42 <__kernel_rem_pio2f+0x44e>
 800baf8:	b34e      	cbz	r6, 800bb4e <__kernel_rem_pio2f+0x45a>
 800bafa:	eef1 7a47 	vneg.f32	s15, s14
 800bafe:	edc7 7a00 	vstr	s15, [r7]
 800bb02:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800bb06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb0a:	aa31      	add	r2, sp, #196	@ 0xc4
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	429c      	cmp	r4, r3
 800bb10:	da20      	bge.n	800bb54 <__kernel_rem_pio2f+0x460>
 800bb12:	b10e      	cbz	r6, 800bb18 <__kernel_rem_pio2f+0x424>
 800bb14:	eef1 7a67 	vneg.f32	s15, s15
 800bb18:	edc7 7a01 	vstr	s15, [r7, #4]
 800bb1c:	e7be      	b.n	800ba9c <__kernel_rem_pio2f+0x3a8>
 800bb1e:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb20:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800b9ec <__kernel_rem_pio2f+0x2f8>
 800bb24:	440b      	add	r3, r1
 800bb26:	2c00      	cmp	r4, #0
 800bb28:	da05      	bge.n	800bb36 <__kernel_rem_pio2f+0x442>
 800bb2a:	b10e      	cbz	r6, 800bb30 <__kernel_rem_pio2f+0x43c>
 800bb2c:	eef1 7a67 	vneg.f32	s15, s15
 800bb30:	edc7 7a00 	vstr	s15, [r7]
 800bb34:	e7b2      	b.n	800ba9c <__kernel_rem_pio2f+0x3a8>
 800bb36:	ed33 7a01 	vldmdb	r3!, {s14}
 800bb3a:	3c01      	subs	r4, #1
 800bb3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb40:	e7f1      	b.n	800bb26 <__kernel_rem_pio2f+0x432>
 800bb42:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb46:	3a01      	subs	r2, #1
 800bb48:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb4c:	e7d2      	b.n	800baf4 <__kernel_rem_pio2f+0x400>
 800bb4e:	eef0 7a47 	vmov.f32	s15, s14
 800bb52:	e7d4      	b.n	800bafe <__kernel_rem_pio2f+0x40a>
 800bb54:	ecb2 7a01 	vldmia	r2!, {s14}
 800bb58:	3301      	adds	r3, #1
 800bb5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb5e:	e7d6      	b.n	800bb0e <__kernel_rem_pio2f+0x41a>
 800bb60:	ed72 7a01 	vldmdb	r2!, {s15}
 800bb64:	edd2 6a01 	vldr	s13, [r2, #4]
 800bb68:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb6c:	3801      	subs	r0, #1
 800bb6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb72:	ed82 7a00 	vstr	s14, [r2]
 800bb76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb7a:	edc2 7a01 	vstr	s15, [r2, #4]
 800bb7e:	e79c      	b.n	800baba <__kernel_rem_pio2f+0x3c6>
 800bb80:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb84:	edd3 6a01 	vldr	s13, [r3, #4]
 800bb88:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb8c:	3a01      	subs	r2, #1
 800bb8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb92:	ed83 7a00 	vstr	s14, [r3]
 800bb96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb9a:	edc3 7a01 	vstr	s15, [r3, #4]
 800bb9e:	e78f      	b.n	800bac0 <__kernel_rem_pio2f+0x3cc>
 800bba0:	ed33 7a01 	vldmdb	r3!, {s14}
 800bba4:	3c01      	subs	r4, #1
 800bba6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbaa:	e78f      	b.n	800bacc <__kernel_rem_pio2f+0x3d8>
 800bbac:	eef1 6a66 	vneg.f32	s13, s13
 800bbb0:	eeb1 7a47 	vneg.f32	s14, s14
 800bbb4:	edc7 6a00 	vstr	s13, [r7]
 800bbb8:	ed87 7a01 	vstr	s14, [r7, #4]
 800bbbc:	eef1 7a67 	vneg.f32	s15, s15
 800bbc0:	e790      	b.n	800bae4 <__kernel_rem_pio2f+0x3f0>
 800bbc2:	bf00      	nop

0800bbc4 <floorf>:
 800bbc4:	ee10 3a10 	vmov	r3, s0
 800bbc8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bbcc:	3a7f      	subs	r2, #127	@ 0x7f
 800bbce:	2a16      	cmp	r2, #22
 800bbd0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bbd4:	dc2b      	bgt.n	800bc2e <floorf+0x6a>
 800bbd6:	2a00      	cmp	r2, #0
 800bbd8:	da12      	bge.n	800bc00 <floorf+0x3c>
 800bbda:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bc40 <floorf+0x7c>
 800bbde:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bbe2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bbe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbea:	dd06      	ble.n	800bbfa <floorf+0x36>
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	da24      	bge.n	800bc3a <floorf+0x76>
 800bbf0:	2900      	cmp	r1, #0
 800bbf2:	4b14      	ldr	r3, [pc, #80]	@ (800bc44 <floorf+0x80>)
 800bbf4:	bf08      	it	eq
 800bbf6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bbfa:	ee00 3a10 	vmov	s0, r3
 800bbfe:	4770      	bx	lr
 800bc00:	4911      	ldr	r1, [pc, #68]	@ (800bc48 <floorf+0x84>)
 800bc02:	4111      	asrs	r1, r2
 800bc04:	420b      	tst	r3, r1
 800bc06:	d0fa      	beq.n	800bbfe <floorf+0x3a>
 800bc08:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bc40 <floorf+0x7c>
 800bc0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc18:	ddef      	ble.n	800bbfa <floorf+0x36>
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	bfbe      	ittt	lt
 800bc1e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bc22:	fa40 f202 	asrlt.w	r2, r0, r2
 800bc26:	189b      	addlt	r3, r3, r2
 800bc28:	ea23 0301 	bic.w	r3, r3, r1
 800bc2c:	e7e5      	b.n	800bbfa <floorf+0x36>
 800bc2e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bc32:	d3e4      	bcc.n	800bbfe <floorf+0x3a>
 800bc34:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc38:	4770      	bx	lr
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	e7dd      	b.n	800bbfa <floorf+0x36>
 800bc3e:	bf00      	nop
 800bc40:	7149f2ca 	.word	0x7149f2ca
 800bc44:	bf800000 	.word	0xbf800000
 800bc48:	007fffff 	.word	0x007fffff

0800bc4c <_init>:
 800bc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4e:	bf00      	nop
 800bc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc52:	bc08      	pop	{r3}
 800bc54:	469e      	mov	lr, r3
 800bc56:	4770      	bx	lr

0800bc58 <_fini>:
 800bc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5a:	bf00      	nop
 800bc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc5e:	bc08      	pop	{r3}
 800bc60:	469e      	mov	lr, r3
 800bc62:	4770      	bx	lr
