
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c634  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800c80c  0800c80c  0000d80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc1c  0800cc1c  0000e28c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cc1c  0800cc1c  0000dc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc24  0800cc24  0000e28c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc24  0800cc24  0000dc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc28  0800cc28  0000dc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000028c  20000000  0800cc2c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b4  20000290  0800ceb8  0000e290  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001544  0800ceb8  0000e544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e28c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fa7  00000000  00000000  0000e2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d51  00000000  00000000  00026263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00028fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec5  00000000  00000000  0002a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027421  00000000  00000000  0002b14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016968  00000000  00000000  0005256e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fffdb  00000000  00000000  00068ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168eb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055bc  00000000  00000000  00168ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0016e4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000290 	.word	0x20000290
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c7f4 	.word	0x0800c7f4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000294 	.word	0x20000294
 8000214:	0800c7f4 	.word	0x0800c7f4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_frsub>:
 8000ba4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba8:	e002      	b.n	8000bb0 <__addsf3>
 8000baa:	bf00      	nop

08000bac <__aeabi_fsub>:
 8000bac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb0 <__addsf3>:
 8000bb0:	0042      	lsls	r2, r0, #1
 8000bb2:	bf1f      	itttt	ne
 8000bb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb8:	ea92 0f03 	teqne	r2, r3
 8000bbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc4:	d06a      	beq.n	8000c9c <__addsf3+0xec>
 8000bc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bce:	bfc1      	itttt	gt
 8000bd0:	18d2      	addgt	r2, r2, r3
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	4048      	eorgt	r0, r1
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	2b19      	cmp	r3, #25
 8000bde:	bf88      	it	hi
 8000be0:	4770      	bxhi	lr
 8000be2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bee:	bf18      	it	ne
 8000bf0:	4240      	negne	r0, r0
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4249      	negne	r1, r1
 8000c02:	ea92 0f03 	teq	r2, r3
 8000c06:	d03f      	beq.n	8000c88 <__addsf3+0xd8>
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c10:	eb10 000c 	adds.w	r0, r0, ip
 8000c14:	f1c3 0320 	rsb	r3, r3, #32
 8000c18:	fa01 f103 	lsl.w	r1, r1, r3
 8000c1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__addsf3+0x78>
 8000c22:	4249      	negs	r1, r1
 8000c24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c2c:	d313      	bcc.n	8000c56 <__addsf3+0xa6>
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c32:	d306      	bcc.n	8000c42 <__addsf3+0x92>
 8000c34:	0840      	lsrs	r0, r0, #1
 8000c36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3a:	f102 0201 	add.w	r2, r2, #1
 8000c3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c40:	d251      	bcs.n	8000ce6 <__addsf3+0x136>
 8000c42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4a:	bf08      	it	eq
 8000c4c:	f020 0001 	biceq.w	r0, r0, #1
 8000c50:	ea40 0003 	orr.w	r0, r0, r3
 8000c54:	4770      	bx	lr
 8000c56:	0049      	lsls	r1, r1, #1
 8000c58:	eb40 0000 	adc.w	r0, r0, r0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c64:	d2ed      	bcs.n	8000c42 <__addsf3+0x92>
 8000c66:	fab0 fc80 	clz	ip, r0
 8000c6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c76:	bfaa      	itet	ge
 8000c78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c7c:	4252      	neglt	r2, r2
 8000c7e:	4318      	orrge	r0, r3
 8000c80:	bfbc      	itt	lt
 8000c82:	40d0      	lsrlt	r0, r2
 8000c84:	4318      	orrlt	r0, r3
 8000c86:	4770      	bx	lr
 8000c88:	f092 0f00 	teq	r2, #0
 8000c8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c90:	bf06      	itte	eq
 8000c92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c96:	3201      	addeq	r2, #1
 8000c98:	3b01      	subne	r3, #1
 8000c9a:	e7b5      	b.n	8000c08 <__addsf3+0x58>
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000caa:	d021      	beq.n	8000cf0 <__addsf3+0x140>
 8000cac:	ea92 0f03 	teq	r2, r3
 8000cb0:	d004      	beq.n	8000cbc <__addsf3+0x10c>
 8000cb2:	f092 0f00 	teq	r2, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	4608      	moveq	r0, r1
 8000cba:	4770      	bx	lr
 8000cbc:	ea90 0f01 	teq	r0, r1
 8000cc0:	bf1c      	itt	ne
 8000cc2:	2000      	movne	r0, #0
 8000cc4:	4770      	bxne	lr
 8000cc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cca:	d104      	bne.n	8000cd6 <__addsf3+0x126>
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cda:	bf3c      	itt	cc
 8000cdc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce0:	4770      	bxcc	lr
 8000ce2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cee:	4770      	bx	lr
 8000cf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf4:	bf16      	itet	ne
 8000cf6:	4608      	movne	r0, r1
 8000cf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cfc:	4601      	movne	r1, r0
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	bf06      	itte	eq
 8000d02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d06:	ea90 0f01 	teqeq	r0, r1
 8000d0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_ui2f>:
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e004      	b.n	8000d20 <__aeabi_i2f+0x8>
 8000d16:	bf00      	nop

08000d18 <__aeabi_i2f>:
 8000d18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d1c:	bf48      	it	mi
 8000d1e:	4240      	negmi	r0, r0
 8000d20:	ea5f 0c00 	movs.w	ip, r0
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	e01c      	b.n	8000d6e <__aeabi_l2f+0x2a>

08000d34 <__aeabi_ul2f>:
 8000d34:	ea50 0201 	orrs.w	r2, r0, r1
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e00a      	b.n	8000d58 <__aeabi_l2f+0x14>
 8000d42:	bf00      	nop

08000d44 <__aeabi_l2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_l2f+0x14>
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	ea5f 0c01 	movs.w	ip, r1
 8000d5c:	bf02      	ittt	eq
 8000d5e:	4684      	moveq	ip, r0
 8000d60:	4601      	moveq	r1, r0
 8000d62:	2000      	moveq	r0, #0
 8000d64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d68:	bf08      	it	eq
 8000d6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d72:	fabc f28c 	clz	r2, ip
 8000d76:	3a08      	subs	r2, #8
 8000d78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d7c:	db10      	blt.n	8000da0 <__aeabi_l2f+0x5c>
 8000d7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d90:	fa20 f202 	lsr.w	r2, r0, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f102 0220 	add.w	r2, r2, #32
 8000da4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db0:	fa21 f202 	lsr.w	r2, r1, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef *huart);

// function for interrupt
void modbus_1t5_Timeout() {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200002ac 	.word	0x200002ac

0800112c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <modbus_3t5_Timeout+0x1c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2201      	movs	r2, #1
 800113a:	755a      	strb	r2, [r3, #21]

}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200002ac 	.word	0x200002ac

0800114c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(huart) == HAL_UART_ERROR_RTO) {
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f009 fc1d 	bl	800a994 <HAL_UART_GetError>
 800115a:	4603      	mov	r3, r0
 800115c:	2b20      	cmp	r3, #32
 800115e:	d101      	bne.n	8001164 <modbus_ErrorTimeout+0x18>
		modbus_1t5_Timeout();
 8001160:	f7ff ffc4 	bl	80010ec <modbus_1t5_Timeout>

	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <Modbus_init+0xa0>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <Modbus_init+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <Modbus_init+0xa4>)
 800118a:	210e      	movs	r1, #14
 800118c:	4618      	mov	r0, r3
 800118e:	f007 fc1b 	bl	80089c8 <HAL_TIM_RegisterCallback>
			(void*) modbus_3t5_Timeout);

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2110      	movs	r1, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f009 fba5 	bl	800a8e8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f009 fbbc 	bl	800a920 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <Modbus_init+0xa8>)
 80011ae:	2104      	movs	r1, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f008 fe63 	bl	8009e7c <HAL_UART_RegisterCallback>
			(void*) modbus_ErrorTimeout);
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
	HAL_UART_Receive_DMA(hModbus->huart,
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <Modbus_init+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d8      	ldr	r0, [r3, #12]
			&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <Modbus_init+0xa0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <Modbus_init+0xa0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
	HAL_UART_Receive_DMA(hModbus->huart,
 80011c8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011cc:	4413      	add	r3, r2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011d4:	4619      	mov	r1, r3
 80011d6:	f008 ff8b 	bl	800a0f0 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE);

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10c      	bne.n	8001204 <Modbus_init+0x98>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Modbus_init+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 f975 	bl	80074e0 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <Modbus_init+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f006 fd36 	bl	8007c70 <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200002ac 	.word	0x200002ac
 8001210:	0800112d 	.word	0x0800112d
 8001214:	0800114d 	.word	0x0800114d

08001218 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8001224:	23ff      	movs	r3, #255	@ 0xff
 8001226:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8001228:	23ff      	movs	r3, #255	@ 0xff
 800122a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800122c:	e013      	b.n	8001256 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	4053      	eors	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <CRC16+0x68>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4053      	eors	r3, r2
 800124a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <CRC16+0x6c>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001256:	883b      	ldrh	r3, [r7, #0]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	803a      	strh	r2, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e6      	bne.n	800122e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	b29b      	uxth	r3, r3
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000100 	.word	0x20000100
 8001284:	20000000 	.word	0x20000000

08001288 <SET_TARGET>:
	for (int i = 0; i < 10; i++) {
		SET_TARGET(i, 0, 0);
	}
}

void SET_TARGET( slot, dist, ang) {
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	TARGET_DISTANCE(slot) = (int16_t) ((dist) * 10.0f);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012aa:	ee17 3a90 	vmov	r3, s15
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	dc03      	bgt.n	80012be <SET_TARGET+0x36>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3310      	adds	r3, #16
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	e002      	b.n	80012c4 <SET_TARGET+0x3c>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3313      	adds	r3, #19
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	b291      	uxth	r1, r2
 80012c6:	4a13      	ldr	r2, [pc, #76]	@ (8001314 <SET_TARGET+0x8c>)
 80012c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	TARGET_ANGLE(slot) = (int16_t) ((ang) * 10.0f);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e2:	ee17 3a90 	vmov	r3, s15
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	dc04      	bgt.n	80012f8 <SET_TARGET+0x70>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3310      	adds	r3, #16
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	3301      	adds	r3, #1
 80012f6:	e003      	b.n	8001300 <SET_TARGET+0x78>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3313      	adds	r3, #19
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	3301      	adds	r3, #1
 8001300:	b291      	uxth	r1, r2
 8001302:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <SET_TARGET+0x8c>)
 8001304:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	2000112c 	.word	0x2000112c

08001318 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b08b      	sub	sp, #44	@ 0x2c
 800131c:	af02      	add	r7, sp, #8
//	//-- value

	REG16(HEART_BEAT) = 22881;
 800131e:	4bbc      	ldr	r3, [pc, #752]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 8001320:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001324:	801a      	strh	r2, [r3, #0]
	REG16(REG_SERVO_LIMIT_SWITCH) = Pen_Status ? 2 : 1;
 8001326:	4bbb      	ldr	r3, [pc, #748]	@ (8001614 <Modbus_Protocal_Worker+0x2fc>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <Modbus_Protocal_Worker+0x1a>
 800132e:	2202      	movs	r2, #2
 8001330:	e000      	b.n	8001334 <Modbus_Protocal_Worker+0x1c>
 8001332:	2201      	movs	r2, #1
 8001334:	4bb6      	ldr	r3, [pc, #728]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 8001336:	80da      	strh	r2, [r3, #6]
	Pen_BaseSystem = REG16(REG_SERVO_CMD_DOWN) ? 1 : 0;
 8001338:	4bb5      	ldr	r3, [pc, #724]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 800133a:	895b      	ldrh	r3, [r3, #10]
 800133c:	2b00      	cmp	r3, #0
 800133e:	bf14      	ite	ne
 8001340:	2301      	movne	r3, #1
 8001342:	2300      	moveq	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	4bb3      	ldr	r3, [pc, #716]	@ (8001618 <Modbus_Protocal_Worker+0x300>)
 800134a:	701a      	strb	r2, [r3, #0]
	TargetR_BaseSystem = REG16(REG_TARGET_GOAL_R) * 0.1f;
 800134c:	4bb0      	ldr	r3, [pc, #704]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 800134e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135a:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 800161c <Modbus_Protocal_Worker+0x304>
 800135e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001362:	4baf      	ldr	r3, [pc, #700]	@ (8001620 <Modbus_Protocal_Worker+0x308>)
 8001364:	edc3 7a00 	vstr	s15, [r3]
	TargetR_BaseSystem = DEG_TO_RED01(REG16(REG_TARGET_GOAL_R)) - (M_PI / 2.0f);
 8001368:	4ba9      	ldr	r3, [pc, #676]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 800136a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f8a4 	bl	80004bc <__aeabi_i2d>
 8001374:	a3a0      	add	r3, pc, #640	@ (adr r3, 80015f8 <Modbus_Protocal_Worker+0x2e0>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	f7ff f909 	bl	8000590 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fbbd 	bl	8000b04 <__aeabi_d2f>
 800138a:	4603      	mov	r3, r0
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8a7 	bl	80004e0 <__aeabi_f2d>
 8001392:	a39b      	add	r3, pc, #620	@ (adr r3, 8001600 <Modbus_Protocal_Worker+0x2e8>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7fe ff42 	bl	8000220 <__aeabi_dsub>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fbae 	bl	8000b04 <__aeabi_d2f>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a9d      	ldr	r2, [pc, #628]	@ (8001620 <Modbus_Protocal_Worker+0x308>)
 80013ac:	6013      	str	r3, [r2, #0]

	float Velocity_mm, Acceleration_mm, mmPosition, AngularVelocity_rad,
			AngularAcceleration_rad, RadPosition;
	Get_QRIdata(&Velocity_mm, &Acceleration_mm, &mmPosition,
 80013ae:	f107 040c 	add.w	r4, r7, #12
 80013b2:	f107 0210 	add.w	r2, r7, #16
 80013b6:	f107 0114 	add.w	r1, r7, #20
 80013ba:	f107 0018 	add.w	r0, r7, #24
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	4623      	mov	r3, r4
 80013ca:	f003 faab 	bl	8004924 <Get_QRIdata>
			&AngularVelocity_rad, &AngularAcceleration_rad, &RadPosition);

// Position remap: [-π/2, 3π/2] → [0, 360]
	float mappedDeg = RAD_TO_DEG(RadPosition + (M_PI / 2.0f));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f885 	bl	80004e0 <__aeabi_f2d>
 80013d6:	a38a      	add	r3, pc, #552	@ (adr r3, 8001600 <Modbus_Protocal_Worker+0x2e8>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7fe ff22 	bl	8000224 <__adddf3>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	a387      	add	r3, pc, #540	@ (adr r3, 8001608 <Modbus_Protocal_Worker+0x2f0>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff f8cf 	bl	8000590 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fb83 	bl	8000b04 <__aeabi_d2f>
 80013fe:	4603      	mov	r3, r0
 8001400:	61fb      	str	r3, [r7, #28]
	REG16(REG_POSITION_THETA) = (int16_t) (mappedDeg * 10.0f);
 8001402:	edd7 7a07 	vldr	s15, [r7, #28]
 8001406:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 3a90 	vmov	r3, s15
 8001416:	b21b      	sxth	r3, r3
 8001418:	b29a      	uxth	r2, r3
 800141a:	4b7d      	ldr	r3, [pc, #500]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 800141c:	849a      	strh	r2, [r3, #36]	@ 0x24

// Speed and acceleration: normal conversion
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f85d 	bl	80004e0 <__aeabi_f2d>
 8001426:	a378      	add	r3, pc, #480	@ (adr r3, 8001608 <Modbus_Protocal_Worker+0x2f0>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff f8b0 	bl	8000590 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fb64 	bl	8000b04 <__aeabi_d2f>
 800143c:	ee07 0a90 	vmov	s15, r0
 8001440:	eef0 7ae7 	vabs.f32	s15, s15
			* 10.0f);
 8001444:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001448:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 800144c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001450:	ee17 3a90 	vmov	r3, s15
 8001454:	b21b      	sxth	r3, r3
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b6d      	ldr	r3, [pc, #436]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 800145a:	851a      	strh	r2, [r3, #40]	@ 0x28
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f83e 	bl	80004e0 <__aeabi_f2d>
 8001464:	a368      	add	r3, pc, #416	@ (adr r3, 8001608 <Modbus_Protocal_Worker+0x2f0>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7ff f891 	bl	8000590 <__aeabi_dmul>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fb45 	bl	8000b04 <__aeabi_d2f>
 800147a:	ee07 0a90 	vmov	s15, r0
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 800147e:	eef0 7ae7 	vabs.f32	s15, s15
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 8001482:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001486:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 800148a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800148e:	ee17 3a90 	vmov	r3, s15
 8001492:	b21b      	sxth	r3, r3
 8001494:	b29a      	uxth	r2, r3
 8001496:	4b5e      	ldr	r3, [pc, #376]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 8001498:	859a      	strh	r2, [r3, #44]	@ 0x2c

	REG16(REG_SPEED_R) = (int16_t) (fabsf(Velocity_mm) * 10.0f);
 800149a:	edd7 7a06 	vldr	s15, [r7, #24]
 800149e:	eef0 7ae7 	vabs.f32	s15, s15
 80014a2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ae:	ee17 3a90 	vmov	r3, s15
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4b56      	ldr	r3, [pc, #344]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 80014b8:	84da      	strh	r2, [r3, #38]	@ 0x26
	REG16(REG_ACCELERATION_R) = (int16_t) (fabsf(Acceleration_mm) * 10.0f);
 80014ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80014be:	eef0 7ae7 	vabs.f32	s15, s15
 80014c2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ce:	ee17 3a90 	vmov	r3, s15
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 80014d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
	REG16(REG_POSITION_R) = (int16_t) (mmPosition * 10.0f);
 80014da:	edd7 7a04 	vldr	s15, [r7, #16]
 80014de:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ea:	ee17 3a90 	vmov	r3, s15
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b47      	ldr	r3, [pc, #284]	@ (8001610 <Modbus_Protocal_Worker+0x2f8>)
 80014f4:	845a      	strh	r2, [r3, #34]	@ 0x22

	//--Modbus
	switch (hModbus->Mstatus) {
 80014f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	7ddb      	ldrb	r3, [r3, #23]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d80a      	bhi.n	8001518 <Modbus_Protocal_Worker+0x200>
 8001502:	a201      	add	r2, pc, #4	@ (adr r2, 8001508 <Modbus_Protocal_Worker+0x1f0>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	08001523 	.word	0x08001523
 800150c:	080016ed 	.word	0x080016ed
 8001510:	080015af 	.word	0x080015af
 8001514:	08001629 	.word	0x08001629
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001518:	4b42      	ldr	r3, [pc, #264]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2201      	movs	r2, #1
 800151e:	75da      	strb	r2, [r3, #23]
		break;
 8001520:	e0fc      	b.n	800171c <Modbus_Protocal_Worker+0x404>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 8001522:	4b40      	ldr	r3, [pc, #256]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <Modbus_Protocal_Worker+0x224>
			/*set state*/
			hModbus->Mstatus = Modbus_state_Emission;
 800152e:	4b3d      	ldr	r3, [pc, #244]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2202      	movs	r2, #2
 8001534:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001536:	f000 f9e7 	bl	8001908 <Modbus_Emission>
 800153a:	e018      	b.n	800156e <Modbus_Protocal_Worker+0x256>
		}

		// Received character
		else if (hModbus->huart->RxXferSize != hModbus->huart->RxXferCount) {
 800153c:	4b39      	ldr	r3, [pc, #228]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001546:	4b37      	ldr	r3, [pc, #220]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001550:	b29b      	uxth	r3, r3
 8001552:	429a      	cmp	r2, r3
 8001554:	d00b      	beq.n	800156e <Modbus_Protocal_Worker+0x256>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001556:	4b33      	ldr	r3, [pc, #204]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2200      	movs	r2, #0
 800155c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2200      	movs	r2, #0
 8001564:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 8001566:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2203      	movs	r2, #3
 800156c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 800156e:	4b2d      	ldr	r3, [pc, #180]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001578:	2b20      	cmp	r3, #32
 800157a:	f040 80c8 	bne.w	800170e <Modbus_Protocal_Worker+0x3f6>
			hModbus->modbusUartStructure.RxTail = 0;
 800157e:	4b29      	ldr	r3, [pc, #164]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2200      	movs	r2, #0
 8001584:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001588:	4b26      	ldr	r3, [pc, #152]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68d8      	ldr	r0, [r3, #12]
					&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800158e:	4b25      	ldr	r3, [pc, #148]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b24      	ldr	r3, [pc, #144]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 800159a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800159e:	4413      	add	r3, r2
 80015a0:	3302      	adds	r3, #2
 80015a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015a6:	4619      	mov	r1, r3
 80015a8:	f008 fda2 	bl	800a0f0 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE);

		}
		break;
 80015ac:	e0af      	b.n	800170e <Modbus_Protocal_Worker+0x3f6>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 80015ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	7d1b      	ldrb	r3, [r3, #20]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80ac 	beq.w	8001712 <Modbus_Protocal_Worker+0x3fa>
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	22fe      	movs	r2, #254	@ 0xfe
 80015c0:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80015c2:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 80015cc:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 80015de:	681b      	ldr	r3, [r3, #0]
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 80015e0:	1a8a      	subs	r2, r1, r2
 80015e2:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80015e4:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <Modbus_Protocal_Worker+0x30c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2204      	movs	r2, #4
 80015ee:	75da      	strb	r2, [r3, #23]
		}
		break;
 80015f0:	e08f      	b.n	8001712 <Modbus_Protocal_Worker+0x3fa>
 80015f2:	bf00      	nop
 80015f4:	f3af 8000 	nop.w
 80015f8:	03b761f5 	.word	0x03b761f5
 80015fc:	3f5c9871 	.word	0x3f5c9871
 8001600:	54442d18 	.word	0x54442d18
 8001604:	3ff921fb 	.word	0x3ff921fb
 8001608:	1a63c1f8 	.word	0x1a63c1f8
 800160c:	404ca5dc 	.word	0x404ca5dc
 8001610:	2000112c 	.word	0x2000112c
 8001614:	20000bcf 	.word	0x20000bcf
 8001618:	20000c48 	.word	0x20000c48
 800161c:	3dcccccd 	.word	0x3dcccccd
 8001620:	20000c40 	.word	0x20000c40
 8001624:	200002ac 	.word	0x200002ac
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 8001628:	4b3e      	ldr	r3, [pc, #248]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001630:	f113 0f02 	cmn.w	r3, #2
 8001634:	d150      	bne.n	80016d8 <Modbus_Protocal_Worker+0x3c0>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001636:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2200      	movs	r2, #0
 800163c:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(
					hModbus->modbusUartStructure.MessageBufferRx,
 800163e:	4b39      	ldr	r3, [pc, #228]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f203 2272 	addw	r2, r3, #626	@ 0x272
					hModbus->modbusUartStructure.RxTail - 2);
 8001646:	4b37      	ldr	r3, [pc, #220]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			CalculateCRC.U16 = CRC16(
 800164e:	3b02      	subs	r3, #2
 8001650:	4619      	mov	r1, r3
 8001652:	4610      	mov	r0, r2
 8001654:	f7ff fde0 	bl	8001218 <CRC16>
 8001658:	4603      	mov	r3, r0
 800165a:	803b      	strh	r3, [r7, #0]

			if (!(CalculateCRC.U8[0]
 800165c:	783a      	ldrb	r2, [r7, #0]
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800165e:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 8001660:	6819      	ldr	r1, [r3, #0]
 8001662:	4b30      	ldr	r3, [pc, #192]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
							- 2]
 800166a:	3b02      	subs	r3, #2
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800166c:	440b      	add	r3, r1
 800166e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d10c      	bne.n	8001690 <Modbus_Protocal_Worker+0x378>
					&& CalculateCRC.U8[1]
 8001676:	787a      	ldrb	r2, [r7, #1]
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001678:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 800167a:	6819      	ldr	r1, [r3, #0]
 800167c:	4b29      	ldr	r3, [pc, #164]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
									- 1])) {
 8001684:	3b01      	subs	r3, #1
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001686:	440b      	add	r3, r1
 8001688:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d004      	beq.n	800169a <Modbus_Protocal_Worker+0x382>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001690:	4b24      	ldr	r3, [pc, #144]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	22ff      	movs	r2, #255	@ 0xff
 8001696:	759a      	strb	r2, [r3, #22]
				break;
 8001698:	e040      	b.n	800171c <Modbus_Protocal_Worker+0x404>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 800169a:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
					!= hModbus->slaveAddress)
 80016a2:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	781b      	ldrb	r3, [r3, #0]
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d113      	bne.n	80016d4 <Modbus_Protocal_Worker+0x3bc>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80016ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx + 1,
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80016bc:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail - 3);
 80016be:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80016c6:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80016c8:	461a      	mov	r2, r3
 80016ca:	f00a faef 	bl	800bcac <memcpy>

			//execute command
			Modbus_frame_response();
 80016ce:	f000 f903 	bl	80018d8 <Modbus_frame_response>
 80016d2:	e001      	b.n	80016d8 <Modbus_Protocal_Worker+0x3c0>
				break;
 80016d4:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 80016d6:	e021      	b.n	800171c <Modbus_Protocal_Worker+0x404>
		if (hModbus->Flag_T35TimeOut) {
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	7d5b      	ldrb	r3, [r3, #21]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d019      	beq.n	8001716 <Modbus_Protocal_Worker+0x3fe>
			hModbus->Mstatus = Modbus_state_Idle;
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2201      	movs	r2, #1
 80016e8:	75da      	strb	r2, [r3, #23]
		break;
 80016ea:	e014      	b.n	8001716 <Modbus_Protocal_Worker+0x3fe>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80016ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016f6:	2b20      	cmp	r3, #32
 80016f8:	d10f      	bne.n	800171a <Modbus_Protocal_Worker+0x402>
			hModbus->TxCount = 0;
 80016fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001704:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <Modbus_Protocal_Worker+0x40c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	75da      	strb	r2, [r3, #23]
		break;
 800170c:	e005      	b.n	800171a <Modbus_Protocal_Worker+0x402>
		break;
 800170e:	bf00      	nop
 8001710:	e004      	b.n	800171c <Modbus_Protocal_Worker+0x404>
		break;
 8001712:	bf00      	nop
 8001714:	e002      	b.n	800171c <Modbus_Protocal_Worker+0x404>
		break;
 8001716:	bf00      	nop
 8001718:	e000      	b.n	800171c <Modbus_Protocal_Worker+0x404>
		break;
 800171a:	bf00      	nop
}
 800171c:	bf00      	nop
 800171e:	3724      	adds	r7, #36	@ 0x24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd90      	pop	{r4, r7, pc}
 8001724:	200002ac 	.word	0x200002ac

08001728 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 800172e:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <modbusWrite1Register+0x7c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	7e5b      	ldrb	r3, [r3, #25]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	b29b      	uxth	r3, r3
 8001738:	4a1a      	ldr	r2, [pc, #104]	@ (80017a4 <modbusWrite1Register+0x7c>)
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	7e92      	ldrb	r2, [r2, #26]
 800173e:	4413      	add	r3, r2
 8001740:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 8001742:	88fa      	ldrh	r2, [r7, #6]
 8001744:	4b17      	ldr	r3, [pc, #92]	@ (80017a4 <modbusWrite1Register+0x7c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	429a      	cmp	r2, r3
 800174c:	d903      	bls.n	8001756 <modbusWrite1Register+0x2e>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800174e:	2002      	movs	r0, #2
 8001750:	f000 f8a0 	bl	8001894 <ModbusErrorReply>
		return;
 8001754:	e023      	b.n	800179e <modbusWrite1Register+0x76>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001756:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <modbusWrite1Register+0x7c>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <modbusWrite1Register+0x7c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	440b      	add	r3, r1
 8001766:	7ed2      	ldrb	r2, [r2, #27]
 8001768:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <modbusWrite1Register+0x7c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <modbusWrite1Register+0x7c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	440b      	add	r3, r1
 800177a:	7f12      	ldrb	r2, [r2, #28]
 800177c:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <modbusWrite1Register+0x7c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 8001786:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <modbusWrite1Register+0x7c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	3318      	adds	r3, #24
 800178c:	2208      	movs	r2, #8
 800178e:	4619      	mov	r1, r3
 8001790:	f00a fa8c 	bl	800bcac <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 8001794:	4b03      	ldr	r3, [pc, #12]	@ (80017a4 <modbusWrite1Register+0x7c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2205      	movs	r2, #5
 800179a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200002ac 	.word	0x200002ac

080017a8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 80017ae:	4b38      	ldr	r3, [pc, #224]	@ (8001890 <modbusRead1Register+0xe8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	7edb      	ldrb	r3, [r3, #27]
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	b29b      	uxth	r3, r3
			+ (hModbus->Rxframe[4]));
 80017b8:	4a35      	ldr	r2, [pc, #212]	@ (8001890 <modbusRead1Register+0xe8>)
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	7f12      	ldrb	r2, [r2, #28]
	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 80017be:	4413      	add	r3, r2
 80017c0:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 80017c2:	4b33      	ldr	r3, [pc, #204]	@ (8001890 <modbusRead1Register+0xe8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	7e5b      	ldrb	r3, [r3, #25]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4a30      	ldr	r2, [pc, #192]	@ (8001890 <modbusRead1Register+0xe8>)
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	7e92      	ldrb	r2, [r2, #26]
 80017d2:	4413      	add	r3, r2
 80017d4:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <modbusRead1Register+0x3a>
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	2b7d      	cmp	r3, #125	@ 0x7d
 80017e0:	d903      	bls.n	80017ea <modbusRead1Register+0x42>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80017e2:	2003      	movs	r0, #3
 80017e4:	f000 f856 	bl	8001894 <ModbusErrorReply>
		return;
 80017e8:	e04e      	b.n	8001888 <modbusRead1Register+0xe0>
	}

	if (startAddress > hModbus->RegisterSize
 80017ea:	88ba      	ldrh	r2, [r7, #4]
 80017ec:	4b28      	ldr	r3, [pc, #160]	@ (8001890 <modbusRead1Register+0xe8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d808      	bhi.n	8001808 <modbusRead1Register+0x60>
			|| (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 80017f6:	88ba      	ldrh	r2, [r7, #4]
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	4413      	add	r3, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <modbusRead1Register+0xe8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	429a      	cmp	r2, r3
 8001806:	d903      	bls.n	8001810 <modbusRead1Register+0x68>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001808:	2002      	movs	r0, #2
 800180a:	f000 f843 	bl	8001894 <ModbusErrorReply>
		return;
 800180e:	e03b      	b.n	8001888 <modbusRead1Register+0xe0>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001810:	4b1f      	ldr	r3, [pc, #124]	@ (8001890 <modbusRead1Register+0xe8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2203      	movs	r2, #3
 8001816:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <modbusRead1Register+0xe8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0052      	lsls	r2, r2, #1
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 800182a:	2400      	movs	r4, #0
 800182c:	e020      	b.n	8001870 <modbusRead1Register+0xc8>
		hModbus->Txframe[2 * i + 2] =
				hModbus->RegisterAddress[startAddress + i].U8[1];
 800182e:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <modbusRead1Register+0xe8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	4423      	add	r3, r4
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 2] =
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <modbusRead1Register+0xe8>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	1c63      	adds	r3, r4, #1
 8001842:	005b      	lsls	r3, r3, #1
				hModbus->RegisterAddress[startAddress + i].U8[1];
 8001844:	7849      	ldrb	r1, [r1, #1]
		hModbus->Txframe[2 * i + 2] =
 8001846:	4413      	add	r3, r2
 8001848:	460a      	mov	r2, r1
 800184a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2 * i + 3] =
				hModbus->RegisterAddress[startAddress + i].U8[0];
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <modbusRead1Register+0xe8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	88bb      	ldrh	r3, [r7, #4]
 8001856:	4423      	add	r3, r4
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 3] =
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <modbusRead1Register+0xe8>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	0063      	lsls	r3, r4, #1
 8001862:	3303      	adds	r3, #3
				hModbus->RegisterAddress[startAddress + i].U8[0];
 8001864:	7809      	ldrb	r1, [r1, #0]
		hModbus->Txframe[2 * i + 3] =
 8001866:	4413      	add	r3, r2
 8001868:	460a      	mov	r2, r1
 800186a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for (i = 0; i < numberOfDataToRead; i++) {
 800186e:	3401      	adds	r4, #1
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	429c      	cmp	r4, r3
 8001874:	dbdb      	blt.n	800182e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	3301      	adds	r3, #1
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <modbusRead1Register+0xe8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0052      	lsls	r2, r2, #1
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bd90      	pop	{r4, r7, pc}
 800188e:	bf00      	nop
 8001890:	200002ac 	.word	0x200002ac

08001894 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <ModbusErrorReply+0x40>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	7e1a      	ldrb	r2, [r3, #24]
 80018a4:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <ModbusErrorReply+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80018b2:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <ModbusErrorReply+0x40>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	79fa      	ldrb	r2, [r7, #7]
 80018b8:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <ModbusErrorReply+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2202      	movs	r2, #2
 80018c2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	200002ac 	.word	0x200002ac

080018d8 <Modbus_frame_response>:

void Modbus_frame_response() {
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <Modbus_frame_response+0x2c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	7e1b      	ldrb	r3, [r3, #24]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d004      	beq.n	80018f0 <Modbus_frame_response+0x18>
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d105      	bne.n	80018f6 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80018ea:	f7ff ff1d 	bl	8001728 <modbusWrite1Register>
		break;
 80018ee:	e006      	b.n	80018fe <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80018f0:	f7ff ff5a 	bl	80017a8 <modbusRead1Register>
		break;
 80018f4:	e003      	b.n	80018fe <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f7ff ffcc 	bl	8001894 <ModbusErrorReply>
		break;
 80018fc:	bf00      	nop

	}
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200002ac 	.word	0x200002ac

08001908 <Modbus_Emission>:

void Modbus_Emission() {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 800190e:	4b38      	ldr	r3, [pc, #224]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001918:	2b20      	cmp	r3, #32
 800191a:	d15d      	bne.n	80019d8 <Modbus_Emission+0xd0>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800191c:	4b34      	ldr	r3, [pc, #208]	@ (80019f0 <Modbus_Emission+0xe8>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b33      	ldr	r3, [pc, #204]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	7812      	ldrb	r2, [r2, #0]
 8001926:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 800192a:	4b31      	ldr	r3, [pc, #196]	@ (80019f0 <Modbus_Emission+0xe8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8001932:	1c58      	adds	r0, r3, #1
				hModbus->Txframe, hModbus->TxCount);
 8001934:	4b2e      	ldr	r3, [pc, #184]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
 800193c:	4b2c      	ldr	r3, [pc, #176]	@ (80019f0 <Modbus_Emission+0xe8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 8001944:	461a      	mov	r2, r3
 8001946:	f00a f9b1 	bl	800bcac <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 800194a:	4b29      	ldr	r3, [pc, #164]	@ (80019f0 <Modbus_Emission+0xe8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001952:	461a      	mov	r2, r3
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3203      	adds	r2, #3
 800195a:	b292      	uxth	r2, r2
 800195c:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001960:	4b23      	ldr	r3, [pc, #140]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001968:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <Modbus_Emission+0xe8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001970:	3b02      	subs	r3, #2
 8001972:	4619      	mov	r1, r3
 8001974:	4610      	mov	r0, r2
 8001976:	f7ff fc4f 	bl	8001218 <CRC16>
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 800197e:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 2] = CalculateCRC.U8[0];
 800198a:	3b02      	subs	r3, #2
 800198c:	7939      	ldrb	r1, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	460a      	mov	r2, r1
 8001992:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 8001996:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <Modbus_Emission+0xe8>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <Modbus_Emission+0xe8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 1] = CalculateCRC.U8[1];
 80019a2:	3b01      	subs	r3, #1
 80019a4:	7979      	ldrb	r1, [r7, #5]
 80019a6:	4413      	add	r3, r2
 80019a8:	460a      	mov	r2, r1
 80019aa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		//sent modbus

		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <Modbus_Emission+0xe8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019b8:	2b20      	cmp	r3, #32
 80019ba:	d10d      	bne.n	80019d8 <Modbus_Emission+0xd0>
			HAL_UART_Transmit_DMA(hModbus->huart,
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <Modbus_Emission+0xe8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68d8      	ldr	r0, [r3, #12]
					hModbus->modbusUartStructure.MessageBufferTx,
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <Modbus_Emission+0xe8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					hModbus->modbusUartStructure.TxTail);
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <Modbus_Emission+0xe8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart,
 80019ce:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80019d2:	461a      	mov	r2, r3
 80019d4:	f008 fb0c 	bl	8009ff0 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <Modbus_Emission+0xe8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2200      	movs	r2, #0
 80019de:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <Modbus_Emission+0xe8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2200      	movs	r2, #0
 80019e6:	755a      	strb	r2, [r3, #21]

}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200002ac 	.word	0x200002ac

080019f4 <Trapezoidal_Init>:
 */

#include "math.h"
#include "Trapezoidal.h"

void Trapezoidal_Init(VELO_PROFILE *profile, float distance_total, float v_max, float a_max) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a00:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a04:	ed87 1a00 	vstr	s2, [r7]
    profile->distance_total = fabsf(distance_total);
 8001a08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a0c:	eef0 7ae7 	vabs.f32	s15, s15
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	edc3 7a00 	vstr	s15, [r3]
    profile->v_max = fabsf(v_max);
 8001a16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a1a:	eef0 7ae7 	vabs.f32	s15, s15
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	edc3 7a01 	vstr	s15, [r3, #4]
    profile->a_max = fabsf(a_max);
 8001a24:	edd7 7a00 	vldr	s15, [r7]
 8001a28:	eef0 7ae7 	vabs.f32	s15, s15
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	edc3 7a02 	vstr	s15, [r3, #8]
    profile->current_position = 0.0f;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
    profile->current_velocity = 0.0f;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
    profile->target_position = distance_total;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	61da      	str	r2, [r3, #28]
    profile->direction = (distance_total >= 0.0f) ? 1.0f : -1.0f;
 8001a48:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a54:	db02      	blt.n	8001a5c <Trapezoidal_Init+0x68>
 8001a56:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a5a:	e000      	b.n	8001a5e <Trapezoidal_Init+0x6a>
 8001a5c:	4a49      	ldr	r2, [pc, #292]	@ (8001b84 <Trapezoidal_Init+0x190>)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	621a      	str	r2, [r3, #32]
    profile->finished = 0;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
    profile->elapsed_time = 0.0f;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	625a      	str	r2, [r3, #36]	@ 0x24

    // Check if triangular profile is required
    float d_total_min = (profile->v_max * profile->v_max) / profile->a_max;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a7c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a8a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (profile->distance_total < d_total_min) {
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	dd14      	ble.n	8001acc <Trapezoidal_Init+0xd8>
        profile->is_triangular = 1;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = sqrtf(profile->a_max * profile->distance_total);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	ed93 7a02 	vldr	s14, [r3, #8]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8001abc:	f00a f904 	bl	800bcc8 <sqrtf>
 8001ac0:	eef0 7a40 	vmov.f32	s15, s0
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	edc3 7a03 	vstr	s15, [r3, #12]
 8001aca:	e006      	b.n	8001ada <Trapezoidal_Init+0xe6>
    } else {
        profile->is_triangular = 0;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = profile->v_max;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	60da      	str	r2, [r3, #12]
    }

    // Precompute timing and distances
    profile->t_acc = profile->v_peak / profile->a_max;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    profile->d_acc = 0.5f * profile->a_max * profile->t_acc * profile->t_acc;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001af6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001afa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    if (profile->is_triangular) {
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <Trapezoidal_Init+0x13e>
        profile->t_flat = 0.0f;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	635a      	str	r2, [r3, #52]	@ 0x34
        profile->d_flat = 0.0f;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b30:	e017      	b.n	8001b62 <Trapezoidal_Init+0x16e>
    } else {
        profile->d_flat = profile->distance_total - 2 * profile->d_acc;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001b3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        profile->t_flat = profile->d_flat / profile->v_peak;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    }

    profile->t_total = 2 * profile->t_acc + profile->t_flat;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b68:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
}
 8001b7c:	bf00      	nop
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	bf800000 	.word	0xbf800000

08001b88 <Trapezoidal_Update>:

void Trapezoidal_Update(VELO_PROFILE *profile, float dt) {
 8001b88:	b480      	push	{r7}
 8001b8a:	b095      	sub	sp, #84	@ 0x54
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	ed87 0a00 	vstr	s0, [r7]
    if (profile->finished) return;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f040 812c 	bne.w	8001df6 <Trapezoidal_Update+0x26e>

    profile->elapsed_time += dt;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001ba4:	edd7 7a00 	vldr	s15, [r7]
 8001ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    float t = profile->elapsed_time;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	63bb      	str	r3, [r7, #56]	@ 0x38

    float a = profile->a_max;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	637b      	str	r3, [r7, #52]	@ 0x34
    float v = profile->v_peak;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	633b      	str	r3, [r7, #48]	@ 0x30
    float d_total = profile->distance_total;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float t_acc = v / a;
 8001bca:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001bce:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float d_acc = 0.5f * a * t_acc * t_acc;
 8001bda:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001bde:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001be2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001be6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bee:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    float t_flat = 0.0f;
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float d_flat = 0.0f;
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	64bb      	str	r3, [r7, #72]	@ 0x48

    if (!profile->is_triangular) {
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d111      	bne.n	8001c32 <Trapezoidal_Update+0xaa>
        d_flat = d_total - 2 * d_acc;
 8001c0e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c16:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        t_flat = d_flat / v;
 8001c22:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001c26:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c2e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    }

    float t1 = t_acc;
 8001c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c34:	623b      	str	r3, [r7, #32]
    float t2 = t_acc + t_flat;
 8001c36:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c3a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c42:	edc7 7a07 	vstr	s15, [r7, #28]
    float t3 = t_acc + t_flat + t_acc;
 8001c46:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c4a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c52:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5a:	edc7 7a06 	vstr	s15, [r7, #24]

    float pos = 0.0f;
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	647b      	str	r3, [r7, #68]	@ 0x44
    float vel = 0.0f;
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	643b      	str	r3, [r7, #64]	@ 0x40
    float acc = 0.0f;
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float eps = 1e-6f;
 8001c70:	4b64      	ldr	r3, [pc, #400]	@ (8001e04 <Trapezoidal_Update+0x27c>)
 8001c72:	617b      	str	r3, [r7, #20]

    if (t < t1 - eps) {
 8001c74:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c78:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c80:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	d51a      	bpl.n	8001cc4 <Trapezoidal_Update+0x13c>
        // Acceleration phase
        pos = 0.5f * a * t * t;
 8001c8e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c92:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c9a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001caa:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = a * t;
 8001cae:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001cb2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = a;
 8001cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cc2:	e079      	b.n	8001db8 <Trapezoidal_Update+0x230>
    } else if (t < t2 - eps) {
 8001cc4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cdc:	d519      	bpl.n	8001d12 <Trapezoidal_Update+0x18a>
        // Constant velocity phase
        float t_flat_phase = t - t1;
 8001cde:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001ce2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cea:	edc7 7a03 	vstr	s15, [r7, #12]
        pos = d_acc + v * t_flat_phase;
 8001cee:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001cf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d02:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v;
 8001d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d08:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d10:	e052      	b.n	8001db8 <Trapezoidal_Update+0x230>
    } else if (t < t3 - eps) {
 8001d12:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d16:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	d53a      	bpl.n	8001da2 <Trapezoidal_Update+0x21a>
        // Deceleration phase
        float td = t - t2;
 8001d2c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d30:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d38:	edc7 7a04 	vstr	s15, [r7, #16]
        pos = d_acc + d_flat + v * td - 0.5f * a * td * td;
 8001d3c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d40:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d48:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001d4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d58:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d5c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001d60:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d78:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v - a * td;
 8001d7c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001d80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d88:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d90:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = -a;
 8001d94:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d98:	eef1 7a67 	vneg.f32	s15, s15
 8001d9c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001da0:	e00a      	b.n	8001db8 <Trapezoidal_Update+0x230>
    } else {
        // Motion complete
        pos = d_total;
 8001da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da4:	647b      	str	r3, [r7, #68]	@ 0x44
        vel = 0.0f;
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        profile->finished = 1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // Apply direction
    profile->current_position = pos * profile->direction;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dbe:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->current_velocity = vel * profile->direction;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dd2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->current_acceleration = acc * profile->direction;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	ed93 7a08 	vldr	s14, [r3, #32]
 8001de6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	edc3 7a06 	vstr	s15, [r3, #24]
 8001df4:	e000      	b.n	8001df8 <Trapezoidal_Update+0x270>
    if (profile->finished) return;
 8001df6:	bf00      	nop
}
 8001df8:	3754      	adds	r7, #84	@ 0x54
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	358637bd 	.word	0x358637bd

08001e08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e0c:	ed2d 8b02 	vpush	{d8}
 8001e10:	b0a5      	sub	sp, #148	@ 0x94
 8001e12:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e14:	f003 fbe3 	bl	80055de <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e18:	f001 fb0c 	bl	8003434 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e1c:	f001 ff66 	bl	8003cec <MX_GPIO_Init>
	MX_DMA_Init();
 8001e20:	f001 ff32 	bl	8003c88 <MX_DMA_Init>
	MX_TIM4_Init();
 8001e24:	f001 fcae 	bl	8003784 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001e28:	f001 fd02 	bl	8003830 <MX_TIM5_Init>
	MX_TIM3_Init();
 8001e2c:	f001 fc54 	bl	80036d8 <MX_TIM3_Init>
	MX_TIM8_Init();
 8001e30:	f001 fd4c 	bl	80038cc <MX_TIM8_Init>
	MX_TIM15_Init();
 8001e34:	f001 fe06 	bl	8003a44 <MX_TIM15_Init>
	MX_TIM1_Init();
 8001e38:	f001 fb48 	bl	80034cc <MX_TIM1_Init>
	MX_TIM2_Init();
 8001e3c:	f001 fbcc 	bl	80035d8 <MX_TIM2_Init>
	MX_TIM16_Init();
 8001e40:	f001 fea4 	bl	8003b8c <MX_TIM16_Init>
	MX_USART2_UART_Init();
 8001e44:	f001 fed2 	bl	8003bec <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001e48:	484b      	ldr	r0, [pc, #300]	@ (8001f78 <main+0x170>)
 8001e4a:	f005 fad9 	bl	8007400 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4849      	ldr	r0, [pc, #292]	@ (8001f78 <main+0x170>)
 8001e52:	f005 fda1 	bl	8007998 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001e56:	2104      	movs	r1, #4
 8001e58:	4847      	ldr	r0, [pc, #284]	@ (8001f78 <main+0x170>)
 8001e5a:	f005 fd9d 	bl	8007998 <HAL_TIM_IC_Start>
	HAL_TIM_Base_Start(&htim2);
 8001e5e:	4847      	ldr	r0, [pc, #284]	@ (8001f7c <main+0x174>)
 8001e60:	f005 face 	bl	8007400 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001e64:	2100      	movs	r1, #0
 8001e66:	4845      	ldr	r0, [pc, #276]	@ (8001f7c <main+0x174>)
 8001e68:	f005 fd96 	bl	8007998 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001e6c:	2104      	movs	r1, #4
 8001e6e:	4843      	ldr	r0, [pc, #268]	@ (8001f7c <main+0x174>)
 8001e70:	f005 fd92 	bl	8007998 <HAL_TIM_IC_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001e74:	213c      	movs	r1, #60	@ 0x3c
 8001e76:	4842      	ldr	r0, [pc, #264]	@ (8001f80 <main+0x178>)
 8001e78:	f006 f83c 	bl	8007ef4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001e7c:	213c      	movs	r1, #60	@ 0x3c
 8001e7e:	4841      	ldr	r0, [pc, #260]	@ (8001f84 <main+0x17c>)
 8001e80:	f006 f838 	bl	8007ef4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001e84:	4840      	ldr	r0, [pc, #256]	@ (8001f88 <main+0x180>)
 8001e86:	f005 fb2b 	bl	80074e0 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8);
 8001e8a:	4840      	ldr	r0, [pc, #256]	@ (8001f8c <main+0x184>)
 8001e8c:	f005 fab8 	bl	8007400 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001e90:	2108      	movs	r1, #8
 8001e92:	483e      	ldr	r0, [pc, #248]	@ (8001f8c <main+0x184>)
 8001e94:	f005 fc0a 	bl	80076ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001e98:	210c      	movs	r1, #12
 8001e9a:	483c      	ldr	r0, [pc, #240]	@ (8001f8c <main+0x184>)
 8001e9c:	f005 fc06 	bl	80076ac <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim15);
 8001ea0:	483b      	ldr	r0, [pc, #236]	@ (8001f90 <main+0x188>)
 8001ea2:	f005 faad 	bl	8007400 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4839      	ldr	r0, [pc, #228]	@ (8001f90 <main+0x188>)
 8001eaa:	f005 fbff 	bl	80076ac <HAL_TIM_PWM_Start>
	//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
	DWT_Init();
 8001eae:	f002 f851 	bl	8003f54 <DWT_Init>

	PID.Kp = 0.1;
 8001eb2:	4a38      	ldr	r2, [pc, #224]	@ (8001f94 <main+0x18c>)
 8001eb4:	4b38      	ldr	r3, [pc, #224]	@ (8001f98 <main+0x190>)
 8001eb6:	6193      	str	r3, [r2, #24]
	PID.Ki = 0.00001;
 8001eb8:	4a36      	ldr	r2, [pc, #216]	@ (8001f94 <main+0x18c>)
 8001eba:	4b38      	ldr	r3, [pc, #224]	@ (8001f9c <main+0x194>)
 8001ebc:	61d3      	str	r3, [r2, #28]
	PID.Kd = 0.1;
 8001ebe:	4a35      	ldr	r2, [pc, #212]	@ (8001f94 <main+0x18c>)
 8001ec0:	4b35      	ldr	r3, [pc, #212]	@ (8001f98 <main+0x190>)
 8001ec2:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4833      	ldr	r0, [pc, #204]	@ (8001f94 <main+0x18c>)
 8001ec8:	f009 fe88 	bl	800bbdc <arm_pid_init_f32>

	Reset_R();
 8001ecc:	f002 fc92 	bl	80047f4 <Reset_R>
	Reset_P();
 8001ed0:	f002 fca0 	bl	8004814 <Reset_P>
	calibState = CALIB_IDLE;
 8001ed4:	4a32      	ldr	r2, [pc, #200]	@ (8001fa0 <main+0x198>)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	7013      	strb	r3, [r2, #0]

	Set_Servo(0);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f002 fc60 	bl	80047a0 <Set_Servo>

	// BaseSystem//////////
	hmodbus.huart = &huart2;
 8001ee0:	4a30      	ldr	r2, [pc, #192]	@ (8001fa4 <main+0x19c>)
 8001ee2:	4b31      	ldr	r3, [pc, #196]	@ (8001fa8 <main+0x1a0>)
 8001ee4:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim16;
 8001ee6:	4a2f      	ldr	r2, [pc, #188]	@ (8001fa4 <main+0x19c>)
 8001ee8:	4b30      	ldr	r3, [pc, #192]	@ (8001fac <main+0x1a4>)
 8001eea:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8001eec:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa4 <main+0x19c>)
 8001eee:	2315      	movs	r3, #21
 8001ef0:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8001ef2:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa4 <main+0x19c>)
 8001ef4:	23c8      	movs	r3, #200	@ 0xc8
 8001ef6:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001ef8:	492d      	ldr	r1, [pc, #180]	@ (8001fb0 <main+0x1a8>)
 8001efa:	482a      	ldr	r0, [pc, #168]	@ (8001fa4 <main+0x19c>)
 8001efc:	f7ff f936 	bl	800116c <Modbus_init>
	ResetAllTargets;
	REG16(REG_MOTION_STATUS) = 0;
 8001f00:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb0 <main+0x1a8>)
 8001f02:	2300      	movs	r3, #0
 8001f04:	8413      	strh	r3, [r2, #32]
	Set_Motor(0, 0);
 8001f06:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8001fb4 <main+0x1ac>
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f002 fbca 	bl	80046a4 <Set_Motor>
	Set_Motor(1, 0);
 8001f10:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001fb4 <main+0x1ac>
 8001f14:	2001      	movs	r0, #1
 8001f16:	f002 fbc5 	bl	80046a4 <Set_Motor>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//////////////////////// <<BaseSystem>> /////////////////////////
		if (Test_no_BaseSystem == 0
 8001f1a:	4b27      	ldr	r3, [pc, #156]	@ (8001fb8 <main+0x1b0>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10a      	bne.n	8001f38 <main+0x130>
				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 8001f22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f26:	4825      	ldr	r0, [pc, #148]	@ (8001fbc <main+0x1b4>)
 8001f28:	f004 f98e 	bl	8006248 <HAL_GPIO_ReadPin>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <main+0x130>
			Test_no_BaseSystem = 1;
 8001f32:	4a21      	ldr	r2, [pc, #132]	@ (8001fb8 <main+0x1b0>)
 8001f34:	2301      	movs	r3, #1
 8001f36:	7013      	strb	r3, [r2, #0]
		}

		base_status = REG16(REG_BASE_STATUS);
 8001f38:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <main+0x1a8>)
 8001f3a:	885b      	ldrh	r3, [r3, #2]
 8001f3c:	4a20      	ldr	r2, [pc, #128]	@ (8001fc0 <main+0x1b8>)
 8001f3e:	8013      	strh	r3, [r2, #0]
		if (EmergencyState == 0) {
 8001f40:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <main+0x1bc>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d17f      	bne.n	8002048 <main+0x240>
			switch (base_status) {
 8001f48:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <main+0x1b8>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d00e      	beq.n	8001f6e <main+0x166>
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	dc39      	bgt.n	8001fc8 <main+0x1c0>
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d002      	beq.n	8001f5e <main+0x156>
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d004      	beq.n	8001f66 <main+0x15e>
			case 4: // Run Point Mode
				REG16(REG_MOTION_STATUS) = 4;
				break;

			default:
				break;
 8001f5c:	e034      	b.n	8001fc8 <main+0x1c0>
				REG16(REG_MOTION_STATUS) = 1;
 8001f5e:	4a14      	ldr	r2, [pc, #80]	@ (8001fb0 <main+0x1a8>)
 8001f60:	2301      	movs	r3, #1
 8001f62:	8413      	strh	r3, [r2, #32]
				break;
 8001f64:	e031      	b.n	8001fca <main+0x1c2>
				REG16(REG_MOTION_STATUS) = 2;
 8001f66:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <main+0x1a8>)
 8001f68:	2302      	movs	r3, #2
 8001f6a:	8413      	strh	r3, [r2, #32]
				break;
 8001f6c:	e02d      	b.n	8001fca <main+0x1c2>
				REG16(REG_MOTION_STATUS) = 4;
 8001f6e:	4a10      	ldr	r2, [pc, #64]	@ (8001fb0 <main+0x1a8>)
 8001f70:	2304      	movs	r3, #4
 8001f72:	8413      	strh	r3, [r2, #32]
				break;
 8001f74:	e029      	b.n	8001fca <main+0x1c2>
 8001f76:	bf00      	nop
 8001f78:	200002b0 	.word	0x200002b0
 8001f7c:	2000037c 	.word	0x2000037c
 8001f80:	20000448 	.word	0x20000448
 8001f84:	20000514 	.word	0x20000514
 8001f88:	200005e0 	.word	0x200005e0
 8001f8c:	200006ac 	.word	0x200006ac
 8001f90:	20000778 	.word	0x20000778
 8001f94:	20000bd4 	.word	0x20000bd4
 8001f98:	3dcccccd 	.word	0x3dcccccd
 8001f9c:	3727c5ac 	.word	0x3727c5ac
 8001fa0:	20000c1c 	.word	0x20000c1c
 8001fa4:	20000c54 	.word	0x20000c54
 8001fa8:	20000910 	.word	0x20000910
 8001fac:	20000844 	.word	0x20000844
 8001fb0:	2000112c 	.word	0x2000112c
 8001fb4:	00000000 	.word	0x00000000
 8001fb8:	20000c3e 	.word	0x20000c3e
 8001fbc:	48000800 	.word	0x48000800
 8001fc0:	200012bc 	.word	0x200012bc
 8001fc4:	20000bcd 	.word	0x20000bcd
				break;
 8001fc8:	bf00      	nop
			}

			if (TargetR_BaseSystem != Last_TargetR_BaseSystem) {
 8001fca:	4b87      	ldr	r3, [pc, #540]	@ (80021e8 <main+0x3e0>)
 8001fcc:	ed93 7a00 	vldr	s14, [r3]
 8001fd0:	4b86      	ldr	r3, [pc, #536]	@ (80021ec <main+0x3e4>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	eeb4 7a67 	vcmp.f32	s14, s15
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	d007      	beq.n	8001ff0 <main+0x1e8>
				TargetR = TargetR_BaseSystem;
 8001fe0:	4b81      	ldr	r3, [pc, #516]	@ (80021e8 <main+0x3e0>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b82      	ldr	r3, [pc, #520]	@ (80021f0 <main+0x3e8>)
 8001fe6:	601a      	str	r2, [r3, #0]
				Last_TargetR_BaseSystem = TargetR_BaseSystem;
 8001fe8:	4b7f      	ldr	r3, [pc, #508]	@ (80021e8 <main+0x3e0>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b7f      	ldr	r3, [pc, #508]	@ (80021ec <main+0x3e4>)
 8001fee:	601a      	str	r2, [r3, #0]
			}
			if (TargetP_BaseSystem != Last_Pen_BaseSystem) {
 8001ff0:	4b80      	ldr	r3, [pc, #512]	@ (80021f4 <main+0x3ec>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	ee07 3a90 	vmov	s15, r3
 8001ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ffc:	4b7e      	ldr	r3, [pc, #504]	@ (80021f8 <main+0x3f0>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	eeb4 7a67 	vcmp.f32	s14, s15
 8002006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200a:	d00e      	beq.n	800202a <main+0x222>
				TargetP = TargetP_BaseSystem;
 800200c:	4b7a      	ldr	r3, [pc, #488]	@ (80021f8 <main+0x3f0>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b7a      	ldr	r3, [pc, #488]	@ (80021fc <main+0x3f4>)
 8002012:	601a      	str	r2, [r3, #0]
				Last_Pen_BaseSystem = TargetP_BaseSystem;
 8002014:	4b78      	ldr	r3, [pc, #480]	@ (80021f8 <main+0x3f0>)
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002022:	793b      	ldrb	r3, [r7, #4]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	4a73      	ldr	r2, [pc, #460]	@ (80021f4 <main+0x3ec>)
 8002028:	7013      	strb	r3, [r2, #0]
			}
			if (Pen_BaseSystem != Last_Pen_BaseSystem) {
 800202a:	4b75      	ldr	r3, [pc, #468]	@ (8002200 <main+0x3f8>)
 800202c:	781a      	ldrb	r2, [r3, #0]
 800202e:	4b71      	ldr	r3, [pc, #452]	@ (80021f4 <main+0x3ec>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d008      	beq.n	8002048 <main+0x240>
				Set_Servo(Pen_BaseSystem);
 8002036:	4b72      	ldr	r3, [pc, #456]	@ (8002200 <main+0x3f8>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f002 fbb0 	bl	80047a0 <Set_Servo>
				Last_Pen_BaseSystem = Pen_BaseSystem;
 8002040:	4b6f      	ldr	r3, [pc, #444]	@ (8002200 <main+0x3f8>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4a6b      	ldr	r2, [pc, #428]	@ (80021f4 <main+0x3ec>)
 8002046:	7013      	strb	r3, [r2, #0]
			}
		}
		//		RD_Velo_Error = R_Velo_Error * (M_PI / 180.0f);
		Modbus_Protocal_Worker();
 8002048:	f7ff f966 	bl	8001318 <Modbus_Protocal_Worker>
		//////////////////////////////////////////////////////////////

		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 800204c:	4b6d      	ldr	r3, [pc, #436]	@ (8002204 <main+0x3fc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002052:	4b6d      	ldr	r3, [pc, #436]	@ (8002208 <main+0x400>)
 8002054:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8002056:	4b6d      	ldr	r3, [pc, #436]	@ (800220c <main+0x404>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800205c:	4b6c      	ldr	r3, [pc, #432]	@ (8002210 <main+0x408>)
 800205e:	601a      	str	r2, [r3, #0]
		// Call every 0.001 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 8002060:	f002 f86e 	bl	8004140 <micros>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		if (currentTime > timestamp) {
 800206c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002070:	4b68      	ldr	r3, [pc, #416]	@ (8002214 <main+0x40c>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	4282      	cmp	r2, r0
 8002078:	418b      	sbcs	r3, r1
 800207a:	d210      	bcs.n	800209e <main+0x296>
			timestamp = currentTime + 1000; // us
 800207c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002080:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8002084:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002086:	f143 0300 	adc.w	r3, r3, #0
 800208a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800208c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002090:	4b60      	ldr	r3, [pc, #384]	@ (8002214 <main+0x40c>)
 8002092:	e9c3 0100 	strd	r0, r1, [r3]
			Revolute_PosVel_Update();
 8002096:	f002 f937 	bl	8004308 <Revolute_PosVel_Update>
			Prismatic_PosVel_Update();
 800209a:	f002 fa3f 	bl	800451c <Prismatic_PosVel_Update>
		}
		// Call every 0.01 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 800209e:	f002 f84f 	bl	8004140 <micros>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
		if (currentTime1 > timestamp1) {
 80020aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80020ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002218 <main+0x410>)
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	4282      	cmp	r2, r0
 80020b6:	418b      	sbcs	r3, r1
 80020b8:	d20d      	bcs.n	80020d6 <main+0x2ce>
			timestamp1 = currentTime1 + 10000; // us
 80020ba:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80020be:	f242 7110 	movw	r1, #10000	@ 0x2710
 80020c2:	1851      	adds	r1, r2, r1
 80020c4:	6539      	str	r1, [r7, #80]	@ 0x50
 80020c6:	f143 0300 	adc.w	r3, r3, #0
 80020ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80020cc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80020d0:	4b51      	ldr	r3, [pc, #324]	@ (8002218 <main+0x410>)
 80020d2:	e9c3 0100 	strd	r0, r1, [r3]
		}
		// Call every 0.1 s
		static uint64_t timestamp2 = 0;
		int64_t currentTime2 = micros();
 80020d6:	f002 f833 	bl	8004140 <micros>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		if (currentTime2 > timestamp2) {
 80020e2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80020e6:	4b4d      	ldr	r3, [pc, #308]	@ (800221c <main+0x414>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	4282      	cmp	r2, r0
 80020ee:	418b      	sbcs	r3, r1
 80020f0:	d20c      	bcs.n	800210c <main+0x304>
			timestamp2 = currentTime2 + 100000; // us
 80020f2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80020f6:	494a      	ldr	r1, [pc, #296]	@ (8002220 <main+0x418>)
 80020f8:	1851      	adds	r1, r2, r1
 80020fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80020fc:	f143 0300 	adc.w	r3, r3, #0
 8002100:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002102:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002106:	4b45      	ldr	r3, [pc, #276]	@ (800221c <main+0x414>)
 8002108:	e9c3 0100 	strd	r0, r1, [r3]
		}
		End_x = Prismatic_QEIdata.mmPosition
 800210c:	4b45      	ldr	r3, [pc, #276]	@ (8002224 <main+0x41c>)
 800210e:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
				* cosf(Revolute_QEIdata.RadPosition * -1);
 8002112:	4b45      	ldr	r3, [pc, #276]	@ (8002228 <main+0x420>)
 8002114:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002118:	eef1 7a67 	vneg.f32	s15, s15
 800211c:	eeb0 0a67 	vmov.f32	s0, s15
 8002120:	f009 fdf0 	bl	800bd04 <cosf>
 8002124:	eef0 7a40 	vmov.f32	s15, s0
 8002128:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_x = Prismatic_QEIdata.mmPosition
 800212c:	4b3f      	ldr	r3, [pc, #252]	@ (800222c <main+0x424>)
 800212e:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition
 8002132:	4b3c      	ldr	r3, [pc, #240]	@ (8002224 <main+0x41c>)
 8002134:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
				* sinf(Revolute_QEIdata.RadPosition);
 8002138:	4b3b      	ldr	r3, [pc, #236]	@ (8002228 <main+0x420>)
 800213a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800213e:	eeb0 0a67 	vmov.f32	s0, s15
 8002142:	f009 fe23 	bl	800bd8c <sinf>
 8002146:	eef0 7a40 	vmov.f32	s15, s0
 800214a:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_y = Prismatic_QEIdata.mmPosition
 800214e:	4b38      	ldr	r3, [pc, #224]	@ (8002230 <main+0x428>)
 8002150:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8002154:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002158:	4836      	ldr	r0, [pc, #216]	@ (8002234 <main+0x42c>)
 800215a:	f004 f875 	bl	8006248 <HAL_GPIO_ReadPin>
 800215e:	4603      	mov	r3, r0
 8002160:	2b01      	cmp	r3, #1
 8002162:	d10e      	bne.n	8002182 <main+0x37a>
			Mode = 0;
 8002164:	4a34      	ldr	r2, [pc, #208]	@ (8002238 <main+0x430>)
 8002166:	2300      	movs	r3, #0
 8002168:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 800216a:	4a34      	ldr	r2, [pc, #208]	@ (800223c <main+0x434>)
 800216c:	2301      	movs	r3, #1
 800216e:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 8002170:	2000      	movs	r0, #0
 8002172:	f002 fb15 	bl	80047a0 <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8002176:	2201      	movs	r2, #1
 8002178:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800217c:	482d      	ldr	r0, [pc, #180]	@ (8002234 <main+0x42c>)
 800217e:	f004 f87b 	bl	8006278 <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1) {
 8002182:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002186:	482e      	ldr	r0, [pc, #184]	@ (8002240 <main+0x438>)
 8002188:	f004 f85e 	bl	8006248 <HAL_GPIO_ReadPin>
 800218c:	4603      	mov	r3, r0
 800218e:	2b01      	cmp	r3, #1
 8002190:	d108      	bne.n	80021a4 <main+0x39c>
			EmergencyState = 0;
 8002192:	4a2a      	ldr	r2, [pc, #168]	@ (800223c <main+0x434>)
 8002194:	2300      	movs	r3, #0
 8002196:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800219e:	4825      	ldr	r0, [pc, #148]	@ (8002234 <main+0x42c>)
 80021a0:	f004 f86a 	bl	8006278 <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 80021a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021a8:	4825      	ldr	r0, [pc, #148]	@ (8002240 <main+0x438>)
 80021aa:	f004 f84d 	bl	8006248 <HAL_GPIO_ReadPin>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d102      	bne.n	80021ba <main+0x3b2>
			Pen_Status = 0;
 80021b4:	4a23      	ldr	r2, [pc, #140]	@ (8002244 <main+0x43c>)
 80021b6:	2300      	movs	r3, #0
 80021b8:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1) {
 80021ba:	2104      	movs	r1, #4
 80021bc:	4820      	ldr	r0, [pc, #128]	@ (8002240 <main+0x438>)
 80021be:	f004 f843 	bl	8006248 <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d102      	bne.n	80021ce <main+0x3c6>
			Pen_Status = 1;
 80021c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002244 <main+0x43c>)
 80021ca:	2301      	movs	r3, #1
 80021cc:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 80021ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021d6:	f004 f837 	bl	8006248 <HAL_GPIO_ReadPin>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d135      	bne.n	800224c <main+0x444>
			z_temp = 1;
 80021e0:	4a19      	ldr	r2, [pc, #100]	@ (8002248 <main+0x440>)
 80021e2:	2301      	movs	r3, #1
 80021e4:	7013      	strb	r3, [r2, #0]
 80021e6:	e03d      	b.n	8002264 <main+0x45c>
 80021e8:	20000c40 	.word	0x20000c40
 80021ec:	20000c4c 	.word	0x20000c4c
 80021f0:	20000b94 	.word	0x20000b94
 80021f4:	20000c50 	.word	0x20000c50
 80021f8:	20000c44 	.word	0x20000c44
 80021fc:	20000b98 	.word	0x20000b98
 8002200:	20000c48 	.word	0x20000c48
 8002204:	20000514 	.word	0x20000514
 8002208:	20000af0 	.word	0x20000af0
 800220c:	20000448 	.word	0x20000448
 8002210:	20000af4 	.word	0x20000af4
 8002214:	200013b8 	.word	0x200013b8
 8002218:	200013c0 	.word	0x200013c0
 800221c:	200013c8 	.word	0x200013c8
 8002220:	000186a0 	.word	0x000186a0
 8002224:	20000b38 	.word	0x20000b38
 8002228:	20000af8 	.word	0x20000af8
 800222c:	20000b84 	.word	0x20000b84
 8002230:	20000b88 	.word	0x20000b88
 8002234:	48000800 	.word	0x48000800
 8002238:	20000bcc 	.word	0x20000bcc
 800223c:	20000bcd 	.word	0x20000bcd
 8002240:	48000400 	.word	0x48000400
 8002244:	20000bcf 	.word	0x20000bcf
 8002248:	20000b79 	.word	0x20000b79
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0) {
 800224c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002250:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002254:	f003 fff8 	bl	8006248 <HAL_GPIO_ReadPin>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d102      	bne.n	8002264 <main+0x45c>
			z_temp = 0;
 800225e:	4aab      	ldr	r2, [pc, #684]	@ (800250c <main+0x704>)
 8002260:	2300      	movs	r3, #0
 8002262:	7013      	strb	r3, [r2, #0]
		}

		//////////////////////////////////////////////////////////////
		if (EmergencyState == 1) {
 8002264:	4baa      	ldr	r3, [pc, #680]	@ (8002510 <main+0x708>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d102      	bne.n	8002272 <main+0x46a>
			REG16(REG_MOTION_STATUS) = 0;
 800226c:	4aa9      	ldr	r2, [pc, #676]	@ (8002514 <main+0x70c>)
 800226e:	2300      	movs	r3, #0
 8002270:	8413      	strh	r3, [r2, #32]
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<GOTO>> ////////////////////////////
		if ((Mode == 2 && (base_status == 2 || Test_no_BaseSystem == 1))
 8002272:	4ba9      	ldr	r3, [pc, #676]	@ (8002518 <main+0x710>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d107      	bne.n	800228a <main+0x482>
 800227a:	4ba8      	ldr	r3, [pc, #672]	@ (800251c <main+0x714>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d007      	beq.n	8002292 <main+0x48a>
 8002282:	4ba7      	ldr	r3, [pc, #668]	@ (8002520 <main+0x718>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d003      	beq.n	8002292 <main+0x48a>
				|| base_status == 8) {
 800228a:	4ba4      	ldr	r3, [pc, #656]	@ (800251c <main+0x714>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	2b08      	cmp	r3, #8
 8002290:	d158      	bne.n	8002344 <main+0x53c>
			REG16(REG_MOTION_STATUS) = 8;
 8002292:	4aa0      	ldr	r2, [pc, #640]	@ (8002514 <main+0x70c>)
 8002294:	2308      	movs	r3, #8
 8002296:	8413      	strh	r3, [r2, #32]

			if (TenPointMode) {
 8002298:	4ba2      	ldr	r3, [pc, #648]	@ (8002524 <main+0x71c>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d012      	beq.n	80022c6 <main+0x4be>
				//				float R, P;
				//				ReadOneSlot(counter, &R, &P);
				//				TargetR = R;
				//				TargetP = P;
				TargetR = testArray[(counter * 2) + 1];
 80022a0:	4ba1      	ldr	r3, [pc, #644]	@ (8002528 <main+0x720>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	3301      	adds	r3, #1
 80022a8:	4aa0      	ldr	r2, [pc, #640]	@ (800252c <main+0x724>)
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b9f      	ldr	r3, [pc, #636]	@ (8002530 <main+0x728>)
 80022b2:	601a      	str	r2, [r3, #0]
				TargetP = testArray[counter * 2];
 80022b4:	4b9c      	ldr	r3, [pc, #624]	@ (8002528 <main+0x720>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4a9c      	ldr	r2, [pc, #624]	@ (800252c <main+0x724>)
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b9c      	ldr	r3, [pc, #624]	@ (8002534 <main+0x72c>)
 80022c4:	601a      	str	r2, [r3, #0]
			}

			if (CascadeControl_Step()) {
 80022c6:	f002 fd6f 	bl	8004da8 <CascadeControl_Step>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d032      	beq.n	8002336 <main+0x52e>
				Set_Servo(1);
 80022d0:	2001      	movs	r0, #1
 80022d2:	f002 fa65 	bl	80047a0 <Set_Servo>
				if (micros() - pen_delay_timer >= 500000) {
 80022d6:	f001 ff33 	bl	8004140 <micros>
 80022da:	4b97      	ldr	r3, [pc, #604]	@ (8002538 <main+0x730>)
 80022dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e0:	1a84      	subs	r4, r0, r2
 80022e2:	eb61 0503 	sbc.w	r5, r1, r3
 80022e6:	4b95      	ldr	r3, [pc, #596]	@ (800253c <main+0x734>)
 80022e8:	429c      	cmp	r4, r3
 80022ea:	f175 0300 	sbcs.w	r3, r5, #0
 80022ee:	d329      	bcc.n	8002344 <main+0x53c>
					Set_Servo(0);
 80022f0:	2000      	movs	r0, #0
 80022f2:	f002 fa55 	bl	80047a0 <Set_Servo>
					if (TenPointMode) {
 80022f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002524 <main+0x71c>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d013      	beq.n	8002326 <main+0x51e>
						if (counter == 9) {
 80022fe:	4b8a      	ldr	r3, [pc, #552]	@ (8002528 <main+0x720>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b09      	cmp	r3, #9
 8002304:	d109      	bne.n	800231a <main+0x512>
							TenPointMode = 0;
 8002306:	4a87      	ldr	r2, [pc, #540]	@ (8002524 <main+0x71c>)
 8002308:	2300      	movs	r3, #0
 800230a:	7013      	strb	r3, [r2, #0]
							counter = 0;
 800230c:	4a86      	ldr	r2, [pc, #536]	@ (8002528 <main+0x720>)
 800230e:	2300      	movs	r3, #0
 8002310:	7013      	strb	r3, [r2, #0]
							Mode = 1;
 8002312:	4a81      	ldr	r2, [pc, #516]	@ (8002518 <main+0x710>)
 8002314:	2301      	movs	r3, #1
 8002316:	7013      	strb	r3, [r2, #0]
 8002318:	e005      	b.n	8002326 <main+0x51e>
						} else {
							counter++;
 800231a:	4b83      	ldr	r3, [pc, #524]	@ (8002528 <main+0x720>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	3301      	adds	r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4a81      	ldr	r2, [pc, #516]	@ (8002528 <main+0x720>)
 8002324:	7013      	strb	r3, [r2, #0]
						}
					}
					if (base_status == 8) {
 8002326:	4b7d      	ldr	r3, [pc, #500]	@ (800251c <main+0x714>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	2b08      	cmp	r3, #8
 800232c:	d10a      	bne.n	8002344 <main+0x53c>
						REG16(REG_MOTION_STATUS) = 0;
 800232e:	4a79      	ldr	r2, [pc, #484]	@ (8002514 <main+0x70c>)
 8002330:	2300      	movs	r3, #0
 8002332:	8413      	strh	r3, [r2, #32]
 8002334:	e006      	b.n	8002344 <main+0x53c>
					}
				}
			} else {
				pen_delay_timer = micros();
 8002336:	f001 ff03 	bl	8004140 <micros>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	497e      	ldr	r1, [pc, #504]	@ (8002538 <main+0x730>)
 8002340:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<CALIBRATING>> /////////////////////
		if ((Mode == 3 && (base_status == 2 || Test_no_BaseSystem == 1))
 8002344:	4b74      	ldr	r3, [pc, #464]	@ (8002518 <main+0x710>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d107      	bne.n	800235c <main+0x554>
 800234c:	4b73      	ldr	r3, [pc, #460]	@ (800251c <main+0x714>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d008      	beq.n	8002366 <main+0x55e>
 8002354:	4b72      	ldr	r3, [pc, #456]	@ (8002520 <main+0x718>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d004      	beq.n	8002366 <main+0x55e>
				|| base_status == 1) {
 800235c:	4b6f      	ldr	r3, [pc, #444]	@ (800251c <main+0x714>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	f040 8288 	bne.w	8002876 <main+0xa6e>
			switch (calibState) {
 8002366:	4b76      	ldr	r3, [pc, #472]	@ (8002540 <main+0x738>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	f200 8283 	bhi.w	8002876 <main+0xa6e>
 8002370:	a201      	add	r2, pc, #4	@ (adr r2, 8002378 <main+0x570>)
 8002372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002376:	bf00      	nop
 8002378:	080023ad 	.word	0x080023ad
 800237c:	080023e3 	.word	0x080023e3
 8002380:	08002429 	.word	0x08002429
 8002384:	08002473 	.word	0x08002473
 8002388:	080024bd 	.word	0x080024bd
 800238c:	0800256d 	.word	0x0800256d
 8002390:	080025c5 	.word	0x080025c5
 8002394:	08002605 	.word	0x08002605
 8002398:	08002663 	.word	0x08002663
 800239c:	080026cf 	.word	0x080026cf
 80023a0:	0800273b 	.word	0x0800273b
 80023a4:	080027ab 	.word	0x080027ab
 80023a8:	080027ed 	.word	0x080027ed
			case CALIB_IDLE:
				Set_Motor(0, 0);
 80023ac:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 8002568 <main+0x760>
 80023b0:	2000      	movs	r0, #0
 80023b2:	f002 f977 	bl	80046a4 <Set_Motor>
				Set_Motor(1, 0);
 80023b6:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 8002568 <main+0x760>
 80023ba:	2001      	movs	r0, #1
 80023bc:	f002 f972 	bl	80046a4 <Set_Motor>
				P_Limit = 0;
 80023c0:	4a60      	ldr	r2, [pc, #384]	@ (8002544 <main+0x73c>)
 80023c2:	2300      	movs	r3, #0
 80023c4:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 80023c6:	4a60      	ldr	r2, [pc, #384]	@ (8002548 <main+0x740>)
 80023c8:	2300      	movs	r3, #0
 80023ca:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 80023cc:	4a5c      	ldr	r2, [pc, #368]	@ (8002540 <main+0x738>)
 80023ce:	2301      	movs	r3, #1
 80023d0:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 80023d2:	f001 feb5 	bl	8004140 <micros>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	495c      	ldr	r1, [pc, #368]	@ (800254c <main+0x744>)
 80023dc:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 80023e0:	e249      	b.n	8002876 <main+0xa6e>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80) {
 80023e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002550 <main+0x748>)
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002554 <main+0x74c>
 80023ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f4:	dd06      	ble.n	8002404 <main+0x5fc>
					Cal_Side = 1;
 80023f6:	4a58      	ldr	r2, [pc, #352]	@ (8002558 <main+0x750>)
 80023f8:	2301      	movs	r3, #1
 80023fa:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 80023fc:	4a50      	ldr	r2, [pc, #320]	@ (8002540 <main+0x738>)
 80023fe:	2302      	movs	r3, #2
 8002400:	7013      	strb	r3, [r2, #0]
				} else if (Receiver[0] < -80) {
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 8002402:	e238      	b.n	8002876 <main+0xa6e>
				} else if (Receiver[0] < -80) {
 8002404:	4b52      	ldr	r3, [pc, #328]	@ (8002550 <main+0x748>)
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800255c <main+0x754>
 800240e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002416:	d400      	bmi.n	800241a <main+0x612>
				break;
 8002418:	e22d      	b.n	8002876 <main+0xa6e>
					Cal_Side = 2;
 800241a:	4a4f      	ldr	r2, [pc, #316]	@ (8002558 <main+0x750>)
 800241c:	2302      	movs	r3, #2
 800241e:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002420:	4a47      	ldr	r2, [pc, #284]	@ (8002540 <main+0x738>)
 8002422:	2302      	movs	r3, #2
 8002424:	7013      	strb	r3, [r2, #0]
				break;
 8002426:	e226      	b.n	8002876 <main+0xa6e>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -15);
 8002428:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 800242c:	2001      	movs	r0, #1
 800242e:	f002 f939 	bl	80046a4 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8002432:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002436:	484a      	ldr	r0, [pc, #296]	@ (8002560 <main+0x758>)
 8002438:	f003 ff06 	bl	8006248 <HAL_GPIO_ReadPin>
 800243c:	4603      	mov	r3, r0
 800243e:	2b01      	cmp	r3, #1
 8002440:	d004      	beq.n	800244c <main+0x644>
 8002442:	4b40      	ldr	r3, [pc, #256]	@ (8002544 <main+0x73c>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 81e7 	beq.w	800281a <main+0xa12>
					Set_Motor(1, 0);
 800244c:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8002568 <main+0x760>
 8002450:	2001      	movs	r0, #1
 8002452:	f002 f927 	bl	80046a4 <Set_Motor>
					calib_timer = micros();
 8002456:	f001 fe73 	bl	8004140 <micros>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	493b      	ldr	r1, [pc, #236]	@ (800254c <main+0x744>)
 8002460:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002464:	4a37      	ldr	r2, [pc, #220]	@ (8002544 <main+0x73c>)
 8002466:	2300      	movs	r3, #0
 8002468:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 800246a:	4a35      	ldr	r2, [pc, #212]	@ (8002540 <main+0x738>)
 800246c:	2303      	movs	r3, #3
 800246e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002470:	e1d3      	b.n	800281a <main+0xa12>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 8002472:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8002568 <main+0x760>
 8002476:	2001      	movs	r0, #1
 8002478:	f002 f914 	bl	80046a4 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 800247c:	f001 fe60 	bl	8004140 <micros>
 8002480:	4b32      	ldr	r3, [pc, #200]	@ (800254c <main+0x744>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	ebb0 0802 	subs.w	r8, r0, r2
 800248a:	eb61 0903 	sbc.w	r9, r1, r3
 800248e:	4b35      	ldr	r3, [pc, #212]	@ (8002564 <main+0x75c>)
 8002490:	4598      	cmp	r8, r3
 8002492:	f179 0300 	sbcs.w	r3, r9, #0
 8002496:	d311      	bcc.n	80024bc <main+0x6b4>
					Set_Motor(1, 15);
 8002498:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800249c:	2001      	movs	r0, #1
 800249e:	f002 f901 	bl	80046a4 <Set_Motor>
					calib_timer = micros();
 80024a2:	f001 fe4d 	bl	8004140 <micros>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4928      	ldr	r1, [pc, #160]	@ (800254c <main+0x744>)
 80024ac:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80024b0:	4a24      	ldr	r2, [pc, #144]	@ (8002544 <main+0x73c>)
 80024b2:	2300      	movs	r3, #0
 80024b4:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 80024b6:	4a22      	ldr	r2, [pc, #136]	@ (8002540 <main+0x738>)
 80024b8:	2304      	movs	r3, #4
 80024ba:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 15);
 80024bc:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 80024c0:	2001      	movs	r0, #1
 80024c2:	f002 f8ef 	bl	80046a4 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 80024c6:	f001 fe3b 	bl	8004140 <micros>
 80024ca:	4b20      	ldr	r3, [pc, #128]	@ (800254c <main+0x744>)
 80024cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d0:	ebb0 0a02 	subs.w	sl, r0, r2
 80024d4:	eb61 0b03 	sbc.w	fp, r1, r3
 80024d8:	4b22      	ldr	r3, [pc, #136]	@ (8002564 <main+0x75c>)
 80024da:	459a      	cmp	sl, r3
 80024dc:	f17b 0300 	sbcs.w	r3, fp, #0
 80024e0:	f0c0 819d 	bcc.w	800281e <main+0xa16>
					Set_Motor(1, 0);
 80024e4:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8002568 <main+0x760>
 80024e8:	2001      	movs	r0, #1
 80024ea:	f002 f8db 	bl	80046a4 <Set_Motor>
					calib_timer = micros();
 80024ee:	f001 fe27 	bl	8004140 <micros>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4915      	ldr	r1, [pc, #84]	@ (800254c <main+0x744>)
 80024f8:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80024fc:	4a11      	ldr	r2, [pc, #68]	@ (8002544 <main+0x73c>)
 80024fe:	2300      	movs	r3, #0
 8002500:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 8002502:	4a0f      	ldr	r2, [pc, #60]	@ (8002540 <main+0x738>)
 8002504:	2305      	movs	r3, #5
 8002506:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002508:	e189      	b.n	800281e <main+0xa16>
 800250a:	bf00      	nop
 800250c:	20000b79 	.word	0x20000b79
 8002510:	20000bcd 	.word	0x20000bcd
 8002514:	2000112c 	.word	0x2000112c
 8002518:	20000bcc 	.word	0x20000bcc
 800251c:	200012bc 	.word	0x200012bc
 8002520:	20000c3e 	.word	0x20000c3e
 8002524:	20000c3d 	.word	0x20000c3d
 8002528:	20000c3c 	.word	0x20000c3c
 800252c:	200012c0 	.word	0x200012c0
 8002530:	20000b94 	.word	0x20000b94
 8002534:	20000b98 	.word	0x20000b98
 8002538:	20001320 	.word	0x20001320
 800253c:	0007a120 	.word	0x0007a120
 8002540:	20000c1c 	.word	0x20000c1c
 8002544:	20000bd1 	.word	0x20000bd1
 8002548:	20000bd2 	.word	0x20000bd2
 800254c:	20000c20 	.word	0x20000c20
 8002550:	20000ab0 	.word	0x20000ab0
 8002554:	42a00000 	.word	0x42a00000
 8002558:	20000c28 	.word	0x20000c28
 800255c:	c2a00000 	.word	0xc2a00000
 8002560:	48000400 	.word	0x48000400
 8002564:	000186a1 	.word	0x000186a1
 8002568:	00000000 	.word	0x00000000

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 800256c:	ed1f 0a02 	vldr	s0, [pc, #-8]	@ 8002568 <main+0x760>
 8002570:	2001      	movs	r0, #1
 8002572:	f002 f897 	bl	80046a4 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002576:	f001 fde3 	bl	8004140 <micros>
 800257a:	4bb1      	ldr	r3, [pc, #708]	@ (8002840 <main+0xa38>)
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	1a86      	subs	r6, r0, r2
 8002582:	643e      	str	r6, [r7, #64]	@ 0x40
 8002584:	eb61 0303 	sbc.w	r3, r1, r3
 8002588:	647b      	str	r3, [r7, #68]	@ 0x44
 800258a:	4bae      	ldr	r3, [pc, #696]	@ (8002844 <main+0xa3c>)
 800258c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002590:	4602      	mov	r2, r0
 8002592:	429a      	cmp	r2, r3
 8002594:	460b      	mov	r3, r1
 8002596:	f173 0300 	sbcs.w	r3, r3, #0
 800259a:	f0c0 8142 	bcc.w	8002822 <main+0xa1a>
					Set_Motor(1, -5);
 800259e:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 80025a2:	2001      	movs	r0, #1
 80025a4:	f002 f87e 	bl	80046a4 <Set_Motor>
					calib_timer = micros();
 80025a8:	f001 fdca 	bl	8004140 <micros>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	49a3      	ldr	r1, [pc, #652]	@ (8002840 <main+0xa38>)
 80025b2:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80025b6:	4aa4      	ldr	r2, [pc, #656]	@ (8002848 <main+0xa40>)
 80025b8:	2300      	movs	r3, #0
 80025ba:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 80025bc:	4aa3      	ldr	r2, [pc, #652]	@ (800284c <main+0xa44>)
 80025be:	2306      	movs	r3, #6
 80025c0:	7013      	strb	r3, [r2, #0]
				}
				break;
 80025c2:	e12e      	b.n	8002822 <main+0xa1a>

			case CALIB_RETOUCH_P:
				Set_Motor(1, -5);
 80025c4:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 80025c8:	2001      	movs	r0, #1
 80025ca:	f002 f86b 	bl	80046a4 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 80025ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025d2:	489f      	ldr	r0, [pc, #636]	@ (8002850 <main+0xa48>)
 80025d4:	f003 fe38 	bl	8006248 <HAL_GPIO_ReadPin>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d004      	beq.n	80025e8 <main+0x7e0>
 80025de:	4b9a      	ldr	r3, [pc, #616]	@ (8002848 <main+0xa40>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 811f 	beq.w	8002826 <main+0xa1e>
					Set_Motor(1, 0);
 80025e8:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8002854 <main+0xa4c>
 80025ec:	2001      	movs	r0, #1
 80025ee:	f002 f859 	bl	80046a4 <Set_Motor>
					Reset_P();
 80025f2:	f002 f90f 	bl	8004814 <Reset_P>
					P_Limit = 0;
 80025f6:	4a94      	ldr	r2, [pc, #592]	@ (8002848 <main+0xa40>)
 80025f8:	2300      	movs	r3, #0
 80025fa:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 80025fc:	4a93      	ldr	r2, [pc, #588]	@ (800284c <main+0xa44>)
 80025fe:	2307      	movs	r3, #7
 8002600:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002602:	e110      	b.n	8002826 <main+0xa1e>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 8002604:	4b94      	ldr	r3, [pc, #592]	@ (8002858 <main+0xa50>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d105      	bne.n	8002618 <main+0x810>
					Set_Motor(0, -30);
 800260c:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002610:	2000      	movs	r0, #0
 8002612:	f002 f847 	bl	80046a4 <Set_Motor>
 8002616:	e004      	b.n	8002622 <main+0x81a>
				else
					Set_Motor(0, 30);
 8002618:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800261c:	2000      	movs	r0, #0
 800261e:	f002 f841 	bl	80046a4 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8002622:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002626:	488a      	ldr	r0, [pc, #552]	@ (8002850 <main+0xa48>)
 8002628:	f003 fe0e 	bl	8006248 <HAL_GPIO_ReadPin>
 800262c:	4603      	mov	r3, r0
 800262e:	2b01      	cmp	r3, #1
 8002630:	d004      	beq.n	800263c <main+0x834>
 8002632:	4b8a      	ldr	r3, [pc, #552]	@ (800285c <main+0xa54>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80f7 	beq.w	800282a <main+0xa22>
					Set_Motor(0, 0);
 800263c:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 8002854 <main+0xa4c>
 8002640:	2000      	movs	r0, #0
 8002642:	f002 f82f 	bl	80046a4 <Set_Motor>
					calib_timer = micros();
 8002646:	f001 fd7b 	bl	8004140 <micros>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	497c      	ldr	r1, [pc, #496]	@ (8002840 <main+0xa38>)
 8002650:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002654:	4a81      	ldr	r2, [pc, #516]	@ (800285c <main+0xa54>)
 8002656:	2300      	movs	r3, #0
 8002658:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 800265a:	4a7c      	ldr	r2, [pc, #496]	@ (800284c <main+0xa44>)
 800265c:	2308      	movs	r3, #8
 800265e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002660:	e0e3      	b.n	800282a <main+0xa22>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 8002662:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8002854 <main+0xa4c>
 8002666:	2000      	movs	r0, #0
 8002668:	f002 f81c 	bl	80046a4 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 800266c:	f001 fd68 	bl	8004140 <micros>
 8002670:	4b73      	ldr	r3, [pc, #460]	@ (8002840 <main+0xa38>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	1a86      	subs	r6, r0, r2
 8002678:	63be      	str	r6, [r7, #56]	@ 0x38
 800267a:	eb61 0303 	sbc.w	r3, r1, r3
 800267e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002680:	4b70      	ldr	r3, [pc, #448]	@ (8002844 <main+0xa3c>)
 8002682:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002686:	4602      	mov	r2, r0
 8002688:	429a      	cmp	r2, r3
 800268a:	460b      	mov	r3, r1
 800268c:	f173 0300 	sbcs.w	r3, r3, #0
 8002690:	f0c0 80cd 	bcc.w	800282e <main+0xa26>
					if (Cal_Side == 1)
 8002694:	4b70      	ldr	r3, [pc, #448]	@ (8002858 <main+0xa50>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d105      	bne.n	80026a8 <main+0x8a0>
						Set_Motor(0, 30);
 800269c:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 80026a0:	2000      	movs	r0, #0
 80026a2:	f001 ffff 	bl	80046a4 <Set_Motor>
 80026a6:	e004      	b.n	80026b2 <main+0x8aa>
					else
						Set_Motor(0, -30);
 80026a8:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 80026ac:	2000      	movs	r0, #0
 80026ae:	f001 fff9 	bl	80046a4 <Set_Motor>
					calib_timer = micros();
 80026b2:	f001 fd45 	bl	8004140 <micros>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4961      	ldr	r1, [pc, #388]	@ (8002840 <main+0xa38>)
 80026bc:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80026c0:	4a66      	ldr	r2, [pc, #408]	@ (800285c <main+0xa54>)
 80026c2:	2300      	movs	r3, #0
 80026c4:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 80026c6:	4a61      	ldr	r2, [pc, #388]	@ (800284c <main+0xa44>)
 80026c8:	2309      	movs	r3, #9
 80026ca:	7013      	strb	r3, [r2, #0]
				}
				break;
 80026cc:	e0af      	b.n	800282e <main+0xa26>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 80026ce:	4b62      	ldr	r3, [pc, #392]	@ (8002858 <main+0xa50>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d105      	bne.n	80026e2 <main+0x8da>
					Set_Motor(0, 30);
 80026d6:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 80026da:	2000      	movs	r0, #0
 80026dc:	f001 ffe2 	bl	80046a4 <Set_Motor>
 80026e0:	e004      	b.n	80026ec <main+0x8e4>
				else
					Set_Motor(0, -30);
 80026e2:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 80026e6:	2000      	movs	r0, #0
 80026e8:	f001 ffdc 	bl	80046a4 <Set_Motor>

				if (micros() - calib_timer > 200000) {
 80026ec:	f001 fd28 	bl	8004140 <micros>
 80026f0:	4b53      	ldr	r3, [pc, #332]	@ (8002840 <main+0xa38>)
 80026f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f6:	1a86      	subs	r6, r0, r2
 80026f8:	633e      	str	r6, [r7, #48]	@ 0x30
 80026fa:	eb61 0303 	sbc.w	r3, r1, r3
 80026fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002700:	4b57      	ldr	r3, [pc, #348]	@ (8002860 <main+0xa58>)
 8002702:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002706:	4602      	mov	r2, r0
 8002708:	429a      	cmp	r2, r3
 800270a:	460b      	mov	r3, r1
 800270c:	f173 0300 	sbcs.w	r3, r3, #0
 8002710:	f0c0 808f 	bcc.w	8002832 <main+0xa2a>
					Set_Motor(0, 0);
 8002714:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8002854 <main+0xa4c>
 8002718:	2000      	movs	r0, #0
 800271a:	f001 ffc3 	bl	80046a4 <Set_Motor>
					calib_timer = micros();
 800271e:	f001 fd0f 	bl	8004140 <micros>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4946      	ldr	r1, [pc, #280]	@ (8002840 <main+0xa38>)
 8002728:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 800272c:	4a4b      	ldr	r2, [pc, #300]	@ (800285c <main+0xa54>)
 800272e:	2300      	movs	r3, #0
 8002730:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 8002732:	4a46      	ldr	r2, [pc, #280]	@ (800284c <main+0xa44>)
 8002734:	230a      	movs	r3, #10
 8002736:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002738:	e07b      	b.n	8002832 <main+0xa2a>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 800273a:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8002854 <main+0xa4c>
 800273e:	2000      	movs	r0, #0
 8002740:	f001 ffb0 	bl	80046a4 <Set_Motor>
				Z_index_R = 0;
 8002744:	4a47      	ldr	r2, [pc, #284]	@ (8002864 <main+0xa5c>)
 8002746:	2300      	movs	r3, #0
 8002748:	7013      	strb	r3, [r2, #0]

				if (micros() - calib_timer > 100000) {
 800274a:	f001 fcf9 	bl	8004140 <micros>
 800274e:	4b3c      	ldr	r3, [pc, #240]	@ (8002840 <main+0xa38>)
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002754:	1a86      	subs	r6, r0, r2
 8002756:	62be      	str	r6, [r7, #40]	@ 0x28
 8002758:	eb61 0303 	sbc.w	r3, r1, r3
 800275c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800275e:	4b39      	ldr	r3, [pc, #228]	@ (8002844 <main+0xa3c>)
 8002760:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002764:	4602      	mov	r2, r0
 8002766:	429a      	cmp	r2, r3
 8002768:	460b      	mov	r3, r1
 800276a:	f173 0300 	sbcs.w	r3, r3, #0
 800276e:	d362      	bcc.n	8002836 <main+0xa2e>
					if (Cal_Side == 1)
 8002770:	4b39      	ldr	r3, [pc, #228]	@ (8002858 <main+0xa50>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <main+0x97c>
						Set_Motor(0, -25);
 8002778:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 800277c:	2000      	movs	r0, #0
 800277e:	f001 ff91 	bl	80046a4 <Set_Motor>
 8002782:	e004      	b.n	800278e <main+0x986>
					else
						Set_Motor(0, 25);
 8002784:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002788:	2000      	movs	r0, #0
 800278a:	f001 ff8b 	bl	80046a4 <Set_Motor>
					calib_timer = micros();
 800278e:	f001 fcd7 	bl	8004140 <micros>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	492a      	ldr	r1, [pc, #168]	@ (8002840 <main+0xa38>)
 8002798:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 800279c:	4a2f      	ldr	r2, [pc, #188]	@ (800285c <main+0xa54>)
 800279e:	2300      	movs	r3, #0
 80027a0:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 80027a2:	4a2a      	ldr	r2, [pc, #168]	@ (800284c <main+0xa44>)
 80027a4:	230b      	movs	r3, #11
 80027a6:	7013      	strb	r3, [r2, #0]
				}
				break;
 80027a8:	e045      	b.n	8002836 <main+0xa2e>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 80027aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002858 <main+0xa50>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d105      	bne.n	80027be <main+0x9b6>
					Set_Motor(0, -25);
 80027b2:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 80027b6:	2000      	movs	r0, #0
 80027b8:	f001 ff74 	bl	80046a4 <Set_Motor>
 80027bc:	e004      	b.n	80027c8 <main+0x9c0>
				else
					Set_Motor(0, 25);
 80027be:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80027c2:	2000      	movs	r0, #0
 80027c4:	f001 ff6e 	bl	80046a4 <Set_Motor>

				//				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
				if (Z_index_R > 0) {
 80027c8:	4b26      	ldr	r3, [pc, #152]	@ (8002864 <main+0xa5c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d034      	beq.n	800283a <main+0xa32>
					Set_Motor(0, 0);
 80027d0:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8002854 <main+0xa4c>
 80027d4:	2000      	movs	r0, #0
 80027d6:	f001 ff65 	bl	80046a4 <Set_Motor>
					Reset_R();
 80027da:	f002 f80b 	bl	80047f4 <Reset_R>
					R_Limit = 0;
 80027de:	4a1f      	ldr	r2, [pc, #124]	@ (800285c <main+0xa54>)
 80027e0:	2300      	movs	r3, #0
 80027e2:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 80027e4:	4a19      	ldr	r2, [pc, #100]	@ (800284c <main+0xa44>)
 80027e6:	230c      	movs	r3, #12
 80027e8:	7013      	strb	r3, [r2, #0]
				}
				break;
 80027ea:	e026      	b.n	800283a <main+0xa32>

			case CALIB_DONE:
				Cal_Side = 0;
 80027ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002858 <main+0xa50>)
 80027ee:	2300      	movs	r3, #0
 80027f0:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 80027f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002868 <main+0xa60>)
 80027f4:	2300      	movs	r3, #0
 80027f6:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 80027f8:	4a13      	ldr	r2, [pc, #76]	@ (8002848 <main+0xa40>)
 80027fa:	2300      	movs	r3, #0
 80027fc:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 80027fe:	4a17      	ldr	r2, [pc, #92]	@ (800285c <main+0xa54>)
 8002800:	2300      	movs	r3, #0
 8002802:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002804:	4a11      	ldr	r2, [pc, #68]	@ (800284c <main+0xa44>)
 8002806:	2300      	movs	r3, #0
 8002808:	7013      	strb	r3, [r2, #0]
				//////////////////////////////////////////////////////////////
				if (base_status == 1) {
 800280a:	4b18      	ldr	r3, [pc, #96]	@ (800286c <main+0xa64>)
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d130      	bne.n	8002874 <main+0xa6c>
					REG16(REG_MOTION_STATUS) = 0;
 8002812:	4a17      	ldr	r2, [pc, #92]	@ (8002870 <main+0xa68>)
 8002814:	2300      	movs	r3, #0
 8002816:	8413      	strh	r3, [r2, #32]
				}
				//////////////////////////////////////////////////////////////
				break;
 8002818:	e02c      	b.n	8002874 <main+0xa6c>
				break;
 800281a:	bf00      	nop
 800281c:	e02b      	b.n	8002876 <main+0xa6e>
				break;
 800281e:	bf00      	nop
 8002820:	e029      	b.n	8002876 <main+0xa6e>
				break;
 8002822:	bf00      	nop
 8002824:	e027      	b.n	8002876 <main+0xa6e>
				break;
 8002826:	bf00      	nop
 8002828:	e025      	b.n	8002876 <main+0xa6e>
				break;
 800282a:	bf00      	nop
 800282c:	e023      	b.n	8002876 <main+0xa6e>
				break;
 800282e:	bf00      	nop
 8002830:	e021      	b.n	8002876 <main+0xa6e>
				break;
 8002832:	bf00      	nop
 8002834:	e01f      	b.n	8002876 <main+0xa6e>
				break;
 8002836:	bf00      	nop
 8002838:	e01d      	b.n	8002876 <main+0xa6e>
				break;
 800283a:	bf00      	nop
 800283c:	e01b      	b.n	8002876 <main+0xa6e>
 800283e:	bf00      	nop
 8002840:	20000c20 	.word	0x20000c20
 8002844:	000186a1 	.word	0x000186a1
 8002848:	20000bd1 	.word	0x20000bd1
 800284c:	20000c1c 	.word	0x20000c1c
 8002850:	48000400 	.word	0x48000400
 8002854:	00000000 	.word	0x00000000
 8002858:	20000c28 	.word	0x20000c28
 800285c:	20000bd2 	.word	0x20000bd2
 8002860:	00030d41 	.word	0x00030d41
 8002864:	20000b78 	.word	0x20000b78
 8002868:	20000bcc 	.word	0x20000bcc
 800286c:	200012bc 	.word	0x200012bc
 8002870:	2000112c 	.word	0x2000112c
				break;
 8002874:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		////////////////////////// <<BASESYSTEM>> ////////////////////////
		if (base_status == 2 || Test_no_BaseSystem == 1) {
 8002876:	4b62      	ldr	r3, [pc, #392]	@ (8002a00 <main+0xbf8>)
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d004      	beq.n	8002888 <main+0xa80>
 800287e:	4b61      	ldr	r3, [pc, #388]	@ (8002a04 <main+0xbfc>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	f47f ab49 	bne.w	8001f1a <main+0x112>

			//////////////////////// <<RECEIVER>> ////////////////////////
			Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8002888:	4b5f      	ldr	r3, [pc, #380]	@ (8002a08 <main+0xc00>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288e:	461a      	mov	r2, r3
 8002890:	4b5e      	ldr	r3, [pc, #376]	@ (8002a0c <main+0xc04>)
 8002892:	601a      	str	r2, [r3, #0]
			Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8002894:	4b5e      	ldr	r3, [pc, #376]	@ (8002a10 <main+0xc08>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289a:	461a      	mov	r2, r3
 800289c:	4b5b      	ldr	r3, [pc, #364]	@ (8002a0c <main+0xc04>)
 800289e:	605a      	str	r2, [r3, #4]
			float RX_temp = map(
			__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2) - 1500.00, -500.00,
 80028a0:	4b59      	ldr	r3, [pc, #356]	@ (8002a08 <main+0xc00>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fdf8 	bl	800049c <__aeabi_ui2d>
 80028ac:	a350      	add	r3, pc, #320	@ (adr r3, 80029f0 <main+0xbe8>)
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f7fd fcb5 	bl	8000220 <__aeabi_dsub>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
			float RX_temp = map(
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f7fe f921 	bl	8000b04 <__aeabi_d2f>
 80028c2:	4603      	mov	r3, r0
 80028c4:	ed9f 2a53 	vldr	s4, [pc, #332]	@ 8002a14 <main+0xc0c>
 80028c8:	eddf 1a53 	vldr	s3, [pc, #332]	@ 8002a18 <main+0xc10>
 80028cc:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 8002a1c <main+0xc14>
 80028d0:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8002a20 <main+0xc18>
 80028d4:	ee00 3a10 	vmov	s0, r3
 80028d8:	f001 fb0e 	bl	8003ef8 <map>
 80028dc:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
					500.00, -100.00, 100.00);
			float RY_temp = map(
			__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 18530.00, -500.00,
 80028e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002a10 <main+0xc08>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fdd8 	bl	800049c <__aeabi_ui2d>
 80028ec:	a342      	add	r3, pc, #264	@ (adr r3, 80029f8 <main+0xbf0>)
 80028ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f2:	f7fd fc95 	bl	8000220 <__aeabi_dsub>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
			float RY_temp = map(
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fe f901 	bl	8000b04 <__aeabi_d2f>
 8002902:	4603      	mov	r3, r0
 8002904:	ed9f 2a43 	vldr	s4, [pc, #268]	@ 8002a14 <main+0xc0c>
 8002908:	eddf 1a43 	vldr	s3, [pc, #268]	@ 8002a18 <main+0xc10>
 800290c:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 8002a1c <main+0xc14>
 8002910:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8002a20 <main+0xc18>
 8002914:	ee00 3a10 	vmov	s0, r3
 8002918:	f001 faee 	bl	8003ef8 <map>
 800291c:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
					500.00, -100.00, 100.00);

			if (RX_temp >= -4 && RX_temp <= 4)
 8002920:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002924:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8002928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800292c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002930:	db0d      	blt.n	800294e <main+0xb46>
 8002932:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002936:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800293a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002942:	d804      	bhi.n	800294e <main+0xb46>
				Receiver[0] = 0.00;
 8002944:	4a37      	ldr	r2, [pc, #220]	@ (8002a24 <main+0xc1c>)
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	e01c      	b.n	8002988 <main+0xb80>
			else if (RX_temp > 100)
 800294e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002952:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002a14 <main+0xc0c>
 8002956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295e:	dd03      	ble.n	8002968 <main+0xb60>
				Receiver[0] = 100.00;
 8002960:	4a30      	ldr	r2, [pc, #192]	@ (8002a24 <main+0xc1c>)
 8002962:	4b31      	ldr	r3, [pc, #196]	@ (8002a28 <main+0xc20>)
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	e00f      	b.n	8002988 <main+0xb80>
			else if (RX_temp < -100)
 8002968:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800296c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002a18 <main+0xc10>
 8002970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002978:	d503      	bpl.n	8002982 <main+0xb7a>
				Receiver[0] = -100.00;
 800297a:	4a2a      	ldr	r2, [pc, #168]	@ (8002a24 <main+0xc1c>)
 800297c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a2c <main+0xc24>)
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	e002      	b.n	8002988 <main+0xb80>
			else
				Receiver[0] = RX_temp;
 8002982:	4a28      	ldr	r2, [pc, #160]	@ (8002a24 <main+0xc1c>)
 8002984:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002986:	6013      	str	r3, [r2, #0]
			if (RY_temp >= -4 && RY_temp <= 4)
 8002988:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800298c:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8002990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002998:	db0d      	blt.n	80029b6 <main+0xbae>
 800299a:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800299e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80029a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029aa:	d804      	bhi.n	80029b6 <main+0xbae>
				Receiver[1] = 0.00;
 80029ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002a24 <main+0xc1c>)
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	6053      	str	r3, [r2, #4]
 80029b4:	e03f      	b.n	8002a36 <main+0xc2e>
			else if (RY_temp > 100)
 80029b6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80029ba:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002a14 <main+0xc0c>
 80029be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c6:	dd03      	ble.n	80029d0 <main+0xbc8>
				Receiver[1] = 100.00;
 80029c8:	4a16      	ldr	r2, [pc, #88]	@ (8002a24 <main+0xc1c>)
 80029ca:	4b17      	ldr	r3, [pc, #92]	@ (8002a28 <main+0xc20>)
 80029cc:	6053      	str	r3, [r2, #4]
 80029ce:	e032      	b.n	8002a36 <main+0xc2e>
			else if (RY_temp < -100)
 80029d0:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80029d4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002a18 <main+0xc10>
 80029d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e0:	d526      	bpl.n	8002a30 <main+0xc28>
				Receiver[1] = -100.00;
 80029e2:	4a10      	ldr	r2, [pc, #64]	@ (8002a24 <main+0xc1c>)
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <main+0xc24>)
 80029e6:	6053      	str	r3, [r2, #4]
 80029e8:	e025      	b.n	8002a36 <main+0xc2e>
 80029ea:	bf00      	nop
 80029ec:	f3af 8000 	nop.w
 80029f0:	00000000 	.word	0x00000000
 80029f4:	40977000 	.word	0x40977000
 80029f8:	00000000 	.word	0x00000000
 80029fc:	40d21880 	.word	0x40d21880
 8002a00:	200012bc 	.word	0x200012bc
 8002a04:	20000c3e 	.word	0x20000c3e
 8002a08:	2000037c 	.word	0x2000037c
 8002a0c:	20000ac4 	.word	0x20000ac4
 8002a10:	200002b0 	.word	0x200002b0
 8002a14:	42c80000 	.word	0x42c80000
 8002a18:	c2c80000 	.word	0xc2c80000
 8002a1c:	43fa0000 	.word	0x43fa0000
 8002a20:	c3fa0000 	.word	0xc3fa0000
 8002a24:	20000ab0 	.word	0x20000ab0
 8002a28:	42c80000 	.word	0x42c80000
 8002a2c:	c2c80000 	.word	0xc2c80000
			else
				Receiver[1] = RY_temp;
 8002a30:	4abf      	ldr	r2, [pc, #764]	@ (8002d30 <main+0xf28>)
 8002a32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a34:	6053      	str	r3, [r2, #4]

			if (pulse_width_us[0] > 4000.00)
 8002a36:	4bbf      	ldr	r3, [pc, #764]	@ (8002d34 <main+0xf2c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a3e:	d912      	bls.n	8002a66 <main+0xc5e>
				pulse_width_us[0] = pulse_width_us[0] - 4900.00;
 8002a40:	4bbc      	ldr	r3, [pc, #752]	@ (8002d34 <main+0xf2c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fd29 	bl	800049c <__aeabi_ui2d>
 8002a4a:	a3b5      	add	r3, pc, #724	@ (adr r3, 8002d20 <main+0xf18>)
 8002a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a50:	f7fd fbe6 	bl	8000220 <__aeabi_dsub>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f7fe f832 	bl	8000ac4 <__aeabi_d2uiz>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4bb4      	ldr	r3, [pc, #720]	@ (8002d34 <main+0xf2c>)
 8002a64:	601a      	str	r2, [r3, #0]
			if (pulse_width_us[1] > 4000.00)
 8002a66:	4bb3      	ldr	r3, [pc, #716]	@ (8002d34 <main+0xf2c>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a6e:	d912      	bls.n	8002a96 <main+0xc8e>
				pulse_width_us[1] = pulse_width_us[1] - 4900.00;
 8002a70:	4bb0      	ldr	r3, [pc, #704]	@ (8002d34 <main+0xf2c>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fd fd11 	bl	800049c <__aeabi_ui2d>
 8002a7a:	a3a9      	add	r3, pc, #676	@ (adr r3, 8002d20 <main+0xf18>)
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f7fd fbce 	bl	8000220 <__aeabi_dsub>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f81a 	bl	8000ac4 <__aeabi_d2uiz>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4ba8      	ldr	r3, [pc, #672]	@ (8002d34 <main+0xf2c>)
 8002a94:	605a      	str	r2, [r3, #4]
			if (pulse_width_us[2] > 4000.00)
 8002a96:	4ba7      	ldr	r3, [pc, #668]	@ (8002d34 <main+0xf2c>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a9e:	d912      	bls.n	8002ac6 <main+0xcbe>
				pulse_width_us[2] = pulse_width_us[2] - 4900.00;
 8002aa0:	4ba4      	ldr	r3, [pc, #656]	@ (8002d34 <main+0xf2c>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fcf9 	bl	800049c <__aeabi_ui2d>
 8002aaa:	a39d      	add	r3, pc, #628	@ (adr r3, 8002d20 <main+0xf18>)
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	f7fd fbb6 	bl	8000220 <__aeabi_dsub>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7fe f802 	bl	8000ac4 <__aeabi_d2uiz>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b9c      	ldr	r3, [pc, #624]	@ (8002d34 <main+0xf2c>)
 8002ac4:	609a      	str	r2, [r3, #8]

			Receiver[2] = map((float) pulse_width_us[0] - 1500.00, -500.00,
 8002ac6:	4b9b      	ldr	r3, [pc, #620]	@ (8002d34 <main+0xf2c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	ee07 3a90 	vmov	s15, r3
 8002ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad2:	ee17 0a90 	vmov	r0, s15
 8002ad6:	f7fd fd03 	bl	80004e0 <__aeabi_f2d>
 8002ada:	a393      	add	r3, pc, #588	@ (adr r3, 8002d28 <main+0xf20>)
 8002adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae0:	f7fd fb9e 	bl	8000220 <__aeabi_dsub>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	f7fe f80a 	bl	8000b04 <__aeabi_d2f>
 8002af0:	4603      	mov	r3, r0
 8002af2:	ed9f 2a91 	vldr	s4, [pc, #580]	@ 8002d38 <main+0xf30>
 8002af6:	eddf 1a91 	vldr	s3, [pc, #580]	@ 8002d3c <main+0xf34>
 8002afa:	ed9f 1a91 	vldr	s2, [pc, #580]	@ 8002d40 <main+0xf38>
 8002afe:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8002d44 <main+0xf3c>
 8002b02:	ee00 3a10 	vmov	s0, r3
 8002b06:	f001 f9f7 	bl	8003ef8 <map>
 8002b0a:	eef0 7a40 	vmov.f32	s15, s0
 8002b0e:	4b88      	ldr	r3, [pc, #544]	@ (8002d30 <main+0xf28>)
 8002b10:	edc3 7a02 	vstr	s15, [r3, #8]
					500.00, -100.00, 100.00);
			Receiver[3] = map((float) pulse_width_us[1] - 1500.00, -500.00,
 8002b14:	4b87      	ldr	r3, [pc, #540]	@ (8002d34 <main+0xf2c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b20:	ee17 0a90 	vmov	r0, s15
 8002b24:	f7fd fcdc 	bl	80004e0 <__aeabi_f2d>
 8002b28:	a37f      	add	r3, pc, #508	@ (adr r3, 8002d28 <main+0xf20>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f7fd fb77 	bl	8000220 <__aeabi_dsub>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f7fd ffe3 	bl	8000b04 <__aeabi_d2f>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	ed9f 2a7d 	vldr	s4, [pc, #500]	@ 8002d38 <main+0xf30>
 8002b44:	eddf 1a7d 	vldr	s3, [pc, #500]	@ 8002d3c <main+0xf34>
 8002b48:	ed9f 1a7d 	vldr	s2, [pc, #500]	@ 8002d40 <main+0xf38>
 8002b4c:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 8002d44 <main+0xf3c>
 8002b50:	ee00 3a10 	vmov	s0, r3
 8002b54:	f001 f9d0 	bl	8003ef8 <map>
 8002b58:	eef0 7a40 	vmov.f32	s15, s0
 8002b5c:	4b74      	ldr	r3, [pc, #464]	@ (8002d30 <main+0xf28>)
 8002b5e:	edc3 7a03 	vstr	s15, [r3, #12]
					500.00, -100.00, 100.00);
			Receiver[4] = map((float) pulse_width_us[2] - 1500.00, -500.00,
 8002b62:	4b74      	ldr	r3, [pc, #464]	@ (8002d34 <main+0xf2c>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	ee07 3a90 	vmov	s15, r3
 8002b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b6e:	ee17 0a90 	vmov	r0, s15
 8002b72:	f7fd fcb5 	bl	80004e0 <__aeabi_f2d>
 8002b76:	a36c      	add	r3, pc, #432	@ (adr r3, 8002d28 <main+0xf20>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f7fd fb50 	bl	8000220 <__aeabi_dsub>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4610      	mov	r0, r2
 8002b86:	4619      	mov	r1, r3
 8002b88:	f7fd ffbc 	bl	8000b04 <__aeabi_d2f>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	ed9f 2a6a 	vldr	s4, [pc, #424]	@ 8002d38 <main+0xf30>
 8002b92:	eddf 1a6a 	vldr	s3, [pc, #424]	@ 8002d3c <main+0xf34>
 8002b96:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 8002d40 <main+0xf38>
 8002b9a:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 8002d44 <main+0xf3c>
 8002b9e:	ee00 3a10 	vmov	s0, r3
 8002ba2:	f001 f9a9 	bl	8003ef8 <map>
 8002ba6:	eef0 7a40 	vmov.f32	s15, s0
 8002baa:	4b61      	ldr	r3, [pc, #388]	@ (8002d30 <main+0xf28>)
 8002bac:	edc3 7a04 	vstr	s15, [r3, #16]
			//		if(Receiver[2] > 1500.00) Receiver[2] = Receiver[2] - 3400.00;
			//		if(Receiver[3] > 1500.00) Receiver[3] = Receiver[3] - 3400.00;
			//		if(Receiver[4] > 1500.00) Receiver[4] = Receiver[4] - 3400.00;

			// Adjust as needed
			vx = map((float) Receiver[0], -100.00, 100.00, -300.00, 300.00);
 8002bb0:	4b5f      	ldr	r3, [pc, #380]	@ (8002d30 <main+0xf28>)
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	ed9f 2a64 	vldr	s4, [pc, #400]	@ 8002d48 <main+0xf40>
 8002bba:	eddf 1a64 	vldr	s3, [pc, #400]	@ 8002d4c <main+0xf44>
 8002bbe:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 8002d38 <main+0xf30>
 8002bc2:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8002d3c <main+0xf34>
 8002bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bca:	f001 f995 	bl	8003ef8 <map>
 8002bce:	eef0 7a40 	vmov.f32	s15, s0
 8002bd2:	4b5f      	ldr	r3, [pc, #380]	@ (8002d50 <main+0xf48>)
 8002bd4:	edc3 7a00 	vstr	s15, [r3]
			vy = map((float) Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8002bd8:	4b55      	ldr	r3, [pc, #340]	@ (8002d30 <main+0xf28>)
 8002bda:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bde:	ed9f 2a5a 	vldr	s4, [pc, #360]	@ 8002d48 <main+0xf40>
 8002be2:	eddf 1a5a 	vldr	s3, [pc, #360]	@ 8002d4c <main+0xf44>
 8002be6:	ed9f 1a54 	vldr	s2, [pc, #336]	@ 8002d38 <main+0xf30>
 8002bea:	eddf 0a54 	vldr	s1, [pc, #336]	@ 8002d3c <main+0xf34>
 8002bee:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf2:	f001 f981 	bl	8003ef8 <map>
 8002bf6:	eef0 7a40 	vmov.f32	s15, s0
 8002bfa:	4b56      	ldr	r3, [pc, #344]	@ (8002d54 <main+0xf4c>)
 8002bfc:	edc3 7a00 	vstr	s15, [r3]
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MODE>> ///////////////////////////

			if (EmergencyState == 1) {
 8002c00:	4b55      	ldr	r3, [pc, #340]	@ (8002d58 <main+0xf50>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d103      	bne.n	8002c10 <main+0xe08>
				Mode = 0;
 8002c08:	4a54      	ldr	r2, [pc, #336]	@ (8002d5c <main+0xf54>)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	7013      	strb	r3, [r2, #0]
 8002c0e:	e1aa      	b.n	8002f66 <main+0x115e>
			} else if (Receiver[2] < -30 && Receiver[4] < -30) {
 8002c10:	4b47      	ldr	r3, [pc, #284]	@ (8002d30 <main+0xf28>)
 8002c12:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c16:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c22:	d513      	bpl.n	8002c4c <main+0xe44>
 8002c24:	4b42      	ldr	r3, [pc, #264]	@ (8002d30 <main+0xf28>)
 8002c26:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c2a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c36:	d509      	bpl.n	8002c4c <main+0xe44>
				Mode = 0;
 8002c38:	4a48      	ldr	r2, [pc, #288]	@ (8002d5c <main+0xf54>)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	7013      	strb	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c44:	4846      	ldr	r0, [pc, #280]	@ (8002d60 <main+0xf58>)
 8002c46:	f003 fb17 	bl	8006278 <HAL_GPIO_WritePin>
 8002c4a:	e18c      	b.n	8002f66 <main+0x115e>
			} else if (Receiver[3] > 0 && IsPress == 0) {
 8002c4c:	4b38      	ldr	r3, [pc, #224]	@ (8002d30 <main+0xf28>)
 8002c4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5a:	f340 8181 	ble.w	8002f60 <main+0x1158>
 8002c5e:	4b41      	ldr	r3, [pc, #260]	@ (8002d64 <main+0xf5c>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f040 817c 	bne.w	8002f60 <main+0x1158>
				IsPress = 1;
 8002c68:	4a3e      	ldr	r2, [pc, #248]	@ (8002d64 <main+0xf5c>)
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002c6e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d68 <main+0xf60>)
 8002c70:	2300      	movs	r3, #0
 8002c72:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002c74:	4b2e      	ldr	r3, [pc, #184]	@ (8002d30 <main+0xf28>)
 8002c76:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c7a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c86:	dd2c      	ble.n	8002ce2 <main+0xeda>
 8002c88:	4b29      	ldr	r3, [pc, #164]	@ (8002d30 <main+0xf28>)
 8002c8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c8e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9a:	d522      	bpl.n	8002ce2 <main+0xeda>
						&& Receiver[4] < -30) {
 8002c9c:	4b24      	ldr	r3, [pc, #144]	@ (8002d30 <main+0xf28>)
 8002c9e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ca2:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cae:	d518      	bpl.n	8002ce2 <main+0xeda>
					if (Mode != 1) {
 8002cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d5c <main+0xf54>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d003      	beq.n	8002cc0 <main+0xeb8>
						Mode = 1;
 8002cb8:	4a28      	ldr	r2, [pc, #160]	@ (8002d5c <main+0xf54>)
 8002cba:	2301      	movs	r3, #1
 8002cbc:	7013      	strb	r3, [r2, #0]
					if (Mode != 1) {
 8002cbe:	e13c      	b.n	8002f3a <main+0x1132>
					} else {
						TargetX = End_x;
 8002cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d6c <main+0xf64>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d70 <main+0xf68>)
 8002cc6:	601a      	str	r2, [r3, #0]
						TargetY = End_y;
 8002cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d74 <main+0xf6c>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d78 <main+0xf70>)
 8002cce:	601a      	str	r2, [r3, #0]
						TargetR = Revolute_QEIdata.RadPosition;
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d7c <main+0xf74>)
 8002cd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d80 <main+0xf78>)
 8002cd6:	601a      	str	r2, [r3, #0]
						TargetP = Prismatic_QEIdata.mmPosition;
 8002cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d84 <main+0xf7c>)
 8002cda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d88 <main+0xf80>)
 8002cde:	601a      	str	r2, [r3, #0]
					if (Mode != 1) {
 8002ce0:	e12b      	b.n	8002f3a <main+0x1132>
					}
				} else if (Receiver[2] > 30 && Receiver[4] < -30) {
 8002ce2:	4b13      	ldr	r3, [pc, #76]	@ (8002d30 <main+0xf28>)
 8002ce4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ce8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf4:	dd4e      	ble.n	8002d94 <main+0xf8c>
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <main+0xf28>)
 8002cf8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cfc:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d08:	d544      	bpl.n	8002d94 <main+0xf8c>
					revolute.finished = 0;
 8002d0a:	4a20      	ldr	r2, [pc, #128]	@ (8002d8c <main+0xf84>)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 8002d10:	4a1f      	ldr	r2, [pc, #124]	@ (8002d90 <main+0xf88>)
 8002d12:	2300      	movs	r3, #0
 8002d14:	6293      	str	r3, [r2, #40]	@ 0x28
					Mode = 2;
 8002d16:	4a11      	ldr	r2, [pc, #68]	@ (8002d5c <main+0xf54>)
 8002d18:	2302      	movs	r3, #2
 8002d1a:	7013      	strb	r3, [r2, #0]
 8002d1c:	e10d      	b.n	8002f3a <main+0x1132>
 8002d1e:	bf00      	nop
 8002d20:	00000000 	.word	0x00000000
 8002d24:	40b32400 	.word	0x40b32400
 8002d28:	00000000 	.word	0x00000000
 8002d2c:	40977000 	.word	0x40977000
 8002d30:	20000ab0 	.word	0x20000ab0
 8002d34:	20000ae4 	.word	0x20000ae4
 8002d38:	42c80000 	.word	0x42c80000
 8002d3c:	c2c80000 	.word	0xc2c80000
 8002d40:	43fa0000 	.word	0x43fa0000
 8002d44:	c3fa0000 	.word	0xc3fa0000
 8002d48:	43960000 	.word	0x43960000
 8002d4c:	c3960000 	.word	0xc3960000
 8002d50:	20000b7c 	.word	0x20000b7c
 8002d54:	20000b80 	.word	0x20000b80
 8002d58:	20000bcd 	.word	0x20000bcd
 8002d5c:	20000bcc 	.word	0x20000bcc
 8002d60:	48000800 	.word	0x48000800
 8002d64:	20000bce 	.word	0x20000bce
 8002d68:	20000c1c 	.word	0x20000c1c
 8002d6c:	20000b84 	.word	0x20000b84
 8002d70:	20000b8c 	.word	0x20000b8c
 8002d74:	20000b88 	.word	0x20000b88
 8002d78:	20000b90 	.word	0x20000b90
 8002d7c:	20000af8 	.word	0x20000af8
 8002d80:	20000b94 	.word	0x20000b94
 8002d84:	20000b38 	.word	0x20000b38
 8002d88:	20000b98 	.word	0x20000b98
 8002d8c:	2000132c 	.word	0x2000132c
 8002d90:	20001370 	.word	0x20001370
				} else if (Receiver[2] < -30 && Receiver[4] > -30
 8002d94:	4b69      	ldr	r3, [pc, #420]	@ (8002f3c <main+0x1134>)
 8002d96:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d9a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da6:	d517      	bpl.n	8002dd8 <main+0xfd0>
 8002da8:	4b64      	ldr	r3, [pc, #400]	@ (8002f3c <main+0x1134>)
 8002daa:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dae:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dba:	dd0d      	ble.n	8002dd8 <main+0xfd0>
						&& Receiver[4] < 30) {
 8002dbc:	4b5f      	ldr	r3, [pc, #380]	@ (8002f3c <main+0x1134>)
 8002dbe:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dc2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dce:	d503      	bpl.n	8002dd8 <main+0xfd0>
					Mode = 3;
 8002dd0:	4a5b      	ldr	r2, [pc, #364]	@ (8002f40 <main+0x1138>)
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	7013      	strb	r3, [r2, #0]
 8002dd6:	e0b0      	b.n	8002f3a <main+0x1132>
				} else if (Receiver[2] > -30 && Receiver[2] < 30
 8002dd8:	4b58      	ldr	r3, [pc, #352]	@ (8002f3c <main+0x1134>)
 8002dda:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dde:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dea:	dd27      	ble.n	8002e3c <main+0x1034>
 8002dec:	4b53      	ldr	r3, [pc, #332]	@ (8002f3c <main+0x1134>)
 8002dee:	edd3 7a02 	vldr	s15, [r3, #8]
 8002df2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfe:	d51d      	bpl.n	8002e3c <main+0x1034>
						&& Receiver[4] > -30 && Receiver[4] < 30) {
 8002e00:	4b4e      	ldr	r3, [pc, #312]	@ (8002f3c <main+0x1134>)
 8002e02:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e06:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e12:	dd13      	ble.n	8002e3c <main+0x1034>
 8002e14:	4b49      	ldr	r3, [pc, #292]	@ (8002f3c <main+0x1134>)
 8002e16:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e1a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e26:	d509      	bpl.n	8002e3c <main+0x1034>
					revolute.finished = 0;
 8002e28:	4a46      	ldr	r2, [pc, #280]	@ (8002f44 <main+0x113c>)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 8002e2e:	4a46      	ldr	r2, [pc, #280]	@ (8002f48 <main+0x1140>)
 8002e30:	2300      	movs	r3, #0
 8002e32:	6293      	str	r3, [r2, #40]	@ 0x28
					Mode = 4;
 8002e34:	4a42      	ldr	r2, [pc, #264]	@ (8002f40 <main+0x1138>)
 8002e36:	2304      	movs	r3, #4
 8002e38:	7013      	strb	r3, [r2, #0]
 8002e3a:	e07e      	b.n	8002f3a <main+0x1132>
				} else if (Receiver[2] > 30 && Receiver[4] > -30
 8002e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f3c <main+0x1134>)
 8002e3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e42:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4e:	dd17      	ble.n	8002e80 <main+0x1078>
 8002e50:	4b3a      	ldr	r3, [pc, #232]	@ (8002f3c <main+0x1134>)
 8002e52:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e56:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e62:	dd0d      	ble.n	8002e80 <main+0x1078>
						&& Receiver[4] < 30) {
 8002e64:	4b35      	ldr	r3, [pc, #212]	@ (8002f3c <main+0x1134>)
 8002e66:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e6a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e76:	d503      	bpl.n	8002e80 <main+0x1078>
					Mode = 5;
 8002e78:	4a31      	ldr	r2, [pc, #196]	@ (8002f40 <main+0x1138>)
 8002e7a:	2305      	movs	r3, #5
 8002e7c:	7013      	strb	r3, [r2, #0]
 8002e7e:	e05c      	b.n	8002f3a <main+0x1132>
				} else if (Receiver[2] < -30 && Receiver[4] > 30) {
 8002e80:	4b2e      	ldr	r3, [pc, #184]	@ (8002f3c <main+0x1134>)
 8002e82:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e86:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e92:	d50d      	bpl.n	8002eb0 <main+0x10a8>
 8002e94:	4b29      	ldr	r3, [pc, #164]	@ (8002f3c <main+0x1134>)
 8002e96:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e9a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea6:	dd03      	ble.n	8002eb0 <main+0x10a8>
					Mode = 6;
 8002ea8:	4a25      	ldr	r2, [pc, #148]	@ (8002f40 <main+0x1138>)
 8002eaa:	2306      	movs	r3, #6
 8002eac:	7013      	strb	r3, [r2, #0]
 8002eae:	e044      	b.n	8002f3a <main+0x1132>
				} else if (Receiver[2] > -30 && Receiver[2] < 30
 8002eb0:	4b22      	ldr	r3, [pc, #136]	@ (8002f3c <main+0x1134>)
 8002eb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eb6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec2:	dd17      	ble.n	8002ef4 <main+0x10ec>
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f3c <main+0x1134>)
 8002ec6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eca:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed6:	d50d      	bpl.n	8002ef4 <main+0x10ec>
						&& Receiver[4] > 30) {
 8002ed8:	4b18      	ldr	r3, [pc, #96]	@ (8002f3c <main+0x1134>)
 8002eda:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ede:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eea:	dd03      	ble.n	8002ef4 <main+0x10ec>
					Mode = 7;
 8002eec:	4a14      	ldr	r2, [pc, #80]	@ (8002f40 <main+0x1138>)
 8002eee:	2307      	movs	r3, #7
 8002ef0:	7013      	strb	r3, [r2, #0]
 8002ef2:	e022      	b.n	8002f3a <main+0x1132>
				} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8002ef4:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <main+0x1134>)
 8002ef6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002efa:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002efe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f06:	dc00      	bgt.n	8002f0a <main+0x1102>
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002f08:	e02d      	b.n	8002f66 <main+0x115e>
				} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <main+0x1134>)
 8002f0c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f10:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1c:	dc00      	bgt.n	8002f20 <main+0x1118>
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002f1e:	e022      	b.n	8002f66 <main+0x115e>
					loop_counter = 0;
 8002f20:	4a0a      	ldr	r2, [pc, #40]	@ (8002f4c <main+0x1144>)
 8002f22:	2300      	movs	r3, #0
 8002f24:	6013      	str	r3, [r2, #0]
					TargetR = 4.18879;
 8002f26:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <main+0x1148>)
 8002f28:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <main+0x114c>)
 8002f2a:	6013      	str	r3, [r2, #0]
					TargetP = 50;
 8002f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f58 <main+0x1150>)
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <main+0x1154>)
 8002f30:	6013      	str	r3, [r2, #0]
					Mode = 8;
 8002f32:	4a03      	ldr	r2, [pc, #12]	@ (8002f40 <main+0x1138>)
 8002f34:	2308      	movs	r3, #8
 8002f36:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002f38:	e015      	b.n	8002f66 <main+0x115e>
 8002f3a:	e014      	b.n	8002f66 <main+0x115e>
 8002f3c:	20000ab0 	.word	0x20000ab0
 8002f40:	20000bcc 	.word	0x20000bcc
 8002f44:	2000132c 	.word	0x2000132c
 8002f48:	20001370 	.word	0x20001370
 8002f4c:	20000c38 	.word	0x20000c38
 8002f50:	20000b94 	.word	0x20000b94
 8002f54:	40860a91 	.word	0x40860a91
 8002f58:	20000b98 	.word	0x20000b98
 8002f5c:	42480000 	.word	0x42480000
				}
			} else {
				IsPress = 0;
 8002f60:	4ac3      	ldr	r2, [pc, #780]	@ (8003270 <main+0x1468>)
 8002f62:	2300      	movs	r3, #0
 8002f64:	7013      	strb	r3, [r2, #0]
			}
			//////////////////////////////////////////////////////////////

			//////////////////////// <<STOP>> ////////////////////////////
			if (Mode == 0) {
 8002f66:	4bc3      	ldr	r3, [pc, #780]	@ (8003274 <main+0x146c>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10c      	bne.n	8002f88 <main+0x1180>
				Set_Motor(0, 0);
 8002f6e:	ed9f 0ac2 	vldr	s0, [pc, #776]	@ 8003278 <main+0x1470>
 8002f72:	2000      	movs	r0, #0
 8002f74:	f001 fb96 	bl	80046a4 <Set_Motor>
				Set_Motor(1, 0);
 8002f78:	ed9f 0abf 	vldr	s0, [pc, #764]	@ 8003278 <main+0x1470>
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	f001 fb91 	bl	80046a4 <Set_Motor>
				Set_Servo(0);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f001 fc0c 	bl	80047a0 <Set_Servo>
			}
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MANUAL>> //////////////////////////
			if (Mode == 1) {
 8002f88:	4bba      	ldr	r3, [pc, #744]	@ (8003274 <main+0x146c>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	f040 80af 	bne.w	80030f0 <main+0x12e8>
				//////////////////////// <<CONTROL>> /////////////////////////
				//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
				//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
				//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
				TargetRVel = (map((float) Receiver[0], -100.00, 100.00, -1.00,
 8002f92:	4bba      	ldr	r3, [pc, #744]	@ (800327c <main+0x1474>)
 8002f94:	edd3 7a00 	vldr	s15, [r3]
 8002f98:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8002f9c:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 8002fa0:	ed9f 1ab7 	vldr	s2, [pc, #732]	@ 8003280 <main+0x1478>
 8002fa4:	eddf 0ab7 	vldr	s1, [pc, #732]	@ 8003284 <main+0x147c>
 8002fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fac:	f000 ffa4 	bl	8003ef8 <map>
 8002fb0:	eef0 7a40 	vmov.f32	s15, s0
 8002fb4:	4bb4      	ldr	r3, [pc, #720]	@ (8003288 <main+0x1480>)
 8002fb6:	edc3 7a00 	vstr	s15, [r3]
						1.00));
				TargetPVel = map((float) Receiver[1], -100.00, 100.00, -500.00,
 8002fba:	4bb0      	ldr	r3, [pc, #704]	@ (800327c <main+0x1474>)
 8002fbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fc0:	ed9f 2ab2 	vldr	s4, [pc, #712]	@ 800328c <main+0x1484>
 8002fc4:	eddf 1ab2 	vldr	s3, [pc, #712]	@ 8003290 <main+0x1488>
 8002fc8:	ed9f 1aad 	vldr	s2, [pc, #692]	@ 8003280 <main+0x1478>
 8002fcc:	eddf 0aad 	vldr	s1, [pc, #692]	@ 8003284 <main+0x147c>
 8002fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd4:	f000 ff90 	bl	8003ef8 <map>
 8002fd8:	eef0 7a40 	vmov.f32	s15, s0
 8002fdc:	4bad      	ldr	r3, [pc, #692]	@ (8003294 <main+0x148c>)
 8002fde:	edc3 7a00 	vstr	s15, [r3]
						500.00);
				//////////////////////////////////////////////////////////////

				//////////////////////// <<MOTOR>> ///////////////////////////
				R_Velo_Error = (TargetRVel - Revolute_QEIdata.Velocity_f);
 8002fe2:	4ba9      	ldr	r3, [pc, #676]	@ (8003288 <main+0x1480>)
 8002fe4:	ed93 7a00 	vldr	s14, [r3]
 8002fe8:	4bab      	ldr	r3, [pc, #684]	@ (8003298 <main+0x1490>)
 8002fea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002fee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff2:	4baa      	ldr	r3, [pc, #680]	@ (800329c <main+0x1494>)
 8002ff4:	edc3 7a00 	vstr	s15, [r3]
				P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity;
 8002ff8:	4ba6      	ldr	r3, [pc, #664]	@ (8003294 <main+0x148c>)
 8002ffa:	ed93 7a00 	vldr	s14, [r3]
 8002ffe:	4ba8      	ldr	r3, [pc, #672]	@ (80032a0 <main+0x1498>)
 8003000:	edd3 7a08 	vldr	s15, [r3, #32]
 8003004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003008:	4ba6      	ldr	r3, [pc, #664]	@ (80032a4 <main+0x149c>)
 800300a:	edc3 7a00 	vstr	s15, [r3]

				//Call every 0.001 s
				static uint64_t timestampState1 = 0;
				int64_t currentTimeState1 = micros();
 800300e:	f001 f897 	bl	8004140 <micros>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
				if (currentTimeState1 > timestampState1) {
 800301a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800301e:	4ba2      	ldr	r3, [pc, #648]	@ (80032a8 <main+0x14a0>)
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	4282      	cmp	r2, r0
 8003026:	418b      	sbcs	r3, r1
 8003028:	d250      	bcs.n	80030cc <main+0x12c4>
					timestampState1 = currentTimeState1 + 1000;		//us
 800302a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800302e:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8003032:	6239      	str	r1, [r7, #32]
 8003034:	f143 0300 	adc.w	r3, r3, #0
 8003038:	627b      	str	r3, [r7, #36]	@ 0x24
 800303a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800303e:	4b9a      	ldr	r3, [pc, #616]	@ (80032a8 <main+0x14a0>)
 8003040:	e9c3 0100 	strd	r0, r1, [r3]
					R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel,
 8003044:	4b95      	ldr	r3, [pc, #596]	@ (800329c <main+0x1494>)
 8003046:	edd3 7a00 	vldr	s15, [r3]
 800304a:	4b98      	ldr	r3, [pc, #608]	@ (80032ac <main+0x14a4>)
 800304c:	ed93 7a00 	vldr	s14, [r3]
 8003050:	4b97      	ldr	r3, [pc, #604]	@ (80032b0 <main+0x14a8>)
 8003052:	edd3 6a00 	vldr	s13, [r3]
 8003056:	4b97      	ldr	r3, [pc, #604]	@ (80032b4 <main+0x14ac>)
 8003058:	ed93 6a00 	vldr	s12, [r3]
 800305c:	4896      	ldr	r0, [pc, #600]	@ (80032b8 <main+0x14b0>)
 800305e:	ed9f 3a88 	vldr	s6, [pc, #544]	@ 8003280 <main+0x1478>
 8003062:	eddf 2a88 	vldr	s5, [pc, #544]	@ 8003284 <main+0x147c>
 8003066:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 80032bc <main+0x14b4>
 800306a:	eef0 1a46 	vmov.f32	s3, s12
 800306e:	eeb0 1a66 	vmov.f32	s2, s13
 8003072:	eef0 0a47 	vmov.f32	s1, s14
 8003076:	eeb0 0a67 	vmov.f32	s0, s15
 800307a:	f001 f87b 	bl	8004174 <PID_Update>
 800307e:	eef0 7a40 	vmov.f32	s15, s0
 8003082:	4b8f      	ldr	r3, [pc, #572]	@ (80032c0 <main+0x14b8>)
 8003084:	edc3 7a00 	vstr	s15, [r3]
							R_kD_vel, 0.01f, -100.0f, 100.0f, &pid_r_v);
					P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel,
 8003088:	4b86      	ldr	r3, [pc, #536]	@ (80032a4 <main+0x149c>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	4b8d      	ldr	r3, [pc, #564]	@ (80032c4 <main+0x14bc>)
 8003090:	ed93 7a00 	vldr	s14, [r3]
 8003094:	4b8c      	ldr	r3, [pc, #560]	@ (80032c8 <main+0x14c0>)
 8003096:	edd3 6a00 	vldr	s13, [r3]
 800309a:	4b8c      	ldr	r3, [pc, #560]	@ (80032cc <main+0x14c4>)
 800309c:	ed93 6a00 	vldr	s12, [r3]
 80030a0:	488b      	ldr	r0, [pc, #556]	@ (80032d0 <main+0x14c8>)
 80030a2:	ed9f 3a77 	vldr	s6, [pc, #476]	@ 8003280 <main+0x1478>
 80030a6:	eddf 2a77 	vldr	s5, [pc, #476]	@ 8003284 <main+0x147c>
 80030aa:	ed9f 2a84 	vldr	s4, [pc, #528]	@ 80032bc <main+0x14b4>
 80030ae:	eef0 1a46 	vmov.f32	s3, s12
 80030b2:	eeb0 1a66 	vmov.f32	s2, s13
 80030b6:	eef0 0a47 	vmov.f32	s1, s14
 80030ba:	eeb0 0a67 	vmov.f32	s0, s15
 80030be:	f001 f859 	bl	8004174 <PID_Update>
 80030c2:	eef0 7a40 	vmov.f32	s15, s0
 80030c6:	4b83      	ldr	r3, [pc, #524]	@ (80032d4 <main+0x14cc>)
 80030c8:	edc3 7a00 	vstr	s15, [r3]
				}

				//			R_PWM = Receiver[0];
				//			P_PWM = Receiver[1];

				Workspace_limit();
 80030cc:	f001 fbb4 	bl	8004838 <Workspace_limit>

				Set_Motor(0, R_PWM);
 80030d0:	4b7b      	ldr	r3, [pc, #492]	@ (80032c0 <main+0x14b8>)
 80030d2:	edd3 7a00 	vldr	s15, [r3]
 80030d6:	eeb0 0a67 	vmov.f32	s0, s15
 80030da:	2000      	movs	r0, #0
 80030dc:	f001 fae2 	bl	80046a4 <Set_Motor>
				Set_Motor(1, P_PWM);
 80030e0:	4b7c      	ldr	r3, [pc, #496]	@ (80032d4 <main+0x14cc>)
 80030e2:	edd3 7a00 	vldr	s15, [r3]
 80030e6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ea:	2001      	movs	r0, #1
 80030ec:	f001 fada 	bl	80046a4 <Set_Motor>
				//////////////////////////////////////////////////////////////
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 4) {
 80030f0:	4b60      	ldr	r3, [pc, #384]	@ (8003274 <main+0x146c>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d133      	bne.n	8003160 <main+0x1358>
				// TargetR = (atan2f(TargetX * -1, TargetY) + M_PI_2);
				// TargetP = sqrtf(TargetX * TargetX + TargetY * TargetY);

				TargetR = TargetR_Deg * M_PI / 180;
 80030f8:	4b77      	ldr	r3, [pc, #476]	@ (80032d8 <main+0x14d0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd f9ef 	bl	80004e0 <__aeabi_f2d>
 8003102:	a359      	add	r3, pc, #356	@ (adr r3, 8003268 <main+0x1460>)
 8003104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003108:	f7fd fa42 	bl	8000590 <__aeabi_dmul>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4610      	mov	r0, r2
 8003112:	4619      	mov	r1, r3
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	4b70      	ldr	r3, [pc, #448]	@ (80032dc <main+0x14d4>)
 800311a:	f7fd fb63 	bl	80007e4 <__aeabi_ddiv>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	f7fd fced 	bl	8000b04 <__aeabi_d2f>
 800312a:	4602      	mov	r2, r0
 800312c:	4b6c      	ldr	r3, [pc, #432]	@ (80032e0 <main+0x14d8>)
 800312e:	601a      	str	r2, [r3, #0]
				if (CascadeControl_Step()) {
 8003130:	f001 fe3a 	bl	8004da8 <CascadeControl_Step>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d012      	beq.n	8003160 <main+0x1358>
					Set_Servo(1);
 800313a:	2001      	movs	r0, #1
 800313c:	f001 fb30 	bl	80047a0 <Set_Servo>
					Set_Motor(0, 0);
 8003140:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8003278 <main+0x1470>
 8003144:	2000      	movs	r0, #0
 8003146:	f001 faad 	bl	80046a4 <Set_Motor>
					Set_Motor(1, 0);
 800314a:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8003278 <main+0x1470>
 800314e:	2001      	movs	r0, #1
 8003150:	f001 faa8 	bl	80046a4 <Set_Motor>
					revolute.finished = 0;
 8003154:	4a63      	ldr	r2, [pc, #396]	@ (80032e4 <main+0x14dc>)
 8003156:	2300      	movs	r3, #0
 8003158:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 800315a:	4a63      	ldr	r2, [pc, #396]	@ (80032e8 <main+0x14e0>)
 800315c:	2300      	movs	r3, #0
 800315e:	6293      	str	r3, [r2, #40]	@ 0x28
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 5) {
 8003160:	4b44      	ldr	r3, [pc, #272]	@ (8003274 <main+0x146c>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b05      	cmp	r3, #5
 8003166:	d111      	bne.n	800318c <main+0x1384>

				Workspace_limit();
 8003168:	f001 fb66 	bl	8004838 <Workspace_limit>
				Set_Motor(0, R_PWM);
 800316c:	4b54      	ldr	r3, [pc, #336]	@ (80032c0 <main+0x14b8>)
 800316e:	edd3 7a00 	vldr	s15, [r3]
 8003172:	eeb0 0a67 	vmov.f32	s0, s15
 8003176:	2000      	movs	r0, #0
 8003178:	f001 fa94 	bl	80046a4 <Set_Motor>
				Set_Motor(1, P_PWM);
 800317c:	4b55      	ldr	r3, [pc, #340]	@ (80032d4 <main+0x14cc>)
 800317e:	edd3 7a00 	vldr	s15, [r3]
 8003182:	eeb0 0a67 	vmov.f32	s0, s15
 8003186:	2001      	movs	r0, #1
 8003188:	f001 fa8c 	bl	80046a4 <Set_Motor>
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			static uint64_t lastPressTime = 0; // Holds the last time a press was handled
			uint64_t currentTime = micros();   // Current time in microseconds
 800318c:	f000 ffd8 	bl	8004140 <micros>
 8003190:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
			if (Mode == 6) {
 8003194:	4b37      	ldr	r3, [pc, #220]	@ (8003274 <main+0x146c>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b06      	cmp	r3, #6
 800319a:	f040 80b6 	bne.w	800330a <main+0x1502>
				if (currentTime - lastPressTime >= 2000000) {
 800319e:	4b53      	ldr	r3, [pc, #332]	@ (80032ec <main+0x14e4>)
 80031a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031a4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80031a8:	1a16      	subs	r6, r2, r0
 80031aa:	61be      	str	r6, [r7, #24]
 80031ac:	eb63 0301 	sbc.w	r3, r3, r1
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	4b4f      	ldr	r3, [pc, #316]	@ (80032f0 <main+0x14e8>)
 80031b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031b8:	4602      	mov	r2, r0
 80031ba:	429a      	cmp	r2, r3
 80031bc:	460b      	mov	r3, r1
 80031be:	f173 0300 	sbcs.w	r3, r3, #0
 80031c2:	f0c0 809f 	bcc.w	8003304 <main+0x14fc>
					if (IsPress) {
 80031c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003270 <main+0x1468>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 809d 	beq.w	800330a <main+0x1502>
						lastPressTime = currentTime;
 80031d0:	4946      	ldr	r1, [pc, #280]	@ (80032ec <main+0x14e4>)
 80031d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80031d6:	e9c1 2300 	strd	r2, r3, [r1]
						if (TenPointMode == 1) {
 80031da:	4b46      	ldr	r3, [pc, #280]	@ (80032f4 <main+0x14ec>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d102      	bne.n	80031e8 <main+0x13e0>
							Mode = 2;
 80031e2:	4a24      	ldr	r2, [pc, #144]	@ (8003274 <main+0x146c>)
 80031e4:	2302      	movs	r3, #2
 80031e6:	7013      	strb	r3, [r2, #0]
						}
						testArray[counter * 2] = Prismatic_QEIdata.mmPosition;
 80031e8:	4b43      	ldr	r3, [pc, #268]	@ (80032f8 <main+0x14f0>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	0058      	lsls	r0, r3, #1
 80031ee:	4b2c      	ldr	r3, [pc, #176]	@ (80032a0 <main+0x1498>)
 80031f0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80031f2:	4a42      	ldr	r2, [pc, #264]	@ (80032fc <main+0x14f4>)
 80031f4:	0083      	lsls	r3, r0, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	6019      	str	r1, [r3, #0]
						testArray[(counter * 2) + 1] =
 80031fa:	4b3f      	ldr	r3, [pc, #252]	@ (80032f8 <main+0x14f0>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	1c58      	adds	r0, r3, #1
								Revolute_QEIdata.RadPosition;
 8003202:	4b25      	ldr	r3, [pc, #148]	@ (8003298 <main+0x1490>)
 8003204:	6b99      	ldr	r1, [r3, #56]	@ 0x38
						testArray[(counter * 2) + 1] =
 8003206:	4a3d      	ldr	r2, [pc, #244]	@ (80032fc <main+0x14f4>)
 8003208:	0083      	lsls	r3, r0, #2
 800320a:	4413      	add	r3, r2
 800320c:	6019      	str	r1, [r3, #0]
						SET_TARGET(counter,
 800320e:	4b3a      	ldr	r3, [pc, #232]	@ (80032f8 <main+0x14f0>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
								(int16_t) Prismatic_QEIdata.mmPosition,
 8003214:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <main+0x1498>)
 8003216:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800321a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800321e:	ee17 3a90 	vmov	r3, s15
 8003222:	b21b      	sxth	r3, r3
						SET_TARGET(counter,
 8003224:	4619      	mov	r1, r3
								(int16_t) Revolute_QEIdata.RadPosition);
 8003226:	4b1c      	ldr	r3, [pc, #112]	@ (8003298 <main+0x1490>)
 8003228:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800322c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003230:	ee17 3a90 	vmov	r3, s15
 8003234:	b21b      	sxth	r3, r3
						SET_TARGET(counter,
 8003236:	461a      	mov	r2, r3
 8003238:	f7fe f826 	bl	8001288 <SET_TARGET>

						if (counter == 9) {
 800323c:	4b2e      	ldr	r3, [pc, #184]	@ (80032f8 <main+0x14f0>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b09      	cmp	r3, #9
 8003242:	d109      	bne.n	8003258 <main+0x1450>
							counter = 0;
 8003244:	4a2c      	ldr	r2, [pc, #176]	@ (80032f8 <main+0x14f0>)
 8003246:	2300      	movs	r3, #0
 8003248:	7013      	strb	r3, [r2, #0]
							testArraydone = 1;
 800324a:	4a2d      	ldr	r2, [pc, #180]	@ (8003300 <main+0x14f8>)
 800324c:	2301      	movs	r3, #1
 800324e:	7013      	strb	r3, [r2, #0]
							TenPointMode = 1;
 8003250:	4a28      	ldr	r2, [pc, #160]	@ (80032f4 <main+0x14ec>)
 8003252:	2301      	movs	r3, #1
 8003254:	7013      	strb	r3, [r2, #0]
 8003256:	e058      	b.n	800330a <main+0x1502>
						} else {
							counter++;
 8003258:	4b27      	ldr	r3, [pc, #156]	@ (80032f8 <main+0x14f0>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	3301      	adds	r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	4a25      	ldr	r2, [pc, #148]	@ (80032f8 <main+0x14f0>)
 8003262:	7013      	strb	r3, [r2, #0]
 8003264:	e051      	b.n	800330a <main+0x1502>
 8003266:	bf00      	nop
 8003268:	54442d18 	.word	0x54442d18
 800326c:	400921fb 	.word	0x400921fb
 8003270:	20000bce 	.word	0x20000bce
 8003274:	20000bcc 	.word	0x20000bcc
 8003278:	00000000 	.word	0x00000000
 800327c:	20000ab0 	.word	0x20000ab0
 8003280:	42c80000 	.word	0x42c80000
 8003284:	c2c80000 	.word	0xc2c80000
 8003288:	20000ba4 	.word	0x20000ba4
 800328c:	43fa0000 	.word	0x43fa0000
 8003290:	c3fa0000 	.word	0xc3fa0000
 8003294:	20000ba8 	.word	0x20000ba8
 8003298:	20000af8 	.word	0x20000af8
 800329c:	20000bbc 	.word	0x20000bbc
 80032a0:	20000b38 	.word	0x20000b38
 80032a4:	20000bc0 	.word	0x20000bc0
 80032a8:	200013d0 	.word	0x200013d0
 80032ac:	20000200 	.word	0x20000200
 80032b0:	20000204 	.word	0x20000204
 80032b4:	20000208 	.word	0x20000208
 80032b8:	20000c08 	.word	0x20000c08
 80032bc:	3c23d70a 	.word	0x3c23d70a
 80032c0:	20000bc4 	.word	0x20000bc4
 80032c4:	20000218 	.word	0x20000218
 80032c8:	2000021c 	.word	0x2000021c
 80032cc:	20000c18 	.word	0x20000c18
 80032d0:	20000c10 	.word	0x20000c10
 80032d4:	20000bc8 	.word	0x20000bc8
 80032d8:	20000aa8 	.word	0x20000aa8
 80032dc:	40668000 	.word	0x40668000
 80032e0:	20000b94 	.word	0x20000b94
 80032e4:	2000132c 	.word	0x2000132c
 80032e8:	20001370 	.word	0x20001370
 80032ec:	200013d8 	.word	0x200013d8
 80032f0:	001e8480 	.word	0x001e8480
 80032f4:	20000c3d 	.word	0x20000c3d
 80032f8:	20000c3c 	.word	0x20000c3c
 80032fc:	200012c0 	.word	0x200012c0
 8003300:	20001310 	.word	0x20001310
						}
					}
				} else {
					Mode = 1;
 8003304:	4a3d      	ldr	r2, [pc, #244]	@ (80033fc <main+0x15f4>)
 8003306:	2301      	movs	r3, #1
 8003308:	7013      	strb	r3, [r2, #0]
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			static uint64_t lastPressTime1 = 0; // Holds the last time a press was handled
			if (Mode == 7) {
 800330a:	4b3c      	ldr	r3, [pc, #240]	@ (80033fc <main+0x15f4>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b07      	cmp	r3, #7
 8003310:	d126      	bne.n	8003360 <main+0x1558>
				if (testArraydone && IsPress
 8003312:	4b3b      	ldr	r3, [pc, #236]	@ (8003400 <main+0x15f8>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01f      	beq.n	800335a <main+0x1552>
 800331a:	4b3a      	ldr	r3, [pc, #232]	@ (8003404 <main+0x15fc>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d01b      	beq.n	800335a <main+0x1552>
						&& currentTime - lastPressTime1 >= 2000000) {
 8003322:	4b39      	ldr	r3, [pc, #228]	@ (8003408 <main+0x1600>)
 8003324:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003328:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800332c:	1a16      	subs	r6, r2, r0
 800332e:	613e      	str	r6, [r7, #16]
 8003330:	eb63 0301 	sbc.w	r3, r3, r1
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	4b35      	ldr	r3, [pc, #212]	@ (800340c <main+0x1604>)
 8003338:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800333c:	4602      	mov	r2, r0
 800333e:	429a      	cmp	r2, r3
 8003340:	460b      	mov	r3, r1
 8003342:	f173 0300 	sbcs.w	r3, r3, #0
 8003346:	d308      	bcc.n	800335a <main+0x1552>
					lastPressTime1 = currentTime;
 8003348:	492f      	ldr	r1, [pc, #188]	@ (8003408 <main+0x1600>)
 800334a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800334e:	e9c1 2300 	strd	r2, r3, [r1]
					TenPointMode = 1;
 8003352:	4a2f      	ldr	r2, [pc, #188]	@ (8003410 <main+0x1608>)
 8003354:	2301      	movs	r3, #1
 8003356:	7013      	strb	r3, [r2, #0]
 8003358:	e002      	b.n	8003360 <main+0x1558>
				} else {
					Mode = 2;
 800335a:	4a28      	ldr	r2, [pc, #160]	@ (80033fc <main+0x15f4>)
 800335c:	2302      	movs	r3, #2
 800335e:	7013      	strb	r3, [r2, #0]
//				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 8) {
 8003360:	4b26      	ldr	r3, [pc, #152]	@ (80033fc <main+0x15f4>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b08      	cmp	r3, #8
 8003366:	f47e add8 	bne.w	8001f1a <main+0x112>
				static uint8_t goCenter = 1;
				if (goCenter) {
 800336a:	4b2a      	ldr	r3, [pc, #168]	@ (8003414 <main+0x160c>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <main+0x157a>
					TargetR = M_PI_2;
 8003372:	4a29      	ldr	r2, [pc, #164]	@ (8003418 <main+0x1610>)
 8003374:	4b29      	ldr	r3, [pc, #164]	@ (800341c <main+0x1614>)
 8003376:	6013      	str	r3, [r2, #0]
					TargetP = 0;
 8003378:	4a29      	ldr	r2, [pc, #164]	@ (8003420 <main+0x1618>)
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	e005      	b.n	800338e <main+0x1586>
				} else {
					TargetR = M_PI_4;
 8003382:	4a25      	ldr	r2, [pc, #148]	@ (8003418 <main+0x1610>)
 8003384:	4b27      	ldr	r3, [pc, #156]	@ (8003424 <main+0x161c>)
 8003386:	6013      	str	r3, [r2, #0]
					TargetP = 150;
 8003388:	4a25      	ldr	r2, [pc, #148]	@ (8003420 <main+0x1618>)
 800338a:	4b27      	ldr	r3, [pc, #156]	@ (8003428 <main+0x1620>)
 800338c:	6013      	str	r3, [r2, #0]
				}

				if (CascadeControl_Step()) {
 800338e:	f001 fd0b 	bl	8004da8 <CascadeControl_Step>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d027      	beq.n	80033e8 <main+0x15e0>
					Set_Servo(1);
 8003398:	2001      	movs	r0, #1
 800339a:	f001 fa01 	bl	80047a0 <Set_Servo>
					if (micros() - pen_delay_timer >= 500000) {
 800339e:	f000 fecf 	bl	8004140 <micros>
 80033a2:	4b22      	ldr	r3, [pc, #136]	@ (800342c <main+0x1624>)
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	1a86      	subs	r6, r0, r2
 80033aa:	60be      	str	r6, [r7, #8]
 80033ac:	eb61 0303 	sbc.w	r3, r1, r3
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003430 <main+0x1628>)
 80033b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033b8:	4602      	mov	r2, r0
 80033ba:	429a      	cmp	r2, r3
 80033bc:	460b      	mov	r3, r1
 80033be:	f173 0300 	sbcs.w	r3, r3, #0
 80033c2:	f4fe adaa 	bcc.w	8001f1a <main+0x112>
						Set_Servo(0);
 80033c6:	2000      	movs	r0, #0
 80033c8:	f001 f9ea 	bl	80047a0 <Set_Servo>
						if (goCenter) {
 80033cc:	4b11      	ldr	r3, [pc, #68]	@ (8003414 <main+0x160c>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d004      	beq.n	80033de <main+0x15d6>
							goCenter = 0;
 80033d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003414 <main+0x160c>)
 80033d6:	2300      	movs	r3, #0
 80033d8:	7013      	strb	r3, [r2, #0]
 80033da:	f7fe bd9e 	b.w	8001f1a <main+0x112>
						} else {
							goCenter = 1;
 80033de:	4a0d      	ldr	r2, [pc, #52]	@ (8003414 <main+0x160c>)
 80033e0:	2301      	movs	r3, #1
 80033e2:	7013      	strb	r3, [r2, #0]
 80033e4:	f7fe bd99 	b.w	8001f1a <main+0x112>
						}
					}
				} else {
					pen_delay_timer = micros();
 80033e8:	f000 feaa 	bl	8004140 <micros>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	490e      	ldr	r1, [pc, #56]	@ (800342c <main+0x1624>)
 80033f2:	e9c1 2300 	strd	r2, r3, [r1]
	while (1) {
 80033f6:	f7fe bd90 	b.w	8001f1a <main+0x112>
 80033fa:	bf00      	nop
 80033fc:	20000bcc 	.word	0x20000bcc
 8003400:	20001310 	.word	0x20001310
 8003404:	20000bce 	.word	0x20000bce
 8003408:	200013e0 	.word	0x200013e0
 800340c:	001e8480 	.word	0x001e8480
 8003410:	20000c3d 	.word	0x20000c3d
 8003414:	2000022c 	.word	0x2000022c
 8003418:	20000b94 	.word	0x20000b94
 800341c:	3fc90fdb 	.word	0x3fc90fdb
 8003420:	20000b98 	.word	0x20000b98
 8003424:	3f490fdb 	.word	0x3f490fdb
 8003428:	43160000 	.word	0x43160000
 800342c:	20001320 	.word	0x20001320
 8003430:	0007a120 	.word	0x0007a120

08003434 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003434:	b580      	push	{r7, lr}
 8003436:	b094      	sub	sp, #80	@ 0x50
 8003438:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800343a:	f107 0318 	add.w	r3, r7, #24
 800343e:	2238      	movs	r2, #56	@ 0x38
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f008 fc00 	bl	800bc48 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003448:	1d3b      	adds	r3, r7, #4
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	60da      	str	r2, [r3, #12]
 8003454:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003456:	2000      	movs	r0, #0
 8003458:	f002 ff3e 	bl	80062d8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800345c:	2302      	movs	r3, #2
 800345e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003460:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003464:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003466:	2340      	movs	r3, #64	@ 0x40
 8003468:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800346a:	2302      	movs	r3, #2
 800346c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800346e:	2302      	movs	r3, #2
 8003470:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003472:	2304      	movs	r3, #4
 8003474:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003476:	2355      	movs	r3, #85	@ 0x55
 8003478:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800347a:	2302      	movs	r3, #2
 800347c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800347e:	2302      	movs	r3, #2
 8003480:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003482:	2302      	movs	r3, #2
 8003484:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003486:	f107 0318 	add.w	r3, r7, #24
 800348a:	4618      	mov	r0, r3
 800348c:	f002 ffd8 	bl	8006440 <HAL_RCC_OscConfig>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <SystemClock_Config+0x66>
		Error_Handler();
 8003496:	f001 fd09 	bl	8004eac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800349a:	230f      	movs	r3, #15
 800349c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800349e:	2303      	movs	r3, #3
 80034a0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80034ae:	1d3b      	adds	r3, r7, #4
 80034b0:	2104      	movs	r1, #4
 80034b2:	4618      	mov	r0, r3
 80034b4:	f003 fad6 	bl	8006a64 <HAL_RCC_ClockConfig>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <SystemClock_Config+0x8e>
		Error_Handler();
 80034be:	f001 fcf5 	bl	8004eac <Error_Handler>
	}
}
 80034c2:	bf00      	nop
 80034c4:	3750      	adds	r7, #80	@ 0x50
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08c      	sub	sp, #48	@ 0x30
 80034d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80034d2:	f107 031c 	add.w	r3, r7, #28
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	60da      	str	r2, [r3, #12]
 80034e0:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80034e2:	f107 030c 	add.w	r3, r7, #12
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	605a      	str	r2, [r3, #4]
 80034ec:	609a      	str	r2, [r3, #8]
 80034ee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80034f0:	463b      	mov	r3, r7
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80034fa:	4b35      	ldr	r3, [pc, #212]	@ (80035d0 <MX_TIM1_Init+0x104>)
 80034fc:	4a35      	ldr	r2, [pc, #212]	@ (80035d4 <MX_TIM1_Init+0x108>)
 80034fe:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 8003500:	4b33      	ldr	r3, [pc, #204]	@ (80035d0 <MX_TIM1_Init+0x104>)
 8003502:	22a9      	movs	r2, #169	@ 0xa9
 8003504:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003506:	4b32      	ldr	r3, [pc, #200]	@ (80035d0 <MX_TIM1_Init+0x104>)
 8003508:	2200      	movs	r2, #0
 800350a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800350c:	4b30      	ldr	r3, [pc, #192]	@ (80035d0 <MX_TIM1_Init+0x104>)
 800350e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003512:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003514:	4b2e      	ldr	r3, [pc, #184]	@ (80035d0 <MX_TIM1_Init+0x104>)
 8003516:	2200      	movs	r2, #0
 8003518:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800351a:	4b2d      	ldr	r3, [pc, #180]	@ (80035d0 <MX_TIM1_Init+0x104>)
 800351c:	2200      	movs	r2, #0
 800351e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003520:	4b2b      	ldr	r3, [pc, #172]	@ (80035d0 <MX_TIM1_Init+0x104>)
 8003522:	2200      	movs	r2, #0
 8003524:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8003526:	482a      	ldr	r0, [pc, #168]	@ (80035d0 <MX_TIM1_Init+0x104>)
 8003528:	f004 f9d2 	bl	80078d0 <HAL_TIM_IC_Init>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <MX_TIM1_Init+0x6a>
		Error_Handler();
 8003532:	f001 fcbb 	bl	8004eac <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003536:	2304      	movs	r3, #4
 8003538:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800353a:	2360      	movs	r3, #96	@ 0x60
 800353c:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800353e:	2302      	movs	r3, #2
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003542:	2300      	movs	r3, #0
 8003544:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 800354a:	f107 031c 	add.w	r3, r7, #28
 800354e:	4619      	mov	r1, r3
 8003550:	481f      	ldr	r0, [pc, #124]	@ (80035d0 <MX_TIM1_Init+0x104>)
 8003552:	f005 f99d 	bl	8008890 <HAL_TIM_SlaveConfigSynchro>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <MX_TIM1_Init+0x94>
		Error_Handler();
 800355c:	f001 fca6 	bl	8004eac <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003564:	2302      	movs	r3, #2
 8003566:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003570:	f107 030c 	add.w	r3, r7, #12
 8003574:	2200      	movs	r2, #0
 8003576:	4619      	mov	r1, r3
 8003578:	4815      	ldr	r0, [pc, #84]	@ (80035d0 <MX_TIM1_Init+0x104>)
 800357a:	f004 fec2 	bl	8008302 <HAL_TIM_IC_ConfigChannel>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <MX_TIM1_Init+0xbc>
		Error_Handler();
 8003584:	f001 fc92 	bl	8004eac <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003588:	2302      	movs	r3, #2
 800358a:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800358c:	2301      	movs	r3, #1
 800358e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003590:	f107 030c 	add.w	r3, r7, #12
 8003594:	2204      	movs	r2, #4
 8003596:	4619      	mov	r1, r3
 8003598:	480d      	ldr	r0, [pc, #52]	@ (80035d0 <MX_TIM1_Init+0x104>)
 800359a:	f004 feb2 	bl	8008302 <HAL_TIM_IC_ConfigChannel>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_TIM1_Init+0xdc>
		Error_Handler();
 80035a4:	f001 fc82 	bl	8004eac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035a8:	2300      	movs	r3, #0
 80035aa:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035ac:	2300      	movs	r3, #0
 80035ae:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80035b4:	463b      	mov	r3, r7
 80035b6:	4619      	mov	r1, r3
 80035b8:	4805      	ldr	r0, [pc, #20]	@ (80035d0 <MX_TIM1_Init+0x104>)
 80035ba:	f006 fa85 	bl	8009ac8 <HAL_TIMEx_MasterConfigSynchronization>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 80035c4:	f001 fc72 	bl	8004eac <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80035c8:	bf00      	nop
 80035ca:	3730      	adds	r7, #48	@ 0x30
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	200002b0 	.word	0x200002b0
 80035d4:	40012c00 	.word	0x40012c00

080035d8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08c      	sub	sp, #48	@ 0x30
 80035dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80035de:	f107 031c 	add.w	r3, r7, #28
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	609a      	str	r2, [r3, #8]
 80035ea:	60da      	str	r2, [r3, #12]
 80035ec:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80035ee:	f107 030c 	add.w	r3, r7, #12
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	609a      	str	r2, [r3, #8]
 80035fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80035fc:	463b      	mov	r3, r7
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003606:	4b33      	ldr	r3, [pc, #204]	@ (80036d4 <MX_TIM2_Init+0xfc>)
 8003608:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800360c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 800360e:	4b31      	ldr	r3, [pc, #196]	@ (80036d4 <MX_TIM2_Init+0xfc>)
 8003610:	22a9      	movs	r2, #169	@ 0xa9
 8003612:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003614:	4b2f      	ldr	r3, [pc, #188]	@ (80036d4 <MX_TIM2_Init+0xfc>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800361a:	4b2e      	ldr	r3, [pc, #184]	@ (80036d4 <MX_TIM2_Init+0xfc>)
 800361c:	f04f 32ff 	mov.w	r2, #4294967295
 8003620:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003622:	4b2c      	ldr	r3, [pc, #176]	@ (80036d4 <MX_TIM2_Init+0xfc>)
 8003624:	2200      	movs	r2, #0
 8003626:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003628:	4b2a      	ldr	r3, [pc, #168]	@ (80036d4 <MX_TIM2_Init+0xfc>)
 800362a:	2200      	movs	r2, #0
 800362c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800362e:	4829      	ldr	r0, [pc, #164]	@ (80036d4 <MX_TIM2_Init+0xfc>)
 8003630:	f004 f94e 	bl	80078d0 <HAL_TIM_IC_Init>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_TIM2_Init+0x66>
		Error_Handler();
 800363a:	f001 fc37 	bl	8004eac <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800363e:	2304      	movs	r3, #4
 8003640:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003642:	2350      	movs	r3, #80	@ 0x50
 8003644:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003646:	2300      	movs	r3, #0
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800364a:	2300      	movs	r3, #0
 800364c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003652:	f107 031c 	add.w	r3, r7, #28
 8003656:	4619      	mov	r1, r3
 8003658:	481e      	ldr	r0, [pc, #120]	@ (80036d4 <MX_TIM2_Init+0xfc>)
 800365a:	f005 f919 	bl	8008890 <HAL_TIM_SlaveConfigSynchro>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <MX_TIM2_Init+0x90>
		Error_Handler();
 8003664:	f001 fc22 	bl	8004eac <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800366c:	2301      	movs	r3, #1
 800366e:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003678:	f107 030c 	add.w	r3, r7, #12
 800367c:	2200      	movs	r2, #0
 800367e:	4619      	mov	r1, r3
 8003680:	4814      	ldr	r0, [pc, #80]	@ (80036d4 <MX_TIM2_Init+0xfc>)
 8003682:	f004 fe3e 	bl	8008302 <HAL_TIM_IC_ConfigChannel>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_TIM2_Init+0xb8>
		Error_Handler();
 800368c:	f001 fc0e 	bl	8004eac <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003690:	2302      	movs	r3, #2
 8003692:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003694:	2302      	movs	r3, #2
 8003696:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003698:	f107 030c 	add.w	r3, r7, #12
 800369c:	2204      	movs	r2, #4
 800369e:	4619      	mov	r1, r3
 80036a0:	480c      	ldr	r0, [pc, #48]	@ (80036d4 <MX_TIM2_Init+0xfc>)
 80036a2:	f004 fe2e 	bl	8008302 <HAL_TIM_IC_ConfigChannel>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_TIM2_Init+0xd8>
		Error_Handler();
 80036ac:	f001 fbfe 	bl	8004eac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036b0:	2300      	movs	r3, #0
 80036b2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80036b8:	463b      	mov	r3, r7
 80036ba:	4619      	mov	r1, r3
 80036bc:	4805      	ldr	r0, [pc, #20]	@ (80036d4 <MX_TIM2_Init+0xfc>)
 80036be:	f006 fa03 	bl	8009ac8 <HAL_TIMEx_MasterConfigSynchronization>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_TIM2_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 80036c8:	f001 fbf0 	bl	8004eac <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80036cc:	bf00      	nop
 80036ce:	3730      	adds	r7, #48	@ 0x30
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	2000037c 	.word	0x2000037c

080036d8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08c      	sub	sp, #48	@ 0x30
 80036dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80036de:	f107 030c 	add.w	r3, r7, #12
 80036e2:	2224      	movs	r2, #36	@ 0x24
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f008 faae 	bl	800bc48 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80036ec:	463b      	mov	r3, r7
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	605a      	str	r2, [r3, #4]
 80036f4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80036f6:	4b21      	ldr	r3, [pc, #132]	@ (800377c <MX_TIM3_Init+0xa4>)
 80036f8:	4a21      	ldr	r2, [pc, #132]	@ (8003780 <MX_TIM3_Init+0xa8>)
 80036fa:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80036fc:	4b1f      	ldr	r3, [pc, #124]	@ (800377c <MX_TIM3_Init+0xa4>)
 80036fe:	2200      	movs	r2, #0
 8003700:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003702:	4b1e      	ldr	r3, [pc, #120]	@ (800377c <MX_TIM3_Init+0xa4>)
 8003704:	2200      	movs	r2, #0
 8003706:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003708:	4b1c      	ldr	r3, [pc, #112]	@ (800377c <MX_TIM3_Init+0xa4>)
 800370a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800370e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003710:	4b1a      	ldr	r3, [pc, #104]	@ (800377c <MX_TIM3_Init+0xa4>)
 8003712:	2200      	movs	r2, #0
 8003714:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003716:	4b19      	ldr	r3, [pc, #100]	@ (800377c <MX_TIM3_Init+0xa4>)
 8003718:	2200      	movs	r2, #0
 800371a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800371c:	2303      	movs	r3, #3
 800371e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003720:	2300      	movs	r3, #0
 8003722:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003724:	2301      	movs	r3, #1
 8003726:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003728:	2300      	movs	r3, #0
 800372a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 800372c:	2304      	movs	r3, #4
 800372e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003730:	2300      	movs	r3, #0
 8003732:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003734:	2301      	movs	r3, #1
 8003736:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003738:	2300      	movs	r3, #0
 800373a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 800373c:	2304      	movs	r3, #4
 800373e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8003740:	f107 030c 	add.w	r3, r7, #12
 8003744:	4619      	mov	r1, r3
 8003746:	480d      	ldr	r0, [pc, #52]	@ (800377c <MX_TIM3_Init+0xa4>)
 8003748:	f004 fb20 	bl	8007d8c <HAL_TIM_Encoder_Init>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_TIM3_Init+0x7e>
		Error_Handler();
 8003752:	f001 fbab 	bl	8004eac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800375e:	463b      	mov	r3, r7
 8003760:	4619      	mov	r1, r3
 8003762:	4806      	ldr	r0, [pc, #24]	@ (800377c <MX_TIM3_Init+0xa4>)
 8003764:	f006 f9b0 	bl	8009ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800376e:	f001 fb9d 	bl	8004eac <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003772:	bf00      	nop
 8003774:	3730      	adds	r7, #48	@ 0x30
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000448 	.word	0x20000448
 8003780:	40000400 	.word	0x40000400

08003784 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b08c      	sub	sp, #48	@ 0x30
 8003788:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800378a:	f107 030c 	add.w	r3, r7, #12
 800378e:	2224      	movs	r2, #36	@ 0x24
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f008 fa58 	bl	800bc48 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003798:	463b      	mov	r3, r7
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	605a      	str	r2, [r3, #4]
 80037a0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80037a2:	4b21      	ldr	r3, [pc, #132]	@ (8003828 <MX_TIM4_Init+0xa4>)
 80037a4:	4a21      	ldr	r2, [pc, #132]	@ (800382c <MX_TIM4_Init+0xa8>)
 80037a6:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80037a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003828 <MX_TIM4_Init+0xa4>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003828 <MX_TIM4_Init+0xa4>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80037b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003828 <MX_TIM4_Init+0xa4>)
 80037b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037ba:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003828 <MX_TIM4_Init+0xa4>)
 80037be:	2200      	movs	r2, #0
 80037c0:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037c2:	4b19      	ldr	r3, [pc, #100]	@ (8003828 <MX_TIM4_Init+0xa4>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037c8:	2303      	movs	r3, #3
 80037ca:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037cc:	2300      	movs	r3, #0
 80037ce:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037d0:	2301      	movs	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 80037d8:	2304      	movs	r3, #4
 80037da:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037dc:	2300      	movs	r3, #0
 80037de:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037e0:	2301      	movs	r3, #1
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037e4:	2300      	movs	r3, #0
 80037e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 80037e8:	2304      	movs	r3, #4
 80037ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	4619      	mov	r1, r3
 80037f2:	480d      	ldr	r0, [pc, #52]	@ (8003828 <MX_TIM4_Init+0xa4>)
 80037f4:	f004 faca 	bl	8007d8c <HAL_TIM_Encoder_Init>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <MX_TIM4_Init+0x7e>
		Error_Handler();
 80037fe:	f001 fb55 	bl	8004eac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800380a:	463b      	mov	r3, r7
 800380c:	4619      	mov	r1, r3
 800380e:	4806      	ldr	r0, [pc, #24]	@ (8003828 <MX_TIM4_Init+0xa4>)
 8003810:	f006 f95a 	bl	8009ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800381a:	f001 fb47 	bl	8004eac <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800381e:	bf00      	nop
 8003820:	3730      	adds	r7, #48	@ 0x30
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000514 	.word	0x20000514
 800382c:	40000800 	.word	0x40000800

08003830 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003836:	f107 0310 	add.w	r3, r7, #16
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003844:	1d3b      	adds	r3, r7, #4
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800384e:	4b1d      	ldr	r3, [pc, #116]	@ (80038c4 <MX_TIM5_Init+0x94>)
 8003850:	4a1d      	ldr	r2, [pc, #116]	@ (80038c8 <MX_TIM5_Init+0x98>)
 8003852:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 8003854:	4b1b      	ldr	r3, [pc, #108]	@ (80038c4 <MX_TIM5_Init+0x94>)
 8003856:	22a9      	movs	r2, #169	@ 0xa9
 8003858:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800385a:	4b1a      	ldr	r3, [pc, #104]	@ (80038c4 <MX_TIM5_Init+0x94>)
 800385c:	2200      	movs	r2, #0
 800385e:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003860:	4b18      	ldr	r3, [pc, #96]	@ (80038c4 <MX_TIM5_Init+0x94>)
 8003862:	f04f 32ff 	mov.w	r2, #4294967295
 8003866:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003868:	4b16      	ldr	r3, [pc, #88]	@ (80038c4 <MX_TIM5_Init+0x94>)
 800386a:	2200      	movs	r2, #0
 800386c:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <MX_TIM5_Init+0x94>)
 8003870:	2200      	movs	r2, #0
 8003872:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003874:	4813      	ldr	r0, [pc, #76]	@ (80038c4 <MX_TIM5_Init+0x94>)
 8003876:	f003 fd5f 	bl	8007338 <HAL_TIM_Base_Init>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <MX_TIM5_Init+0x54>
		Error_Handler();
 8003880:	f001 fb14 	bl	8004eac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003884:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003888:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 800388a:	f107 0310 	add.w	r3, r7, #16
 800388e:	4619      	mov	r1, r3
 8003890:	480c      	ldr	r0, [pc, #48]	@ (80038c4 <MX_TIM5_Init+0x94>)
 8003892:	f004 fee7 	bl	8008664 <HAL_TIM_ConfigClockSource>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <MX_TIM5_Init+0x70>
		Error_Handler();
 800389c:	f001 fb06 	bl	8004eac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a0:	2300      	movs	r3, #0
 80038a2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	4619      	mov	r1, r3
 80038ac:	4805      	ldr	r0, [pc, #20]	@ (80038c4 <MX_TIM5_Init+0x94>)
 80038ae:	f006 f90b 	bl	8009ac8 <HAL_TIMEx_MasterConfigSynchronization>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80038b8:	f001 faf8 	bl	8004eac <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80038bc:	bf00      	nop
 80038be:	3720      	adds	r7, #32
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	200005e0 	.word	0x200005e0
 80038c8:	40000c00 	.word	0x40000c00

080038cc <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b09c      	sub	sp, #112	@ 0x70
 80038d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80038d2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	605a      	str	r2, [r3, #4]
 80038dc:	609a      	str	r2, [r3, #8]
 80038de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80038e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80038ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	609a      	str	r2, [r3, #8]
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	611a      	str	r2, [r3, #16]
 80038fc:	615a      	str	r2, [r3, #20]
 80038fe:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003900:	1d3b      	adds	r3, r7, #4
 8003902:	2234      	movs	r2, #52	@ 0x34
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f008 f99e 	bl	800bc48 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800390c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a3c <MX_TIM8_Init+0x170>)
 800390e:	4a4c      	ldr	r2, [pc, #304]	@ (8003a40 <MX_TIM8_Init+0x174>)
 8003910:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 8003912:	4b4a      	ldr	r3, [pc, #296]	@ (8003a3c <MX_TIM8_Init+0x170>)
 8003914:	22a9      	movs	r2, #169	@ 0xa9
 8003916:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003918:	4b48      	ldr	r3, [pc, #288]	@ (8003a3c <MX_TIM8_Init+0x170>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 100;
 800391e:	4b47      	ldr	r3, [pc, #284]	@ (8003a3c <MX_TIM8_Init+0x170>)
 8003920:	2264      	movs	r2, #100	@ 0x64
 8003922:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003924:	4b45      	ldr	r3, [pc, #276]	@ (8003a3c <MX_TIM8_Init+0x170>)
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800392a:	4b44      	ldr	r3, [pc, #272]	@ (8003a3c <MX_TIM8_Init+0x170>)
 800392c:	2200      	movs	r2, #0
 800392e:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003930:	4b42      	ldr	r3, [pc, #264]	@ (8003a3c <MX_TIM8_Init+0x170>)
 8003932:	2200      	movs	r2, #0
 8003934:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8003936:	4841      	ldr	r0, [pc, #260]	@ (8003a3c <MX_TIM8_Init+0x170>)
 8003938:	f003 fcfe 	bl	8007338 <HAL_TIM_Base_Init>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <MX_TIM8_Init+0x7a>
		Error_Handler();
 8003942:	f001 fab3 	bl	8004eac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003946:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800394a:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 800394c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003950:	4619      	mov	r1, r3
 8003952:	483a      	ldr	r0, [pc, #232]	@ (8003a3c <MX_TIM8_Init+0x170>)
 8003954:	f004 fe86 	bl	8008664 <HAL_TIM_ConfigClockSource>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <MX_TIM8_Init+0x96>
		Error_Handler();
 800395e:	f001 faa5 	bl	8004eac <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8003962:	4836      	ldr	r0, [pc, #216]	@ (8003a3c <MX_TIM8_Init+0x170>)
 8003964:	f003 fe34 	bl	80075d0 <HAL_TIM_PWM_Init>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <MX_TIM8_Init+0xa6>
		Error_Handler();
 800396e:	f001 fa9d 	bl	8004eac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003972:	2300      	movs	r3, #0
 8003974:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003976:	2300      	movs	r3, #0
 8003978:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800397a:	2300      	movs	r3, #0
 800397c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800397e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003982:	4619      	mov	r1, r3
 8003984:	482d      	ldr	r0, [pc, #180]	@ (8003a3c <MX_TIM8_Init+0x170>)
 8003986:	f006 f89f 	bl	8009ac8 <HAL_TIMEx_MasterConfigSynchronization>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_TIM8_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8003990:	f001 fa8c 	bl	8004eac <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003994:	2360      	movs	r3, #96	@ 0x60
 8003996:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 100;
 8003998:	2364      	movs	r3, #100	@ 0x64
 800399a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800399c:	2300      	movs	r3, #0
 800399e:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039a0:	2300      	movs	r3, #0
 80039a2:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039a8:	2300      	movs	r3, #0
 80039aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039ac:	2300      	movs	r3, #0
 80039ae:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 80039b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80039b4:	2208      	movs	r2, #8
 80039b6:	4619      	mov	r1, r3
 80039b8:	4820      	ldr	r0, [pc, #128]	@ (8003a3c <MX_TIM8_Init+0x170>)
 80039ba:	f004 fd3f 	bl	800843c <HAL_TIM_PWM_ConfigChannel>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_TIM8_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 80039c4:	f001 fa72 	bl	8004eac <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 80039c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80039cc:	220c      	movs	r2, #12
 80039ce:	4619      	mov	r1, r3
 80039d0:	481a      	ldr	r0, [pc, #104]	@ (8003a3c <MX_TIM8_Init+0x170>)
 80039d2:	f004 fd33 	bl	800843c <HAL_TIM_PWM_ConfigChannel>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <MX_TIM8_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 80039dc:	f001 fa66 	bl	8004eac <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039f8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80039fe:	2300      	movs	r3, #0
 8003a00:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003a06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003a10:	2300      	movs	r3, #0
 8003a12:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a14:	2300      	movs	r3, #0
 8003a16:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4807      	ldr	r0, [pc, #28]	@ (8003a3c <MX_TIM8_Init+0x170>)
 8003a1e:	f006 f8e9 	bl	8009bf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_TIM8_Init+0x160>
			!= HAL_OK) {
		Error_Handler();
 8003a28:	f001 fa40 	bl	8004eac <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8003a2c:	4803      	ldr	r0, [pc, #12]	@ (8003a3c <MX_TIM8_Init+0x170>)
 8003a2e:	f001 fbd1 	bl	80051d4 <HAL_TIM_MspPostInit>

}
 8003a32:	bf00      	nop
 8003a34:	3770      	adds	r7, #112	@ 0x70
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200006ac 	.word	0x200006ac
 8003a40:	40013400 	.word	0x40013400

08003a44 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b09c      	sub	sp, #112	@ 0x70
 8003a48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003a4a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	609a      	str	r2, [r3, #8]
 8003a56:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003a58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003a64:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
 8003a74:	615a      	str	r2, [r3, #20]
 8003a76:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003a78:	1d3b      	adds	r3, r7, #4
 8003a7a:	2234      	movs	r2, #52	@ 0x34
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f008 f8e2 	bl	800bc48 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8003a84:	4b3f      	ldr	r3, [pc, #252]	@ (8003b84 <MX_TIM15_Init+0x140>)
 8003a86:	4a40      	ldr	r2, [pc, #256]	@ (8003b88 <MX_TIM15_Init+0x144>)
 8003a88:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 169;
 8003a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b84 <MX_TIM15_Init+0x140>)
 8003a8c:	22a9      	movs	r2, #169	@ 0xa9
 8003a8e:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a90:	4b3c      	ldr	r3, [pc, #240]	@ (8003b84 <MX_TIM15_Init+0x140>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 20000;
 8003a96:	4b3b      	ldr	r3, [pc, #236]	@ (8003b84 <MX_TIM15_Init+0x140>)
 8003a98:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8003a9c:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a9e:	4b39      	ldr	r3, [pc, #228]	@ (8003b84 <MX_TIM15_Init+0x140>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8003aa4:	4b37      	ldr	r3, [pc, #220]	@ (8003b84 <MX_TIM15_Init+0x140>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aaa:	4b36      	ldr	r3, [pc, #216]	@ (8003b84 <MX_TIM15_Init+0x140>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8003ab0:	4834      	ldr	r0, [pc, #208]	@ (8003b84 <MX_TIM15_Init+0x140>)
 8003ab2:	f003 fc41 	bl	8007338 <HAL_TIM_Base_Init>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_TIM15_Init+0x7c>
		Error_Handler();
 8003abc:	f001 f9f6 	bl	8004eac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ac0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ac4:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 8003ac6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003aca:	4619      	mov	r1, r3
 8003acc:	482d      	ldr	r0, [pc, #180]	@ (8003b84 <MX_TIM15_Init+0x140>)
 8003ace:	f004 fdc9 	bl	8008664 <HAL_TIM_ConfigClockSource>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <MX_TIM15_Init+0x98>
		Error_Handler();
 8003ad8:	f001 f9e8 	bl	8004eac <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8003adc:	4829      	ldr	r0, [pc, #164]	@ (8003b84 <MX_TIM15_Init+0x140>)
 8003ade:	f003 fd77 	bl	80075d0 <HAL_TIM_PWM_Init>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <MX_TIM15_Init+0xa8>
		Error_Handler();
 8003ae8:	f001 f9e0 	bl	8004eac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aec:	2300      	movs	r3, #0
 8003aee:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8003af4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003af8:	4619      	mov	r1, r3
 8003afa:	4822      	ldr	r0, [pc, #136]	@ (8003b84 <MX_TIM15_Init+0x140>)
 8003afc:	f005 ffe4 	bl	8009ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <MX_TIM15_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8003b06:	f001 f9d1 	bl	8004eac <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b0a:	2360      	movs	r3, #96	@ 0x60
 8003b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b12:	2300      	movs	r3, #0
 8003b14:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b16:	2300      	movs	r3, #0
 8003b18:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b22:	2300      	movs	r3, #0
 8003b24:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 8003b26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4815      	ldr	r0, [pc, #84]	@ (8003b84 <MX_TIM15_Init+0x140>)
 8003b30:	f004 fc84 	bl	800843c <HAL_TIM_PWM_ConfigChannel>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM15_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8003b3a:	f001 f9b7 	bl	8004eac <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b56:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 8003b60:	1d3b      	adds	r3, r7, #4
 8003b62:	4619      	mov	r1, r3
 8003b64:	4807      	ldr	r0, [pc, #28]	@ (8003b84 <MX_TIM15_Init+0x140>)
 8003b66:	f006 f845 	bl	8009bf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <MX_TIM15_Init+0x130>
			!= HAL_OK) {
		Error_Handler();
 8003b70:	f001 f99c 	bl	8004eac <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8003b74:	4803      	ldr	r0, [pc, #12]	@ (8003b84 <MX_TIM15_Init+0x140>)
 8003b76:	f001 fb2d 	bl	80051d4 <HAL_TIM_MspPostInit>

}
 8003b7a:	bf00      	nop
 8003b7c:	3770      	adds	r7, #112	@ 0x70
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000778 	.word	0x20000778
 8003b88:	40014000 	.word	0x40014000

08003b8c <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8003b90:	4b14      	ldr	r3, [pc, #80]	@ (8003be4 <MX_TIM16_Init+0x58>)
 8003b92:	4a15      	ldr	r2, [pc, #84]	@ (8003be8 <MX_TIM16_Init+0x5c>)
 8003b94:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 8003b96:	4b13      	ldr	r3, [pc, #76]	@ (8003be4 <MX_TIM16_Init+0x58>)
 8003b98:	22a9      	movs	r2, #169	@ 0xa9
 8003b9a:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b9c:	4b11      	ldr	r3, [pc, #68]	@ (8003be4 <MX_TIM16_Init+0x58>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 8003ba2:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <MX_TIM16_Init+0x58>)
 8003ba4:	f240 4279 	movw	r2, #1145	@ 0x479
 8003ba8:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003baa:	4b0e      	ldr	r3, [pc, #56]	@ (8003be4 <MX_TIM16_Init+0x58>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003be4 <MX_TIM16_Init+0x58>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <MX_TIM16_Init+0x58>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8003bbc:	4809      	ldr	r0, [pc, #36]	@ (8003be4 <MX_TIM16_Init+0x58>)
 8003bbe:	f003 fbbb 	bl	8007338 <HAL_TIM_Base_Init>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_TIM16_Init+0x40>
		Error_Handler();
 8003bc8:	f001 f970 	bl	8004eac <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 8003bcc:	2108      	movs	r1, #8
 8003bce:	4805      	ldr	r0, [pc, #20]	@ (8003be4 <MX_TIM16_Init+0x58>)
 8003bd0:	f003 ffe6 	bl	8007ba0 <HAL_TIM_OnePulse_Init>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <MX_TIM16_Init+0x52>
		Error_Handler();
 8003bda:	f001 f967 	bl	8004eac <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000844 	.word	0x20000844
 8003be8:	40014400 	.word	0x40014400

08003bec <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003bf0:	4b23      	ldr	r3, [pc, #140]	@ (8003c80 <MX_USART2_UART_Init+0x94>)
 8003bf2:	4a24      	ldr	r2, [pc, #144]	@ (8003c84 <MX_USART2_UART_Init+0x98>)
 8003bf4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003bf6:	4b22      	ldr	r3, [pc, #136]	@ (8003c80 <MX_USART2_UART_Init+0x94>)
 8003bf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003bfc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003bfe:	4b20      	ldr	r3, [pc, #128]	@ (8003c80 <MX_USART2_UART_Init+0x94>)
 8003c00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c04:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003c06:	4b1e      	ldr	r3, [pc, #120]	@ (8003c80 <MX_USART2_UART_Init+0x94>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8003c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003c80 <MX_USART2_UART_Init+0x94>)
 8003c0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c12:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003c14:	4b1a      	ldr	r3, [pc, #104]	@ (8003c80 <MX_USART2_UART_Init+0x94>)
 8003c16:	220c      	movs	r2, #12
 8003c18:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c1a:	4b19      	ldr	r3, [pc, #100]	@ (8003c80 <MX_USART2_UART_Init+0x94>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c20:	4b17      	ldr	r3, [pc, #92]	@ (8003c80 <MX_USART2_UART_Init+0x94>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c26:	4b16      	ldr	r3, [pc, #88]	@ (8003c80 <MX_USART2_UART_Init+0x94>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c2c:	4b14      	ldr	r3, [pc, #80]	@ (8003c80 <MX_USART2_UART_Init+0x94>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c32:	4b13      	ldr	r3, [pc, #76]	@ (8003c80 <MX_USART2_UART_Init+0x94>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003c38:	4811      	ldr	r0, [pc, #68]	@ (8003c80 <MX_USART2_UART_Init+0x94>)
 8003c3a:	f006 f8bf 	bl	8009dbc <HAL_UART_Init>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 8003c44:	f001 f932 	bl	8004eac <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8003c48:	2100      	movs	r1, #0
 8003c4a:	480d      	ldr	r0, [pc, #52]	@ (8003c80 <MX_USART2_UART_Init+0x94>)
 8003c4c:	f007 fefb 	bl	800ba46 <HAL_UARTEx_SetTxFifoThreshold>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 8003c56:	f001 f929 	bl	8004eac <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4808      	ldr	r0, [pc, #32]	@ (8003c80 <MX_USART2_UART_Init+0x94>)
 8003c5e:	f007 ff30 	bl	800bac2 <HAL_UARTEx_SetRxFifoThreshold>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 8003c68:	f001 f920 	bl	8004eac <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8003c6c:	4804      	ldr	r0, [pc, #16]	@ (8003c80 <MX_USART2_UART_Init+0x94>)
 8003c6e:	f007 feb1 	bl	800b9d4 <HAL_UARTEx_DisableFifoMode>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <MX_USART2_UART_Init+0x90>
		Error_Handler();
 8003c78:	f001 f918 	bl	8004eac <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003c7c:	bf00      	nop
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20000910 	.word	0x20000910
 8003c84:	40004400 	.word	0x40004400

08003c88 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003c8e:	4b16      	ldr	r3, [pc, #88]	@ (8003ce8 <MX_DMA_Init+0x60>)
 8003c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c92:	4a15      	ldr	r2, [pc, #84]	@ (8003ce8 <MX_DMA_Init+0x60>)
 8003c94:	f043 0304 	orr.w	r3, r3, #4
 8003c98:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c9a:	4b13      	ldr	r3, [pc, #76]	@ (8003ce8 <MX_DMA_Init+0x60>)
 8003c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	607b      	str	r3, [r7, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003ca6:	4b10      	ldr	r3, [pc, #64]	@ (8003ce8 <MX_DMA_Init+0x60>)
 8003ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003caa:	4a0f      	ldr	r2, [pc, #60]	@ (8003ce8 <MX_DMA_Init+0x60>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6493      	str	r3, [r2, #72]	@ 0x48
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce8 <MX_DMA_Init+0x60>)
 8003cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	200b      	movs	r0, #11
 8003cc4:	f001 fdd7 	bl	8005876 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003cc8:	200b      	movs	r0, #11
 8003cca:	f001 fdee 	bl	80058aa <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	200c      	movs	r0, #12
 8003cd4:	f001 fdcf 	bl	8005876 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003cd8:	200c      	movs	r0, #12
 8003cda:	f001 fde6 	bl	80058aa <HAL_NVIC_EnableIRQ>

}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000

08003cec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	@ 0x28
 8003cf0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003cf2:	f107 0314 	add.w	r3, r7, #20
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	605a      	str	r2, [r3, #4]
 8003cfc:	609a      	str	r2, [r3, #8]
 8003cfe:	60da      	str	r2, [r3, #12]
 8003d00:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003d02:	4b7a      	ldr	r3, [pc, #488]	@ (8003eec <MX_GPIO_Init+0x200>)
 8003d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d06:	4a79      	ldr	r2, [pc, #484]	@ (8003eec <MX_GPIO_Init+0x200>)
 8003d08:	f043 0304 	orr.w	r3, r3, #4
 8003d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d0e:	4b77      	ldr	r3, [pc, #476]	@ (8003eec <MX_GPIO_Init+0x200>)
 8003d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003d1a:	4b74      	ldr	r3, [pc, #464]	@ (8003eec <MX_GPIO_Init+0x200>)
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1e:	4a73      	ldr	r2, [pc, #460]	@ (8003eec <MX_GPIO_Init+0x200>)
 8003d20:	f043 0320 	orr.w	r3, r3, #32
 8003d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d26:	4b71      	ldr	r3, [pc, #452]	@ (8003eec <MX_GPIO_Init+0x200>)
 8003d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003d32:	4b6e      	ldr	r3, [pc, #440]	@ (8003eec <MX_GPIO_Init+0x200>)
 8003d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d36:	4a6d      	ldr	r2, [pc, #436]	@ (8003eec <MX_GPIO_Init+0x200>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d3e:	4b6b      	ldr	r3, [pc, #428]	@ (8003eec <MX_GPIO_Init+0x200>)
 8003d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003d4a:	4b68      	ldr	r3, [pc, #416]	@ (8003eec <MX_GPIO_Init+0x200>)
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4e:	4a67      	ldr	r2, [pc, #412]	@ (8003eec <MX_GPIO_Init+0x200>)
 8003d50:	f043 0302 	orr.w	r3, r3, #2
 8003d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d56:	4b65      	ldr	r3, [pc, #404]	@ (8003eec <MX_GPIO_Init+0x200>)
 8003d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	607b      	str	r3, [r7, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003d62:	2200      	movs	r2, #0
 8003d64:	2120      	movs	r1, #32
 8003d66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d6a:	f002 fa85 	bl	8006278 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12,
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8003d74:	485e      	ldr	r0, [pc, #376]	@ (8003ef0 <MX_GPIO_Init+0x204>)
 8003d76:	f002 fa7f 	bl	8006278 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003d7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d88:	f107 0314 	add.w	r3, r7, #20
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4858      	ldr	r0, [pc, #352]	@ (8003ef0 <MX_GPIO_Init+0x204>)
 8003d90:	f002 f8d8 	bl	8005f44 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 8003d94:	230d      	movs	r3, #13
 8003d96:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003d98:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003d9c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003da2:	f107 0314 	add.w	r3, r7, #20
 8003da6:	4619      	mov	r1, r3
 8003da8:	4851      	ldr	r0, [pc, #324]	@ (8003ef0 <MX_GPIO_Init+0x204>)
 8003daa:	f002 f8cb 	bl	8005f44 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8003dae:	2320      	movs	r3, #32
 8003db0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003db2:	2301      	movs	r3, #1
 8003db4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003dbe:	f107 0314 	add.w	r3, r7, #20
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dc8:	f002 f8bc 	bl	8005f44 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12;
 8003dcc:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 8003dd0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dde:	f107 0314 	add.w	r3, r7, #20
 8003de2:	4619      	mov	r1, r3
 8003de4:	4842      	ldr	r0, [pc, #264]	@ (8003ef0 <MX_GPIO_Init+0x204>)
 8003de6:	f002 f8ad 	bl	8005f44 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11;
 8003dea:	f640 0304 	movw	r3, #2052	@ 0x804
 8003dee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df8:	f107 0314 	add.w	r3, r7, #20
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	483d      	ldr	r0, [pc, #244]	@ (8003ef4 <MX_GPIO_Init+0x208>)
 8003e00:	f002 f8a0 	bl	8005f44 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8003e04:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003e08:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003e0a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003e0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e10:	2302      	movs	r3, #2
 8003e12:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e14:	f107 0314 	add.w	r3, r7, #20
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4836      	ldr	r0, [pc, #216]	@ (8003ef4 <MX_GPIO_Init+0x208>)
 8003e1c:	f002 f892 	bl	8005f44 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e24:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e26:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003e2a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e30:	f107 0314 	add.w	r3, r7, #20
 8003e34:	4619      	mov	r1, r3
 8003e36:	482f      	ldr	r0, [pc, #188]	@ (8003ef4 <MX_GPIO_Init+0x208>)
 8003e38:	f002 f884 	bl	8005f44 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e40:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003e46:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e4c:	f107 0314 	add.w	r3, r7, #20
 8003e50:	4619      	mov	r1, r3
 8003e52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e56:	f002 f875 	bl	8005f44 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e5e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003e64:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e66:	2302      	movs	r3, #2
 8003e68:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e6a:	f107 0314 	add.w	r3, r7, #20
 8003e6e:	4619      	mov	r1, r3
 8003e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e74:	f002 f866 	bl	8005f44 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e7c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003e82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e84:	2302      	movs	r3, #2
 8003e86:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e88:	f107 0314 	add.w	r3, r7, #20
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4818      	ldr	r0, [pc, #96]	@ (8003ef0 <MX_GPIO_Init+0x204>)
 8003e90:	f002 f858 	bl	8005f44 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003e94:	2200      	movs	r2, #0
 8003e96:	2100      	movs	r1, #0
 8003e98:	2006      	movs	r0, #6
 8003e9a:	f001 fcec 	bl	8005876 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003e9e:	2006      	movs	r0, #6
 8003ea0:	f001 fd03 	bl	80058aa <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	2008      	movs	r0, #8
 8003eaa:	f001 fce4 	bl	8005876 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003eae:	2008      	movs	r0, #8
 8003eb0:	f001 fcfb 	bl	80058aa <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	2009      	movs	r0, #9
 8003eba:	f001 fcdc 	bl	8005876 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003ebe:	2009      	movs	r0, #9
 8003ec0:	f001 fcf3 	bl	80058aa <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	2017      	movs	r0, #23
 8003eca:	f001 fcd4 	bl	8005876 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003ece:	2017      	movs	r0, #23
 8003ed0:	f001 fceb 	bl	80058aa <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	2028      	movs	r0, #40	@ 0x28
 8003eda:	f001 fccc 	bl	8005876 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ede:	2028      	movs	r0, #40	@ 0x28
 8003ee0:	f001 fce3 	bl	80058aa <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003ee4:	bf00      	nop
 8003ee6:	3728      	adds	r7, #40	@ 0x28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	48000800 	.word	0x48000800
 8003ef4:	48000400 	.word	0x48000400

08003ef8 <map>:

/* USER CODE BEGIN 4 */
float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	ed87 0a05 	vstr	s0, [r7, #20]
 8003f02:	edc7 0a04 	vstr	s1, [r7, #16]
 8003f06:	ed87 1a03 	vstr	s2, [r7, #12]
 8003f0a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003f0e:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003f12:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f16:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f1e:	edd7 6a01 	vldr	s13, [r7, #4]
 8003f22:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f26:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f2a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003f2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f32:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f42:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003f46:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <DWT_Init>:

void DWT_Init(void) {
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003f58:	4b08      	ldr	r3, [pc, #32]	@ (8003f7c <DWT_Init+0x28>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a07      	ldr	r2, [pc, #28]	@ (8003f7c <DWT_Init+0x28>)
 8003f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f62:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003f64:	4b06      	ldr	r3, [pc, #24]	@ (8003f80 <DWT_Init+0x2c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a05      	ldr	r2, [pc, #20]	@ (8003f80 <DWT_Init+0x2c>)
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	6013      	str	r3, [r2, #0]
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	e000edf0 	.word	0xe000edf0
 8003f80:	e0001000 	.word	0xe0001000

08003f84 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f94:	d10e      	bne.n	8003fb4 <HAL_GPIO_EXTI_Callback+0x30>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 8003f96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f9e:	f002 f953 	bl	8006248 <HAL_GPIO_ReadPin>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d105      	bne.n	8003fb4 <HAL_GPIO_EXTI_Callback+0x30>
			Z_index_R += 1;
 8003fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80040d8 <HAL_GPIO_EXTI_Callback+0x154>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	3301      	adds	r3, #1
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	4b49      	ldr	r3, [pc, #292]	@ (80040d8 <HAL_GPIO_EXTI_Callback+0x154>)
 8003fb2:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_10) {
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fba:	d10d      	bne.n	8003fd8 <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8003fbc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003fc0:	4846      	ldr	r0, [pc, #280]	@ (80040dc <HAL_GPIO_EXTI_Callback+0x158>)
 8003fc2:	f002 f941 	bl	8006248 <HAL_GPIO_ReadPin>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d105      	bne.n	8003fd8 <HAL_GPIO_EXTI_Callback+0x54>
			Mode = 0;
 8003fcc:	4b44      	ldr	r3, [pc, #272]	@ (80040e0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 8003fd2:	4b44      	ldr	r3, [pc, #272]	@ (80040e4 <HAL_GPIO_EXTI_Callback+0x160>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fde:	d10e      	bne.n	8003ffe <HAL_GPIO_EXTI_Callback+0x7a>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 8003fe0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fe4:	4840      	ldr	r0, [pc, #256]	@ (80040e8 <HAL_GPIO_EXTI_Callback+0x164>)
 8003fe6:	f002 f92f 	bl	8006248 <HAL_GPIO_ReadPin>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d103      	bne.n	8003ff8 <HAL_GPIO_EXTI_Callback+0x74>
			P_Limit = 1;
 8003ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80040ec <HAL_GPIO_EXTI_Callback+0x168>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	e002      	b.n	8003ffe <HAL_GPIO_EXTI_Callback+0x7a>
		} else {
			P_Limit = 0;
 8003ff8:	4b3c      	ldr	r3, [pc, #240]	@ (80040ec <HAL_GPIO_EXTI_Callback+0x168>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004004:	d10e      	bne.n	8004024 <HAL_GPIO_EXTI_Callback+0xa0>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1) {
 8004006:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800400a:	4837      	ldr	r0, [pc, #220]	@ (80040e8 <HAL_GPIO_EXTI_Callback+0x164>)
 800400c:	f002 f91c 	bl	8006248 <HAL_GPIO_ReadPin>
 8004010:	4603      	mov	r3, r0
 8004012:	2b01      	cmp	r3, #1
 8004014:	d103      	bne.n	800401e <HAL_GPIO_EXTI_Callback+0x9a>
			R_Limit = 1;
 8004016:	4b36      	ldr	r3, [pc, #216]	@ (80040f0 <HAL_GPIO_EXTI_Callback+0x16c>)
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
 800401c:	e002      	b.n	8004024 <HAL_GPIO_EXTI_Callback+0xa0>
		} else {
			R_Limit = 0;
 800401e:	4b34      	ldr	r3, [pc, #208]	@ (80040f0 <HAL_GPIO_EXTI_Callback+0x16c>)
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15) {
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800402a:	d102      	bne.n	8004032 <HAL_GPIO_EXTI_Callback+0xae>
		EmergencyState = 0;
 800402c:	4b2d      	ldr	r3, [pc, #180]	@ (80040e4 <HAL_GPIO_EXTI_Callback+0x160>)
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t state[3] = { 0 }; // 0 = waiting for rise, 1 = waiting for fall

	uint32_t now = DWT->CYCCNT;
 8004032:	4b30      	ldr	r3, [pc, #192]	@ (80040f4 <HAL_GPIO_EXTI_Callback+0x170>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	613b      	str	r3, [r7, #16]
	uint32_t idx;

	if (GPIO_Pin == GPIO_PIN_0)
 8004038:	88fb      	ldrh	r3, [r7, #6]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d102      	bne.n	8004044 <HAL_GPIO_EXTI_Callback+0xc0>
		idx = 0; // PC0
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	e00a      	b.n	800405a <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_2)
 8004044:	88fb      	ldrh	r3, [r7, #6]
 8004046:	2b04      	cmp	r3, #4
 8004048:	d102      	bne.n	8004050 <HAL_GPIO_EXTI_Callback+0xcc>
		idx = 1; // PC2
 800404a:	2301      	movs	r3, #1
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	e004      	b.n	800405a <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_3)
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	2b08      	cmp	r3, #8
 8004054:	d13b      	bne.n	80040ce <HAL_GPIO_EXTI_Callback+0x14a>
		idx = 2; // PC3
 8004056:	2302      	movs	r3, #2
 8004058:	617b      	str	r3, [r7, #20]
	else
		return;

	if (state[idx] == 0) {
 800405a:	4a27      	ldr	r2, [pc, #156]	@ (80040f8 <HAL_GPIO_EXTI_Callback+0x174>)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	4413      	add	r3, r2
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10a      	bne.n	800407c <HAL_GPIO_EXTI_Callback+0xf8>
		rise_time[idx] = now;
 8004066:	4925      	ldr	r1, [pc, #148]	@ (80040fc <HAL_GPIO_EXTI_Callback+0x178>)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 1;
 8004070:	4a21      	ldr	r2, [pc, #132]	@ (80040f8 <HAL_GPIO_EXTI_Callback+0x174>)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	4413      	add	r3, r2
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	e029      	b.n	80040d0 <HAL_GPIO_EXTI_Callback+0x14c>
	} else {
		uint32_t delta =
				(now >= rise_time[idx]) ?
 800407c:	4a1f      	ldr	r2, [pc, #124]	@ (80040fc <HAL_GPIO_EXTI_Callback+0x178>)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						(now - rise_time[idx]) :
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	d306      	bcc.n	8004098 <HAL_GPIO_EXTI_Callback+0x114>
 800408a:	4a1c      	ldr	r2, [pc, #112]	@ (80040fc <HAL_GPIO_EXTI_Callback+0x178>)
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	e006      	b.n	80040a6 <HAL_GPIO_EXTI_Callback+0x122>
						(0xFFFFFFFF - rise_time[idx] + now);
 8004098:	4a18      	ldr	r2, [pc, #96]	@ (80040fc <HAL_GPIO_EXTI_Callback+0x178>)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
						(now - rise_time[idx]) :
 80040a4:	3b01      	subs	r3, #1
		uint32_t delta =
 80040a6:	60fb      	str	r3, [r7, #12]
		pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 80040a8:	4b15      	ldr	r3, [pc, #84]	@ (8004100 <HAL_GPIO_EXTI_Callback+0x17c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a15      	ldr	r2, [pc, #84]	@ (8004104 <HAL_GPIO_EXTI_Callback+0x180>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	0c9b      	lsrs	r3, r3, #18
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80040ba:	4913      	ldr	r1, [pc, #76]	@ (8004108 <HAL_GPIO_EXTI_Callback+0x184>)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 0;
 80040c2:	4a0d      	ldr	r2, [pc, #52]	@ (80040f8 <HAL_GPIO_EXTI_Callback+0x174>)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	4413      	add	r3, r2
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	e000      	b.n	80040d0 <HAL_GPIO_EXTI_Callback+0x14c>
		return;
 80040ce:	bf00      	nop
	}
}
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000b78 	.word	0x20000b78
 80040dc:	48000800 	.word	0x48000800
 80040e0:	20000bcc 	.word	0x20000bcc
 80040e4:	20000bcd 	.word	0x20000bcd
 80040e8:	48000400 	.word	0x48000400
 80040ec:	20000bd1 	.word	0x20000bd1
 80040f0:	20000bd2 	.word	0x20000bd2
 80040f4:	e0001000 	.word	0xe0001000
 80040f8:	200013e8 	.word	0x200013e8
 80040fc:	20000ad8 	.word	0x20000ad8
 8004100:	20000230 	.word	0x20000230
 8004104:	431bde83 	.word	0x431bde83
 8004108:	20000ae4 	.word	0x20000ae4

0800410c <HAL_TIM_PeriodElapsedCallback>:

// MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800410c:	b4b0      	push	{r4, r5, r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a08      	ldr	r2, [pc, #32]	@ (8004138 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d108      	bne.n	800412e <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 800411c:	4b07      	ldr	r3, [pc, #28]	@ (800413c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	1e54      	subs	r4, r2, #1
 8004124:	f143 0500 	adc.w	r5, r3, #0
 8004128:	4b04      	ldr	r3, [pc, #16]	@ (800413c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800412a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	bcb0      	pop	{r4, r5, r7}
 8004136:	4770      	bx	lr
 8004138:	200005e0 	.word	0x200005e0
 800413c:	20000aa0 	.word	0x20000aa0

08004140 <micros>:
uint64_t micros() {
 8004140:	b4b0      	push	{r4, r5, r7}
 8004142:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8004144:	4b09      	ldr	r3, [pc, #36]	@ (800416c <micros+0x2c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	2200      	movs	r2, #0
 800414c:	4618      	mov	r0, r3
 800414e:	4611      	mov	r1, r2
 8004150:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <micros+0x30>)
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	1884      	adds	r4, r0, r2
 8004158:	eb41 0503 	adc.w	r5, r1, r3
 800415c:	4622      	mov	r2, r4
 800415e:	462b      	mov	r3, r5
}
 8004160:	4610      	mov	r0, r2
 8004162:	4619      	mov	r1, r3
 8004164:	46bd      	mov	sp, r7
 8004166:	bcb0      	pop	{r4, r5, r7}
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	200005e0 	.word	0x200005e0
 8004170:	20000aa0 	.word	0x20000aa0

08004174 <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
		float outMin, float outMax, PID_State *state) {
 8004174:	b480      	push	{r7}
 8004176:	b08f      	sub	sp, #60	@ 0x3c
 8004178:	af00      	add	r7, sp, #0
 800417a:	ed87 0a07 	vstr	s0, [r7, #28]
 800417e:	edc7 0a06 	vstr	s1, [r7, #24]
 8004182:	ed87 1a05 	vstr	s2, [r7, #20]
 8004186:	edc7 1a04 	vstr	s3, [r7, #16]
 800418a:	ed87 2a03 	vstr	s4, [r7, #12]
 800418e:	edc7 2a02 	vstr	s5, [r7, #8]
 8004192:	ed87 3a01 	vstr	s6, [r7, #4]
 8004196:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 8004198:	ed97 7a06 	vldr	s14, [r7, #24]
 800419c:	edd7 7a07 	vldr	s15, [r7, #28]
 80041a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	ed93 7a00 	vldr	s14, [r3]
 80041ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80041b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80041b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	ed93 7a00 	vldr	s14, [r3]
 80041ca:	ed97 6a01 	vldr	s12, [r7, #4]
 80041ce:	edd7 6a05 	vldr	s13, [r7, #20]
 80041d2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80041d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041de:	dd08      	ble.n	80041f2 <PID_Update+0x7e>
		state->integ = outMax / kI;
 80041e0:	edd7 6a01 	vldr	s13, [r7, #4]
 80041e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80041e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	ed93 7a00 	vldr	s14, [r3]
 80041f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80041fc:	edd7 6a05 	vldr	s13, [r7, #20]
 8004200:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004204:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420c:	d508      	bpl.n	8004220 <PID_Update+0xac>
		state->integ = outMin / kI;
 800420e:	edd7 6a02 	vldr	s13, [r7, #8]
 8004212:	ed97 7a05 	vldr	s14, [r7, #20]
 8004216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 8004220:	edd7 7a07 	vldr	s15, [r7, #28]
 8004224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422c:	dd0b      	ble.n	8004246 <PID_Update+0xd2>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	edd3 7a00 	vldr	s15, [r3]
 8004234:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423c:	d503      	bpl.n	8004246 <PID_Update+0xd2>
		state->integ = 0;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 8004246:	edd7 7a07 	vldr	s15, [r7, #28]
 800424a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800424e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004252:	d50b      	bpl.n	800426c <PID_Update+0xf8>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	edd3 7a00 	vldr	s15, [r3]
 800425a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800425e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004262:	dd03      	ble.n	800426c <PID_Update+0xf8>
		state->integ = 0;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	edd3 7a00 	vldr	s15, [r3]
 8004272:	ed97 7a05 	vldr	s14, [r7, #20]
 8004276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	edd3 7a01 	vldr	s15, [r3, #4]
 8004284:	ed97 7a07 	vldr	s14, [r7, #28]
 8004288:	ee77 6a67 	vsub.f32	s13, s14, s15
 800428c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004294:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 8004298:	ed97 7a04 	vldr	s14, [r7, #16]
 800429c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80042a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 80042ae:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80042b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80042b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ba:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80042be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042c2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 80042c6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80042ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80042ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d6:	dd01      	ble.n	80042dc <PID_Update+0x168>
		out = outMax;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 80042dc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80042e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80042e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ec:	d501      	bpl.n	80042f2 <PID_Update+0x17e>
		out = outMin;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 80042f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f4:	ee07 3a90 	vmov	s15, r3
}
 80042f8:	eeb0 0a67 	vmov.f32	s0, s15
 80042fc:	373c      	adds	r7, #60	@ 0x3c
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update() {
 8004308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
	// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 8004310:	f7ff ff16 	bl	8004140 <micros>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	497b      	ldr	r1, [pc, #492]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 800431a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 800431e:	4b7b      	ldr	r3, [pc, #492]	@ (800450c <Revolute_PosVel_Update+0x204>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	4a78      	ldr	r2, [pc, #480]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 8004326:	6013      	str	r3, [r2, #0]

	// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8004328:	4b77      	ldr	r3, [pc, #476]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004330:	ee07 3a90 	vmov	s15, r3
 8004334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004338:	4b73      	ldr	r3, [pc, #460]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 800433a:	edc3 7a06 	vstr	s15, [r3, #24]

	// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 800433e:	4b72      	ldr	r3, [pc, #456]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 8004340:	681a      	ldr	r2, [r3, #0]
			- Revolute_QEIdata.Position[OLD];
 8004342:	4b71      	ldr	r3, [pc, #452]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8004348:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004350:	dd04      	ble.n	800435c <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	e007      	b.n	800436c <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004362:	da03      	bge.n	800436c <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800436a:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 800436c:	4b66      	ldr	r3, [pc, #408]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 800436e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004372:	4b65      	ldr	r3, [pc, #404]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 8004374:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004378:	ebb0 0a02 	subs.w	sl, r0, r2
 800437c:	eb61 0b03 	sbc.w	fp, r1, r3
 8004380:	4650      	mov	r0, sl
 8004382:	4659      	mov	r1, fp
 8004384:	f7fc fcd6 	bl	8000d34 <__aeabi_ul2f>
 8004388:	ee07 0a10 	vmov	s14, r0
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 800438c:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8004510 <Revolute_PosVel_Update+0x208>
 8004390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004394:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 8004398:	edd7 7a02 	vldr	s15, [r7, #8]
 800439c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a4:	f000 80a0 	beq.w	80044e8 <Revolute_PosVel_Update+0x1e0>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_r = (float) diffPosition_r / diffTime_r;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80043b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80043b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ba:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
			- Revolute_QEIdata.QEIVelocity) / diffTime_r;
 80043be:	4b52      	ldr	r3, [pc, #328]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 80043c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80043c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80043c8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80043cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80043d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
 80043d4:	4b4c      	ldr	r3, [pc, #304]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 80043d6:	edc3 7a08 	vstr	s15, [r3, #32]

	// Store raw velocity
	Revolute_QEIdata.QEIVelocity = Vel_counts_r;
 80043da:	4a4b      	ldr	r2, [pc, #300]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	61d3      	str	r3, [r2, #28]

	// Angular velocity in rad/s
	Revolute_QEIdata.Velocity = Vel_counts_r * (2.0f * M_PI / 16384.0f);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7fc f87d 	bl	80004e0 <__aeabi_f2d>
 80043e6:	a344      	add	r3, pc, #272	@ (adr r3, 80044f8 <Revolute_PosVel_Update+0x1f0>)
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f7fc f8d0 	bl	8000590 <__aeabi_dmul>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4610      	mov	r0, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	f7fc fb84 	bl	8000b04 <__aeabi_d2f>
 80043fc:	4603      	mov	r3, r0
 80043fe:	4a42      	ldr	r2, [pc, #264]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 8004400:	6253      	str	r3, [r2, #36]	@ 0x24
	float R_alpha = 0.4f;
 8004402:	4b44      	ldr	r3, [pc, #272]	@ (8004514 <Revolute_PosVel_Update+0x20c>)
 8004404:	603b      	str	r3, [r7, #0]
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity
 8004406:	4b40      	ldr	r3, [pc, #256]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 8004408:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800440c:	edd7 7a00 	vldr	s15, [r7]
 8004410:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (1 - R_alpha) * Revolute_QEIdata.Velocity_f;
 8004414:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004418:	edd7 7a00 	vldr	s15, [r7]
 800441c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004420:	4b39      	ldr	r3, [pc, #228]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 8004422:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800442a:	ee77 7a27 	vadd.f32	s15, s14, s15
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity
 800442e:	4b36      	ldr	r3, [pc, #216]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 8004430:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Angular acceleration in rad/s²
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 8004434:	4b34      	ldr	r3, [pc, #208]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	4618      	mov	r0, r3
 800443a:	f7fc f851 	bl	80004e0 <__aeabi_f2d>
			* (2.0f * M_PI / 16384.0f);
 800443e:	a32e      	add	r3, pc, #184	@ (adr r3, 80044f8 <Revolute_PosVel_Update+0x1f0>)
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f7fc f8a4 	bl	8000590 <__aeabi_dmul>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4610      	mov	r0, r2
 800444e:	4619      	mov	r1, r3
 8004450:	f7fc fb58 	bl	8000b04 <__aeabi_d2f>
 8004454:	4603      	mov	r3, r0
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 8004456:	4a2c      	ldr	r2, [pc, #176]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 8004458:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 800445a:	4b2b      	ldr	r3, [pc, #172]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 800445c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004460:	68f9      	ldr	r1, [r7, #12]
 8004462:	17c8      	asrs	r0, r1, #31
 8004464:	460c      	mov	r4, r1
 8004466:	4605      	mov	r5, r0
 8004468:	eb12 0804 	adds.w	r8, r2, r4
 800446c:	eb43 0905 	adc.w	r9, r3, r5
 8004470:	4b25      	ldr	r3, [pc, #148]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 8004472:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8004476:	4b24      	ldr	r3, [pc, #144]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 8004478:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (2.0f * M_PI / 16384.0f);
 800447c:	4610      	mov	r0, r2
 800447e:	4619      	mov	r1, r3
 8004480:	f7fc f858 	bl	8000534 <__aeabi_l2d>
 8004484:	a31c      	add	r3, pc, #112	@ (adr r3, 80044f8 <Revolute_PosVel_Update+0x1f0>)
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	f7fc f881 	bl	8000590 <__aeabi_dmul>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	f7fc fb35 	bl	8000b04 <__aeabi_d2f>
 800449a:	4603      	mov	r3, r0
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 800449c:	4a1a      	ldr	r2, [pc, #104]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 800449e:	6393      	str	r3, [r2, #56]	@ 0x38

	// Deg position
	Revolute_QEIdata.DegPosition = Revolute_QEIdata.RadPosition * 180 / M_PI;
 80044a0:	4b19      	ldr	r3, [pc, #100]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 80044a2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80044a6:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004518 <Revolute_PosVel_Update+0x210>
 80044aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ae:	ee17 0a90 	vmov	r0, s15
 80044b2:	f7fc f815 	bl	80004e0 <__aeabi_f2d>
 80044b6:	a312      	add	r3, pc, #72	@ (adr r3, 8004500 <Revolute_PosVel_Update+0x1f8>)
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f7fc f992 	bl	80007e4 <__aeabi_ddiv>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	f7fc fb1c 	bl	8000b04 <__aeabi_d2f>
 80044cc:	4603      	mov	r3, r0
 80044ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 80044d0:	63d3      	str	r3, [r2, #60]	@ 0x3c

	// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 80044d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 80044d8:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 80044da:	4b0b      	ldr	r3, [pc, #44]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 80044dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80044e0:	4909      	ldr	r1, [pc, #36]	@ (8004508 <Revolute_PosVel_Update+0x200>)
 80044e2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80044e6:	e000      	b.n	80044ea <Revolute_PosVel_Update+0x1e2>
		return;
 80044e8:	bf00      	nop
}
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f2:	bf00      	nop
 80044f4:	f3af 8000 	nop.w
 80044f8:	54442d18 	.word	0x54442d18
 80044fc:	3f3921fb 	.word	0x3f3921fb
 8004500:	54442d18 	.word	0x54442d18
 8004504:	400921fb 	.word	0x400921fb
 8004508:	20000af8 	.word	0x20000af8
 800450c:	20000514 	.word	0x20000514
 8004510:	358637bd 	.word	0x358637bd
 8004514:	3ecccccd 	.word	0x3ecccccd
 8004518:	43340000 	.word	0x43340000

0800451c <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update() {
 800451c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
	// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 8004524:	f7ff fe0c 	bl	8004140 <micros>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4958      	ldr	r1, [pc, #352]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 800452e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8004532:	4b58      	ldr	r3, [pc, #352]	@ (8004694 <Prismatic_PosVel_Update+0x178>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	4a55      	ldr	r2, [pc, #340]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 800453a:	6013      	str	r3, [r2, #0]

	// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 800453c:	4b54      	ldr	r3, [pc, #336]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 800453e:	681a      	ldr	r2, [r3, #0]
			- Prismatic_QEIdata.Position[OLD];
 8004540:	4b53      	ldr	r3, [pc, #332]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004546:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800454e:	dd04      	ble.n	800455a <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	e007      	b.n	800456a <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004560:	da03      	bge.n	800456a <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004568:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 800456a:	4b49      	ldr	r3, [pc, #292]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 800456c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004570:	4b47      	ldr	r3, [pc, #284]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 8004572:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004576:	ebb0 0a02 	subs.w	sl, r0, r2
 800457a:	eb61 0b03 	sbc.w	fp, r1, r3
 800457e:	4650      	mov	r0, sl
 8004580:	4659      	mov	r1, fp
 8004582:	f7fc fbd7 	bl	8000d34 <__aeabi_ul2f>
 8004586:	ee07 0a10 	vmov	s14, r0
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 800458a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8004698 <Prismatic_PosVel_Update+0x17c>
 800458e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004592:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 8004596:	edd7 7a02 	vldr	s15, [r7, #8]
 800459a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a2:	d070      	beq.n	8004686 <Prismatic_PosVel_Update+0x16a>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_p = (float) diffPosition_p / diffTime_p;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80045ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80045b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045b6:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
			- Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 80045ba:	4b35      	ldr	r3, [pc, #212]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 80045bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80045c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80045c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80045c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80045cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
 80045d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 80045d2:	edc3 7a07 	vstr	s15, [r3, #28]

	// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 80045d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6193      	str	r3, [r2, #24]

	// Velocity in mm/s
	Prismatic_QEIdata.Velocity = Vel_counts_p * (10.0f / 8192.0f);
 80045dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80045e0:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800469c <Prismatic_PosVel_Update+0x180>
 80045e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045e8:	4b29      	ldr	r3, [pc, #164]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 80045ea:	edc3 7a08 	vstr	s15, [r3, #32]
	float P_alpha = 0.4f;
 80045ee:	4b2c      	ldr	r3, [pc, #176]	@ (80046a0 <Prismatic_PosVel_Update+0x184>)
 80045f0:	603b      	str	r3, [r7, #0]
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity
 80045f2:	4b27      	ldr	r3, [pc, #156]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 80045f4:	ed93 7a08 	vldr	s14, [r3, #32]
 80045f8:	edd7 7a00 	vldr	s15, [r7]
 80045fc:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (1 - P_alpha) * Prismatic_QEIdata.Velocity_f;
 8004600:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004604:	edd7 7a00 	vldr	s15, [r7]
 8004608:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800460c:	4b20      	ldr	r3, [pc, #128]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 800460e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004616:	ee77 7a27 	vadd.f32	s15, s14, s15
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity
 800461a:	4b1d      	ldr	r3, [pc, #116]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 800461c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004620:	4b1b      	ldr	r3, [pc, #108]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 8004622:	edd3 7a07 	vldr	s15, [r3, #28]
			* (10.0f / 8192.0f);
 8004626:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800469c <Prismatic_PosVel_Update+0x180>
 800462a:	ee67 7a87 	vmul.f32	s15, s15, s14
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 800462e:	4b18      	ldr	r3, [pc, #96]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 8004630:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 8004634:	4b16      	ldr	r3, [pc, #88]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 8004636:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800463a:	68f9      	ldr	r1, [r7, #12]
 800463c:	17c8      	asrs	r0, r1, #31
 800463e:	460c      	mov	r4, r1
 8004640:	4605      	mov	r5, r0
 8004642:	eb12 0804 	adds.w	r8, r2, r4
 8004646:	eb43 0905 	adc.w	r9, r3, r5
 800464a:	4b11      	ldr	r3, [pc, #68]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 800464c:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004650:	4b0f      	ldr	r3, [pc, #60]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 8004652:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (10.0f / 8192.0f);
 8004656:	4610      	mov	r0, r2
 8004658:	4619      	mov	r1, r3
 800465a:	f7fc fb73 	bl	8000d44 <__aeabi_l2f>
 800465e:	ee07 0a10 	vmov	s14, r0
 8004662:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800469c <Prismatic_PosVel_Update+0x180>
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 800466a:	4b09      	ldr	r3, [pc, #36]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 800466c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 8004670:	4b07      	ldr	r3, [pc, #28]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a06      	ldr	r2, [pc, #24]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 8004676:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 8004678:	4b05      	ldr	r3, [pc, #20]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 800467a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800467e:	4904      	ldr	r1, [pc, #16]	@ (8004690 <Prismatic_PosVel_Update+0x174>)
 8004680:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004684:	e000      	b.n	8004688 <Prismatic_PosVel_Update+0x16c>
		return;
 8004686:	bf00      	nop
}
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004690:	20000b38 	.word	0x20000b38
 8004694:	20000448 	.word	0x20000448
 8004698:	358637bd 	.word	0x358637bd
 800469c:	3aa00000 	.word	0x3aa00000
 80046a0:	3ecccccd 	.word	0x3ecccccd

080046a4 <Set_Motor>:

void Set_Motor(int motor_num, float speed) {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)
 80046b0:	edd7 7a00 	vldr	s15, [r7]
 80046b4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004788 <Set_Motor+0xe4>
 80046b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c0:	dd01      	ble.n	80046c6 <Set_Motor+0x22>
		speed = 100.0f;
 80046c2:	4b32      	ldr	r3, [pc, #200]	@ (800478c <Set_Motor+0xe8>)
 80046c4:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f)
 80046c6:	edd7 7a00 	vldr	s15, [r7]
 80046ca:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004790 <Set_Motor+0xec>
 80046ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d6:	d501      	bpl.n	80046dc <Set_Motor+0x38>
		speed = -100.0f;
 80046d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004794 <Set_Motor+0xf0>)
 80046da:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t) ((fabsf(speed) * 100) / 100);
 80046dc:	edd7 7a00 	vldr	s15, [r7]
 80046e0:	eef0 7ae7 	vabs.f32	s15, s15
 80046e4:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004788 <Set_Motor+0xe4>
 80046e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80046ec:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004788 <Set_Motor+0xe4>
 80046f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f8:	ee17 3a90 	vmov	r3, s15
 80046fc:	60fb      	str	r3, [r7, #12]
	if (motor_num == 0) {
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d11d      	bne.n	8004740 <Set_Motor+0x9c>
		if (speed > 0) {
 8004704:	edd7 7a00 	vldr	s15, [r7]
 8004708:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800470c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004710:	dd05      	ble.n	800471e <Set_Motor+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004712:	2200      	movs	r2, #0
 8004714:	2120      	movs	r1, #32
 8004716:	4820      	ldr	r0, [pc, #128]	@ (8004798 <Set_Motor+0xf4>)
 8004718:	f001 fdae 	bl	8006278 <HAL_GPIO_WritePin>
 800471c:	e00b      	b.n	8004736 <Set_Motor+0x92>
		} else if (speed < 0) {
 800471e:	edd7 7a00 	vldr	s15, [r7]
 8004722:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472a:	d504      	bpl.n	8004736 <Set_Motor+0x92>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800472c:	2201      	movs	r2, #1
 800472e:	2120      	movs	r1, #32
 8004730:	4819      	ldr	r0, [pc, #100]	@ (8004798 <Set_Motor+0xf4>)
 8004732:	f001 fda1 	bl	8006278 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 8004736:	4b19      	ldr	r3, [pc, #100]	@ (800479c <Set_Motor+0xf8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	63da      	str	r2, [r3, #60]	@ 0x3c
		} else if (speed < 0) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 800473e:	e01f      	b.n	8004780 <Set_Motor+0xdc>
	} else if (motor_num == 1) {
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d11c      	bne.n	8004780 <Set_Motor+0xdc>
		if (speed > 0) {
 8004746:	edd7 7a00 	vldr	s15, [r7]
 800474a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004752:	dd05      	ble.n	8004760 <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004754:	2200      	movs	r2, #0
 8004756:	2140      	movs	r1, #64	@ 0x40
 8004758:	480f      	ldr	r0, [pc, #60]	@ (8004798 <Set_Motor+0xf4>)
 800475a:	f001 fd8d 	bl	8006278 <HAL_GPIO_WritePin>
 800475e:	e00b      	b.n	8004778 <Set_Motor+0xd4>
		} else if (speed < 0) {
 8004760:	edd7 7a00 	vldr	s15, [r7]
 8004764:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476c:	d504      	bpl.n	8004778 <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800476e:	2201      	movs	r2, #1
 8004770:	2140      	movs	r1, #64	@ 0x40
 8004772:	4809      	ldr	r0, [pc, #36]	@ (8004798 <Set_Motor+0xf4>)
 8004774:	f001 fd80 	bl	8006278 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 8004778:	4b08      	ldr	r3, [pc, #32]	@ (800479c <Set_Motor+0xf8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004780:	bf00      	nop
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	42c80000 	.word	0x42c80000
 800478c:	42c80000 	.word	0x42c80000
 8004790:	c2c80000 	.word	0xc2c80000
 8004794:	c2c80000 	.word	0xc2c80000
 8004798:	48000800 	.word	0x48000800
 800479c:	200006ac 	.word	0x200006ac

080047a0 <Set_Servo>:

void Set_Servo(int Pen_Pos) {
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0) {
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10f      	bne.n	80047ce <Set_Servo+0x2e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 80047ae:	4b0e      	ldr	r3, [pc, #56]	@ (80047e8 <Set_Servo+0x48>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80047b6:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 80047b8:	4b0c      	ldr	r3, [pc, #48]	@ (80047ec <Set_Servo+0x4c>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 80047be:	f7ff fcbf 	bl	8004140 <micros>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	490a      	ldr	r1, [pc, #40]	@ (80047f0 <Set_Servo+0x50>)
 80047c8:	e9c1 2300 	strd	r2, r3, [r1]
	} else {
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 80047cc:	e007      	b.n	80047de <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 80047ce:	4b06      	ldr	r3, [pc, #24]	@ (80047e8 <Set_Servo+0x48>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047d6:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 80047d8:	4b04      	ldr	r3, [pc, #16]	@ (80047ec <Set_Servo+0x4c>)
 80047da:	2201      	movs	r2, #1
 80047dc:	701a      	strb	r2, [r3, #0]
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000778 	.word	0x20000778
 80047ec:	20000bd0 	.word	0x20000bd0
 80047f0:	20000c30 	.word	0x20000c30

080047f4 <Reset_R>:

void Reset_R() {
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 80047f8:	4905      	ldr	r1, [pc, #20]	@ (8004810 <Reset_R+0x1c>)
 80047fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 8004806:	bf00      	nop
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	20000af8 	.word	0x20000af8

08004814 <Reset_P>:
void Reset_P() {
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 8004818:	4905      	ldr	r1, [pc, #20]	@ (8004830 <Reset_P+0x1c>)
 800481a:	4a06      	ldr	r2, [pc, #24]	@ (8004834 <Reset_P+0x20>)
 800481c:	f04f 33ff 	mov.w	r3, #4294967295
 8004820:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	//	Prismatic_QEIdata.mmPosition = 0;
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	20000b38 	.word	0x20000b38
 8004834:	fffff99a 	.word	0xfffff99a

08004838 <Workspace_limit>:

void Workspace_limit() {
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
	if (Revolute_QEIdata.RadPosition < -1.91986 && R_PWM > 0) {
 800483c:	4b34      	ldr	r3, [pc, #208]	@ (8004910 <Workspace_limit+0xd8>)
 800483e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004840:	4618      	mov	r0, r3
 8004842:	f7fb fe4d 	bl	80004e0 <__aeabi_f2d>
 8004846:	a32e      	add	r3, pc, #184	@ (adr r3, 8004900 <Workspace_limit+0xc8>)
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f7fc f912 	bl	8000a74 <__aeabi_dcmplt>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00b      	beq.n	800486e <Workspace_limit+0x36>
 8004856:	4b2f      	ldr	r3, [pc, #188]	@ (8004914 <Workspace_limit+0xdc>)
 8004858:	edd3 7a00 	vldr	s15, [r3]
 800485c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004864:	dd03      	ble.n	800486e <Workspace_limit+0x36>
		R_PWM = 0;
 8004866:	4b2b      	ldr	r3, [pc, #172]	@ (8004914 <Workspace_limit+0xdc>)
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
	}
	if (Revolute_QEIdata.RadPosition > 5.06145 && R_PWM < 0) {
 800486e:	4b28      	ldr	r3, [pc, #160]	@ (8004910 <Workspace_limit+0xd8>)
 8004870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004872:	4618      	mov	r0, r3
 8004874:	f7fb fe34 	bl	80004e0 <__aeabi_f2d>
 8004878:	a323      	add	r3, pc, #140	@ (adr r3, 8004908 <Workspace_limit+0xd0>)
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	f7fc f917 	bl	8000ab0 <__aeabi_dcmpgt>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <Workspace_limit+0x68>
 8004888:	4b22      	ldr	r3, [pc, #136]	@ (8004914 <Workspace_limit+0xdc>)
 800488a:	edd3 7a00 	vldr	s15, [r3]
 800488e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004896:	d503      	bpl.n	80048a0 <Workspace_limit+0x68>
		R_PWM = 0;
 8004898:	4b1e      	ldr	r3, [pc, #120]	@ (8004914 <Workspace_limit+0xdc>)
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition > 305 && P_PWM > 0) {
 80048a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004918 <Workspace_limit+0xe0>)
 80048a2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80048a6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800491c <Workspace_limit+0xe4>
 80048aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b2:	dd0b      	ble.n	80048cc <Workspace_limit+0x94>
 80048b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004920 <Workspace_limit+0xe8>)
 80048b6:	edd3 7a00 	vldr	s15, [r3]
 80048ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c2:	dd03      	ble.n	80048cc <Workspace_limit+0x94>
		P_PWM = 0;
 80048c4:	4b16      	ldr	r3, [pc, #88]	@ (8004920 <Workspace_limit+0xe8>)
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 80048cc:	4b12      	ldr	r3, [pc, #72]	@ (8004918 <Workspace_limit+0xe0>)
 80048ce:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80048d2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80048d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048de:	d400      	bmi.n	80048e2 <Workspace_limit+0xaa>
		P_PWM = 0;
	}
}
 80048e0:	e00c      	b.n	80048fc <Workspace_limit+0xc4>
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 80048e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004920 <Workspace_limit+0xe8>)
 80048e4:	edd3 7a00 	vldr	s15, [r3]
 80048e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f0:	d400      	bmi.n	80048f4 <Workspace_limit+0xbc>
}
 80048f2:	e003      	b.n	80048fc <Workspace_limit+0xc4>
		P_PWM = 0;
 80048f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004920 <Workspace_limit+0xe8>)
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
}
 80048fc:	bf00      	nop
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	1e8e6080 	.word	0x1e8e6080
 8004904:	bffeb7bf 	.word	0xbffeb7bf
 8004908:	bfb15b57 	.word	0xbfb15b57
 800490c:	40143eec 	.word	0x40143eec
 8004910:	20000af8 	.word	0x20000af8
 8004914:	20000bc4 	.word	0x20000bc4
 8004918:	20000b38 	.word	0x20000b38
 800491c:	43988000 	.word	0x43988000
 8004920:	20000bc8 	.word	0x20000bc8

08004924 <Get_QRIdata>:

void Get_QRIdata(float *prism_vel_mm, float *prism_acc_mm, float *prism_mm_pos,
		float *rev_ang_vel_rad, float *rev_ang_acc_rad, float *rev_rad_pos) {
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	603b      	str	r3, [r7, #0]
	if (prism_vel_mm)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <Get_QRIdata+0x1c>
		*prism_vel_mm = Prismatic_QEIdata.Velocity;
 8004938:	4b16      	ldr	r3, [pc, #88]	@ (8004994 <Get_QRIdata+0x70>)
 800493a:	6a1a      	ldr	r2, [r3, #32]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	601a      	str	r2, [r3, #0]
	if (prism_acc_mm)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <Get_QRIdata+0x2a>
		*prism_acc_mm = Prismatic_QEIdata.Acceleration;
 8004946:	4b13      	ldr	r3, [pc, #76]	@ (8004994 <Get_QRIdata+0x70>)
 8004948:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	601a      	str	r2, [r3, #0]
	if (prism_mm_pos)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <Get_QRIdata+0x38>
		*prism_mm_pos = Prismatic_QEIdata.mmPosition;
 8004954:	4b0f      	ldr	r3, [pc, #60]	@ (8004994 <Get_QRIdata+0x70>)
 8004956:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	601a      	str	r2, [r3, #0]
	if (rev_ang_vel_rad)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <Get_QRIdata+0x46>
		*rev_ang_vel_rad = Revolute_QEIdata.Velocity;
 8004962:	4b0d      	ldr	r3, [pc, #52]	@ (8004998 <Get_QRIdata+0x74>)
 8004964:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	601a      	str	r2, [r3, #0]
	if (rev_ang_acc_rad)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <Get_QRIdata+0x54>
		*rev_ang_acc_rad = Revolute_QEIdata.Acceleration;
 8004970:	4b09      	ldr	r3, [pc, #36]	@ (8004998 <Get_QRIdata+0x74>)
 8004972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	601a      	str	r2, [r3, #0]
	if (rev_rad_pos)
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <Get_QRIdata+0x62>
		*rev_rad_pos = Revolute_QEIdata.RadPosition;
 800497e:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <Get_QRIdata+0x74>)
 8004980:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	601a      	str	r2, [r3, #0]
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000b38 	.word	0x20000b38
 8004998:	20000af8 	.word	0x20000af8

0800499c <TrapezoidStep>:
		return sqrtf(distance * amax);
	}
	return (distance - 0.5f * amax * t_half * t_half) / t_half;
}

void TrapezoidStep(void) {
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
//	static float last_TargetR = 0.0f;
//	static float last_TargetP = 0.0f;

	// 2a) Detect setpoint jump (revolute, in radians)
	float r_diff = fabsf(TargetR - last_TargetR);
 80049a2:	4b38      	ldr	r3, [pc, #224]	@ (8004a84 <TrapezoidStep+0xe8>)
 80049a4:	ed93 7a00 	vldr	s14, [r3]
 80049a8:	4b37      	ldr	r3, [pc, #220]	@ (8004a88 <TrapezoidStep+0xec>)
 80049aa:	edd3 7a00 	vldr	s15, [r3]
 80049ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049b2:	eef0 7ae7 	vabs.f32	s15, s15
 80049b6:	edc7 7a01 	vstr	s15, [r7, #4]
	if (r_diff > 0.001f) {
 80049ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80049be:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8004a8c <TrapezoidStep+0xf0>
 80049c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ca:	dd0f      	ble.n	80049ec <TrapezoidStep+0x50>
		// Re‐init revolute trapezoid: distance_to_go = R_Pos_Error (rad)
		Trapezoidal_Init(&revolute, R_Pos_Error, /*maxVel*/1.40f, /*maxAcc*/
 80049cc:	4b30      	ldr	r3, [pc, #192]	@ (8004a90 <TrapezoidStep+0xf4>)
 80049ce:	edd3 7a00 	vldr	s15, [r3]
 80049d2:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 80049d6:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8004a94 <TrapezoidStep+0xf8>
 80049da:	eeb0 0a67 	vmov.f32	s0, s15
 80049de:	482e      	ldr	r0, [pc, #184]	@ (8004a98 <TrapezoidStep+0xfc>)
 80049e0:	f7fd f808 	bl	80019f4 <Trapezoidal_Init>
		9.0f);
		last_TargetR = TargetR;
 80049e4:	4b27      	ldr	r3, [pc, #156]	@ (8004a84 <TrapezoidStep+0xe8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a27      	ldr	r2, [pc, #156]	@ (8004a88 <TrapezoidStep+0xec>)
 80049ea:	6013      	str	r3, [r2, #0]
	}

	// 2b) Detect setpoint jump (prismatic, in mm)
	float p_diff = fabsf(TargetP - last_TargetP);
 80049ec:	4b2b      	ldr	r3, [pc, #172]	@ (8004a9c <TrapezoidStep+0x100>)
 80049ee:	ed93 7a00 	vldr	s14, [r3]
 80049f2:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa0 <TrapezoidStep+0x104>)
 80049f4:	edd3 7a00 	vldr	s15, [r3]
 80049f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049fc:	eef0 7ae7 	vabs.f32	s15, s15
 8004a00:	edc7 7a00 	vstr	s15, [r7]
	if (p_diff > 0.01f) {
 8004a04:	edd7 7a00 	vldr	s15, [r7]
 8004a08:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004aa4 <TrapezoidStep+0x108>
 8004a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a14:	dd0f      	ble.n	8004a36 <TrapezoidStep+0x9a>
		// Re‐init prismatic trapezoid: distance_to_go = P_Pos_Error (mm)
		Trapezoidal_Init(&prismatic, P_Pos_Error, /*maxVel*/600.0f, /*maxAcc*/
 8004a16:	4b24      	ldr	r3, [pc, #144]	@ (8004aa8 <TrapezoidStep+0x10c>)
 8004a18:	edd3 7a00 	vldr	s15, [r3]
 8004a1c:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8004aac <TrapezoidStep+0x110>
 8004a20:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8004ab0 <TrapezoidStep+0x114>
 8004a24:	eeb0 0a67 	vmov.f32	s0, s15
 8004a28:	4822      	ldr	r0, [pc, #136]	@ (8004ab4 <TrapezoidStep+0x118>)
 8004a2a:	f7fc ffe3 	bl	80019f4 <Trapezoidal_Init>
		3000.0f);
		last_TargetP = TargetP;
 8004a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004a9c <TrapezoidStep+0x100>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa0 <TrapezoidStep+0x104>)
 8004a34:	6013      	str	r3, [r2, #0]
	}

	// 2c) Advance both trapezoids by 1 ms → update feedforward pos/vel/acc
	Trapezoidal_Update(&revolute, 0.001f);
 8004a36:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8004a8c <TrapezoidStep+0xf0>
 8004a3a:	4817      	ldr	r0, [pc, #92]	@ (8004a98 <TrapezoidStep+0xfc>)
 8004a3c:	f7fd f8a4 	bl	8001b88 <Trapezoidal_Update>
	TargetRPos = revolute.current_position;
 8004a40:	4b15      	ldr	r3, [pc, #84]	@ (8004a98 <TrapezoidStep+0xfc>)
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab8 <TrapezoidStep+0x11c>)
 8004a46:	6013      	str	r3, [r2, #0]
	TargetRVel = revolute.current_velocity;
 8004a48:	4b13      	ldr	r3, [pc, #76]	@ (8004a98 <TrapezoidStep+0xfc>)
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004abc <TrapezoidStep+0x120>)
 8004a4e:	6013      	str	r3, [r2, #0]
	TargetRAcc = revolute.current_acceleration;
 8004a50:	4b11      	ldr	r3, [pc, #68]	@ (8004a98 <TrapezoidStep+0xfc>)
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	4a1a      	ldr	r2, [pc, #104]	@ (8004ac0 <TrapezoidStep+0x124>)
 8004a56:	6013      	str	r3, [r2, #0]

	Trapezoidal_Update(&prismatic, 0.001f);
 8004a58:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8004a8c <TrapezoidStep+0xf0>
 8004a5c:	4815      	ldr	r0, [pc, #84]	@ (8004ab4 <TrapezoidStep+0x118>)
 8004a5e:	f7fd f893 	bl	8001b88 <Trapezoidal_Update>
	TargetPPos = prismatic.current_position;
 8004a62:	4b14      	ldr	r3, [pc, #80]	@ (8004ab4 <TrapezoidStep+0x118>)
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	4a17      	ldr	r2, [pc, #92]	@ (8004ac4 <TrapezoidStep+0x128>)
 8004a68:	6013      	str	r3, [r2, #0]
	TargetPVel = prismatic.current_velocity;
 8004a6a:	4b12      	ldr	r3, [pc, #72]	@ (8004ab4 <TrapezoidStep+0x118>)
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	4a16      	ldr	r2, [pc, #88]	@ (8004ac8 <TrapezoidStep+0x12c>)
 8004a70:	6013      	str	r3, [r2, #0]
	TargetPAcc = prismatic.current_acceleration;
 8004a72:	4b10      	ldr	r3, [pc, #64]	@ (8004ab4 <TrapezoidStep+0x118>)
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	4a15      	ldr	r2, [pc, #84]	@ (8004acc <TrapezoidStep+0x130>)
 8004a78:	6013      	str	r3, [r2, #0]
}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20000b94 	.word	0x20000b94
 8004a88:	20001314 	.word	0x20001314
 8004a8c:	3a83126f 	.word	0x3a83126f
 8004a90:	20000bb4 	.word	0x20000bb4
 8004a94:	3fb33333 	.word	0x3fb33333
 8004a98:	2000132c 	.word	0x2000132c
 8004a9c:	20000b98 	.word	0x20000b98
 8004aa0:	20001318 	.word	0x20001318
 8004aa4:	3c23d70a 	.word	0x3c23d70a
 8004aa8:	20000bb8 	.word	0x20000bb8
 8004aac:	453b8000 	.word	0x453b8000
 8004ab0:	44160000 	.word	0x44160000
 8004ab4:	20001370 	.word	0x20001370
 8004ab8:	20000b9c 	.word	0x20000b9c
 8004abc:	20000ba4 	.word	0x20000ba4
 8004ac0:	20000bac 	.word	0x20000bac
 8004ac4:	20000ba0 	.word	0x20000ba0
 8004ac8:	20000ba8 	.word	0x20000ba8
 8004acc:	20000bb0 	.word	0x20000bb0

08004ad0 <PIDStep>:

void PIDStep(void) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
	static int loop_counter1 = 0;
	static float R_Target_Velocity = 0.0f;
	static float P_Target_Velocity = 0.0f;

	loop_counter1++;
 8004ad6:	4b65      	ldr	r3, [pc, #404]	@ (8004c6c <PIDStep+0x19c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3301      	adds	r3, #1
 8004adc:	4a63      	ldr	r2, [pc, #396]	@ (8004c6c <PIDStep+0x19c>)
 8004ade:	6013      	str	r3, [r2, #0]
	// 3a) Outer‐loop (position) PID every 10 ms
	if (loop_counter1 >= 10) {
 8004ae0:	4b62      	ldr	r3, [pc, #392]	@ (8004c6c <PIDStep+0x19c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b09      	cmp	r3, #9
 8004ae6:	dd62      	ble.n	8004bae <PIDStep+0xde>
		loop_counter1 = 0;
 8004ae8:	4b60      	ldr	r3, [pc, #384]	@ (8004c6c <PIDStep+0x19c>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]

		// Recompute “true” pos‐errors
		float R_Pos_now = TargetR - Revolute_QEIdata.RadPosition;
 8004aee:	4b60      	ldr	r3, [pc, #384]	@ (8004c70 <PIDStep+0x1a0>)
 8004af0:	ed93 7a00 	vldr	s14, [r3]
 8004af4:	4b5f      	ldr	r3, [pc, #380]	@ (8004c74 <PIDStep+0x1a4>)
 8004af6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004afe:	edc7 7a03 	vstr	s15, [r7, #12]
		float P_Pos_now = TargetP - Prismatic_QEIdata.mmPosition;
 8004b02:	4b5d      	ldr	r3, [pc, #372]	@ (8004c78 <PIDStep+0x1a8>)
 8004b04:	ed93 7a00 	vldr	s14, [r3]
 8004b08:	4b5c      	ldr	r3, [pc, #368]	@ (8004c7c <PIDStep+0x1ac>)
 8004b0a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b12:	edc7 7a02 	vstr	s15, [r7, #8]

		// Position‐PID → corrective velocity for revolute
		float R_corr_vel = PID_Update(R_Pos_now, R_kP_pos, R_kI_pos, R_kD_pos,
 8004b16:	4b5a      	ldr	r3, [pc, #360]	@ (8004c80 <PIDStep+0x1b0>)
 8004b18:	edd3 7a00 	vldr	s15, [r3]
 8004b1c:	4b59      	ldr	r3, [pc, #356]	@ (8004c84 <PIDStep+0x1b4>)
 8004b1e:	ed93 7a00 	vldr	s14, [r3]
 8004b22:	4b59      	ldr	r3, [pc, #356]	@ (8004c88 <PIDStep+0x1b8>)
 8004b24:	edd3 6a00 	vldr	s13, [r3]
 8004b28:	4858      	ldr	r0, [pc, #352]	@ (8004c8c <PIDStep+0x1bc>)
 8004b2a:	ed9f 3a59 	vldr	s6, [pc, #356]	@ 8004c90 <PIDStep+0x1c0>
 8004b2e:	eddf 2a59 	vldr	s5, [pc, #356]	@ 8004c94 <PIDStep+0x1c4>
 8004b32:	ed9f 2a59 	vldr	s4, [pc, #356]	@ 8004c98 <PIDStep+0x1c8>
 8004b36:	eef0 1a66 	vmov.f32	s3, s13
 8004b3a:	eeb0 1a47 	vmov.f32	s2, s14
 8004b3e:	eef0 0a67 	vmov.f32	s1, s15
 8004b42:	ed97 0a03 	vldr	s0, [r7, #12]
 8004b46:	f7ff fb15 	bl	8004174 <PID_Update>
 8004b4a:	ed87 0a01 	vstr	s0, [r7, #4]
				0.010f, // dt = 10 ms
				-100.0f, +100.0f, &pid_r);

		// Position‐PID → corrective velocity for prismatic
		float P_corr_vel = PID_Update(P_Pos_now, P_kP_pos, P_kI_pos, P_kD_pos,
 8004b4e:	4b53      	ldr	r3, [pc, #332]	@ (8004c9c <PIDStep+0x1cc>)
 8004b50:	edd3 7a00 	vldr	s15, [r3]
 8004b54:	4b52      	ldr	r3, [pc, #328]	@ (8004ca0 <PIDStep+0x1d0>)
 8004b56:	ed93 7a00 	vldr	s14, [r3]
 8004b5a:	4b52      	ldr	r3, [pc, #328]	@ (8004ca4 <PIDStep+0x1d4>)
 8004b5c:	edd3 6a00 	vldr	s13, [r3]
 8004b60:	4851      	ldr	r0, [pc, #324]	@ (8004ca8 <PIDStep+0x1d8>)
 8004b62:	ed9f 3a4b 	vldr	s6, [pc, #300]	@ 8004c90 <PIDStep+0x1c0>
 8004b66:	eddf 2a4b 	vldr	s5, [pc, #300]	@ 8004c94 <PIDStep+0x1c4>
 8004b6a:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 8004c98 <PIDStep+0x1c8>
 8004b6e:	eef0 1a66 	vmov.f32	s3, s13
 8004b72:	eeb0 1a47 	vmov.f32	s2, s14
 8004b76:	eef0 0a67 	vmov.f32	s1, s15
 8004b7a:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b7e:	f7ff faf9 	bl	8004174 <PID_Update>
 8004b82:	ed87 0a00 	vstr	s0, [r7]
				0.010f, -100.0f, +100.0f, &pid_p);

		// Combine with feedforward velocities
		R_Target_Velocity = TargetRVel + R_corr_vel;
 8004b86:	4b49      	ldr	r3, [pc, #292]	@ (8004cac <PIDStep+0x1dc>)
 8004b88:	ed93 7a00 	vldr	s14, [r3]
 8004b8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b94:	4b46      	ldr	r3, [pc, #280]	@ (8004cb0 <PIDStep+0x1e0>)
 8004b96:	edc3 7a00 	vstr	s15, [r3]
		P_Target_Velocity = TargetPVel + P_corr_vel;
 8004b9a:	4b46      	ldr	r3, [pc, #280]	@ (8004cb4 <PIDStep+0x1e4>)
 8004b9c:	ed93 7a00 	vldr	s14, [r3]
 8004ba0:	edd7 7a00 	vldr	s15, [r7]
 8004ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ba8:	4b43      	ldr	r3, [pc, #268]	@ (8004cb8 <PIDStep+0x1e8>)
 8004baa:	edc3 7a00 	vstr	s15, [r3]
	}

	// 3b) Inner‐loop (velocity) PID _every_ 1 ms:
	R_Velo_Error = R_Target_Velocity - Revolute_QEIdata.Velocity_f;
 8004bae:	4b40      	ldr	r3, [pc, #256]	@ (8004cb0 <PIDStep+0x1e0>)
 8004bb0:	ed93 7a00 	vldr	s14, [r3]
 8004bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8004c74 <PIDStep+0x1a4>)
 8004bb6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8004cbc <PIDStep+0x1ec>)
 8004bc0:	edc3 7a00 	vstr	s15, [r3]
	R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel, R_kD_vel, 0.001f, // dt = 1 ms
 8004bc4:	4b3d      	ldr	r3, [pc, #244]	@ (8004cbc <PIDStep+0x1ec>)
 8004bc6:	edd3 7a00 	vldr	s15, [r3]
 8004bca:	4b3d      	ldr	r3, [pc, #244]	@ (8004cc0 <PIDStep+0x1f0>)
 8004bcc:	ed93 7a00 	vldr	s14, [r3]
 8004bd0:	4b3c      	ldr	r3, [pc, #240]	@ (8004cc4 <PIDStep+0x1f4>)
 8004bd2:	edd3 6a00 	vldr	s13, [r3]
 8004bd6:	4b3c      	ldr	r3, [pc, #240]	@ (8004cc8 <PIDStep+0x1f8>)
 8004bd8:	ed93 6a00 	vldr	s12, [r3]
 8004bdc:	483b      	ldr	r0, [pc, #236]	@ (8004ccc <PIDStep+0x1fc>)
 8004bde:	ed9f 3a2c 	vldr	s6, [pc, #176]	@ 8004c90 <PIDStep+0x1c0>
 8004be2:	eddf 2a2c 	vldr	s5, [pc, #176]	@ 8004c94 <PIDStep+0x1c4>
 8004be6:	ed9f 2a3a 	vldr	s4, [pc, #232]	@ 8004cd0 <PIDStep+0x200>
 8004bea:	eef0 1a46 	vmov.f32	s3, s12
 8004bee:	eeb0 1a66 	vmov.f32	s2, s13
 8004bf2:	eef0 0a47 	vmov.f32	s1, s14
 8004bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8004bfa:	f7ff fabb 	bl	8004174 <PID_Update>
 8004bfe:	eef0 7a40 	vmov.f32	s15, s0
 8004c02:	4b34      	ldr	r3, [pc, #208]	@ (8004cd4 <PIDStep+0x204>)
 8004c04:	edc3 7a00 	vstr	s15, [r3]
			-100.0f, +100.0f, &pid_r_v);

	P_Velo_Error = P_Target_Velocity - Prismatic_QEIdata.Velocity_f;
 8004c08:	4b2b      	ldr	r3, [pc, #172]	@ (8004cb8 <PIDStep+0x1e8>)
 8004c0a:	ed93 7a00 	vldr	s14, [r3]
 8004c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c7c <PIDStep+0x1ac>)
 8004c10:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c18:	4b2f      	ldr	r3, [pc, #188]	@ (8004cd8 <PIDStep+0x208>)
 8004c1a:	edc3 7a00 	vstr	s15, [r3]
	P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel, P_kD_vel, 0.001f,
 8004c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8004cd8 <PIDStep+0x208>)
 8004c20:	edd3 7a00 	vldr	s15, [r3]
 8004c24:	4b2d      	ldr	r3, [pc, #180]	@ (8004cdc <PIDStep+0x20c>)
 8004c26:	ed93 7a00 	vldr	s14, [r3]
 8004c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ce0 <PIDStep+0x210>)
 8004c2c:	edd3 6a00 	vldr	s13, [r3]
 8004c30:	4b2c      	ldr	r3, [pc, #176]	@ (8004ce4 <PIDStep+0x214>)
 8004c32:	ed93 6a00 	vldr	s12, [r3]
 8004c36:	482c      	ldr	r0, [pc, #176]	@ (8004ce8 <PIDStep+0x218>)
 8004c38:	ed9f 3a15 	vldr	s6, [pc, #84]	@ 8004c90 <PIDStep+0x1c0>
 8004c3c:	eddf 2a15 	vldr	s5, [pc, #84]	@ 8004c94 <PIDStep+0x1c4>
 8004c40:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 8004cd0 <PIDStep+0x200>
 8004c44:	eef0 1a46 	vmov.f32	s3, s12
 8004c48:	eeb0 1a66 	vmov.f32	s2, s13
 8004c4c:	eef0 0a47 	vmov.f32	s1, s14
 8004c50:	eeb0 0a67 	vmov.f32	s0, s15
 8004c54:	f7ff fa8e 	bl	8004174 <PID_Update>
 8004c58:	eef0 7a40 	vmov.f32	s15, s0
 8004c5c:	4b23      	ldr	r3, [pc, #140]	@ (8004cec <PIDStep+0x21c>)
 8004c5e:	edc3 7a00 	vstr	s15, [r3]
			-100.0f, +100.0f, &pid_p_v);
}
 8004c62:	bf00      	nop
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	200013ec 	.word	0x200013ec
 8004c70:	20000b94 	.word	0x20000b94
 8004c74:	20000af8 	.word	0x20000af8
 8004c78:	20000b98 	.word	0x20000b98
 8004c7c:	20000b38 	.word	0x20000b38
 8004c80:	2000020c 	.word	0x2000020c
 8004c84:	20000210 	.word	0x20000210
 8004c88:	20000214 	.word	0x20000214
 8004c8c:	20000bf8 	.word	0x20000bf8
 8004c90:	42c80000 	.word	0x42c80000
 8004c94:	c2c80000 	.word	0xc2c80000
 8004c98:	3c23d70a 	.word	0x3c23d70a
 8004c9c:	20000220 	.word	0x20000220
 8004ca0:	20000224 	.word	0x20000224
 8004ca4:	20000228 	.word	0x20000228
 8004ca8:	20000c00 	.word	0x20000c00
 8004cac:	20000ba4 	.word	0x20000ba4
 8004cb0:	200013f0 	.word	0x200013f0
 8004cb4:	20000ba8 	.word	0x20000ba8
 8004cb8:	200013f4 	.word	0x200013f4
 8004cbc:	20000bbc 	.word	0x20000bbc
 8004cc0:	20000200 	.word	0x20000200
 8004cc4:	20000204 	.word	0x20000204
 8004cc8:	20000208 	.word	0x20000208
 8004ccc:	20000c08 	.word	0x20000c08
 8004cd0:	3a83126f 	.word	0x3a83126f
 8004cd4:	20000bc4 	.word	0x20000bc4
 8004cd8:	20000bc0 	.word	0x20000bc0
 8004cdc:	20000218 	.word	0x20000218
 8004ce0:	2000021c 	.word	0x2000021c
 8004ce4:	20000c18 	.word	0x20000c18
 8004ce8:	20000c10 	.word	0x20000c10
 8004cec:	20000bc8 	.word	0x20000bc8

08004cf0 <ToleranceCheck>:

int ToleranceCheck(void) {
 8004cf0:	b5b0      	push	{r4, r5, r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
	static uint64_t lock_timer_us = 0;

	if ((fabsf(TargetR - Revolute_QEIdata.RadPosition) < R_ERR_TOL_RAD)
 8004cf4:	4b24      	ldr	r3, [pc, #144]	@ (8004d88 <ToleranceCheck+0x98>)
 8004cf6:	ed93 7a00 	vldr	s14, [r3]
 8004cfa:	4b24      	ldr	r3, [pc, #144]	@ (8004d8c <ToleranceCheck+0x9c>)
 8004cfc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d04:	eef0 7ae7 	vabs.f32	s15, s15
 8004d08:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004d90 <ToleranceCheck+0xa0>
 8004d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d14:	d52c      	bpl.n	8004d70 <ToleranceCheck+0x80>
			&& (fabsf(TargetP - Prismatic_QEIdata.mmPosition) < P_ERR_TOL_MM)) {
 8004d16:	4b1f      	ldr	r3, [pc, #124]	@ (8004d94 <ToleranceCheck+0xa4>)
 8004d18:	ed93 7a00 	vldr	s14, [r3]
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004d98 <ToleranceCheck+0xa8>)
 8004d1e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d26:	eef0 7ae7 	vabs.f32	s15, s15
 8004d2a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004d9c <ToleranceCheck+0xac>
 8004d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d36:	d51b      	bpl.n	8004d70 <ToleranceCheck+0x80>
		if (lock_timer_us == 0) {
 8004d38:	4b19      	ldr	r3, [pc, #100]	@ (8004da0 <ToleranceCheck+0xb0>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	d107      	bne.n	8004d52 <ToleranceCheck+0x62>
			lock_timer_us = micros();
 8004d42:	f7ff f9fd 	bl	8004140 <micros>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4915      	ldr	r1, [pc, #84]	@ (8004da0 <ToleranceCheck+0xb0>)
 8004d4c:	e9c1 2300 	strd	r2, r3, [r1]
		if (lock_timer_us == 0) {
 8004d50:	e016      	b.n	8004d80 <ToleranceCheck+0x90>
		} else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8004d52:	f7ff f9f5 	bl	8004140 <micros>
 8004d56:	4b12      	ldr	r3, [pc, #72]	@ (8004da0 <ToleranceCheck+0xb0>)
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	1a84      	subs	r4, r0, r2
 8004d5e:	eb61 0503 	sbc.w	r5, r1, r3
 8004d62:	4b10      	ldr	r3, [pc, #64]	@ (8004da4 <ToleranceCheck+0xb4>)
 8004d64:	429c      	cmp	r4, r3
 8004d66:	f175 0300 	sbcs.w	r3, r5, #0
 8004d6a:	d309      	bcc.n	8004d80 <ToleranceCheck+0x90>
			// We have stayed inside tolerance for long enough → “lock & hold”
			return 1;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e009      	b.n	8004d84 <ToleranceCheck+0x94>
		}
	} else {
		lock_timer_us = 0;
 8004d70:	490b      	ldr	r1, [pc, #44]	@ (8004da0 <ToleranceCheck+0xb0>)
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	e9c1 2300 	strd	r2, r3, [r1]
 8004d7e:	e000      	b.n	8004d82 <ToleranceCheck+0x92>
		if (lock_timer_us == 0) {
 8004d80:	bf00      	nop
	}

	return 0;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bdb0      	pop	{r4, r5, r7, pc}
 8004d88:	20000b94 	.word	0x20000b94
 8004d8c:	20000af8 	.word	0x20000af8
 8004d90:	3d0b4396 	.word	0x3d0b4396
 8004d94:	20000b98 	.word	0x20000b98
 8004d98:	20000b38 	.word	0x20000b38
 8004d9c:	3e4ccccd 	.word	0x3e4ccccd
 8004da0:	200013f8 	.word	0x200013f8
 8004da4:	000f4240 	.word	0x000f4240

08004da8 <CascadeControl_Step>:

int CascadeControl_Step(void) {
 8004da8:	b5b0      	push	{r4, r5, r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
	static uint64_t timestampState2 = 0;

	// 1a) Convert desired‐angle (deg) → (rad) and compute current pos‐errors
	// float TargetR = TargetR_Deg * (M_PI / 180.0f);
	R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8004dae:	4b34      	ldr	r3, [pc, #208]	@ (8004e80 <CascadeControl_Step+0xd8>)
 8004db0:	ed93 7a00 	vldr	s14, [r3]
 8004db4:	4b33      	ldr	r3, [pc, #204]	@ (8004e84 <CascadeControl_Step+0xdc>)
 8004db6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dbe:	4b32      	ldr	r3, [pc, #200]	@ (8004e88 <CascadeControl_Step+0xe0>)
 8004dc0:	edc3 7a00 	vstr	s15, [r3]
	P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8004dc4:	4b31      	ldr	r3, [pc, #196]	@ (8004e8c <CascadeControl_Step+0xe4>)
 8004dc6:	ed93 7a00 	vldr	s14, [r3]
 8004dca:	4b31      	ldr	r3, [pc, #196]	@ (8004e90 <CascadeControl_Step+0xe8>)
 8004dcc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8004e94 <CascadeControl_Step+0xec>)
 8004dd6:	edc3 7a00 	vstr	s15, [r3]
	R_Pos_Error_Deg = R_Pos_Error * (180.0f / M_PI);
 8004dda:	4b2b      	ldr	r3, [pc, #172]	@ (8004e88 <CascadeControl_Step+0xe0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fb fb7e 	bl	80004e0 <__aeabi_f2d>
 8004de4:	a324      	add	r3, pc, #144	@ (adr r3, 8004e78 <CascadeControl_Step+0xd0>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	f7fb fbd1 	bl	8000590 <__aeabi_dmul>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4610      	mov	r0, r2
 8004df4:	4619      	mov	r1, r3
 8004df6:	f7fb fe85 	bl	8000b04 <__aeabi_d2f>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4a26      	ldr	r2, [pc, #152]	@ (8004e98 <CascadeControl_Step+0xf0>)
 8004dfe:	6013      	str	r3, [r2, #0]

	// 1b) 1 ms timer check
	uint64_t nowtimestamp = micros();
 8004e00:	f7ff f99e 	bl	8004140 <micros>
 8004e04:	e9c7 0100 	strd	r0, r1, [r7]
	if (nowtimestamp <= timestampState2) {
 8004e08:	4b24      	ldr	r3, [pc, #144]	@ (8004e9c <CascadeControl_Step+0xf4>)
 8004e0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e12:	4290      	cmp	r0, r2
 8004e14:	eb71 0303 	sbcs.w	r3, r1, r3
 8004e18:	d301      	bcc.n	8004e1e <CascadeControl_Step+0x76>
		// Not yet 1 ms since last run → bail out
		return 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e026      	b.n	8004e6c <CascadeControl_Step+0xc4>
	}
	// Advance to next 1 ms tick
	timestampState2 = nowtimestamp + 1000;
 8004e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e22:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8004e26:	f143 0500 	adc.w	r5, r3, #0
 8004e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8004e9c <CascadeControl_Step+0xf4>)
 8004e2c:	e9c3 4500 	strd	r4, r5, [r3]

	// 2) Trapezoid logic: init if needed + update (1 ms)
	TrapezoidStep();
 8004e30:	f7ff fdb4 	bl	800499c <TrapezoidStep>

	// 3) PID logic: 10 ms outer, 1 ms inner
	PIDStep();
 8004e34:	f7ff fe4c 	bl	8004ad0 <PIDStep>

	// 4) Apply workspace limits (joint‐limits, etc.) and send the PWM commands
	Workspace_limit();
 8004e38:	f7ff fcfe 	bl	8004838 <Workspace_limit>
	Set_Motor(0, R_PWM);
 8004e3c:	4b18      	ldr	r3, [pc, #96]	@ (8004ea0 <CascadeControl_Step+0xf8>)
 8004e3e:	edd3 7a00 	vldr	s15, [r3]
 8004e42:	eeb0 0a67 	vmov.f32	s0, s15
 8004e46:	2000      	movs	r0, #0
 8004e48:	f7ff fc2c 	bl	80046a4 <Set_Motor>
	Set_Motor(1, P_PWM);
 8004e4c:	4b15      	ldr	r3, [pc, #84]	@ (8004ea4 <CascadeControl_Step+0xfc>)
 8004e4e:	edd3 7a00 	vldr	s15, [r3]
 8004e52:	eeb0 0a67 	vmov.f32	s0, s15
 8004e56:	2001      	movs	r0, #1
 8004e58:	f7ff fc24 	bl	80046a4 <Set_Motor>

	// 5) Tolerance‐check + “lock & hold” (servo + zero motors) if arrived
	CheckTolerance = ToleranceCheck();
 8004e5c:	f7ff ff48 	bl	8004cf0 <ToleranceCheck>
 8004e60:	4603      	mov	r3, r0
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	4b10      	ldr	r3, [pc, #64]	@ (8004ea8 <CascadeControl_Step+0x100>)
 8004e66:	701a      	strb	r2, [r3, #0]
	return CheckTolerance;
 8004e68:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea8 <CascadeControl_Step+0x100>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
//	return ToleranceCheck();
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bdb0      	pop	{r4, r5, r7, pc}
 8004e74:	f3af 8000 	nop.w
 8004e78:	1a63c1f8 	.word	0x1a63c1f8
 8004e7c:	404ca5dc 	.word	0x404ca5dc
 8004e80:	20000b94 	.word	0x20000b94
 8004e84:	20000af8 	.word	0x20000af8
 8004e88:	20000bb4 	.word	0x20000bb4
 8004e8c:	20000b98 	.word	0x20000b98
 8004e90:	20000b38 	.word	0x20000b38
 8004e94:	20000bb8 	.word	0x20000bb8
 8004e98:	20000aac 	.word	0x20000aac
 8004e9c:	20001400 	.word	0x20001400
 8004ea0:	20000bc4 	.word	0x20000bc4
 8004ea4:	20000bc8 	.word	0x20000bc8
 8004ea8:	20001328 	.word	0x20001328

08004eac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004eb0:	b672      	cpsid	i
}
 8004eb2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004eb4:	bf00      	nop
 8004eb6:	e7fd      	b.n	8004eb4 <Error_Handler+0x8>

08004eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8004efc <HAL_MspInit+0x44>)
 8004ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8004efc <HAL_MspInit+0x44>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	6613      	str	r3, [r2, #96]	@ 0x60
 8004eca:	4b0c      	ldr	r3, [pc, #48]	@ (8004efc <HAL_MspInit+0x44>)
 8004ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	607b      	str	r3, [r7, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ed6:	4b09      	ldr	r3, [pc, #36]	@ (8004efc <HAL_MspInit+0x44>)
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eda:	4a08      	ldr	r2, [pc, #32]	@ (8004efc <HAL_MspInit+0x44>)
 8004edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ee2:	4b06      	ldr	r3, [pc, #24]	@ (8004efc <HAL_MspInit+0x44>)
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004eee:	f001 fa97 	bl	8006420 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40021000 	.word	0x40021000

08004f00 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08c      	sub	sp, #48	@ 0x30
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f08:	f107 031c 	add.w	r3, r7, #28
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	605a      	str	r2, [r3, #4]
 8004f12:	609a      	str	r2, [r3, #8]
 8004f14:	60da      	str	r2, [r3, #12]
 8004f16:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a32      	ldr	r2, [pc, #200]	@ (8004fe8 <HAL_TIM_IC_MspInit+0xe8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d130      	bne.n	8004f84 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f22:	4b32      	ldr	r3, [pc, #200]	@ (8004fec <HAL_TIM_IC_MspInit+0xec>)
 8004f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f26:	4a31      	ldr	r2, [pc, #196]	@ (8004fec <HAL_TIM_IC_MspInit+0xec>)
 8004f28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004f2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8004fec <HAL_TIM_IC_MspInit+0xec>)
 8004f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f36:	61bb      	str	r3, [r7, #24]
 8004f38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8004fec <HAL_TIM_IC_MspInit+0xec>)
 8004f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8004fec <HAL_TIM_IC_MspInit+0xec>)
 8004f40:	f043 0304 	orr.w	r3, r3, #4
 8004f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f46:	4b29      	ldr	r3, [pc, #164]	@ (8004fec <HAL_TIM_IC_MspInit+0xec>)
 8004f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004f52:	2302      	movs	r3, #2
 8004f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f56:	2302      	movs	r3, #2
 8004f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004f62:	2302      	movs	r3, #2
 8004f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f66:	f107 031c 	add.w	r3, r7, #28
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4820      	ldr	r0, [pc, #128]	@ (8004ff0 <HAL_TIM_IC_MspInit+0xf0>)
 8004f6e:	f000 ffe9 	bl	8005f44 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004f72:	2200      	movs	r2, #0
 8004f74:	2100      	movs	r1, #0
 8004f76:	2019      	movs	r0, #25
 8004f78:	f000 fc7d 	bl	8005876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004f7c:	2019      	movs	r0, #25
 8004f7e:	f000 fc94 	bl	80058aa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004f82:	e02d      	b.n	8004fe0 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f8c:	d128      	bne.n	8004fe0 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f8e:	4b17      	ldr	r3, [pc, #92]	@ (8004fec <HAL_TIM_IC_MspInit+0xec>)
 8004f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f92:	4a16      	ldr	r2, [pc, #88]	@ (8004fec <HAL_TIM_IC_MspInit+0xec>)
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f9a:	4b14      	ldr	r3, [pc, #80]	@ (8004fec <HAL_TIM_IC_MspInit+0xec>)
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fa6:	4b11      	ldr	r3, [pc, #68]	@ (8004fec <HAL_TIM_IC_MspInit+0xec>)
 8004fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004faa:	4a10      	ldr	r2, [pc, #64]	@ (8004fec <HAL_TIM_IC_MspInit+0xec>)
 8004fac:	f043 0301 	orr.w	r3, r3, #1
 8004fb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8004fec <HAL_TIM_IC_MspInit+0xec>)
 8004fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fd2:	f107 031c 	add.w	r3, r7, #28
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004fdc:	f000 ffb2 	bl	8005f44 <HAL_GPIO_Init>
}
 8004fe0:	bf00      	nop
 8004fe2:	3730      	adds	r7, #48	@ 0x30
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	48000800 	.word	0x48000800

08004ff4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08c      	sub	sp, #48	@ 0x30
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ffc:	f107 031c 	add.w	r3, r7, #28
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	609a      	str	r2, [r3, #8]
 8005008:	60da      	str	r2, [r3, #12]
 800500a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a37      	ldr	r2, [pc, #220]	@ (80050f0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d130      	bne.n	8005078 <HAL_TIM_Encoder_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005016:	4b37      	ldr	r3, [pc, #220]	@ (80050f4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800501a:	4a36      	ldr	r2, [pc, #216]	@ (80050f4 <HAL_TIM_Encoder_MspInit+0x100>)
 800501c:	f043 0302 	orr.w	r3, r3, #2
 8005020:	6593      	str	r3, [r2, #88]	@ 0x58
 8005022:	4b34      	ldr	r3, [pc, #208]	@ (80050f4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800502e:	4b31      	ldr	r3, [pc, #196]	@ (80050f4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005032:	4a30      	ldr	r2, [pc, #192]	@ (80050f4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005034:	f043 0302 	orr.w	r3, r3, #2
 8005038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800503a:	4b2e      	ldr	r3, [pc, #184]	@ (80050f4 <HAL_TIM_Encoder_MspInit+0x100>)
 800503c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005046:	2330      	movs	r3, #48	@ 0x30
 8005048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800504a:	2302      	movs	r3, #2
 800504c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504e:	2300      	movs	r3, #0
 8005050:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005052:	2300      	movs	r3, #0
 8005054:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005056:	2302      	movs	r3, #2
 8005058:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800505a:	f107 031c 	add.w	r3, r7, #28
 800505e:	4619      	mov	r1, r3
 8005060:	4825      	ldr	r0, [pc, #148]	@ (80050f8 <HAL_TIM_Encoder_MspInit+0x104>)
 8005062:	f000 ff6f 	bl	8005f44 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005066:	2200      	movs	r2, #0
 8005068:	2100      	movs	r1, #0
 800506a:	201d      	movs	r0, #29
 800506c:	f000 fc03 	bl	8005876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005070:	201d      	movs	r0, #29
 8005072:	f000 fc1a 	bl	80058aa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005076:	e036      	b.n	80050e6 <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM4)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1f      	ldr	r2, [pc, #124]	@ (80050fc <HAL_TIM_Encoder_MspInit+0x108>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d131      	bne.n	80050e6 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005082:	4b1c      	ldr	r3, [pc, #112]	@ (80050f4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005086:	4a1b      	ldr	r2, [pc, #108]	@ (80050f4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005088:	f043 0304 	orr.w	r3, r3, #4
 800508c:	6593      	str	r3, [r2, #88]	@ 0x58
 800508e:	4b19      	ldr	r3, [pc, #100]	@ (80050f4 <HAL_TIM_Encoder_MspInit+0x100>)
 8005090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800509a:	4b16      	ldr	r3, [pc, #88]	@ (80050f4 <HAL_TIM_Encoder_MspInit+0x100>)
 800509c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800509e:	4a15      	ldr	r2, [pc, #84]	@ (80050f4 <HAL_TIM_Encoder_MspInit+0x100>)
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050a6:	4b13      	ldr	r3, [pc, #76]	@ (80050f4 <HAL_TIM_Encoder_MspInit+0x100>)
 80050a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80050b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80050b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b8:	2302      	movs	r3, #2
 80050ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050bc:	2300      	movs	r3, #0
 80050be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c0:	2300      	movs	r3, #0
 80050c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80050c4:	230a      	movs	r3, #10
 80050c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c8:	f107 031c 	add.w	r3, r7, #28
 80050cc:	4619      	mov	r1, r3
 80050ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80050d2:	f000 ff37 	bl	8005f44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80050d6:	2200      	movs	r2, #0
 80050d8:	2100      	movs	r1, #0
 80050da:	201e      	movs	r0, #30
 80050dc:	f000 fbcb 	bl	8005876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80050e0:	201e      	movs	r0, #30
 80050e2:	f000 fbe2 	bl	80058aa <HAL_NVIC_EnableIRQ>
}
 80050e6:	bf00      	nop
 80050e8:	3730      	adds	r7, #48	@ 0x30
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40021000 	.word	0x40021000
 80050f8:	48000400 	.word	0x48000400
 80050fc:	40000800 	.word	0x40000800

08005100 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a2c      	ldr	r2, [pc, #176]	@ (80051c0 <HAL_TIM_Base_MspInit+0xc0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d114      	bne.n	800513c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005112:	4b2c      	ldr	r3, [pc, #176]	@ (80051c4 <HAL_TIM_Base_MspInit+0xc4>)
 8005114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005116:	4a2b      	ldr	r2, [pc, #172]	@ (80051c4 <HAL_TIM_Base_MspInit+0xc4>)
 8005118:	f043 0308 	orr.w	r3, r3, #8
 800511c:	6593      	str	r3, [r2, #88]	@ 0x58
 800511e:	4b29      	ldr	r3, [pc, #164]	@ (80051c4 <HAL_TIM_Base_MspInit+0xc4>)
 8005120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800512a:	2200      	movs	r2, #0
 800512c:	2100      	movs	r1, #0
 800512e:	2032      	movs	r0, #50	@ 0x32
 8005130:	f000 fba1 	bl	8005876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005134:	2032      	movs	r0, #50	@ 0x32
 8005136:	f000 fbb8 	bl	80058aa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 800513a:	e03c      	b.n	80051b6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a21      	ldr	r2, [pc, #132]	@ (80051c8 <HAL_TIM_Base_MspInit+0xc8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d10c      	bne.n	8005160 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005146:	4b1f      	ldr	r3, [pc, #124]	@ (80051c4 <HAL_TIM_Base_MspInit+0xc4>)
 8005148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800514a:	4a1e      	ldr	r2, [pc, #120]	@ (80051c4 <HAL_TIM_Base_MspInit+0xc4>)
 800514c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005150:	6613      	str	r3, [r2, #96]	@ 0x60
 8005152:	4b1c      	ldr	r3, [pc, #112]	@ (80051c4 <HAL_TIM_Base_MspInit+0xc4>)
 8005154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005156:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	693b      	ldr	r3, [r7, #16]
}
 800515e:	e02a      	b.n	80051b6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM15)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a19      	ldr	r2, [pc, #100]	@ (80051cc <HAL_TIM_Base_MspInit+0xcc>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d10c      	bne.n	8005184 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800516a:	4b16      	ldr	r3, [pc, #88]	@ (80051c4 <HAL_TIM_Base_MspInit+0xc4>)
 800516c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800516e:	4a15      	ldr	r2, [pc, #84]	@ (80051c4 <HAL_TIM_Base_MspInit+0xc4>)
 8005170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005174:	6613      	str	r3, [r2, #96]	@ 0x60
 8005176:	4b13      	ldr	r3, [pc, #76]	@ (80051c4 <HAL_TIM_Base_MspInit+0xc4>)
 8005178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800517a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
}
 8005182:	e018      	b.n	80051b6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a11      	ldr	r2, [pc, #68]	@ (80051d0 <HAL_TIM_Base_MspInit+0xd0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d113      	bne.n	80051b6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800518e:	4b0d      	ldr	r3, [pc, #52]	@ (80051c4 <HAL_TIM_Base_MspInit+0xc4>)
 8005190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005192:	4a0c      	ldr	r2, [pc, #48]	@ (80051c4 <HAL_TIM_Base_MspInit+0xc4>)
 8005194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005198:	6613      	str	r3, [r2, #96]	@ 0x60
 800519a:	4b0a      	ldr	r3, [pc, #40]	@ (80051c4 <HAL_TIM_Base_MspInit+0xc4>)
 800519c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800519e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a2:	60bb      	str	r3, [r7, #8]
 80051a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80051a6:	2200      	movs	r2, #0
 80051a8:	2100      	movs	r1, #0
 80051aa:	2019      	movs	r0, #25
 80051ac:	f000 fb63 	bl	8005876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80051b0:	2019      	movs	r0, #25
 80051b2:	f000 fb7a 	bl	80058aa <HAL_NVIC_EnableIRQ>
}
 80051b6:	bf00      	nop
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40000c00 	.word	0x40000c00
 80051c4:	40021000 	.word	0x40021000
 80051c8:	40013400 	.word	0x40013400
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400

080051d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	@ 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051dc:	f107 0314 	add.w	r3, r7, #20
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	609a      	str	r2, [r3, #8]
 80051e8:	60da      	str	r2, [r3, #12]
 80051ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a23      	ldr	r2, [pc, #140]	@ (8005280 <HAL_TIM_MspPostInit+0xac>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d11d      	bne.n	8005232 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051f6:	4b23      	ldr	r3, [pc, #140]	@ (8005284 <HAL_TIM_MspPostInit+0xb0>)
 80051f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051fa:	4a22      	ldr	r2, [pc, #136]	@ (8005284 <HAL_TIM_MspPostInit+0xb0>)
 80051fc:	f043 0304 	orr.w	r3, r3, #4
 8005200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005202:	4b20      	ldr	r3, [pc, #128]	@ (8005284 <HAL_TIM_MspPostInit+0xb0>)
 8005204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005206:	f003 0304 	and.w	r3, r3, #4
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800520e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005214:	2302      	movs	r3, #2
 8005216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005218:	2300      	movs	r3, #0
 800521a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800521c:	2300      	movs	r3, #0
 800521e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005220:	2304      	movs	r3, #4
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005224:	f107 0314 	add.w	r3, r7, #20
 8005228:	4619      	mov	r1, r3
 800522a:	4817      	ldr	r0, [pc, #92]	@ (8005288 <HAL_TIM_MspPostInit+0xb4>)
 800522c:	f000 fe8a 	bl	8005f44 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005230:	e021      	b.n	8005276 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a15      	ldr	r2, [pc, #84]	@ (800528c <HAL_TIM_MspPostInit+0xb8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d11c      	bne.n	8005276 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800523c:	4b11      	ldr	r3, [pc, #68]	@ (8005284 <HAL_TIM_MspPostInit+0xb0>)
 800523e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005240:	4a10      	ldr	r2, [pc, #64]	@ (8005284 <HAL_TIM_MspPostInit+0xb0>)
 8005242:	f043 0302 	orr.w	r3, r3, #2
 8005246:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005248:	4b0e      	ldr	r3, [pc, #56]	@ (8005284 <HAL_TIM_MspPostInit+0xb0>)
 800524a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005254:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800525a:	2302      	movs	r3, #2
 800525c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005262:	2300      	movs	r3, #0
 8005264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8005266:	2301      	movs	r3, #1
 8005268:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800526a:	f107 0314 	add.w	r3, r7, #20
 800526e:	4619      	mov	r1, r3
 8005270:	4807      	ldr	r0, [pc, #28]	@ (8005290 <HAL_TIM_MspPostInit+0xbc>)
 8005272:	f000 fe67 	bl	8005f44 <HAL_GPIO_Init>
}
 8005276:	bf00      	nop
 8005278:	3728      	adds	r7, #40	@ 0x28
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40013400 	.word	0x40013400
 8005284:	40021000 	.word	0x40021000
 8005288:	48000800 	.word	0x48000800
 800528c:	40014000 	.word	0x40014000
 8005290:	48000400 	.word	0x48000400

08005294 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b09e      	sub	sp, #120	@ 0x78
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800529c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	605a      	str	r2, [r3, #4]
 80052a6:	609a      	str	r2, [r3, #8]
 80052a8:	60da      	str	r2, [r3, #12]
 80052aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80052ac:	f107 0310 	add.w	r3, r7, #16
 80052b0:	2254      	movs	r2, #84	@ 0x54
 80052b2:	2100      	movs	r1, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f006 fcc7 	bl	800bc48 <memset>
  if(huart->Instance==USART2)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a4d      	ldr	r2, [pc, #308]	@ (80053f4 <HAL_UART_MspInit+0x160>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	f040 8092 	bne.w	80053ea <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80052c6:	2302      	movs	r3, #2
 80052c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052ce:	f107 0310 	add.w	r3, r7, #16
 80052d2:	4618      	mov	r0, r3
 80052d4:	f001 fde2 	bl	8006e9c <HAL_RCCEx_PeriphCLKConfig>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80052de:	f7ff fde5 	bl	8004eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80052e2:	4b45      	ldr	r3, [pc, #276]	@ (80053f8 <HAL_UART_MspInit+0x164>)
 80052e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e6:	4a44      	ldr	r2, [pc, #272]	@ (80053f8 <HAL_UART_MspInit+0x164>)
 80052e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80052ee:	4b42      	ldr	r3, [pc, #264]	@ (80053f8 <HAL_UART_MspInit+0x164>)
 80052f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052fa:	4b3f      	ldr	r3, [pc, #252]	@ (80053f8 <HAL_UART_MspInit+0x164>)
 80052fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052fe:	4a3e      	ldr	r2, [pc, #248]	@ (80053f8 <HAL_UART_MspInit+0x164>)
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005306:	4b3c      	ldr	r3, [pc, #240]	@ (80053f8 <HAL_UART_MspInit+0x164>)
 8005308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005312:	230c      	movs	r3, #12
 8005314:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005316:	2302      	movs	r3, #2
 8005318:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531a:	2300      	movs	r3, #0
 800531c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800531e:	2300      	movs	r3, #0
 8005320:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005322:	2307      	movs	r3, #7
 8005324:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005326:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800532a:	4619      	mov	r1, r3
 800532c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005330:	f000 fe08 	bl	8005f44 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8005334:	4b31      	ldr	r3, [pc, #196]	@ (80053fc <HAL_UART_MspInit+0x168>)
 8005336:	4a32      	ldr	r2, [pc, #200]	@ (8005400 <HAL_UART_MspInit+0x16c>)
 8005338:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800533a:	4b30      	ldr	r3, [pc, #192]	@ (80053fc <HAL_UART_MspInit+0x168>)
 800533c:	221a      	movs	r2, #26
 800533e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005340:	4b2e      	ldr	r3, [pc, #184]	@ (80053fc <HAL_UART_MspInit+0x168>)
 8005342:	2200      	movs	r2, #0
 8005344:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005346:	4b2d      	ldr	r3, [pc, #180]	@ (80053fc <HAL_UART_MspInit+0x168>)
 8005348:	2200      	movs	r2, #0
 800534a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800534c:	4b2b      	ldr	r3, [pc, #172]	@ (80053fc <HAL_UART_MspInit+0x168>)
 800534e:	2280      	movs	r2, #128	@ 0x80
 8005350:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005352:	4b2a      	ldr	r3, [pc, #168]	@ (80053fc <HAL_UART_MspInit+0x168>)
 8005354:	2200      	movs	r2, #0
 8005356:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005358:	4b28      	ldr	r3, [pc, #160]	@ (80053fc <HAL_UART_MspInit+0x168>)
 800535a:	2200      	movs	r2, #0
 800535c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800535e:	4b27      	ldr	r3, [pc, #156]	@ (80053fc <HAL_UART_MspInit+0x168>)
 8005360:	2200      	movs	r2, #0
 8005362:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005364:	4b25      	ldr	r3, [pc, #148]	@ (80053fc <HAL_UART_MspInit+0x168>)
 8005366:	2200      	movs	r2, #0
 8005368:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800536a:	4824      	ldr	r0, [pc, #144]	@ (80053fc <HAL_UART_MspInit+0x168>)
 800536c:	f000 fab8 	bl	80058e0 <HAL_DMA_Init>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8005376:	f7ff fd99 	bl	8004eac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a1f      	ldr	r2, [pc, #124]	@ (80053fc <HAL_UART_MspInit+0x168>)
 800537e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005382:	4a1e      	ldr	r2, [pc, #120]	@ (80053fc <HAL_UART_MspInit+0x168>)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8005388:	4b1e      	ldr	r3, [pc, #120]	@ (8005404 <HAL_UART_MspInit+0x170>)
 800538a:	4a1f      	ldr	r2, [pc, #124]	@ (8005408 <HAL_UART_MspInit+0x174>)
 800538c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800538e:	4b1d      	ldr	r3, [pc, #116]	@ (8005404 <HAL_UART_MspInit+0x170>)
 8005390:	221b      	movs	r2, #27
 8005392:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005394:	4b1b      	ldr	r3, [pc, #108]	@ (8005404 <HAL_UART_MspInit+0x170>)
 8005396:	2210      	movs	r2, #16
 8005398:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800539a:	4b1a      	ldr	r3, [pc, #104]	@ (8005404 <HAL_UART_MspInit+0x170>)
 800539c:	2200      	movs	r2, #0
 800539e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80053a0:	4b18      	ldr	r3, [pc, #96]	@ (8005404 <HAL_UART_MspInit+0x170>)
 80053a2:	2280      	movs	r2, #128	@ 0x80
 80053a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053a6:	4b17      	ldr	r3, [pc, #92]	@ (8005404 <HAL_UART_MspInit+0x170>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053ac:	4b15      	ldr	r3, [pc, #84]	@ (8005404 <HAL_UART_MspInit+0x170>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80053b2:	4b14      	ldr	r3, [pc, #80]	@ (8005404 <HAL_UART_MspInit+0x170>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80053b8:	4b12      	ldr	r3, [pc, #72]	@ (8005404 <HAL_UART_MspInit+0x170>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80053be:	4811      	ldr	r0, [pc, #68]	@ (8005404 <HAL_UART_MspInit+0x170>)
 80053c0:	f000 fa8e 	bl	80058e0 <HAL_DMA_Init>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80053ca:	f7ff fd6f 	bl	8004eac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005404 <HAL_UART_MspInit+0x170>)
 80053d2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80053d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005404 <HAL_UART_MspInit+0x170>)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80053da:	2200      	movs	r2, #0
 80053dc:	2100      	movs	r1, #0
 80053de:	2026      	movs	r0, #38	@ 0x26
 80053e0:	f000 fa49 	bl	8005876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80053e4:	2026      	movs	r0, #38	@ 0x26
 80053e6:	f000 fa60 	bl	80058aa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80053ea:	bf00      	nop
 80053ec:	3778      	adds	r7, #120	@ 0x78
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40004400 	.word	0x40004400
 80053f8:	40021000 	.word	0x40021000
 80053fc:	200009dc 	.word	0x200009dc
 8005400:	40020008 	.word	0x40020008
 8005404:	20000a3c 	.word	0x20000a3c
 8005408:	4002001c 	.word	0x4002001c

0800540c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005410:	bf00      	nop
 8005412:	e7fd      	b.n	8005410 <NMI_Handler+0x4>

08005414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005418:	bf00      	nop
 800541a:	e7fd      	b.n	8005418 <HardFault_Handler+0x4>

0800541c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005420:	bf00      	nop
 8005422:	e7fd      	b.n	8005420 <MemManage_Handler+0x4>

08005424 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005428:	bf00      	nop
 800542a:	e7fd      	b.n	8005428 <BusFault_Handler+0x4>

0800542c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <UsageFault_Handler+0x4>

08005434 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005438:	bf00      	nop
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005442:	b480      	push	{r7}
 8005444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005446:	bf00      	nop
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005462:	f000 f90f 	bl	8005684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005466:	bf00      	nop
 8005468:	bd80      	pop	{r7, pc}

0800546a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800546e:	2001      	movs	r0, #1
 8005470:	f000 ff1a 	bl	80062a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005474:	bf00      	nop
 8005476:	bd80      	pop	{r7, pc}

08005478 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800547c:	2004      	movs	r0, #4
 800547e:	f000 ff13 	bl	80062a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005482:	bf00      	nop
 8005484:	bd80      	pop	{r7, pc}

08005486 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800548a:	2008      	movs	r0, #8
 800548c:	f000 ff0c 	bl	80062a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005490:	bf00      	nop
 8005492:	bd80      	pop	{r7, pc}

08005494 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005498:	4802      	ldr	r0, [pc, #8]	@ (80054a4 <DMA1_Channel1_IRQHandler+0x10>)
 800549a:	f000 fc04 	bl	8005ca6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800549e:	bf00      	nop
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	200009dc 	.word	0x200009dc

080054a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80054ac:	4802      	ldr	r0, [pc, #8]	@ (80054b8 <DMA1_Channel2_IRQHandler+0x10>)
 80054ae:	f000 fbfa 	bl	8005ca6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80054b2:	bf00      	nop
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000a3c 	.word	0x20000a3c

080054bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80054c0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80054c4:	f000 fef0 	bl	80062a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80054c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80054cc:	f000 feec 	bl	80062a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80054d0:	bf00      	nop
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80054d8:	4803      	ldr	r0, [pc, #12]	@ (80054e8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80054da:	f002 fd99 	bl	8008010 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80054de:	4803      	ldr	r0, [pc, #12]	@ (80054ec <TIM1_UP_TIM16_IRQHandler+0x18>)
 80054e0:	f002 fd96 	bl	8008010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80054e4:	bf00      	nop
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	200002b0 	.word	0x200002b0
 80054ec:	20000844 	.word	0x20000844

080054f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80054f4:	4802      	ldr	r0, [pc, #8]	@ (8005500 <TIM3_IRQHandler+0x10>)
 80054f6:	f002 fd8b 	bl	8008010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80054fa:	bf00      	nop
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20000448 	.word	0x20000448

08005504 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005508:	4802      	ldr	r0, [pc, #8]	@ (8005514 <TIM4_IRQHandler+0x10>)
 800550a:	f002 fd81 	bl	8008010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800550e:	bf00      	nop
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000514 	.word	0x20000514

08005518 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800551c:	4802      	ldr	r0, [pc, #8]	@ (8005528 <USART2_IRQHandler+0x10>)
 800551e:	f004 fe33 	bl	800a188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005522:	bf00      	nop
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000910 	.word	0x20000910

0800552c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005530:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005534:	f000 feb8 	bl	80062a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005538:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800553c:	f000 feb4 	bl	80062a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005540:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005544:	f000 feb0 	bl	80062a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005548:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800554c:	f000 feac 	bl	80062a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005550:	bf00      	nop
 8005552:	bd80      	pop	{r7, pc}

08005554 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005558:	4802      	ldr	r0, [pc, #8]	@ (8005564 <TIM5_IRQHandler+0x10>)
 800555a:	f002 fd59 	bl	8008010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800555e:	bf00      	nop
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	200005e0 	.word	0x200005e0

08005568 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800556c:	4b06      	ldr	r3, [pc, #24]	@ (8005588 <SystemInit+0x20>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005572:	4a05      	ldr	r2, [pc, #20]	@ (8005588 <SystemInit+0x20>)
 8005574:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005578:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800557c:	bf00      	nop
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	e000ed00 	.word	0xe000ed00

0800558c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800558c:	480d      	ldr	r0, [pc, #52]	@ (80055c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800558e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005590:	f7ff ffea 	bl	8005568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005594:	480c      	ldr	r0, [pc, #48]	@ (80055c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005596:	490d      	ldr	r1, [pc, #52]	@ (80055cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005598:	4a0d      	ldr	r2, [pc, #52]	@ (80055d0 <LoopForever+0xe>)
  movs r3, #0
 800559a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800559c:	e002      	b.n	80055a4 <LoopCopyDataInit>

0800559e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800559e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055a2:	3304      	adds	r3, #4

080055a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055a8:	d3f9      	bcc.n	800559e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055aa:	4a0a      	ldr	r2, [pc, #40]	@ (80055d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80055ac:	4c0a      	ldr	r4, [pc, #40]	@ (80055d8 <LoopForever+0x16>)
  movs r3, #0
 80055ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055b0:	e001      	b.n	80055b6 <LoopFillZerobss>

080055b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055b4:	3204      	adds	r2, #4

080055b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055b8:	d3fb      	bcc.n	80055b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80055ba:	f006 fb53 	bl	800bc64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80055be:	f7fc fc23 	bl	8001e08 <main>

080055c2 <LoopForever>:

LoopForever:
    b LoopForever
 80055c2:	e7fe      	b.n	80055c2 <LoopForever>
  ldr   r0, =_estack
 80055c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055cc:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 80055d0:	0800cc2c 	.word	0x0800cc2c
  ldr r2, =_sbss
 80055d4:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 80055d8:	20001544 	.word	0x20001544

080055dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80055dc:	e7fe      	b.n	80055dc <ADC1_2_IRQHandler>

080055de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055e8:	2003      	movs	r0, #3
 80055ea:	f000 f939 	bl	8005860 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055ee:	2000      	movs	r0, #0
 80055f0:	f000 f80e 	bl	8005610 <HAL_InitTick>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	71fb      	strb	r3, [r7, #7]
 80055fe:	e001      	b.n	8005604 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005600:	f7ff fc5a 	bl	8004eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005604:	79fb      	ldrb	r3, [r7, #7]

}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800561c:	4b16      	ldr	r3, [pc, #88]	@ (8005678 <HAL_InitTick+0x68>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d022      	beq.n	800566a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005624:	4b15      	ldr	r3, [pc, #84]	@ (800567c <HAL_InitTick+0x6c>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4b13      	ldr	r3, [pc, #76]	@ (8005678 <HAL_InitTick+0x68>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005630:	fbb1 f3f3 	udiv	r3, r1, r3
 8005634:	fbb2 f3f3 	udiv	r3, r2, r3
 8005638:	4618      	mov	r0, r3
 800563a:	f000 f944 	bl	80058c6 <HAL_SYSTICK_Config>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10f      	bne.n	8005664 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b0f      	cmp	r3, #15
 8005648:	d809      	bhi.n	800565e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800564a:	2200      	movs	r2, #0
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	f04f 30ff 	mov.w	r0, #4294967295
 8005652:	f000 f910 	bl	8005876 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005656:	4a0a      	ldr	r2, [pc, #40]	@ (8005680 <HAL_InitTick+0x70>)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	e007      	b.n	800566e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	73fb      	strb	r3, [r7, #15]
 8005662:	e004      	b.n	800566e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	73fb      	strb	r3, [r7, #15]
 8005668:	e001      	b.n	800566e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800566e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000238 	.word	0x20000238
 800567c:	20000230 	.word	0x20000230
 8005680:	20000234 	.word	0x20000234

08005684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005688:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <HAL_IncTick+0x1c>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	4b05      	ldr	r3, [pc, #20]	@ (80056a4 <HAL_IncTick+0x20>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4413      	add	r3, r2
 8005692:	4a03      	ldr	r2, [pc, #12]	@ (80056a0 <HAL_IncTick+0x1c>)
 8005694:	6013      	str	r3, [r2, #0]
}
 8005696:	bf00      	nop
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	20001408 	.word	0x20001408
 80056a4:	20000238 	.word	0x20000238

080056a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  return uwTick;
 80056ac:	4b03      	ldr	r3, [pc, #12]	@ (80056bc <HAL_GetTick+0x14>)
 80056ae:	681b      	ldr	r3, [r3, #0]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	20001408 	.word	0x20001408

080056c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005704 <__NVIC_SetPriorityGrouping+0x44>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80056dc:	4013      	ands	r3, r2
 80056de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80056ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056f2:	4a04      	ldr	r2, [pc, #16]	@ (8005704 <__NVIC_SetPriorityGrouping+0x44>)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	60d3      	str	r3, [r2, #12]
}
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	e000ed00 	.word	0xe000ed00

08005708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800570c:	4b04      	ldr	r3, [pc, #16]	@ (8005720 <__NVIC_GetPriorityGrouping+0x18>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	0a1b      	lsrs	r3, r3, #8
 8005712:	f003 0307 	and.w	r3, r3, #7
}
 8005716:	4618      	mov	r0, r3
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	e000ed00 	.word	0xe000ed00

08005724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800572e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005732:	2b00      	cmp	r3, #0
 8005734:	db0b      	blt.n	800574e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	f003 021f 	and.w	r2, r3, #31
 800573c:	4907      	ldr	r1, [pc, #28]	@ (800575c <__NVIC_EnableIRQ+0x38>)
 800573e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005742:	095b      	lsrs	r3, r3, #5
 8005744:	2001      	movs	r0, #1
 8005746:	fa00 f202 	lsl.w	r2, r0, r2
 800574a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	e000e100 	.word	0xe000e100

08005760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	6039      	str	r1, [r7, #0]
 800576a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800576c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005770:	2b00      	cmp	r3, #0
 8005772:	db0a      	blt.n	800578a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	b2da      	uxtb	r2, r3
 8005778:	490c      	ldr	r1, [pc, #48]	@ (80057ac <__NVIC_SetPriority+0x4c>)
 800577a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577e:	0112      	lsls	r2, r2, #4
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	440b      	add	r3, r1
 8005784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005788:	e00a      	b.n	80057a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	b2da      	uxtb	r2, r3
 800578e:	4908      	ldr	r1, [pc, #32]	@ (80057b0 <__NVIC_SetPriority+0x50>)
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	3b04      	subs	r3, #4
 8005798:	0112      	lsls	r2, r2, #4
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	440b      	add	r3, r1
 800579e:	761a      	strb	r2, [r3, #24]
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	e000e100 	.word	0xe000e100
 80057b0:	e000ed00 	.word	0xe000ed00

080057b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b089      	sub	sp, #36	@ 0x24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f1c3 0307 	rsb	r3, r3, #7
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	bf28      	it	cs
 80057d2:	2304      	movcs	r3, #4
 80057d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	3304      	adds	r3, #4
 80057da:	2b06      	cmp	r3, #6
 80057dc:	d902      	bls.n	80057e4 <NVIC_EncodePriority+0x30>
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	3b03      	subs	r3, #3
 80057e2:	e000      	b.n	80057e6 <NVIC_EncodePriority+0x32>
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057e8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43da      	mvns	r2, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	401a      	ands	r2, r3
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	fa01 f303 	lsl.w	r3, r1, r3
 8005806:	43d9      	mvns	r1, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800580c:	4313      	orrs	r3, r2
         );
}
 800580e:	4618      	mov	r0, r3
 8005810:	3724      	adds	r7, #36	@ 0x24
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3b01      	subs	r3, #1
 8005828:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800582c:	d301      	bcc.n	8005832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800582e:	2301      	movs	r3, #1
 8005830:	e00f      	b.n	8005852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005832:	4a0a      	ldr	r2, [pc, #40]	@ (800585c <SysTick_Config+0x40>)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3b01      	subs	r3, #1
 8005838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800583a:	210f      	movs	r1, #15
 800583c:	f04f 30ff 	mov.w	r0, #4294967295
 8005840:	f7ff ff8e 	bl	8005760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005844:	4b05      	ldr	r3, [pc, #20]	@ (800585c <SysTick_Config+0x40>)
 8005846:	2200      	movs	r2, #0
 8005848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800584a:	4b04      	ldr	r3, [pc, #16]	@ (800585c <SysTick_Config+0x40>)
 800584c:	2207      	movs	r2, #7
 800584e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	e000e010 	.word	0xe000e010

08005860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff ff29 	bl	80056c0 <__NVIC_SetPriorityGrouping>
}
 800586e:	bf00      	nop
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b086      	sub	sp, #24
 800587a:	af00      	add	r7, sp, #0
 800587c:	4603      	mov	r3, r0
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
 8005882:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005884:	f7ff ff40 	bl	8005708 <__NVIC_GetPriorityGrouping>
 8005888:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	68b9      	ldr	r1, [r7, #8]
 800588e:	6978      	ldr	r0, [r7, #20]
 8005890:	f7ff ff90 	bl	80057b4 <NVIC_EncodePriority>
 8005894:	4602      	mov	r2, r0
 8005896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800589a:	4611      	mov	r1, r2
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff ff5f 	bl	8005760 <__NVIC_SetPriority>
}
 80058a2:	bf00      	nop
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	4603      	mov	r3, r0
 80058b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff ff33 	bl	8005724 <__NVIC_EnableIRQ>
}
 80058be:	bf00      	nop
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff ffa4 	bl	800581c <SysTick_Config>
 80058d4:	4603      	mov	r3, r0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e08d      	b.n	8005a0e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	4b47      	ldr	r3, [pc, #284]	@ (8005a18 <HAL_DMA_Init+0x138>)
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d80f      	bhi.n	800591e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	4b45      	ldr	r3, [pc, #276]	@ (8005a1c <HAL_DMA_Init+0x13c>)
 8005906:	4413      	add	r3, r2
 8005908:	4a45      	ldr	r2, [pc, #276]	@ (8005a20 <HAL_DMA_Init+0x140>)
 800590a:	fba2 2303 	umull	r2, r3, r2, r3
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	009a      	lsls	r2, r3, #2
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a42      	ldr	r2, [pc, #264]	@ (8005a24 <HAL_DMA_Init+0x144>)
 800591a:	641a      	str	r2, [r3, #64]	@ 0x40
 800591c:	e00e      	b.n	800593c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	461a      	mov	r2, r3
 8005924:	4b40      	ldr	r3, [pc, #256]	@ (8005a28 <HAL_DMA_Init+0x148>)
 8005926:	4413      	add	r3, r2
 8005928:	4a3d      	ldr	r2, [pc, #244]	@ (8005a20 <HAL_DMA_Init+0x140>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	091b      	lsrs	r3, r3, #4
 8005930:	009a      	lsls	r2, r3, #2
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a3c      	ldr	r2, [pc, #240]	@ (8005a2c <HAL_DMA_Init+0x14c>)
 800593a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005956:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005960:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800596c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005978:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fa76 	bl	8005e80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800599c:	d102      	bne.n	80059a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80059b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d010      	beq.n	80059e4 <HAL_DMA_Init+0x104>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d80c      	bhi.n	80059e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fa96 	bl	8005efc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80059e0:	605a      	str	r2, [r3, #4]
 80059e2:	e008      	b.n	80059f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40020407 	.word	0x40020407
 8005a1c:	bffdfff8 	.word	0xbffdfff8
 8005a20:	cccccccd 	.word	0xcccccccd
 8005a24:	40020000 	.word	0x40020000
 8005a28:	bffdfbf8 	.word	0xbffdfbf8
 8005a2c:	40020400 	.word	0x40020400

08005a30 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <HAL_DMA_Start_IT+0x20>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e066      	b.n	8005b1e <HAL_DMA_Start_IT+0xee>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d155      	bne.n	8005b10 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0201 	bic.w	r2, r2, #1
 8005a80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	68b9      	ldr	r1, [r7, #8]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 f9bb 	bl	8005e04 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d008      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 020e 	orr.w	r2, r2, #14
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	e00f      	b.n	8005ac8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0204 	bic.w	r2, r2, #4
 8005ab6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 020a 	orr.w	r2, r2, #10
 8005ac6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d007      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ae0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ae4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005afc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0201 	orr.w	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	e005      	b.n	8005b1c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d005      	beq.n	8005b4a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2204      	movs	r2, #4
 8005b42:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	73fb      	strb	r3, [r7, #15]
 8005b48:	e037      	b.n	8005bba <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 020e 	bic.w	r2, r2, #14
 8005b58:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b68:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0201 	bic.w	r2, r2, #1
 8005b78:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7e:	f003 021f 	and.w	r2, r3, #31
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b86:	2101      	movs	r1, #1
 8005b88:	fa01 f202 	lsl.w	r2, r1, r2
 8005b8c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b96:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00c      	beq.n	8005bba <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005baa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bae:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005bb8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d00d      	beq.n	8005c0c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2204      	movs	r2, #4
 8005bf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	73fb      	strb	r3, [r7, #15]
 8005c0a:	e047      	b.n	8005c9c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 020e 	bic.w	r2, r2, #14
 8005c1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0201 	bic.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c40:	f003 021f 	and.w	r2, r3, #31
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c48:	2101      	movs	r1, #1
 8005c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c4e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c58:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00c      	beq.n	8005c7c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c70:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c7a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	4798      	blx	r3
    }
  }
  return status;
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc2:	f003 031f 	and.w	r3, r3, #31
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	409a      	lsls	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d026      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x7a>
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d021      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d107      	bne.n	8005cfa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0204 	bic.w	r2, r2, #4
 8005cf8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfe:	f003 021f 	and.w	r2, r3, #31
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d06:	2104      	movs	r1, #4
 8005d08:	fa01 f202 	lsl.w	r2, r1, r2
 8005d0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d071      	beq.n	8005dfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005d1e:	e06c      	b.n	8005dfa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	2202      	movs	r2, #2
 8005d2a:	409a      	lsls	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d02e      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d029      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0320 	and.w	r3, r3, #32
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10b      	bne.n	8005d64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 020a 	bic.w	r2, r2, #10
 8005d5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d68:	f003 021f 	and.w	r2, r3, #31
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d70:	2102      	movs	r1, #2
 8005d72:	fa01 f202 	lsl.w	r2, r1, r2
 8005d76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d038      	beq.n	8005dfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005d90:	e033      	b.n	8005dfa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d96:	f003 031f 	and.w	r3, r3, #31
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	409a      	lsls	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4013      	ands	r3, r2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d02a      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d025      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 020e 	bic.w	r2, r2, #14
 8005dbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc4:	f003 021f 	and.w	r2, r3, #31
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dcc:	2101      	movs	r1, #1
 8005dce:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d004      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005dfa:	bf00      	nop
 8005dfc:	bf00      	nop
}
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e1a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d004      	beq.n	8005e2e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e2c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e32:	f003 021f 	and.w	r2, r3, #31
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d108      	bne.n	8005e64 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e62:	e007      	b.n	8005e74 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	60da      	str	r2, [r3, #12]
}
 8005e74:	bf00      	nop
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	4b16      	ldr	r3, [pc, #88]	@ (8005ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d802      	bhi.n	8005e9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005e94:	4b15      	ldr	r3, [pc, #84]	@ (8005eec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e001      	b.n	8005e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005e9a:	4b15      	ldr	r3, [pc, #84]	@ (8005ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005e9c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	3b08      	subs	r3, #8
 8005eaa:	4a12      	ldr	r2, [pc, #72]	@ (8005ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	091b      	lsrs	r3, r3, #4
 8005eb2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb8:	089b      	lsrs	r3, r3, #2
 8005eba:	009a      	lsls	r2, r3, #2
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8005ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005eca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f003 031f 	and.w	r3, r3, #31
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	409a      	lsls	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005eda:	bf00      	nop
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40020407 	.word	0x40020407
 8005eec:	40020800 	.word	0x40020800
 8005ef0:	40020820 	.word	0x40020820
 8005ef4:	cccccccd 	.word	0xcccccccd
 8005ef8:	40020880 	.word	0x40020880

08005efc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	461a      	mov	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a08      	ldr	r2, [pc, #32]	@ (8005f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005f1e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	f003 031f 	and.w	r3, r3, #31
 8005f28:	2201      	movs	r2, #1
 8005f2a:	409a      	lsls	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005f30:	bf00      	nop
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	1000823f 	.word	0x1000823f
 8005f40:	40020940 	.word	0x40020940

08005f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005f52:	e15a      	b.n	800620a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	2101      	movs	r1, #1
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f60:	4013      	ands	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 814c 	beq.w	8006204 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d005      	beq.n	8005f84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d130      	bne.n	8005fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	2203      	movs	r2, #3
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	43db      	mvns	r3, r3
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005fba:	2201      	movs	r2, #1
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	091b      	lsrs	r3, r3, #4
 8005fd0:	f003 0201 	and.w	r2, r3, #1
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d017      	beq.n	8006022 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	2203      	movs	r2, #3
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	43db      	mvns	r3, r3
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4013      	ands	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d123      	bne.n	8006076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	08da      	lsrs	r2, r3, #3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3208      	adds	r2, #8
 8006036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	220f      	movs	r2, #15
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	43db      	mvns	r3, r3
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4013      	ands	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	08da      	lsrs	r2, r3, #3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3208      	adds	r2, #8
 8006070:	6939      	ldr	r1, [r7, #16]
 8006072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	2203      	movs	r2, #3
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	43db      	mvns	r3, r3
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4013      	ands	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f003 0203 	and.w	r2, r3, #3
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 80a6 	beq.w	8006204 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060b8:	4b5b      	ldr	r3, [pc, #364]	@ (8006228 <HAL_GPIO_Init+0x2e4>)
 80060ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060bc:	4a5a      	ldr	r2, [pc, #360]	@ (8006228 <HAL_GPIO_Init+0x2e4>)
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80060c4:	4b58      	ldr	r3, [pc, #352]	@ (8006228 <HAL_GPIO_Init+0x2e4>)
 80060c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060d0:	4a56      	ldr	r2, [pc, #344]	@ (800622c <HAL_GPIO_Init+0x2e8>)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	089b      	lsrs	r3, r3, #2
 80060d6:	3302      	adds	r3, #2
 80060d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f003 0303 	and.w	r3, r3, #3
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	220f      	movs	r2, #15
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	43db      	mvns	r3, r3
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4013      	ands	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80060fa:	d01f      	beq.n	800613c <HAL_GPIO_Init+0x1f8>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a4c      	ldr	r2, [pc, #304]	@ (8006230 <HAL_GPIO_Init+0x2ec>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d019      	beq.n	8006138 <HAL_GPIO_Init+0x1f4>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a4b      	ldr	r2, [pc, #300]	@ (8006234 <HAL_GPIO_Init+0x2f0>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d013      	beq.n	8006134 <HAL_GPIO_Init+0x1f0>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a4a      	ldr	r2, [pc, #296]	@ (8006238 <HAL_GPIO_Init+0x2f4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00d      	beq.n	8006130 <HAL_GPIO_Init+0x1ec>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a49      	ldr	r2, [pc, #292]	@ (800623c <HAL_GPIO_Init+0x2f8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <HAL_GPIO_Init+0x1e8>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a48      	ldr	r2, [pc, #288]	@ (8006240 <HAL_GPIO_Init+0x2fc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d101      	bne.n	8006128 <HAL_GPIO_Init+0x1e4>
 8006124:	2305      	movs	r3, #5
 8006126:	e00a      	b.n	800613e <HAL_GPIO_Init+0x1fa>
 8006128:	2306      	movs	r3, #6
 800612a:	e008      	b.n	800613e <HAL_GPIO_Init+0x1fa>
 800612c:	2304      	movs	r3, #4
 800612e:	e006      	b.n	800613e <HAL_GPIO_Init+0x1fa>
 8006130:	2303      	movs	r3, #3
 8006132:	e004      	b.n	800613e <HAL_GPIO_Init+0x1fa>
 8006134:	2302      	movs	r3, #2
 8006136:	e002      	b.n	800613e <HAL_GPIO_Init+0x1fa>
 8006138:	2301      	movs	r3, #1
 800613a:	e000      	b.n	800613e <HAL_GPIO_Init+0x1fa>
 800613c:	2300      	movs	r3, #0
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	f002 0203 	and.w	r2, r2, #3
 8006144:	0092      	lsls	r2, r2, #2
 8006146:	4093      	lsls	r3, r2
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800614e:	4937      	ldr	r1, [pc, #220]	@ (800622c <HAL_GPIO_Init+0x2e8>)
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	089b      	lsrs	r3, r3, #2
 8006154:	3302      	adds	r3, #2
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800615c:	4b39      	ldr	r3, [pc, #228]	@ (8006244 <HAL_GPIO_Init+0x300>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	43db      	mvns	r3, r3
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4013      	ands	r3, r2
 800616a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006180:	4a30      	ldr	r2, [pc, #192]	@ (8006244 <HAL_GPIO_Init+0x300>)
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006186:	4b2f      	ldr	r3, [pc, #188]	@ (8006244 <HAL_GPIO_Init+0x300>)
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	43db      	mvns	r3, r3
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4013      	ands	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80061aa:	4a26      	ldr	r2, [pc, #152]	@ (8006244 <HAL_GPIO_Init+0x300>)
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80061b0:	4b24      	ldr	r3, [pc, #144]	@ (8006244 <HAL_GPIO_Init+0x300>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	43db      	mvns	r3, r3
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4013      	ands	r3, r2
 80061be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80061d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006244 <HAL_GPIO_Init+0x300>)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80061da:	4b1a      	ldr	r3, [pc, #104]	@ (8006244 <HAL_GPIO_Init+0x300>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	43db      	mvns	r3, r3
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4013      	ands	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80061fe:	4a11      	ldr	r2, [pc, #68]	@ (8006244 <HAL_GPIO_Init+0x300>)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	3301      	adds	r3, #1
 8006208:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	fa22 f303 	lsr.w	r3, r2, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	f47f ae9d 	bne.w	8005f54 <HAL_GPIO_Init+0x10>
  }
}
 800621a:	bf00      	nop
 800621c:	bf00      	nop
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	40021000 	.word	0x40021000
 800622c:	40010000 	.word	0x40010000
 8006230:	48000400 	.word	0x48000400
 8006234:	48000800 	.word	0x48000800
 8006238:	48000c00 	.word	0x48000c00
 800623c:	48001000 	.word	0x48001000
 8006240:	48001400 	.word	0x48001400
 8006244:	40010400 	.word	0x40010400

08006248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691a      	ldr	r2, [r3, #16]
 8006258:	887b      	ldrh	r3, [r7, #2]
 800625a:	4013      	ands	r3, r2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006260:	2301      	movs	r3, #1
 8006262:	73fb      	strb	r3, [r7, #15]
 8006264:	e001      	b.n	800626a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	807b      	strh	r3, [r7, #2]
 8006284:	4613      	mov	r3, r2
 8006286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006288:	787b      	ldrb	r3, [r7, #1]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800628e:	887a      	ldrh	r2, [r7, #2]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006294:	e002      	b.n	800629c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006296:	887a      	ldrh	r2, [r7, #2]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	4603      	mov	r3, r0
 80062b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80062b2:	4b08      	ldr	r3, [pc, #32]	@ (80062d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062b4:	695a      	ldr	r2, [r3, #20]
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	4013      	ands	r3, r2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d006      	beq.n	80062cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062be:	4a05      	ldr	r2, [pc, #20]	@ (80062d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062c0:	88fb      	ldrh	r3, [r7, #6]
 80062c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062c4:	88fb      	ldrh	r3, [r7, #6]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fd fe5c 	bl	8003f84 <HAL_GPIO_EXTI_Callback>
  }
}
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40010400 	.word	0x40010400

080062d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d141      	bne.n	800636a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80062e6:	4b4b      	ldr	r3, [pc, #300]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80062ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062f2:	d131      	bne.n	8006358 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062f4:	4b47      	ldr	r3, [pc, #284]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062fa:	4a46      	ldr	r2, [pc, #280]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006300:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006304:	4b43      	ldr	r3, [pc, #268]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800630c:	4a41      	ldr	r2, [pc, #260]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800630e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006312:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006314:	4b40      	ldr	r3, [pc, #256]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2232      	movs	r2, #50	@ 0x32
 800631a:	fb02 f303 	mul.w	r3, r2, r3
 800631e:	4a3f      	ldr	r2, [pc, #252]	@ (800641c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006320:	fba2 2303 	umull	r2, r3, r2, r3
 8006324:	0c9b      	lsrs	r3, r3, #18
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800632a:	e002      	b.n	8006332 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3b01      	subs	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006332:	4b38      	ldr	r3, [pc, #224]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800633a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800633e:	d102      	bne.n	8006346 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f2      	bne.n	800632c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006346:	4b33      	ldr	r3, [pc, #204]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800634e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006352:	d158      	bne.n	8006406 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e057      	b.n	8006408 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006358:	4b2e      	ldr	r3, [pc, #184]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800635a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800635e:	4a2d      	ldr	r2, [pc, #180]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006364:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006368:	e04d      	b.n	8006406 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006370:	d141      	bne.n	80063f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006372:	4b28      	ldr	r3, [pc, #160]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800637a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800637e:	d131      	bne.n	80063e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006380:	4b24      	ldr	r3, [pc, #144]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006386:	4a23      	ldr	r2, [pc, #140]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800638c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006390:	4b20      	ldr	r3, [pc, #128]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006398:	4a1e      	ldr	r2, [pc, #120]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800639a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800639e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2232      	movs	r2, #50	@ 0x32
 80063a6:	fb02 f303 	mul.w	r3, r2, r3
 80063aa:	4a1c      	ldr	r2, [pc, #112]	@ (800641c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	0c9b      	lsrs	r3, r3, #18
 80063b2:	3301      	adds	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063b6:	e002      	b.n	80063be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063be:	4b15      	ldr	r3, [pc, #84]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ca:	d102      	bne.n	80063d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f2      	bne.n	80063b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063d2:	4b10      	ldr	r3, [pc, #64]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063de:	d112      	bne.n	8006406 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e011      	b.n	8006408 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80063f4:	e007      	b.n	8006406 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80063f6:	4b07      	ldr	r3, [pc, #28]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80063fe:	4a05      	ldr	r2, [pc, #20]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006400:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006404:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	40007000 	.word	0x40007000
 8006418:	20000230 	.word	0x20000230
 800641c:	431bde83 	.word	0x431bde83

08006420 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006424:	4b05      	ldr	r3, [pc, #20]	@ (800643c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	4a04      	ldr	r2, [pc, #16]	@ (800643c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800642a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800642e:	6093      	str	r3, [r2, #8]
}
 8006430:	bf00      	nop
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40007000 	.word	0x40007000

08006440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e2fe      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d075      	beq.n	800654a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800645e:	4b97      	ldr	r3, [pc, #604]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 030c 	and.w	r3, r3, #12
 8006466:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006468:	4b94      	ldr	r3, [pc, #592]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f003 0303 	and.w	r3, r3, #3
 8006470:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b0c      	cmp	r3, #12
 8006476:	d102      	bne.n	800647e <HAL_RCC_OscConfig+0x3e>
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2b03      	cmp	r3, #3
 800647c:	d002      	beq.n	8006484 <HAL_RCC_OscConfig+0x44>
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	2b08      	cmp	r3, #8
 8006482:	d10b      	bne.n	800649c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006484:	4b8d      	ldr	r3, [pc, #564]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d05b      	beq.n	8006548 <HAL_RCC_OscConfig+0x108>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d157      	bne.n	8006548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e2d9      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064a4:	d106      	bne.n	80064b4 <HAL_RCC_OscConfig+0x74>
 80064a6:	4b85      	ldr	r3, [pc, #532]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a84      	ldr	r2, [pc, #528]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 80064ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e01d      	b.n	80064f0 <HAL_RCC_OscConfig+0xb0>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064bc:	d10c      	bne.n	80064d8 <HAL_RCC_OscConfig+0x98>
 80064be:	4b7f      	ldr	r3, [pc, #508]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a7e      	ldr	r2, [pc, #504]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 80064c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	4b7c      	ldr	r3, [pc, #496]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a7b      	ldr	r2, [pc, #492]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 80064d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	e00b      	b.n	80064f0 <HAL_RCC_OscConfig+0xb0>
 80064d8:	4b78      	ldr	r3, [pc, #480]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a77      	ldr	r2, [pc, #476]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 80064de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	4b75      	ldr	r3, [pc, #468]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a74      	ldr	r2, [pc, #464]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 80064ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d013      	beq.n	8006520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f8:	f7ff f8d6 	bl	80056a8 <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006500:	f7ff f8d2 	bl	80056a8 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b64      	cmp	r3, #100	@ 0x64
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e29e      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006512:	4b6a      	ldr	r3, [pc, #424]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0f0      	beq.n	8006500 <HAL_RCC_OscConfig+0xc0>
 800651e:	e014      	b.n	800654a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7ff f8c2 	bl	80056a8 <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006528:	f7ff f8be 	bl	80056a8 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b64      	cmp	r3, #100	@ 0x64
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e28a      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800653a:	4b60      	ldr	r3, [pc, #384]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0xe8>
 8006546:	e000      	b.n	800654a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d075      	beq.n	8006642 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006556:	4b59      	ldr	r3, [pc, #356]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 030c 	and.w	r3, r3, #12
 800655e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006560:	4b56      	ldr	r3, [pc, #344]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	2b0c      	cmp	r3, #12
 800656e:	d102      	bne.n	8006576 <HAL_RCC_OscConfig+0x136>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d002      	beq.n	800657c <HAL_RCC_OscConfig+0x13c>
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2b04      	cmp	r3, #4
 800657a:	d11f      	bne.n	80065bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800657c:	4b4f      	ldr	r3, [pc, #316]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <HAL_RCC_OscConfig+0x154>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e25d      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006594:	4b49      	ldr	r3, [pc, #292]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	061b      	lsls	r3, r3, #24
 80065a2:	4946      	ldr	r1, [pc, #280]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80065a8:	4b45      	ldr	r3, [pc, #276]	@ (80066c0 <HAL_RCC_OscConfig+0x280>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff f82f 	bl	8005610 <HAL_InitTick>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d043      	beq.n	8006640 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e249      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d023      	beq.n	800660c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065c4:	4b3d      	ldr	r3, [pc, #244]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a3c      	ldr	r2, [pc, #240]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 80065ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d0:	f7ff f86a 	bl	80056a8 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065d8:	f7ff f866 	bl	80056a8 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e232      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065ea:	4b34      	ldr	r3, [pc, #208]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0f0      	beq.n	80065d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f6:	4b31      	ldr	r3, [pc, #196]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	061b      	lsls	r3, r3, #24
 8006604:	492d      	ldr	r1, [pc, #180]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 8006606:	4313      	orrs	r3, r2
 8006608:	604b      	str	r3, [r1, #4]
 800660a:	e01a      	b.n	8006642 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800660c:	4b2b      	ldr	r3, [pc, #172]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a2a      	ldr	r2, [pc, #168]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 8006612:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006618:	f7ff f846 	bl	80056a8 <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006620:	f7ff f842 	bl	80056a8 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e20e      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006632:	4b22      	ldr	r3, [pc, #136]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1f0      	bne.n	8006620 <HAL_RCC_OscConfig+0x1e0>
 800663e:	e000      	b.n	8006642 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006640:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0308 	and.w	r3, r3, #8
 800664a:	2b00      	cmp	r3, #0
 800664c:	d041      	beq.n	80066d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d01c      	beq.n	8006690 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006656:	4b19      	ldr	r3, [pc, #100]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 8006658:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800665c:	4a17      	ldr	r2, [pc, #92]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 800665e:	f043 0301 	orr.w	r3, r3, #1
 8006662:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006666:	f7ff f81f 	bl	80056a8 <HAL_GetTick>
 800666a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800666c:	e008      	b.n	8006680 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800666e:	f7ff f81b 	bl	80056a8 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e1e7      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006680:	4b0e      	ldr	r3, [pc, #56]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 8006682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0ef      	beq.n	800666e <HAL_RCC_OscConfig+0x22e>
 800668e:	e020      	b.n	80066d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006690:	4b0a      	ldr	r3, [pc, #40]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 8006692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006696:	4a09      	ldr	r2, [pc, #36]	@ (80066bc <HAL_RCC_OscConfig+0x27c>)
 8006698:	f023 0301 	bic.w	r3, r3, #1
 800669c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a0:	f7ff f802 	bl	80056a8 <HAL_GetTick>
 80066a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066a6:	e00d      	b.n	80066c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066a8:	f7fe fffe 	bl	80056a8 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d906      	bls.n	80066c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e1ca      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
 80066ba:	bf00      	nop
 80066bc:	40021000 	.word	0x40021000
 80066c0:	20000234 	.word	0x20000234
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066c4:	4b8c      	ldr	r3, [pc, #560]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 80066c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1ea      	bne.n	80066a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 80a6 	beq.w	800682c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066e0:	2300      	movs	r3, #0
 80066e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066e4:	4b84      	ldr	r3, [pc, #528]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 80066e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_RCC_OscConfig+0x2b4>
 80066f0:	2301      	movs	r3, #1
 80066f2:	e000      	b.n	80066f6 <HAL_RCC_OscConfig+0x2b6>
 80066f4:	2300      	movs	r3, #0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00d      	beq.n	8006716 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066fa:	4b7f      	ldr	r3, [pc, #508]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 80066fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066fe:	4a7e      	ldr	r2, [pc, #504]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 8006700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006704:	6593      	str	r3, [r2, #88]	@ 0x58
 8006706:	4b7c      	ldr	r3, [pc, #496]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 8006708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800670a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006712:	2301      	movs	r3, #1
 8006714:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006716:	4b79      	ldr	r3, [pc, #484]	@ (80068fc <HAL_RCC_OscConfig+0x4bc>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800671e:	2b00      	cmp	r3, #0
 8006720:	d118      	bne.n	8006754 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006722:	4b76      	ldr	r3, [pc, #472]	@ (80068fc <HAL_RCC_OscConfig+0x4bc>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a75      	ldr	r2, [pc, #468]	@ (80068fc <HAL_RCC_OscConfig+0x4bc>)
 8006728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800672c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800672e:	f7fe ffbb 	bl	80056a8 <HAL_GetTick>
 8006732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006734:	e008      	b.n	8006748 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006736:	f7fe ffb7 	bl	80056a8 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e183      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006748:	4b6c      	ldr	r3, [pc, #432]	@ (80068fc <HAL_RCC_OscConfig+0x4bc>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006750:	2b00      	cmp	r3, #0
 8006752:	d0f0      	beq.n	8006736 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d108      	bne.n	800676e <HAL_RCC_OscConfig+0x32e>
 800675c:	4b66      	ldr	r3, [pc, #408]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 800675e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006762:	4a65      	ldr	r2, [pc, #404]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 8006764:	f043 0301 	orr.w	r3, r3, #1
 8006768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800676c:	e024      	b.n	80067b8 <HAL_RCC_OscConfig+0x378>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2b05      	cmp	r3, #5
 8006774:	d110      	bne.n	8006798 <HAL_RCC_OscConfig+0x358>
 8006776:	4b60      	ldr	r3, [pc, #384]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 8006778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800677c:	4a5e      	ldr	r2, [pc, #376]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 800677e:	f043 0304 	orr.w	r3, r3, #4
 8006782:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006786:	4b5c      	ldr	r3, [pc, #368]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 8006788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800678c:	4a5a      	ldr	r2, [pc, #360]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 800678e:	f043 0301 	orr.w	r3, r3, #1
 8006792:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006796:	e00f      	b.n	80067b8 <HAL_RCC_OscConfig+0x378>
 8006798:	4b57      	ldr	r3, [pc, #348]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800679e:	4a56      	ldr	r2, [pc, #344]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067a8:	4b53      	ldr	r3, [pc, #332]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 80067aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ae:	4a52      	ldr	r2, [pc, #328]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 80067b0:	f023 0304 	bic.w	r3, r3, #4
 80067b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d016      	beq.n	80067ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c0:	f7fe ff72 	bl	80056a8 <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067c6:	e00a      	b.n	80067de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067c8:	f7fe ff6e 	bl	80056a8 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e138      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067de:	4b46      	ldr	r3, [pc, #280]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 80067e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0ed      	beq.n	80067c8 <HAL_RCC_OscConfig+0x388>
 80067ec:	e015      	b.n	800681a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ee:	f7fe ff5b 	bl	80056a8 <HAL_GetTick>
 80067f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067f4:	e00a      	b.n	800680c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067f6:	f7fe ff57 	bl	80056a8 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006804:	4293      	cmp	r3, r2
 8006806:	d901      	bls.n	800680c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e121      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800680c:	4b3a      	ldr	r3, [pc, #232]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 800680e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1ed      	bne.n	80067f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800681a:	7ffb      	ldrb	r3, [r7, #31]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d105      	bne.n	800682c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006820:	4b35      	ldr	r3, [pc, #212]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 8006822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006824:	4a34      	ldr	r2, [pc, #208]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 8006826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800682a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0320 	and.w	r3, r3, #32
 8006834:	2b00      	cmp	r3, #0
 8006836:	d03c      	beq.n	80068b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d01c      	beq.n	800687a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006840:	4b2d      	ldr	r3, [pc, #180]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 8006842:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006846:	4a2c      	ldr	r2, [pc, #176]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006850:	f7fe ff2a 	bl	80056a8 <HAL_GetTick>
 8006854:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006856:	e008      	b.n	800686a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006858:	f7fe ff26 	bl	80056a8 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b02      	cmp	r3, #2
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e0f2      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800686a:	4b23      	ldr	r3, [pc, #140]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 800686c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0ef      	beq.n	8006858 <HAL_RCC_OscConfig+0x418>
 8006878:	e01b      	b.n	80068b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800687a:	4b1f      	ldr	r3, [pc, #124]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 800687c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006880:	4a1d      	ldr	r2, [pc, #116]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688a:	f7fe ff0d 	bl	80056a8 <HAL_GetTick>
 800688e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006890:	e008      	b.n	80068a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006892:	f7fe ff09 	bl	80056a8 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d901      	bls.n	80068a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e0d5      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068a4:	4b14      	ldr	r3, [pc, #80]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 80068a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1ef      	bne.n	8006892 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 80c9 	beq.w	8006a4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068bc:	4b0e      	ldr	r3, [pc, #56]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 030c 	and.w	r3, r3, #12
 80068c4:	2b0c      	cmp	r3, #12
 80068c6:	f000 8083 	beq.w	80069d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d15e      	bne.n	8006990 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d2:	4b09      	ldr	r3, [pc, #36]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a08      	ldr	r2, [pc, #32]	@ (80068f8 <HAL_RCC_OscConfig+0x4b8>)
 80068d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068de:	f7fe fee3 	bl	80056a8 <HAL_GetTick>
 80068e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068e4:	e00c      	b.n	8006900 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068e6:	f7fe fedf 	bl	80056a8 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d905      	bls.n	8006900 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e0ab      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
 80068f8:	40021000 	.word	0x40021000
 80068fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006900:	4b55      	ldr	r3, [pc, #340]	@ (8006a58 <HAL_RCC_OscConfig+0x618>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1ec      	bne.n	80068e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800690c:	4b52      	ldr	r3, [pc, #328]	@ (8006a58 <HAL_RCC_OscConfig+0x618>)
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	4b52      	ldr	r3, [pc, #328]	@ (8006a5c <HAL_RCC_OscConfig+0x61c>)
 8006912:	4013      	ands	r3, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6a11      	ldr	r1, [r2, #32]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800691c:	3a01      	subs	r2, #1
 800691e:	0112      	lsls	r2, r2, #4
 8006920:	4311      	orrs	r1, r2
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006926:	0212      	lsls	r2, r2, #8
 8006928:	4311      	orrs	r1, r2
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800692e:	0852      	lsrs	r2, r2, #1
 8006930:	3a01      	subs	r2, #1
 8006932:	0552      	lsls	r2, r2, #21
 8006934:	4311      	orrs	r1, r2
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800693a:	0852      	lsrs	r2, r2, #1
 800693c:	3a01      	subs	r2, #1
 800693e:	0652      	lsls	r2, r2, #25
 8006940:	4311      	orrs	r1, r2
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006946:	06d2      	lsls	r2, r2, #27
 8006948:	430a      	orrs	r2, r1
 800694a:	4943      	ldr	r1, [pc, #268]	@ (8006a58 <HAL_RCC_OscConfig+0x618>)
 800694c:	4313      	orrs	r3, r2
 800694e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006950:	4b41      	ldr	r3, [pc, #260]	@ (8006a58 <HAL_RCC_OscConfig+0x618>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a40      	ldr	r2, [pc, #256]	@ (8006a58 <HAL_RCC_OscConfig+0x618>)
 8006956:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800695a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800695c:	4b3e      	ldr	r3, [pc, #248]	@ (8006a58 <HAL_RCC_OscConfig+0x618>)
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	4a3d      	ldr	r2, [pc, #244]	@ (8006a58 <HAL_RCC_OscConfig+0x618>)
 8006962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006966:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006968:	f7fe fe9e 	bl	80056a8 <HAL_GetTick>
 800696c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800696e:	e008      	b.n	8006982 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006970:	f7fe fe9a 	bl	80056a8 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d901      	bls.n	8006982 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e066      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006982:	4b35      	ldr	r3, [pc, #212]	@ (8006a58 <HAL_RCC_OscConfig+0x618>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0f0      	beq.n	8006970 <HAL_RCC_OscConfig+0x530>
 800698e:	e05e      	b.n	8006a4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006990:	4b31      	ldr	r3, [pc, #196]	@ (8006a58 <HAL_RCC_OscConfig+0x618>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a30      	ldr	r2, [pc, #192]	@ (8006a58 <HAL_RCC_OscConfig+0x618>)
 8006996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800699a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699c:	f7fe fe84 	bl	80056a8 <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a4:	f7fe fe80 	bl	80056a8 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e04c      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069b6:	4b28      	ldr	r3, [pc, #160]	@ (8006a58 <HAL_RCC_OscConfig+0x618>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f0      	bne.n	80069a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80069c2:	4b25      	ldr	r3, [pc, #148]	@ (8006a58 <HAL_RCC_OscConfig+0x618>)
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	4924      	ldr	r1, [pc, #144]	@ (8006a58 <HAL_RCC_OscConfig+0x618>)
 80069c8:	4b25      	ldr	r3, [pc, #148]	@ (8006a60 <HAL_RCC_OscConfig+0x620>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	60cb      	str	r3, [r1, #12]
 80069ce:	e03e      	b.n	8006a4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d101      	bne.n	80069dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e039      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80069dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006a58 <HAL_RCC_OscConfig+0x618>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f003 0203 	and.w	r2, r3, #3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d12c      	bne.n	8006a4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fa:	3b01      	subs	r3, #1
 80069fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d123      	bne.n	8006a4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d11b      	bne.n	8006a4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d113      	bne.n	8006a4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2c:	085b      	lsrs	r3, r3, #1
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d109      	bne.n	8006a4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a40:	085b      	lsrs	r3, r3, #1
 8006a42:	3b01      	subs	r3, #1
 8006a44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d001      	beq.n	8006a4e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e000      	b.n	8006a50 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3720      	adds	r7, #32
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	40021000 	.word	0x40021000
 8006a5c:	019f800c 	.word	0x019f800c
 8006a60:	feeefffc 	.word	0xfeeefffc

08006a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e11e      	b.n	8006cba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a7c:	4b91      	ldr	r3, [pc, #580]	@ (8006cc4 <HAL_RCC_ClockConfig+0x260>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 030f 	and.w	r3, r3, #15
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d910      	bls.n	8006aac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a8a:	4b8e      	ldr	r3, [pc, #568]	@ (8006cc4 <HAL_RCC_ClockConfig+0x260>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f023 020f 	bic.w	r2, r3, #15
 8006a92:	498c      	ldr	r1, [pc, #560]	@ (8006cc4 <HAL_RCC_ClockConfig+0x260>)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a9a:	4b8a      	ldr	r3, [pc, #552]	@ (8006cc4 <HAL_RCC_ClockConfig+0x260>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d001      	beq.n	8006aac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e106      	b.n	8006cba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d073      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d129      	bne.n	8006b14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ac0:	4b81      	ldr	r3, [pc, #516]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e0f4      	b.n	8006cba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006ad0:	f000 f99e 	bl	8006e10 <RCC_GetSysClockFreqFromPLLSource>
 8006ad4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	4a7c      	ldr	r2, [pc, #496]	@ (8006ccc <HAL_RCC_ClockConfig+0x268>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d93f      	bls.n	8006b5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006ade:	4b7a      	ldr	r3, [pc, #488]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d009      	beq.n	8006afe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d033      	beq.n	8006b5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d12f      	bne.n	8006b5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006afe:	4b72      	ldr	r3, [pc, #456]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b06:	4a70      	ldr	r2, [pc, #448]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b0e:	2380      	movs	r3, #128	@ 0x80
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	e024      	b.n	8006b5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d107      	bne.n	8006b2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b1c:	4b6a      	ldr	r3, [pc, #424]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d109      	bne.n	8006b3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e0c6      	b.n	8006cba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b2c:	4b66      	ldr	r3, [pc, #408]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e0be      	b.n	8006cba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006b3c:	f000 f8ce 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
 8006b40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	4a61      	ldr	r2, [pc, #388]	@ (8006ccc <HAL_RCC_ClockConfig+0x268>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d909      	bls.n	8006b5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b4a:	4b5f      	ldr	r3, [pc, #380]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b52:	4a5d      	ldr	r2, [pc, #372]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006b5a:	2380      	movs	r3, #128	@ 0x80
 8006b5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b5e:	4b5a      	ldr	r3, [pc, #360]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f023 0203 	bic.w	r2, r3, #3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	4957      	ldr	r1, [pc, #348]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b70:	f7fe fd9a 	bl	80056a8 <HAL_GetTick>
 8006b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b76:	e00a      	b.n	8006b8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b78:	f7fe fd96 	bl	80056a8 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e095      	b.n	8006cba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b8e:	4b4e      	ldr	r3, [pc, #312]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 020c 	and.w	r2, r3, #12
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d1eb      	bne.n	8006b78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d023      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bb8:	4b43      	ldr	r3, [pc, #268]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	4a42      	ldr	r2, [pc, #264]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006bbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006bc2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d007      	beq.n	8006be0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006bd8:	4a3b      	ldr	r2, [pc, #236]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006bda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006bde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006be0:	4b39      	ldr	r3, [pc, #228]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	4936      	ldr	r1, [pc, #216]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	608b      	str	r3, [r1, #8]
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	2b80      	cmp	r3, #128	@ 0x80
 8006bf8:	d105      	bne.n	8006c06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006bfa:	4b33      	ldr	r3, [pc, #204]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	4a32      	ldr	r2, [pc, #200]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006c00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c06:	4b2f      	ldr	r3, [pc, #188]	@ (8006cc4 <HAL_RCC_ClockConfig+0x260>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 030f 	and.w	r3, r3, #15
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d21d      	bcs.n	8006c50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c14:	4b2b      	ldr	r3, [pc, #172]	@ (8006cc4 <HAL_RCC_ClockConfig+0x260>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f023 020f 	bic.w	r2, r3, #15
 8006c1c:	4929      	ldr	r1, [pc, #164]	@ (8006cc4 <HAL_RCC_ClockConfig+0x260>)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c24:	f7fe fd40 	bl	80056a8 <HAL_GetTick>
 8006c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c2a:	e00a      	b.n	8006c42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c2c:	f7fe fd3c 	bl	80056a8 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e03b      	b.n	8006cba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c42:	4b20      	ldr	r3, [pc, #128]	@ (8006cc4 <HAL_RCC_ClockConfig+0x260>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d1ed      	bne.n	8006c2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d008      	beq.n	8006c6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	4917      	ldr	r1, [pc, #92]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0308 	and.w	r3, r3, #8
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d009      	beq.n	8006c8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c7a:	4b13      	ldr	r3, [pc, #76]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	490f      	ldr	r1, [pc, #60]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c8e:	f000 f825 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
 8006c92:	4602      	mov	r2, r0
 8006c94:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc8 <HAL_RCC_ClockConfig+0x264>)
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	091b      	lsrs	r3, r3, #4
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	490c      	ldr	r1, [pc, #48]	@ (8006cd0 <HAL_RCC_ClockConfig+0x26c>)
 8006ca0:	5ccb      	ldrb	r3, [r1, r3]
 8006ca2:	f003 031f 	and.w	r3, r3, #31
 8006ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8006caa:	4a0a      	ldr	r2, [pc, #40]	@ (8006cd4 <HAL_RCC_ClockConfig+0x270>)
 8006cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006cae:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd8 <HAL_RCC_ClockConfig+0x274>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe fcac 	bl	8005610 <HAL_InitTick>
 8006cb8:	4603      	mov	r3, r0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40022000 	.word	0x40022000
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	04c4b400 	.word	0x04c4b400
 8006cd0:	0800c80c 	.word	0x0800c80c
 8006cd4:	20000230 	.word	0x20000230
 8006cd8:	20000234 	.word	0x20000234

08006cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 030c 	and.w	r3, r3, #12
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d102      	bne.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006cee:	4b2a      	ldr	r3, [pc, #168]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	e047      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006cf4:	4b27      	ldr	r3, [pc, #156]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 030c 	and.w	r3, r3, #12
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d102      	bne.n	8006d06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d00:	4b26      	ldr	r3, [pc, #152]	@ (8006d9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	e03e      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d06:	4b23      	ldr	r3, [pc, #140]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 030c 	and.w	r3, r3, #12
 8006d0e:	2b0c      	cmp	r3, #12
 8006d10:	d136      	bne.n	8006d80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d12:	4b20      	ldr	r3, [pc, #128]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	091b      	lsrs	r3, r3, #4
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	3301      	adds	r3, #1
 8006d28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d10c      	bne.n	8006d4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d30:	4a1a      	ldr	r2, [pc, #104]	@ (8006d9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d38:	4a16      	ldr	r2, [pc, #88]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d3a:	68d2      	ldr	r2, [r2, #12]
 8006d3c:	0a12      	lsrs	r2, r2, #8
 8006d3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d42:	fb02 f303 	mul.w	r3, r2, r3
 8006d46:	617b      	str	r3, [r7, #20]
      break;
 8006d48:	e00c      	b.n	8006d64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d4a:	4a13      	ldr	r2, [pc, #76]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d52:	4a10      	ldr	r2, [pc, #64]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d54:	68d2      	ldr	r2, [r2, #12]
 8006d56:	0a12      	lsrs	r2, r2, #8
 8006d58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d5c:	fb02 f303 	mul.w	r3, r2, r3
 8006d60:	617b      	str	r3, [r7, #20]
      break;
 8006d62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d64:	4b0b      	ldr	r3, [pc, #44]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	0e5b      	lsrs	r3, r3, #25
 8006d6a:	f003 0303 	and.w	r3, r3, #3
 8006d6e:	3301      	adds	r3, #1
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	e001      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006d84:	693b      	ldr	r3, [r7, #16]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	40021000 	.word	0x40021000
 8006d98:	00f42400 	.word	0x00f42400
 8006d9c:	016e3600 	.word	0x016e3600

08006da0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006da4:	4b03      	ldr	r3, [pc, #12]	@ (8006db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006da6:	681b      	ldr	r3, [r3, #0]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20000230 	.word	0x20000230

08006db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006dbc:	f7ff fff0 	bl	8006da0 <HAL_RCC_GetHCLKFreq>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	4b06      	ldr	r3, [pc, #24]	@ (8006ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	0a1b      	lsrs	r3, r3, #8
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	4904      	ldr	r1, [pc, #16]	@ (8006de0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006dce:	5ccb      	ldrb	r3, [r1, r3]
 8006dd0:	f003 031f 	and.w	r3, r3, #31
 8006dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40021000 	.word	0x40021000
 8006de0:	0800c81c 	.word	0x0800c81c

08006de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006de8:	f7ff ffda 	bl	8006da0 <HAL_RCC_GetHCLKFreq>
 8006dec:	4602      	mov	r2, r0
 8006dee:	4b06      	ldr	r3, [pc, #24]	@ (8006e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	0adb      	lsrs	r3, r3, #11
 8006df4:	f003 0307 	and.w	r3, r3, #7
 8006df8:	4904      	ldr	r1, [pc, #16]	@ (8006e0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dfa:	5ccb      	ldrb	r3, [r1, r3]
 8006dfc:	f003 031f 	and.w	r3, r3, #31
 8006e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	40021000 	.word	0x40021000
 8006e0c:	0800c81c 	.word	0x0800c81c

08006e10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e16:	4b1e      	ldr	r3, [pc, #120]	@ (8006e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e20:	4b1b      	ldr	r3, [pc, #108]	@ (8006e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	091b      	lsrs	r3, r3, #4
 8006e26:	f003 030f 	and.w	r3, r3, #15
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d10c      	bne.n	8006e4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e34:	4a17      	ldr	r2, [pc, #92]	@ (8006e94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3c:	4a14      	ldr	r2, [pc, #80]	@ (8006e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e3e:	68d2      	ldr	r2, [r2, #12]
 8006e40:	0a12      	lsrs	r2, r2, #8
 8006e42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006e46:	fb02 f303 	mul.w	r3, r2, r3
 8006e4a:	617b      	str	r3, [r7, #20]
    break;
 8006e4c:	e00c      	b.n	8006e68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e4e:	4a12      	ldr	r2, [pc, #72]	@ (8006e98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e56:	4a0e      	ldr	r2, [pc, #56]	@ (8006e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e58:	68d2      	ldr	r2, [r2, #12]
 8006e5a:	0a12      	lsrs	r2, r2, #8
 8006e5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006e60:	fb02 f303 	mul.w	r3, r2, r3
 8006e64:	617b      	str	r3, [r7, #20]
    break;
 8006e66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e68:	4b09      	ldr	r3, [pc, #36]	@ (8006e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	0e5b      	lsrs	r3, r3, #25
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	3301      	adds	r3, #1
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006e82:	687b      	ldr	r3, [r7, #4]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	40021000 	.word	0x40021000
 8006e94:	016e3600 	.word	0x016e3600
 8006e98:	00f42400 	.word	0x00f42400

08006e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8098 	beq.w	8006fea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ebe:	4b43      	ldr	r3, [pc, #268]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10d      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eca:	4b40      	ldr	r3, [pc, #256]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ece:	4a3f      	ldr	r2, [pc, #252]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ede:	60bb      	str	r3, [r7, #8]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a39      	ldr	r2, [pc, #228]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ef0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ef2:	f7fe fbd9 	bl	80056a8 <HAL_GetTick>
 8006ef6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ef8:	e009      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006efa:	f7fe fbd5 	bl	80056a8 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d902      	bls.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	74fb      	strb	r3, [r7, #19]
        break;
 8006f0c:	e005      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f0e:	4b30      	ldr	r3, [pc, #192]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0ef      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006f1a:	7cfb      	ldrb	r3, [r7, #19]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d159      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f20:	4b2a      	ldr	r3, [pc, #168]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01e      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d019      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f3c:	4b23      	ldr	r3, [pc, #140]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f48:	4b20      	ldr	r3, [pc, #128]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f58:	4b1c      	ldr	r3, [pc, #112]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f68:	4a18      	ldr	r2, [pc, #96]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d016      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7a:	f7fe fb95 	bl	80056a8 <HAL_GetTick>
 8006f7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f80:	e00b      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f82:	f7fe fb91 	bl	80056a8 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d902      	bls.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	74fb      	strb	r3, [r7, #19]
            break;
 8006f98:	e006      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d0ec      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006fa8:	7cfb      	ldrb	r3, [r7, #19]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10b      	bne.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fae:	4b07      	ldr	r3, [pc, #28]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fbc:	4903      	ldr	r1, [pc, #12]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006fc4:	e008      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fc6:	7cfb      	ldrb	r3, [r7, #19]
 8006fc8:	74bb      	strb	r3, [r7, #18]
 8006fca:	e005      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006fcc:	40021000 	.word	0x40021000
 8006fd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd4:	7cfb      	ldrb	r3, [r7, #19]
 8006fd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fd8:	7c7b      	ldrb	r3, [r7, #17]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d105      	bne.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fde:	4ba7      	ldr	r3, [pc, #668]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe2:	4aa6      	ldr	r2, [pc, #664]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fe8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ff6:	4ba1      	ldr	r3, [pc, #644]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffc:	f023 0203 	bic.w	r2, r3, #3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	499d      	ldr	r1, [pc, #628]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007018:	4b98      	ldr	r3, [pc, #608]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800701a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800701e:	f023 020c 	bic.w	r2, r3, #12
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	4995      	ldr	r1, [pc, #596]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007028:	4313      	orrs	r3, r2
 800702a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0304 	and.w	r3, r3, #4
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800703a:	4b90      	ldr	r3, [pc, #576]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800703c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007040:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	498c      	ldr	r1, [pc, #560]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800704a:	4313      	orrs	r3, r2
 800704c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800705c:	4b87      	ldr	r3, [pc, #540]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800705e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007062:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	4984      	ldr	r1, [pc, #528]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800706c:	4313      	orrs	r3, r2
 800706e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0310 	and.w	r3, r3, #16
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800707e:	4b7f      	ldr	r3, [pc, #508]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007084:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	497b      	ldr	r1, [pc, #492]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800708e:	4313      	orrs	r3, r2
 8007090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00a      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070a0:	4b76      	ldr	r3, [pc, #472]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	4973      	ldr	r1, [pc, #460]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070c2:	4b6e      	ldr	r3, [pc, #440]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	496a      	ldr	r1, [pc, #424]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00a      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070e4:	4b65      	ldr	r3, [pc, #404]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	4962      	ldr	r1, [pc, #392]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00a      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007106:	4b5d      	ldr	r3, [pc, #372]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800710c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007114:	4959      	ldr	r1, [pc, #356]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007116:	4313      	orrs	r3, r2
 8007118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007128:	4b54      	ldr	r3, [pc, #336]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800712a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800712e:	f023 0203 	bic.w	r2, r3, #3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007136:	4951      	ldr	r1, [pc, #324]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007138:	4313      	orrs	r3, r2
 800713a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800714a:	4b4c      	ldr	r3, [pc, #304]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800714c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007150:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007158:	4948      	ldr	r1, [pc, #288]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800715a:	4313      	orrs	r3, r2
 800715c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007168:	2b00      	cmp	r3, #0
 800716a:	d015      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800716c:	4b43      	ldr	r3, [pc, #268]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800716e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007172:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717a:	4940      	ldr	r1, [pc, #256]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800717c:	4313      	orrs	r3, r2
 800717e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800718a:	d105      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800718c:	4b3b      	ldr	r3, [pc, #236]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	4a3a      	ldr	r2, [pc, #232]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007196:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d015      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071a4:	4b35      	ldr	r3, [pc, #212]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071b2:	4932      	ldr	r1, [pc, #200]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071c2:	d105      	bne.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071c4:	4b2d      	ldr	r3, [pc, #180]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	4a2c      	ldr	r2, [pc, #176]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071ce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d015      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071dc:	4b27      	ldr	r3, [pc, #156]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ea:	4924      	ldr	r1, [pc, #144]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071fa:	d105      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071fc:	4b1f      	ldr	r3, [pc, #124]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	4a1e      	ldr	r2, [pc, #120]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007206:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d015      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007214:	4b19      	ldr	r3, [pc, #100]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800721a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007222:	4916      	ldr	r1, [pc, #88]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800722e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007232:	d105      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007234:	4b11      	ldr	r3, [pc, #68]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	4a10      	ldr	r2, [pc, #64]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800723a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800723e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d019      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800724c:	4b0b      	ldr	r3, [pc, #44]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800724e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007252:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725a:	4908      	ldr	r1, [pc, #32]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800725c:	4313      	orrs	r3, r2
 800725e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007266:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800726a:	d109      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800726c:	4b03      	ldr	r3, [pc, #12]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	4a02      	ldr	r2, [pc, #8]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007276:	60d3      	str	r3, [r2, #12]
 8007278:	e002      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800727a:	bf00      	nop
 800727c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d015      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800728c:	4b29      	ldr	r3, [pc, #164]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800728e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007292:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800729a:	4926      	ldr	r1, [pc, #152]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800729c:	4313      	orrs	r3, r2
 800729e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072aa:	d105      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072ac:	4b21      	ldr	r3, [pc, #132]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	4a20      	ldr	r2, [pc, #128]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d015      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80072c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072d2:	4918      	ldr	r1, [pc, #96]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072e2:	d105      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072e4:	4b13      	ldr	r3, [pc, #76]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	4a12      	ldr	r2, [pc, #72]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d015      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80072fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007302:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800730a:	490a      	ldr	r1, [pc, #40]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800730c:	4313      	orrs	r3, r2
 800730e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007316:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800731a:	d105      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800731c:	4b05      	ldr	r3, [pc, #20]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	4a04      	ldr	r2, [pc, #16]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007326:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007328:	7cbb      	ldrb	r3, [r7, #18]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	40021000 	.word	0x40021000

08007338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e054      	b.n	80073f4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d111      	bne.n	800737a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f002 fb3c 	bl	80099dc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007368:	2b00      	cmp	r3, #0
 800736a:	d102      	bne.n	8007372 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a23      	ldr	r2, [pc, #140]	@ (80073fc <HAL_TIM_Base_Init+0xc4>)
 8007370:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2202      	movs	r2, #2
 800737e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3304      	adds	r3, #4
 800738a:	4619      	mov	r1, r3
 800738c:	4610      	mov	r0, r2
 800738e:	f001 fc7b 	bl	8008c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	08005101 	.word	0x08005101

08007400 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b01      	cmp	r3, #1
 8007412:	d001      	beq.n	8007418 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e04c      	b.n	80074b2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a26      	ldr	r2, [pc, #152]	@ (80074c0 <HAL_TIM_Base_Start+0xc0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d022      	beq.n	8007470 <HAL_TIM_Base_Start+0x70>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007432:	d01d      	beq.n	8007470 <HAL_TIM_Base_Start+0x70>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a22      	ldr	r2, [pc, #136]	@ (80074c4 <HAL_TIM_Base_Start+0xc4>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d018      	beq.n	8007470 <HAL_TIM_Base_Start+0x70>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a21      	ldr	r2, [pc, #132]	@ (80074c8 <HAL_TIM_Base_Start+0xc8>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d013      	beq.n	8007470 <HAL_TIM_Base_Start+0x70>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a1f      	ldr	r2, [pc, #124]	@ (80074cc <HAL_TIM_Base_Start+0xcc>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00e      	beq.n	8007470 <HAL_TIM_Base_Start+0x70>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a1e      	ldr	r2, [pc, #120]	@ (80074d0 <HAL_TIM_Base_Start+0xd0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d009      	beq.n	8007470 <HAL_TIM_Base_Start+0x70>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a1c      	ldr	r2, [pc, #112]	@ (80074d4 <HAL_TIM_Base_Start+0xd4>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d004      	beq.n	8007470 <HAL_TIM_Base_Start+0x70>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a1b      	ldr	r2, [pc, #108]	@ (80074d8 <HAL_TIM_Base_Start+0xd8>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d115      	bne.n	800749c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	4b19      	ldr	r3, [pc, #100]	@ (80074dc <HAL_TIM_Base_Start+0xdc>)
 8007478:	4013      	ands	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b06      	cmp	r3, #6
 8007480:	d015      	beq.n	80074ae <HAL_TIM_Base_Start+0xae>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007488:	d011      	beq.n	80074ae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f042 0201 	orr.w	r2, r2, #1
 8007498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749a:	e008      	b.n	80074ae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 0201 	orr.w	r2, r2, #1
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	e000      	b.n	80074b0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	40012c00 	.word	0x40012c00
 80074c4:	40000400 	.word	0x40000400
 80074c8:	40000800 	.word	0x40000800
 80074cc:	40000c00 	.word	0x40000c00
 80074d0:	40013400 	.word	0x40013400
 80074d4:	40014000 	.word	0x40014000
 80074d8:	40015000 	.word	0x40015000
 80074dc:	00010007 	.word	0x00010007

080074e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d001      	beq.n	80074f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e054      	b.n	80075a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0201 	orr.w	r2, r2, #1
 800750e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a26      	ldr	r2, [pc, #152]	@ (80075b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d022      	beq.n	8007560 <HAL_TIM_Base_Start_IT+0x80>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007522:	d01d      	beq.n	8007560 <HAL_TIM_Base_Start_IT+0x80>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a22      	ldr	r2, [pc, #136]	@ (80075b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d018      	beq.n	8007560 <HAL_TIM_Base_Start_IT+0x80>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a21      	ldr	r2, [pc, #132]	@ (80075b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d013      	beq.n	8007560 <HAL_TIM_Base_Start_IT+0x80>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a1f      	ldr	r2, [pc, #124]	@ (80075bc <HAL_TIM_Base_Start_IT+0xdc>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00e      	beq.n	8007560 <HAL_TIM_Base_Start_IT+0x80>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a1e      	ldr	r2, [pc, #120]	@ (80075c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d009      	beq.n	8007560 <HAL_TIM_Base_Start_IT+0x80>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a1c      	ldr	r2, [pc, #112]	@ (80075c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d004      	beq.n	8007560 <HAL_TIM_Base_Start_IT+0x80>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1b      	ldr	r2, [pc, #108]	@ (80075c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d115      	bne.n	800758c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689a      	ldr	r2, [r3, #8]
 8007566:	4b19      	ldr	r3, [pc, #100]	@ (80075cc <HAL_TIM_Base_Start_IT+0xec>)
 8007568:	4013      	ands	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b06      	cmp	r3, #6
 8007570:	d015      	beq.n	800759e <HAL_TIM_Base_Start_IT+0xbe>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007578:	d011      	beq.n	800759e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f042 0201 	orr.w	r2, r2, #1
 8007588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758a:	e008      	b.n	800759e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0201 	orr.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	e000      	b.n	80075a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800759e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40012c00 	.word	0x40012c00
 80075b4:	40000400 	.word	0x40000400
 80075b8:	40000800 	.word	0x40000800
 80075bc:	40000c00 	.word	0x40000c00
 80075c0:	40013400 	.word	0x40013400
 80075c4:	40014000 	.word	0x40014000
 80075c8:	40015000 	.word	0x40015000
 80075cc:	00010007 	.word	0x00010007

080075d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e054      	b.n	800768c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d111      	bne.n	8007612 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f002 f9f0 	bl	80099dc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a23      	ldr	r2, [pc, #140]	@ (8007694 <HAL_TIM_PWM_Init+0xc4>)
 8007608:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2202      	movs	r2, #2
 8007616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3304      	adds	r3, #4
 8007622:	4619      	mov	r1, r3
 8007624:	4610      	mov	r0, r2
 8007626:	f001 fb2f 	bl	8008c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	08007699 	.word	0x08007699

08007698 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d109      	bne.n	80076d0 <HAL_TIM_PWM_Start+0x24>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	bf14      	ite	ne
 80076c8:	2301      	movne	r3, #1
 80076ca:	2300      	moveq	r3, #0
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	e03c      	b.n	800774a <HAL_TIM_PWM_Start+0x9e>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d109      	bne.n	80076ea <HAL_TIM_PWM_Start+0x3e>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b01      	cmp	r3, #1
 80076e0:	bf14      	ite	ne
 80076e2:	2301      	movne	r3, #1
 80076e4:	2300      	moveq	r3, #0
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	e02f      	b.n	800774a <HAL_TIM_PWM_Start+0x9e>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d109      	bne.n	8007704 <HAL_TIM_PWM_Start+0x58>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	bf14      	ite	ne
 80076fc:	2301      	movne	r3, #1
 80076fe:	2300      	moveq	r3, #0
 8007700:	b2db      	uxtb	r3, r3
 8007702:	e022      	b.n	800774a <HAL_TIM_PWM_Start+0x9e>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2b0c      	cmp	r3, #12
 8007708:	d109      	bne.n	800771e <HAL_TIM_PWM_Start+0x72>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b01      	cmp	r3, #1
 8007714:	bf14      	ite	ne
 8007716:	2301      	movne	r3, #1
 8007718:	2300      	moveq	r3, #0
 800771a:	b2db      	uxtb	r3, r3
 800771c:	e015      	b.n	800774a <HAL_TIM_PWM_Start+0x9e>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2b10      	cmp	r3, #16
 8007722:	d109      	bne.n	8007738 <HAL_TIM_PWM_Start+0x8c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b01      	cmp	r3, #1
 800772e:	bf14      	ite	ne
 8007730:	2301      	movne	r3, #1
 8007732:	2300      	moveq	r3, #0
 8007734:	b2db      	uxtb	r3, r3
 8007736:	e008      	b.n	800774a <HAL_TIM_PWM_Start+0x9e>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b01      	cmp	r3, #1
 8007742:	bf14      	ite	ne
 8007744:	2301      	movne	r3, #1
 8007746:	2300      	moveq	r3, #0
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e0a6      	b.n	80078a0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d104      	bne.n	8007762 <HAL_TIM_PWM_Start+0xb6>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007760:	e023      	b.n	80077aa <HAL_TIM_PWM_Start+0xfe>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b04      	cmp	r3, #4
 8007766:	d104      	bne.n	8007772 <HAL_TIM_PWM_Start+0xc6>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007770:	e01b      	b.n	80077aa <HAL_TIM_PWM_Start+0xfe>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b08      	cmp	r3, #8
 8007776:	d104      	bne.n	8007782 <HAL_TIM_PWM_Start+0xd6>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007780:	e013      	b.n	80077aa <HAL_TIM_PWM_Start+0xfe>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b0c      	cmp	r3, #12
 8007786:	d104      	bne.n	8007792 <HAL_TIM_PWM_Start+0xe6>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007790:	e00b      	b.n	80077aa <HAL_TIM_PWM_Start+0xfe>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b10      	cmp	r3, #16
 8007796:	d104      	bne.n	80077a2 <HAL_TIM_PWM_Start+0xf6>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2202      	movs	r2, #2
 800779c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077a0:	e003      	b.n	80077aa <HAL_TIM_PWM_Start+0xfe>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2202      	movs	r2, #2
 80077a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2201      	movs	r2, #1
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f002 f8ec 	bl	8009990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a3a      	ldr	r2, [pc, #232]	@ (80078a8 <HAL_TIM_PWM_Start+0x1fc>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d018      	beq.n	80077f4 <HAL_TIM_PWM_Start+0x148>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a39      	ldr	r2, [pc, #228]	@ (80078ac <HAL_TIM_PWM_Start+0x200>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d013      	beq.n	80077f4 <HAL_TIM_PWM_Start+0x148>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a37      	ldr	r2, [pc, #220]	@ (80078b0 <HAL_TIM_PWM_Start+0x204>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d00e      	beq.n	80077f4 <HAL_TIM_PWM_Start+0x148>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a36      	ldr	r2, [pc, #216]	@ (80078b4 <HAL_TIM_PWM_Start+0x208>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d009      	beq.n	80077f4 <HAL_TIM_PWM_Start+0x148>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a34      	ldr	r2, [pc, #208]	@ (80078b8 <HAL_TIM_PWM_Start+0x20c>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d004      	beq.n	80077f4 <HAL_TIM_PWM_Start+0x148>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a33      	ldr	r2, [pc, #204]	@ (80078bc <HAL_TIM_PWM_Start+0x210>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d101      	bne.n	80077f8 <HAL_TIM_PWM_Start+0x14c>
 80077f4:	2301      	movs	r3, #1
 80077f6:	e000      	b.n	80077fa <HAL_TIM_PWM_Start+0x14e>
 80077f8:	2300      	movs	r3, #0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d007      	beq.n	800780e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800780c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a25      	ldr	r2, [pc, #148]	@ (80078a8 <HAL_TIM_PWM_Start+0x1fc>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d022      	beq.n	800785e <HAL_TIM_PWM_Start+0x1b2>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007820:	d01d      	beq.n	800785e <HAL_TIM_PWM_Start+0x1b2>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a26      	ldr	r2, [pc, #152]	@ (80078c0 <HAL_TIM_PWM_Start+0x214>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d018      	beq.n	800785e <HAL_TIM_PWM_Start+0x1b2>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a24      	ldr	r2, [pc, #144]	@ (80078c4 <HAL_TIM_PWM_Start+0x218>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d013      	beq.n	800785e <HAL_TIM_PWM_Start+0x1b2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a23      	ldr	r2, [pc, #140]	@ (80078c8 <HAL_TIM_PWM_Start+0x21c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d00e      	beq.n	800785e <HAL_TIM_PWM_Start+0x1b2>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a19      	ldr	r2, [pc, #100]	@ (80078ac <HAL_TIM_PWM_Start+0x200>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d009      	beq.n	800785e <HAL_TIM_PWM_Start+0x1b2>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a18      	ldr	r2, [pc, #96]	@ (80078b0 <HAL_TIM_PWM_Start+0x204>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d004      	beq.n	800785e <HAL_TIM_PWM_Start+0x1b2>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a18      	ldr	r2, [pc, #96]	@ (80078bc <HAL_TIM_PWM_Start+0x210>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d115      	bne.n	800788a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	4b19      	ldr	r3, [pc, #100]	@ (80078cc <HAL_TIM_PWM_Start+0x220>)
 8007866:	4013      	ands	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b06      	cmp	r3, #6
 800786e:	d015      	beq.n	800789c <HAL_TIM_PWM_Start+0x1f0>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007876:	d011      	beq.n	800789c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f042 0201 	orr.w	r2, r2, #1
 8007886:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007888:	e008      	b.n	800789c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f042 0201 	orr.w	r2, r2, #1
 8007898:	601a      	str	r2, [r3, #0]
 800789a:	e000      	b.n	800789e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800789c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	40012c00 	.word	0x40012c00
 80078ac:	40013400 	.word	0x40013400
 80078b0:	40014000 	.word	0x40014000
 80078b4:	40014400 	.word	0x40014400
 80078b8:	40014800 	.word	0x40014800
 80078bc:	40015000 	.word	0x40015000
 80078c0:	40000400 	.word	0x40000400
 80078c4:	40000800 	.word	0x40000800
 80078c8:	40000c00 	.word	0x40000c00
 80078cc:	00010007 	.word	0x00010007

080078d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e054      	b.n	800798c <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d111      	bne.n	8007912 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f002 f870 	bl	80099dc <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007900:	2b00      	cmp	r3, #0
 8007902:	d102      	bne.n	800790a <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a23      	ldr	r2, [pc, #140]	@ (8007994 <HAL_TIM_IC_Init+0xc4>)
 8007908:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2202      	movs	r2, #2
 8007916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	3304      	adds	r3, #4
 8007922:	4619      	mov	r1, r3
 8007924:	4610      	mov	r0, r2
 8007926:	f001 f9af 	bl	8008c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	08004f01 	.word	0x08004f01

08007998 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d104      	bne.n	80079b2 <HAL_TIM_IC_Start+0x1a>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	e023      	b.n	80079fa <HAL_TIM_IC_Start+0x62>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	d104      	bne.n	80079c2 <HAL_TIM_IC_Start+0x2a>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	e01b      	b.n	80079fa <HAL_TIM_IC_Start+0x62>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	d104      	bne.n	80079d2 <HAL_TIM_IC_Start+0x3a>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	e013      	b.n	80079fa <HAL_TIM_IC_Start+0x62>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b0c      	cmp	r3, #12
 80079d6:	d104      	bne.n	80079e2 <HAL_TIM_IC_Start+0x4a>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	e00b      	b.n	80079fa <HAL_TIM_IC_Start+0x62>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b10      	cmp	r3, #16
 80079e6:	d104      	bne.n	80079f2 <HAL_TIM_IC_Start+0x5a>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	e003      	b.n	80079fa <HAL_TIM_IC_Start+0x62>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d104      	bne.n	8007a0c <HAL_TIM_IC_Start+0x74>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	e013      	b.n	8007a34 <HAL_TIM_IC_Start+0x9c>
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	d104      	bne.n	8007a1c <HAL_TIM_IC_Start+0x84>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	e00b      	b.n	8007a34 <HAL_TIM_IC_Start+0x9c>
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	2b08      	cmp	r3, #8
 8007a20:	d104      	bne.n	8007a2c <HAL_TIM_IC_Start+0x94>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	e003      	b.n	8007a34 <HAL_TIM_IC_Start+0x9c>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d102      	bne.n	8007a42 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d001      	beq.n	8007a46 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e097      	b.n	8007b76 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d104      	bne.n	8007a56 <HAL_TIM_IC_Start+0xbe>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a54:	e023      	b.n	8007a9e <HAL_TIM_IC_Start+0x106>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	d104      	bne.n	8007a66 <HAL_TIM_IC_Start+0xce>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a64:	e01b      	b.n	8007a9e <HAL_TIM_IC_Start+0x106>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b08      	cmp	r3, #8
 8007a6a:	d104      	bne.n	8007a76 <HAL_TIM_IC_Start+0xde>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a74:	e013      	b.n	8007a9e <HAL_TIM_IC_Start+0x106>
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b0c      	cmp	r3, #12
 8007a7a:	d104      	bne.n	8007a86 <HAL_TIM_IC_Start+0xee>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a84:	e00b      	b.n	8007a9e <HAL_TIM_IC_Start+0x106>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b10      	cmp	r3, #16
 8007a8a:	d104      	bne.n	8007a96 <HAL_TIM_IC_Start+0xfe>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a94:	e003      	b.n	8007a9e <HAL_TIM_IC_Start+0x106>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d104      	bne.n	8007aae <HAL_TIM_IC_Start+0x116>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007aac:	e013      	b.n	8007ad6 <HAL_TIM_IC_Start+0x13e>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d104      	bne.n	8007abe <HAL_TIM_IC_Start+0x126>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007abc:	e00b      	b.n	8007ad6 <HAL_TIM_IC_Start+0x13e>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b08      	cmp	r3, #8
 8007ac2:	d104      	bne.n	8007ace <HAL_TIM_IC_Start+0x136>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007acc:	e003      	b.n	8007ad6 <HAL_TIM_IC_Start+0x13e>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2201      	movs	r2, #1
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f001 ff56 	bl	8009990 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a25      	ldr	r2, [pc, #148]	@ (8007b80 <HAL_TIM_IC_Start+0x1e8>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d022      	beq.n	8007b34 <HAL_TIM_IC_Start+0x19c>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007af6:	d01d      	beq.n	8007b34 <HAL_TIM_IC_Start+0x19c>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a21      	ldr	r2, [pc, #132]	@ (8007b84 <HAL_TIM_IC_Start+0x1ec>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d018      	beq.n	8007b34 <HAL_TIM_IC_Start+0x19c>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a20      	ldr	r2, [pc, #128]	@ (8007b88 <HAL_TIM_IC_Start+0x1f0>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d013      	beq.n	8007b34 <HAL_TIM_IC_Start+0x19c>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a1e      	ldr	r2, [pc, #120]	@ (8007b8c <HAL_TIM_IC_Start+0x1f4>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00e      	beq.n	8007b34 <HAL_TIM_IC_Start+0x19c>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8007b90 <HAL_TIM_IC_Start+0x1f8>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d009      	beq.n	8007b34 <HAL_TIM_IC_Start+0x19c>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a1b      	ldr	r2, [pc, #108]	@ (8007b94 <HAL_TIM_IC_Start+0x1fc>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d004      	beq.n	8007b34 <HAL_TIM_IC_Start+0x19c>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007b98 <HAL_TIM_IC_Start+0x200>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d115      	bne.n	8007b60 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	4b18      	ldr	r3, [pc, #96]	@ (8007b9c <HAL_TIM_IC_Start+0x204>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b06      	cmp	r3, #6
 8007b44:	d015      	beq.n	8007b72 <HAL_TIM_IC_Start+0x1da>
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b4c:	d011      	beq.n	8007b72 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0201 	orr.w	r2, r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5e:	e008      	b.n	8007b72 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0201 	orr.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	e000      	b.n	8007b74 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	40012c00 	.word	0x40012c00
 8007b84:	40000400 	.word	0x40000400
 8007b88:	40000800 	.word	0x40000800
 8007b8c:	40000c00 	.word	0x40000c00
 8007b90:	40013400 	.word	0x40013400
 8007b94:	40014000 	.word	0x40014000
 8007b98:	40015000 	.word	0x40015000
 8007b9c:	00010007 	.word	0x00010007

08007ba0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e04c      	b.n	8007c4e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d111      	bne.n	8007be4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f001 ff07 	bl	80099dc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d102      	bne.n	8007bdc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8007c58 <HAL_TIM_OnePulse_Init+0xb8>)
 8007bda:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	f001 f846 	bl	8008c88 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 0208 	bic.w	r2, r2, #8
 8007c0a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6819      	ldr	r1, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	08007c5d 	.word	0x08007c5d

08007c5c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c98:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d108      	bne.n	8007cb2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d105      	bne.n	8007cb2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ca6:	7b7b      	ldrb	r3, [r7, #13]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d102      	bne.n	8007cb2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cac:	7b3b      	ldrb	r3, [r7, #12]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d001      	beq.n	8007cb6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e059      	b.n	8007d6a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2202      	movs	r2, #2
 8007cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2202      	movs	r2, #2
 8007cca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f042 0202 	orr.w	r2, r2, #2
 8007ce4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68da      	ldr	r2, [r3, #12]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f042 0204 	orr.w	r2, r2, #4
 8007cf4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f001 fe46 	bl	8009990 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	2104      	movs	r1, #4
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f001 fe3f 	bl	8009990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a17      	ldr	r2, [pc, #92]	@ (8007d74 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d018      	beq.n	8007d4e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a15      	ldr	r2, [pc, #84]	@ (8007d78 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d013      	beq.n	8007d4e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a14      	ldr	r2, [pc, #80]	@ (8007d7c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00e      	beq.n	8007d4e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a12      	ldr	r2, [pc, #72]	@ (8007d80 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d009      	beq.n	8007d4e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a11      	ldr	r2, [pc, #68]	@ (8007d84 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d004      	beq.n	8007d4e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a0f      	ldr	r2, [pc, #60]	@ (8007d88 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d101      	bne.n	8007d52 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e000      	b.n	8007d54 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007d52:	2300      	movs	r3, #0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d007      	beq.n	8007d68 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d66:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	40012c00 	.word	0x40012c00
 8007d78:	40013400 	.word	0x40013400
 8007d7c:	40014000 	.word	0x40014000
 8007d80:	40014400 	.word	0x40014400
 8007d84:	40014800 	.word	0x40014800
 8007d88:	40015000 	.word	0x40015000

08007d8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e0a2      	b.n	8007ee6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d111      	bne.n	8007dd0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f001 fe11 	bl	80099dc <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d102      	bne.n	8007dc8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a4a      	ldr	r2, [pc, #296]	@ (8007ef0 <HAL_TIM_Encoder_Init+0x164>)
 8007dc6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	6812      	ldr	r2, [r2, #0]
 8007de2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007de6:	f023 0307 	bic.w	r3, r3, #7
 8007dea:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3304      	adds	r3, #4
 8007df4:	4619      	mov	r1, r3
 8007df6:	4610      	mov	r0, r2
 8007df8:	f000 ff46 	bl	8008c88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e24:	f023 0303 	bic.w	r3, r3, #3
 8007e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	021b      	lsls	r3, r3, #8
 8007e34:	4313      	orrs	r3, r2
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007e42:	f023 030c 	bic.w	r3, r3, #12
 8007e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	68da      	ldr	r2, [r3, #12]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	011a      	lsls	r2, r3, #4
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	031b      	lsls	r3, r3, #12
 8007e72:	4313      	orrs	r3, r2
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007e80:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007e88:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	4313      	orrs	r3, r2
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	08004ff5 	.word	0x08004ff5

08007ef4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d110      	bne.n	8007f46 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d102      	bne.n	8007f30 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f2a:	7b7b      	ldrb	r3, [r7, #13]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d001      	beq.n	8007f34 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e069      	b.n	8008008 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f44:	e031      	b.n	8007faa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b04      	cmp	r3, #4
 8007f4a:	d110      	bne.n	8007f6e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d102      	bne.n	8007f58 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f52:	7b3b      	ldrb	r3, [r7, #12]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d001      	beq.n	8007f5c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e055      	b.n	8008008 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f6c:	e01d      	b.n	8007faa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d108      	bne.n	8007f86 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d105      	bne.n	8007f86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f7a:	7b7b      	ldrb	r3, [r7, #13]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d102      	bne.n	8007f86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f80:	7b3b      	ldrb	r3, [r7, #12]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d001      	beq.n	8007f8a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e03e      	b.n	8008008 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2202      	movs	r2, #2
 8007f96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <HAL_TIM_Encoder_Start+0xc4>
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d008      	beq.n	8007fc8 <HAL_TIM_Encoder_Start+0xd4>
 8007fb6:	e00f      	b.n	8007fd8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f001 fce5 	bl	8009990 <TIM_CCxChannelCmd>
      break;
 8007fc6:	e016      	b.n	8007ff6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	2104      	movs	r1, #4
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f001 fcdd 	bl	8009990 <TIM_CCxChannelCmd>
      break;
 8007fd6:	e00e      	b.n	8007ff6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	2100      	movs	r1, #0
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f001 fcd5 	bl	8009990 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2201      	movs	r2, #1
 8007fec:	2104      	movs	r1, #4
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f001 fcce 	bl	8009990 <TIM_CCxChannelCmd>
      break;
 8007ff4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f042 0201 	orr.w	r2, r2, #1
 8008004:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d026      	beq.n	8008080 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b00      	cmp	r3, #0
 800803a:	d021      	beq.n	8008080 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f06f 0202 	mvn.w	r2, #2
 8008044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	f003 0303 	and.w	r3, r3, #3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d005      	beq.n	8008066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	4798      	blx	r3
 8008064:	e009      	b.n	800807a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f003 0304 	and.w	r3, r3, #4
 8008086:	2b00      	cmp	r3, #0
 8008088:	d026      	beq.n	80080d8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f003 0304 	and.w	r3, r3, #4
 8008090:	2b00      	cmp	r3, #0
 8008092:	d021      	beq.n	80080d8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0204 	mvn.w	r2, #4
 800809c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2202      	movs	r2, #2
 80080a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d005      	beq.n	80080be <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	4798      	blx	r3
 80080bc:	e009      	b.n	80080d2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f003 0308 	and.w	r3, r3, #8
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d026      	beq.n	8008130 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f003 0308 	and.w	r3, r3, #8
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d021      	beq.n	8008130 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f06f 0208 	mvn.w	r2, #8
 80080f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2204      	movs	r2, #4
 80080fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	f003 0303 	and.w	r3, r3, #3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d005      	beq.n	8008116 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	4798      	blx	r3
 8008114:	e009      	b.n	800812a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f003 0310 	and.w	r3, r3, #16
 8008136:	2b00      	cmp	r3, #0
 8008138:	d026      	beq.n	8008188 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f003 0310 	and.w	r3, r3, #16
 8008140:	2b00      	cmp	r3, #0
 8008142:	d021      	beq.n	8008188 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f06f 0210 	mvn.w	r2, #16
 800814c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2208      	movs	r2, #8
 8008152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4798      	blx	r3
 800816c:	e009      	b.n	8008182 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00e      	beq.n	80081b0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	d009      	beq.n	80081b0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0201 	mvn.w	r2, #1
 80081a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d104      	bne.n	80081c4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00e      	beq.n	80081e2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d009      	beq.n	80081e2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80081d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00e      	beq.n	800820a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d009      	beq.n	800820a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80081fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00e      	beq.n	8008232 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800821a:	2b00      	cmp	r3, #0
 800821c:	d009      	beq.n	8008232 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f003 0320 	and.w	r3, r3, #32
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00e      	beq.n	800825a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f003 0320 	and.w	r3, r3, #32
 8008242:	2b00      	cmp	r3, #0
 8008244:	d009      	beq.n	800825a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f06f 0220 	mvn.w	r2, #32
 800824e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00e      	beq.n	8008282 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d009      	beq.n	8008282 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00e      	beq.n	80082aa <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d009      	beq.n	80082aa <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800829e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00e      	beq.n	80082d2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d009      	beq.n	80082d2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80082c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00e      	beq.n	80082fa <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d009      	beq.n	80082fa <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80082ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082fa:	bf00      	nop
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b086      	sub	sp, #24
 8008306:	af00      	add	r7, sp, #0
 8008308:	60f8      	str	r0, [r7, #12]
 800830a:	60b9      	str	r1, [r7, #8]
 800830c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008318:	2b01      	cmp	r3, #1
 800831a:	d101      	bne.n	8008320 <HAL_TIM_IC_ConfigChannel+0x1e>
 800831c:	2302      	movs	r3, #2
 800831e:	e088      	b.n	8008432 <HAL_TIM_IC_ConfigChannel+0x130>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d11b      	bne.n	8008366 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800833e:	f001 f961 	bl	8009604 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	699a      	ldr	r2, [r3, #24]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 020c 	bic.w	r2, r2, #12
 8008350:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	6999      	ldr	r1, [r3, #24]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	619a      	str	r2, [r3, #24]
 8008364:	e060      	b.n	8008428 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b04      	cmp	r3, #4
 800836a:	d11c      	bne.n	80083a6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800837c:	f001 f9e5 	bl	800974a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	699a      	ldr	r2, [r3, #24]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800838e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6999      	ldr	r1, [r3, #24]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	021a      	lsls	r2, r3, #8
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	619a      	str	r2, [r3, #24]
 80083a4:	e040      	b.n	8008428 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2b08      	cmp	r3, #8
 80083aa:	d11b      	bne.n	80083e4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80083bc:	f001 fa32 	bl	8009824 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	69da      	ldr	r2, [r3, #28]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 020c 	bic.w	r2, r2, #12
 80083ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	69d9      	ldr	r1, [r3, #28]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	689a      	ldr	r2, [r3, #8]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	61da      	str	r2, [r3, #28]
 80083e2:	e021      	b.n	8008428 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b0c      	cmp	r3, #12
 80083e8:	d11c      	bne.n	8008424 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80083fa:	f001 fa4f 	bl	800989c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	69da      	ldr	r2, [r3, #28]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800840c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	69d9      	ldr	r1, [r3, #28]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	021a      	lsls	r2, r3, #8
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	61da      	str	r2, [r3, #28]
 8008422:	e001      	b.n	8008428 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008430:	7dfb      	ldrb	r3, [r7, #23]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008452:	2b01      	cmp	r3, #1
 8008454:	d101      	bne.n	800845a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008456:	2302      	movs	r3, #2
 8008458:	e0ff      	b.n	800865a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b14      	cmp	r3, #20
 8008466:	f200 80f0 	bhi.w	800864a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800846a:	a201      	add	r2, pc, #4	@ (adr r2, 8008470 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	080084c5 	.word	0x080084c5
 8008474:	0800864b 	.word	0x0800864b
 8008478:	0800864b 	.word	0x0800864b
 800847c:	0800864b 	.word	0x0800864b
 8008480:	08008505 	.word	0x08008505
 8008484:	0800864b 	.word	0x0800864b
 8008488:	0800864b 	.word	0x0800864b
 800848c:	0800864b 	.word	0x0800864b
 8008490:	08008547 	.word	0x08008547
 8008494:	0800864b 	.word	0x0800864b
 8008498:	0800864b 	.word	0x0800864b
 800849c:	0800864b 	.word	0x0800864b
 80084a0:	08008587 	.word	0x08008587
 80084a4:	0800864b 	.word	0x0800864b
 80084a8:	0800864b 	.word	0x0800864b
 80084ac:	0800864b 	.word	0x0800864b
 80084b0:	080085c9 	.word	0x080085c9
 80084b4:	0800864b 	.word	0x0800864b
 80084b8:	0800864b 	.word	0x0800864b
 80084bc:	0800864b 	.word	0x0800864b
 80084c0:	08008609 	.word	0x08008609
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68b9      	ldr	r1, [r7, #8]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 fc90 	bl	8008df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	699a      	ldr	r2, [r3, #24]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f042 0208 	orr.w	r2, r2, #8
 80084de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	699a      	ldr	r2, [r3, #24]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0204 	bic.w	r2, r2, #4
 80084ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6999      	ldr	r1, [r3, #24]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	691a      	ldr	r2, [r3, #16]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	619a      	str	r2, [r3, #24]
      break;
 8008502:	e0a5      	b.n	8008650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68b9      	ldr	r1, [r7, #8]
 800850a:	4618      	mov	r0, r3
 800850c:	f000 fd0a 	bl	8008f24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	699a      	ldr	r2, [r3, #24]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800851e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	699a      	ldr	r2, [r3, #24]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800852e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6999      	ldr	r1, [r3, #24]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	021a      	lsls	r2, r3, #8
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	619a      	str	r2, [r3, #24]
      break;
 8008544:	e084      	b.n	8008650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68b9      	ldr	r1, [r7, #8]
 800854c:	4618      	mov	r0, r3
 800854e:	f000 fd7d 	bl	800904c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	69da      	ldr	r2, [r3, #28]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f042 0208 	orr.w	r2, r2, #8
 8008560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	69da      	ldr	r2, [r3, #28]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 0204 	bic.w	r2, r2, #4
 8008570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69d9      	ldr	r1, [r3, #28]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	691a      	ldr	r2, [r3, #16]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	430a      	orrs	r2, r1
 8008582:	61da      	str	r2, [r3, #28]
      break;
 8008584:	e064      	b.n	8008650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68b9      	ldr	r1, [r7, #8]
 800858c:	4618      	mov	r0, r3
 800858e:	f000 fdef 	bl	8009170 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69da      	ldr	r2, [r3, #28]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	69da      	ldr	r2, [r3, #28]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69d9      	ldr	r1, [r3, #28]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	021a      	lsls	r2, r3, #8
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	61da      	str	r2, [r3, #28]
      break;
 80085c6:	e043      	b.n	8008650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fe62 	bl	8009298 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f042 0208 	orr.w	r2, r2, #8
 80085e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 0204 	bic.w	r2, r2, #4
 80085f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	691a      	ldr	r2, [r3, #16]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008606:	e023      	b.n	8008650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68b9      	ldr	r1, [r7, #8]
 800860e:	4618      	mov	r0, r3
 8008610:	f000 feac 	bl	800936c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008622:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008632:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	021a      	lsls	r2, r3, #8
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	430a      	orrs	r2, r1
 8008646:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008648:	e002      	b.n	8008650 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	75fb      	strb	r3, [r7, #23]
      break;
 800864e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008658:	7dfb      	ldrb	r3, [r7, #23]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3718      	adds	r7, #24
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop

08008664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <HAL_TIM_ConfigClockSource+0x1c>
 800867c:	2302      	movs	r3, #2
 800867e:	e0f6      	b.n	800886e <HAL_TIM_ConfigClockSource+0x20a>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800869e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80086a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a6f      	ldr	r2, [pc, #444]	@ (8008878 <HAL_TIM_ConfigClockSource+0x214>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	f000 80c1 	beq.w	8008842 <HAL_TIM_ConfigClockSource+0x1de>
 80086c0:	4a6d      	ldr	r2, [pc, #436]	@ (8008878 <HAL_TIM_ConfigClockSource+0x214>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	f200 80c6 	bhi.w	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 80086c8:	4a6c      	ldr	r2, [pc, #432]	@ (800887c <HAL_TIM_ConfigClockSource+0x218>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	f000 80b9 	beq.w	8008842 <HAL_TIM_ConfigClockSource+0x1de>
 80086d0:	4a6a      	ldr	r2, [pc, #424]	@ (800887c <HAL_TIM_ConfigClockSource+0x218>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	f200 80be 	bhi.w	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 80086d8:	4a69      	ldr	r2, [pc, #420]	@ (8008880 <HAL_TIM_ConfigClockSource+0x21c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	f000 80b1 	beq.w	8008842 <HAL_TIM_ConfigClockSource+0x1de>
 80086e0:	4a67      	ldr	r2, [pc, #412]	@ (8008880 <HAL_TIM_ConfigClockSource+0x21c>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	f200 80b6 	bhi.w	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 80086e8:	4a66      	ldr	r2, [pc, #408]	@ (8008884 <HAL_TIM_ConfigClockSource+0x220>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	f000 80a9 	beq.w	8008842 <HAL_TIM_ConfigClockSource+0x1de>
 80086f0:	4a64      	ldr	r2, [pc, #400]	@ (8008884 <HAL_TIM_ConfigClockSource+0x220>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	f200 80ae 	bhi.w	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 80086f8:	4a63      	ldr	r2, [pc, #396]	@ (8008888 <HAL_TIM_ConfigClockSource+0x224>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	f000 80a1 	beq.w	8008842 <HAL_TIM_ConfigClockSource+0x1de>
 8008700:	4a61      	ldr	r2, [pc, #388]	@ (8008888 <HAL_TIM_ConfigClockSource+0x224>)
 8008702:	4293      	cmp	r3, r2
 8008704:	f200 80a6 	bhi.w	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 8008708:	4a60      	ldr	r2, [pc, #384]	@ (800888c <HAL_TIM_ConfigClockSource+0x228>)
 800870a:	4293      	cmp	r3, r2
 800870c:	f000 8099 	beq.w	8008842 <HAL_TIM_ConfigClockSource+0x1de>
 8008710:	4a5e      	ldr	r2, [pc, #376]	@ (800888c <HAL_TIM_ConfigClockSource+0x228>)
 8008712:	4293      	cmp	r3, r2
 8008714:	f200 809e 	bhi.w	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 8008718:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800871c:	f000 8091 	beq.w	8008842 <HAL_TIM_ConfigClockSource+0x1de>
 8008720:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008724:	f200 8096 	bhi.w	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 8008728:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800872c:	f000 8089 	beq.w	8008842 <HAL_TIM_ConfigClockSource+0x1de>
 8008730:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008734:	f200 808e 	bhi.w	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 8008738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800873c:	d03e      	beq.n	80087bc <HAL_TIM_ConfigClockSource+0x158>
 800873e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008742:	f200 8087 	bhi.w	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 8008746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800874a:	f000 8086 	beq.w	800885a <HAL_TIM_ConfigClockSource+0x1f6>
 800874e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008752:	d87f      	bhi.n	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 8008754:	2b70      	cmp	r3, #112	@ 0x70
 8008756:	d01a      	beq.n	800878e <HAL_TIM_ConfigClockSource+0x12a>
 8008758:	2b70      	cmp	r3, #112	@ 0x70
 800875a:	d87b      	bhi.n	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 800875c:	2b60      	cmp	r3, #96	@ 0x60
 800875e:	d050      	beq.n	8008802 <HAL_TIM_ConfigClockSource+0x19e>
 8008760:	2b60      	cmp	r3, #96	@ 0x60
 8008762:	d877      	bhi.n	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 8008764:	2b50      	cmp	r3, #80	@ 0x50
 8008766:	d03c      	beq.n	80087e2 <HAL_TIM_ConfigClockSource+0x17e>
 8008768:	2b50      	cmp	r3, #80	@ 0x50
 800876a:	d873      	bhi.n	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 800876c:	2b40      	cmp	r3, #64	@ 0x40
 800876e:	d058      	beq.n	8008822 <HAL_TIM_ConfigClockSource+0x1be>
 8008770:	2b40      	cmp	r3, #64	@ 0x40
 8008772:	d86f      	bhi.n	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 8008774:	2b30      	cmp	r3, #48	@ 0x30
 8008776:	d064      	beq.n	8008842 <HAL_TIM_ConfigClockSource+0x1de>
 8008778:	2b30      	cmp	r3, #48	@ 0x30
 800877a:	d86b      	bhi.n	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 800877c:	2b20      	cmp	r3, #32
 800877e:	d060      	beq.n	8008842 <HAL_TIM_ConfigClockSource+0x1de>
 8008780:	2b20      	cmp	r3, #32
 8008782:	d867      	bhi.n	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
 8008784:	2b00      	cmp	r3, #0
 8008786:	d05c      	beq.n	8008842 <HAL_TIM_ConfigClockSource+0x1de>
 8008788:	2b10      	cmp	r3, #16
 800878a:	d05a      	beq.n	8008842 <HAL_TIM_ConfigClockSource+0x1de>
 800878c:	e062      	b.n	8008854 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800879e:	f001 f8d7 	bl	8009950 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80087b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	609a      	str	r2, [r3, #8]
      break;
 80087ba:	e04f      	b.n	800885c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087cc:	f001 f8c0 	bl	8009950 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087de:	609a      	str	r2, [r3, #8]
      break;
 80087e0:	e03c      	b.n	800885c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087ee:	461a      	mov	r2, r3
 80087f0:	f000 ff7c 	bl	80096ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2150      	movs	r1, #80	@ 0x50
 80087fa:	4618      	mov	r0, r3
 80087fc:	f001 f88b 	bl	8009916 <TIM_ITRx_SetConfig>
      break;
 8008800:	e02c      	b.n	800885c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800880e:	461a      	mov	r2, r3
 8008810:	f000 ffd8 	bl	80097c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2160      	movs	r1, #96	@ 0x60
 800881a:	4618      	mov	r0, r3
 800881c:	f001 f87b 	bl	8009916 <TIM_ITRx_SetConfig>
      break;
 8008820:	e01c      	b.n	800885c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800882e:	461a      	mov	r2, r3
 8008830:	f000 ff5c 	bl	80096ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2140      	movs	r1, #64	@ 0x40
 800883a:	4618      	mov	r0, r3
 800883c:	f001 f86b 	bl	8009916 <TIM_ITRx_SetConfig>
      break;
 8008840:	e00c      	b.n	800885c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4619      	mov	r1, r3
 800884c:	4610      	mov	r0, r2
 800884e:	f001 f862 	bl	8009916 <TIM_ITRx_SetConfig>
      break;
 8008852:	e003      	b.n	800885c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	73fb      	strb	r3, [r7, #15]
      break;
 8008858:	e000      	b.n	800885c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800885a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800886c:	7bfb      	ldrb	r3, [r7, #15]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	00100070 	.word	0x00100070
 800887c:	00100060 	.word	0x00100060
 8008880:	00100050 	.word	0x00100050
 8008884:	00100040 	.word	0x00100040
 8008888:	00100030 	.word	0x00100030
 800888c:	00100020 	.word	0x00100020

08008890 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d101      	bne.n	80088a8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80088a4:	2302      	movs	r3, #2
 80088a6:	e031      	b.n	800890c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2202      	movs	r2, #2
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fdc2 	bl	8009444 <TIM_SlaveTimer_SetConfig>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d009      	beq.n	80088da <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e018      	b.n	800890c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68da      	ldr	r2, [r3, #12]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088e8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68da      	ldr	r2, [r3, #12]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80088f8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	460b      	mov	r3, r1
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e14a      	b.n	8008c7a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	f040 80dd 	bne.w	8008bac <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80089f2:	7afb      	ldrb	r3, [r7, #11]
 80089f4:	2b1f      	cmp	r3, #31
 80089f6:	f200 80d6 	bhi.w	8008ba6 <HAL_TIM_RegisterCallback+0x1de>
 80089fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008a00 <HAL_TIM_RegisterCallback+0x38>)
 80089fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a00:	08008a81 	.word	0x08008a81
 8008a04:	08008a89 	.word	0x08008a89
 8008a08:	08008a91 	.word	0x08008a91
 8008a0c:	08008a99 	.word	0x08008a99
 8008a10:	08008aa1 	.word	0x08008aa1
 8008a14:	08008aa9 	.word	0x08008aa9
 8008a18:	08008ab1 	.word	0x08008ab1
 8008a1c:	08008ab9 	.word	0x08008ab9
 8008a20:	08008ac1 	.word	0x08008ac1
 8008a24:	08008ac9 	.word	0x08008ac9
 8008a28:	08008ad1 	.word	0x08008ad1
 8008a2c:	08008ad9 	.word	0x08008ad9
 8008a30:	08008ae1 	.word	0x08008ae1
 8008a34:	08008ae9 	.word	0x08008ae9
 8008a38:	08008af3 	.word	0x08008af3
 8008a3c:	08008afd 	.word	0x08008afd
 8008a40:	08008b07 	.word	0x08008b07
 8008a44:	08008b11 	.word	0x08008b11
 8008a48:	08008b1b 	.word	0x08008b1b
 8008a4c:	08008b25 	.word	0x08008b25
 8008a50:	08008b2f 	.word	0x08008b2f
 8008a54:	08008b39 	.word	0x08008b39
 8008a58:	08008b43 	.word	0x08008b43
 8008a5c:	08008b4d 	.word	0x08008b4d
 8008a60:	08008b57 	.word	0x08008b57
 8008a64:	08008b61 	.word	0x08008b61
 8008a68:	08008b6b 	.word	0x08008b6b
 8008a6c:	08008b75 	.word	0x08008b75
 8008a70:	08008b7f 	.word	0x08008b7f
 8008a74:	08008b89 	.word	0x08008b89
 8008a78:	08008b93 	.word	0x08008b93
 8008a7c:	08008b9d 	.word	0x08008b9d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008a86:	e0f7      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008a8e:	e0f3      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008a96:	e0ef      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008a9e:	e0eb      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008aa6:	e0e7      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008aae:	e0e3      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008ab6:	e0df      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008abe:	e0db      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008ac6:	e0d7      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008ace:	e0d3      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008ad6:	e0cf      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008ade:	e0cb      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008ae6:	e0c7      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008af0:	e0c2      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008afa:	e0bd      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008b04:	e0b8      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008b0e:	e0b3      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008b18:	e0ae      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008b22:	e0a9      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008b2c:	e0a4      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008b36:	e09f      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008b40:	e09a      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008b4a:	e095      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008b54:	e090      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008b5e:	e08b      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008b68:	e086      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008b72:	e081      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008b7c:	e07c      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008b86:	e077      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008b90:	e072      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008b9a:	e06d      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008ba4:	e068      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	75fb      	strb	r3, [r7, #23]
        break;
 8008baa:	e065      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d15d      	bne.n	8008c74 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008bb8:	7afb      	ldrb	r3, [r7, #11]
 8008bba:	2b0d      	cmp	r3, #13
 8008bbc:	d857      	bhi.n	8008c6e <HAL_TIM_RegisterCallback+0x2a6>
 8008bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc4 <HAL_TIM_RegisterCallback+0x1fc>)
 8008bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc4:	08008bfd 	.word	0x08008bfd
 8008bc8:	08008c05 	.word	0x08008c05
 8008bcc:	08008c0d 	.word	0x08008c0d
 8008bd0:	08008c15 	.word	0x08008c15
 8008bd4:	08008c1d 	.word	0x08008c1d
 8008bd8:	08008c25 	.word	0x08008c25
 8008bdc:	08008c2d 	.word	0x08008c2d
 8008be0:	08008c35 	.word	0x08008c35
 8008be4:	08008c3d 	.word	0x08008c3d
 8008be8:	08008c45 	.word	0x08008c45
 8008bec:	08008c4d 	.word	0x08008c4d
 8008bf0:	08008c55 	.word	0x08008c55
 8008bf4:	08008c5d 	.word	0x08008c5d
 8008bf8:	08008c65 	.word	0x08008c65
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008c02:	e039      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008c0a:	e035      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008c12:	e031      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008c1a:	e02d      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008c22:	e029      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008c2a:	e025      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008c32:	e021      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008c3a:	e01d      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008c42:	e019      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008c4a:	e015      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008c52:	e011      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008c5a:	e00d      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008c62:	e009      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008c6c:	e004      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	75fb      	strb	r3, [r7, #23]
        break;
 8008c72:	e001      	b.n	8008c78 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop

08008c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a4c      	ldr	r2, [pc, #304]	@ (8008dcc <TIM_Base_SetConfig+0x144>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d017      	beq.n	8008cd0 <TIM_Base_SetConfig+0x48>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ca6:	d013      	beq.n	8008cd0 <TIM_Base_SetConfig+0x48>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a49      	ldr	r2, [pc, #292]	@ (8008dd0 <TIM_Base_SetConfig+0x148>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d00f      	beq.n	8008cd0 <TIM_Base_SetConfig+0x48>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a48      	ldr	r2, [pc, #288]	@ (8008dd4 <TIM_Base_SetConfig+0x14c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d00b      	beq.n	8008cd0 <TIM_Base_SetConfig+0x48>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a47      	ldr	r2, [pc, #284]	@ (8008dd8 <TIM_Base_SetConfig+0x150>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d007      	beq.n	8008cd0 <TIM_Base_SetConfig+0x48>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a46      	ldr	r2, [pc, #280]	@ (8008ddc <TIM_Base_SetConfig+0x154>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d003      	beq.n	8008cd0 <TIM_Base_SetConfig+0x48>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a45      	ldr	r2, [pc, #276]	@ (8008de0 <TIM_Base_SetConfig+0x158>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d108      	bne.n	8008ce2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a39      	ldr	r2, [pc, #228]	@ (8008dcc <TIM_Base_SetConfig+0x144>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d023      	beq.n	8008d32 <TIM_Base_SetConfig+0xaa>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cf0:	d01f      	beq.n	8008d32 <TIM_Base_SetConfig+0xaa>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a36      	ldr	r2, [pc, #216]	@ (8008dd0 <TIM_Base_SetConfig+0x148>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d01b      	beq.n	8008d32 <TIM_Base_SetConfig+0xaa>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a35      	ldr	r2, [pc, #212]	@ (8008dd4 <TIM_Base_SetConfig+0x14c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d017      	beq.n	8008d32 <TIM_Base_SetConfig+0xaa>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a34      	ldr	r2, [pc, #208]	@ (8008dd8 <TIM_Base_SetConfig+0x150>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d013      	beq.n	8008d32 <TIM_Base_SetConfig+0xaa>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a33      	ldr	r2, [pc, #204]	@ (8008ddc <TIM_Base_SetConfig+0x154>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d00f      	beq.n	8008d32 <TIM_Base_SetConfig+0xaa>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a33      	ldr	r2, [pc, #204]	@ (8008de4 <TIM_Base_SetConfig+0x15c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d00b      	beq.n	8008d32 <TIM_Base_SetConfig+0xaa>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a32      	ldr	r2, [pc, #200]	@ (8008de8 <TIM_Base_SetConfig+0x160>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d007      	beq.n	8008d32 <TIM_Base_SetConfig+0xaa>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a31      	ldr	r2, [pc, #196]	@ (8008dec <TIM_Base_SetConfig+0x164>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d003      	beq.n	8008d32 <TIM_Base_SetConfig+0xaa>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a2c      	ldr	r2, [pc, #176]	@ (8008de0 <TIM_Base_SetConfig+0x158>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d108      	bne.n	8008d44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a18      	ldr	r2, [pc, #96]	@ (8008dcc <TIM_Base_SetConfig+0x144>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d013      	beq.n	8008d98 <TIM_Base_SetConfig+0x110>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a1a      	ldr	r2, [pc, #104]	@ (8008ddc <TIM_Base_SetConfig+0x154>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d00f      	beq.n	8008d98 <TIM_Base_SetConfig+0x110>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8008de4 <TIM_Base_SetConfig+0x15c>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d00b      	beq.n	8008d98 <TIM_Base_SetConfig+0x110>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a19      	ldr	r2, [pc, #100]	@ (8008de8 <TIM_Base_SetConfig+0x160>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d007      	beq.n	8008d98 <TIM_Base_SetConfig+0x110>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a18      	ldr	r2, [pc, #96]	@ (8008dec <TIM_Base_SetConfig+0x164>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d003      	beq.n	8008d98 <TIM_Base_SetConfig+0x110>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a13      	ldr	r2, [pc, #76]	@ (8008de0 <TIM_Base_SetConfig+0x158>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d103      	bne.n	8008da0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	691a      	ldr	r2, [r3, #16]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d105      	bne.n	8008dbe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	f023 0201 	bic.w	r2, r3, #1
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	611a      	str	r2, [r3, #16]
  }
}
 8008dbe:	bf00      	nop
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	40012c00 	.word	0x40012c00
 8008dd0:	40000400 	.word	0x40000400
 8008dd4:	40000800 	.word	0x40000800
 8008dd8:	40000c00 	.word	0x40000c00
 8008ddc:	40013400 	.word	0x40013400
 8008de0:	40015000 	.word	0x40015000
 8008de4:	40014000 	.word	0x40014000
 8008de8:	40014400 	.word	0x40014400
 8008dec:	40014800 	.word	0x40014800

08008df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	f023 0201 	bic.w	r2, r3, #1
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f023 0303 	bic.w	r3, r3, #3
 8008e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f023 0302 	bic.w	r3, r3, #2
 8008e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a30      	ldr	r2, [pc, #192]	@ (8008f0c <TIM_OC1_SetConfig+0x11c>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d013      	beq.n	8008e78 <TIM_OC1_SetConfig+0x88>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a2f      	ldr	r2, [pc, #188]	@ (8008f10 <TIM_OC1_SetConfig+0x120>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d00f      	beq.n	8008e78 <TIM_OC1_SetConfig+0x88>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a2e      	ldr	r2, [pc, #184]	@ (8008f14 <TIM_OC1_SetConfig+0x124>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d00b      	beq.n	8008e78 <TIM_OC1_SetConfig+0x88>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a2d      	ldr	r2, [pc, #180]	@ (8008f18 <TIM_OC1_SetConfig+0x128>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d007      	beq.n	8008e78 <TIM_OC1_SetConfig+0x88>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8008f1c <TIM_OC1_SetConfig+0x12c>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d003      	beq.n	8008e78 <TIM_OC1_SetConfig+0x88>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a2b      	ldr	r2, [pc, #172]	@ (8008f20 <TIM_OC1_SetConfig+0x130>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d10c      	bne.n	8008e92 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f023 0308 	bic.w	r3, r3, #8
 8008e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	f023 0304 	bic.w	r3, r3, #4
 8008e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a1d      	ldr	r2, [pc, #116]	@ (8008f0c <TIM_OC1_SetConfig+0x11c>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d013      	beq.n	8008ec2 <TIM_OC1_SetConfig+0xd2>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8008f10 <TIM_OC1_SetConfig+0x120>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d00f      	beq.n	8008ec2 <TIM_OC1_SetConfig+0xd2>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8008f14 <TIM_OC1_SetConfig+0x124>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d00b      	beq.n	8008ec2 <TIM_OC1_SetConfig+0xd2>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a1a      	ldr	r2, [pc, #104]	@ (8008f18 <TIM_OC1_SetConfig+0x128>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d007      	beq.n	8008ec2 <TIM_OC1_SetConfig+0xd2>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a19      	ldr	r2, [pc, #100]	@ (8008f1c <TIM_OC1_SetConfig+0x12c>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d003      	beq.n	8008ec2 <TIM_OC1_SetConfig+0xd2>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a18      	ldr	r2, [pc, #96]	@ (8008f20 <TIM_OC1_SetConfig+0x130>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d111      	bne.n	8008ee6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	693a      	ldr	r2, [r7, #16]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	685a      	ldr	r2, [r3, #4]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	621a      	str	r2, [r3, #32]
}
 8008f00:	bf00      	nop
 8008f02:	371c      	adds	r7, #28
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	40012c00 	.word	0x40012c00
 8008f10:	40013400 	.word	0x40013400
 8008f14:	40014000 	.word	0x40014000
 8008f18:	40014400 	.word	0x40014400
 8008f1c:	40014800 	.word	0x40014800
 8008f20:	40015000 	.word	0x40015000

08008f24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a1b      	ldr	r3, [r3, #32]
 8008f38:	f023 0210 	bic.w	r2, r3, #16
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	021b      	lsls	r3, r3, #8
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f023 0320 	bic.w	r3, r3, #32
 8008f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	011b      	lsls	r3, r3, #4
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a2c      	ldr	r2, [pc, #176]	@ (8009034 <TIM_OC2_SetConfig+0x110>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d007      	beq.n	8008f98 <TIM_OC2_SetConfig+0x74>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a2b      	ldr	r2, [pc, #172]	@ (8009038 <TIM_OC2_SetConfig+0x114>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d003      	beq.n	8008f98 <TIM_OC2_SetConfig+0x74>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a2a      	ldr	r2, [pc, #168]	@ (800903c <TIM_OC2_SetConfig+0x118>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d10d      	bne.n	8008fb4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	011b      	lsls	r3, r3, #4
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8009034 <TIM_OC2_SetConfig+0x110>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d013      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xc0>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8009038 <TIM_OC2_SetConfig+0x114>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d00f      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xc0>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8009040 <TIM_OC2_SetConfig+0x11c>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d00b      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xc0>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a1d      	ldr	r2, [pc, #116]	@ (8009044 <TIM_OC2_SetConfig+0x120>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d007      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xc0>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8009048 <TIM_OC2_SetConfig+0x124>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d003      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xc0>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a17      	ldr	r2, [pc, #92]	@ (800903c <TIM_OC2_SetConfig+0x118>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d113      	bne.n	800900c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	4313      	orrs	r3, r2
 800900a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	621a      	str	r2, [r3, #32]
}
 8009026:	bf00      	nop
 8009028:	371c      	adds	r7, #28
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	40012c00 	.word	0x40012c00
 8009038:	40013400 	.word	0x40013400
 800903c:	40015000 	.word	0x40015000
 8009040:	40014000 	.word	0x40014000
 8009044:	40014400 	.word	0x40014400
 8009048:	40014800 	.word	0x40014800

0800904c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800904c:	b480      	push	{r7}
 800904e:	b087      	sub	sp, #28
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a1b      	ldr	r3, [r3, #32]
 8009060:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800907a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800907e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 0303 	bic.w	r3, r3, #3
 8009086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	4313      	orrs	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	021b      	lsls	r3, r3, #8
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a2b      	ldr	r2, [pc, #172]	@ (8009158 <TIM_OC3_SetConfig+0x10c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d007      	beq.n	80090be <TIM_OC3_SetConfig+0x72>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a2a      	ldr	r2, [pc, #168]	@ (800915c <TIM_OC3_SetConfig+0x110>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d003      	beq.n	80090be <TIM_OC3_SetConfig+0x72>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a29      	ldr	r2, [pc, #164]	@ (8009160 <TIM_OC3_SetConfig+0x114>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d10d      	bne.n	80090da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80090c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	021b      	lsls	r3, r3, #8
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80090d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a1e      	ldr	r2, [pc, #120]	@ (8009158 <TIM_OC3_SetConfig+0x10c>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d013      	beq.n	800910a <TIM_OC3_SetConfig+0xbe>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a1d      	ldr	r2, [pc, #116]	@ (800915c <TIM_OC3_SetConfig+0x110>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d00f      	beq.n	800910a <TIM_OC3_SetConfig+0xbe>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a1d      	ldr	r2, [pc, #116]	@ (8009164 <TIM_OC3_SetConfig+0x118>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d00b      	beq.n	800910a <TIM_OC3_SetConfig+0xbe>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009168 <TIM_OC3_SetConfig+0x11c>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d007      	beq.n	800910a <TIM_OC3_SetConfig+0xbe>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a1b      	ldr	r2, [pc, #108]	@ (800916c <TIM_OC3_SetConfig+0x120>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d003      	beq.n	800910a <TIM_OC3_SetConfig+0xbe>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a16      	ldr	r2, [pc, #88]	@ (8009160 <TIM_OC3_SetConfig+0x114>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d113      	bne.n	8009132 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	011b      	lsls	r3, r3, #4
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	4313      	orrs	r3, r2
 8009124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	011b      	lsls	r3, r3, #4
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	4313      	orrs	r3, r2
 8009130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	621a      	str	r2, [r3, #32]
}
 800914c:	bf00      	nop
 800914e:	371c      	adds	r7, #28
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	40012c00 	.word	0x40012c00
 800915c:	40013400 	.word	0x40013400
 8009160:	40015000 	.word	0x40015000
 8009164:	40014000 	.word	0x40014000
 8009168:	40014400 	.word	0x40014400
 800916c:	40014800 	.word	0x40014800

08009170 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009170:	b480      	push	{r7}
 8009172:	b087      	sub	sp, #28
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a1b      	ldr	r3, [r3, #32]
 8009184:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800919e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	021b      	lsls	r3, r3, #8
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80091be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	031b      	lsls	r3, r3, #12
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a2c      	ldr	r2, [pc, #176]	@ (8009280 <TIM_OC4_SetConfig+0x110>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d007      	beq.n	80091e4 <TIM_OC4_SetConfig+0x74>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a2b      	ldr	r2, [pc, #172]	@ (8009284 <TIM_OC4_SetConfig+0x114>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d003      	beq.n	80091e4 <TIM_OC4_SetConfig+0x74>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a2a      	ldr	r2, [pc, #168]	@ (8009288 <TIM_OC4_SetConfig+0x118>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d10d      	bne.n	8009200 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80091ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	031b      	lsls	r3, r3, #12
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a1f      	ldr	r2, [pc, #124]	@ (8009280 <TIM_OC4_SetConfig+0x110>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d013      	beq.n	8009230 <TIM_OC4_SetConfig+0xc0>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a1e      	ldr	r2, [pc, #120]	@ (8009284 <TIM_OC4_SetConfig+0x114>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d00f      	beq.n	8009230 <TIM_OC4_SetConfig+0xc0>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a1e      	ldr	r2, [pc, #120]	@ (800928c <TIM_OC4_SetConfig+0x11c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d00b      	beq.n	8009230 <TIM_OC4_SetConfig+0xc0>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a1d      	ldr	r2, [pc, #116]	@ (8009290 <TIM_OC4_SetConfig+0x120>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d007      	beq.n	8009230 <TIM_OC4_SetConfig+0xc0>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a1c      	ldr	r2, [pc, #112]	@ (8009294 <TIM_OC4_SetConfig+0x124>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d003      	beq.n	8009230 <TIM_OC4_SetConfig+0xc0>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a17      	ldr	r2, [pc, #92]	@ (8009288 <TIM_OC4_SetConfig+0x118>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d113      	bne.n	8009258 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009236:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800923e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	019b      	lsls	r3, r3, #6
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	4313      	orrs	r3, r2
 800924a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	019b      	lsls	r3, r3, #6
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	4313      	orrs	r3, r2
 8009256:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	621a      	str	r2, [r3, #32]
}
 8009272:	bf00      	nop
 8009274:	371c      	adds	r7, #28
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	40012c00 	.word	0x40012c00
 8009284:	40013400 	.word	0x40013400
 8009288:	40015000 	.word	0x40015000
 800928c:	40014000 	.word	0x40014000
 8009290:	40014400 	.word	0x40014400
 8009294:	40014800 	.word	0x40014800

08009298 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a1b      	ldr	r3, [r3, #32]
 80092ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80092dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	041b      	lsls	r3, r3, #16
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a19      	ldr	r2, [pc, #100]	@ (8009354 <TIM_OC5_SetConfig+0xbc>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d013      	beq.n	800931a <TIM_OC5_SetConfig+0x82>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a18      	ldr	r2, [pc, #96]	@ (8009358 <TIM_OC5_SetConfig+0xc0>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d00f      	beq.n	800931a <TIM_OC5_SetConfig+0x82>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a17      	ldr	r2, [pc, #92]	@ (800935c <TIM_OC5_SetConfig+0xc4>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d00b      	beq.n	800931a <TIM_OC5_SetConfig+0x82>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a16      	ldr	r2, [pc, #88]	@ (8009360 <TIM_OC5_SetConfig+0xc8>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d007      	beq.n	800931a <TIM_OC5_SetConfig+0x82>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a15      	ldr	r2, [pc, #84]	@ (8009364 <TIM_OC5_SetConfig+0xcc>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d003      	beq.n	800931a <TIM_OC5_SetConfig+0x82>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a14      	ldr	r2, [pc, #80]	@ (8009368 <TIM_OC5_SetConfig+0xd0>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d109      	bne.n	800932e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009320:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	021b      	lsls	r3, r3, #8
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	4313      	orrs	r3, r2
 800932c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	621a      	str	r2, [r3, #32]
}
 8009348:	bf00      	nop
 800934a:	371c      	adds	r7, #28
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	40012c00 	.word	0x40012c00
 8009358:	40013400 	.word	0x40013400
 800935c:	40014000 	.word	0x40014000
 8009360:	40014400 	.word	0x40014400
 8009364:	40014800 	.word	0x40014800
 8009368:	40015000 	.word	0x40015000

0800936c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800936c:	b480      	push	{r7}
 800936e:	b087      	sub	sp, #28
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a1b      	ldr	r3, [r3, #32]
 8009380:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800939a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800939e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	021b      	lsls	r3, r3, #8
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80093b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	051b      	lsls	r3, r3, #20
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	4313      	orrs	r3, r2
 80093be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a1a      	ldr	r2, [pc, #104]	@ (800942c <TIM_OC6_SetConfig+0xc0>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d013      	beq.n	80093f0 <TIM_OC6_SetConfig+0x84>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a19      	ldr	r2, [pc, #100]	@ (8009430 <TIM_OC6_SetConfig+0xc4>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d00f      	beq.n	80093f0 <TIM_OC6_SetConfig+0x84>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a18      	ldr	r2, [pc, #96]	@ (8009434 <TIM_OC6_SetConfig+0xc8>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d00b      	beq.n	80093f0 <TIM_OC6_SetConfig+0x84>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a17      	ldr	r2, [pc, #92]	@ (8009438 <TIM_OC6_SetConfig+0xcc>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d007      	beq.n	80093f0 <TIM_OC6_SetConfig+0x84>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a16      	ldr	r2, [pc, #88]	@ (800943c <TIM_OC6_SetConfig+0xd0>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d003      	beq.n	80093f0 <TIM_OC6_SetConfig+0x84>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a15      	ldr	r2, [pc, #84]	@ (8009440 <TIM_OC6_SetConfig+0xd4>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d109      	bne.n	8009404 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80093f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	029b      	lsls	r3, r3, #10
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	4313      	orrs	r3, r2
 8009402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	621a      	str	r2, [r3, #32]
}
 800941e:	bf00      	nop
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	40012c00 	.word	0x40012c00
 8009430:	40013400 	.word	0x40013400
 8009434:	40014000 	.word	0x40014000
 8009438:	40014400 	.word	0x40014400
 800943c:	40014800 	.word	0x40014800
 8009440:	40015000 	.word	0x40015000

08009444 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009460:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009464:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	4313      	orrs	r3, r2
 800946e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009476:	f023 0307 	bic.w	r3, r3, #7
 800947a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	4313      	orrs	r3, r2
 8009484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	4a56      	ldr	r2, [pc, #344]	@ (80095ec <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009494:	4293      	cmp	r3, r2
 8009496:	f000 80a2 	beq.w	80095de <TIM_SlaveTimer_SetConfig+0x19a>
 800949a:	4a54      	ldr	r2, [pc, #336]	@ (80095ec <TIM_SlaveTimer_SetConfig+0x1a8>)
 800949c:	4293      	cmp	r3, r2
 800949e:	f200 809b 	bhi.w	80095d8 <TIM_SlaveTimer_SetConfig+0x194>
 80094a2:	4a53      	ldr	r2, [pc, #332]	@ (80095f0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	f000 809a 	beq.w	80095de <TIM_SlaveTimer_SetConfig+0x19a>
 80094aa:	4a51      	ldr	r2, [pc, #324]	@ (80095f0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	f200 8093 	bhi.w	80095d8 <TIM_SlaveTimer_SetConfig+0x194>
 80094b2:	4a50      	ldr	r2, [pc, #320]	@ (80095f4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	f000 8092 	beq.w	80095de <TIM_SlaveTimer_SetConfig+0x19a>
 80094ba:	4a4e      	ldr	r2, [pc, #312]	@ (80095f4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	f200 808b 	bhi.w	80095d8 <TIM_SlaveTimer_SetConfig+0x194>
 80094c2:	4a4d      	ldr	r2, [pc, #308]	@ (80095f8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	f000 808a 	beq.w	80095de <TIM_SlaveTimer_SetConfig+0x19a>
 80094ca:	4a4b      	ldr	r2, [pc, #300]	@ (80095f8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	f200 8083 	bhi.w	80095d8 <TIM_SlaveTimer_SetConfig+0x194>
 80094d2:	4a4a      	ldr	r2, [pc, #296]	@ (80095fc <TIM_SlaveTimer_SetConfig+0x1b8>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	f000 8082 	beq.w	80095de <TIM_SlaveTimer_SetConfig+0x19a>
 80094da:	4a48      	ldr	r2, [pc, #288]	@ (80095fc <TIM_SlaveTimer_SetConfig+0x1b8>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d87b      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x194>
 80094e0:	4a47      	ldr	r2, [pc, #284]	@ (8009600 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d07b      	beq.n	80095de <TIM_SlaveTimer_SetConfig+0x19a>
 80094e6:	4a46      	ldr	r2, [pc, #280]	@ (8009600 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d875      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x194>
 80094ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80094f0:	d075      	beq.n	80095de <TIM_SlaveTimer_SetConfig+0x19a>
 80094f2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80094f6:	d86f      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x194>
 80094f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094fc:	d06f      	beq.n	80095de <TIM_SlaveTimer_SetConfig+0x19a>
 80094fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009502:	d869      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x194>
 8009504:	2b70      	cmp	r3, #112	@ 0x70
 8009506:	d01a      	beq.n	800953e <TIM_SlaveTimer_SetConfig+0xfa>
 8009508:	2b70      	cmp	r3, #112	@ 0x70
 800950a:	d865      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x194>
 800950c:	2b60      	cmp	r3, #96	@ 0x60
 800950e:	d059      	beq.n	80095c4 <TIM_SlaveTimer_SetConfig+0x180>
 8009510:	2b60      	cmp	r3, #96	@ 0x60
 8009512:	d861      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x194>
 8009514:	2b50      	cmp	r3, #80	@ 0x50
 8009516:	d04b      	beq.n	80095b0 <TIM_SlaveTimer_SetConfig+0x16c>
 8009518:	2b50      	cmp	r3, #80	@ 0x50
 800951a:	d85d      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x194>
 800951c:	2b40      	cmp	r3, #64	@ 0x40
 800951e:	d019      	beq.n	8009554 <TIM_SlaveTimer_SetConfig+0x110>
 8009520:	2b40      	cmp	r3, #64	@ 0x40
 8009522:	d859      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x194>
 8009524:	2b30      	cmp	r3, #48	@ 0x30
 8009526:	d05a      	beq.n	80095de <TIM_SlaveTimer_SetConfig+0x19a>
 8009528:	2b30      	cmp	r3, #48	@ 0x30
 800952a:	d855      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x194>
 800952c:	2b20      	cmp	r3, #32
 800952e:	d056      	beq.n	80095de <TIM_SlaveTimer_SetConfig+0x19a>
 8009530:	2b20      	cmp	r3, #32
 8009532:	d851      	bhi.n	80095d8 <TIM_SlaveTimer_SetConfig+0x194>
 8009534:	2b00      	cmp	r3, #0
 8009536:	d052      	beq.n	80095de <TIM_SlaveTimer_SetConfig+0x19a>
 8009538:	2b10      	cmp	r3, #16
 800953a:	d050      	beq.n	80095de <TIM_SlaveTimer_SetConfig+0x19a>
 800953c:	e04c      	b.n	80095d8 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800954e:	f000 f9ff 	bl	8009950 <TIM_ETR_SetConfig>
      break;
 8009552:	e045      	b.n	80095e0 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b05      	cmp	r3, #5
 800955a:	d004      	beq.n	8009566 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009560:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8009564:	d101      	bne.n	800956a <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e03b      	b.n	80095e2 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6a1b      	ldr	r3, [r3, #32]
 8009570:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	6a1a      	ldr	r2, [r3, #32]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f022 0201 	bic.w	r2, r2, #1
 8009580:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009590:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	011b      	lsls	r3, r3, #4
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	4313      	orrs	r3, r2
 800959c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	621a      	str	r2, [r3, #32]
      break;
 80095ae:	e017      	b.n	80095e0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095bc:	461a      	mov	r2, r3
 80095be:	f000 f895 	bl	80096ec <TIM_TI1_ConfigInputStage>
      break;
 80095c2:	e00d      	b.n	80095e0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80095d0:	461a      	mov	r2, r3
 80095d2:	f000 f8f7 	bl	80097c4 <TIM_TI2_ConfigInputStage>
      break;
 80095d6:	e003      	b.n	80095e0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	75fb      	strb	r3, [r7, #23]
      break;
 80095dc:	e000      	b.n	80095e0 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 80095de:	bf00      	nop
  }

  return status;
 80095e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	00100070 	.word	0x00100070
 80095f0:	00100060 	.word	0x00100060
 80095f4:	00100050 	.word	0x00100050
 80095f8:	00100040 	.word	0x00100040
 80095fc:	00100030 	.word	0x00100030
 8009600:	00100020 	.word	0x00100020

08009604 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009604:	b480      	push	{r7}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6a1b      	ldr	r3, [r3, #32]
 800961c:	f023 0201 	bic.w	r2, r3, #1
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	4a28      	ldr	r2, [pc, #160]	@ (80096d0 <TIM_TI1_SetConfig+0xcc>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d01b      	beq.n	800966a <TIM_TI1_SetConfig+0x66>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009638:	d017      	beq.n	800966a <TIM_TI1_SetConfig+0x66>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	4a25      	ldr	r2, [pc, #148]	@ (80096d4 <TIM_TI1_SetConfig+0xd0>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d013      	beq.n	800966a <TIM_TI1_SetConfig+0x66>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	4a24      	ldr	r2, [pc, #144]	@ (80096d8 <TIM_TI1_SetConfig+0xd4>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d00f      	beq.n	800966a <TIM_TI1_SetConfig+0x66>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	4a23      	ldr	r2, [pc, #140]	@ (80096dc <TIM_TI1_SetConfig+0xd8>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d00b      	beq.n	800966a <TIM_TI1_SetConfig+0x66>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	4a22      	ldr	r2, [pc, #136]	@ (80096e0 <TIM_TI1_SetConfig+0xdc>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d007      	beq.n	800966a <TIM_TI1_SetConfig+0x66>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	4a21      	ldr	r2, [pc, #132]	@ (80096e4 <TIM_TI1_SetConfig+0xe0>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d003      	beq.n	800966a <TIM_TI1_SetConfig+0x66>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	4a20      	ldr	r2, [pc, #128]	@ (80096e8 <TIM_TI1_SetConfig+0xe4>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d101      	bne.n	800966e <TIM_TI1_SetConfig+0x6a>
 800966a:	2301      	movs	r3, #1
 800966c:	e000      	b.n	8009670 <TIM_TI1_SetConfig+0x6c>
 800966e:	2300      	movs	r3, #0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d008      	beq.n	8009686 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f023 0303 	bic.w	r3, r3, #3
 800967a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4313      	orrs	r3, r2
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	e003      	b.n	800968e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f043 0301 	orr.w	r3, r3, #1
 800968c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	011b      	lsls	r3, r3, #4
 800969a:	b2db      	uxtb	r3, r3
 800969c:	697a      	ldr	r2, [r7, #20]
 800969e:	4313      	orrs	r3, r2
 80096a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f023 030a 	bic.w	r3, r3, #10
 80096a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	f003 030a 	and.w	r3, r3, #10
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	697a      	ldr	r2, [r7, #20]
 80096ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	621a      	str	r2, [r3, #32]
}
 80096c2:	bf00      	nop
 80096c4:	371c      	adds	r7, #28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	40012c00 	.word	0x40012c00
 80096d4:	40000400 	.word	0x40000400
 80096d8:	40000800 	.word	0x40000800
 80096dc:	40000c00 	.word	0x40000c00
 80096e0:	40013400 	.word	0x40013400
 80096e4:	40014000 	.word	0x40014000
 80096e8:	40015000 	.word	0x40015000

080096ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b087      	sub	sp, #28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6a1b      	ldr	r3, [r3, #32]
 8009702:	f023 0201 	bic.w	r2, r3, #1
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	011b      	lsls	r3, r3, #4
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	4313      	orrs	r3, r2
 8009720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f023 030a 	bic.w	r3, r3, #10
 8009728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	4313      	orrs	r3, r2
 8009730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	693a      	ldr	r2, [r7, #16]
 8009736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	621a      	str	r2, [r3, #32]
}
 800973e:	bf00      	nop
 8009740:	371c      	adds	r7, #28
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800974a:	b480      	push	{r7}
 800974c:	b087      	sub	sp, #28
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	60b9      	str	r1, [r7, #8]
 8009754:	607a      	str	r2, [r7, #4]
 8009756:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6a1b      	ldr	r3, [r3, #32]
 800975c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	f023 0210 	bic.w	r2, r3, #16
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	021b      	lsls	r3, r3, #8
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	4313      	orrs	r3, r2
 8009780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	031b      	lsls	r3, r3, #12
 800978e:	b29b      	uxth	r3, r3
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	4313      	orrs	r3, r2
 8009794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800979c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	011b      	lsls	r3, r3, #4
 80097a2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	693a      	ldr	r2, [r7, #16]
 80097b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	697a      	ldr	r2, [r7, #20]
 80097b6:	621a      	str	r2, [r3, #32]
}
 80097b8:	bf00      	nop
 80097ba:	371c      	adds	r7, #28
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b087      	sub	sp, #28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6a1b      	ldr	r3, [r3, #32]
 80097d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	f023 0210 	bic.w	r2, r3, #16
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80097ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	031b      	lsls	r3, r3, #12
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009800:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	011b      	lsls	r3, r3, #4
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	4313      	orrs	r3, r2
 800980a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	621a      	str	r2, [r3, #32]
}
 8009818:	bf00      	nop
 800981a:	371c      	adds	r7, #28
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009824:	b480      	push	{r7}
 8009826:	b087      	sub	sp, #28
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6a1b      	ldr	r3, [r3, #32]
 800983c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	69db      	ldr	r3, [r3, #28]
 8009848:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	f023 0303 	bic.w	r3, r3, #3
 8009850:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4313      	orrs	r3, r2
 8009858:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009860:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	011b      	lsls	r3, r3, #4
 8009866:	b2db      	uxtb	r3, r3
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	4313      	orrs	r3, r2
 800986c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009874:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	021b      	lsls	r3, r3, #8
 800987a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	4313      	orrs	r3, r2
 8009882:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	621a      	str	r2, [r3, #32]
}
 8009890:	bf00      	nop
 8009892:	371c      	adds	r7, #28
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
 80098a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6a1b      	ldr	r3, [r3, #32]
 80098b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	69db      	ldr	r3, [r3, #28]
 80098c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	021b      	lsls	r3, r3, #8
 80098ce:	693a      	ldr	r2, [r7, #16]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80098da:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	031b      	lsls	r3, r3, #12
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80098ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	031b      	lsls	r3, r3, #12
 80098f4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	621a      	str	r2, [r3, #32]
}
 800990a:	bf00      	nop
 800990c:	371c      	adds	r7, #28
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009916:	b480      	push	{r7}
 8009918:	b085      	sub	sp, #20
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800992c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	4313      	orrs	r3, r2
 8009938:	f043 0307 	orr.w	r3, r3, #7
 800993c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	609a      	str	r2, [r3, #8]
}
 8009944:	bf00      	nop
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009950:	b480      	push	{r7}
 8009952:	b087      	sub	sp, #28
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
 800995c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800996a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	021a      	lsls	r2, r3, #8
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	431a      	orrs	r2, r3
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	4313      	orrs	r3, r2
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	4313      	orrs	r3, r2
 800997c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	609a      	str	r2, [r3, #8]
}
 8009984:	bf00      	nop
 8009986:	371c      	adds	r7, #28
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009990:	b480      	push	{r7}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	f003 031f 	and.w	r3, r3, #31
 80099a2:	2201      	movs	r2, #1
 80099a4:	fa02 f303 	lsl.w	r3, r2, r3
 80099a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6a1a      	ldr	r2, [r3, #32]
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	43db      	mvns	r3, r3
 80099b2:	401a      	ands	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6a1a      	ldr	r2, [r3, #32]
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	f003 031f 	and.w	r3, r3, #31
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	fa01 f303 	lsl.w	r3, r1, r3
 80099c8:	431a      	orrs	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	621a      	str	r2, [r3, #32]
}
 80099ce:	bf00      	nop
 80099d0:	371c      	adds	r7, #28
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
	...

080099dc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a26      	ldr	r2, [pc, #152]	@ (8009a80 <TIM_ResetCallback+0xa4>)
 80099e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a25      	ldr	r2, [pc, #148]	@ (8009a84 <TIM_ResetCallback+0xa8>)
 80099f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a24      	ldr	r2, [pc, #144]	@ (8009a88 <TIM_ResetCallback+0xac>)
 80099f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a23      	ldr	r2, [pc, #140]	@ (8009a8c <TIM_ResetCallback+0xb0>)
 8009a00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a22      	ldr	r2, [pc, #136]	@ (8009a90 <TIM_ResetCallback+0xb4>)
 8009a08:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a21      	ldr	r2, [pc, #132]	@ (8009a94 <TIM_ResetCallback+0xb8>)
 8009a10:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a20      	ldr	r2, [pc, #128]	@ (8009a98 <TIM_ResetCallback+0xbc>)
 8009a18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8009a9c <TIM_ResetCallback+0xc0>)
 8009a20:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a1e      	ldr	r2, [pc, #120]	@ (8009aa0 <TIM_ResetCallback+0xc4>)
 8009a28:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8009aa4 <TIM_ResetCallback+0xc8>)
 8009a30:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a1c      	ldr	r2, [pc, #112]	@ (8009aa8 <TIM_ResetCallback+0xcc>)
 8009a38:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8009aac <TIM_ResetCallback+0xd0>)
 8009a40:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a1a      	ldr	r2, [pc, #104]	@ (8009ab0 <TIM_ResetCallback+0xd4>)
 8009a48:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a19      	ldr	r2, [pc, #100]	@ (8009ab4 <TIM_ResetCallback+0xd8>)
 8009a50:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a18      	ldr	r2, [pc, #96]	@ (8009ab8 <TIM_ResetCallback+0xdc>)
 8009a58:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a17      	ldr	r2, [pc, #92]	@ (8009abc <TIM_ResetCallback+0xe0>)
 8009a60:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a16      	ldr	r2, [pc, #88]	@ (8009ac0 <TIM_ResetCallback+0xe4>)
 8009a68:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a15      	ldr	r2, [pc, #84]	@ (8009ac4 <TIM_ResetCallback+0xe8>)
 8009a70:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	0800410d 	.word	0x0800410d
 8009a84:	08008915 	.word	0x08008915
 8009a88:	0800898d 	.word	0x0800898d
 8009a8c:	080089a1 	.word	0x080089a1
 8009a90:	0800893d 	.word	0x0800893d
 8009a94:	08008951 	.word	0x08008951
 8009a98:	08008929 	.word	0x08008929
 8009a9c:	08008965 	.word	0x08008965
 8009aa0:	08008979 	.word	0x08008979
 8009aa4:	080089b5 	.word	0x080089b5
 8009aa8:	08009d1d 	.word	0x08009d1d
 8009aac:	08009d31 	.word	0x08009d31
 8009ab0:	08009d45 	.word	0x08009d45
 8009ab4:	08009d59 	.word	0x08009d59
 8009ab8:	08009d6d 	.word	0x08009d6d
 8009abc:	08009d81 	.word	0x08009d81
 8009ac0:	08009d95 	.word	0x08009d95
 8009ac4:	08009da9 	.word	0x08009da9

08009ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d101      	bne.n	8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009adc:	2302      	movs	r3, #2
 8009ade:	e074      	b.n	8009bca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2202      	movs	r2, #2
 8009aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a34      	ldr	r2, [pc, #208]	@ (8009bd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d009      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a33      	ldr	r2, [pc, #204]	@ (8009bdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d004      	beq.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a31      	ldr	r2, [pc, #196]	@ (8009be0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d108      	bne.n	8009b30 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009b24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a21      	ldr	r2, [pc, #132]	@ (8009bd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d022      	beq.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b60:	d01d      	beq.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a1f      	ldr	r2, [pc, #124]	@ (8009be4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d018      	beq.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a1d      	ldr	r2, [pc, #116]	@ (8009be8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d013      	beq.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8009bec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d00e      	beq.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a15      	ldr	r2, [pc, #84]	@ (8009bdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d009      	beq.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a18      	ldr	r2, [pc, #96]	@ (8009bf0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d004      	beq.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a11      	ldr	r2, [pc, #68]	@ (8009be0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d10c      	bne.n	8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68ba      	ldr	r2, [r7, #8]
 8009bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	40012c00 	.word	0x40012c00
 8009bdc:	40013400 	.word	0x40013400
 8009be0:	40015000 	.word	0x40015000
 8009be4:	40000400 	.word	0x40000400
 8009be8:	40000800 	.word	0x40000800
 8009bec:	40000c00 	.word	0x40000c00
 8009bf0:	40014000 	.word	0x40014000

08009bf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d101      	bne.n	8009c10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	e078      	b.n	8009d02 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	041b      	lsls	r3, r3, #16
 8009c86:	4313      	orrs	r3, r2
 8009c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8009d10 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d009      	beq.n	8009cb6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8009d14 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d004      	beq.n	8009cb6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a19      	ldr	r2, [pc, #100]	@ (8009d18 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d11c      	bne.n	8009cf0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cc0:	051b      	lsls	r3, r3, #20
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	6a1b      	ldr	r3, [r3, #32]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cec:	4313      	orrs	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	40012c00 	.word	0x40012c00
 8009d14:	40013400 	.word	0x40013400
 8009d18:	40015000 	.word	0x40015000

08009d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009d88:	bf00      	nop
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009db0:	bf00      	nop
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d101      	bne.n	8009dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e050      	b.n	8009e70 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d114      	bne.n	8009e02 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fde5 	bl	800a9b0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d103      	bne.n	8009df8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a21      	ldr	r2, [pc, #132]	@ (8009e78 <HAL_UART_Init+0xbc>)
 8009df4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2224      	movs	r2, #36	@ 0x24
 8009e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f022 0201 	bic.w	r2, r2, #1
 8009e18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d002      	beq.n	8009e28 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f001 f912 	bl	800b04c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 fe13 	bl	800aa54 <UART_SetConfig>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d101      	bne.n	8009e38 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e01b      	b.n	8009e70 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685a      	ldr	r2, [r3, #4]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	689a      	ldr	r2, [r3, #8]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f042 0201 	orr.w	r2, r2, #1
 8009e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f001 f991 	bl	800b190 <UART_CheckIdleState>
 8009e6e:	4603      	mov	r3, r0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	08005295 	.word	0x08005295

08009e7c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b087      	sub	sp, #28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	460b      	mov	r3, r1
 8009e86:	607a      	str	r2, [r7, #4]
 8009e88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d109      	bne.n	8009ea8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e09c      	b.n	8009fe2 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eae:	2b20      	cmp	r3, #32
 8009eb0:	d16c      	bne.n	8009f8c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009eb2:	7afb      	ldrb	r3, [r7, #11]
 8009eb4:	2b0c      	cmp	r3, #12
 8009eb6:	d85e      	bhi.n	8009f76 <HAL_UART_RegisterCallback+0xfa>
 8009eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec0 <HAL_UART_RegisterCallback+0x44>)
 8009eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebe:	bf00      	nop
 8009ec0:	08009ef5 	.word	0x08009ef5
 8009ec4:	08009eff 	.word	0x08009eff
 8009ec8:	08009f09 	.word	0x08009f09
 8009ecc:	08009f13 	.word	0x08009f13
 8009ed0:	08009f1d 	.word	0x08009f1d
 8009ed4:	08009f27 	.word	0x08009f27
 8009ed8:	08009f31 	.word	0x08009f31
 8009edc:	08009f3b 	.word	0x08009f3b
 8009ee0:	08009f45 	.word	0x08009f45
 8009ee4:	08009f4f 	.word	0x08009f4f
 8009ee8:	08009f59 	.word	0x08009f59
 8009eec:	08009f63 	.word	0x08009f63
 8009ef0:	08009f6d 	.word	0x08009f6d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009efc:	e070      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009f06:	e06b      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009f10:	e066      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009f1a:	e061      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009f24:	e05c      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009f2e:	e057      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009f38:	e052      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009f42:	e04d      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009f4c:	e048      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009f56:	e043      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009f60:	e03e      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009f6a:	e039      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009f74:	e034      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	75fb      	strb	r3, [r7, #23]
        break;
 8009f8a:	e029      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d11a      	bne.n	8009fcc <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009f96:	7afb      	ldrb	r3, [r7, #11]
 8009f98:	2b0b      	cmp	r3, #11
 8009f9a:	d002      	beq.n	8009fa2 <HAL_UART_RegisterCallback+0x126>
 8009f9c:	2b0c      	cmp	r3, #12
 8009f9e:	d005      	beq.n	8009fac <HAL_UART_RegisterCallback+0x130>
 8009fa0:	e009      	b.n	8009fb6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009faa:	e019      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009fb4:	e014      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fbc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	75fb      	strb	r3, [r7, #23]
        break;
 8009fca:	e009      	b.n	8009fe0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fd2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	371c      	adds	r7, #28
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop

08009ff0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08a      	sub	sp, #40	@ 0x28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a004:	2b20      	cmp	r3, #32
 800a006:	d167      	bne.n	800a0d8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <HAL_UART_Transmit_DMA+0x24>
 800a00e:	88fb      	ldrh	r3, [r7, #6]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d101      	bne.n	800a018 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e060      	b.n	800a0da <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	88fa      	ldrh	r2, [r7, #6]
 800a022:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	88fa      	ldrh	r2, [r7, #6]
 800a02a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2221      	movs	r2, #33	@ 0x21
 800a03a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a042:	2b00      	cmp	r3, #0
 800a044:	d028      	beq.n	800a098 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a04a:	4a26      	ldr	r2, [pc, #152]	@ (800a0e4 <HAL_UART_Transmit_DMA+0xf4>)
 800a04c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a052:	4a25      	ldr	r2, [pc, #148]	@ (800a0e8 <HAL_UART_Transmit_DMA+0xf8>)
 800a054:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a05a:	4a24      	ldr	r2, [pc, #144]	@ (800a0ec <HAL_UART_Transmit_DMA+0xfc>)
 800a05c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a062:	2200      	movs	r2, #0
 800a064:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a06e:	4619      	mov	r1, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3328      	adds	r3, #40	@ 0x28
 800a076:	461a      	mov	r2, r3
 800a078:	88fb      	ldrh	r3, [r7, #6]
 800a07a:	f7fb fcd9 	bl	8005a30 <HAL_DMA_Start_IT>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d009      	beq.n	800a098 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2210      	movs	r2, #16
 800a088:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2220      	movs	r2, #32
 800a090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	e020      	b.n	800a0da <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2240      	movs	r2, #64	@ 0x40
 800a09e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	e853 3f00 	ldrex	r3, [r3]
 800a0ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0c0:	623a      	str	r2, [r7, #32]
 800a0c2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c4:	69f9      	ldr	r1, [r7, #28]
 800a0c6:	6a3a      	ldr	r2, [r7, #32]
 800a0c8:	e841 2300 	strex	r3, r2, [r1]
 800a0cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1e5      	bne.n	800a0a0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	e000      	b.n	800a0da <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a0d8:	2302      	movs	r3, #2
  }
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3728      	adds	r7, #40	@ 0x28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	0800b65b 	.word	0x0800b65b
 800a0e8:	0800b6f9 	.word	0x0800b6f9
 800a0ec:	0800b893 	.word	0x0800b893

0800a0f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b08a      	sub	sp, #40	@ 0x28
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a104:	2b20      	cmp	r3, #32
 800a106:	d137      	bne.n	800a178 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <HAL_UART_Receive_DMA+0x24>
 800a10e:	88fb      	ldrh	r3, [r7, #6]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d101      	bne.n	800a118 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	e030      	b.n	800a17a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a18      	ldr	r2, [pc, #96]	@ (800a184 <HAL_UART_Receive_DMA+0x94>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d01f      	beq.n	800a168 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a132:	2b00      	cmp	r3, #0
 800a134:	d018      	beq.n	800a168 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	e853 3f00 	ldrex	r3, [r3]
 800a142:	613b      	str	r3, [r7, #16]
   return(result);
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a14a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a154:	623b      	str	r3, [r7, #32]
 800a156:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a158:	69f9      	ldr	r1, [r7, #28]
 800a15a:	6a3a      	ldr	r2, [r7, #32]
 800a15c:	e841 2300 	strex	r3, r2, [r1]
 800a160:	61bb      	str	r3, [r7, #24]
   return(result);
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1e6      	bne.n	800a136 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a168:	88fb      	ldrh	r3, [r7, #6]
 800a16a:	461a      	mov	r2, r3
 800a16c:	68b9      	ldr	r1, [r7, #8]
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f001 f926 	bl	800b3c0 <UART_Start_Receive_DMA>
 800a174:	4603      	mov	r3, r0
 800a176:	e000      	b.n	800a17a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a178:	2302      	movs	r3, #2
  }
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3728      	adds	r7, #40	@ 0x28
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	40008000 	.word	0x40008000

0800a188 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b0ba      	sub	sp, #232	@ 0xe8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	69db      	ldr	r3, [r3, #28]
 800a196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a1ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a1b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a1bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d11b      	bne.n	800a1fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a1c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1c8:	f003 0320 	and.w	r3, r3, #32
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d015      	beq.n	800a1fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a1d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1d4:	f003 0320 	and.w	r3, r3, #32
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d105      	bne.n	800a1e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a1dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d009      	beq.n	800a1fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f000 8312 	beq.w	800a816 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	4798      	blx	r3
      }
      return;
 800a1fa:	e30c      	b.n	800a816 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a1fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a200:	2b00      	cmp	r3, #0
 800a202:	f000 8129 	beq.w	800a458 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a206:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a20a:	4b90      	ldr	r3, [pc, #576]	@ (800a44c <HAL_UART_IRQHandler+0x2c4>)
 800a20c:	4013      	ands	r3, r2
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d106      	bne.n	800a220 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a212:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a216:	4b8e      	ldr	r3, [pc, #568]	@ (800a450 <HAL_UART_IRQHandler+0x2c8>)
 800a218:	4013      	ands	r3, r2
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 811c 	beq.w	800a458 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a224:	f003 0301 	and.w	r3, r3, #1
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d011      	beq.n	800a250 <HAL_UART_IRQHandler+0xc8>
 800a22c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00b      	beq.n	800a250 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2201      	movs	r2, #1
 800a23e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a246:	f043 0201 	orr.w	r2, r3, #1
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a254:	f003 0302 	and.w	r3, r3, #2
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d011      	beq.n	800a280 <HAL_UART_IRQHandler+0xf8>
 800a25c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a260:	f003 0301 	and.w	r3, r3, #1
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00b      	beq.n	800a280 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2202      	movs	r2, #2
 800a26e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a276:	f043 0204 	orr.w	r2, r3, #4
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a284:	f003 0304 	and.w	r3, r3, #4
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d011      	beq.n	800a2b0 <HAL_UART_IRQHandler+0x128>
 800a28c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a290:	f003 0301 	and.w	r3, r3, #1
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00b      	beq.n	800a2b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2204      	movs	r2, #4
 800a29e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2a6:	f043 0202 	orr.w	r2, r3, #2
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a2b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2b4:	f003 0308 	and.w	r3, r3, #8
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d017      	beq.n	800a2ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a2bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2c0:	f003 0320 	and.w	r3, r3, #32
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d105      	bne.n	800a2d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a2c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a2cc:	4b5f      	ldr	r3, [pc, #380]	@ (800a44c <HAL_UART_IRQHandler+0x2c4>)
 800a2ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00b      	beq.n	800a2ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2208      	movs	r2, #8
 800a2da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2e2:	f043 0208 	orr.w	r2, r3, #8
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a2ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d012      	beq.n	800a31e <HAL_UART_IRQHandler+0x196>
 800a2f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00c      	beq.n	800a31e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a30c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a314:	f043 0220 	orr.w	r2, r3, #32
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a324:	2b00      	cmp	r3, #0
 800a326:	f000 8278 	beq.w	800a81a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a32e:	f003 0320 	and.w	r3, r3, #32
 800a332:	2b00      	cmp	r3, #0
 800a334:	d013      	beq.n	800a35e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a33a:	f003 0320 	and.w	r3, r3, #32
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d105      	bne.n	800a34e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d007      	beq.n	800a35e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a352:	2b00      	cmp	r3, #0
 800a354:	d003      	beq.n	800a35e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a364:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a372:	2b40      	cmp	r3, #64	@ 0x40
 800a374:	d005      	beq.n	800a382 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a37a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d058      	beq.n	800a434 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f001 f903 	bl	800b58e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a392:	2b40      	cmp	r3, #64	@ 0x40
 800a394:	d148      	bne.n	800a428 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3308      	adds	r3, #8
 800a39c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a3a4:	e853 3f00 	ldrex	r3, [r3]
 800a3a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a3ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a3b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3308      	adds	r3, #8
 800a3be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a3c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a3c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a3ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a3d2:	e841 2300 	strex	r3, r2, [r1]
 800a3d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a3da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1d9      	bne.n	800a396 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d017      	beq.n	800a41c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3f2:	4a18      	ldr	r2, [pc, #96]	@ (800a454 <HAL_UART_IRQHandler+0x2cc>)
 800a3f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fb fbeb 	bl	8005bd8 <HAL_DMA_Abort_IT>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d01f      	beq.n	800a448 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a40e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a416:	4610      	mov	r0, r2
 800a418:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a41a:	e015      	b.n	800a448 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a426:	e00f      	b.n	800a448 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a432:	e009      	b.n	800a448 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a446:	e1e8      	b.n	800a81a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a448:	bf00      	nop
    return;
 800a44a:	e1e6      	b.n	800a81a <HAL_UART_IRQHandler+0x692>
 800a44c:	10000001 	.word	0x10000001
 800a450:	04000120 	.word	0x04000120
 800a454:	0800b917 	.word	0x0800b917

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	f040 8176 	bne.w	800a74e <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a466:	f003 0310 	and.w	r3, r3, #16
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f000 816f 	beq.w	800a74e <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a474:	f003 0310 	and.w	r3, r3, #16
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 8168 	beq.w	800a74e <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2210      	movs	r2, #16
 800a484:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a490:	2b40      	cmp	r3, #64	@ 0x40
 800a492:	f040 80dc 	bne.w	800a64e <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a4a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f000 80b1 	beq.w	800a610 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	f080 80a9 	bcs.w	800a610 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a4c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f003 0320 	and.w	r3, r3, #32
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f040 8087 	bne.w	800a5ea <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a4e8:	e853 3f00 	ldrex	r3, [r3]
 800a4ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a4f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a4f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	461a      	mov	r2, r3
 800a502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a50a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a512:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a516:	e841 2300 	strex	r3, r2, [r1]
 800a51a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a51e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1da      	bne.n	800a4dc <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3308      	adds	r3, #8
 800a52c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a530:	e853 3f00 	ldrex	r3, [r3]
 800a534:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a538:	f023 0301 	bic.w	r3, r3, #1
 800a53c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	3308      	adds	r3, #8
 800a546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a54a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a54e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a550:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a552:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a556:	e841 2300 	strex	r3, r2, [r1]
 800a55a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a55c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1e1      	bne.n	800a526 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	3308      	adds	r3, #8
 800a568:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a56c:	e853 3f00 	ldrex	r3, [r3]
 800a570:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a578:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	3308      	adds	r3, #8
 800a582:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a586:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a588:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a58c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a58e:	e841 2300 	strex	r3, r2, [r1]
 800a592:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1e3      	bne.n	800a562 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2220      	movs	r2, #32
 800a59e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5b0:	e853 3f00 	ldrex	r3, [r3]
 800a5b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a5b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5b8:	f023 0310 	bic.w	r3, r3, #16
 800a5bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a5cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a5d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a5d2:	e841 2300 	strex	r3, r2, [r1]
 800a5d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a5d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1e4      	bne.n	800a5a8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fb fa9e 	bl	8005b26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2202      	movs	r2, #2
 800a5ee:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a602:	b292      	uxth	r2, r2
 800a604:	1a8a      	subs	r2, r1, r2
 800a606:	b292      	uxth	r2, r2
 800a608:	4611      	mov	r1, r2
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a60e:	e106      	b.n	800a81e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a61a:	429a      	cmp	r2, r3
 800a61c:	f040 80ff 	bne.w	800a81e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 0320 	and.w	r3, r3, #32
 800a62e:	2b20      	cmp	r3, #32
 800a630:	f040 80f5 	bne.w	800a81e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2202      	movs	r2, #2
 800a638:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a646:	4611      	mov	r1, r2
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	4798      	blx	r3
      return;
 800a64c:	e0e7      	b.n	800a81e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a668:	b29b      	uxth	r3, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f000 80d9 	beq.w	800a822 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800a670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a674:	2b00      	cmp	r3, #0
 800a676:	f000 80d4 	beq.w	800a822 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a682:	e853 3f00 	ldrex	r3, [r3]
 800a686:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a68e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	461a      	mov	r2, r3
 800a698:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a69c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a69e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6a4:	e841 2300 	strex	r3, r2, [r1]
 800a6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1e4      	bne.n	800a67a <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	3308      	adds	r3, #8
 800a6b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ba:	e853 3f00 	ldrex	r3, [r3]
 800a6be:	623b      	str	r3, [r7, #32]
   return(result);
 800a6c0:	6a3b      	ldr	r3, [r7, #32]
 800a6c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a6c6:	f023 0301 	bic.w	r3, r3, #1
 800a6ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	3308      	adds	r3, #8
 800a6d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a6d8:	633a      	str	r2, [r7, #48]	@ 0x30
 800a6da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6e0:	e841 2300 	strex	r3, r2, [r1]
 800a6e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1e1      	bne.n	800a6b0 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2220      	movs	r2, #32
 800a6f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	e853 3f00 	ldrex	r3, [r3]
 800a70c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f023 0310 	bic.w	r3, r3, #16
 800a714:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	461a      	mov	r2, r3
 800a71e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a722:	61fb      	str	r3, [r7, #28]
 800a724:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a726:	69b9      	ldr	r1, [r7, #24]
 800a728:	69fa      	ldr	r2, [r7, #28]
 800a72a:	e841 2300 	strex	r3, r2, [r1]
 800a72e:	617b      	str	r3, [r7, #20]
   return(result);
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1e4      	bne.n	800a700 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2202      	movs	r2, #2
 800a73a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a742:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a746:	4611      	mov	r1, r2
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a74c:	e069      	b.n	800a822 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a74e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d010      	beq.n	800a77c <HAL_UART_IRQHandler+0x5f4>
 800a75a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a75e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00a      	beq.n	800a77c <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a76e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a77a:	e055      	b.n	800a828 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a784:	2b00      	cmp	r3, #0
 800a786:	d014      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a78c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a790:	2b00      	cmp	r3, #0
 800a792:	d105      	bne.n	800a7a0 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a798:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d008      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d03e      	beq.n	800a826 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	4798      	blx	r3
    }
    return;
 800a7b0:	e039      	b.n	800a826 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a7b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d009      	beq.n	800a7d2 <HAL_UART_IRQHandler+0x64a>
 800a7be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f001 f8b7 	bl	800b93e <UART_EndTransmit_IT>
    return;
 800a7d0:	e02a      	b.n	800a828 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00b      	beq.n	800a7f6 <HAL_UART_IRQHandler+0x66e>
 800a7de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7e2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d005      	beq.n	800a7f6 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7f4:	e018      	b.n	800a828 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a7f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d012      	beq.n	800a828 <HAL_UART_IRQHandler+0x6a0>
 800a802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a806:	2b00      	cmp	r3, #0
 800a808:	da0e      	bge.n	800a828 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a814:	e008      	b.n	800a828 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a816:	bf00      	nop
 800a818:	e006      	b.n	800a828 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a81a:	bf00      	nop
 800a81c:	e004      	b.n	800a828 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a81e:	bf00      	nop
 800a820:	e002      	b.n	800a828 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a822:	bf00      	nop
 800a824:	e000      	b.n	800a828 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a826:	bf00      	nop
  }
}
 800a828:	37e8      	adds	r7, #232	@ 0xe8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop

0800a830 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a84c:	bf00      	nop
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a888:	bf00      	nop
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a89c:	bf00      	nop
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a09      	ldr	r2, [pc, #36]	@ (800a91c <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d009      	beq.n	800a910 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	695b      	ldr	r3, [r3, #20]
 800a902:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	430a      	orrs	r2, r1
 800a90e:	615a      	str	r2, [r3, #20]
  }
}
 800a910:	bf00      	nop
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	40008000 	.word	0x40008000

0800a920 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a18      	ldr	r2, [pc, #96]	@ (800a990 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d027      	beq.n	800a982 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a938:	2b20      	cmp	r3, #32
 800a93a:	d120      	bne.n	800a97e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a942:	2b01      	cmp	r3, #1
 800a944:	d101      	bne.n	800a94a <HAL_UART_EnableReceiverTimeout+0x2a>
 800a946:	2302      	movs	r3, #2
 800a948:	e01c      	b.n	800a984 <HAL_UART_EnableReceiverTimeout+0x64>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2224      	movs	r2, #36	@ 0x24
 800a956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	685a      	ldr	r2, [r3, #4]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a968:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2220      	movs	r2, #32
 800a96e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	e002      	b.n	800a984 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a97e:	2302      	movs	r3, #2
 800a980:	e000      	b.n	800a984 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a982:	2301      	movs	r3, #1
  }
}
 800a984:	4618      	mov	r0, r3
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	40008000 	.word	0x40008000

0800a994 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	370c      	adds	r7, #12
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr
	...

0800a9b0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a1a      	ldr	r2, [pc, #104]	@ (800aa24 <UART_InitCallbacksToDefault+0x74>)
 800a9bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a19      	ldr	r2, [pc, #100]	@ (800aa28 <UART_InitCallbacksToDefault+0x78>)
 800a9c4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4a18      	ldr	r2, [pc, #96]	@ (800aa2c <UART_InitCallbacksToDefault+0x7c>)
 800a9cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a17      	ldr	r2, [pc, #92]	@ (800aa30 <UART_InitCallbacksToDefault+0x80>)
 800a9d4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4a16      	ldr	r2, [pc, #88]	@ (800aa34 <UART_InitCallbacksToDefault+0x84>)
 800a9dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4a15      	ldr	r2, [pc, #84]	@ (800aa38 <UART_InitCallbacksToDefault+0x88>)
 800a9e4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a14      	ldr	r2, [pc, #80]	@ (800aa3c <UART_InitCallbacksToDefault+0x8c>)
 800a9ec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a13      	ldr	r2, [pc, #76]	@ (800aa40 <UART_InitCallbacksToDefault+0x90>)
 800a9f4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a12      	ldr	r2, [pc, #72]	@ (800aa44 <UART_InitCallbacksToDefault+0x94>)
 800a9fc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a11      	ldr	r2, [pc, #68]	@ (800aa48 <UART_InitCallbacksToDefault+0x98>)
 800aa04:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a10      	ldr	r2, [pc, #64]	@ (800aa4c <UART_InitCallbacksToDefault+0x9c>)
 800aa0c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a0f      	ldr	r2, [pc, #60]	@ (800aa50 <UART_InitCallbacksToDefault+0xa0>)
 800aa14:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	0800a845 	.word	0x0800a845
 800aa28:	0800a831 	.word	0x0800a831
 800aa2c:	0800a86d 	.word	0x0800a86d
 800aa30:	0800a859 	.word	0x0800a859
 800aa34:	0800a881 	.word	0x0800a881
 800aa38:	0800a895 	.word	0x0800a895
 800aa3c:	0800a8a9 	.word	0x0800a8a9
 800aa40:	0800a8bd 	.word	0x0800a8bd
 800aa44:	0800b999 	.word	0x0800b999
 800aa48:	0800b9ad 	.word	0x0800b9ad
 800aa4c:	0800b9c1 	.word	0x0800b9c1
 800aa50:	0800a8d1 	.word	0x0800a8d1

0800aa54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa58:	b08c      	sub	sp, #48	@ 0x30
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	689a      	ldr	r2, [r3, #8]
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	431a      	orrs	r2, r3
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	695b      	ldr	r3, [r3, #20]
 800aa72:	431a      	orrs	r2, r3
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	69db      	ldr	r3, [r3, #28]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	4baa      	ldr	r3, [pc, #680]	@ (800ad2c <UART_SetConfig+0x2d8>)
 800aa84:	4013      	ands	r3, r2
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	6812      	ldr	r2, [r2, #0]
 800aa8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa8c:	430b      	orrs	r3, r1
 800aa8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	68da      	ldr	r2, [r3, #12]
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	430a      	orrs	r2, r1
 800aaa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a9f      	ldr	r2, [pc, #636]	@ (800ad30 <UART_SetConfig+0x2dc>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d004      	beq.n	800aac0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	6a1b      	ldr	r3, [r3, #32]
 800aaba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aabc:	4313      	orrs	r3, r2
 800aabe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800aaca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800aace:	697a      	ldr	r2, [r7, #20]
 800aad0:	6812      	ldr	r2, [r2, #0]
 800aad2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aad4:	430b      	orrs	r3, r1
 800aad6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aade:	f023 010f 	bic.w	r1, r3, #15
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a90      	ldr	r2, [pc, #576]	@ (800ad34 <UART_SetConfig+0x2e0>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d125      	bne.n	800ab44 <UART_SetConfig+0xf0>
 800aaf8:	4b8f      	ldr	r3, [pc, #572]	@ (800ad38 <UART_SetConfig+0x2e4>)
 800aafa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aafe:	f003 0303 	and.w	r3, r3, #3
 800ab02:	2b03      	cmp	r3, #3
 800ab04:	d81a      	bhi.n	800ab3c <UART_SetConfig+0xe8>
 800ab06:	a201      	add	r2, pc, #4	@ (adr r2, 800ab0c <UART_SetConfig+0xb8>)
 800ab08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab0c:	0800ab1d 	.word	0x0800ab1d
 800ab10:	0800ab2d 	.word	0x0800ab2d
 800ab14:	0800ab25 	.word	0x0800ab25
 800ab18:	0800ab35 	.word	0x0800ab35
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab22:	e116      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ab24:	2302      	movs	r3, #2
 800ab26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab2a:	e112      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ab2c:	2304      	movs	r3, #4
 800ab2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab32:	e10e      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ab34:	2308      	movs	r3, #8
 800ab36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab3a:	e10a      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ab3c:	2310      	movs	r3, #16
 800ab3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab42:	e106      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a7c      	ldr	r2, [pc, #496]	@ (800ad3c <UART_SetConfig+0x2e8>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d138      	bne.n	800abc0 <UART_SetConfig+0x16c>
 800ab4e:	4b7a      	ldr	r3, [pc, #488]	@ (800ad38 <UART_SetConfig+0x2e4>)
 800ab50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab54:	f003 030c 	and.w	r3, r3, #12
 800ab58:	2b0c      	cmp	r3, #12
 800ab5a:	d82d      	bhi.n	800abb8 <UART_SetConfig+0x164>
 800ab5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab64 <UART_SetConfig+0x110>)
 800ab5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab62:	bf00      	nop
 800ab64:	0800ab99 	.word	0x0800ab99
 800ab68:	0800abb9 	.word	0x0800abb9
 800ab6c:	0800abb9 	.word	0x0800abb9
 800ab70:	0800abb9 	.word	0x0800abb9
 800ab74:	0800aba9 	.word	0x0800aba9
 800ab78:	0800abb9 	.word	0x0800abb9
 800ab7c:	0800abb9 	.word	0x0800abb9
 800ab80:	0800abb9 	.word	0x0800abb9
 800ab84:	0800aba1 	.word	0x0800aba1
 800ab88:	0800abb9 	.word	0x0800abb9
 800ab8c:	0800abb9 	.word	0x0800abb9
 800ab90:	0800abb9 	.word	0x0800abb9
 800ab94:	0800abb1 	.word	0x0800abb1
 800ab98:	2300      	movs	r3, #0
 800ab9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab9e:	e0d8      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800aba0:	2302      	movs	r3, #2
 800aba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aba6:	e0d4      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800aba8:	2304      	movs	r3, #4
 800abaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abae:	e0d0      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800abb0:	2308      	movs	r3, #8
 800abb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abb6:	e0cc      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800abb8:	2310      	movs	r3, #16
 800abba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abbe:	e0c8      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a5e      	ldr	r2, [pc, #376]	@ (800ad40 <UART_SetConfig+0x2ec>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d125      	bne.n	800ac16 <UART_SetConfig+0x1c2>
 800abca:	4b5b      	ldr	r3, [pc, #364]	@ (800ad38 <UART_SetConfig+0x2e4>)
 800abcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abd0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800abd4:	2b30      	cmp	r3, #48	@ 0x30
 800abd6:	d016      	beq.n	800ac06 <UART_SetConfig+0x1b2>
 800abd8:	2b30      	cmp	r3, #48	@ 0x30
 800abda:	d818      	bhi.n	800ac0e <UART_SetConfig+0x1ba>
 800abdc:	2b20      	cmp	r3, #32
 800abde:	d00a      	beq.n	800abf6 <UART_SetConfig+0x1a2>
 800abe0:	2b20      	cmp	r3, #32
 800abe2:	d814      	bhi.n	800ac0e <UART_SetConfig+0x1ba>
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <UART_SetConfig+0x19a>
 800abe8:	2b10      	cmp	r3, #16
 800abea:	d008      	beq.n	800abfe <UART_SetConfig+0x1aa>
 800abec:	e00f      	b.n	800ac0e <UART_SetConfig+0x1ba>
 800abee:	2300      	movs	r3, #0
 800abf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abf4:	e0ad      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800abf6:	2302      	movs	r3, #2
 800abf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abfc:	e0a9      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800abfe:	2304      	movs	r3, #4
 800ac00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac04:	e0a5      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ac06:	2308      	movs	r3, #8
 800ac08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac0c:	e0a1      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ac0e:	2310      	movs	r3, #16
 800ac10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac14:	e09d      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a4a      	ldr	r2, [pc, #296]	@ (800ad44 <UART_SetConfig+0x2f0>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d125      	bne.n	800ac6c <UART_SetConfig+0x218>
 800ac20:	4b45      	ldr	r3, [pc, #276]	@ (800ad38 <UART_SetConfig+0x2e4>)
 800ac22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ac2a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac2c:	d016      	beq.n	800ac5c <UART_SetConfig+0x208>
 800ac2e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac30:	d818      	bhi.n	800ac64 <UART_SetConfig+0x210>
 800ac32:	2b80      	cmp	r3, #128	@ 0x80
 800ac34:	d00a      	beq.n	800ac4c <UART_SetConfig+0x1f8>
 800ac36:	2b80      	cmp	r3, #128	@ 0x80
 800ac38:	d814      	bhi.n	800ac64 <UART_SetConfig+0x210>
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d002      	beq.n	800ac44 <UART_SetConfig+0x1f0>
 800ac3e:	2b40      	cmp	r3, #64	@ 0x40
 800ac40:	d008      	beq.n	800ac54 <UART_SetConfig+0x200>
 800ac42:	e00f      	b.n	800ac64 <UART_SetConfig+0x210>
 800ac44:	2300      	movs	r3, #0
 800ac46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac4a:	e082      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac52:	e07e      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ac54:	2304      	movs	r3, #4
 800ac56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac5a:	e07a      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ac5c:	2308      	movs	r3, #8
 800ac5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac62:	e076      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ac64:	2310      	movs	r3, #16
 800ac66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac6a:	e072      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a35      	ldr	r2, [pc, #212]	@ (800ad48 <UART_SetConfig+0x2f4>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d12a      	bne.n	800accc <UART_SetConfig+0x278>
 800ac76:	4b30      	ldr	r3, [pc, #192]	@ (800ad38 <UART_SetConfig+0x2e4>)
 800ac78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac84:	d01a      	beq.n	800acbc <UART_SetConfig+0x268>
 800ac86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac8a:	d81b      	bhi.n	800acc4 <UART_SetConfig+0x270>
 800ac8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac90:	d00c      	beq.n	800acac <UART_SetConfig+0x258>
 800ac92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac96:	d815      	bhi.n	800acc4 <UART_SetConfig+0x270>
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d003      	beq.n	800aca4 <UART_SetConfig+0x250>
 800ac9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aca0:	d008      	beq.n	800acb4 <UART_SetConfig+0x260>
 800aca2:	e00f      	b.n	800acc4 <UART_SetConfig+0x270>
 800aca4:	2300      	movs	r3, #0
 800aca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acaa:	e052      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800acac:	2302      	movs	r3, #2
 800acae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acb2:	e04e      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800acb4:	2304      	movs	r3, #4
 800acb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acba:	e04a      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800acbc:	2308      	movs	r3, #8
 800acbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acc2:	e046      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800acc4:	2310      	movs	r3, #16
 800acc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acca:	e042      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a17      	ldr	r2, [pc, #92]	@ (800ad30 <UART_SetConfig+0x2dc>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d13a      	bne.n	800ad4c <UART_SetConfig+0x2f8>
 800acd6:	4b18      	ldr	r3, [pc, #96]	@ (800ad38 <UART_SetConfig+0x2e4>)
 800acd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acdc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ace0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ace4:	d01a      	beq.n	800ad1c <UART_SetConfig+0x2c8>
 800ace6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acea:	d81b      	bhi.n	800ad24 <UART_SetConfig+0x2d0>
 800acec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acf0:	d00c      	beq.n	800ad0c <UART_SetConfig+0x2b8>
 800acf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acf6:	d815      	bhi.n	800ad24 <UART_SetConfig+0x2d0>
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d003      	beq.n	800ad04 <UART_SetConfig+0x2b0>
 800acfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad00:	d008      	beq.n	800ad14 <UART_SetConfig+0x2c0>
 800ad02:	e00f      	b.n	800ad24 <UART_SetConfig+0x2d0>
 800ad04:	2300      	movs	r3, #0
 800ad06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad0a:	e022      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad12:	e01e      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ad14:	2304      	movs	r3, #4
 800ad16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad1a:	e01a      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ad1c:	2308      	movs	r3, #8
 800ad1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad22:	e016      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ad24:	2310      	movs	r3, #16
 800ad26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad2a:	e012      	b.n	800ad52 <UART_SetConfig+0x2fe>
 800ad2c:	cfff69f3 	.word	0xcfff69f3
 800ad30:	40008000 	.word	0x40008000
 800ad34:	40013800 	.word	0x40013800
 800ad38:	40021000 	.word	0x40021000
 800ad3c:	40004400 	.word	0x40004400
 800ad40:	40004800 	.word	0x40004800
 800ad44:	40004c00 	.word	0x40004c00
 800ad48:	40005000 	.word	0x40005000
 800ad4c:	2310      	movs	r3, #16
 800ad4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4aae      	ldr	r2, [pc, #696]	@ (800b010 <UART_SetConfig+0x5bc>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	f040 8097 	bne.w	800ae8c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ad5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad62:	2b08      	cmp	r3, #8
 800ad64:	d823      	bhi.n	800adae <UART_SetConfig+0x35a>
 800ad66:	a201      	add	r2, pc, #4	@ (adr r2, 800ad6c <UART_SetConfig+0x318>)
 800ad68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad6c:	0800ad91 	.word	0x0800ad91
 800ad70:	0800adaf 	.word	0x0800adaf
 800ad74:	0800ad99 	.word	0x0800ad99
 800ad78:	0800adaf 	.word	0x0800adaf
 800ad7c:	0800ad9f 	.word	0x0800ad9f
 800ad80:	0800adaf 	.word	0x0800adaf
 800ad84:	0800adaf 	.word	0x0800adaf
 800ad88:	0800adaf 	.word	0x0800adaf
 800ad8c:	0800ada7 	.word	0x0800ada7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad90:	f7fc f812 	bl	8006db8 <HAL_RCC_GetPCLK1Freq>
 800ad94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad96:	e010      	b.n	800adba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad98:	4b9e      	ldr	r3, [pc, #632]	@ (800b014 <UART_SetConfig+0x5c0>)
 800ad9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad9c:	e00d      	b.n	800adba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad9e:	f7fb ff9d 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
 800ada2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ada4:	e009      	b.n	800adba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ada6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800adac:	e005      	b.n	800adba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800adae:	2300      	movs	r3, #0
 800adb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800adb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800adba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 8130 	beq.w	800b022 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adc6:	4a94      	ldr	r2, [pc, #592]	@ (800b018 <UART_SetConfig+0x5c4>)
 800adc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adcc:	461a      	mov	r2, r3
 800adce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add0:	fbb3 f3f2 	udiv	r3, r3, r2
 800add4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	685a      	ldr	r2, [r3, #4]
 800adda:	4613      	mov	r3, r2
 800addc:	005b      	lsls	r3, r3, #1
 800adde:	4413      	add	r3, r2
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d305      	bcc.n	800adf2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adec:	69ba      	ldr	r2, [r7, #24]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d903      	bls.n	800adfa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800adf8:	e113      	b.n	800b022 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfc:	2200      	movs	r2, #0
 800adfe:	60bb      	str	r3, [r7, #8]
 800ae00:	60fa      	str	r2, [r7, #12]
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae06:	4a84      	ldr	r2, [pc, #528]	@ (800b018 <UART_SetConfig+0x5c4>)
 800ae08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	2200      	movs	r2, #0
 800ae10:	603b      	str	r3, [r7, #0]
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae1c:	f7f5 ffd0 	bl	8000dc0 <__aeabi_uldivmod>
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	4610      	mov	r0, r2
 800ae26:	4619      	mov	r1, r3
 800ae28:	f04f 0200 	mov.w	r2, #0
 800ae2c:	f04f 0300 	mov.w	r3, #0
 800ae30:	020b      	lsls	r3, r1, #8
 800ae32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae36:	0202      	lsls	r2, r0, #8
 800ae38:	6979      	ldr	r1, [r7, #20]
 800ae3a:	6849      	ldr	r1, [r1, #4]
 800ae3c:	0849      	lsrs	r1, r1, #1
 800ae3e:	2000      	movs	r0, #0
 800ae40:	460c      	mov	r4, r1
 800ae42:	4605      	mov	r5, r0
 800ae44:	eb12 0804 	adds.w	r8, r2, r4
 800ae48:	eb43 0905 	adc.w	r9, r3, r5
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	469a      	mov	sl, r3
 800ae54:	4693      	mov	fp, r2
 800ae56:	4652      	mov	r2, sl
 800ae58:	465b      	mov	r3, fp
 800ae5a:	4640      	mov	r0, r8
 800ae5c:	4649      	mov	r1, r9
 800ae5e:	f7f5 ffaf 	bl	8000dc0 <__aeabi_uldivmod>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	4613      	mov	r3, r2
 800ae68:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae6a:	6a3b      	ldr	r3, [r7, #32]
 800ae6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae70:	d308      	bcc.n	800ae84 <UART_SetConfig+0x430>
 800ae72:	6a3b      	ldr	r3, [r7, #32]
 800ae74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae78:	d204      	bcs.n	800ae84 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	6a3a      	ldr	r2, [r7, #32]
 800ae80:	60da      	str	r2, [r3, #12]
 800ae82:	e0ce      	b.n	800b022 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae8a:	e0ca      	b.n	800b022 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	69db      	ldr	r3, [r3, #28]
 800ae90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae94:	d166      	bne.n	800af64 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ae96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae9a:	2b08      	cmp	r3, #8
 800ae9c:	d827      	bhi.n	800aeee <UART_SetConfig+0x49a>
 800ae9e:	a201      	add	r2, pc, #4	@ (adr r2, 800aea4 <UART_SetConfig+0x450>)
 800aea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea4:	0800aec9 	.word	0x0800aec9
 800aea8:	0800aed1 	.word	0x0800aed1
 800aeac:	0800aed9 	.word	0x0800aed9
 800aeb0:	0800aeef 	.word	0x0800aeef
 800aeb4:	0800aedf 	.word	0x0800aedf
 800aeb8:	0800aeef 	.word	0x0800aeef
 800aebc:	0800aeef 	.word	0x0800aeef
 800aec0:	0800aeef 	.word	0x0800aeef
 800aec4:	0800aee7 	.word	0x0800aee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aec8:	f7fb ff76 	bl	8006db8 <HAL_RCC_GetPCLK1Freq>
 800aecc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aece:	e014      	b.n	800aefa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aed0:	f7fb ff88 	bl	8006de4 <HAL_RCC_GetPCLK2Freq>
 800aed4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aed6:	e010      	b.n	800aefa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aed8:	4b4e      	ldr	r3, [pc, #312]	@ (800b014 <UART_SetConfig+0x5c0>)
 800aeda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aedc:	e00d      	b.n	800aefa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aede:	f7fb fefd 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
 800aee2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aee4:	e009      	b.n	800aefa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aeea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aeec:	e005      	b.n	800aefa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800aeee:	2300      	movs	r3, #0
 800aef0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aef8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f000 8090 	beq.w	800b022 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af06:	4a44      	ldr	r2, [pc, #272]	@ (800b018 <UART_SetConfig+0x5c4>)
 800af08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af0c:	461a      	mov	r2, r3
 800af0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af10:	fbb3 f3f2 	udiv	r3, r3, r2
 800af14:	005a      	lsls	r2, r3, #1
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	085b      	lsrs	r3, r3, #1
 800af1c:	441a      	add	r2, r3
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	fbb2 f3f3 	udiv	r3, r2, r3
 800af26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af28:	6a3b      	ldr	r3, [r7, #32]
 800af2a:	2b0f      	cmp	r3, #15
 800af2c:	d916      	bls.n	800af5c <UART_SetConfig+0x508>
 800af2e:	6a3b      	ldr	r3, [r7, #32]
 800af30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af34:	d212      	bcs.n	800af5c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af36:	6a3b      	ldr	r3, [r7, #32]
 800af38:	b29b      	uxth	r3, r3
 800af3a:	f023 030f 	bic.w	r3, r3, #15
 800af3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af40:	6a3b      	ldr	r3, [r7, #32]
 800af42:	085b      	lsrs	r3, r3, #1
 800af44:	b29b      	uxth	r3, r3
 800af46:	f003 0307 	and.w	r3, r3, #7
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	8bfb      	ldrh	r3, [r7, #30]
 800af4e:	4313      	orrs	r3, r2
 800af50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	8bfa      	ldrh	r2, [r7, #30]
 800af58:	60da      	str	r2, [r3, #12]
 800af5a:	e062      	b.n	800b022 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800af62:	e05e      	b.n	800b022 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af68:	2b08      	cmp	r3, #8
 800af6a:	d828      	bhi.n	800afbe <UART_SetConfig+0x56a>
 800af6c:	a201      	add	r2, pc, #4	@ (adr r2, 800af74 <UART_SetConfig+0x520>)
 800af6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af72:	bf00      	nop
 800af74:	0800af99 	.word	0x0800af99
 800af78:	0800afa1 	.word	0x0800afa1
 800af7c:	0800afa9 	.word	0x0800afa9
 800af80:	0800afbf 	.word	0x0800afbf
 800af84:	0800afaf 	.word	0x0800afaf
 800af88:	0800afbf 	.word	0x0800afbf
 800af8c:	0800afbf 	.word	0x0800afbf
 800af90:	0800afbf 	.word	0x0800afbf
 800af94:	0800afb7 	.word	0x0800afb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af98:	f7fb ff0e 	bl	8006db8 <HAL_RCC_GetPCLK1Freq>
 800af9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af9e:	e014      	b.n	800afca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afa0:	f7fb ff20 	bl	8006de4 <HAL_RCC_GetPCLK2Freq>
 800afa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800afa6:	e010      	b.n	800afca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afa8:	4b1a      	ldr	r3, [pc, #104]	@ (800b014 <UART_SetConfig+0x5c0>)
 800afaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800afac:	e00d      	b.n	800afca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afae:	f7fb fe95 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
 800afb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800afb4:	e009      	b.n	800afca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800afbc:	e005      	b.n	800afca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800afbe:	2300      	movs	r3, #0
 800afc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800afc8:	bf00      	nop
    }

    if (pclk != 0U)
 800afca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d028      	beq.n	800b022 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd4:	4a10      	ldr	r2, [pc, #64]	@ (800b018 <UART_SetConfig+0x5c4>)
 800afd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afda:	461a      	mov	r2, r3
 800afdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afde:	fbb3 f2f2 	udiv	r2, r3, r2
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	085b      	lsrs	r3, r3, #1
 800afe8:	441a      	add	r2, r3
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	fbb2 f3f3 	udiv	r3, r2, r3
 800aff2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	2b0f      	cmp	r3, #15
 800aff8:	d910      	bls.n	800b01c <UART_SetConfig+0x5c8>
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b000:	d20c      	bcs.n	800b01c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b002:	6a3b      	ldr	r3, [r7, #32]
 800b004:	b29a      	uxth	r2, r3
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	60da      	str	r2, [r3, #12]
 800b00c:	e009      	b.n	800b022 <UART_SetConfig+0x5ce>
 800b00e:	bf00      	nop
 800b010:	40008000 	.word	0x40008000
 800b014:	00f42400 	.word	0x00f42400
 800b018:	0800c824 	.word	0x0800c824
      }
      else
      {
        ret = HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2201      	movs	r2, #1
 800b026:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	2201      	movs	r2, #1
 800b02e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2200      	movs	r2, #0
 800b036:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	2200      	movs	r2, #0
 800b03c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b03e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b042:	4618      	mov	r0, r3
 800b044:	3730      	adds	r7, #48	@ 0x30
 800b046:	46bd      	mov	sp, r7
 800b048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b04c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b058:	f003 0308 	and.w	r3, r3, #8
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00a      	beq.n	800b076 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	430a      	orrs	r2, r1
 800b074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b07a:	f003 0301 	and.w	r3, r3, #1
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00a      	beq.n	800b098 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	430a      	orrs	r2, r1
 800b096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b09c:	f003 0302 	and.w	r3, r3, #2
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d00a      	beq.n	800b0ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	430a      	orrs	r2, r1
 800b0b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0be:	f003 0304 	and.w	r3, r3, #4
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00a      	beq.n	800b0dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	430a      	orrs	r2, r1
 800b0da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0e0:	f003 0310 	and.w	r3, r3, #16
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00a      	beq.n	800b0fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	430a      	orrs	r2, r1
 800b0fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b102:	f003 0320 	and.w	r3, r3, #32
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00a      	beq.n	800b120 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	430a      	orrs	r2, r1
 800b11e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d01a      	beq.n	800b162 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	430a      	orrs	r2, r1
 800b140:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b146:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b14a:	d10a      	bne.n	800b162 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	430a      	orrs	r2, r1
 800b160:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00a      	beq.n	800b184 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	430a      	orrs	r2, r1
 800b182:	605a      	str	r2, [r3, #4]
  }
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b098      	sub	sp, #96	@ 0x60
 800b194:	af02      	add	r7, sp, #8
 800b196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1a0:	f7fa fa82 	bl	80056a8 <HAL_GetTick>
 800b1a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 0308 	and.w	r3, r3, #8
 800b1b0:	2b08      	cmp	r3, #8
 800b1b2:	d12f      	bne.n	800b214 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 f88e 	bl	800b2e4 <UART_WaitOnFlagUntilTimeout>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d022      	beq.n	800b214 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d6:	e853 3f00 	ldrex	r3, [r3]
 800b1da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b1f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1f4:	e841 2300 	strex	r3, r2, [r1]
 800b1f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b1fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1e6      	bne.n	800b1ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2220      	movs	r2, #32
 800b204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b210:	2303      	movs	r3, #3
 800b212:	e063      	b.n	800b2dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0304 	and.w	r3, r3, #4
 800b21e:	2b04      	cmp	r3, #4
 800b220:	d149      	bne.n	800b2b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b222:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b22a:	2200      	movs	r2, #0
 800b22c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 f857 	bl	800b2e4 <UART_WaitOnFlagUntilTimeout>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d03c      	beq.n	800b2b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b244:	e853 3f00 	ldrex	r3, [r3]
 800b248:	623b      	str	r3, [r7, #32]
   return(result);
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b250:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	461a      	mov	r2, r3
 800b258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b25a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b25c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b262:	e841 2300 	strex	r3, r2, [r1]
 800b266:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1e6      	bne.n	800b23c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3308      	adds	r3, #8
 800b274:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	e853 3f00 	ldrex	r3, [r3]
 800b27c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f023 0301 	bic.w	r3, r3, #1
 800b284:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	3308      	adds	r3, #8
 800b28c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b28e:	61fa      	str	r2, [r7, #28]
 800b290:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b292:	69b9      	ldr	r1, [r7, #24]
 800b294:	69fa      	ldr	r2, [r7, #28]
 800b296:	e841 2300 	strex	r3, r2, [r1]
 800b29a:	617b      	str	r3, [r7, #20]
   return(result);
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d1e5      	bne.n	800b26e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2220      	movs	r2, #32
 800b2a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e012      	b.n	800b2dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2220      	movs	r2, #32
 800b2ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2220      	movs	r2, #32
 800b2c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3758      	adds	r7, #88	@ 0x58
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	603b      	str	r3, [r7, #0]
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2f4:	e04f      	b.n	800b396 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fc:	d04b      	beq.n	800b396 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2fe:	f7fa f9d3 	bl	80056a8 <HAL_GetTick>
 800b302:	4602      	mov	r2, r0
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	1ad3      	subs	r3, r2, r3
 800b308:	69ba      	ldr	r2, [r7, #24]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d302      	bcc.n	800b314 <UART_WaitOnFlagUntilTimeout+0x30>
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d101      	bne.n	800b318 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b314:	2303      	movs	r3, #3
 800b316:	e04e      	b.n	800b3b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f003 0304 	and.w	r3, r3, #4
 800b322:	2b00      	cmp	r3, #0
 800b324:	d037      	beq.n	800b396 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	2b80      	cmp	r3, #128	@ 0x80
 800b32a:	d034      	beq.n	800b396 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	2b40      	cmp	r3, #64	@ 0x40
 800b330:	d031      	beq.n	800b396 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	69db      	ldr	r3, [r3, #28]
 800b338:	f003 0308 	and.w	r3, r3, #8
 800b33c:	2b08      	cmp	r3, #8
 800b33e:	d110      	bne.n	800b362 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2208      	movs	r2, #8
 800b346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f000 f920 	bl	800b58e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2208      	movs	r2, #8
 800b352:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	e029      	b.n	800b3b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	69db      	ldr	r3, [r3, #28]
 800b368:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b36c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b370:	d111      	bne.n	800b396 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b37a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f000 f906 	bl	800b58e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2220      	movs	r2, #32
 800b386:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b392:	2303      	movs	r3, #3
 800b394:	e00f      	b.n	800b3b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	69da      	ldr	r2, [r3, #28]
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	4013      	ands	r3, r2
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	bf0c      	ite	eq
 800b3a6:	2301      	moveq	r3, #1
 800b3a8:	2300      	movne	r3, #0
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	79fb      	ldrb	r3, [r7, #7]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d0a0      	beq.n	800b2f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
	...

0800b3c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b096      	sub	sp, #88	@ 0x58
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	88fa      	ldrh	r2, [r7, #6]
 800b3d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2222      	movs	r2, #34	@ 0x22
 800b3e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d02d      	beq.n	800b452 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3fc:	4a40      	ldr	r2, [pc, #256]	@ (800b500 <UART_Start_Receive_DMA+0x140>)
 800b3fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b406:	4a3f      	ldr	r2, [pc, #252]	@ (800b504 <UART_Start_Receive_DMA+0x144>)
 800b408:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b410:	4a3d      	ldr	r2, [pc, #244]	@ (800b508 <UART_Start_Receive_DMA+0x148>)
 800b412:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b41a:	2200      	movs	r2, #0
 800b41c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3324      	adds	r3, #36	@ 0x24
 800b42a:	4619      	mov	r1, r3
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b430:	461a      	mov	r2, r3
 800b432:	88fb      	ldrh	r3, [r7, #6]
 800b434:	f7fa fafc 	bl	8005a30 <HAL_DMA_Start_IT>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d009      	beq.n	800b452 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2210      	movs	r2, #16
 800b442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2220      	movs	r2, #32
 800b44a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e051      	b.n	800b4f6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d018      	beq.n	800b48c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b462:	e853 3f00 	ldrex	r3, [r3]
 800b466:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b46e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	461a      	mov	r2, r3
 800b476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b478:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b47a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b47e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b480:	e841 2300 	strex	r3, r2, [r1]
 800b484:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1e6      	bne.n	800b45a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	3308      	adds	r3, #8
 800b492:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b496:	e853 3f00 	ldrex	r3, [r3]
 800b49a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49e:	f043 0301 	orr.w	r3, r3, #1
 800b4a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	3308      	adds	r3, #8
 800b4aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b4ac:	637a      	str	r2, [r7, #52]	@ 0x34
 800b4ae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b4b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4b4:	e841 2300 	strex	r3, r2, [r1]
 800b4b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d1e5      	bne.n	800b48c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3308      	adds	r3, #8
 800b4c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	e853 3f00 	ldrex	r3, [r3]
 800b4ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	3308      	adds	r3, #8
 800b4de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b4e0:	623a      	str	r2, [r7, #32]
 800b4e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e4:	69f9      	ldr	r1, [r7, #28]
 800b4e6:	6a3a      	ldr	r2, [r7, #32]
 800b4e8:	e841 2300 	strex	r3, r2, [r1]
 800b4ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1e5      	bne.n	800b4c0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3758      	adds	r7, #88	@ 0x58
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	0800b719 	.word	0x0800b719
 800b504:	0800b84d 	.word	0x0800b84d
 800b508:	0800b893 	.word	0x0800b893

0800b50c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b08f      	sub	sp, #60	@ 0x3c
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51a:	6a3b      	ldr	r3, [r7, #32]
 800b51c:	e853 3f00 	ldrex	r3, [r3]
 800b520:	61fb      	str	r3, [r7, #28]
   return(result);
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b528:	637b      	str	r3, [r7, #52]	@ 0x34
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	461a      	mov	r2, r3
 800b530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b534:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b536:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b53a:	e841 2300 	strex	r3, r2, [r1]
 800b53e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1e6      	bne.n	800b514 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	3308      	adds	r3, #8
 800b54c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	e853 3f00 	ldrex	r3, [r3]
 800b554:	60bb      	str	r3, [r7, #8]
   return(result);
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b55c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3308      	adds	r3, #8
 800b564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b566:	61ba      	str	r2, [r7, #24]
 800b568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56a:	6979      	ldr	r1, [r7, #20]
 800b56c:	69ba      	ldr	r2, [r7, #24]
 800b56e:	e841 2300 	strex	r3, r2, [r1]
 800b572:	613b      	str	r3, [r7, #16]
   return(result);
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1e5      	bne.n	800b546 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2220      	movs	r2, #32
 800b57e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b582:	bf00      	nop
 800b584:	373c      	adds	r7, #60	@ 0x3c
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b58e:	b480      	push	{r7}
 800b590:	b095      	sub	sp, #84	@ 0x54
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b59e:	e853 3f00 	ldrex	r3, [r3]
 800b5a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b5ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b5bc:	e841 2300 	strex	r3, r2, [r1]
 800b5c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d1e6      	bne.n	800b596 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3308      	adds	r3, #8
 800b5ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d0:	6a3b      	ldr	r3, [r7, #32]
 800b5d2:	e853 3f00 	ldrex	r3, [r3]
 800b5d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b5de:	f023 0301 	bic.w	r3, r3, #1
 800b5e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	3308      	adds	r3, #8
 800b5ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b5f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5f4:	e841 2300 	strex	r3, r2, [r1]
 800b5f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1e3      	bne.n	800b5c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b604:	2b01      	cmp	r3, #1
 800b606:	d118      	bne.n	800b63a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	e853 3f00 	ldrex	r3, [r3]
 800b614:	60bb      	str	r3, [r7, #8]
   return(result);
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	f023 0310 	bic.w	r3, r3, #16
 800b61c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	461a      	mov	r2, r3
 800b624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b626:	61bb      	str	r3, [r7, #24]
 800b628:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62a:	6979      	ldr	r1, [r7, #20]
 800b62c:	69ba      	ldr	r2, [r7, #24]
 800b62e:	e841 2300 	strex	r3, r2, [r1]
 800b632:	613b      	str	r3, [r7, #16]
   return(result);
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1e6      	bne.n	800b608 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2220      	movs	r2, #32
 800b63e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b64e:	bf00      	nop
 800b650:	3754      	adds	r7, #84	@ 0x54
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b090      	sub	sp, #64	@ 0x40
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b666:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f003 0320 	and.w	r3, r3, #32
 800b672:	2b00      	cmp	r3, #0
 800b674:	d137      	bne.n	800b6e6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b678:	2200      	movs	r2, #0
 800b67a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b67e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	3308      	adds	r3, #8
 800b684:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b688:	e853 3f00 	ldrex	r3, [r3]
 800b68c:	623b      	str	r3, [r7, #32]
   return(result);
 800b68e:	6a3b      	ldr	r3, [r7, #32]
 800b690:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b694:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	3308      	adds	r3, #8
 800b69c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b69e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b6a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6a6:	e841 2300 	strex	r3, r2, [r1]
 800b6aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d1e5      	bne.n	800b67e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b6b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	e853 3f00 	ldrex	r3, [r3]
 800b6be:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6d0:	61fb      	str	r3, [r7, #28]
 800b6d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d4:	69b9      	ldr	r1, [r7, #24]
 800b6d6:	69fa      	ldr	r2, [r7, #28]
 800b6d8:	e841 2300 	strex	r3, r2, [r1]
 800b6dc:	617b      	str	r3, [r7, #20]
   return(result);
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1e6      	bne.n	800b6b2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6e4:	e004      	b.n	800b6f0 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b6e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b6ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b6ee:	4798      	blx	r3
}
 800b6f0:	bf00      	nop
 800b6f2:	3740      	adds	r7, #64	@ 0x40
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b704:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b710:	bf00      	nop
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b09c      	sub	sp, #112	@ 0x70
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b724:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 0320 	and.w	r3, r3, #32
 800b730:	2b00      	cmp	r3, #0
 800b732:	d171      	bne.n	800b818 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b736:	2200      	movs	r2, #0
 800b738:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b73c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b744:	e853 3f00 	ldrex	r3, [r3]
 800b748:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b74a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b74c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b750:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	461a      	mov	r2, r3
 800b758:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b75a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b75c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b75e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b760:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b762:	e841 2300 	strex	r3, r2, [r1]
 800b766:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1e6      	bne.n	800b73c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b76e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	3308      	adds	r3, #8
 800b774:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b778:	e853 3f00 	ldrex	r3, [r3]
 800b77c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b77e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b780:	f023 0301 	bic.w	r3, r3, #1
 800b784:	667b      	str	r3, [r7, #100]	@ 0x64
 800b786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	3308      	adds	r3, #8
 800b78c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b78e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b790:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b792:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b794:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b796:	e841 2300 	strex	r3, r2, [r1]
 800b79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b79c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1e5      	bne.n	800b76e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	3308      	adds	r3, #8
 800b7a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ac:	e853 3f00 	ldrex	r3, [r3]
 800b7b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b7b2:	6a3b      	ldr	r3, [r7, #32]
 800b7b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7b8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b7ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	3308      	adds	r3, #8
 800b7c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b7c2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b7c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7ca:	e841 2300 	strex	r3, r2, [r1]
 800b7ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1e5      	bne.n	800b7a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b7d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7d8:	2220      	movs	r2, #32
 800b7da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d118      	bne.n	800b818 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	e853 3f00 	ldrex	r3, [r3]
 800b7f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f023 0310 	bic.w	r3, r3, #16
 800b7fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	461a      	mov	r2, r3
 800b802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b804:	61fb      	str	r3, [r7, #28]
 800b806:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b808:	69b9      	ldr	r1, [r7, #24]
 800b80a:	69fa      	ldr	r2, [r7, #28]
 800b80c:	e841 2300 	strex	r3, r2, [r1]
 800b810:	617b      	str	r3, [r7, #20]
   return(result);
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d1e6      	bne.n	800b7e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b81a:	2200      	movs	r2, #0
 800b81c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b81e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b822:	2b01      	cmp	r3, #1
 800b824:	d109      	bne.n	800b83a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b826:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b828:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b82c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b82e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b832:	4611      	mov	r1, r2
 800b834:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b836:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b838:	e004      	b.n	800b844 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b83a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b83c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b840:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b842:	4798      	blx	r3
}
 800b844:	bf00      	nop
 800b846:	3770      	adds	r7, #112	@ 0x70
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b858:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2201      	movs	r2, #1
 800b85e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b864:	2b01      	cmp	r3, #1
 800b866:	d10b      	bne.n	800b880 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b874:	0852      	lsrs	r2, r2, #1
 800b876:	b292      	uxth	r2, r2
 800b878:	4611      	mov	r1, r2
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b87e:	e004      	b.n	800b88a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	4798      	blx	r3
}
 800b88a:	bf00      	nop
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b086      	sub	sp, #24
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b89e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8ba:	2b80      	cmp	r3, #128	@ 0x80
 800b8bc:	d109      	bne.n	800b8d2 <UART_DMAError+0x40>
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	2b21      	cmp	r3, #33	@ 0x21
 800b8c2:	d106      	bne.n	800b8d2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b8cc:	6978      	ldr	r0, [r7, #20]
 800b8ce:	f7ff fe1d 	bl	800b50c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8dc:	2b40      	cmp	r3, #64	@ 0x40
 800b8de:	d109      	bne.n	800b8f4 <UART_DMAError+0x62>
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2b22      	cmp	r3, #34	@ 0x22
 800b8e4:	d106      	bne.n	800b8f4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b8ee:	6978      	ldr	r0, [r7, #20]
 800b8f0:	f7ff fe4d 	bl	800b58e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8fa:	f043 0210 	orr.w	r2, r3, #16
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b90a:	6978      	ldr	r0, [r7, #20]
 800b90c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b90e:	bf00      	nop
 800b910:	3718      	adds	r7, #24
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b084      	sub	sp, #16
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b922:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2200      	movs	r2, #0
 800b928:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b936:	bf00      	nop
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b088      	sub	sp, #32
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	e853 3f00 	ldrex	r3, [r3]
 800b952:	60bb      	str	r3, [r7, #8]
   return(result);
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b95a:	61fb      	str	r3, [r7, #28]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	461a      	mov	r2, r3
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	61bb      	str	r3, [r7, #24]
 800b966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b968:	6979      	ldr	r1, [r7, #20]
 800b96a:	69ba      	ldr	r2, [r7, #24]
 800b96c:	e841 2300 	strex	r3, r2, [r1]
 800b970:	613b      	str	r3, [r7, #16]
   return(result);
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1e6      	bne.n	800b946 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2220      	movs	r2, #32
 800b97c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b990:	bf00      	nop
 800b992:	3720      	adds	r7, #32
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d101      	bne.n	800b9ea <HAL_UARTEx_DisableFifoMode+0x16>
 800b9e6:	2302      	movs	r3, #2
 800b9e8:	e027      	b.n	800ba3a <HAL_UARTEx_DisableFifoMode+0x66>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2224      	movs	r2, #36	@ 0x24
 800b9f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f022 0201 	bic.w	r2, r2, #1
 800ba10:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ba18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2220      	movs	r2, #32
 800ba2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba38:	2300      	movs	r3, #0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3714      	adds	r7, #20
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr

0800ba46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b084      	sub	sp, #16
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d101      	bne.n	800ba5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba5a:	2302      	movs	r3, #2
 800ba5c:	e02d      	b.n	800baba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2201      	movs	r2, #1
 800ba62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2224      	movs	r2, #36	@ 0x24
 800ba6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f022 0201 	bic.w	r2, r2, #1
 800ba84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	683a      	ldr	r2, [r7, #0]
 800ba96:	430a      	orrs	r2, r1
 800ba98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f850 	bl	800bb40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68fa      	ldr	r2, [r7, #12]
 800baa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2220      	movs	r2, #32
 800baac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b084      	sub	sp, #16
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
 800baca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d101      	bne.n	800bada <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bad6:	2302      	movs	r3, #2
 800bad8:	e02d      	b.n	800bb36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2201      	movs	r2, #1
 800bade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2224      	movs	r2, #36	@ 0x24
 800bae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f022 0201 	bic.w	r2, r2, #1
 800bb00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	683a      	ldr	r2, [r7, #0]
 800bb12:	430a      	orrs	r2, r1
 800bb14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 f812 	bl	800bb40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2220      	movs	r2, #32
 800bb28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
	...

0800bb40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d108      	bne.n	800bb62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb60:	e031      	b.n	800bbc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb62:	2308      	movs	r3, #8
 800bb64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb66:	2308      	movs	r3, #8
 800bb68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	0e5b      	lsrs	r3, r3, #25
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	f003 0307 	and.w	r3, r3, #7
 800bb78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	0f5b      	lsrs	r3, r3, #29
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	f003 0307 	and.w	r3, r3, #7
 800bb88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb8a:	7bbb      	ldrb	r3, [r7, #14]
 800bb8c:	7b3a      	ldrb	r2, [r7, #12]
 800bb8e:	4911      	ldr	r1, [pc, #68]	@ (800bbd4 <UARTEx_SetNbDataToProcess+0x94>)
 800bb90:	5c8a      	ldrb	r2, [r1, r2]
 800bb92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb96:	7b3a      	ldrb	r2, [r7, #12]
 800bb98:	490f      	ldr	r1, [pc, #60]	@ (800bbd8 <UARTEx_SetNbDataToProcess+0x98>)
 800bb9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bba8:	7bfb      	ldrb	r3, [r7, #15]
 800bbaa:	7b7a      	ldrb	r2, [r7, #13]
 800bbac:	4909      	ldr	r1, [pc, #36]	@ (800bbd4 <UARTEx_SetNbDataToProcess+0x94>)
 800bbae:	5c8a      	ldrb	r2, [r1, r2]
 800bbb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bbb4:	7b7a      	ldrb	r2, [r7, #13]
 800bbb6:	4908      	ldr	r1, [pc, #32]	@ (800bbd8 <UARTEx_SetNbDataToProcess+0x98>)
 800bbb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bbba:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbbe:	b29a      	uxth	r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bbc6:	bf00      	nop
 800bbc8:	3714      	adds	r7, #20
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	0800c83c 	.word	0x0800c83c
 800bbd8:	0800c844 	.word	0x0800c844

0800bbdc <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	ed93 7a06 	vldr	s14, [r3, #24]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	edd3 7a07 	vldr	s15, [r3, #28]
 800bbf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	edd3 7a08 	vldr	s15, [r3, #32]
 800bbfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	edd3 7a06 	vldr	s15, [r3, #24]
 800bc0c:	eeb1 7a67 	vneg.f32	s14, s15
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	edd3 7a08 	vldr	s15, [r3, #32]
 800bc16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bc1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6a1a      	ldr	r2, [r3, #32]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d006      	beq.n	800bc40 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	330c      	adds	r3, #12
 800bc36:	220c      	movs	r2, #12
 800bc38:	2100      	movs	r1, #0
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f000 f804 	bl	800bc48 <memset>
  }

}
 800bc40:	bf00      	nop
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <memset>:
 800bc48:	4402      	add	r2, r0
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d100      	bne.n	800bc52 <memset+0xa>
 800bc50:	4770      	bx	lr
 800bc52:	f803 1b01 	strb.w	r1, [r3], #1
 800bc56:	e7f9      	b.n	800bc4c <memset+0x4>

0800bc58 <__errno>:
 800bc58:	4b01      	ldr	r3, [pc, #4]	@ (800bc60 <__errno+0x8>)
 800bc5a:	6818      	ldr	r0, [r3, #0]
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	2000023c 	.word	0x2000023c

0800bc64 <__libc_init_array>:
 800bc64:	b570      	push	{r4, r5, r6, lr}
 800bc66:	4d0d      	ldr	r5, [pc, #52]	@ (800bc9c <__libc_init_array+0x38>)
 800bc68:	4c0d      	ldr	r4, [pc, #52]	@ (800bca0 <__libc_init_array+0x3c>)
 800bc6a:	1b64      	subs	r4, r4, r5
 800bc6c:	10a4      	asrs	r4, r4, #2
 800bc6e:	2600      	movs	r6, #0
 800bc70:	42a6      	cmp	r6, r4
 800bc72:	d109      	bne.n	800bc88 <__libc_init_array+0x24>
 800bc74:	4d0b      	ldr	r5, [pc, #44]	@ (800bca4 <__libc_init_array+0x40>)
 800bc76:	4c0c      	ldr	r4, [pc, #48]	@ (800bca8 <__libc_init_array+0x44>)
 800bc78:	f000 fdbc 	bl	800c7f4 <_init>
 800bc7c:	1b64      	subs	r4, r4, r5
 800bc7e:	10a4      	asrs	r4, r4, #2
 800bc80:	2600      	movs	r6, #0
 800bc82:	42a6      	cmp	r6, r4
 800bc84:	d105      	bne.n	800bc92 <__libc_init_array+0x2e>
 800bc86:	bd70      	pop	{r4, r5, r6, pc}
 800bc88:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc8c:	4798      	blx	r3
 800bc8e:	3601      	adds	r6, #1
 800bc90:	e7ee      	b.n	800bc70 <__libc_init_array+0xc>
 800bc92:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc96:	4798      	blx	r3
 800bc98:	3601      	adds	r6, #1
 800bc9a:	e7f2      	b.n	800bc82 <__libc_init_array+0x1e>
 800bc9c:	0800cc24 	.word	0x0800cc24
 800bca0:	0800cc24 	.word	0x0800cc24
 800bca4:	0800cc24 	.word	0x0800cc24
 800bca8:	0800cc28 	.word	0x0800cc28

0800bcac <memcpy>:
 800bcac:	440a      	add	r2, r1
 800bcae:	4291      	cmp	r1, r2
 800bcb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcb4:	d100      	bne.n	800bcb8 <memcpy+0xc>
 800bcb6:	4770      	bx	lr
 800bcb8:	b510      	push	{r4, lr}
 800bcba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcc2:	4291      	cmp	r1, r2
 800bcc4:	d1f9      	bne.n	800bcba <memcpy+0xe>
 800bcc6:	bd10      	pop	{r4, pc}

0800bcc8 <sqrtf>:
 800bcc8:	b508      	push	{r3, lr}
 800bcca:	ed2d 8b02 	vpush	{d8}
 800bcce:	eeb0 8a40 	vmov.f32	s16, s0
 800bcd2:	f000 f8a1 	bl	800be18 <__ieee754_sqrtf>
 800bcd6:	eeb4 8a48 	vcmp.f32	s16, s16
 800bcda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcde:	d60c      	bvs.n	800bcfa <sqrtf+0x32>
 800bce0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bd00 <sqrtf+0x38>
 800bce4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcec:	d505      	bpl.n	800bcfa <sqrtf+0x32>
 800bcee:	f7ff ffb3 	bl	800bc58 <__errno>
 800bcf2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bcf6:	2321      	movs	r3, #33	@ 0x21
 800bcf8:	6003      	str	r3, [r0, #0]
 800bcfa:	ecbd 8b02 	vpop	{d8}
 800bcfe:	bd08      	pop	{r3, pc}
 800bd00:	00000000 	.word	0x00000000

0800bd04 <cosf>:
 800bd04:	ee10 3a10 	vmov	r3, s0
 800bd08:	b507      	push	{r0, r1, r2, lr}
 800bd0a:	4a1e      	ldr	r2, [pc, #120]	@ (800bd84 <cosf+0x80>)
 800bd0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d806      	bhi.n	800bd22 <cosf+0x1e>
 800bd14:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800bd88 <cosf+0x84>
 800bd18:	b003      	add	sp, #12
 800bd1a:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd1e:	f000 b87f 	b.w	800be20 <__kernel_cosf>
 800bd22:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bd26:	d304      	bcc.n	800bd32 <cosf+0x2e>
 800bd28:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bd2c:	b003      	add	sp, #12
 800bd2e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd32:	4668      	mov	r0, sp
 800bd34:	f000 f914 	bl	800bf60 <__ieee754_rem_pio2f>
 800bd38:	f000 0003 	and.w	r0, r0, #3
 800bd3c:	2801      	cmp	r0, #1
 800bd3e:	d009      	beq.n	800bd54 <cosf+0x50>
 800bd40:	2802      	cmp	r0, #2
 800bd42:	d010      	beq.n	800bd66 <cosf+0x62>
 800bd44:	b9b0      	cbnz	r0, 800bd74 <cosf+0x70>
 800bd46:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd4a:	ed9d 0a00 	vldr	s0, [sp]
 800bd4e:	f000 f867 	bl	800be20 <__kernel_cosf>
 800bd52:	e7eb      	b.n	800bd2c <cosf+0x28>
 800bd54:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd58:	ed9d 0a00 	vldr	s0, [sp]
 800bd5c:	f000 f8b8 	bl	800bed0 <__kernel_sinf>
 800bd60:	eeb1 0a40 	vneg.f32	s0, s0
 800bd64:	e7e2      	b.n	800bd2c <cosf+0x28>
 800bd66:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd6a:	ed9d 0a00 	vldr	s0, [sp]
 800bd6e:	f000 f857 	bl	800be20 <__kernel_cosf>
 800bd72:	e7f5      	b.n	800bd60 <cosf+0x5c>
 800bd74:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd78:	ed9d 0a00 	vldr	s0, [sp]
 800bd7c:	2001      	movs	r0, #1
 800bd7e:	f000 f8a7 	bl	800bed0 <__kernel_sinf>
 800bd82:	e7d3      	b.n	800bd2c <cosf+0x28>
 800bd84:	3f490fd8 	.word	0x3f490fd8
 800bd88:	00000000 	.word	0x00000000

0800bd8c <sinf>:
 800bd8c:	ee10 3a10 	vmov	r3, s0
 800bd90:	b507      	push	{r0, r1, r2, lr}
 800bd92:	4a1f      	ldr	r2, [pc, #124]	@ (800be10 <sinf+0x84>)
 800bd94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d807      	bhi.n	800bdac <sinf+0x20>
 800bd9c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800be14 <sinf+0x88>
 800bda0:	2000      	movs	r0, #0
 800bda2:	b003      	add	sp, #12
 800bda4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bda8:	f000 b892 	b.w	800bed0 <__kernel_sinf>
 800bdac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bdb0:	d304      	bcc.n	800bdbc <sinf+0x30>
 800bdb2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bdb6:	b003      	add	sp, #12
 800bdb8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdbc:	4668      	mov	r0, sp
 800bdbe:	f000 f8cf 	bl	800bf60 <__ieee754_rem_pio2f>
 800bdc2:	f000 0003 	and.w	r0, r0, #3
 800bdc6:	2801      	cmp	r0, #1
 800bdc8:	d00a      	beq.n	800bde0 <sinf+0x54>
 800bdca:	2802      	cmp	r0, #2
 800bdcc:	d00f      	beq.n	800bdee <sinf+0x62>
 800bdce:	b9c0      	cbnz	r0, 800be02 <sinf+0x76>
 800bdd0:	eddd 0a01 	vldr	s1, [sp, #4]
 800bdd4:	ed9d 0a00 	vldr	s0, [sp]
 800bdd8:	2001      	movs	r0, #1
 800bdda:	f000 f879 	bl	800bed0 <__kernel_sinf>
 800bdde:	e7ea      	b.n	800bdb6 <sinf+0x2a>
 800bde0:	eddd 0a01 	vldr	s1, [sp, #4]
 800bde4:	ed9d 0a00 	vldr	s0, [sp]
 800bde8:	f000 f81a 	bl	800be20 <__kernel_cosf>
 800bdec:	e7e3      	b.n	800bdb6 <sinf+0x2a>
 800bdee:	eddd 0a01 	vldr	s1, [sp, #4]
 800bdf2:	ed9d 0a00 	vldr	s0, [sp]
 800bdf6:	2001      	movs	r0, #1
 800bdf8:	f000 f86a 	bl	800bed0 <__kernel_sinf>
 800bdfc:	eeb1 0a40 	vneg.f32	s0, s0
 800be00:	e7d9      	b.n	800bdb6 <sinf+0x2a>
 800be02:	eddd 0a01 	vldr	s1, [sp, #4]
 800be06:	ed9d 0a00 	vldr	s0, [sp]
 800be0a:	f000 f809 	bl	800be20 <__kernel_cosf>
 800be0e:	e7f5      	b.n	800bdfc <sinf+0x70>
 800be10:	3f490fd8 	.word	0x3f490fd8
 800be14:	00000000 	.word	0x00000000

0800be18 <__ieee754_sqrtf>:
 800be18:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800be1c:	4770      	bx	lr
	...

0800be20 <__kernel_cosf>:
 800be20:	ee10 3a10 	vmov	r3, s0
 800be24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be28:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800be2c:	eef0 6a40 	vmov.f32	s13, s0
 800be30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800be34:	d204      	bcs.n	800be40 <__kernel_cosf+0x20>
 800be36:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800be3a:	ee17 2a90 	vmov	r2, s15
 800be3e:	b342      	cbz	r2, 800be92 <__kernel_cosf+0x72>
 800be40:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800be44:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800beb0 <__kernel_cosf+0x90>
 800be48:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800beb4 <__kernel_cosf+0x94>
 800be4c:	4a1a      	ldr	r2, [pc, #104]	@ (800beb8 <__kernel_cosf+0x98>)
 800be4e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800be52:	4293      	cmp	r3, r2
 800be54:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bebc <__kernel_cosf+0x9c>
 800be58:	eee6 7a07 	vfma.f32	s15, s12, s14
 800be5c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800bec0 <__kernel_cosf+0xa0>
 800be60:	eea7 6a87 	vfma.f32	s12, s15, s14
 800be64:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800bec4 <__kernel_cosf+0xa4>
 800be68:	eee6 7a07 	vfma.f32	s15, s12, s14
 800be6c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800bec8 <__kernel_cosf+0xa8>
 800be70:	eea7 6a87 	vfma.f32	s12, s15, s14
 800be74:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800be78:	ee26 6a07 	vmul.f32	s12, s12, s14
 800be7c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800be80:	eee7 0a06 	vfma.f32	s1, s14, s12
 800be84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be88:	d804      	bhi.n	800be94 <__kernel_cosf+0x74>
 800be8a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800be8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800be92:	4770      	bx	lr
 800be94:	4a0d      	ldr	r2, [pc, #52]	@ (800becc <__kernel_cosf+0xac>)
 800be96:	4293      	cmp	r3, r2
 800be98:	bf9a      	itte	ls
 800be9a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800be9e:	ee07 3a10 	vmovls	s14, r3
 800bea2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800bea6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800beaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800beae:	e7ec      	b.n	800be8a <__kernel_cosf+0x6a>
 800beb0:	ad47d74e 	.word	0xad47d74e
 800beb4:	310f74f6 	.word	0x310f74f6
 800beb8:	3e999999 	.word	0x3e999999
 800bebc:	b493f27c 	.word	0xb493f27c
 800bec0:	37d00d01 	.word	0x37d00d01
 800bec4:	bab60b61 	.word	0xbab60b61
 800bec8:	3d2aaaab 	.word	0x3d2aaaab
 800becc:	3f480000 	.word	0x3f480000

0800bed0 <__kernel_sinf>:
 800bed0:	ee10 3a10 	vmov	r3, s0
 800bed4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bed8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bedc:	d204      	bcs.n	800bee8 <__kernel_sinf+0x18>
 800bede:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bee2:	ee17 3a90 	vmov	r3, s15
 800bee6:	b35b      	cbz	r3, 800bf40 <__kernel_sinf+0x70>
 800bee8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800beec:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bf44 <__kernel_sinf+0x74>
 800bef0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800bf48 <__kernel_sinf+0x78>
 800bef4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bef8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800bf4c <__kernel_sinf+0x7c>
 800befc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bf00:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800bf50 <__kernel_sinf+0x80>
 800bf04:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bf08:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800bf54 <__kernel_sinf+0x84>
 800bf0c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bf10:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bf14:	b930      	cbnz	r0, 800bf24 <__kernel_sinf+0x54>
 800bf16:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800bf58 <__kernel_sinf+0x88>
 800bf1a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bf1e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bf22:	4770      	bx	lr
 800bf24:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bf28:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800bf2c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bf30:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bf34:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800bf5c <__kernel_sinf+0x8c>
 800bf38:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bf3c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	2f2ec9d3 	.word	0x2f2ec9d3
 800bf48:	b2d72f34 	.word	0xb2d72f34
 800bf4c:	3638ef1b 	.word	0x3638ef1b
 800bf50:	b9500d01 	.word	0xb9500d01
 800bf54:	3c088889 	.word	0x3c088889
 800bf58:	be2aaaab 	.word	0xbe2aaaab
 800bf5c:	3e2aaaab 	.word	0x3e2aaaab

0800bf60 <__ieee754_rem_pio2f>:
 800bf60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf62:	ee10 6a10 	vmov	r6, s0
 800bf66:	4b88      	ldr	r3, [pc, #544]	@ (800c188 <__ieee754_rem_pio2f+0x228>)
 800bf68:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800bf6c:	429d      	cmp	r5, r3
 800bf6e:	b087      	sub	sp, #28
 800bf70:	4604      	mov	r4, r0
 800bf72:	d805      	bhi.n	800bf80 <__ieee754_rem_pio2f+0x20>
 800bf74:	2300      	movs	r3, #0
 800bf76:	ed80 0a00 	vstr	s0, [r0]
 800bf7a:	6043      	str	r3, [r0, #4]
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	e022      	b.n	800bfc6 <__ieee754_rem_pio2f+0x66>
 800bf80:	4b82      	ldr	r3, [pc, #520]	@ (800c18c <__ieee754_rem_pio2f+0x22c>)
 800bf82:	429d      	cmp	r5, r3
 800bf84:	d83a      	bhi.n	800bffc <__ieee754_rem_pio2f+0x9c>
 800bf86:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bf8a:	2e00      	cmp	r6, #0
 800bf8c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800c190 <__ieee754_rem_pio2f+0x230>
 800bf90:	4a80      	ldr	r2, [pc, #512]	@ (800c194 <__ieee754_rem_pio2f+0x234>)
 800bf92:	f023 030f 	bic.w	r3, r3, #15
 800bf96:	dd18      	ble.n	800bfca <__ieee754_rem_pio2f+0x6a>
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800bf9e:	bf09      	itett	eq
 800bfa0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800c198 <__ieee754_rem_pio2f+0x238>
 800bfa4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800c19c <__ieee754_rem_pio2f+0x23c>
 800bfa8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800c1a0 <__ieee754_rem_pio2f+0x240>
 800bfac:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800bfb0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800bfb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bfb8:	ed80 7a00 	vstr	s14, [r0]
 800bfbc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bfc0:	edc0 7a01 	vstr	s15, [r0, #4]
 800bfc4:	2001      	movs	r0, #1
 800bfc6:	b007      	add	sp, #28
 800bfc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	ee70 7a07 	vadd.f32	s15, s0, s14
 800bfd0:	bf09      	itett	eq
 800bfd2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800c198 <__ieee754_rem_pio2f+0x238>
 800bfd6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800c19c <__ieee754_rem_pio2f+0x23c>
 800bfda:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800c1a0 <__ieee754_rem_pio2f+0x240>
 800bfde:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800bfe2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bfe6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bfea:	ed80 7a00 	vstr	s14, [r0]
 800bfee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bff2:	edc0 7a01 	vstr	s15, [r0, #4]
 800bff6:	f04f 30ff 	mov.w	r0, #4294967295
 800bffa:	e7e4      	b.n	800bfc6 <__ieee754_rem_pio2f+0x66>
 800bffc:	4b69      	ldr	r3, [pc, #420]	@ (800c1a4 <__ieee754_rem_pio2f+0x244>)
 800bffe:	429d      	cmp	r5, r3
 800c000:	d873      	bhi.n	800c0ea <__ieee754_rem_pio2f+0x18a>
 800c002:	f000 f8dd 	bl	800c1c0 <fabsf>
 800c006:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c1a8 <__ieee754_rem_pio2f+0x248>
 800c00a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c00e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c012:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c01a:	ee17 0a90 	vmov	r0, s15
 800c01e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c190 <__ieee754_rem_pio2f+0x230>
 800c022:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c026:	281f      	cmp	r0, #31
 800c028:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c19c <__ieee754_rem_pio2f+0x23c>
 800c02c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c030:	eeb1 6a47 	vneg.f32	s12, s14
 800c034:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c038:	ee16 1a90 	vmov	r1, s13
 800c03c:	dc09      	bgt.n	800c052 <__ieee754_rem_pio2f+0xf2>
 800c03e:	4a5b      	ldr	r2, [pc, #364]	@ (800c1ac <__ieee754_rem_pio2f+0x24c>)
 800c040:	1e47      	subs	r7, r0, #1
 800c042:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c046:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800c04a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c04e:	4293      	cmp	r3, r2
 800c050:	d107      	bne.n	800c062 <__ieee754_rem_pio2f+0x102>
 800c052:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800c056:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800c05a:	2a08      	cmp	r2, #8
 800c05c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c060:	dc14      	bgt.n	800c08c <__ieee754_rem_pio2f+0x12c>
 800c062:	6021      	str	r1, [r4, #0]
 800c064:	ed94 7a00 	vldr	s14, [r4]
 800c068:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c06c:	2e00      	cmp	r6, #0
 800c06e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c072:	ed84 0a01 	vstr	s0, [r4, #4]
 800c076:	daa6      	bge.n	800bfc6 <__ieee754_rem_pio2f+0x66>
 800c078:	eeb1 7a47 	vneg.f32	s14, s14
 800c07c:	eeb1 0a40 	vneg.f32	s0, s0
 800c080:	ed84 7a00 	vstr	s14, [r4]
 800c084:	ed84 0a01 	vstr	s0, [r4, #4]
 800c088:	4240      	negs	r0, r0
 800c08a:	e79c      	b.n	800bfc6 <__ieee754_rem_pio2f+0x66>
 800c08c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800c198 <__ieee754_rem_pio2f+0x238>
 800c090:	eef0 6a40 	vmov.f32	s13, s0
 800c094:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c098:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c09c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c0a0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c1a0 <__ieee754_rem_pio2f+0x240>
 800c0a4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c0a8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c0ac:	ee15 2a90 	vmov	r2, s11
 800c0b0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c0b4:	1a5b      	subs	r3, r3, r1
 800c0b6:	2b19      	cmp	r3, #25
 800c0b8:	dc04      	bgt.n	800c0c4 <__ieee754_rem_pio2f+0x164>
 800c0ba:	edc4 5a00 	vstr	s11, [r4]
 800c0be:	eeb0 0a66 	vmov.f32	s0, s13
 800c0c2:	e7cf      	b.n	800c064 <__ieee754_rem_pio2f+0x104>
 800c0c4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c1b0 <__ieee754_rem_pio2f+0x250>
 800c0c8:	eeb0 0a66 	vmov.f32	s0, s13
 800c0cc:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c0d0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c0d4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800c1b4 <__ieee754_rem_pio2f+0x254>
 800c0d8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c0dc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c0e0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c0e4:	ed84 7a00 	vstr	s14, [r4]
 800c0e8:	e7bc      	b.n	800c064 <__ieee754_rem_pio2f+0x104>
 800c0ea:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800c0ee:	d306      	bcc.n	800c0fe <__ieee754_rem_pio2f+0x19e>
 800c0f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c0f4:	edc0 7a01 	vstr	s15, [r0, #4]
 800c0f8:	edc0 7a00 	vstr	s15, [r0]
 800c0fc:	e73e      	b.n	800bf7c <__ieee754_rem_pio2f+0x1c>
 800c0fe:	15ea      	asrs	r2, r5, #23
 800c100:	3a86      	subs	r2, #134	@ 0x86
 800c102:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c106:	ee07 3a90 	vmov	s15, r3
 800c10a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c10e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800c1b8 <__ieee754_rem_pio2f+0x258>
 800c112:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c116:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c11a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c11e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c122:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c126:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c12a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c12e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c132:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c136:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13e:	edcd 7a05 	vstr	s15, [sp, #20]
 800c142:	d11e      	bne.n	800c182 <__ieee754_rem_pio2f+0x222>
 800c144:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c14c:	bf0c      	ite	eq
 800c14e:	2301      	moveq	r3, #1
 800c150:	2302      	movne	r3, #2
 800c152:	491a      	ldr	r1, [pc, #104]	@ (800c1bc <__ieee754_rem_pio2f+0x25c>)
 800c154:	9101      	str	r1, [sp, #4]
 800c156:	2102      	movs	r1, #2
 800c158:	9100      	str	r1, [sp, #0]
 800c15a:	a803      	add	r0, sp, #12
 800c15c:	4621      	mov	r1, r4
 800c15e:	f000 f89d 	bl	800c29c <__kernel_rem_pio2f>
 800c162:	2e00      	cmp	r6, #0
 800c164:	f6bf af2f 	bge.w	800bfc6 <__ieee754_rem_pio2f+0x66>
 800c168:	edd4 7a00 	vldr	s15, [r4]
 800c16c:	eef1 7a67 	vneg.f32	s15, s15
 800c170:	edc4 7a00 	vstr	s15, [r4]
 800c174:	edd4 7a01 	vldr	s15, [r4, #4]
 800c178:	eef1 7a67 	vneg.f32	s15, s15
 800c17c:	edc4 7a01 	vstr	s15, [r4, #4]
 800c180:	e782      	b.n	800c088 <__ieee754_rem_pio2f+0x128>
 800c182:	2303      	movs	r3, #3
 800c184:	e7e5      	b.n	800c152 <__ieee754_rem_pio2f+0x1f2>
 800c186:	bf00      	nop
 800c188:	3f490fd8 	.word	0x3f490fd8
 800c18c:	4016cbe3 	.word	0x4016cbe3
 800c190:	3fc90f80 	.word	0x3fc90f80
 800c194:	3fc90fd0 	.word	0x3fc90fd0
 800c198:	37354400 	.word	0x37354400
 800c19c:	37354443 	.word	0x37354443
 800c1a0:	2e85a308 	.word	0x2e85a308
 800c1a4:	43490f80 	.word	0x43490f80
 800c1a8:	3f22f984 	.word	0x3f22f984
 800c1ac:	0800c84c 	.word	0x0800c84c
 800c1b0:	2e85a300 	.word	0x2e85a300
 800c1b4:	248d3132 	.word	0x248d3132
 800c1b8:	43800000 	.word	0x43800000
 800c1bc:	0800c8cc 	.word	0x0800c8cc

0800c1c0 <fabsf>:
 800c1c0:	ee10 3a10 	vmov	r3, s0
 800c1c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c1c8:	ee00 3a10 	vmov	s0, r3
 800c1cc:	4770      	bx	lr
	...

0800c1d0 <scalbnf>:
 800c1d0:	ee10 3a10 	vmov	r3, s0
 800c1d4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c1d8:	d02b      	beq.n	800c232 <scalbnf+0x62>
 800c1da:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c1de:	d302      	bcc.n	800c1e6 <scalbnf+0x16>
 800c1e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c1e4:	4770      	bx	lr
 800c1e6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c1ea:	d123      	bne.n	800c234 <scalbnf+0x64>
 800c1ec:	4b24      	ldr	r3, [pc, #144]	@ (800c280 <scalbnf+0xb0>)
 800c1ee:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c284 <scalbnf+0xb4>
 800c1f2:	4298      	cmp	r0, r3
 800c1f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c1f8:	db17      	blt.n	800c22a <scalbnf+0x5a>
 800c1fa:	ee10 3a10 	vmov	r3, s0
 800c1fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c202:	3a19      	subs	r2, #25
 800c204:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c208:	4288      	cmp	r0, r1
 800c20a:	dd15      	ble.n	800c238 <scalbnf+0x68>
 800c20c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c288 <scalbnf+0xb8>
 800c210:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c28c <scalbnf+0xbc>
 800c214:	ee10 3a10 	vmov	r3, s0
 800c218:	eeb0 7a67 	vmov.f32	s14, s15
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	bfb8      	it	lt
 800c220:	eef0 7a66 	vmovlt.f32	s15, s13
 800c224:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c228:	4770      	bx	lr
 800c22a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c290 <scalbnf+0xc0>
 800c22e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c232:	4770      	bx	lr
 800c234:	0dd2      	lsrs	r2, r2, #23
 800c236:	e7e5      	b.n	800c204 <scalbnf+0x34>
 800c238:	4410      	add	r0, r2
 800c23a:	28fe      	cmp	r0, #254	@ 0xfe
 800c23c:	dce6      	bgt.n	800c20c <scalbnf+0x3c>
 800c23e:	2800      	cmp	r0, #0
 800c240:	dd06      	ble.n	800c250 <scalbnf+0x80>
 800c242:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c246:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c24a:	ee00 3a10 	vmov	s0, r3
 800c24e:	4770      	bx	lr
 800c250:	f110 0f16 	cmn.w	r0, #22
 800c254:	da09      	bge.n	800c26a <scalbnf+0x9a>
 800c256:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c290 <scalbnf+0xc0>
 800c25a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c294 <scalbnf+0xc4>
 800c25e:	ee10 3a10 	vmov	r3, s0
 800c262:	eeb0 7a67 	vmov.f32	s14, s15
 800c266:	2b00      	cmp	r3, #0
 800c268:	e7d9      	b.n	800c21e <scalbnf+0x4e>
 800c26a:	3019      	adds	r0, #25
 800c26c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c270:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c274:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c298 <scalbnf+0xc8>
 800c278:	ee07 3a90 	vmov	s15, r3
 800c27c:	e7d7      	b.n	800c22e <scalbnf+0x5e>
 800c27e:	bf00      	nop
 800c280:	ffff3cb0 	.word	0xffff3cb0
 800c284:	4c000000 	.word	0x4c000000
 800c288:	7149f2ca 	.word	0x7149f2ca
 800c28c:	f149f2ca 	.word	0xf149f2ca
 800c290:	0da24260 	.word	0x0da24260
 800c294:	8da24260 	.word	0x8da24260
 800c298:	33000000 	.word	0x33000000

0800c29c <__kernel_rem_pio2f>:
 800c29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a0:	ed2d 8b04 	vpush	{d8-d9}
 800c2a4:	b0d9      	sub	sp, #356	@ 0x164
 800c2a6:	4690      	mov	r8, r2
 800c2a8:	9001      	str	r0, [sp, #4]
 800c2aa:	4ab6      	ldr	r2, [pc, #728]	@ (800c584 <__kernel_rem_pio2f+0x2e8>)
 800c2ac:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800c2ae:	f118 0f04 	cmn.w	r8, #4
 800c2b2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800c2b6:	460f      	mov	r7, r1
 800c2b8:	f103 3bff 	add.w	fp, r3, #4294967295
 800c2bc:	db26      	blt.n	800c30c <__kernel_rem_pio2f+0x70>
 800c2be:	f1b8 0203 	subs.w	r2, r8, #3
 800c2c2:	bf48      	it	mi
 800c2c4:	f108 0204 	addmi.w	r2, r8, #4
 800c2c8:	10d2      	asrs	r2, r2, #3
 800c2ca:	1c55      	adds	r5, r2, #1
 800c2cc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c2ce:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800c594 <__kernel_rem_pio2f+0x2f8>
 800c2d2:	00e8      	lsls	r0, r5, #3
 800c2d4:	eba2 060b 	sub.w	r6, r2, fp
 800c2d8:	9002      	str	r0, [sp, #8]
 800c2da:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800c2de:	eb0a 0c0b 	add.w	ip, sl, fp
 800c2e2:	ac1c      	add	r4, sp, #112	@ 0x70
 800c2e4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	4560      	cmp	r0, ip
 800c2ec:	dd10      	ble.n	800c310 <__kernel_rem_pio2f+0x74>
 800c2ee:	a91c      	add	r1, sp, #112	@ 0x70
 800c2f0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c2f4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800c2f8:	2600      	movs	r6, #0
 800c2fa:	4556      	cmp	r6, sl
 800c2fc:	dc24      	bgt.n	800c348 <__kernel_rem_pio2f+0xac>
 800c2fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c302:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800c594 <__kernel_rem_pio2f+0x2f8>
 800c306:	4684      	mov	ip, r0
 800c308:	2400      	movs	r4, #0
 800c30a:	e016      	b.n	800c33a <__kernel_rem_pio2f+0x9e>
 800c30c:	2200      	movs	r2, #0
 800c30e:	e7dc      	b.n	800c2ca <__kernel_rem_pio2f+0x2e>
 800c310:	42c6      	cmn	r6, r0
 800c312:	bf5d      	ittte	pl
 800c314:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800c318:	ee07 1a90 	vmovpl	s15, r1
 800c31c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c320:	eef0 7a47 	vmovmi.f32	s15, s14
 800c324:	ece4 7a01 	vstmia	r4!, {s15}
 800c328:	3001      	adds	r0, #1
 800c32a:	e7de      	b.n	800c2ea <__kernel_rem_pio2f+0x4e>
 800c32c:	ecfe 6a01 	vldmia	lr!, {s13}
 800c330:	ed3c 7a01 	vldmdb	ip!, {s14}
 800c334:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c338:	3401      	adds	r4, #1
 800c33a:	455c      	cmp	r4, fp
 800c33c:	ddf6      	ble.n	800c32c <__kernel_rem_pio2f+0x90>
 800c33e:	ece9 7a01 	vstmia	r9!, {s15}
 800c342:	3601      	adds	r6, #1
 800c344:	3004      	adds	r0, #4
 800c346:	e7d8      	b.n	800c2fa <__kernel_rem_pio2f+0x5e>
 800c348:	a908      	add	r1, sp, #32
 800c34a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c34e:	9104      	str	r1, [sp, #16]
 800c350:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c352:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800c590 <__kernel_rem_pio2f+0x2f4>
 800c356:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800c58c <__kernel_rem_pio2f+0x2f0>
 800c35a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c35e:	9203      	str	r2, [sp, #12]
 800c360:	4654      	mov	r4, sl
 800c362:	00a2      	lsls	r2, r4, #2
 800c364:	9205      	str	r2, [sp, #20]
 800c366:	aa58      	add	r2, sp, #352	@ 0x160
 800c368:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c36c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c370:	a944      	add	r1, sp, #272	@ 0x110
 800c372:	aa08      	add	r2, sp, #32
 800c374:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c378:	4694      	mov	ip, r2
 800c37a:	4626      	mov	r6, r4
 800c37c:	2e00      	cmp	r6, #0
 800c37e:	dc4c      	bgt.n	800c41a <__kernel_rem_pio2f+0x17e>
 800c380:	4628      	mov	r0, r5
 800c382:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c386:	f7ff ff23 	bl	800c1d0 <scalbnf>
 800c38a:	eeb0 8a40 	vmov.f32	s16, s0
 800c38e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c392:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c396:	f000 f9e9 	bl	800c76c <floorf>
 800c39a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c39e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c3a2:	2d00      	cmp	r5, #0
 800c3a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c3a8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c3ac:	ee17 9a90 	vmov	r9, s15
 800c3b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3b4:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c3b8:	dd41      	ble.n	800c43e <__kernel_rem_pio2f+0x1a2>
 800c3ba:	f104 3cff 	add.w	ip, r4, #4294967295
 800c3be:	a908      	add	r1, sp, #32
 800c3c0:	f1c5 0e08 	rsb	lr, r5, #8
 800c3c4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c3c8:	fa46 f00e 	asr.w	r0, r6, lr
 800c3cc:	4481      	add	r9, r0
 800c3ce:	fa00 f00e 	lsl.w	r0, r0, lr
 800c3d2:	1a36      	subs	r6, r6, r0
 800c3d4:	f1c5 0007 	rsb	r0, r5, #7
 800c3d8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c3dc:	4106      	asrs	r6, r0
 800c3de:	2e00      	cmp	r6, #0
 800c3e0:	dd3c      	ble.n	800c45c <__kernel_rem_pio2f+0x1c0>
 800c3e2:	f04f 0e00 	mov.w	lr, #0
 800c3e6:	f109 0901 	add.w	r9, r9, #1
 800c3ea:	4670      	mov	r0, lr
 800c3ec:	4574      	cmp	r4, lr
 800c3ee:	dc68      	bgt.n	800c4c2 <__kernel_rem_pio2f+0x226>
 800c3f0:	2d00      	cmp	r5, #0
 800c3f2:	dd03      	ble.n	800c3fc <__kernel_rem_pio2f+0x160>
 800c3f4:	2d01      	cmp	r5, #1
 800c3f6:	d074      	beq.n	800c4e2 <__kernel_rem_pio2f+0x246>
 800c3f8:	2d02      	cmp	r5, #2
 800c3fa:	d07d      	beq.n	800c4f8 <__kernel_rem_pio2f+0x25c>
 800c3fc:	2e02      	cmp	r6, #2
 800c3fe:	d12d      	bne.n	800c45c <__kernel_rem_pio2f+0x1c0>
 800c400:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c404:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c408:	b340      	cbz	r0, 800c45c <__kernel_rem_pio2f+0x1c0>
 800c40a:	4628      	mov	r0, r5
 800c40c:	9306      	str	r3, [sp, #24]
 800c40e:	f7ff fedf 	bl	800c1d0 <scalbnf>
 800c412:	9b06      	ldr	r3, [sp, #24]
 800c414:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c418:	e020      	b.n	800c45c <__kernel_rem_pio2f+0x1c0>
 800c41a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c41e:	3e01      	subs	r6, #1
 800c420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c428:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c42c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c430:	ecac 0a01 	vstmia	ip!, {s0}
 800c434:	ed30 0a01 	vldmdb	r0!, {s0}
 800c438:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c43c:	e79e      	b.n	800c37c <__kernel_rem_pio2f+0xe0>
 800c43e:	d105      	bne.n	800c44c <__kernel_rem_pio2f+0x1b0>
 800c440:	1e60      	subs	r0, r4, #1
 800c442:	a908      	add	r1, sp, #32
 800c444:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c448:	11f6      	asrs	r6, r6, #7
 800c44a:	e7c8      	b.n	800c3de <__kernel_rem_pio2f+0x142>
 800c44c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c450:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c458:	da31      	bge.n	800c4be <__kernel_rem_pio2f+0x222>
 800c45a:	2600      	movs	r6, #0
 800c45c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c464:	f040 8098 	bne.w	800c598 <__kernel_rem_pio2f+0x2fc>
 800c468:	1e60      	subs	r0, r4, #1
 800c46a:	2200      	movs	r2, #0
 800c46c:	4550      	cmp	r0, sl
 800c46e:	da4b      	bge.n	800c508 <__kernel_rem_pio2f+0x26c>
 800c470:	2a00      	cmp	r2, #0
 800c472:	d065      	beq.n	800c540 <__kernel_rem_pio2f+0x2a4>
 800c474:	3c01      	subs	r4, #1
 800c476:	ab08      	add	r3, sp, #32
 800c478:	3d08      	subs	r5, #8
 800c47a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d0f8      	beq.n	800c474 <__kernel_rem_pio2f+0x1d8>
 800c482:	4628      	mov	r0, r5
 800c484:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c488:	f7ff fea2 	bl	800c1d0 <scalbnf>
 800c48c:	1c63      	adds	r3, r4, #1
 800c48e:	aa44      	add	r2, sp, #272	@ 0x110
 800c490:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c590 <__kernel_rem_pio2f+0x2f4>
 800c494:	0099      	lsls	r1, r3, #2
 800c496:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c49a:	4623      	mov	r3, r4
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f280 80a9 	bge.w	800c5f4 <__kernel_rem_pio2f+0x358>
 800c4a2:	4623      	mov	r3, r4
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f2c0 80c7 	blt.w	800c638 <__kernel_rem_pio2f+0x39c>
 800c4aa:	aa44      	add	r2, sp, #272	@ 0x110
 800c4ac:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c4b0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c588 <__kernel_rem_pio2f+0x2ec>
 800c4b4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c594 <__kernel_rem_pio2f+0x2f8>
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	1ae2      	subs	r2, r4, r3
 800c4bc:	e0b1      	b.n	800c622 <__kernel_rem_pio2f+0x386>
 800c4be:	2602      	movs	r6, #2
 800c4c0:	e78f      	b.n	800c3e2 <__kernel_rem_pio2f+0x146>
 800c4c2:	f852 1b04 	ldr.w	r1, [r2], #4
 800c4c6:	b948      	cbnz	r0, 800c4dc <__kernel_rem_pio2f+0x240>
 800c4c8:	b121      	cbz	r1, 800c4d4 <__kernel_rem_pio2f+0x238>
 800c4ca:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800c4ce:	f842 1c04 	str.w	r1, [r2, #-4]
 800c4d2:	2101      	movs	r1, #1
 800c4d4:	f10e 0e01 	add.w	lr, lr, #1
 800c4d8:	4608      	mov	r0, r1
 800c4da:	e787      	b.n	800c3ec <__kernel_rem_pio2f+0x150>
 800c4dc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800c4e0:	e7f5      	b.n	800c4ce <__kernel_rem_pio2f+0x232>
 800c4e2:	f104 3cff 	add.w	ip, r4, #4294967295
 800c4e6:	aa08      	add	r2, sp, #32
 800c4e8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c4ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c4f0:	a908      	add	r1, sp, #32
 800c4f2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c4f6:	e781      	b.n	800c3fc <__kernel_rem_pio2f+0x160>
 800c4f8:	f104 3cff 	add.w	ip, r4, #4294967295
 800c4fc:	aa08      	add	r2, sp, #32
 800c4fe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c502:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c506:	e7f3      	b.n	800c4f0 <__kernel_rem_pio2f+0x254>
 800c508:	a908      	add	r1, sp, #32
 800c50a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c50e:	3801      	subs	r0, #1
 800c510:	430a      	orrs	r2, r1
 800c512:	e7ab      	b.n	800c46c <__kernel_rem_pio2f+0x1d0>
 800c514:	3201      	adds	r2, #1
 800c516:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800c51a:	2e00      	cmp	r6, #0
 800c51c:	d0fa      	beq.n	800c514 <__kernel_rem_pio2f+0x278>
 800c51e:	9905      	ldr	r1, [sp, #20]
 800c520:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800c524:	eb0d 0001 	add.w	r0, sp, r1
 800c528:	18e6      	adds	r6, r4, r3
 800c52a:	a91c      	add	r1, sp, #112	@ 0x70
 800c52c:	f104 0c01 	add.w	ip, r4, #1
 800c530:	384c      	subs	r0, #76	@ 0x4c
 800c532:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800c536:	4422      	add	r2, r4
 800c538:	4562      	cmp	r2, ip
 800c53a:	da04      	bge.n	800c546 <__kernel_rem_pio2f+0x2aa>
 800c53c:	4614      	mov	r4, r2
 800c53e:	e710      	b.n	800c362 <__kernel_rem_pio2f+0xc6>
 800c540:	9804      	ldr	r0, [sp, #16]
 800c542:	2201      	movs	r2, #1
 800c544:	e7e7      	b.n	800c516 <__kernel_rem_pio2f+0x27a>
 800c546:	9903      	ldr	r1, [sp, #12]
 800c548:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c54c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800c550:	9105      	str	r1, [sp, #20]
 800c552:	ee07 1a90 	vmov	s15, r1
 800c556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c55a:	2400      	movs	r4, #0
 800c55c:	ece6 7a01 	vstmia	r6!, {s15}
 800c560:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c594 <__kernel_rem_pio2f+0x2f8>
 800c564:	46b1      	mov	r9, r6
 800c566:	455c      	cmp	r4, fp
 800c568:	dd04      	ble.n	800c574 <__kernel_rem_pio2f+0x2d8>
 800c56a:	ece0 7a01 	vstmia	r0!, {s15}
 800c56e:	f10c 0c01 	add.w	ip, ip, #1
 800c572:	e7e1      	b.n	800c538 <__kernel_rem_pio2f+0x29c>
 800c574:	ecfe 6a01 	vldmia	lr!, {s13}
 800c578:	ed39 7a01 	vldmdb	r9!, {s14}
 800c57c:	3401      	adds	r4, #1
 800c57e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c582:	e7f0      	b.n	800c566 <__kernel_rem_pio2f+0x2ca>
 800c584:	0800cc10 	.word	0x0800cc10
 800c588:	0800cbe4 	.word	0x0800cbe4
 800c58c:	43800000 	.word	0x43800000
 800c590:	3b800000 	.word	0x3b800000
 800c594:	00000000 	.word	0x00000000
 800c598:	9b02      	ldr	r3, [sp, #8]
 800c59a:	eeb0 0a48 	vmov.f32	s0, s16
 800c59e:	eba3 0008 	sub.w	r0, r3, r8
 800c5a2:	f7ff fe15 	bl	800c1d0 <scalbnf>
 800c5a6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c58c <__kernel_rem_pio2f+0x2f0>
 800c5aa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b2:	db19      	blt.n	800c5e8 <__kernel_rem_pio2f+0x34c>
 800c5b4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c590 <__kernel_rem_pio2f+0x2f4>
 800c5b8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c5bc:	aa08      	add	r2, sp, #32
 800c5be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c5c2:	3508      	adds	r5, #8
 800c5c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5c8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c5cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c5d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c5d4:	ee10 3a10 	vmov	r3, s0
 800c5d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c5dc:	ee17 3a90 	vmov	r3, s15
 800c5e0:	3401      	adds	r4, #1
 800c5e2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c5e6:	e74c      	b.n	800c482 <__kernel_rem_pio2f+0x1e6>
 800c5e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c5ec:	aa08      	add	r2, sp, #32
 800c5ee:	ee10 3a10 	vmov	r3, s0
 800c5f2:	e7f6      	b.n	800c5e2 <__kernel_rem_pio2f+0x346>
 800c5f4:	a808      	add	r0, sp, #32
 800c5f6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c5fa:	9001      	str	r0, [sp, #4]
 800c5fc:	ee07 0a90 	vmov	s15, r0
 800c600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c604:	3b01      	subs	r3, #1
 800c606:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c60a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c60e:	ed62 7a01 	vstmdb	r2!, {s15}
 800c612:	e743      	b.n	800c49c <__kernel_rem_pio2f+0x200>
 800c614:	ecfc 6a01 	vldmia	ip!, {s13}
 800c618:	ecb5 7a01 	vldmia	r5!, {s14}
 800c61c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c620:	3001      	adds	r0, #1
 800c622:	4550      	cmp	r0, sl
 800c624:	dc01      	bgt.n	800c62a <__kernel_rem_pio2f+0x38e>
 800c626:	4290      	cmp	r0, r2
 800c628:	ddf4      	ble.n	800c614 <__kernel_rem_pio2f+0x378>
 800c62a:	a858      	add	r0, sp, #352	@ 0x160
 800c62c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c630:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c634:	3b01      	subs	r3, #1
 800c636:	e735      	b.n	800c4a4 <__kernel_rem_pio2f+0x208>
 800c638:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	dc09      	bgt.n	800c652 <__kernel_rem_pio2f+0x3b6>
 800c63e:	2b00      	cmp	r3, #0
 800c640:	dc27      	bgt.n	800c692 <__kernel_rem_pio2f+0x3f6>
 800c642:	d040      	beq.n	800c6c6 <__kernel_rem_pio2f+0x42a>
 800c644:	f009 0007 	and.w	r0, r9, #7
 800c648:	b059      	add	sp, #356	@ 0x164
 800c64a:	ecbd 8b04 	vpop	{d8-d9}
 800c64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c652:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c654:	2b03      	cmp	r3, #3
 800c656:	d1f5      	bne.n	800c644 <__kernel_rem_pio2f+0x3a8>
 800c658:	aa30      	add	r2, sp, #192	@ 0xc0
 800c65a:	1f0b      	subs	r3, r1, #4
 800c65c:	4413      	add	r3, r2
 800c65e:	461a      	mov	r2, r3
 800c660:	4620      	mov	r0, r4
 800c662:	2800      	cmp	r0, #0
 800c664:	dc50      	bgt.n	800c708 <__kernel_rem_pio2f+0x46c>
 800c666:	4622      	mov	r2, r4
 800c668:	2a01      	cmp	r2, #1
 800c66a:	dc5d      	bgt.n	800c728 <__kernel_rem_pio2f+0x48c>
 800c66c:	ab30      	add	r3, sp, #192	@ 0xc0
 800c66e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800c594 <__kernel_rem_pio2f+0x2f8>
 800c672:	440b      	add	r3, r1
 800c674:	2c01      	cmp	r4, #1
 800c676:	dc67      	bgt.n	800c748 <__kernel_rem_pio2f+0x4ac>
 800c678:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c67c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c680:	2e00      	cmp	r6, #0
 800c682:	d167      	bne.n	800c754 <__kernel_rem_pio2f+0x4b8>
 800c684:	edc7 6a00 	vstr	s13, [r7]
 800c688:	ed87 7a01 	vstr	s14, [r7, #4]
 800c68c:	edc7 7a02 	vstr	s15, [r7, #8]
 800c690:	e7d8      	b.n	800c644 <__kernel_rem_pio2f+0x3a8>
 800c692:	ab30      	add	r3, sp, #192	@ 0xc0
 800c694:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800c594 <__kernel_rem_pio2f+0x2f8>
 800c698:	440b      	add	r3, r1
 800c69a:	4622      	mov	r2, r4
 800c69c:	2a00      	cmp	r2, #0
 800c69e:	da24      	bge.n	800c6ea <__kernel_rem_pio2f+0x44e>
 800c6a0:	b34e      	cbz	r6, 800c6f6 <__kernel_rem_pio2f+0x45a>
 800c6a2:	eef1 7a47 	vneg.f32	s15, s14
 800c6a6:	edc7 7a00 	vstr	s15, [r7]
 800c6aa:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c6ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6b2:	aa31      	add	r2, sp, #196	@ 0xc4
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	429c      	cmp	r4, r3
 800c6b8:	da20      	bge.n	800c6fc <__kernel_rem_pio2f+0x460>
 800c6ba:	b10e      	cbz	r6, 800c6c0 <__kernel_rem_pio2f+0x424>
 800c6bc:	eef1 7a67 	vneg.f32	s15, s15
 800c6c0:	edc7 7a01 	vstr	s15, [r7, #4]
 800c6c4:	e7be      	b.n	800c644 <__kernel_rem_pio2f+0x3a8>
 800c6c6:	ab30      	add	r3, sp, #192	@ 0xc0
 800c6c8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800c594 <__kernel_rem_pio2f+0x2f8>
 800c6cc:	440b      	add	r3, r1
 800c6ce:	2c00      	cmp	r4, #0
 800c6d0:	da05      	bge.n	800c6de <__kernel_rem_pio2f+0x442>
 800c6d2:	b10e      	cbz	r6, 800c6d8 <__kernel_rem_pio2f+0x43c>
 800c6d4:	eef1 7a67 	vneg.f32	s15, s15
 800c6d8:	edc7 7a00 	vstr	s15, [r7]
 800c6dc:	e7b2      	b.n	800c644 <__kernel_rem_pio2f+0x3a8>
 800c6de:	ed33 7a01 	vldmdb	r3!, {s14}
 800c6e2:	3c01      	subs	r4, #1
 800c6e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6e8:	e7f1      	b.n	800c6ce <__kernel_rem_pio2f+0x432>
 800c6ea:	ed73 7a01 	vldmdb	r3!, {s15}
 800c6ee:	3a01      	subs	r2, #1
 800c6f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c6f4:	e7d2      	b.n	800c69c <__kernel_rem_pio2f+0x400>
 800c6f6:	eef0 7a47 	vmov.f32	s15, s14
 800c6fa:	e7d4      	b.n	800c6a6 <__kernel_rem_pio2f+0x40a>
 800c6fc:	ecb2 7a01 	vldmia	r2!, {s14}
 800c700:	3301      	adds	r3, #1
 800c702:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c706:	e7d6      	b.n	800c6b6 <__kernel_rem_pio2f+0x41a>
 800c708:	ed72 7a01 	vldmdb	r2!, {s15}
 800c70c:	edd2 6a01 	vldr	s13, [r2, #4]
 800c710:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c714:	3801      	subs	r0, #1
 800c716:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c71a:	ed82 7a00 	vstr	s14, [r2]
 800c71e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c722:	edc2 7a01 	vstr	s15, [r2, #4]
 800c726:	e79c      	b.n	800c662 <__kernel_rem_pio2f+0x3c6>
 800c728:	ed73 7a01 	vldmdb	r3!, {s15}
 800c72c:	edd3 6a01 	vldr	s13, [r3, #4]
 800c730:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c734:	3a01      	subs	r2, #1
 800c736:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c73a:	ed83 7a00 	vstr	s14, [r3]
 800c73e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c742:	edc3 7a01 	vstr	s15, [r3, #4]
 800c746:	e78f      	b.n	800c668 <__kernel_rem_pio2f+0x3cc>
 800c748:	ed33 7a01 	vldmdb	r3!, {s14}
 800c74c:	3c01      	subs	r4, #1
 800c74e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c752:	e78f      	b.n	800c674 <__kernel_rem_pio2f+0x3d8>
 800c754:	eef1 6a66 	vneg.f32	s13, s13
 800c758:	eeb1 7a47 	vneg.f32	s14, s14
 800c75c:	edc7 6a00 	vstr	s13, [r7]
 800c760:	ed87 7a01 	vstr	s14, [r7, #4]
 800c764:	eef1 7a67 	vneg.f32	s15, s15
 800c768:	e790      	b.n	800c68c <__kernel_rem_pio2f+0x3f0>
 800c76a:	bf00      	nop

0800c76c <floorf>:
 800c76c:	ee10 3a10 	vmov	r3, s0
 800c770:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c774:	3a7f      	subs	r2, #127	@ 0x7f
 800c776:	2a16      	cmp	r2, #22
 800c778:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c77c:	dc2b      	bgt.n	800c7d6 <floorf+0x6a>
 800c77e:	2a00      	cmp	r2, #0
 800c780:	da12      	bge.n	800c7a8 <floorf+0x3c>
 800c782:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c7e8 <floorf+0x7c>
 800c786:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c78a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c792:	dd06      	ble.n	800c7a2 <floorf+0x36>
 800c794:	2b00      	cmp	r3, #0
 800c796:	da24      	bge.n	800c7e2 <floorf+0x76>
 800c798:	2900      	cmp	r1, #0
 800c79a:	4b14      	ldr	r3, [pc, #80]	@ (800c7ec <floorf+0x80>)
 800c79c:	bf08      	it	eq
 800c79e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c7a2:	ee00 3a10 	vmov	s0, r3
 800c7a6:	4770      	bx	lr
 800c7a8:	4911      	ldr	r1, [pc, #68]	@ (800c7f0 <floorf+0x84>)
 800c7aa:	4111      	asrs	r1, r2
 800c7ac:	420b      	tst	r3, r1
 800c7ae:	d0fa      	beq.n	800c7a6 <floorf+0x3a>
 800c7b0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c7e8 <floorf+0x7c>
 800c7b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c7b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7c0:	ddef      	ble.n	800c7a2 <floorf+0x36>
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	bfbe      	ittt	lt
 800c7c6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c7ca:	fa40 f202 	asrlt.w	r2, r0, r2
 800c7ce:	189b      	addlt	r3, r3, r2
 800c7d0:	ea23 0301 	bic.w	r3, r3, r1
 800c7d4:	e7e5      	b.n	800c7a2 <floorf+0x36>
 800c7d6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c7da:	d3e4      	bcc.n	800c7a6 <floorf+0x3a>
 800c7dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7e0:	4770      	bx	lr
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	e7dd      	b.n	800c7a2 <floorf+0x36>
 800c7e6:	bf00      	nop
 800c7e8:	7149f2ca 	.word	0x7149f2ca
 800c7ec:	bf800000 	.word	0xbf800000
 800c7f0:	007fffff 	.word	0x007fffff

0800c7f4 <_init>:
 800c7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f6:	bf00      	nop
 800c7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7fa:	bc08      	pop	{r3}
 800c7fc:	469e      	mov	lr, r3
 800c7fe:	4770      	bx	lr

0800c800 <_fini>:
 800c800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c802:	bf00      	nop
 800c804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c806:	bc08      	pop	{r3}
 800c808:	469e      	mov	lr, r3
 800c80a:	4770      	bx	lr
