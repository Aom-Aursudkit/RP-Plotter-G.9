
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4c0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00016658  0800d698  0800d698  0000e698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023cf0  08023cf0  0002528c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08023cf0  08023cf0  00024cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023cf8  08023cf8  0002528c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023cf8  08023cf8  00024cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08023cfc  08023cfc  00024cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000028c  20000000  08023d00  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012fc  20000290  08023f8c  00025290  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000158c  08023f8c  0002558c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002528c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018495  00000000  00000000  000252bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de7  00000000  00000000  0003d751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00040538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eda  00000000  00000000  00041838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002746f  00000000  00000000  00042712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016da8  00000000  00000000  00069b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100200  00000000  00000000  00080929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180b29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b4  00000000  00000000  00180b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00186220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000290 	.word	0x20000290
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d680 	.word	0x0800d680

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000294 	.word	0x20000294
 8000214:	0800d680 	.word	0x0800d680

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_frsub>:
 8000ba4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba8:	e002      	b.n	8000bb0 <__addsf3>
 8000baa:	bf00      	nop

08000bac <__aeabi_fsub>:
 8000bac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb0 <__addsf3>:
 8000bb0:	0042      	lsls	r2, r0, #1
 8000bb2:	bf1f      	itttt	ne
 8000bb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb8:	ea92 0f03 	teqne	r2, r3
 8000bbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc4:	d06a      	beq.n	8000c9c <__addsf3+0xec>
 8000bc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bce:	bfc1      	itttt	gt
 8000bd0:	18d2      	addgt	r2, r2, r3
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	4048      	eorgt	r0, r1
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	2b19      	cmp	r3, #25
 8000bde:	bf88      	it	hi
 8000be0:	4770      	bxhi	lr
 8000be2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bee:	bf18      	it	ne
 8000bf0:	4240      	negne	r0, r0
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4249      	negne	r1, r1
 8000c02:	ea92 0f03 	teq	r2, r3
 8000c06:	d03f      	beq.n	8000c88 <__addsf3+0xd8>
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c10:	eb10 000c 	adds.w	r0, r0, ip
 8000c14:	f1c3 0320 	rsb	r3, r3, #32
 8000c18:	fa01 f103 	lsl.w	r1, r1, r3
 8000c1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__addsf3+0x78>
 8000c22:	4249      	negs	r1, r1
 8000c24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c2c:	d313      	bcc.n	8000c56 <__addsf3+0xa6>
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c32:	d306      	bcc.n	8000c42 <__addsf3+0x92>
 8000c34:	0840      	lsrs	r0, r0, #1
 8000c36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3a:	f102 0201 	add.w	r2, r2, #1
 8000c3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c40:	d251      	bcs.n	8000ce6 <__addsf3+0x136>
 8000c42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4a:	bf08      	it	eq
 8000c4c:	f020 0001 	biceq.w	r0, r0, #1
 8000c50:	ea40 0003 	orr.w	r0, r0, r3
 8000c54:	4770      	bx	lr
 8000c56:	0049      	lsls	r1, r1, #1
 8000c58:	eb40 0000 	adc.w	r0, r0, r0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c64:	d2ed      	bcs.n	8000c42 <__addsf3+0x92>
 8000c66:	fab0 fc80 	clz	ip, r0
 8000c6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c76:	bfaa      	itet	ge
 8000c78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c7c:	4252      	neglt	r2, r2
 8000c7e:	4318      	orrge	r0, r3
 8000c80:	bfbc      	itt	lt
 8000c82:	40d0      	lsrlt	r0, r2
 8000c84:	4318      	orrlt	r0, r3
 8000c86:	4770      	bx	lr
 8000c88:	f092 0f00 	teq	r2, #0
 8000c8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c90:	bf06      	itte	eq
 8000c92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c96:	3201      	addeq	r2, #1
 8000c98:	3b01      	subne	r3, #1
 8000c9a:	e7b5      	b.n	8000c08 <__addsf3+0x58>
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000caa:	d021      	beq.n	8000cf0 <__addsf3+0x140>
 8000cac:	ea92 0f03 	teq	r2, r3
 8000cb0:	d004      	beq.n	8000cbc <__addsf3+0x10c>
 8000cb2:	f092 0f00 	teq	r2, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	4608      	moveq	r0, r1
 8000cba:	4770      	bx	lr
 8000cbc:	ea90 0f01 	teq	r0, r1
 8000cc0:	bf1c      	itt	ne
 8000cc2:	2000      	movne	r0, #0
 8000cc4:	4770      	bxne	lr
 8000cc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cca:	d104      	bne.n	8000cd6 <__addsf3+0x126>
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cda:	bf3c      	itt	cc
 8000cdc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce0:	4770      	bxcc	lr
 8000ce2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cee:	4770      	bx	lr
 8000cf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf4:	bf16      	itet	ne
 8000cf6:	4608      	movne	r0, r1
 8000cf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cfc:	4601      	movne	r1, r0
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	bf06      	itte	eq
 8000d02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d06:	ea90 0f01 	teqeq	r0, r1
 8000d0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_ui2f>:
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e004      	b.n	8000d20 <__aeabi_i2f+0x8>
 8000d16:	bf00      	nop

08000d18 <__aeabi_i2f>:
 8000d18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d1c:	bf48      	it	mi
 8000d1e:	4240      	negmi	r0, r0
 8000d20:	ea5f 0c00 	movs.w	ip, r0
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	e01c      	b.n	8000d6e <__aeabi_l2f+0x2a>

08000d34 <__aeabi_ul2f>:
 8000d34:	ea50 0201 	orrs.w	r2, r0, r1
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e00a      	b.n	8000d58 <__aeabi_l2f+0x14>
 8000d42:	bf00      	nop

08000d44 <__aeabi_l2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_l2f+0x14>
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	ea5f 0c01 	movs.w	ip, r1
 8000d5c:	bf02      	ittt	eq
 8000d5e:	4684      	moveq	ip, r0
 8000d60:	4601      	moveq	r1, r0
 8000d62:	2000      	moveq	r0, #0
 8000d64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d68:	bf08      	it	eq
 8000d6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d72:	fabc f28c 	clz	r2, ip
 8000d76:	3a08      	subs	r2, #8
 8000d78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d7c:	db10      	blt.n	8000da0 <__aeabi_l2f+0x5c>
 8000d7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d90:	fa20 f202 	lsr.w	r2, r0, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f102 0220 	add.w	r2, r2, #32
 8000da4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db0:	fa21 f202 	lsr.w	r2, r1, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef *huart);

// function for interrupt
void modbus_1t5_Timeout() {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200002ac 	.word	0x200002ac

0800112c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <modbus_3t5_Timeout+0x1c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2201      	movs	r2, #1
 800113a:	755a      	strb	r2, [r3, #21]

}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200002ac 	.word	0x200002ac

0800114c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(huart) == HAL_UART_ERROR_RTO) {
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f00a f9ed 	bl	800b534 <HAL_UART_GetError>
 800115a:	4603      	mov	r3, r0
 800115c:	2b20      	cmp	r3, #32
 800115e:	d101      	bne.n	8001164 <modbus_ErrorTimeout+0x18>
		modbus_1t5_Timeout();
 8001160:	f7ff ffc4 	bl	80010ec <modbus_1t5_Timeout>

	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <Modbus_init+0xa0>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <Modbus_init+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <Modbus_init+0xa4>)
 800118a:	210e      	movs	r1, #14
 800118c:	4618      	mov	r0, r3
 800118e:	f008 f9eb 	bl	8009568 <HAL_TIM_RegisterCallback>
			(void*) modbus_3t5_Timeout);

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2110      	movs	r1, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f00a f975 	bl	800b488 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00a f98c 	bl	800b4c0 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <Modbus_init+0xa8>)
 80011ae:	2104      	movs	r1, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f009 fc33 	bl	800aa1c <HAL_UART_RegisterCallback>
			(void*) modbus_ErrorTimeout);
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
	HAL_UART_Receive_DMA(hModbus->huart,
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <Modbus_init+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d8      	ldr	r0, [r3, #12]
			&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <Modbus_init+0xa0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <Modbus_init+0xa0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
	HAL_UART_Receive_DMA(hModbus->huart,
 80011c8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011cc:	4413      	add	r3, r2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011d4:	4619      	mov	r1, r3
 80011d6:	f009 fd5b 	bl	800ac90 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE);

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10c      	bne.n	8001204 <Modbus_init+0x98>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Modbus_init+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 ff45 	bl	8008080 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <Modbus_init+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f007 fb06 	bl	8008810 <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200002ac 	.word	0x200002ac
 8001210:	0800112d 	.word	0x0800112d
 8001214:	0800114d 	.word	0x0800114d

08001218 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8001224:	23ff      	movs	r3, #255	@ 0xff
 8001226:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8001228:	23ff      	movs	r3, #255	@ 0xff
 800122a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800122c:	e013      	b.n	8001256 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	4053      	eors	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <CRC16+0x68>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4053      	eors	r3, r2
 800124a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <CRC16+0x6c>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001256:	883b      	ldrh	r3, [r7, #0]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	803a      	strh	r2, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e6      	bne.n	800122e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	b29b      	uxth	r3, r3
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000100 	.word	0x20000100
 8001284:	20000000 	.word	0x20000000

08001288 <SET_TARGET>:
	for (int i = 0; i < 10; i++) {
		SET_TARGET(i, 0, 0);
	}
}

void SET_TARGET(int8_t slot, float dist, float ang) {
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	ed87 0a02 	vstr	s0, [r7, #8]
 8001294:	edc7 0a01 	vstr	s1, [r7, #4]
 8001298:	73fb      	strb	r3, [r7, #15]
	TARGET_DISTANCE(slot) = (int16_t) ((dist) * 10.0f);
 800129a:	edd7 7a02 	vldr	s15, [r7, #8]
 800129e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012aa:	ee17 3a90 	vmov	r3, s15
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	dc04      	bgt.n	80012c2 <SET_TARGET+0x3a>
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012bc:	3310      	adds	r3, #16
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	e003      	b.n	80012ca <SET_TARGET+0x42>
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	3313      	adds	r3, #19
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	b291      	uxth	r1, r2
 80012cc:	4a13      	ldr	r2, [pc, #76]	@ (800131c <SET_TARGET+0x94>)
 80012ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	TARGET_ANGLE(slot) = (int16_t) ((ang) * 10.0f);
 80012d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e2:	ee17 3a90 	vmov	r3, s15
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	dc05      	bgt.n	80012fc <SET_TARGET+0x74>
 80012f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f4:	3310      	adds	r3, #16
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	3301      	adds	r3, #1
 80012fa:	e004      	b.n	8001306 <SET_TARGET+0x7e>
 80012fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001300:	3313      	adds	r3, #19
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	3301      	adds	r3, #1
 8001306:	b291      	uxth	r1, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <SET_TARGET+0x94>)
 800130a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20001128 	.word	0x20001128

08001320 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b08d      	sub	sp, #52	@ 0x34
 8001324:	af02      	add	r7, sp, #8
//	//-- value

	REG16(HEART_BEAT) = 22881;
 8001326:	4bb2      	ldr	r3, [pc, #712]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 8001328:	f645 1261 	movw	r2, #22881	@ 0x5961
 800132c:	801a      	strh	r2, [r3, #0]
	REG16(REG_SERVO_LIMIT_SWITCH) = Pen_Status ? 2 : 1;
 800132e:	4bb1      	ldr	r3, [pc, #708]	@ (80015f4 <Modbus_Protocal_Worker+0x2d4>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <Modbus_Protocal_Worker+0x1a>
 8001336:	2202      	movs	r2, #2
 8001338:	e000      	b.n	800133c <Modbus_Protocal_Worker+0x1c>
 800133a:	2201      	movs	r2, #1
 800133c:	4bac      	ldr	r3, [pc, #688]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 800133e:	80da      	strh	r2, [r3, #6]
	Pen_BaseSystem = REG16(REG_SERVO_CMD_DOWN) ? 1 : 0;
 8001340:	4bab      	ldr	r3, [pc, #684]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 8001342:	895b      	ldrh	r3, [r3, #10]
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf14      	ite	ne
 8001348:	2301      	movne	r3, #1
 800134a:	2300      	moveq	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	4ba9      	ldr	r3, [pc, #676]	@ (80015f8 <Modbus_Protocal_Worker+0x2d8>)
 8001352:	701a      	strb	r2, [r3, #0]
	TargetP_BaseSystem = REG16(REG_TARGET_GOAL_R) * 0.1f;
 8001354:	4ba6      	ldr	r3, [pc, #664]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 8001356:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80015fc <Modbus_Protocal_Worker+0x2dc>
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	4ba5      	ldr	r3, [pc, #660]	@ (8001600 <Modbus_Protocal_Worker+0x2e0>)
 800136c:	edc3 7a00 	vstr	s15, [r3]
	float TargetR = ((float)REG16(REG_TARGET_GOAL_THETA)) / 10.0f;
 8001370:	4b9f      	ldr	r3, [pc, #636]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 8001372:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800137e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001386:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	if (TargetR > 270) TargetR -= 360;
 800138a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800138e:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8001604 <Modbus_Protocal_Worker+0x2e4>
 8001392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139a:	dd07      	ble.n	80013ac <Modbus_Protocal_Worker+0x8c>
 800139c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013a0:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8001608 <Modbus_Protocal_Worker+0x2e8>
 80013a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	TargetR_BaseSystem = DEG_TO_RED01(TargetR);
 80013ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013ae:	f7ff f897 	bl	80004e0 <__aeabi_f2d>
 80013b2:	a38b      	add	r3, pc, #556	@ (adr r3, 80015e0 <Modbus_Protocal_Worker+0x2c0>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff f8ea 	bl	8000590 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fb9e 	bl	8000b04 <__aeabi_d2f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a90      	ldr	r2, [pc, #576]	@ (800160c <Modbus_Protocal_Worker+0x2ec>)
 80013cc:	6013      	str	r3, [r2, #0]

	float Velocity_mm, Acceleration_mm, mmPosition, AngularVelocity_rad,
			AngularAcceleration_rad, RadPosition;
	Get_QRIdata(&Velocity_mm, &Acceleration_mm, &mmPosition,
 80013ce:	f107 0410 	add.w	r4, r7, #16
 80013d2:	f107 0214 	add.w	r2, r7, #20
 80013d6:	f107 0118 	add.w	r1, r7, #24
 80013da:	f107 001c 	add.w	r0, r7, #28
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	4623      	mov	r3, r4
 80013ec:	f003 ff6a 	bl	80052c4 <Get_QRIdata>
			&AngularVelocity_rad, &AngularAcceleration_rad, &RadPosition);

// Position remap: [-π/2, 3π/2] → [0, 360]
	float mappedDeg = RAD_TO_DEG(RadPosition);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f874 	bl	80004e0 <__aeabi_f2d>
 80013f8:	a37b      	add	r3, pc, #492	@ (adr r3, 80015e8 <Modbus_Protocal_Worker+0x2c8>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff f8c7 	bl	8000590 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fb7b 	bl	8000b04 <__aeabi_d2f>
 800140e:	4603      	mov	r3, r0
 8001410:	623b      	str	r3, [r7, #32]
    if (mappedDeg < 0) mappedDeg += 360;
 8001412:	edd7 7a08 	vldr	s15, [r7, #32]
 8001416:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	d507      	bpl.n	8001430 <Modbus_Protocal_Worker+0x110>
 8001420:	edd7 7a08 	vldr	s15, [r7, #32]
 8001424:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001608 <Modbus_Protocal_Worker+0x2e8>
 8001428:	ee77 7a87 	vadd.f32	s15, s15, s14
 800142c:	edc7 7a08 	vstr	s15, [r7, #32]

	REG16(REG_POSITION_THETA) = (int16_t) (mappedDeg * 10.0f);
 8001430:	edd7 7a08 	vldr	s15, [r7, #32]
 8001434:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001440:	ee17 3a90 	vmov	r3, s15
 8001444:	b21b      	sxth	r3, r3
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b69      	ldr	r3, [pc, #420]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 800144a:	849a      	strh	r2, [r3, #36]	@ 0x24

// Speed and acceleration: normal conversion
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f846 	bl	80004e0 <__aeabi_f2d>
 8001454:	a364      	add	r3, pc, #400	@ (adr r3, 80015e8 <Modbus_Protocal_Worker+0x2c8>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff f899 	bl	8000590 <__aeabi_dmul>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fb4d 	bl	8000b04 <__aeabi_d2f>
 800146a:	ee07 0a90 	vmov	s15, r0
 800146e:	eef0 7ae7 	vabs.f32	s15, s15
			* 10.0f);
 8001472:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001476:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 800147a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800147e:	ee17 3a90 	vmov	r3, s15
 8001482:	b21b      	sxth	r3, r3
 8001484:	b29a      	uxth	r2, r3
 8001486:	4b5a      	ldr	r3, [pc, #360]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 8001488:	851a      	strh	r2, [r3, #40]	@ 0x28
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f827 	bl	80004e0 <__aeabi_f2d>
 8001492:	a355      	add	r3, pc, #340	@ (adr r3, 80015e8 <Modbus_Protocal_Worker+0x2c8>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7ff f87a 	bl	8000590 <__aeabi_dmul>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff fb2e 	bl	8000b04 <__aeabi_d2f>
 80014a8:	ee07 0a90 	vmov	s15, r0
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 80014ac:	eef0 7ae7 	vabs.f32	s15, s15
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 80014b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014b4:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 80014b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014bc:	ee17 3a90 	vmov	r3, s15
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4b4a      	ldr	r3, [pc, #296]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 80014c6:	859a      	strh	r2, [r3, #44]	@ 0x2c

	REG16(REG_SPEED_R) = (int16_t) (fabsf(Velocity_mm) * 10.0f);
 80014c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014cc:	eef0 7ae7 	vabs.f32	s15, s15
 80014d0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 3a90 	vmov	r3, s15
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b42      	ldr	r3, [pc, #264]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 80014e6:	84da      	strh	r2, [r3, #38]	@ 0x26
	REG16(REG_ACCELERATION_R) = (int16_t) (fabsf(Acceleration_mm) * 10.0f);
 80014e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ec:	eef0 7ae7 	vabs.f32	s15, s15
 80014f0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014fc:	ee17 3a90 	vmov	r3, s15
 8001500:	b21b      	sxth	r3, r3
 8001502:	b29a      	uxth	r2, r3
 8001504:	4b3a      	ldr	r3, [pc, #232]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 8001506:	855a      	strh	r2, [r3, #42]	@ 0x2a
	REG16(REG_POSITION_R) = (int16_t) (mmPosition * 10.0f);
 8001508:	edd7 7a05 	vldr	s15, [r7, #20]
 800150c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001514:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001518:	ee17 3a90 	vmov	r3, s15
 800151c:	b21b      	sxth	r3, r3
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b33      	ldr	r3, [pc, #204]	@ (80015f0 <Modbus_Protocal_Worker+0x2d0>)
 8001522:	845a      	strh	r2, [r3, #34]	@ 0x22

	//--Modbus
	switch (hModbus->Mstatus) {
 8001524:	4b3a      	ldr	r3, [pc, #232]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	7ddb      	ldrb	r3, [r3, #23]
 800152a:	3b01      	subs	r3, #1
 800152c:	2b03      	cmp	r3, #3
 800152e:	d80b      	bhi.n	8001548 <Modbus_Protocal_Worker+0x228>
 8001530:	a201      	add	r2, pc, #4	@ (adr r2, 8001538 <Modbus_Protocal_Worker+0x218>)
 8001532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001536:	bf00      	nop
 8001538:	08001553 	.word	0x08001553
 800153c:	0800171d 	.word	0x0800171d
 8001540:	08001615 	.word	0x08001615
 8001544:	08001659 	.word	0x08001659
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001548:	4b31      	ldr	r3, [pc, #196]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2201      	movs	r2, #1
 800154e:	75da      	strb	r2, [r3, #23]
		break;
 8001550:	e0fc      	b.n	800174c <Modbus_Protocal_Worker+0x42c>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 8001552:	4b2f      	ldr	r3, [pc, #188]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800155a:	2b00      	cmp	r3, #0
 800155c:	d006      	beq.n	800156c <Modbus_Protocal_Worker+0x24c>
			/*set state*/
			hModbus->Mstatus = Modbus_state_Emission;
 800155e:	4b2c      	ldr	r3, [pc, #176]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2202      	movs	r2, #2
 8001564:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001566:	f000 f9e7 	bl	8001938 <Modbus_Emission>
 800156a:	e018      	b.n	800159e <Modbus_Protocal_Worker+0x27e>
		}

		// Received character
		else if (hModbus->huart->RxXferSize != hModbus->huart->RxXferCount) {
 800156c:	4b28      	ldr	r3, [pc, #160]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001576:	4b26      	ldr	r3, [pc, #152]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001580:	b29b      	uxth	r3, r3
 8001582:	429a      	cmp	r2, r3
 8001584:	d00b      	beq.n	800159e <Modbus_Protocal_Worker+0x27e>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001586:	4b22      	ldr	r3, [pc, #136]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800158e:	4b20      	ldr	r3, [pc, #128]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2200      	movs	r2, #0
 8001594:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 8001596:	4b1e      	ldr	r3, [pc, #120]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2203      	movs	r2, #3
 800159c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 800159e:	4b1c      	ldr	r3, [pc, #112]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	f040 80c8 	bne.w	800173e <Modbus_Protocal_Worker+0x41e>
			hModbus->modbusUartStructure.RxTail = 0;
 80015ae:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 80015b8:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68d8      	ldr	r0, [r3, #12]
					&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80015be:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <Modbus_Protocal_Worker+0x2f0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 80015ca:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80015ce:	4413      	add	r3, r2
 80015d0:	3302      	adds	r3, #2
 80015d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015d6:	4619      	mov	r1, r3
 80015d8:	f009 fb5a 	bl	800ac90 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE);

		}
		break;
 80015dc:	e0af      	b.n	800173e <Modbus_Protocal_Worker+0x41e>
 80015de:	bf00      	nop
 80015e0:	a2529d39 	.word	0xa2529d39
 80015e4:	3f91df46 	.word	0x3f91df46
 80015e8:	1a63c1f8 	.word	0x1a63c1f8
 80015ec:	404ca5dc 	.word	0x404ca5dc
 80015f0:	20001128 	.word	0x20001128
 80015f4:	20000bd0 	.word	0x20000bd0
 80015f8:	20000c4c 	.word	0x20000c4c
 80015fc:	3dcccccd 	.word	0x3dcccccd
 8001600:	20000c48 	.word	0x20000c48
 8001604:	43870000 	.word	0x43870000
 8001608:	43b40000 	.word	0x43b40000
 800160c:	20000c44 	.word	0x20000c44
 8001610:	200002ac 	.word	0x200002ac
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 8001614:	4b4f      	ldr	r3, [pc, #316]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	7d1b      	ldrb	r3, [r3, #20]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 8091 	beq.w	8001742 <Modbus_Protocal_Worker+0x422>
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001620:	4b4c      	ldr	r3, [pc, #304]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	22fe      	movs	r2, #254	@ 0xfe
 8001626:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 8001628:	4b4a      	ldr	r3, [pc, #296]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 8001632:	4b48      	ldr	r3, [pc, #288]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 8001642:	4b44      	ldr	r3, [pc, #272]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001644:	681b      	ldr	r3, [r3, #0]
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 8001646:	1a8a      	subs	r2, r1, r2
 8001648:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 800164a:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800164e:	4b41      	ldr	r3, [pc, #260]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2204      	movs	r2, #4
 8001654:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001656:	e074      	b.n	8001742 <Modbus_Protocal_Worker+0x422>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 8001658:	4b3e      	ldr	r3, [pc, #248]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001660:	f113 0f02 	cmn.w	r3, #2
 8001664:	d150      	bne.n	8001708 <Modbus_Protocal_Worker+0x3e8>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001666:	4b3b      	ldr	r3, [pc, #236]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2200      	movs	r2, #0
 800166c:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(
					hModbus->modbusUartStructure.MessageBufferRx,
 800166e:	4b39      	ldr	r3, [pc, #228]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f203 2272 	addw	r2, r3, #626	@ 0x272
					hModbus->modbusUartStructure.RxTail - 2);
 8001676:	4b37      	ldr	r3, [pc, #220]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			CalculateCRC.U16 = CRC16(
 800167e:	3b02      	subs	r3, #2
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f7ff fdc8 	bl	8001218 <CRC16>
 8001688:	4603      	mov	r3, r0
 800168a:	80bb      	strh	r3, [r7, #4]

			if (!(CalculateCRC.U8[0]
 800168c:	793a      	ldrb	r2, [r7, #4]
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800168e:	4b31      	ldr	r3, [pc, #196]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001690:	6819      	ldr	r1, [r3, #0]
 8001692:	4b30      	ldr	r3, [pc, #192]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
							- 2]
 800169a:	3b02      	subs	r3, #2
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800169c:	440b      	add	r3, r1
 800169e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d10c      	bne.n	80016c0 <Modbus_Protocal_Worker+0x3a0>
					&& CalculateCRC.U8[1]
 80016a6:	797a      	ldrb	r2, [r7, #5]
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80016a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016aa:	6819      	ldr	r1, [r3, #0]
 80016ac:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
									- 1])) {
 80016b4:	3b01      	subs	r3, #1
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80016b6:	440b      	add	r3, r1
 80016b8:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d004      	beq.n	80016ca <Modbus_Protocal_Worker+0x3aa>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80016c0:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	22ff      	movs	r2, #255	@ 0xff
 80016c6:	759a      	strb	r2, [r3, #22]
				break;
 80016c8:	e040      	b.n	800174c <Modbus_Protocal_Worker+0x42c>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 80016ca:	4b22      	ldr	r3, [pc, #136]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
					!= hModbus->slaveAddress)
 80016d2:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	781b      	ldrb	r3, [r3, #0]
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d113      	bne.n	8001704 <Modbus_Protocal_Worker+0x3e4>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80016dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx + 1,
 80016e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80016ec:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail - 3);
 80016ee:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80016f6:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80016f8:	461a      	mov	r2, r3
 80016fa:	f00b f8a7 	bl	800c84c <memcpy>

			//execute command
			Modbus_frame_response();
 80016fe:	f000 f903 	bl	8001908 <Modbus_frame_response>
 8001702:	e001      	b.n	8001708 <Modbus_Protocal_Worker+0x3e8>
				break;
 8001704:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 8001706:	e021      	b.n	800174c <Modbus_Protocal_Worker+0x42c>
		if (hModbus->Flag_T35TimeOut) {
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	7d5b      	ldrb	r3, [r3, #21]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d019      	beq.n	8001746 <Modbus_Protocal_Worker+0x426>
			hModbus->Mstatus = Modbus_state_Idle;
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2201      	movs	r2, #1
 8001718:	75da      	strb	r2, [r3, #23]
		break;
 800171a:	e014      	b.n	8001746 <Modbus_Protocal_Worker+0x426>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 800171c:	4b0d      	ldr	r3, [pc, #52]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001726:	2b20      	cmp	r3, #32
 8001728:	d10f      	bne.n	800174a <Modbus_Protocal_Worker+0x42a>
			hModbus->TxCount = 0;
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001734:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <Modbus_Protocal_Worker+0x434>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	75da      	strb	r2, [r3, #23]
		break;
 800173c:	e005      	b.n	800174a <Modbus_Protocal_Worker+0x42a>
		break;
 800173e:	bf00      	nop
 8001740:	e004      	b.n	800174c <Modbus_Protocal_Worker+0x42c>
		break;
 8001742:	bf00      	nop
 8001744:	e002      	b.n	800174c <Modbus_Protocal_Worker+0x42c>
		break;
 8001746:	bf00      	nop
 8001748:	e000      	b.n	800174c <Modbus_Protocal_Worker+0x42c>
		break;
 800174a:	bf00      	nop
}
 800174c:	bf00      	nop
 800174e:	372c      	adds	r7, #44	@ 0x2c
 8001750:	46bd      	mov	sp, r7
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	200002ac 	.word	0x200002ac

08001758 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 800175e:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <modbusWrite1Register+0x7c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	7e5b      	ldrb	r3, [r3, #25]
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b29b      	uxth	r3, r3
 8001768:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <modbusWrite1Register+0x7c>)
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	7e92      	ldrb	r2, [r2, #26]
 800176e:	4413      	add	r3, r2
 8001770:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 8001772:	88fa      	ldrh	r2, [r7, #6]
 8001774:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <modbusWrite1Register+0x7c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	429a      	cmp	r2, r3
 800177c:	d903      	bls.n	8001786 <modbusWrite1Register+0x2e>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800177e:	2002      	movs	r0, #2
 8001780:	f000 f8a0 	bl	80018c4 <ModbusErrorReply>
		return;
 8001784:	e023      	b.n	80017ce <modbusWrite1Register+0x76>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001786:	4b13      	ldr	r3, [pc, #76]	@ (80017d4 <modbusWrite1Register+0x7c>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <modbusWrite1Register+0x7c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	440b      	add	r3, r1
 8001796:	7ed2      	ldrb	r2, [r2, #27]
 8001798:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800179a:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <modbusWrite1Register+0x7c>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <modbusWrite1Register+0x7c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6859      	ldr	r1, [r3, #4]
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	440b      	add	r3, r1
 80017aa:	7f12      	ldrb	r2, [r2, #28]
 80017ac:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <modbusWrite1Register+0x7c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 80017b6:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <modbusWrite1Register+0x7c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3318      	adds	r3, #24
 80017bc:	2208      	movs	r2, #8
 80017be:	4619      	mov	r1, r3
 80017c0:	f00b f844 	bl	800c84c <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 80017c4:	4b03      	ldr	r3, [pc, #12]	@ (80017d4 <modbusWrite1Register+0x7c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2205      	movs	r2, #5
 80017ca:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	200002ac 	.word	0x200002ac

080017d8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 80017de:	4b38      	ldr	r3, [pc, #224]	@ (80018c0 <modbusRead1Register+0xe8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	7edb      	ldrb	r3, [r3, #27]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b29b      	uxth	r3, r3
			+ (hModbus->Rxframe[4]));
 80017e8:	4a35      	ldr	r2, [pc, #212]	@ (80018c0 <modbusRead1Register+0xe8>)
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	7f12      	ldrb	r2, [r2, #28]
	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 80017ee:	4413      	add	r3, r2
 80017f0:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 80017f2:	4b33      	ldr	r3, [pc, #204]	@ (80018c0 <modbusRead1Register+0xe8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	7e5b      	ldrb	r3, [r3, #25]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4a30      	ldr	r2, [pc, #192]	@ (80018c0 <modbusRead1Register+0xe8>)
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	7e92      	ldrb	r2, [r2, #26]
 8001802:	4413      	add	r3, r2
 8001804:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <modbusRead1Register+0x3a>
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001810:	d903      	bls.n	800181a <modbusRead1Register+0x42>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001812:	2003      	movs	r0, #3
 8001814:	f000 f856 	bl	80018c4 <ModbusErrorReply>
		return;
 8001818:	e04e      	b.n	80018b8 <modbusRead1Register+0xe0>
	}

	if (startAddress > hModbus->RegisterSize
 800181a:	88ba      	ldrh	r2, [r7, #4]
 800181c:	4b28      	ldr	r3, [pc, #160]	@ (80018c0 <modbusRead1Register+0xe8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	429a      	cmp	r2, r3
 8001824:	d808      	bhi.n	8001838 <modbusRead1Register+0x60>
			|| (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 8001826:	88ba      	ldrh	r2, [r7, #4]
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	4413      	add	r3, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <modbusRead1Register+0xe8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	429a      	cmp	r2, r3
 8001836:	d903      	bls.n	8001840 <modbusRead1Register+0x68>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001838:	2002      	movs	r0, #2
 800183a:	f000 f843 	bl	80018c4 <ModbusErrorReply>
		return;
 800183e:	e03b      	b.n	80018b8 <modbusRead1Register+0xe0>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001840:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <modbusRead1Register+0xe8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2203      	movs	r2, #3
 8001846:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b1c      	ldr	r3, [pc, #112]	@ (80018c0 <modbusRead1Register+0xe8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0052      	lsls	r2, r2, #1
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 800185a:	2400      	movs	r4, #0
 800185c:	e020      	b.n	80018a0 <modbusRead1Register+0xc8>
		hModbus->Txframe[2 * i + 2] =
				hModbus->RegisterAddress[startAddress + i].U8[1];
 800185e:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <modbusRead1Register+0xe8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	88bb      	ldrh	r3, [r7, #4]
 8001866:	4423      	add	r3, r4
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 2] =
 800186c:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <modbusRead1Register+0xe8>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	1c63      	adds	r3, r4, #1
 8001872:	005b      	lsls	r3, r3, #1
				hModbus->RegisterAddress[startAddress + i].U8[1];
 8001874:	7849      	ldrb	r1, [r1, #1]
		hModbus->Txframe[2 * i + 2] =
 8001876:	4413      	add	r3, r2
 8001878:	460a      	mov	r2, r1
 800187a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2 * i + 3] =
				hModbus->RegisterAddress[startAddress + i].U8[0];
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <modbusRead1Register+0xe8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	88bb      	ldrh	r3, [r7, #4]
 8001886:	4423      	add	r3, r4
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 3] =
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <modbusRead1Register+0xe8>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	0063      	lsls	r3, r4, #1
 8001892:	3303      	adds	r3, #3
				hModbus->RegisterAddress[startAddress + i].U8[0];
 8001894:	7809      	ldrb	r1, [r1, #0]
		hModbus->Txframe[2 * i + 3] =
 8001896:	4413      	add	r3, r2
 8001898:	460a      	mov	r2, r1
 800189a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for (i = 0; i < numberOfDataToRead; i++) {
 800189e:	3401      	adds	r4, #1
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	429c      	cmp	r4, r3
 80018a4:	dbdb      	blt.n	800185e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	3301      	adds	r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <modbusRead1Register+0xe8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	0052      	lsls	r2, r2, #1
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	bf00      	nop
 80018c0:	200002ac 	.word	0x200002ac

080018c4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80018ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <ModbusErrorReply+0x40>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	7e1a      	ldrb	r2, [r3, #24]
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <ModbusErrorReply+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80018e2:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <ModbusErrorReply+0x40>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	79fa      	ldrb	r2, [r7, #7]
 80018e8:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <ModbusErrorReply+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2202      	movs	r2, #2
 80018f2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200002ac 	.word	0x200002ac

08001908 <Modbus_frame_response>:

void Modbus_frame_response() {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 800190c:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <Modbus_frame_response+0x2c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	7e1b      	ldrb	r3, [r3, #24]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d004      	beq.n	8001920 <Modbus_frame_response+0x18>
 8001916:	2b06      	cmp	r3, #6
 8001918:	d105      	bne.n	8001926 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800191a:	f7ff ff1d 	bl	8001758 <modbusWrite1Register>
		break;
 800191e:	e006      	b.n	800192e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001920:	f7ff ff5a 	bl	80017d8 <modbusRead1Register>
		break;
 8001924:	e003      	b.n	800192e <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001926:	2001      	movs	r0, #1
 8001928:	f7ff ffcc 	bl	80018c4 <ModbusErrorReply>
		break;
 800192c:	bf00      	nop

	}
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200002ac 	.word	0x200002ac

08001938 <Modbus_Emission>:

void Modbus_Emission() {
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 800193e:	4b38      	ldr	r3, [pc, #224]	@ (8001a20 <Modbus_Emission+0xe8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001948:	2b20      	cmp	r3, #32
 800194a:	d15d      	bne.n	8001a08 <Modbus_Emission+0xd0>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800194c:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <Modbus_Emission+0xe8>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b33      	ldr	r3, [pc, #204]	@ (8001a20 <Modbus_Emission+0xe8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	7812      	ldrb	r2, [r2, #0]
 8001956:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 800195a:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <Modbus_Emission+0xe8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8001962:	1c58      	adds	r0, r3, #1
				hModbus->Txframe, hModbus->TxCount);
 8001964:	4b2e      	ldr	r3, [pc, #184]	@ (8001a20 <Modbus_Emission+0xe8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
 800196c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a20 <Modbus_Emission+0xe8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 8001974:	461a      	mov	r2, r3
 8001976:	f00a ff69 	bl	800c84c <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 800197a:	4b29      	ldr	r3, [pc, #164]	@ (8001a20 <Modbus_Emission+0xe8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001982:	461a      	mov	r2, r3
 8001984:	4b26      	ldr	r3, [pc, #152]	@ (8001a20 <Modbus_Emission+0xe8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3203      	adds	r2, #3
 800198a:	b292      	uxth	r2, r2
 800198c:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001990:	4b23      	ldr	r3, [pc, #140]	@ (8001a20 <Modbus_Emission+0xe8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001998:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <Modbus_Emission+0xe8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80019a0:	3b02      	subs	r3, #2
 80019a2:	4619      	mov	r1, r3
 80019a4:	4610      	mov	r0, r2
 80019a6:	f7ff fc37 	bl	8001218 <CRC16>
 80019aa:	4603      	mov	r3, r0
 80019ac:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 80019ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 2] = CalculateCRC.U8[0];
 80019ba:	3b02      	subs	r3, #2
 80019bc:	7939      	ldrb	r1, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	460a      	mov	r2, r1
 80019c2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 80019c6:	4b16      	ldr	r3, [pc, #88]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 1] = CalculateCRC.U8[1];
 80019d2:	3b01      	subs	r3, #1
 80019d4:	7979      	ldrb	r1, [r7, #5]
 80019d6:	4413      	add	r3, r2
 80019d8:	460a      	mov	r2, r1
 80019da:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		//sent modbus

		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80019de:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e8:	2b20      	cmp	r3, #32
 80019ea:	d10d      	bne.n	8001a08 <Modbus_Emission+0xd0>
			HAL_UART_Transmit_DMA(hModbus->huart,
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68d8      	ldr	r0, [r3, #12]
					hModbus->modbusUartStructure.MessageBufferTx,
 80019f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					hModbus->modbusUartStructure.TxTail);
 80019fa:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <Modbus_Emission+0xe8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart,
 80019fe:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a02:	461a      	mov	r2, r3
 8001a04:	f009 f8c4 	bl	800ab90 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <Modbus_Emission+0xe8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001a10:	4b03      	ldr	r3, [pc, #12]	@ (8001a20 <Modbus_Emission+0xe8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2200      	movs	r2, #0
 8001a16:	755a      	strb	r2, [r3, #21]

}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200002ac 	.word	0x200002ac

08001a24 <Trapezoidal_Init>:
 */

#include "math.h"
#include "Trapezoidal.h"

void Trapezoidal_Init(VELO_PROFILE *profile, float distance_total, float v_max, float a_max) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a30:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a34:	ed87 1a00 	vstr	s2, [r7]
    profile->distance_total = fabsf(distance_total);
 8001a38:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a3c:	eef0 7ae7 	vabs.f32	s15, s15
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	edc3 7a00 	vstr	s15, [r3]
    profile->v_max = fabsf(v_max);
 8001a46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a4a:	eef0 7ae7 	vabs.f32	s15, s15
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	edc3 7a01 	vstr	s15, [r3, #4]
    profile->a_max = fabsf(a_max);
 8001a54:	edd7 7a00 	vldr	s15, [r7]
 8001a58:	eef0 7ae7 	vabs.f32	s15, s15
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	edc3 7a02 	vstr	s15, [r3, #8]
    profile->current_position = 0.0f;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
    profile->current_velocity = 0.0f;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
    profile->target_position = distance_total;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	61da      	str	r2, [r3, #28]
    profile->direction = (distance_total >= 0.0f) ? 1.0f : -1.0f;
 8001a78:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	db02      	blt.n	8001a8c <Trapezoidal_Init+0x68>
 8001a86:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a8a:	e000      	b.n	8001a8e <Trapezoidal_Init+0x6a>
 8001a8c:	4a49      	ldr	r2, [pc, #292]	@ (8001bb4 <Trapezoidal_Init+0x190>)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	621a      	str	r2, [r3, #32]
    profile->finished = 0;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	629a      	str	r2, [r3, #40]	@ 0x28
    profile->elapsed_time = 0.0f;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	625a      	str	r2, [r3, #36]	@ 0x24

    // Check if triangular profile is required
    float d_total_min = (profile->v_max * profile->v_max) / profile->a_max;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aac:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aba:	edc7 7a05 	vstr	s15, [r7, #20]
    if (profile->distance_total < d_total_min) {
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ac8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad0:	dd14      	ble.n	8001afc <Trapezoidal_Init+0xd8>
        profile->is_triangular = 1;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = sqrtf(profile->a_max * profile->distance_total);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aec:	f00a febe 	bl	800c86c <sqrtf>
 8001af0:	eef0 7a40 	vmov.f32	s15, s0
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	edc3 7a03 	vstr	s15, [r3, #12]
 8001afa:	e006      	b.n	8001b0a <Trapezoidal_Init+0xe6>
    } else {
        profile->is_triangular = 0;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = profile->v_max;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	60da      	str	r2, [r3, #12]
    }

    // Precompute timing and distances
    profile->t_acc = profile->v_peak / profile->a_max;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    profile->d_acc = 0.5f * profile->a_max * profile->t_acc * profile->t_acc;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    if (profile->is_triangular) {
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <Trapezoidal_Init+0x13e>
        profile->t_flat = 0.0f;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	635a      	str	r2, [r3, #52]	@ 0x34
        profile->d_flat = 0.0f;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b60:	e017      	b.n	8001b92 <Trapezoidal_Init+0x16e>
    } else {
        profile->d_flat = profile->distance_total - 2 * profile->d_acc;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	ed93 7a00 	vldr	s14, [r3]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001b6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        profile->t_flat = profile->d_flat / profile->v_peak;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    }

    profile->t_total = 2 * profile->t_acc + profile->t_flat;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b98:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
}
 8001bac:	bf00      	nop
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	bf800000 	.word	0xbf800000

08001bb8 <Trapezoidal_Update>:

void Trapezoidal_Update(VELO_PROFILE *profile, float dt) {
 8001bb8:	b480      	push	{r7}
 8001bba:	b095      	sub	sp, #84	@ 0x54
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	ed87 0a00 	vstr	s0, [r7]
    if (profile->finished) return;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f040 812c 	bne.w	8001e26 <Trapezoidal_Update+0x26e>

    profile->elapsed_time += dt;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001bd4:	edd7 7a00 	vldr	s15, [r7]
 8001bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    float t = profile->elapsed_time;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be6:	63bb      	str	r3, [r7, #56]	@ 0x38

    float a = profile->a_max;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	637b      	str	r3, [r7, #52]	@ 0x34
    float v = profile->v_peak;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	633b      	str	r3, [r7, #48]	@ 0x30
    float d_total = profile->distance_total;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float t_acc = v / a;
 8001bfa:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001bfe:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c06:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float d_acc = 0.5f * a * t_acc * t_acc;
 8001c0a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c0e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c16:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c26:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    float t_flat = 0.0f;
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float d_flat = 0.0f;
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	64bb      	str	r3, [r7, #72]	@ 0x48

    if (!profile->is_triangular) {
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d111      	bne.n	8001c62 <Trapezoidal_Update+0xaa>
        d_flat = d_total - 2 * d_acc;
 8001c3e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c46:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        t_flat = d_flat / v;
 8001c52:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001c56:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c5e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    }

    float t1 = t_acc;
 8001c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c64:	623b      	str	r3, [r7, #32]
    float t2 = t_acc + t_flat;
 8001c66:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c6a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c72:	edc7 7a07 	vstr	s15, [r7, #28]
    float t3 = t_acc + t_flat + t_acc;
 8001c76:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c7a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c82:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8a:	edc7 7a06 	vstr	s15, [r7, #24]

    float pos = 0.0f;
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	647b      	str	r3, [r7, #68]	@ 0x44
    float vel = 0.0f;
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	643b      	str	r3, [r7, #64]	@ 0x40
    float acc = 0.0f;
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float eps = 1e-6f;
 8001ca0:	4b64      	ldr	r3, [pc, #400]	@ (8001e34 <Trapezoidal_Update+0x27c>)
 8001ca2:	617b      	str	r3, [r7, #20]

    if (t < t1 - eps) {
 8001ca4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ca8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbc:	d51a      	bpl.n	8001cf4 <Trapezoidal_Update+0x13c>
        // Acceleration phase
        pos = 0.5f * a * t * t;
 8001cbe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cc2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001cc6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cca:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cda:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = a * t;
 8001cde:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001ce2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cea:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = a;
 8001cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cf2:	e079      	b.n	8001de8 <Trapezoidal_Update+0x230>
    } else if (t < t2 - eps) {
 8001cf4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d00:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0c:	d519      	bpl.n	8001d42 <Trapezoidal_Update+0x18a>
        // Constant velocity phase
        float t_flat_phase = t - t1;
 8001d0e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d12:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1a:	edc7 7a03 	vstr	s15, [r7, #12]
        pos = d_acc + v * t_flat_phase;
 8001d1e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001d22:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d32:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v;
 8001d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d38:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d40:	e052      	b.n	8001de8 <Trapezoidal_Update+0x230>
    } else if (t < t3 - eps) {
 8001d42:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d46:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5a:	d53a      	bpl.n	8001dd2 <Trapezoidal_Update+0x21a>
        // Deceleration phase
        float td = t - t2;
 8001d5c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d60:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d68:	edc7 7a04 	vstr	s15, [r7, #16]
        pos = d_acc + d_flat + v * td - 0.5f * a * td * td;
 8001d6c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d70:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d78:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001d7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d88:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d8c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001d90:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d94:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d98:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v - a * td;
 8001dac:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001db0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = -a;
 8001dc4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001dc8:	eef1 7a67 	vneg.f32	s15, s15
 8001dcc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001dd0:	e00a      	b.n	8001de8 <Trapezoidal_Update+0x230>
    } else {
        // Motion complete
        pos = d_total;
 8001dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd4:	647b      	str	r3, [r7, #68]	@ 0x44
        vel = 0.0f;
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        profile->finished = 1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // Apply direction
    profile->current_position = pos * profile->direction;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dee:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->current_velocity = vel * profile->direction;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	ed93 7a08 	vldr	s14, [r3, #32]
 8001e02:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->current_acceleration = acc * profile->direction;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	ed93 7a08 	vldr	s14, [r3, #32]
 8001e16:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	edc3 7a06 	vstr	s15, [r3, #24]
 8001e24:	e000      	b.n	8001e28 <Trapezoidal_Update+0x270>
    if (profile->finished) return;
 8001e26:	bf00      	nop
}
 8001e28:	3754      	adds	r7, #84	@ 0x54
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	358637bd 	.word	0x358637bd

08001e38 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e3c:	ed2d 8b02 	vpush	{d8}
 8001e40:	b0b1      	sub	sp, #196	@ 0xc4
 8001e42:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e44:	f004 f99b 	bl	800617e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e48:	f001 fdbe 	bl	80039c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e4c:	f002 fa18 	bl	8004280 <MX_GPIO_Init>
	MX_DMA_Init();
 8001e50:	f002 f9e4 	bl	800421c <MX_DMA_Init>
	MX_TIM4_Init();
 8001e54:	f001 ff60 	bl	8003d18 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001e58:	f001 ffb4 	bl	8003dc4 <MX_TIM5_Init>
	MX_TIM3_Init();
 8001e5c:	f001 ff06 	bl	8003c6c <MX_TIM3_Init>
	MX_TIM8_Init();
 8001e60:	f001 fffe 	bl	8003e60 <MX_TIM8_Init>
	MX_TIM15_Init();
 8001e64:	f002 f8b8 	bl	8003fd8 <MX_TIM15_Init>
	MX_TIM1_Init();
 8001e68:	f001 fdfa 	bl	8003a60 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001e6c:	f001 fe7e 	bl	8003b6c <MX_TIM2_Init>
	MX_TIM16_Init();
 8001e70:	f002 f956 	bl	8004120 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 8001e74:	f002 f984 	bl	8004180 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001e78:	484c      	ldr	r0, [pc, #304]	@ (8001fac <main+0x174>)
 8001e7a:	f006 f891 	bl	8007fa0 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001e7e:	2100      	movs	r1, #0
 8001e80:	484a      	ldr	r0, [pc, #296]	@ (8001fac <main+0x174>)
 8001e82:	f006 fb59 	bl	8008538 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001e86:	2104      	movs	r1, #4
 8001e88:	4848      	ldr	r0, [pc, #288]	@ (8001fac <main+0x174>)
 8001e8a:	f006 fb55 	bl	8008538 <HAL_TIM_IC_Start>
	HAL_TIM_Base_Start(&htim2);
 8001e8e:	4848      	ldr	r0, [pc, #288]	@ (8001fb0 <main+0x178>)
 8001e90:	f006 f886 	bl	8007fa0 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001e94:	2100      	movs	r1, #0
 8001e96:	4846      	ldr	r0, [pc, #280]	@ (8001fb0 <main+0x178>)
 8001e98:	f006 fb4e 	bl	8008538 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	4844      	ldr	r0, [pc, #272]	@ (8001fb0 <main+0x178>)
 8001ea0:	f006 fb4a 	bl	8008538 <HAL_TIM_IC_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001ea4:	213c      	movs	r1, #60	@ 0x3c
 8001ea6:	4843      	ldr	r0, [pc, #268]	@ (8001fb4 <main+0x17c>)
 8001ea8:	f006 fdf4 	bl	8008a94 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001eac:	213c      	movs	r1, #60	@ 0x3c
 8001eae:	4842      	ldr	r0, [pc, #264]	@ (8001fb8 <main+0x180>)
 8001eb0:	f006 fdf0 	bl	8008a94 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001eb4:	4841      	ldr	r0, [pc, #260]	@ (8001fbc <main+0x184>)
 8001eb6:	f006 f8e3 	bl	8008080 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8);
 8001eba:	4841      	ldr	r0, [pc, #260]	@ (8001fc0 <main+0x188>)
 8001ebc:	f006 f870 	bl	8007fa0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001ec0:	2108      	movs	r1, #8
 8001ec2:	483f      	ldr	r0, [pc, #252]	@ (8001fc0 <main+0x188>)
 8001ec4:	f006 f9c2 	bl	800824c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001ec8:	210c      	movs	r1, #12
 8001eca:	483d      	ldr	r0, [pc, #244]	@ (8001fc0 <main+0x188>)
 8001ecc:	f006 f9be 	bl	800824c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim15);
 8001ed0:	483c      	ldr	r0, [pc, #240]	@ (8001fc4 <main+0x18c>)
 8001ed2:	f006 f865 	bl	8007fa0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	483a      	ldr	r0, [pc, #232]	@ (8001fc4 <main+0x18c>)
 8001eda:	f006 f9b7 	bl	800824c <HAL_TIM_PWM_Start>
	//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
	DWT_Init();
 8001ede:	f002 fd0f 	bl	8004900 <DWT_Init>

	PID.Kp = 0.1;
 8001ee2:	4a39      	ldr	r2, [pc, #228]	@ (8001fc8 <main+0x190>)
 8001ee4:	4b39      	ldr	r3, [pc, #228]	@ (8001fcc <main+0x194>)
 8001ee6:	6193      	str	r3, [r2, #24]
	PID.Ki = 0.00001;
 8001ee8:	4a37      	ldr	r2, [pc, #220]	@ (8001fc8 <main+0x190>)
 8001eea:	4b39      	ldr	r3, [pc, #228]	@ (8001fd0 <main+0x198>)
 8001eec:	61d3      	str	r3, [r2, #28]
	PID.Kd = 0.1;
 8001eee:	4a36      	ldr	r2, [pc, #216]	@ (8001fc8 <main+0x190>)
 8001ef0:	4b36      	ldr	r3, [pc, #216]	@ (8001fcc <main+0x194>)
 8001ef2:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4834      	ldr	r0, [pc, #208]	@ (8001fc8 <main+0x190>)
 8001ef8:	f00a fc40 	bl	800c77c <arm_pid_init_f32>

	Reset_R();
 8001efc:	f003 f94a 	bl	8005194 <Reset_R>
	Reset_P();
 8001f00:	f003 f958 	bl	80051b4 <Reset_P>
	calibState = CALIB_IDLE;
 8001f04:	4a33      	ldr	r2, [pc, #204]	@ (8001fd4 <main+0x19c>)
 8001f06:	2300      	movs	r3, #0
 8001f08:	7013      	strb	r3, [r2, #0]

	Set_Servo(0);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f003 f918 	bl	8005140 <Set_Servo>

	// BaseSystem//////////
	hmodbus.huart = &huart2;
 8001f10:	4a31      	ldr	r2, [pc, #196]	@ (8001fd8 <main+0x1a0>)
 8001f12:	4b32      	ldr	r3, [pc, #200]	@ (8001fdc <main+0x1a4>)
 8001f14:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim16;
 8001f16:	4a30      	ldr	r2, [pc, #192]	@ (8001fd8 <main+0x1a0>)
 8001f18:	4b31      	ldr	r3, [pc, #196]	@ (8001fe0 <main+0x1a8>)
 8001f1a:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8001f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd8 <main+0x1a0>)
 8001f1e:	2315      	movs	r3, #21
 8001f20:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8001f22:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd8 <main+0x1a0>)
 8001f24:	23c8      	movs	r3, #200	@ 0xc8
 8001f26:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001f28:	492e      	ldr	r1, [pc, #184]	@ (8001fe4 <main+0x1ac>)
 8001f2a:	482b      	ldr	r0, [pc, #172]	@ (8001fd8 <main+0x1a0>)
 8001f2c:	f7ff f91e 	bl	800116c <Modbus_init>
	ResetAllTargets;
	REG16(REG_MOTION_STATUS) = 0;
 8001f30:	4a2c      	ldr	r2, [pc, #176]	@ (8001fe4 <main+0x1ac>)
 8001f32:	2300      	movs	r3, #0
 8001f34:	8413      	strh	r3, [r2, #32]
	Set_Motor(0, 0);
 8001f36:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001fe8 <main+0x1b0>
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f003 f882 	bl	8005044 <Set_Motor>
	Set_Motor(1, 0);
 8001f40:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8001fe8 <main+0x1b0>
 8001f44:	2001      	movs	r0, #1
 8001f46:	f003 f87d 	bl	8005044 <Set_Motor>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//////////////////////// <<BaseSystem>> /////////////////////////
		if (!Test_no_BaseSystem && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 8001f4a:	4b28      	ldr	r3, [pc, #160]	@ (8001fec <main+0x1b4>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	f083 0301 	eor.w	r3, r3, #1
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <main+0x136>
 8001f58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f5c:	4824      	ldr	r0, [pc, #144]	@ (8001ff0 <main+0x1b8>)
 8001f5e:	f004 ff43 	bl	8006de8 <HAL_GPIO_ReadPin>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d102      	bne.n	8001f6e <main+0x136>
			Test_no_BaseSystem = true;
 8001f68:	4a20      	ldr	r2, [pc, #128]	@ (8001fec <main+0x1b4>)
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	7013      	strb	r3, [r2, #0]
		}

		base_status = REG16(REG_BASE_STATUS);
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe4 <main+0x1ac>)
 8001f70:	885b      	ldrh	r3, [r3, #2]
 8001f72:	4a20      	ldr	r2, [pc, #128]	@ (8001ff4 <main+0x1bc>)
 8001f74:	8013      	strh	r3, [r2, #0]
		if (EmergencyState == 0) {
 8001f76:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <main+0x1c0>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d14e      	bne.n	800201c <main+0x1e4>
			switch (base_status) {
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff4 <main+0x1bc>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d00e      	beq.n	8001fa4 <main+0x16c>
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	dc38      	bgt.n	8001ffc <main+0x1c4>
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d002      	beq.n	8001f94 <main+0x15c>
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d004      	beq.n	8001f9c <main+0x164>
			case 4: // Run Point Mode
				REG16(REG_MOTION_STATUS) = 4;
				break;

			default:
				break;
 8001f92:	e033      	b.n	8001ffc <main+0x1c4>
				REG16(REG_MOTION_STATUS) = 1;
 8001f94:	4a13      	ldr	r2, [pc, #76]	@ (8001fe4 <main+0x1ac>)
 8001f96:	2301      	movs	r3, #1
 8001f98:	8413      	strh	r3, [r2, #32]
				break;
 8001f9a:	e030      	b.n	8001ffe <main+0x1c6>
				REG16(REG_MOTION_STATUS) = 2;
 8001f9c:	4a11      	ldr	r2, [pc, #68]	@ (8001fe4 <main+0x1ac>)
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	8413      	strh	r3, [r2, #32]
				break;
 8001fa2:	e02c      	b.n	8001ffe <main+0x1c6>
				REG16(REG_MOTION_STATUS) = 4;
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <main+0x1ac>)
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	8413      	strh	r3, [r2, #32]
				break;
 8001faa:	e028      	b.n	8001ffe <main+0x1c6>
 8001fac:	200002b0 	.word	0x200002b0
 8001fb0:	2000037c 	.word	0x2000037c
 8001fb4:	20000448 	.word	0x20000448
 8001fb8:	20000514 	.word	0x20000514
 8001fbc:	200005e0 	.word	0x200005e0
 8001fc0:	200006ac 	.word	0x200006ac
 8001fc4:	20000778 	.word	0x20000778
 8001fc8:	20000bd4 	.word	0x20000bd4
 8001fcc:	3dcccccd 	.word	0x3dcccccd
 8001fd0:	3727c5ac 	.word	0x3727c5ac
 8001fd4:	20000c24 	.word	0x20000c24
 8001fd8:	20000c50 	.word	0x20000c50
 8001fdc:	20000910 	.word	0x20000910
 8001fe0:	20000844 	.word	0x20000844
 8001fe4:	20001128 	.word	0x20001128
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	20000c43 	.word	0x20000c43
 8001ff0:	48000800 	.word	0x48000800
 8001ff4:	200012b8 	.word	0x200012b8
 8001ff8:	20000bce 	.word	0x20000bce
				break;
 8001ffc:	bf00      	nop
			}
			if (Pen_BaseSystem != Last_Pen_BaseSystem) {
 8001ffe:	4bab      	ldr	r3, [pc, #684]	@ (80022ac <main+0x474>)
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	4bab      	ldr	r3, [pc, #684]	@ (80022b0 <main+0x478>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d008      	beq.n	800201c <main+0x1e4>
				Set_Servo(Pen_BaseSystem);
 800200a:	4ba8      	ldr	r3, [pc, #672]	@ (80022ac <main+0x474>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f003 f896 	bl	8005140 <Set_Servo>
				Last_Pen_BaseSystem = Pen_BaseSystem;
 8002014:	4ba5      	ldr	r3, [pc, #660]	@ (80022ac <main+0x474>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4aa5      	ldr	r2, [pc, #660]	@ (80022b0 <main+0x478>)
 800201a:	7013      	strb	r3, [r2, #0]
			}
		}
		//		RD_Velo_Error = R_Velo_Error * (M_PI / 180.0f);
		Modbus_Protocal_Worker();
 800201c:	f7ff f980 	bl	8001320 <Modbus_Protocal_Worker>
		//////////////////////////////////////////////////////////////

		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8002020:	4ba4      	ldr	r3, [pc, #656]	@ (80022b4 <main+0x47c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002026:	4ba4      	ldr	r3, [pc, #656]	@ (80022b8 <main+0x480>)
 8002028:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 800202a:	4ba4      	ldr	r3, [pc, #656]	@ (80022bc <main+0x484>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002030:	4ba3      	ldr	r3, [pc, #652]	@ (80022c0 <main+0x488>)
 8002032:	601a      	str	r2, [r3, #0]
		// Call every 0.001 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 8002034:	f002 fd52 	bl	8004adc <micros>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		if (currentTime > timestamp) {
 8002040:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002044:	4b9f      	ldr	r3, [pc, #636]	@ (80022c4 <main+0x48c>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	4282      	cmp	r2, r0
 800204c:	418b      	sbcs	r3, r1
 800204e:	d210      	bcs.n	8002072 <main+0x23a>
			timestamp = currentTime + 1000; // us
 8002050:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8002054:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8002058:	64b9      	str	r1, [r7, #72]	@ 0x48
 800205a:	f143 0300 	adc.w	r3, r3, #0
 800205e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002060:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002064:	4b97      	ldr	r3, [pc, #604]	@ (80022c4 <main+0x48c>)
 8002066:	e9c3 0100 	strd	r0, r1, [r3]
			Revolute_PosVel_Update();
 800206a:	f002 fe1d 	bl	8004ca8 <Revolute_PosVel_Update>
			Prismatic_PosVel_Update();
 800206e:	f002 ff25 	bl	8004ebc <Prismatic_PosVel_Update>
		}
		// Call every 0.01 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 8002072:	f002 fd33 	bl	8004adc <micros>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
		if (currentTime1 > timestamp1) {
 800207e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8002082:	4b91      	ldr	r3, [pc, #580]	@ (80022c8 <main+0x490>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	4282      	cmp	r2, r0
 800208a:	418b      	sbcs	r3, r1
 800208c:	d20d      	bcs.n	80020aa <main+0x272>
			timestamp1 = currentTime1 + 10000; // us
 800208e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8002092:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002096:	1851      	adds	r1, r2, r1
 8002098:	6439      	str	r1, [r7, #64]	@ 0x40
 800209a:	f143 0300 	adc.w	r3, r3, #0
 800209e:	647b      	str	r3, [r7, #68]	@ 0x44
 80020a0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80020a4:	4b88      	ldr	r3, [pc, #544]	@ (80022c8 <main+0x490>)
 80020a6:	e9c3 0100 	strd	r0, r1, [r3]
		}
		// Call every 0.1 s
		static uint64_t timestamp2 = 0;
		int64_t currentTime2 = micros();
 80020aa:	f002 fd17 	bl	8004adc <micros>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		if (currentTime2 > timestamp2) {
 80020b6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80020ba:	4b84      	ldr	r3, [pc, #528]	@ (80022cc <main+0x494>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	4282      	cmp	r2, r0
 80020c2:	418b      	sbcs	r3, r1
 80020c4:	d20c      	bcs.n	80020e0 <main+0x2a8>
			timestamp2 = currentTime2 + 100000; // us
 80020c6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80020ca:	4981      	ldr	r1, [pc, #516]	@ (80022d0 <main+0x498>)
 80020cc:	1851      	adds	r1, r2, r1
 80020ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80020d0:	f143 0300 	adc.w	r3, r3, #0
 80020d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80020da:	4b7c      	ldr	r3, [pc, #496]	@ (80022cc <main+0x494>)
 80020dc:	e9c3 0100 	strd	r0, r1, [r3]
		}
		End_x = Prismatic_QEIdata.mmPosition
 80020e0:	4b7c      	ldr	r3, [pc, #496]	@ (80022d4 <main+0x49c>)
 80020e2:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
				* cosf(Revolute_QEIdata.RadPosition * -1);
 80020e6:	4b7c      	ldr	r3, [pc, #496]	@ (80022d8 <main+0x4a0>)
 80020e8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80020ec:	eef1 7a67 	vneg.f32	s15, s15
 80020f0:	eeb0 0a67 	vmov.f32	s0, s15
 80020f4:	f00a fbd8 	bl	800c8a8 <cosf>
 80020f8:	eef0 7a40 	vmov.f32	s15, s0
 80020fc:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_x = Prismatic_QEIdata.mmPosition
 8002100:	4b76      	ldr	r3, [pc, #472]	@ (80022dc <main+0x4a4>)
 8002102:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition
 8002106:	4b73      	ldr	r3, [pc, #460]	@ (80022d4 <main+0x49c>)
 8002108:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
				* sinf(Revolute_QEIdata.RadPosition);
 800210c:	4b72      	ldr	r3, [pc, #456]	@ (80022d8 <main+0x4a0>)
 800210e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002112:	eeb0 0a67 	vmov.f32	s0, s15
 8002116:	f00a fc0b 	bl	800c930 <sinf>
 800211a:	eef0 7a40 	vmov.f32	s15, s0
 800211e:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_y = Prismatic_QEIdata.mmPosition
 8002122:	4b6f      	ldr	r3, [pc, #444]	@ (80022e0 <main+0x4a8>)
 8002124:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8002128:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800212c:	486d      	ldr	r0, [pc, #436]	@ (80022e4 <main+0x4ac>)
 800212e:	f004 fe5b 	bl	8006de8 <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10e      	bne.n	8002156 <main+0x31e>
			Mode = 0;
 8002138:	4a6b      	ldr	r2, [pc, #428]	@ (80022e8 <main+0x4b0>)
 800213a:	2300      	movs	r3, #0
 800213c:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 800213e:	4a6b      	ldr	r2, [pc, #428]	@ (80022ec <main+0x4b4>)
 8002140:	2301      	movs	r3, #1
 8002142:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 8002144:	2000      	movs	r0, #0
 8002146:	f002 fffb 	bl	8005140 <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 800214a:	2201      	movs	r2, #1
 800214c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002150:	4864      	ldr	r0, [pc, #400]	@ (80022e4 <main+0x4ac>)
 8002152:	f004 fe61 	bl	8006e18 <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1) {
 8002156:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800215a:	4865      	ldr	r0, [pc, #404]	@ (80022f0 <main+0x4b8>)
 800215c:	f004 fe44 	bl	8006de8 <HAL_GPIO_ReadPin>
 8002160:	4603      	mov	r3, r0
 8002162:	2b01      	cmp	r3, #1
 8002164:	d108      	bne.n	8002178 <main+0x340>
			EmergencyState = 0;
 8002166:	4a61      	ldr	r2, [pc, #388]	@ (80022ec <main+0x4b4>)
 8002168:	2300      	movs	r3, #0
 800216a:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002172:	485c      	ldr	r0, [pc, #368]	@ (80022e4 <main+0x4ac>)
 8002174:	f004 fe50 	bl	8006e18 <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 8002178:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800217c:	485c      	ldr	r0, [pc, #368]	@ (80022f0 <main+0x4b8>)
 800217e:	f004 fe33 	bl	8006de8 <HAL_GPIO_ReadPin>
 8002182:	4603      	mov	r3, r0
 8002184:	2b01      	cmp	r3, #1
 8002186:	d102      	bne.n	800218e <main+0x356>
			Pen_Status = 0;
 8002188:	4a5a      	ldr	r2, [pc, #360]	@ (80022f4 <main+0x4bc>)
 800218a:	2300      	movs	r3, #0
 800218c:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1) {
 800218e:	2104      	movs	r1, #4
 8002190:	4857      	ldr	r0, [pc, #348]	@ (80022f0 <main+0x4b8>)
 8002192:	f004 fe29 	bl	8006de8 <HAL_GPIO_ReadPin>
 8002196:	4603      	mov	r3, r0
 8002198:	2b01      	cmp	r3, #1
 800219a:	d102      	bne.n	80021a2 <main+0x36a>
			Pen_Status = 1;
 800219c:	4a55      	ldr	r2, [pc, #340]	@ (80022f4 <main+0x4bc>)
 800219e:	2301      	movs	r3, #1
 80021a0:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 80021a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021aa:	f004 fe1d 	bl	8006de8 <HAL_GPIO_ReadPin>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d103      	bne.n	80021bc <main+0x384>
			z_temp = 1;
 80021b4:	4a50      	ldr	r2, [pc, #320]	@ (80022f8 <main+0x4c0>)
 80021b6:	2301      	movs	r3, #1
 80021b8:	7013      	strb	r3, [r2, #0]
 80021ba:	e00b      	b.n	80021d4 <main+0x39c>
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0) {
 80021bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c4:	f004 fe10 	bl	8006de8 <HAL_GPIO_ReadPin>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <main+0x39c>
			z_temp = 0;
 80021ce:	4a4a      	ldr	r2, [pc, #296]	@ (80022f8 <main+0x4c0>)
 80021d0:	2300      	movs	r3, #0
 80021d2:	7013      	strb	r3, [r2, #0]
		}

		//////////////////////////////////////////////////////////////
		if (EmergencyState == 1) {
 80021d4:	4b45      	ldr	r3, [pc, #276]	@ (80022ec <main+0x4b4>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d102      	bne.n	80021e2 <main+0x3aa>
			REG16(REG_MOTION_STATUS) = 0;
 80021dc:	4a47      	ldr	r2, [pc, #284]	@ (80022fc <main+0x4c4>)
 80021de:	2300      	movs	r3, #0
 80021e0:	8413      	strh	r3, [r2, #32]
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<GOTO>> ////////////////////////////
		if ((Mode == 2 && (base_status == 2 || Test_no_BaseSystem))
 80021e2:	4b41      	ldr	r3, [pc, #260]	@ (80022e8 <main+0x4b0>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d107      	bne.n	80021fa <main+0x3c2>
 80021ea:	4b45      	ldr	r3, [pc, #276]	@ (8002300 <main+0x4c8>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d008      	beq.n	8002204 <main+0x3cc>
 80021f2:	4b44      	ldr	r3, [pc, #272]	@ (8002304 <main+0x4cc>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d104      	bne.n	8002204 <main+0x3cc>
				|| base_status == 8) {
 80021fa:	4b41      	ldr	r3, [pc, #260]	@ (8002300 <main+0x4c8>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	2b08      	cmp	r3, #8
 8002200:	f040 8096 	bne.w	8002330 <main+0x4f8>
			calculateOvershoot();
 8002204:	f002 f942 	bl	800448c <calculateOvershoot>

			if (base_status == 8) {
 8002208:	4b3d      	ldr	r3, [pc, #244]	@ (8002300 <main+0x4c8>)
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	2b08      	cmp	r3, #8
 800220e:	d102      	bne.n	8002216 <main+0x3de>
				REG16(REG_MOTION_STATUS) = 8;
 8002210:	4a3a      	ldr	r2, [pc, #232]	@ (80022fc <main+0x4c4>)
 8002212:	2308      	movs	r3, #8
 8002214:	8413      	strh	r3, [r2, #32]
			}

			if (base_status == 8) {
 8002216:	4b3a      	ldr	r3, [pc, #232]	@ (8002300 <main+0x4c8>)
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	2b08      	cmp	r3, #8
 800221c:	d108      	bne.n	8002230 <main+0x3f8>
				TargetR = TargetR_BaseSystem;
 800221e:	4b3a      	ldr	r3, [pc, #232]	@ (8002308 <main+0x4d0>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b3a      	ldr	r3, [pc, #232]	@ (800230c <main+0x4d4>)
 8002224:	601a      	str	r2, [r3, #0]
				TargetP = TargetP_BaseSystem;
 8002226:	4b3a      	ldr	r3, [pc, #232]	@ (8002310 <main+0x4d8>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b3a      	ldr	r3, [pc, #232]	@ (8002314 <main+0x4dc>)
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e016      	b.n	800225e <main+0x426>
			} else if (TenPointMode) {
 8002230:	4b39      	ldr	r3, [pc, #228]	@ (8002318 <main+0x4e0>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d012      	beq.n	800225e <main+0x426>
				TargetR = TenPointArray[(counter * 2) + 1];
 8002238:	4b38      	ldr	r3, [pc, #224]	@ (800231c <main+0x4e4>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	3301      	adds	r3, #1
 8002240:	4a37      	ldr	r2, [pc, #220]	@ (8002320 <main+0x4e8>)
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b30      	ldr	r3, [pc, #192]	@ (800230c <main+0x4d4>)
 800224a:	601a      	str	r2, [r3, #0]
				TargetP = TenPointArray[counter * 2];
 800224c:	4b33      	ldr	r3, [pc, #204]	@ (800231c <main+0x4e4>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4a33      	ldr	r2, [pc, #204]	@ (8002320 <main+0x4e8>)
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	4b2e      	ldr	r3, [pc, #184]	@ (8002314 <main+0x4dc>)
 800225c:	601a      	str	r2, [r3, #0]
			}

			if (CascadeControl_Step()) {
 800225e:	f003 fb73 	bl	8005948 <CascadeControl_Step>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d063      	beq.n	8002330 <main+0x4f8>
				if (base_status == 8) {
 8002268:	4b25      	ldr	r3, [pc, #148]	@ (8002300 <main+0x4c8>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d106      	bne.n	800227e <main+0x446>
					REG16(REG_MOTION_STATUS) = 0;
 8002270:	4a22      	ldr	r2, [pc, #136]	@ (80022fc <main+0x4c4>)
 8002272:	2300      	movs	r3, #0
 8002274:	8413      	strh	r3, [r2, #32]
					REG16(REG_BASE_STATUS) = 0;
 8002276:	4a21      	ldr	r2, [pc, #132]	@ (80022fc <main+0x4c4>)
 8002278:	2300      	movs	r3, #0
 800227a:	8053      	strh	r3, [r2, #2]
 800227c:	e058      	b.n	8002330 <main+0x4f8>
				} else {
					if (PenDelay()) {
 800227e:	f002 fa73 	bl	8004768 <PenDelay>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d053      	beq.n	8002330 <main+0x4f8>
						if (TenPointMode) {
 8002288:	4b23      	ldr	r3, [pc, #140]	@ (8002318 <main+0x4e0>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d04f      	beq.n	8002330 <main+0x4f8>
							if (counter == 9) {
 8002290:	4b22      	ldr	r3, [pc, #136]	@ (800231c <main+0x4e4>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b09      	cmp	r3, #9
 8002296:	d145      	bne.n	8002324 <main+0x4ec>
								TenPointMode = false;
 8002298:	4a1f      	ldr	r2, [pc, #124]	@ (8002318 <main+0x4e0>)
 800229a:	2300      	movs	r3, #0
 800229c:	7013      	strb	r3, [r2, #0]
								counter = 0;
 800229e:	4a1f      	ldr	r2, [pc, #124]	@ (800231c <main+0x4e4>)
 80022a0:	2300      	movs	r3, #0
 80022a2:	7013      	strb	r3, [r2, #0]
								Mode = 1;
 80022a4:	4a10      	ldr	r2, [pc, #64]	@ (80022e8 <main+0x4b0>)
 80022a6:	2301      	movs	r3, #1
 80022a8:	7013      	strb	r3, [r2, #0]
 80022aa:	e041      	b.n	8002330 <main+0x4f8>
 80022ac:	20000c4c 	.word	0x20000c4c
 80022b0:	20000c4d 	.word	0x20000c4d
 80022b4:	20000514 	.word	0x20000514
 80022b8:	20000af0 	.word	0x20000af0
 80022bc:	20000448 	.word	0x20000448
 80022c0:	20000af4 	.word	0x20000af4
 80022c4:	200013b8 	.word	0x200013b8
 80022c8:	200013c0 	.word	0x200013c0
 80022cc:	200013c8 	.word	0x200013c8
 80022d0:	000186a0 	.word	0x000186a0
 80022d4:	20000b38 	.word	0x20000b38
 80022d8:	20000af8 	.word	0x20000af8
 80022dc:	20000b84 	.word	0x20000b84
 80022e0:	20000b88 	.word	0x20000b88
 80022e4:	48000800 	.word	0x48000800
 80022e8:	20000bcc 	.word	0x20000bcc
 80022ec:	20000bce 	.word	0x20000bce
 80022f0:	48000400 	.word	0x48000400
 80022f4:	20000bd0 	.word	0x20000bd0
 80022f8:	20000b79 	.word	0x20000b79
 80022fc:	20001128 	.word	0x20001128
 8002300:	200012b8 	.word	0x200012b8
 8002304:	20000c43 	.word	0x20000c43
 8002308:	20000c44 	.word	0x20000c44
 800230c:	20000b94 	.word	0x20000b94
 8002310:	20000c48 	.word	0x20000c48
 8002314:	20000b98 	.word	0x20000b98
 8002318:	20000c42 	.word	0x20000c42
 800231c:	20000c41 	.word	0x20000c41
 8002320:	200012bc 	.word	0x200012bc
							} else {
								counter++;
 8002324:	4bc0      	ldr	r3, [pc, #768]	@ (8002628 <main+0x7f0>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	3301      	adds	r3, #1
 800232a:	b2db      	uxtb	r3, r3
 800232c:	4abe      	ldr	r2, [pc, #760]	@ (8002628 <main+0x7f0>)
 800232e:	7013      	strb	r3, [r2, #0]
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<CALIBRATING>> /////////////////////
		if ((Mode == 3 && (base_status == 2 || Test_no_BaseSystem))
 8002330:	4bbe      	ldr	r3, [pc, #760]	@ (800262c <main+0x7f4>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d107      	bne.n	8002348 <main+0x510>
 8002338:	4bbd      	ldr	r3, [pc, #756]	@ (8002630 <main+0x7f8>)
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d008      	beq.n	8002352 <main+0x51a>
 8002340:	4bbc      	ldr	r3, [pc, #752]	@ (8002634 <main+0x7fc>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d104      	bne.n	8002352 <main+0x51a>
				|| base_status == 1) {
 8002348:	4bb9      	ldr	r3, [pc, #740]	@ (8002630 <main+0x7f8>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	2b01      	cmp	r3, #1
 800234e:	f040 8259 	bne.w	8002804 <main+0x9cc>
			switch (calibState) {
 8002352:	4bb9      	ldr	r3, [pc, #740]	@ (8002638 <main+0x800>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b0c      	cmp	r3, #12
 8002358:	f200 8254 	bhi.w	8002804 <main+0x9cc>
 800235c:	a201      	add	r2, pc, #4	@ (adr r2, 8002364 <main+0x52c>)
 800235e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002362:	bf00      	nop
 8002364:	08002399 	.word	0x08002399
 8002368:	080023cf 	.word	0x080023cf
 800236c:	08002415 	.word	0x08002415
 8002370:	0800245f 	.word	0x0800245f
 8002374:	080024a9 	.word	0x080024a9
 8002378:	080024f7 	.word	0x080024f7
 800237c:	08002543 	.word	0x08002543
 8002380:	08002583 	.word	0x08002583
 8002384:	080025e1 	.word	0x080025e1
 8002388:	08002693 	.word	0x08002693
 800238c:	080026ff 	.word	0x080026ff
 8002390:	0800276f 	.word	0x0800276f
 8002394:	080027b1 	.word	0x080027b1
			case CALIB_IDLE:
				Set_Motor(0, 0);
 8002398:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 800263c <main+0x804>
 800239c:	2000      	movs	r0, #0
 800239e:	f002 fe51 	bl	8005044 <Set_Motor>
				Set_Motor(1, 0);
 80023a2:	ed9f 0aa6 	vldr	s0, [pc, #664]	@ 800263c <main+0x804>
 80023a6:	2001      	movs	r0, #1
 80023a8:	f002 fe4c 	bl	8005044 <Set_Motor>
				P_Limit = 0;
 80023ac:	4aa4      	ldr	r2, [pc, #656]	@ (8002640 <main+0x808>)
 80023ae:	2300      	movs	r3, #0
 80023b0:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 80023b2:	4aa4      	ldr	r2, [pc, #656]	@ (8002644 <main+0x80c>)
 80023b4:	2300      	movs	r3, #0
 80023b6:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 80023b8:	4a9f      	ldr	r2, [pc, #636]	@ (8002638 <main+0x800>)
 80023ba:	2301      	movs	r3, #1
 80023bc:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 80023be:	f002 fb8d 	bl	8004adc <micros>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	49a0      	ldr	r1, [pc, #640]	@ (8002648 <main+0x810>)
 80023c8:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 80023cc:	e21a      	b.n	8002804 <main+0x9cc>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80) {
 80023ce:	4b9f      	ldr	r3, [pc, #636]	@ (800264c <main+0x814>)
 80023d0:	edd3 7a00 	vldr	s15, [r3]
 80023d4:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8002650 <main+0x818>
 80023d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e0:	dd06      	ble.n	80023f0 <main+0x5b8>
					Cal_Side = 1;
 80023e2:	4a9c      	ldr	r2, [pc, #624]	@ (8002654 <main+0x81c>)
 80023e4:	2301      	movs	r3, #1
 80023e6:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 80023e8:	4a93      	ldr	r2, [pc, #588]	@ (8002638 <main+0x800>)
 80023ea:	2302      	movs	r3, #2
 80023ec:	7013      	strb	r3, [r2, #0]
				} else if (Receiver[0] < -80) {
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 80023ee:	e209      	b.n	8002804 <main+0x9cc>
				} else if (Receiver[0] < -80) {
 80023f0:	4b96      	ldr	r3, [pc, #600]	@ (800264c <main+0x814>)
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8002658 <main+0x820>
 80023fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	d400      	bmi.n	8002406 <main+0x5ce>
				break;
 8002404:	e1fe      	b.n	8002804 <main+0x9cc>
					Cal_Side = 2;
 8002406:	4a93      	ldr	r2, [pc, #588]	@ (8002654 <main+0x81c>)
 8002408:	2302      	movs	r3, #2
 800240a:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 800240c:	4a8a      	ldr	r2, [pc, #552]	@ (8002638 <main+0x800>)
 800240e:	2302      	movs	r3, #2
 8002410:	7013      	strb	r3, [r2, #0]
				break;
 8002412:	e1f7      	b.n	8002804 <main+0x9cc>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -30);
 8002414:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002418:	2001      	movs	r0, #1
 800241a:	f002 fe13 	bl	8005044 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 800241e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002422:	488e      	ldr	r0, [pc, #568]	@ (800265c <main+0x824>)
 8002424:	f004 fce0 	bl	8006de8 <HAL_GPIO_ReadPin>
 8002428:	4603      	mov	r3, r0
 800242a:	2b01      	cmp	r3, #1
 800242c:	d004      	beq.n	8002438 <main+0x600>
 800242e:	4b84      	ldr	r3, [pc, #528]	@ (8002640 <main+0x808>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 81d3 	beq.w	80027de <main+0x9a6>
					Set_Motor(1, 0);
 8002438:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 800263c <main+0x804>
 800243c:	2001      	movs	r0, #1
 800243e:	f002 fe01 	bl	8005044 <Set_Motor>
					calib_timer = micros();
 8002442:	f002 fb4b 	bl	8004adc <micros>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	497f      	ldr	r1, [pc, #508]	@ (8002648 <main+0x810>)
 800244c:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002450:	4a7b      	ldr	r2, [pc, #492]	@ (8002640 <main+0x808>)
 8002452:	2300      	movs	r3, #0
 8002454:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 8002456:	4a78      	ldr	r2, [pc, #480]	@ (8002638 <main+0x800>)
 8002458:	2303      	movs	r3, #3
 800245a:	7013      	strb	r3, [r2, #0]
				}
				break;
 800245c:	e1bf      	b.n	80027de <main+0x9a6>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 800245e:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 800263c <main+0x804>
 8002462:	2001      	movs	r0, #1
 8002464:	f002 fdee 	bl	8005044 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002468:	f002 fb38 	bl	8004adc <micros>
 800246c:	4b76      	ldr	r3, [pc, #472]	@ (8002648 <main+0x810>)
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	ebb0 0802 	subs.w	r8, r0, r2
 8002476:	eb61 0903 	sbc.w	r9, r1, r3
 800247a:	4b79      	ldr	r3, [pc, #484]	@ (8002660 <main+0x828>)
 800247c:	4598      	cmp	r8, r3
 800247e:	f179 0300 	sbcs.w	r3, r9, #0
 8002482:	d311      	bcc.n	80024a8 <main+0x670>
					Set_Motor(1, 30);
 8002484:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002488:	2001      	movs	r0, #1
 800248a:	f002 fddb 	bl	8005044 <Set_Motor>
					calib_timer = micros();
 800248e:	f002 fb25 	bl	8004adc <micros>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	496c      	ldr	r1, [pc, #432]	@ (8002648 <main+0x810>)
 8002498:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 800249c:	4a68      	ldr	r2, [pc, #416]	@ (8002640 <main+0x808>)
 800249e:	2300      	movs	r3, #0
 80024a0:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 80024a2:	4a65      	ldr	r2, [pc, #404]	@ (8002638 <main+0x800>)
 80024a4:	2304      	movs	r3, #4
 80024a6:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 30);
 80024a8:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 80024ac:	2001      	movs	r0, #1
 80024ae:	f002 fdc9 	bl	8005044 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 80024b2:	f002 fb13 	bl	8004adc <micros>
 80024b6:	4b64      	ldr	r3, [pc, #400]	@ (8002648 <main+0x810>)
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	ebb0 0a02 	subs.w	sl, r0, r2
 80024c0:	eb61 0b03 	sbc.w	fp, r1, r3
 80024c4:	4b66      	ldr	r3, [pc, #408]	@ (8002660 <main+0x828>)
 80024c6:	459a      	cmp	sl, r3
 80024c8:	f17b 0300 	sbcs.w	r3, fp, #0
 80024cc:	f0c0 8189 	bcc.w	80027e2 <main+0x9aa>
					Set_Motor(1, 0);
 80024d0:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 800263c <main+0x804>
 80024d4:	2001      	movs	r0, #1
 80024d6:	f002 fdb5 	bl	8005044 <Set_Motor>
					calib_timer = micros();
 80024da:	f002 faff 	bl	8004adc <micros>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4959      	ldr	r1, [pc, #356]	@ (8002648 <main+0x810>)
 80024e4:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80024e8:	4a55      	ldr	r2, [pc, #340]	@ (8002640 <main+0x808>)
 80024ea:	2300      	movs	r3, #0
 80024ec:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 80024ee:	4a52      	ldr	r2, [pc, #328]	@ (8002638 <main+0x800>)
 80024f0:	2305      	movs	r3, #5
 80024f2:	7013      	strb	r3, [r2, #0]
				}
				break;
 80024f4:	e175      	b.n	80027e2 <main+0x9aa>

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 80024f6:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 800263c <main+0x804>
 80024fa:	2001      	movs	r0, #1
 80024fc:	f002 fda2 	bl	8005044 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002500:	f002 faec 	bl	8004adc <micros>
 8002504:	4b50      	ldr	r3, [pc, #320]	@ (8002648 <main+0x810>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	1a85      	subs	r5, r0, r2
 800250c:	eb61 0603 	sbc.w	r6, r1, r3
 8002510:	4b53      	ldr	r3, [pc, #332]	@ (8002660 <main+0x828>)
 8002512:	429d      	cmp	r5, r3
 8002514:	f176 0300 	sbcs.w	r3, r6, #0
 8002518:	f0c0 8165 	bcc.w	80027e6 <main+0x9ae>
					Set_Motor(1, -20);
 800251c:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 8002520:	2001      	movs	r0, #1
 8002522:	f002 fd8f 	bl	8005044 <Set_Motor>
					calib_timer = micros();
 8002526:	f002 fad9 	bl	8004adc <micros>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4946      	ldr	r1, [pc, #280]	@ (8002648 <main+0x810>)
 8002530:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002534:	4a42      	ldr	r2, [pc, #264]	@ (8002640 <main+0x808>)
 8002536:	2300      	movs	r3, #0
 8002538:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 800253a:	4a3f      	ldr	r2, [pc, #252]	@ (8002638 <main+0x800>)
 800253c:	2306      	movs	r3, #6
 800253e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002540:	e151      	b.n	80027e6 <main+0x9ae>

			case CALIB_RETOUCH_P:
				Set_Motor(1, -20);
 8002542:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 8002546:	2001      	movs	r0, #1
 8002548:	f002 fd7c 	bl	8005044 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 800254c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002550:	4842      	ldr	r0, [pc, #264]	@ (800265c <main+0x824>)
 8002552:	f004 fc49 	bl	8006de8 <HAL_GPIO_ReadPin>
 8002556:	4603      	mov	r3, r0
 8002558:	2b01      	cmp	r3, #1
 800255a:	d004      	beq.n	8002566 <main+0x72e>
 800255c:	4b38      	ldr	r3, [pc, #224]	@ (8002640 <main+0x808>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 8142 	beq.w	80027ea <main+0x9b2>
					Set_Motor(1, 0);
 8002566:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800263c <main+0x804>
 800256a:	2001      	movs	r0, #1
 800256c:	f002 fd6a 	bl	8005044 <Set_Motor>
					Reset_P();
 8002570:	f002 fe20 	bl	80051b4 <Reset_P>
					P_Limit = 0;
 8002574:	4a32      	ldr	r2, [pc, #200]	@ (8002640 <main+0x808>)
 8002576:	2300      	movs	r3, #0
 8002578:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 800257a:	4a2f      	ldr	r2, [pc, #188]	@ (8002638 <main+0x800>)
 800257c:	2307      	movs	r3, #7
 800257e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002580:	e133      	b.n	80027ea <main+0x9b2>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 8002582:	4b34      	ldr	r3, [pc, #208]	@ (8002654 <main+0x81c>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <main+0x75e>
					Set_Motor(0, -50);
 800258a:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8002668 <main+0x830>
 800258e:	2000      	movs	r0, #0
 8002590:	f002 fd58 	bl	8005044 <Set_Motor>
 8002594:	e004      	b.n	80025a0 <main+0x768>
				else
					Set_Motor(0, 50);
 8002596:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8002664 <main+0x82c>
 800259a:	2000      	movs	r0, #0
 800259c:	f002 fd52 	bl	8005044 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 80025a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025a4:	482d      	ldr	r0, [pc, #180]	@ (800265c <main+0x824>)
 80025a6:	f004 fc1f 	bl	8006de8 <HAL_GPIO_ReadPin>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d004      	beq.n	80025ba <main+0x782>
 80025b0:	4b24      	ldr	r3, [pc, #144]	@ (8002644 <main+0x80c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 811a 	beq.w	80027ee <main+0x9b6>
					Set_Motor(0, 0);
 80025ba:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 800263c <main+0x804>
 80025be:	2000      	movs	r0, #0
 80025c0:	f002 fd40 	bl	8005044 <Set_Motor>
					calib_timer = micros();
 80025c4:	f002 fa8a 	bl	8004adc <micros>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	491e      	ldr	r1, [pc, #120]	@ (8002648 <main+0x810>)
 80025ce:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80025d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002644 <main+0x80c>)
 80025d4:	2300      	movs	r3, #0
 80025d6:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 80025d8:	4a17      	ldr	r2, [pc, #92]	@ (8002638 <main+0x800>)
 80025da:	2308      	movs	r3, #8
 80025dc:	7013      	strb	r3, [r2, #0]
				}
				break;
 80025de:	e106      	b.n	80027ee <main+0x9b6>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 80025e0:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800263c <main+0x804>
 80025e4:	2000      	movs	r0, #0
 80025e6:	f002 fd2d 	bl	8005044 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 80025ea:	f002 fa77 	bl	8004adc <micros>
 80025ee:	4b16      	ldr	r3, [pc, #88]	@ (8002648 <main+0x810>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	1a84      	subs	r4, r0, r2
 80025f6:	633c      	str	r4, [r7, #48]	@ 0x30
 80025f8:	eb61 0303 	sbc.w	r3, r1, r3
 80025fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80025fe:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <main+0x828>)
 8002600:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002604:	4602      	mov	r2, r0
 8002606:	429a      	cmp	r2, r3
 8002608:	460b      	mov	r3, r1
 800260a:	f173 0300 	sbcs.w	r3, r3, #0
 800260e:	f0c0 80f0 	bcc.w	80027f2 <main+0x9ba>
					if (Cal_Side == 1)
 8002612:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <main+0x81c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d128      	bne.n	800266c <main+0x834>
						Set_Motor(0, 50);
 800261a:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8002664 <main+0x82c>
 800261e:	2000      	movs	r0, #0
 8002620:	f002 fd10 	bl	8005044 <Set_Motor>
 8002624:	e027      	b.n	8002676 <main+0x83e>
 8002626:	bf00      	nop
 8002628:	20000c41 	.word	0x20000c41
 800262c:	20000bcc 	.word	0x20000bcc
 8002630:	200012b8 	.word	0x200012b8
 8002634:	20000c43 	.word	0x20000c43
 8002638:	20000c24 	.word	0x20000c24
 800263c:	00000000 	.word	0x00000000
 8002640:	20000bd2 	.word	0x20000bd2
 8002644:	20000bd3 	.word	0x20000bd3
 8002648:	20000c28 	.word	0x20000c28
 800264c:	20000ab0 	.word	0x20000ab0
 8002650:	42a00000 	.word	0x42a00000
 8002654:	20000c30 	.word	0x20000c30
 8002658:	c2a00000 	.word	0xc2a00000
 800265c:	48000400 	.word	0x48000400
 8002660:	000186a1 	.word	0x000186a1
 8002664:	42480000 	.word	0x42480000
 8002668:	c2480000 	.word	0xc2480000
					else
						Set_Motor(0, -50);
 800266c:	ed1f 0a02 	vldr	s0, [pc, #-8]	@ 8002668 <main+0x830>
 8002670:	2000      	movs	r0, #0
 8002672:	f002 fce7 	bl	8005044 <Set_Motor>
					calib_timer = micros();
 8002676:	f002 fa31 	bl	8004adc <micros>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	49ba      	ldr	r1, [pc, #744]	@ (8002968 <main+0xb30>)
 8002680:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002684:	4ab9      	ldr	r2, [pc, #740]	@ (800296c <main+0xb34>)
 8002686:	2300      	movs	r3, #0
 8002688:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 800268a:	4ab9      	ldr	r2, [pc, #740]	@ (8002970 <main+0xb38>)
 800268c:	2309      	movs	r3, #9
 800268e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002690:	e0af      	b.n	80027f2 <main+0x9ba>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 8002692:	4bb8      	ldr	r3, [pc, #736]	@ (8002974 <main+0xb3c>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d105      	bne.n	80026a6 <main+0x86e>
					Set_Motor(0, 50);
 800269a:	ed9f 0ab7 	vldr	s0, [pc, #732]	@ 8002978 <main+0xb40>
 800269e:	2000      	movs	r0, #0
 80026a0:	f002 fcd0 	bl	8005044 <Set_Motor>
 80026a4:	e004      	b.n	80026b0 <main+0x878>
				else
					Set_Motor(0, -50);
 80026a6:	ed9f 0ab5 	vldr	s0, [pc, #724]	@ 800297c <main+0xb44>
 80026aa:	2000      	movs	r0, #0
 80026ac:	f002 fcca 	bl	8005044 <Set_Motor>

				if (micros() - calib_timer > 200000) {
 80026b0:	f002 fa14 	bl	8004adc <micros>
 80026b4:	4bac      	ldr	r3, [pc, #688]	@ (8002968 <main+0xb30>)
 80026b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ba:	1a84      	subs	r4, r0, r2
 80026bc:	62bc      	str	r4, [r7, #40]	@ 0x28
 80026be:	eb61 0303 	sbc.w	r3, r1, r3
 80026c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026c4:	4bae      	ldr	r3, [pc, #696]	@ (8002980 <main+0xb48>)
 80026c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026ca:	4602      	mov	r2, r0
 80026cc:	429a      	cmp	r2, r3
 80026ce:	460b      	mov	r3, r1
 80026d0:	f173 0300 	sbcs.w	r3, r3, #0
 80026d4:	f0c0 808f 	bcc.w	80027f6 <main+0x9be>
					Set_Motor(0, 0);
 80026d8:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 8002984 <main+0xb4c>
 80026dc:	2000      	movs	r0, #0
 80026de:	f002 fcb1 	bl	8005044 <Set_Motor>
					calib_timer = micros();
 80026e2:	f002 f9fb 	bl	8004adc <micros>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	499f      	ldr	r1, [pc, #636]	@ (8002968 <main+0xb30>)
 80026ec:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80026f0:	4a9e      	ldr	r2, [pc, #632]	@ (800296c <main+0xb34>)
 80026f2:	2300      	movs	r3, #0
 80026f4:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 80026f6:	4a9e      	ldr	r2, [pc, #632]	@ (8002970 <main+0xb38>)
 80026f8:	230a      	movs	r3, #10
 80026fa:	7013      	strb	r3, [r2, #0]
				}
				break;
 80026fc:	e07b      	b.n	80027f6 <main+0x9be>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 80026fe:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8002984 <main+0xb4c>
 8002702:	2000      	movs	r0, #0
 8002704:	f002 fc9e 	bl	8005044 <Set_Motor>
				Z_index_R = 0;
 8002708:	4a9f      	ldr	r2, [pc, #636]	@ (8002988 <main+0xb50>)
 800270a:	2300      	movs	r3, #0
 800270c:	7013      	strb	r3, [r2, #0]

				if (micros() - calib_timer > 100000) {
 800270e:	f002 f9e5 	bl	8004adc <micros>
 8002712:	4b95      	ldr	r3, [pc, #596]	@ (8002968 <main+0xb30>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	1a84      	subs	r4, r0, r2
 800271a:	623c      	str	r4, [r7, #32]
 800271c:	eb61 0303 	sbc.w	r3, r1, r3
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
 8002722:	4b9a      	ldr	r3, [pc, #616]	@ (800298c <main+0xb54>)
 8002724:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002728:	4602      	mov	r2, r0
 800272a:	429a      	cmp	r2, r3
 800272c:	460b      	mov	r3, r1
 800272e:	f173 0300 	sbcs.w	r3, r3, #0
 8002732:	d362      	bcc.n	80027fa <main+0x9c2>
					if (Cal_Side == 1)
 8002734:	4b8f      	ldr	r3, [pc, #572]	@ (8002974 <main+0xb3c>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d105      	bne.n	8002748 <main+0x910>
						Set_Motor(0, -35);
 800273c:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 8002990 <main+0xb58>
 8002740:	2000      	movs	r0, #0
 8002742:	f002 fc7f 	bl	8005044 <Set_Motor>
 8002746:	e004      	b.n	8002752 <main+0x91a>
					else
						Set_Motor(0, 35);
 8002748:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 8002994 <main+0xb5c>
 800274c:	2000      	movs	r0, #0
 800274e:	f002 fc79 	bl	8005044 <Set_Motor>
					calib_timer = micros();
 8002752:	f002 f9c3 	bl	8004adc <micros>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4983      	ldr	r1, [pc, #524]	@ (8002968 <main+0xb30>)
 800275c:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002760:	4a82      	ldr	r2, [pc, #520]	@ (800296c <main+0xb34>)
 8002762:	2300      	movs	r3, #0
 8002764:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 8002766:	4a82      	ldr	r2, [pc, #520]	@ (8002970 <main+0xb38>)
 8002768:	230b      	movs	r3, #11
 800276a:	7013      	strb	r3, [r2, #0]
				}
				break;
 800276c:	e045      	b.n	80027fa <main+0x9c2>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 800276e:	4b81      	ldr	r3, [pc, #516]	@ (8002974 <main+0xb3c>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d105      	bne.n	8002782 <main+0x94a>
					Set_Motor(0, -35);
 8002776:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8002990 <main+0xb58>
 800277a:	2000      	movs	r0, #0
 800277c:	f002 fc62 	bl	8005044 <Set_Motor>
 8002780:	e004      	b.n	800278c <main+0x954>
				else
					Set_Motor(0, 35);
 8002782:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 8002994 <main+0xb5c>
 8002786:	2000      	movs	r0, #0
 8002788:	f002 fc5c 	bl	8005044 <Set_Motor>

				//				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
				if (Z_index_R > 0) {
 800278c:	4b7e      	ldr	r3, [pc, #504]	@ (8002988 <main+0xb50>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d034      	beq.n	80027fe <main+0x9c6>
					Set_Motor(0, 0);
 8002794:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 8002984 <main+0xb4c>
 8002798:	2000      	movs	r0, #0
 800279a:	f002 fc53 	bl	8005044 <Set_Motor>
					Reset_R();
 800279e:	f002 fcf9 	bl	8005194 <Reset_R>
					R_Limit = 0;
 80027a2:	4a72      	ldr	r2, [pc, #456]	@ (800296c <main+0xb34>)
 80027a4:	2300      	movs	r3, #0
 80027a6:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 80027a8:	4a71      	ldr	r2, [pc, #452]	@ (8002970 <main+0xb38>)
 80027aa:	230c      	movs	r3, #12
 80027ac:	7013      	strb	r3, [r2, #0]
				}
				break;
 80027ae:	e026      	b.n	80027fe <main+0x9c6>

			case CALIB_DONE:
				Cal_Side = 0;
 80027b0:	4a70      	ldr	r2, [pc, #448]	@ (8002974 <main+0xb3c>)
 80027b2:	2300      	movs	r3, #0
 80027b4:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 80027b6:	4a78      	ldr	r2, [pc, #480]	@ (8002998 <main+0xb60>)
 80027b8:	2300      	movs	r3, #0
 80027ba:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 80027bc:	4a77      	ldr	r2, [pc, #476]	@ (800299c <main+0xb64>)
 80027be:	2300      	movs	r3, #0
 80027c0:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 80027c2:	4a6a      	ldr	r2, [pc, #424]	@ (800296c <main+0xb34>)
 80027c4:	2300      	movs	r3, #0
 80027c6:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 80027c8:	4a69      	ldr	r2, [pc, #420]	@ (8002970 <main+0xb38>)
 80027ca:	2300      	movs	r3, #0
 80027cc:	7013      	strb	r3, [r2, #0]
				//////////////////////////////////////////////////////////////
				if (base_status == 1) {
 80027ce:	4b74      	ldr	r3, [pc, #464]	@ (80029a0 <main+0xb68>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d115      	bne.n	8002802 <main+0x9ca>
					REG16(REG_MOTION_STATUS) = 0;
 80027d6:	4a73      	ldr	r2, [pc, #460]	@ (80029a4 <main+0xb6c>)
 80027d8:	2300      	movs	r3, #0
 80027da:	8413      	strh	r3, [r2, #32]
				}
				//////////////////////////////////////////////////////////////
				break;
 80027dc:	e011      	b.n	8002802 <main+0x9ca>
				break;
 80027de:	bf00      	nop
 80027e0:	e010      	b.n	8002804 <main+0x9cc>
				break;
 80027e2:	bf00      	nop
 80027e4:	e00e      	b.n	8002804 <main+0x9cc>
				break;
 80027e6:	bf00      	nop
 80027e8:	e00c      	b.n	8002804 <main+0x9cc>
				break;
 80027ea:	bf00      	nop
 80027ec:	e00a      	b.n	8002804 <main+0x9cc>
				break;
 80027ee:	bf00      	nop
 80027f0:	e008      	b.n	8002804 <main+0x9cc>
				break;
 80027f2:	bf00      	nop
 80027f4:	e006      	b.n	8002804 <main+0x9cc>
				break;
 80027f6:	bf00      	nop
 80027f8:	e004      	b.n	8002804 <main+0x9cc>
				break;
 80027fa:	bf00      	nop
 80027fc:	e002      	b.n	8002804 <main+0x9cc>
				break;
 80027fe:	bf00      	nop
 8002800:	e000      	b.n	8002804 <main+0x9cc>
				break;
 8002802:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		////////////////////////// <<BASESYSTEM>> ////////////////////////
		if (base_status == 2 || Test_no_BaseSystem) {
 8002804:	4b66      	ldr	r3, [pc, #408]	@ (80029a0 <main+0xb68>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d004      	beq.n	8002816 <main+0x9de>
 800280c:	4b66      	ldr	r3, [pc, #408]	@ (80029a8 <main+0xb70>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	f43f ab9a 	beq.w	8001f4a <main+0x112>
			currentTimer = micros(); // Current time in microseconds
 8002816:	f002 f961 	bl	8004adc <micros>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4963      	ldr	r1, [pc, #396]	@ (80029ac <main+0xb74>)
 8002820:	e9c1 2300 	strd	r2, r3, [r1]

			//////////////////////// <<RECEIVER>> ////////////////////////
			Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8002824:	4b62      	ldr	r3, [pc, #392]	@ (80029b0 <main+0xb78>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282a:	461a      	mov	r2, r3
 800282c:	4b61      	ldr	r3, [pc, #388]	@ (80029b4 <main+0xb7c>)
 800282e:	601a      	str	r2, [r3, #0]
			Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8002830:	4b61      	ldr	r3, [pc, #388]	@ (80029b8 <main+0xb80>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002836:	461a      	mov	r2, r3
 8002838:	4b5e      	ldr	r3, [pc, #376]	@ (80029b4 <main+0xb7c>)
 800283a:	605a      	str	r2, [r3, #4]
			float RX_temp = map(
			__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2) - 1500.00, -500.00,
 800283c:	4b5c      	ldr	r3, [pc, #368]	@ (80029b0 <main+0xb78>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fe2a 	bl	800049c <__aeabi_ui2d>
 8002848:	a343      	add	r3, pc, #268	@ (adr r3, 8002958 <main+0xb20>)
 800284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284e:	f7fd fce7 	bl	8000220 <__aeabi_dsub>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
			float RX_temp = map(
 8002856:	4610      	mov	r0, r2
 8002858:	4619      	mov	r1, r3
 800285a:	f7fe f953 	bl	8000b04 <__aeabi_d2f>
 800285e:	4603      	mov	r3, r0
 8002860:	ed9f 2a5c 	vldr	s4, [pc, #368]	@ 80029d4 <main+0xb9c>
 8002864:	eddf 1a55 	vldr	s3, [pc, #340]	@ 80029bc <main+0xb84>
 8002868:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 80029c0 <main+0xb88>
 800286c:	eddf 0a55 	vldr	s1, [pc, #340]	@ 80029c4 <main+0xb8c>
 8002870:	ee00 3a10 	vmov	s0, r3
 8002874:	f002 f816 	bl	80048a4 <map>
 8002878:	ed87 0a27 	vstr	s0, [r7, #156]	@ 0x9c
					500.00, -100.00, 100.00);
			float RY_temp = map(
			__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 18530.00, -500.00,
 800287c:	4b4e      	ldr	r3, [pc, #312]	@ (80029b8 <main+0xb80>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002882:	4618      	mov	r0, r3
 8002884:	f7fd fe0a 	bl	800049c <__aeabi_ui2d>
 8002888:	a335      	add	r3, pc, #212	@ (adr r3, 8002960 <main+0xb28>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	f7fd fcc7 	bl	8000220 <__aeabi_dsub>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
			float RY_temp = map(
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f7fe f933 	bl	8000b04 <__aeabi_d2f>
 800289e:	4603      	mov	r3, r0
 80028a0:	ed9f 2a4c 	vldr	s4, [pc, #304]	@ 80029d4 <main+0xb9c>
 80028a4:	eddf 1a45 	vldr	s3, [pc, #276]	@ 80029bc <main+0xb84>
 80028a8:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 80029c0 <main+0xb88>
 80028ac:	eddf 0a45 	vldr	s1, [pc, #276]	@ 80029c4 <main+0xb8c>
 80028b0:	ee00 3a10 	vmov	s0, r3
 80028b4:	f001 fff6 	bl	80048a4 <map>
 80028b8:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
					500.00, -100.00, 100.00);

			if (RX_temp >= -4 && RX_temp <= 4)
 80028bc:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80028c0:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 80028c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028cc:	db0d      	blt.n	80028ea <main+0xab2>
 80028ce:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80028d2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80028d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028de:	d804      	bhi.n	80028ea <main+0xab2>
				Receiver[0] = 0.00;
 80028e0:	4a39      	ldr	r2, [pc, #228]	@ (80029c8 <main+0xb90>)
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	e01d      	b.n	8002926 <main+0xaee>
			else if (RX_temp > 100)
 80028ea:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80028ee:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80029d4 <main+0xb9c>
 80028f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fa:	dd03      	ble.n	8002904 <main+0xacc>
				Receiver[0] = 100.00;
 80028fc:	4a32      	ldr	r2, [pc, #200]	@ (80029c8 <main+0xb90>)
 80028fe:	4b33      	ldr	r3, [pc, #204]	@ (80029cc <main+0xb94>)
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e010      	b.n	8002926 <main+0xaee>
			else if (RX_temp < -100)
 8002904:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002908:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80029bc <main+0xb84>
 800290c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002914:	d503      	bpl.n	800291e <main+0xae6>
				Receiver[0] = -100.00;
 8002916:	4a2c      	ldr	r2, [pc, #176]	@ (80029c8 <main+0xb90>)
 8002918:	4b2d      	ldr	r3, [pc, #180]	@ (80029d0 <main+0xb98>)
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	e003      	b.n	8002926 <main+0xaee>
			else
				Receiver[0] = RX_temp;
 800291e:	4a2a      	ldr	r2, [pc, #168]	@ (80029c8 <main+0xb90>)
 8002920:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002924:	6013      	str	r3, [r2, #0]
			if (RY_temp >= -4 && RY_temp <= 4)
 8002926:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800292a:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 800292e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002936:	db4f      	blt.n	80029d8 <main+0xba0>
 8002938:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800293c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002948:	d846      	bhi.n	80029d8 <main+0xba0>
				Receiver[1] = 0.00;
 800294a:	4a1f      	ldr	r2, [pc, #124]	@ (80029c8 <main+0xb90>)
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	6053      	str	r3, [r2, #4]
 8002952:	e05f      	b.n	8002a14 <main+0xbdc>
 8002954:	f3af 8000 	nop.w
 8002958:	00000000 	.word	0x00000000
 800295c:	40977000 	.word	0x40977000
 8002960:	00000000 	.word	0x00000000
 8002964:	40d21880 	.word	0x40d21880
 8002968:	20000c28 	.word	0x20000c28
 800296c:	20000bd3 	.word	0x20000bd3
 8002970:	20000c24 	.word	0x20000c24
 8002974:	20000c30 	.word	0x20000c30
 8002978:	42480000 	.word	0x42480000
 800297c:	c2480000 	.word	0xc2480000
 8002980:	00030d41 	.word	0x00030d41
 8002984:	00000000 	.word	0x00000000
 8002988:	20000b78 	.word	0x20000b78
 800298c:	000186a1 	.word	0x000186a1
 8002990:	c20c0000 	.word	0xc20c0000
 8002994:	420c0000 	.word	0x420c0000
 8002998:	20000bcc 	.word	0x20000bcc
 800299c:	20000bd2 	.word	0x20000bd2
 80029a0:	200012b8 	.word	0x200012b8
 80029a4:	20001128 	.word	0x20001128
 80029a8:	20000c43 	.word	0x20000c43
 80029ac:	20001310 	.word	0x20001310
 80029b0:	2000037c 	.word	0x2000037c
 80029b4:	20000ac4 	.word	0x20000ac4
 80029b8:	200002b0 	.word	0x200002b0
 80029bc:	c2c80000 	.word	0xc2c80000
 80029c0:	43fa0000 	.word	0x43fa0000
 80029c4:	c3fa0000 	.word	0xc3fa0000
 80029c8:	20000ab0 	.word	0x20000ab0
 80029cc:	42c80000 	.word	0x42c80000
 80029d0:	c2c80000 	.word	0xc2c80000
 80029d4:	42c80000 	.word	0x42c80000
			else if (RY_temp > 100)
 80029d8:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80029dc:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 80029d4 <main+0xb9c>
 80029e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e8:	dd03      	ble.n	80029f2 <main+0xbba>
				Receiver[1] = 100.00;
 80029ea:	4ab7      	ldr	r2, [pc, #732]	@ (8002cc8 <main+0xe90>)
 80029ec:	4bb7      	ldr	r3, [pc, #732]	@ (8002ccc <main+0xe94>)
 80029ee:	6053      	str	r3, [r2, #4]
 80029f0:	e010      	b.n	8002a14 <main+0xbdc>
			else if (RY_temp < -100)
 80029f2:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80029f6:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 8002cd0 <main+0xe98>
 80029fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a02:	d503      	bpl.n	8002a0c <main+0xbd4>
				Receiver[1] = -100.00;
 8002a04:	4ab0      	ldr	r2, [pc, #704]	@ (8002cc8 <main+0xe90>)
 8002a06:	4bb3      	ldr	r3, [pc, #716]	@ (8002cd4 <main+0xe9c>)
 8002a08:	6053      	str	r3, [r2, #4]
 8002a0a:	e003      	b.n	8002a14 <main+0xbdc>
			else
				Receiver[1] = RY_temp;
 8002a0c:	4aae      	ldr	r2, [pc, #696]	@ (8002cc8 <main+0xe90>)
 8002a0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a12:	6053      	str	r3, [r2, #4]

			if (pulse_width_us[0] > 4000.00)
 8002a14:	4bb0      	ldr	r3, [pc, #704]	@ (8002cd8 <main+0xea0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a1c:	d912      	bls.n	8002a44 <main+0xc0c>
				pulse_width_us[0] = pulse_width_us[0] - 4900.00;
 8002a1e:	4bae      	ldr	r3, [pc, #696]	@ (8002cd8 <main+0xea0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fd fd3a 	bl	800049c <__aeabi_ui2d>
 8002a28:	a3a3      	add	r3, pc, #652	@ (adr r3, 8002cb8 <main+0xe80>)
 8002a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2e:	f7fd fbf7 	bl	8000220 <__aeabi_dsub>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7fe f843 	bl	8000ac4 <__aeabi_d2uiz>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	4ba5      	ldr	r3, [pc, #660]	@ (8002cd8 <main+0xea0>)
 8002a42:	601a      	str	r2, [r3, #0]
			if (pulse_width_us[1] > 4000.00)
 8002a44:	4ba4      	ldr	r3, [pc, #656]	@ (8002cd8 <main+0xea0>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a4c:	d912      	bls.n	8002a74 <main+0xc3c>
				pulse_width_us[1] = pulse_width_us[1] - 4900.00;
 8002a4e:	4ba2      	ldr	r3, [pc, #648]	@ (8002cd8 <main+0xea0>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fd22 	bl	800049c <__aeabi_ui2d>
 8002a58:	a397      	add	r3, pc, #604	@ (adr r3, 8002cb8 <main+0xe80>)
 8002a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5e:	f7fd fbdf 	bl	8000220 <__aeabi_dsub>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f7fe f82b 	bl	8000ac4 <__aeabi_d2uiz>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4b99      	ldr	r3, [pc, #612]	@ (8002cd8 <main+0xea0>)
 8002a72:	605a      	str	r2, [r3, #4]
			if (pulse_width_us[2] > 4000.00)
 8002a74:	4b98      	ldr	r3, [pc, #608]	@ (8002cd8 <main+0xea0>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a7c:	d912      	bls.n	8002aa4 <main+0xc6c>
				pulse_width_us[2] = pulse_width_us[2] - 4900.00;
 8002a7e:	4b96      	ldr	r3, [pc, #600]	@ (8002cd8 <main+0xea0>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd0a 	bl	800049c <__aeabi_ui2d>
 8002a88:	a38b      	add	r3, pc, #556	@ (adr r3, 8002cb8 <main+0xe80>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fbc7 	bl	8000220 <__aeabi_dsub>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f7fe f813 	bl	8000ac4 <__aeabi_d2uiz>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b8d      	ldr	r3, [pc, #564]	@ (8002cd8 <main+0xea0>)
 8002aa2:	609a      	str	r2, [r3, #8]

			Receiver[2] = map((float) pulse_width_us[0] - 1500.00, -500.00,
 8002aa4:	4b8c      	ldr	r3, [pc, #560]	@ (8002cd8 <main+0xea0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab0:	ee17 0a90 	vmov	r0, s15
 8002ab4:	f7fd fd14 	bl	80004e0 <__aeabi_f2d>
 8002ab8:	a381      	add	r3, pc, #516	@ (adr r3, 8002cc0 <main+0xe88>)
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abe:	f7fd fbaf 	bl	8000220 <__aeabi_dsub>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f7fe f81b 	bl	8000b04 <__aeabi_d2f>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 8002cdc <main+0xea4>
 8002ad4:	eddf 1a7e 	vldr	s3, [pc, #504]	@ 8002cd0 <main+0xe98>
 8002ad8:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 8002ce0 <main+0xea8>
 8002adc:	eddf 0a81 	vldr	s1, [pc, #516]	@ 8002ce4 <main+0xeac>
 8002ae0:	ee00 3a10 	vmov	s0, r3
 8002ae4:	f001 fede 	bl	80048a4 <map>
 8002ae8:	eef0 7a40 	vmov.f32	s15, s0
 8002aec:	4b76      	ldr	r3, [pc, #472]	@ (8002cc8 <main+0xe90>)
 8002aee:	edc3 7a02 	vstr	s15, [r3, #8]
					500.00, -100.00, 100.00);
			Receiver[3] = map((float) pulse_width_us[1] - 1500.00, -500.00,
 8002af2:	4b79      	ldr	r3, [pc, #484]	@ (8002cd8 <main+0xea0>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afe:	ee17 0a90 	vmov	r0, s15
 8002b02:	f7fd fced 	bl	80004e0 <__aeabi_f2d>
 8002b06:	a36e      	add	r3, pc, #440	@ (adr r3, 8002cc0 <main+0xe88>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f7fd fb88 	bl	8000220 <__aeabi_dsub>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	f7fd fff4 	bl	8000b04 <__aeabi_d2f>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	ed9f 2a6f 	vldr	s4, [pc, #444]	@ 8002cdc <main+0xea4>
 8002b22:	eddf 1a6b 	vldr	s3, [pc, #428]	@ 8002cd0 <main+0xe98>
 8002b26:	ed9f 1a6e 	vldr	s2, [pc, #440]	@ 8002ce0 <main+0xea8>
 8002b2a:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8002ce4 <main+0xeac>
 8002b2e:	ee00 3a10 	vmov	s0, r3
 8002b32:	f001 feb7 	bl	80048a4 <map>
 8002b36:	eef0 7a40 	vmov.f32	s15, s0
 8002b3a:	4b63      	ldr	r3, [pc, #396]	@ (8002cc8 <main+0xe90>)
 8002b3c:	edc3 7a03 	vstr	s15, [r3, #12]
					500.00, -100.00, 100.00);
			Receiver[4] = map((float) pulse_width_us[2] - 1500.00, -500.00,
 8002b40:	4b65      	ldr	r3, [pc, #404]	@ (8002cd8 <main+0xea0>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	ee07 3a90 	vmov	s15, r3
 8002b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b4c:	ee17 0a90 	vmov	r0, s15
 8002b50:	f7fd fcc6 	bl	80004e0 <__aeabi_f2d>
 8002b54:	a35a      	add	r3, pc, #360	@ (adr r3, 8002cc0 <main+0xe88>)
 8002b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5a:	f7fd fb61 	bl	8000220 <__aeabi_dsub>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4610      	mov	r0, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	f7fd ffcd 	bl	8000b04 <__aeabi_d2f>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	ed9f 2a5b 	vldr	s4, [pc, #364]	@ 8002cdc <main+0xea4>
 8002b70:	eddf 1a57 	vldr	s3, [pc, #348]	@ 8002cd0 <main+0xe98>
 8002b74:	ed9f 1a5a 	vldr	s2, [pc, #360]	@ 8002ce0 <main+0xea8>
 8002b78:	eddf 0a5a 	vldr	s1, [pc, #360]	@ 8002ce4 <main+0xeac>
 8002b7c:	ee00 3a10 	vmov	s0, r3
 8002b80:	f001 fe90 	bl	80048a4 <map>
 8002b84:	eef0 7a40 	vmov.f32	s15, s0
 8002b88:	4b4f      	ldr	r3, [pc, #316]	@ (8002cc8 <main+0xe90>)
 8002b8a:	edc3 7a04 	vstr	s15, [r3, #16]
			//		if(Receiver[2] > 1500.00) Receiver[2] = Receiver[2] - 3400.00;
			//		if(Receiver[3] > 1500.00) Receiver[3] = Receiver[3] - 3400.00;
			//		if(Receiver[4] > 1500.00) Receiver[4] = Receiver[4] - 3400.00;

			// Adjust as needed
			vx = map((float) Receiver[0], -100.00, 100.00, -300.00, 300.00);
 8002b8e:	4b4e      	ldr	r3, [pc, #312]	@ (8002cc8 <main+0xe90>)
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 8002ce8 <main+0xeb0>
 8002b98:	eddf 1a54 	vldr	s3, [pc, #336]	@ 8002cec <main+0xeb4>
 8002b9c:	ed9f 1a4f 	vldr	s2, [pc, #316]	@ 8002cdc <main+0xea4>
 8002ba0:	eddf 0a4b 	vldr	s1, [pc, #300]	@ 8002cd0 <main+0xe98>
 8002ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba8:	f001 fe7c 	bl	80048a4 <map>
 8002bac:	eef0 7a40 	vmov.f32	s15, s0
 8002bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8002cf0 <main+0xeb8>)
 8002bb2:	edc3 7a00 	vstr	s15, [r3]
			vy = map((float) Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8002bb6:	4b44      	ldr	r3, [pc, #272]	@ (8002cc8 <main+0xe90>)
 8002bb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bbc:	ed9f 2a4a 	vldr	s4, [pc, #296]	@ 8002ce8 <main+0xeb0>
 8002bc0:	eddf 1a4a 	vldr	s3, [pc, #296]	@ 8002cec <main+0xeb4>
 8002bc4:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 8002cdc <main+0xea4>
 8002bc8:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8002cd0 <main+0xe98>
 8002bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd0:	f001 fe68 	bl	80048a4 <map>
 8002bd4:	eef0 7a40 	vmov.f32	s15, s0
 8002bd8:	4b46      	ldr	r3, [pc, #280]	@ (8002cf4 <main+0xebc>)
 8002bda:	edc3 7a00 	vstr	s15, [r3]
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MODE>> ///////////////////////////

			if (EmergencyState == 1) {
 8002bde:	4b46      	ldr	r3, [pc, #280]	@ (8002cf8 <main+0xec0>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d103      	bne.n	8002bee <main+0xdb6>
				Mode = 0;
 8002be6:	4a45      	ldr	r2, [pc, #276]	@ (8002cfc <main+0xec4>)
 8002be8:	2300      	movs	r3, #0
 8002bea:	7013      	strb	r3, [r2, #0]
 8002bec:	e18e      	b.n	8002f0c <main+0x10d4>
			} else if (Receiver[2] < -30 && Receiver[4] < -30) {
 8002bee:	4b36      	ldr	r3, [pc, #216]	@ (8002cc8 <main+0xe90>)
 8002bf0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bf4:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c00:	d50d      	bpl.n	8002c1e <main+0xde6>
 8002c02:	4b31      	ldr	r3, [pc, #196]	@ (8002cc8 <main+0xe90>)
 8002c04:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c08:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	d503      	bpl.n	8002c1e <main+0xde6>
				Mode = 0;
 8002c16:	4a39      	ldr	r2, [pc, #228]	@ (8002cfc <main+0xec4>)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	7013      	strb	r3, [r2, #0]
 8002c1c:	e176      	b.n	8002f0c <main+0x10d4>
			} else if (Receiver[3] > 0 && IsPress == 0) {
 8002c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc8 <main+0xe90>)
 8002c20:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2c:	f340 816b 	ble.w	8002f06 <main+0x10ce>
 8002c30:	4b33      	ldr	r3, [pc, #204]	@ (8002d00 <main+0xec8>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f040 8166 	bne.w	8002f06 <main+0x10ce>
				IsPress = 1;
 8002c3a:	4a31      	ldr	r2, [pc, #196]	@ (8002d00 <main+0xec8>)
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002c40:	4a30      	ldr	r2, [pc, #192]	@ (8002d04 <main+0xecc>)
 8002c42:	2300      	movs	r3, #0
 8002c44:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002c46:	4b20      	ldr	r3, [pc, #128]	@ (8002cc8 <main+0xe90>)
 8002c48:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c4c:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c58:	dd66      	ble.n	8002d28 <main+0xef0>
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <main+0xe90>)
 8002c5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c60:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6c:	d55c      	bpl.n	8002d28 <main+0xef0>
						&& Receiver[4] < -30) {
 8002c6e:	4b16      	ldr	r3, [pc, #88]	@ (8002cc8 <main+0xe90>)
 8002c70:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c74:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c80:	d552      	bpl.n	8002d28 <main+0xef0>
					if (Mode != 1) {
 8002c82:	4b1e      	ldr	r3, [pc, #120]	@ (8002cfc <main+0xec4>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d003      	beq.n	8002c92 <main+0xe5a>
						Mode = 1;
 8002c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cfc <main+0xec4>)
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	7013      	strb	r3, [r2, #0]
					if (Mode != 1) {
 8002c90:	e138      	b.n	8002f04 <main+0x10cc>
					} else {
						TargetX = End_x;
 8002c92:	4b1d      	ldr	r3, [pc, #116]	@ (8002d08 <main+0xed0>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <main+0xed4>)
 8002c98:	601a      	str	r2, [r3, #0]
						TargetY = End_y;
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002d10 <main+0xed8>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d14 <main+0xedc>)
 8002ca0:	601a      	str	r2, [r3, #0]
						TargetR = Revolute_QEIdata.RadPosition;
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d18 <main+0xee0>)
 8002ca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d1c <main+0xee4>)
 8002ca8:	601a      	str	r2, [r3, #0]
						TargetP = Prismatic_QEIdata.mmPosition;
 8002caa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <main+0xee8>)
 8002cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cae:	4b1d      	ldr	r3, [pc, #116]	@ (8002d24 <main+0xeec>)
 8002cb0:	601a      	str	r2, [r3, #0]
					if (Mode != 1) {
 8002cb2:	e127      	b.n	8002f04 <main+0x10cc>
 8002cb4:	f3af 8000 	nop.w
 8002cb8:	00000000 	.word	0x00000000
 8002cbc:	40b32400 	.word	0x40b32400
 8002cc0:	00000000 	.word	0x00000000
 8002cc4:	40977000 	.word	0x40977000
 8002cc8:	20000ab0 	.word	0x20000ab0
 8002ccc:	42c80000 	.word	0x42c80000
 8002cd0:	c2c80000 	.word	0xc2c80000
 8002cd4:	c2c80000 	.word	0xc2c80000
 8002cd8:	20000ae4 	.word	0x20000ae4
 8002cdc:	42c80000 	.word	0x42c80000
 8002ce0:	43fa0000 	.word	0x43fa0000
 8002ce4:	c3fa0000 	.word	0xc3fa0000
 8002ce8:	43960000 	.word	0x43960000
 8002cec:	c3960000 	.word	0xc3960000
 8002cf0:	20000b7c 	.word	0x20000b7c
 8002cf4:	20000b80 	.word	0x20000b80
 8002cf8:	20000bce 	.word	0x20000bce
 8002cfc:	20000bcc 	.word	0x20000bcc
 8002d00:	20000bcf 	.word	0x20000bcf
 8002d04:	20000c24 	.word	0x20000c24
 8002d08:	20000b84 	.word	0x20000b84
 8002d0c:	20000b8c 	.word	0x20000b8c
 8002d10:	20000b88 	.word	0x20000b88
 8002d14:	20000b90 	.word	0x20000b90
 8002d18:	20000af8 	.word	0x20000af8
 8002d1c:	20000b94 	.word	0x20000b94
 8002d20:	20000b38 	.word	0x20000b38
 8002d24:	20000b98 	.word	0x20000b98
					}
				} else if (Receiver[2] > 30 && Receiver[4] < -30) {
 8002d28:	4b86      	ldr	r3, [pc, #536]	@ (8002f44 <main+0x110c>)
 8002d2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d2e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3a:	dd13      	ble.n	8002d64 <main+0xf2c>
 8002d3c:	4b81      	ldr	r3, [pc, #516]	@ (8002f44 <main+0x110c>)
 8002d3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d42:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4e:	d509      	bpl.n	8002d64 <main+0xf2c>
					revolute.finished = 0;
 8002d50:	4a7d      	ldr	r2, [pc, #500]	@ (8002f48 <main+0x1110>)
 8002d52:	2300      	movs	r3, #0
 8002d54:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 8002d56:	4a7d      	ldr	r2, [pc, #500]	@ (8002f4c <main+0x1114>)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	6293      	str	r3, [r2, #40]	@ 0x28
					Mode = 2;
 8002d5c:	4a7c      	ldr	r2, [pc, #496]	@ (8002f50 <main+0x1118>)
 8002d5e:	2302      	movs	r3, #2
 8002d60:	7013      	strb	r3, [r2, #0]
 8002d62:	e0cf      	b.n	8002f04 <main+0x10cc>
				} else if (Receiver[2] < -30 && Receiver[4] > -30
 8002d64:	4b77      	ldr	r3, [pc, #476]	@ (8002f44 <main+0x110c>)
 8002d66:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d6a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002d6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d76:	d517      	bpl.n	8002da8 <main+0xf70>
 8002d78:	4b72      	ldr	r3, [pc, #456]	@ (8002f44 <main+0x110c>)
 8002d7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d7e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8a:	dd0d      	ble.n	8002da8 <main+0xf70>
						&& Receiver[4] < 30) {
 8002d8c:	4b6d      	ldr	r3, [pc, #436]	@ (8002f44 <main+0x110c>)
 8002d8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d92:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9e:	d503      	bpl.n	8002da8 <main+0xf70>
					Mode = 3;
 8002da0:	4a6b      	ldr	r2, [pc, #428]	@ (8002f50 <main+0x1118>)
 8002da2:	2303      	movs	r3, #3
 8002da4:	7013      	strb	r3, [r2, #0]
 8002da6:	e0ad      	b.n	8002f04 <main+0x10cc>
				} else if (Receiver[2] > -30 && Receiver[2] < 30
 8002da8:	4b66      	ldr	r3, [pc, #408]	@ (8002f44 <main+0x110c>)
 8002daa:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dae:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dba:	dd27      	ble.n	8002e0c <main+0xfd4>
 8002dbc:	4b61      	ldr	r3, [pc, #388]	@ (8002f44 <main+0x110c>)
 8002dbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dc2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dce:	d51d      	bpl.n	8002e0c <main+0xfd4>
						&& Receiver[4] > -30 && Receiver[4] < 30) {
 8002dd0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f44 <main+0x110c>)
 8002dd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dd6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de2:	dd13      	ble.n	8002e0c <main+0xfd4>
 8002de4:	4b57      	ldr	r3, [pc, #348]	@ (8002f44 <main+0x110c>)
 8002de6:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dea:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df6:	d509      	bpl.n	8002e0c <main+0xfd4>
					revolute.finished = 0;
 8002df8:	4a53      	ldr	r2, [pc, #332]	@ (8002f48 <main+0x1110>)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 8002dfe:	4a53      	ldr	r2, [pc, #332]	@ (8002f4c <main+0x1114>)
 8002e00:	2300      	movs	r3, #0
 8002e02:	6293      	str	r3, [r2, #40]	@ 0x28
					Mode = 4;
 8002e04:	4a52      	ldr	r2, [pc, #328]	@ (8002f50 <main+0x1118>)
 8002e06:	2304      	movs	r3, #4
 8002e08:	7013      	strb	r3, [r2, #0]
 8002e0a:	e07b      	b.n	8002f04 <main+0x10cc>
				} else if (Receiver[2] > 30 && Receiver[4] > -30
 8002e0c:	4b4d      	ldr	r3, [pc, #308]	@ (8002f44 <main+0x110c>)
 8002e0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e12:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1e:	dd17      	ble.n	8002e50 <main+0x1018>
 8002e20:	4b48      	ldr	r3, [pc, #288]	@ (8002f44 <main+0x110c>)
 8002e22:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e26:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e32:	dd0d      	ble.n	8002e50 <main+0x1018>
						&& Receiver[4] < 30) {
 8002e34:	4b43      	ldr	r3, [pc, #268]	@ (8002f44 <main+0x110c>)
 8002e36:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e3a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e46:	d503      	bpl.n	8002e50 <main+0x1018>
					Mode = 5;
 8002e48:	4a41      	ldr	r2, [pc, #260]	@ (8002f50 <main+0x1118>)
 8002e4a:	2305      	movs	r3, #5
 8002e4c:	7013      	strb	r3, [r2, #0]
 8002e4e:	e059      	b.n	8002f04 <main+0x10cc>
				} else if (Receiver[2] < -30 && Receiver[4] > 30) {
 8002e50:	4b3c      	ldr	r3, [pc, #240]	@ (8002f44 <main+0x110c>)
 8002e52:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e56:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e62:	d50d      	bpl.n	8002e80 <main+0x1048>
 8002e64:	4b37      	ldr	r3, [pc, #220]	@ (8002f44 <main+0x110c>)
 8002e66:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e6a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e76:	dd03      	ble.n	8002e80 <main+0x1048>
					Mode = 6;
 8002e78:	4a35      	ldr	r2, [pc, #212]	@ (8002f50 <main+0x1118>)
 8002e7a:	2306      	movs	r3, #6
 8002e7c:	7013      	strb	r3, [r2, #0]
 8002e7e:	e041      	b.n	8002f04 <main+0x10cc>
				} else if (Receiver[2] > -30 && Receiver[2] < 30
 8002e80:	4b30      	ldr	r3, [pc, #192]	@ (8002f44 <main+0x110c>)
 8002e82:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e86:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e92:	dd17      	ble.n	8002ec4 <main+0x108c>
 8002e94:	4b2b      	ldr	r3, [pc, #172]	@ (8002f44 <main+0x110c>)
 8002e96:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e9a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea6:	d50d      	bpl.n	8002ec4 <main+0x108c>
						&& Receiver[4] > 30) {
 8002ea8:	4b26      	ldr	r3, [pc, #152]	@ (8002f44 <main+0x110c>)
 8002eaa:	edd3 7a04 	vldr	s15, [r3, #16]
 8002eae:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eba:	dd03      	ble.n	8002ec4 <main+0x108c>
					Mode = 7;
 8002ebc:	4a24      	ldr	r2, [pc, #144]	@ (8002f50 <main+0x1118>)
 8002ebe:	2307      	movs	r3, #7
 8002ec0:	7013      	strb	r3, [r2, #0]
 8002ec2:	e01f      	b.n	8002f04 <main+0x10cc>
				} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8002ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f44 <main+0x110c>)
 8002ec6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eca:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed6:	dc00      	bgt.n	8002eda <main+0x10a2>
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002ed8:	e018      	b.n	8002f0c <main+0x10d4>
				} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8002eda:	4b1a      	ldr	r3, [pc, #104]	@ (8002f44 <main+0x110c>)
 8002edc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ee0:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eec:	dc00      	bgt.n	8002ef0 <main+0x10b8>
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002eee:	e00d      	b.n	8002f0c <main+0x10d4>
					// loop_counter = 0;
					TargetR = 4.18879;
 8002ef0:	4a18      	ldr	r2, [pc, #96]	@ (8002f54 <main+0x111c>)
 8002ef2:	4b19      	ldr	r3, [pc, #100]	@ (8002f58 <main+0x1120>)
 8002ef4:	6013      	str	r3, [r2, #0]
					TargetP = 50;
 8002ef6:	4a19      	ldr	r2, [pc, #100]	@ (8002f5c <main+0x1124>)
 8002ef8:	4b19      	ldr	r3, [pc, #100]	@ (8002f60 <main+0x1128>)
 8002efa:	6013      	str	r3, [r2, #0]
					Mode = 8;
 8002efc:	4a14      	ldr	r2, [pc, #80]	@ (8002f50 <main+0x1118>)
 8002efe:	2308      	movs	r3, #8
 8002f00:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30
 8002f02:	e003      	b.n	8002f0c <main+0x10d4>
 8002f04:	e002      	b.n	8002f0c <main+0x10d4>
				}
			} else {
				IsPress = 0;
 8002f06:	4a17      	ldr	r2, [pc, #92]	@ (8002f64 <main+0x112c>)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	7013      	strb	r3, [r2, #0]
			}
			//////////////////////////////////////////////////////////////

			//////////////////////// <<STOP>> ////////////////////////////
			if (Mode == 0) {
 8002f0c:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <main+0x1118>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d12d      	bne.n	8002f70 <main+0x1138>
				Set_Motor(0, 0);
 8002f14:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002f68 <main+0x1130>
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f002 f893 	bl	8005044 <Set_Motor>
				Set_Motor(1, 0);
 8002f1e:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8002f68 <main+0x1130>
 8002f22:	2001      	movs	r0, #1
 8002f24:	f002 f88e 	bl	8005044 <Set_Motor>
				if (Last_Mode != Mode) {
 8002f28:	4b10      	ldr	r3, [pc, #64]	@ (8002f6c <main+0x1134>)
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	4b08      	ldr	r3, [pc, #32]	@ (8002f50 <main+0x1118>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d020      	beq.n	8002f76 <main+0x113e>
					Set_Servo(0);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f002 f903 	bl	8005140 <Set_Servo>
					Last_Mode = Mode;
 8002f3a:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <main+0x1118>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002f6c <main+0x1134>)
 8002f40:	7013      	strb	r3, [r2, #0]
 8002f42:	e018      	b.n	8002f76 <main+0x113e>
 8002f44:	20000ab0 	.word	0x20000ab0
 8002f48:	2000132c 	.word	0x2000132c
 8002f4c:	20001370 	.word	0x20001370
 8002f50:	20000bcc 	.word	0x20000bcc
 8002f54:	20000b94 	.word	0x20000b94
 8002f58:	40860a91 	.word	0x40860a91
 8002f5c:	20000b98 	.word	0x20000b98
 8002f60:	42480000 	.word	0x42480000
 8002f64:	20000bcf 	.word	0x20000bcf
 8002f68:	00000000 	.word	0x00000000
 8002f6c:	20000bcd 	.word	0x20000bcd
				}
			} else {
				Last_Mode = 255;
 8002f70:	4ac3      	ldr	r2, [pc, #780]	@ (8003280 <main+0x1448>)
 8002f72:	23ff      	movs	r3, #255	@ 0xff
 8002f74:	7013      	strb	r3, [r2, #0]
			}
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MANUAL>> //////////////////////////
			if (Mode == 1) {
 8002f76:	4bc3      	ldr	r3, [pc, #780]	@ (8003284 <main+0x144c>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	f040 80af 	bne.w	80030de <main+0x12a6>
				//////////////////////// <<CONTROL>> /////////////////////////
				//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
				//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
				//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
				TargetRVel = (map((float) Receiver[0], -100.00, 100.00, -1.00,
 8002f80:	4bc1      	ldr	r3, [pc, #772]	@ (8003288 <main+0x1450>)
 8002f82:	edd3 7a00 	vldr	s15, [r3]
 8002f86:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8002f8a:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 8002f8e:	ed9f 1abf 	vldr	s2, [pc, #764]	@ 800328c <main+0x1454>
 8002f92:	eddf 0abf 	vldr	s1, [pc, #764]	@ 8003290 <main+0x1458>
 8002f96:	eeb0 0a67 	vmov.f32	s0, s15
 8002f9a:	f001 fc83 	bl	80048a4 <map>
 8002f9e:	eef0 7a40 	vmov.f32	s15, s0
 8002fa2:	4bbc      	ldr	r3, [pc, #752]	@ (8003294 <main+0x145c>)
 8002fa4:	edc3 7a00 	vstr	s15, [r3]
						1.00));
				TargetPVel = map((float) Receiver[1], -100.00, 100.00, -500.00,
 8002fa8:	4bb7      	ldr	r3, [pc, #732]	@ (8003288 <main+0x1450>)
 8002faa:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fae:	ed9f 2aba 	vldr	s4, [pc, #744]	@ 8003298 <main+0x1460>
 8002fb2:	eddf 1aba 	vldr	s3, [pc, #744]	@ 800329c <main+0x1464>
 8002fb6:	ed9f 1ab5 	vldr	s2, [pc, #724]	@ 800328c <main+0x1454>
 8002fba:	eddf 0ab5 	vldr	s1, [pc, #724]	@ 8003290 <main+0x1458>
 8002fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc2:	f001 fc6f 	bl	80048a4 <map>
 8002fc6:	eef0 7a40 	vmov.f32	s15, s0
 8002fca:	4bb5      	ldr	r3, [pc, #724]	@ (80032a0 <main+0x1468>)
 8002fcc:	edc3 7a00 	vstr	s15, [r3]
						500.00);
				//////////////////////////////////////////////////////////////

				//////////////////////// <<MOTOR>> ///////////////////////////
				R_Velo_Error = (TargetRVel - Revolute_QEIdata.Velocity_f);
 8002fd0:	4bb0      	ldr	r3, [pc, #704]	@ (8003294 <main+0x145c>)
 8002fd2:	ed93 7a00 	vldr	s14, [r3]
 8002fd6:	4bb3      	ldr	r3, [pc, #716]	@ (80032a4 <main+0x146c>)
 8002fd8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe0:	4bb1      	ldr	r3, [pc, #708]	@ (80032a8 <main+0x1470>)
 8002fe2:	edc3 7a00 	vstr	s15, [r3]
				P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity;
 8002fe6:	4bae      	ldr	r3, [pc, #696]	@ (80032a0 <main+0x1468>)
 8002fe8:	ed93 7a00 	vldr	s14, [r3]
 8002fec:	4baf      	ldr	r3, [pc, #700]	@ (80032ac <main+0x1474>)
 8002fee:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff6:	4bae      	ldr	r3, [pc, #696]	@ (80032b0 <main+0x1478>)
 8002ff8:	edc3 7a00 	vstr	s15, [r3]

				// Call every 0.001 s
				static uint64_t timestampState1 = 0;
				int64_t currentTimeState1 = micros();
 8002ffc:	f001 fd6e 	bl	8004adc <micros>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
				if (currentTimeState1 > timestampState1) {
 8003008:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800300c:	4ba9      	ldr	r3, [pc, #676]	@ (80032b4 <main+0x147c>)
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	4282      	cmp	r2, r0
 8003014:	418b      	sbcs	r3, r1
 8003016:	d250      	bcs.n	80030ba <main+0x1282>
					timestampState1 = currentTimeState1 + 1000; // us
 8003018:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800301c:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8003020:	61b9      	str	r1, [r7, #24]
 8003022:	f143 0300 	adc.w	r3, r3, #0
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800302c:	4ba1      	ldr	r3, [pc, #644]	@ (80032b4 <main+0x147c>)
 800302e:	e9c3 0100 	strd	r0, r1, [r3]
					R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel,
 8003032:	4b9d      	ldr	r3, [pc, #628]	@ (80032a8 <main+0x1470>)
 8003034:	edd3 7a00 	vldr	s15, [r3]
 8003038:	4b9f      	ldr	r3, [pc, #636]	@ (80032b8 <main+0x1480>)
 800303a:	ed93 7a00 	vldr	s14, [r3]
 800303e:	4b9f      	ldr	r3, [pc, #636]	@ (80032bc <main+0x1484>)
 8003040:	edd3 6a00 	vldr	s13, [r3]
 8003044:	4b9e      	ldr	r3, [pc, #632]	@ (80032c0 <main+0x1488>)
 8003046:	ed93 6a00 	vldr	s12, [r3]
 800304a:	489e      	ldr	r0, [pc, #632]	@ (80032c4 <main+0x148c>)
 800304c:	ed9f 3a8f 	vldr	s6, [pc, #572]	@ 800328c <main+0x1454>
 8003050:	eddf 2a8f 	vldr	s5, [pc, #572]	@ 8003290 <main+0x1458>
 8003054:	ed9f 2a9c 	vldr	s4, [pc, #624]	@ 80032c8 <main+0x1490>
 8003058:	eef0 1a46 	vmov.f32	s3, s12
 800305c:	eeb0 1a66 	vmov.f32	s2, s13
 8003060:	eef0 0a47 	vmov.f32	s1, s14
 8003064:	eeb0 0a67 	vmov.f32	s0, s15
 8003068:	f001 fd52 	bl	8004b10 <PID_Update>
 800306c:	eef0 7a40 	vmov.f32	s15, s0
 8003070:	4b96      	ldr	r3, [pc, #600]	@ (80032cc <main+0x1494>)
 8003072:	edc3 7a00 	vstr	s15, [r3]
							R_kD_vel, 0.01f, -100.0f, 100.0f, &pid_r_v);
					P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel,
 8003076:	4b8e      	ldr	r3, [pc, #568]	@ (80032b0 <main+0x1478>)
 8003078:	edd3 7a00 	vldr	s15, [r3]
 800307c:	4b94      	ldr	r3, [pc, #592]	@ (80032d0 <main+0x1498>)
 800307e:	ed93 7a00 	vldr	s14, [r3]
 8003082:	4b94      	ldr	r3, [pc, #592]	@ (80032d4 <main+0x149c>)
 8003084:	edd3 6a00 	vldr	s13, [r3]
 8003088:	4b93      	ldr	r3, [pc, #588]	@ (80032d8 <main+0x14a0>)
 800308a:	ed93 6a00 	vldr	s12, [r3]
 800308e:	4893      	ldr	r0, [pc, #588]	@ (80032dc <main+0x14a4>)
 8003090:	ed9f 3a7e 	vldr	s6, [pc, #504]	@ 800328c <main+0x1454>
 8003094:	eddf 2a7e 	vldr	s5, [pc, #504]	@ 8003290 <main+0x1458>
 8003098:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 80032c8 <main+0x1490>
 800309c:	eef0 1a46 	vmov.f32	s3, s12
 80030a0:	eeb0 1a66 	vmov.f32	s2, s13
 80030a4:	eef0 0a47 	vmov.f32	s1, s14
 80030a8:	eeb0 0a67 	vmov.f32	s0, s15
 80030ac:	f001 fd30 	bl	8004b10 <PID_Update>
 80030b0:	eef0 7a40 	vmov.f32	s15, s0
 80030b4:	4b8a      	ldr	r3, [pc, #552]	@ (80032e0 <main+0x14a8>)
 80030b6:	edc3 7a00 	vstr	s15, [r3]
				}

				//			R_PWM = Receiver[0];
				//			P_PWM = Receiver[1];

				Workspace_limit();
 80030ba:	f002 f88d 	bl	80051d8 <Workspace_limit>

				Set_Motor(0, R_PWM);
 80030be:	4b83      	ldr	r3, [pc, #524]	@ (80032cc <main+0x1494>)
 80030c0:	edd3 7a00 	vldr	s15, [r3]
 80030c4:	eeb0 0a67 	vmov.f32	s0, s15
 80030c8:	2000      	movs	r0, #0
 80030ca:	f001 ffbb 	bl	8005044 <Set_Motor>
				Set_Motor(1, P_PWM);
 80030ce:	4b84      	ldr	r3, [pc, #528]	@ (80032e0 <main+0x14a8>)
 80030d0:	edd3 7a00 	vldr	s15, [r3]
 80030d4:	eeb0 0a67 	vmov.f32	s0, s15
 80030d8:	2001      	movs	r0, #1
 80030da:	f001 ffb3 	bl	8005044 <Set_Motor>
				//////////////////////////////////////////////////////////////
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 4) {
 80030de:	4b69      	ldr	r3, [pc, #420]	@ (8003284 <main+0x144c>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	f040 8130 	bne.w	8003348 <main+0x1510>
				static bool sequence_active = false;
				static bool waiting_for_up = false;
				static uint64_t pen_timestamp = 0;
				const uint64_t pen_delay = 200000; // 200 ms
 80030e8:	4a7e      	ldr	r2, [pc, #504]	@ (80032e4 <main+0x14ac>)
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
				static float last_TargetX = 0.0f;
				static float last_TargetY = 0.0f;
				static bool new_target = true;

				// Detect change in target (with small tolerance to avoid float jitter)
				if (fabsf(TargetX - last_TargetX) > 1e-3f
 80030f2:	4b7d      	ldr	r3, [pc, #500]	@ (80032e8 <main+0x14b0>)
 80030f4:	ed93 7a00 	vldr	s14, [r3]
 80030f8:	4b7c      	ldr	r3, [pc, #496]	@ (80032ec <main+0x14b4>)
 80030fa:	edd3 7a00 	vldr	s15, [r3]
 80030fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003102:	eef0 7ae7 	vabs.f32	s15, s15
 8003106:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80032f0 <main+0x14b8>
 800310a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003112:	dc10      	bgt.n	8003136 <main+0x12fe>
						|| fabsf(TargetY - last_TargetY) > 1e-3f) {
 8003114:	4b77      	ldr	r3, [pc, #476]	@ (80032f4 <main+0x14bc>)
 8003116:	ed93 7a00 	vldr	s14, [r3]
 800311a:	4b77      	ldr	r3, [pc, #476]	@ (80032f8 <main+0x14c0>)
 800311c:	edd3 7a00 	vldr	s15, [r3]
 8003120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003124:	eef0 7ae7 	vabs.f32	s15, s15
 8003128:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 80032f0 <main+0x14b8>
 800312c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003134:	dd0a      	ble.n	800314c <main+0x1314>
					last_TargetX = TargetX;
 8003136:	4b6c      	ldr	r3, [pc, #432]	@ (80032e8 <main+0x14b0>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4b6c      	ldr	r3, [pc, #432]	@ (80032ec <main+0x14b4>)
 800313c:	601a      	str	r2, [r3, #0]
					last_TargetY = TargetY;
 800313e:	4b6d      	ldr	r3, [pc, #436]	@ (80032f4 <main+0x14bc>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b6d      	ldr	r3, [pc, #436]	@ (80032f8 <main+0x14c0>)
 8003144:	601a      	str	r2, [r3, #0]
					new_target = true;
 8003146:	4a6d      	ldr	r2, [pc, #436]	@ (80032fc <main+0x14c4>)
 8003148:	2301      	movs	r3, #1
 800314a:	7013      	strb	r3, [r2, #0]
				}

				InverseKinematics(TargetX, TargetY, &TargetR, &TargetP);
 800314c:	4b66      	ldr	r3, [pc, #408]	@ (80032e8 <main+0x14b0>)
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	4b68      	ldr	r3, [pc, #416]	@ (80032f4 <main+0x14bc>)
 8003154:	ed93 7a00 	vldr	s14, [r3]
 8003158:	4969      	ldr	r1, [pc, #420]	@ (8003300 <main+0x14c8>)
 800315a:	486a      	ldr	r0, [pc, #424]	@ (8003304 <main+0x14cc>)
 800315c:	eef0 0a47 	vmov.f32	s1, s14
 8003160:	eeb0 0a67 	vmov.f32	s0, s15
 8003164:	f002 f9a4 	bl	80054b0 <InverseKinematics>
				TargetR_Deg = TargetR * 180.0f / M_PI;
 8003168:	4b66      	ldr	r3, [pc, #408]	@ (8003304 <main+0x14cc>)
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8003308 <main+0x14d0>
 8003172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003176:	ee17 0a90 	vmov	r0, s15
 800317a:	f7fd f9b1 	bl	80004e0 <__aeabi_f2d>
 800317e:	a33e      	add	r3, pc, #248	@ (adr r3, 8003278 <main+0x1440>)
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f7fd fb2e 	bl	80007e4 <__aeabi_ddiv>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	f7fd fcb8 	bl	8000b04 <__aeabi_d2f>
 8003194:	4602      	mov	r2, r0
 8003196:	4b5d      	ldr	r3, [pc, #372]	@ (800330c <main+0x14d4>)
 8003198:	601a      	str	r2, [r3, #0]

				// Only start when there's a new target AND we're at the target
				if (!sequence_active && new_target && Pen_Status == 1
 800319a:	4b5d      	ldr	r3, [pc, #372]	@ (8003310 <main+0x14d8>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	f083 0301 	eor.w	r3, r3, #1
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01f      	beq.n	80031e8 <main+0x13b0>
 80031a8:	4b54      	ldr	r3, [pc, #336]	@ (80032fc <main+0x14c4>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01b      	beq.n	80031e8 <main+0x13b0>
 80031b0:	4b58      	ldr	r3, [pc, #352]	@ (8003314 <main+0x14dc>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d117      	bne.n	80031e8 <main+0x13b0>
						&& CascadeControl_Step()) {
 80031b8:	f002 fbc6 	bl	8005948 <CascadeControl_Step>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d012      	beq.n	80031e8 <main+0x13b0>
					Set_Servo(1); // Tell pen to press
 80031c2:	2001      	movs	r0, #1
 80031c4:	f001 ffbc 	bl	8005140 <Set_Servo>
					pen_timestamp = micros();
 80031c8:	f001 fc88 	bl	8004adc <micros>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4951      	ldr	r1, [pc, #324]	@ (8003318 <main+0x14e0>)
 80031d2:	e9c1 2300 	strd	r2, r3, [r1]
					sequence_active = true;
 80031d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003310 <main+0x14d8>)
 80031d8:	2301      	movs	r3, #1
 80031da:	7013      	strb	r3, [r2, #0]
					waiting_for_up = true;
 80031dc:	4a4f      	ldr	r2, [pc, #316]	@ (800331c <main+0x14e4>)
 80031de:	2301      	movs	r3, #1
 80031e0:	7013      	strb	r3, [r2, #0]
					new_target = false; // consume the new target
 80031e2:	4a46      	ldr	r2, [pc, #280]	@ (80032fc <main+0x14c4>)
 80031e4:	2300      	movs	r3, #0
 80031e6:	7013      	strb	r3, [r2, #0]
				}

				if (sequence_active && waiting_for_up
 80031e8:	4b49      	ldr	r3, [pc, #292]	@ (8003310 <main+0x14d8>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d022      	beq.n	8003236 <main+0x13fe>
 80031f0:	4b4a      	ldr	r3, [pc, #296]	@ (800331c <main+0x14e4>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d01e      	beq.n	8003236 <main+0x13fe>
						&& micros() - pen_timestamp >= pen_delay) {
 80031f8:	f001 fc70 	bl	8004adc <micros>
 80031fc:	4b46      	ldr	r3, [pc, #280]	@ (8003318 <main+0x14e0>)
 80031fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003202:	1a84      	subs	r4, r0, r2
 8003204:	65bc      	str	r4, [r7, #88]	@ 0x58
 8003206:	eb61 0303 	sbc.w	r3, r1, r3
 800320a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800320c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003210:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003212:	4291      	cmp	r1, r2
 8003214:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003216:	eb71 0303 	sbcs.w	r3, r1, r3
 800321a:	d30c      	bcc.n	8003236 <main+0x13fe>
					Set_Servo(0); // Tell pen to lift
 800321c:	2000      	movs	r0, #0
 800321e:	f001 ff8f 	bl	8005140 <Set_Servo>
					pen_timestamp = micros();
 8003222:	f001 fc5b 	bl	8004adc <micros>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	493b      	ldr	r1, [pc, #236]	@ (8003318 <main+0x14e0>)
 800322c:	e9c1 2300 	strd	r2, r3, [r1]
					waiting_for_up = false;
 8003230:	4a3a      	ldr	r2, [pc, #232]	@ (800331c <main+0x14e4>)
 8003232:	2300      	movs	r3, #0
 8003234:	7013      	strb	r3, [r2, #0]
				}

				if (sequence_active && !waiting_for_up && Pen_Status == 1
 8003236:	4b36      	ldr	r3, [pc, #216]	@ (8003310 <main+0x14d8>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8084 	beq.w	8003348 <main+0x1510>
 8003240:	4b36      	ldr	r3, [pc, #216]	@ (800331c <main+0x14e4>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	f083 0301 	eor.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d07c      	beq.n	8003348 <main+0x1510>
 800324e:	4b31      	ldr	r3, [pc, #196]	@ (8003314 <main+0x14dc>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d178      	bne.n	8003348 <main+0x1510>
						&& micros() - pen_timestamp >= pen_delay) {
 8003256:	f001 fc41 	bl	8004adc <micros>
 800325a:	4b2f      	ldr	r3, [pc, #188]	@ (8003318 <main+0x14e0>)
 800325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003260:	1a84      	subs	r4, r0, r2
 8003262:	653c      	str	r4, [r7, #80]	@ 0x50
 8003264:	eb61 0303 	sbc.w	r3, r1, r3
 8003268:	657b      	str	r3, [r7, #84]	@ 0x54
 800326a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800326e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003270:	e058      	b.n	8003324 <main+0x14ec>
 8003272:	bf00      	nop
 8003274:	f3af 8000 	nop.w
 8003278:	54442d18 	.word	0x54442d18
 800327c:	400921fb 	.word	0x400921fb
 8003280:	20000bcd 	.word	0x20000bcd
 8003284:	20000bcc 	.word	0x20000bcc
 8003288:	20000ab0 	.word	0x20000ab0
 800328c:	42c80000 	.word	0x42c80000
 8003290:	c2c80000 	.word	0xc2c80000
 8003294:	20000ba4 	.word	0x20000ba4
 8003298:	43fa0000 	.word	0x43fa0000
 800329c:	c3fa0000 	.word	0xc3fa0000
 80032a0:	20000ba8 	.word	0x20000ba8
 80032a4:	20000af8 	.word	0x20000af8
 80032a8:	20000bbc 	.word	0x20000bbc
 80032ac:	20000b38 	.word	0x20000b38
 80032b0:	20000bc0 	.word	0x20000bc0
 80032b4:	200013d0 	.word	0x200013d0
 80032b8:	20000200 	.word	0x20000200
 80032bc:	20000204 	.word	0x20000204
 80032c0:	20000208 	.word	0x20000208
 80032c4:	20000c08 	.word	0x20000c08
 80032c8:	3c23d70a 	.word	0x3c23d70a
 80032cc:	20000bc4 	.word	0x20000bc4
 80032d0:	20000218 	.word	0x20000218
 80032d4:	2000021c 	.word	0x2000021c
 80032d8:	20000c18 	.word	0x20000c18
 80032dc:	20000c10 	.word	0x20000c10
 80032e0:	20000bc8 	.word	0x20000bc8
 80032e4:	00030d40 	.word	0x00030d40
 80032e8:	20000b8c 	.word	0x20000b8c
 80032ec:	200013d8 	.word	0x200013d8
 80032f0:	3a83126f 	.word	0x3a83126f
 80032f4:	20000b90 	.word	0x20000b90
 80032f8:	200013dc 	.word	0x200013dc
 80032fc:	2000022d 	.word	0x2000022d
 8003300:	20000b98 	.word	0x20000b98
 8003304:	20000b94 	.word	0x20000b94
 8003308:	43340000 	.word	0x43340000
 800330c:	20000aa8 	.word	0x20000aa8
 8003310:	200013e0 	.word	0x200013e0
 8003314:	20000bd0 	.word	0x20000bd0
 8003318:	200013e8 	.word	0x200013e8
 800331c:	200013f0 	.word	0x200013f0
 8003320:	00000000 	.word	0x00000000
 8003324:	4291      	cmp	r1, r2
 8003326:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003328:	eb71 0303 	sbcs.w	r3, r1, r3
 800332c:	d30c      	bcc.n	8003348 <main+0x1510>
					Set_Motor(0, 0);
 800332e:	ed1f 0a04 	vldr	s0, [pc, #-16]	@ 8003320 <main+0x14e8>
 8003332:	2000      	movs	r0, #0
 8003334:	f001 fe86 	bl	8005044 <Set_Motor>
					Set_Motor(1, 0);
 8003338:	ed1f 0a07 	vldr	s0, [pc, #-28]	@ 8003320 <main+0x14e8>
 800333c:	2001      	movs	r0, #1
 800333e:	f001 fe81 	bl	8005044 <Set_Motor>
					sequence_active = false;
 8003342:	4a8d      	ldr	r2, [pc, #564]	@ (8003578 <main+0x1740>)
 8003344:	2300      	movs	r3, #0
 8003346:	7013      	strb	r3, [r2, #0]
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 5) {
 8003348:	4b8c      	ldr	r3, [pc, #560]	@ (800357c <main+0x1744>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b05      	cmp	r3, #5
 800334e:	f040 81e9 	bne.w	8003724 <main+0x18ec>
				static uint64_t timestampState5 = 0;
				int64_t currentTimeState5 = micros();
 8003352:	f001 fbc3 	bl	8004adc <micros>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
				if (currentTimeState5 > timestampState5) {
 800335e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003362:	4b87      	ldr	r3, [pc, #540]	@ (8003580 <main+0x1748>)
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	4282      	cmp	r2, r0
 800336a:	418b      	sbcs	r3, r1
 800336c:	f080 81da 	bcs.w	8003724 <main+0x18ec>
					timestampState5 = currentTimeState5 + 1000; // us
 8003370:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8003374:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8003378:	6139      	str	r1, [r7, #16]
 800337a:	f143 0300 	adc.w	r3, r3, #0
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003384:	4b7e      	ldr	r3, [pc, #504]	@ (8003580 <main+0x1748>)
 8003386:	e9c3 0100 	strd	r0, r1, [r3]

					P_kP_vel = 1.05845642f;
 800338a:	4a7e      	ldr	r2, [pc, #504]	@ (8003584 <main+0x174c>)
 800338c:	4b7e      	ldr	r3, [pc, #504]	@ (8003588 <main+0x1750>)
 800338e:	6013      	str	r3, [r2, #0]
					P_kI_vel = 0.0496f;
 8003390:	4a7e      	ldr	r2, [pc, #504]	@ (800358c <main+0x1754>)
 8003392:	4b7f      	ldr	r3, [pc, #508]	@ (8003590 <main+0x1758>)
 8003394:	6013      	str	r3, [r2, #0]
					P_kD_vel = 0.00f;
 8003396:	4a7f      	ldr	r2, [pc, #508]	@ (8003594 <main+0x175c>)
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	6013      	str	r3, [r2, #0]

					P_kP_pos = 3.0367f;
 800339e:	4a7e      	ldr	r2, [pc, #504]	@ (8003598 <main+0x1760>)
 80033a0:	4b7e      	ldr	r3, [pc, #504]	@ (800359c <main+0x1764>)
 80033a2:	6013      	str	r3, [r2, #0]
					P_kI_pos = 0.10198f;
 80033a4:	4a7e      	ldr	r2, [pc, #504]	@ (80035a0 <main+0x1768>)
 80033a6:	4b7f      	ldr	r3, [pc, #508]	@ (80035a4 <main+0x176c>)
 80033a8:	6013      	str	r3, [r2, #0]
					P_kD_pos = 0.0047f;
 80033aa:	4a7f      	ldr	r2, [pc, #508]	@ (80035a8 <main+0x1770>)
 80033ac:	4b7f      	ldr	r3, [pc, #508]	@ (80035ac <main+0x1774>)
 80033ae:	6013      	str	r3, [r2, #0]

					bool reachedR = fabsf(
							TargetR - Revolute_QEIdata.RadPosition) < 0.068;
 80033b0:	4b7f      	ldr	r3, [pc, #508]	@ (80035b0 <main+0x1778>)
 80033b2:	ed93 7a00 	vldr	s14, [r3]
 80033b6:	4b7f      	ldr	r3, [pc, #508]	@ (80035b4 <main+0x177c>)
 80033b8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80033bc:	ee77 7a67 	vsub.f32	s15, s14, s15
					bool reachedR = fabsf(
 80033c0:	eef0 7ae7 	vabs.f32	s15, s15
 80033c4:	ee17 0a90 	vmov	r0, s15
 80033c8:	f7fd f88a 	bl	80004e0 <__aeabi_f2d>
 80033cc:	2301      	movs	r3, #1
 80033ce:	461c      	mov	r4, r3
 80033d0:	a367      	add	r3, pc, #412	@ (adr r3, 8003570 <main+0x1738>)
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	f7fd fb4d 	bl	8000a74 <__aeabi_dcmplt>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <main+0x15ac>
 80033e0:	2300      	movs	r3, #0
 80033e2:	461c      	mov	r4, r3
 80033e4:	f887 407f 	strb.w	r4, [r7, #127]	@ 0x7f
					bool reachedP = fabsf(
							TargetP - Prismatic_QEIdata.mmPosition) < 0.5;
 80033e8:	4b73      	ldr	r3, [pc, #460]	@ (80035b8 <main+0x1780>)
 80033ea:	ed93 7a00 	vldr	s14, [r3]
 80033ee:	4b73      	ldr	r3, [pc, #460]	@ (80035bc <main+0x1784>)
 80033f0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80033f4:	ee77 7a67 	vsub.f32	s15, s14, s15
					bool reachedP = fabsf(
 80033f8:	eef0 7ae7 	vabs.f32	s15, s15
 80033fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003408:	bf4c      	ite	mi
 800340a:	2301      	movmi	r3, #1
 800340c:	2300      	movpl	r3, #0
 800340e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
					bool all_reached = revolute.finished && prismatic.finished
 8003412:	4b6b      	ldr	r3, [pc, #428]	@ (80035c0 <main+0x1788>)
 8003414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
							&& reachedR && reachedP;
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <main+0x15fe>
					bool all_reached = revolute.finished && prismatic.finished
 800341a:	4b6a      	ldr	r3, [pc, #424]	@ (80035c4 <main+0x178c>)
 800341c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <main+0x15fe>
							&& reachedR && reachedP;
 8003422:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <main+0x15fe>
 800342a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <main+0x15fe>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <main+0x1600>
 8003436:	2300      	movs	r3, #0
					bool all_reached = revolute.finished && prismatic.finished
 8003438:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 800343c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

					int path_len = path_FIBO_length;
 8003448:	4b5f      	ldr	r3, [pc, #380]	@ (80035c8 <main+0x1790>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	67bb      	str	r3, [r7, #120]	@ 0x78

					if (current_index >= path_len) {
 800344e:	4b5f      	ldr	r3, [pc, #380]	@ (80035cc <main+0x1794>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003454:	4293      	cmp	r3, r2
 8003456:	dc11      	bgt.n	800347c <main+0x1644>
						if (all_reached) {
 8003458:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800345c:	2b00      	cmp	r3, #0
 800345e:	d016      	beq.n	800348e <main+0x1656>
							Set_Servo(0);
 8003460:	2000      	movs	r0, #0
 8003462:	f001 fe6d 	bl	8005140 <Set_Servo>
							Set_Motor(0, 0);
 8003466:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 80035d0 <main+0x1798>
 800346a:	2000      	movs	r0, #0
 800346c:	f001 fdea 	bl	8005044 <Set_Motor>
							Set_Motor(1, 0);
 8003470:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 80035d0 <main+0x1798>
 8003474:	2001      	movs	r0, #1
 8003476:	f001 fde5 	bl	8005044 <Set_Motor>
 800347a:	e008      	b.n	800348e <main+0x1656>
						}
					} else {
						if (all_reached) {
 800347c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8003480:	2b00      	cmp	r3, #0
 8003482:	d004      	beq.n	800348e <main+0x1656>
							current_index++;
 8003484:	4b51      	ldr	r3, [pc, #324]	@ (80035cc <main+0x1794>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	4b50      	ldr	r3, [pc, #320]	@ (80035cc <main+0x1794>)
 800348c:	601a      	str	r2, [r3, #0]
						}
					}

					Point target_point = path_FIBO[current_index];
 800348e:	4b4f      	ldr	r3, [pc, #316]	@ (80035cc <main+0x1794>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4950      	ldr	r1, [pc, #320]	@ (80035d4 <main+0x179c>)
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 80034a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

					InverseKinematics(target_point.x, target_point.y, &TargetR,
 80034aa:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80034ae:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80034b2:	4941      	ldr	r1, [pc, #260]	@ (80035b8 <main+0x1780>)
 80034b4:	483e      	ldr	r0, [pc, #248]	@ (80035b0 <main+0x1778>)
 80034b6:	eef0 0a47 	vmov.f32	s1, s14
 80034ba:	eeb0 0a67 	vmov.f32	s0, s15
 80034be:	f001 fff7 	bl	80054b0 <InverseKinematics>
							&TargetP);
					Set_Servo(target_point.p);
 80034c2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80034c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ca:	ee17 0a90 	vmov	r0, s15
 80034ce:	f001 fe37 	bl	8005140 <Set_Servo>

					R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 80034d2:	4b37      	ldr	r3, [pc, #220]	@ (80035b0 <main+0x1778>)
 80034d4:	ed93 7a00 	vldr	s14, [r3]
 80034d8:	4b36      	ldr	r3, [pc, #216]	@ (80035b4 <main+0x177c>)
 80034da:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80034de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e2:	4b3d      	ldr	r3, [pc, #244]	@ (80035d8 <main+0x17a0>)
 80034e4:	edc3 7a00 	vstr	s15, [r3]
					P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 80034e8:	4b33      	ldr	r3, [pc, #204]	@ (80035b8 <main+0x1780>)
 80034ea:	ed93 7a00 	vldr	s14, [r3]
 80034ee:	4b33      	ldr	r3, [pc, #204]	@ (80035bc <main+0x1784>)
 80034f0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80034f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f8:	4b38      	ldr	r3, [pc, #224]	@ (80035dc <main+0x17a4>)
 80034fa:	edc3 7a00 	vstr	s15, [r3]
					float R_Time = Trapezoidal_CalcTotalTime(R_Pos_Error, 1.4f,
 80034fe:	4b36      	ldr	r3, [pc, #216]	@ (80035d8 <main+0x17a0>)
 8003500:	edd3 7a00 	vldr	s15, [r3]
 8003504:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8003508:	eddf 0a35 	vldr	s1, [pc, #212]	@ 80035e0 <main+0x17a8>
 800350c:	eeb0 0a67 	vmov.f32	s0, s15
 8003510:	f001 ff14 	bl	800533c <Trapezoidal_CalcTotalTime>
 8003514:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
							9.0f);
					float P_Time = Trapezoidal_CalcTotalTime(P_Pos_Error,
 8003518:	4b30      	ldr	r3, [pc, #192]	@ (80035dc <main+0x17a4>)
 800351a:	edd3 7a00 	vldr	s15, [r3]
 800351e:	ed9f 1a31 	vldr	s2, [pc, #196]	@ 80035e4 <main+0x17ac>
 8003522:	eddf 0a31 	vldr	s1, [pc, #196]	@ 80035e8 <main+0x17b0>
 8003526:	eeb0 0a67 	vmov.f32	s0, s15
 800352a:	f001 ff07 	bl	800533c <Trapezoidal_CalcTotalTime>
 800352e:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
							300.0f, 1500.0f);
					float new_R_vmax = 1.4f;
 8003532:	4b2e      	ldr	r3, [pc, #184]	@ (80035ec <main+0x17b4>)
 8003534:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
					float new_P_vmax = 300.0f;
 8003538:	4b2d      	ldr	r3, [pc, #180]	@ (80035f0 <main+0x17b8>)
 800353a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
					if (R_Time > P_Time) {
 800353e:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8003542:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8003546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800354a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354e:	dd51      	ble.n	80035f4 <main+0x17bc>
						// Revolute is slower -> reduce Prismatic vmax
						new_P_vmax = Trapezoidal_CalcVmaxFromTime(P_Pos_Error,
 8003550:	4b22      	ldr	r3, [pc, #136]	@ (80035dc <main+0x17a4>)
 8003552:	edd3 7a00 	vldr	s15, [r3]
 8003556:	ed97 1a1d 	vldr	s2, [r7, #116]	@ 0x74
 800355a:	eddf 0a22 	vldr	s1, [pc, #136]	@ 80035e4 <main+0x17ac>
 800355e:	eeb0 0a67 	vmov.f32	s0, s15
 8003562:	f001 ff47 	bl	80053f4 <Trapezoidal_CalcVmaxFromTime>
 8003566:	ed87 0a2e 	vstr	s0, [r7, #184]	@ 0xb8
								1500.0f, R_Time);
						P_Time = R_Time;
 800356a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800356c:	673b      	str	r3, [r7, #112]	@ 0x70
 800356e:	e059      	b.n	8003624 <main+0x17ec>
 8003570:	b020c49c 	.word	0xb020c49c
 8003574:	3fb16872 	.word	0x3fb16872
 8003578:	200013e0 	.word	0x200013e0
 800357c:	20000bcc 	.word	0x20000bcc
 8003580:	200013f8 	.word	0x200013f8
 8003584:	20000218 	.word	0x20000218
 8003588:	3f877b80 	.word	0x3f877b80
 800358c:	2000021c 	.word	0x2000021c
 8003590:	3d4b295f 	.word	0x3d4b295f
 8003594:	20000c18 	.word	0x20000c18
 8003598:	20000220 	.word	0x20000220
 800359c:	4042594b 	.word	0x4042594b
 80035a0:	20000224 	.word	0x20000224
 80035a4:	3dd0dae4 	.word	0x3dd0dae4
 80035a8:	20000228 	.word	0x20000228
 80035ac:	3b9a0275 	.word	0x3b9a0275
 80035b0:	20000b94 	.word	0x20000b94
 80035b4:	20000af8 	.word	0x20000af8
 80035b8:	20000b98 	.word	0x20000b98
 80035bc:	20000b38 	.word	0x20000b38
 80035c0:	2000132c 	.word	0x2000132c
 80035c4:	20001370 	.word	0x20001370
 80035c8:	080238a4 	.word	0x080238a4
 80035cc:	200013b4 	.word	0x200013b4
 80035d0:	00000000 	.word	0x00000000
 80035d4:	0800d698 	.word	0x0800d698
 80035d8:	20000bb4 	.word	0x20000bb4
 80035dc:	20000bb8 	.word	0x20000bb8
 80035e0:	3fb33333 	.word	0x3fb33333
 80035e4:	44bb8000 	.word	0x44bb8000
 80035e8:	43960000 	.word	0x43960000
 80035ec:	3fb33333 	.word	0x3fb33333
 80035f0:	43960000 	.word	0x43960000
					} else if (P_Time > R_Time) {
 80035f4:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80035f8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80035fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003604:	dd0e      	ble.n	8003624 <main+0x17ec>
						// Prismatic is slower -> reduce Revolute vmax
						new_R_vmax = Trapezoidal_CalcVmaxFromTime(R_Pos_Error,
 8003606:	4ba8      	ldr	r3, [pc, #672]	@ (80038a8 <main+0x1a70>)
 8003608:	edd3 7a00 	vldr	s15, [r3]
 800360c:	ed97 1a1c 	vldr	s2, [r7, #112]	@ 0x70
 8003610:	eef2 0a02 	vmov.f32	s1, #34	@ 0x41100000  9.0
 8003614:	eeb0 0a67 	vmov.f32	s0, s15
 8003618:	f001 feec 	bl	80053f4 <Trapezoidal_CalcVmaxFromTime>
 800361c:	ed87 0a2f 	vstr	s0, [r7, #188]	@ 0xbc
								9.0f, P_Time);
						R_Time = P_Time;
 8003620:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003622:	677b      	str	r3, [r7, #116]	@ 0x74
					}
					if (revolute.finished
 8003624:	4ba1      	ldr	r3, [pc, #644]	@ (80038ac <main+0x1a74>)
 8003626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	d020      	beq.n	800366e <main+0x1836>
							&& fabsf(TargetR - last_TargetR) > 0.001f) {
 800362c:	4ba0      	ldr	r3, [pc, #640]	@ (80038b0 <main+0x1a78>)
 800362e:	ed93 7a00 	vldr	s14, [r3]
 8003632:	4ba0      	ldr	r3, [pc, #640]	@ (80038b4 <main+0x1a7c>)
 8003634:	edd3 7a00 	vldr	s15, [r3]
 8003638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800363c:	eef0 7ae7 	vabs.f32	s15, s15
 8003640:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 80038b8 <main+0x1a80>
 8003644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364c:	dd0f      	ble.n	800366e <main+0x1836>
						Trapezoidal_Init(&revolute, R_Pos_Error, new_R_vmax,
 800364e:	4b96      	ldr	r3, [pc, #600]	@ (80038a8 <main+0x1a70>)
 8003650:	edd3 7a00 	vldr	s15, [r3]
 8003654:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8003658:	edd7 0a2f 	vldr	s1, [r7, #188]	@ 0xbc
 800365c:	eeb0 0a67 	vmov.f32	s0, s15
 8003660:	4892      	ldr	r0, [pc, #584]	@ (80038ac <main+0x1a74>)
 8003662:	f7fe f9df 	bl	8001a24 <Trapezoidal_Init>
								9.0f);
						last_TargetR = TargetR;
 8003666:	4b92      	ldr	r3, [pc, #584]	@ (80038b0 <main+0x1a78>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4b92      	ldr	r3, [pc, #584]	@ (80038b4 <main+0x1a7c>)
 800366c:	601a      	str	r2, [r3, #0]
					}
					if (prismatic.finished
 800366e:	4b93      	ldr	r3, [pc, #588]	@ (80038bc <main+0x1a84>)
 8003670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003672:	2b00      	cmp	r3, #0
 8003674:	d020      	beq.n	80036b8 <main+0x1880>
							&& fabsf(TargetP - last_TargetP) > 0.01f) {
 8003676:	4b92      	ldr	r3, [pc, #584]	@ (80038c0 <main+0x1a88>)
 8003678:	ed93 7a00 	vldr	s14, [r3]
 800367c:	4b91      	ldr	r3, [pc, #580]	@ (80038c4 <main+0x1a8c>)
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003686:	eef0 7ae7 	vabs.f32	s15, s15
 800368a:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 80038c8 <main+0x1a90>
 800368e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003696:	dd0f      	ble.n	80036b8 <main+0x1880>
						Trapezoidal_Init(&prismatic, P_Pos_Error, new_P_vmax,
 8003698:	4b8c      	ldr	r3, [pc, #560]	@ (80038cc <main+0x1a94>)
 800369a:	edd3 7a00 	vldr	s15, [r3]
 800369e:	ed9f 1a8c 	vldr	s2, [pc, #560]	@ 80038d0 <main+0x1a98>
 80036a2:	edd7 0a2e 	vldr	s1, [r7, #184]	@ 0xb8
 80036a6:	eeb0 0a67 	vmov.f32	s0, s15
 80036aa:	4884      	ldr	r0, [pc, #528]	@ (80038bc <main+0x1a84>)
 80036ac:	f7fe f9ba 	bl	8001a24 <Trapezoidal_Init>
								1500.0f);
						last_TargetP = TargetP;
 80036b0:	4b83      	ldr	r3, [pc, #524]	@ (80038c0 <main+0x1a88>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b83      	ldr	r3, [pc, #524]	@ (80038c4 <main+0x1a8c>)
 80036b6:	601a      	str	r2, [r3, #0]
					}
					Trapezoidal_Update(&revolute, 0.001f);
 80036b8:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 80038b8 <main+0x1a80>
 80036bc:	487b      	ldr	r0, [pc, #492]	@ (80038ac <main+0x1a74>)
 80036be:	f7fe fa7b 	bl	8001bb8 <Trapezoidal_Update>
					TargetRPos = revolute.current_position;
 80036c2:	4b7a      	ldr	r3, [pc, #488]	@ (80038ac <main+0x1a74>)
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	4b83      	ldr	r3, [pc, #524]	@ (80038d4 <main+0x1a9c>)
 80036c8:	601a      	str	r2, [r3, #0]
					TargetRVel = revolute.current_velocity;
 80036ca:	4b78      	ldr	r3, [pc, #480]	@ (80038ac <main+0x1a74>)
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	4b82      	ldr	r3, [pc, #520]	@ (80038d8 <main+0x1aa0>)
 80036d0:	601a      	str	r2, [r3, #0]
					TargetRAcc = revolute.current_acceleration;
 80036d2:	4b76      	ldr	r3, [pc, #472]	@ (80038ac <main+0x1a74>)
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	4b81      	ldr	r3, [pc, #516]	@ (80038dc <main+0x1aa4>)
 80036d8:	601a      	str	r2, [r3, #0]
					Trapezoidal_Update(&prismatic, 0.001f);
 80036da:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 80038b8 <main+0x1a80>
 80036de:	4877      	ldr	r0, [pc, #476]	@ (80038bc <main+0x1a84>)
 80036e0:	f7fe fa6a 	bl	8001bb8 <Trapezoidal_Update>
					TargetPPos = prismatic.current_position;
 80036e4:	4b75      	ldr	r3, [pc, #468]	@ (80038bc <main+0x1a84>)
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	4b7d      	ldr	r3, [pc, #500]	@ (80038e0 <main+0x1aa8>)
 80036ea:	601a      	str	r2, [r3, #0]
					TargetPVel = prismatic.current_velocity;
 80036ec:	4b73      	ldr	r3, [pc, #460]	@ (80038bc <main+0x1a84>)
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	4b7c      	ldr	r3, [pc, #496]	@ (80038e4 <main+0x1aac>)
 80036f2:	601a      	str	r2, [r3, #0]
					TargetPAcc = prismatic.current_acceleration;
 80036f4:	4b71      	ldr	r3, [pc, #452]	@ (80038bc <main+0x1a84>)
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	4b7b      	ldr	r3, [pc, #492]	@ (80038e8 <main+0x1ab0>)
 80036fa:	601a      	str	r2, [r3, #0]
					PIDStep();
 80036fc:	f001 ffb6 	bl	800566c <PIDStep>
					Workspace_limit();
 8003700:	f001 fd6a 	bl	80051d8 <Workspace_limit>
					Set_Motor(0, R_PWM);
 8003704:	4b79      	ldr	r3, [pc, #484]	@ (80038ec <main+0x1ab4>)
 8003706:	edd3 7a00 	vldr	s15, [r3]
 800370a:	eeb0 0a67 	vmov.f32	s0, s15
 800370e:	2000      	movs	r0, #0
 8003710:	f001 fc98 	bl	8005044 <Set_Motor>
					Set_Motor(1, P_PWM);
 8003714:	4b76      	ldr	r3, [pc, #472]	@ (80038f0 <main+0x1ab8>)
 8003716:	edd3 7a00 	vldr	s15, [r3]
 800371a:	eeb0 0a67 	vmov.f32	s0, s15
 800371e:	2001      	movs	r0, #1
 8003720:	f001 fc90 	bl	8005044 <Set_Motor>
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 6) {
 8003724:	4b73      	ldr	r3, [pc, #460]	@ (80038f4 <main+0x1abc>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b06      	cmp	r3, #6
 800372a:	d177      	bne.n	800381c <main+0x19e4>
				static bool PenIsNotDelay = true;
				static uint64_t lastPressTime6 = 0;
				if (PenIsNotDelay) {
 800372c:	4b72      	ldr	r3, [pc, #456]	@ (80038f8 <main+0x1ac0>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d06c      	beq.n	800380e <main+0x19d6>
					if (IsPress && currentTimer - lastPressTime6 >= 2000000) {
 8003734:	4b71      	ldr	r3, [pc, #452]	@ (80038fc <main+0x1ac4>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d05d      	beq.n	80037f8 <main+0x19c0>
 800373c:	4b70      	ldr	r3, [pc, #448]	@ (8003900 <main+0x1ac8>)
 800373e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003742:	4b70      	ldr	r3, [pc, #448]	@ (8003904 <main+0x1acc>)
 8003744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003748:	1a84      	subs	r4, r0, r2
 800374a:	60bc      	str	r4, [r7, #8]
 800374c:	eb61 0303 	sbc.w	r3, r1, r3
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4b6d      	ldr	r3, [pc, #436]	@ (8003908 <main+0x1ad0>)
 8003754:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003758:	4602      	mov	r2, r0
 800375a:	429a      	cmp	r2, r3
 800375c:	460b      	mov	r3, r1
 800375e:	f173 0300 	sbcs.w	r3, r3, #0
 8003762:	d349      	bcc.n	80037f8 <main+0x19c0>
						lastPressTime6 = currentTimer;
 8003764:	4b66      	ldr	r3, [pc, #408]	@ (8003900 <main+0x1ac8>)
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	4966      	ldr	r1, [pc, #408]	@ (8003904 <main+0x1acc>)
 800376c:	e9c1 2300 	strd	r2, r3, [r1]
						if (TenPointMode) {
 8003770:	4b66      	ldr	r3, [pc, #408]	@ (800390c <main+0x1ad4>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <main+0x1948>
							Mode = 2;
 8003778:	4a5e      	ldr	r2, [pc, #376]	@ (80038f4 <main+0x1abc>)
 800377a:	2302      	movs	r3, #2
 800377c:	7013      	strb	r3, [r2, #0]
						if (TenPointMode) {
 800377e:	e04c      	b.n	800381a <main+0x19e2>
						} else {
							TenPointArray[counter * 2] =
 8003780:	4b63      	ldr	r3, [pc, #396]	@ (8003910 <main+0x1ad8>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	0058      	lsls	r0, r3, #1
									Prismatic_QEIdata.mmPosition;
 8003786:	4b63      	ldr	r3, [pc, #396]	@ (8003914 <main+0x1adc>)
 8003788:	6b99      	ldr	r1, [r3, #56]	@ 0x38
							TenPointArray[counter * 2] =
 800378a:	4a63      	ldr	r2, [pc, #396]	@ (8003918 <main+0x1ae0>)
 800378c:	0083      	lsls	r3, r0, #2
 800378e:	4413      	add	r3, r2
 8003790:	6019      	str	r1, [r3, #0]
							TenPointArray[(counter * 2) + 1] =
 8003792:	4b5f      	ldr	r3, [pc, #380]	@ (8003910 <main+0x1ad8>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	1c58      	adds	r0, r3, #1
									Revolute_QEIdata.RadPosition;
 800379a:	4b60      	ldr	r3, [pc, #384]	@ (800391c <main+0x1ae4>)
 800379c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
							TenPointArray[(counter * 2) + 1] =
 800379e:	4a5e      	ldr	r2, [pc, #376]	@ (8003918 <main+0x1ae0>)
 80037a0:	0083      	lsls	r3, r0, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	6019      	str	r1, [r3, #0]
							SET_TARGET(counter, Prismatic_QEIdata.mmPosition,
 80037a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003910 <main+0x1ad8>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	b25a      	sxtb	r2, r3
 80037ac:	4b59      	ldr	r3, [pc, #356]	@ (8003914 <main+0x1adc>)
 80037ae:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80037b2:	4b5a      	ldr	r3, [pc, #360]	@ (800391c <main+0x1ae4>)
 80037b4:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80037b8:	eef0 0a47 	vmov.f32	s1, s14
 80037bc:	eeb0 0a67 	vmov.f32	s0, s15
 80037c0:	4610      	mov	r0, r2
 80037c2:	f7fd fd61 	bl	8001288 <SET_TARGET>
									Revolute_QEIdata.RadPosition);
							PenIsNotDelay = PenDelay();
 80037c6:	f000 ffcf 	bl	8004768 <PenDelay>
 80037ca:	4603      	mov	r3, r0
 80037cc:	4a4a      	ldr	r2, [pc, #296]	@ (80038f8 <main+0x1ac0>)
 80037ce:	7013      	strb	r3, [r2, #0]

							counter++;
 80037d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003910 <main+0x1ad8>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003910 <main+0x1ad8>)
 80037da:	7013      	strb	r3, [r2, #0]
							if (counter >= 10) {
 80037dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003910 <main+0x1ad8>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b09      	cmp	r3, #9
 80037e2:	d91a      	bls.n	800381a <main+0x19e2>
								counter = 0;
 80037e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003910 <main+0x1ad8>)
 80037e6:	2300      	movs	r3, #0
 80037e8:	7013      	strb	r3, [r2, #0]
								testArraydone = true;
 80037ea:	4a4d      	ldr	r2, [pc, #308]	@ (8003920 <main+0x1ae8>)
 80037ec:	2301      	movs	r3, #1
 80037ee:	7013      	strb	r3, [r2, #0]
								TenPointMode = true;
 80037f0:	4a46      	ldr	r2, [pc, #280]	@ (800390c <main+0x1ad4>)
 80037f2:	2301      	movs	r3, #1
 80037f4:	7013      	strb	r3, [r2, #0]
						if (TenPointMode) {
 80037f6:	e010      	b.n	800381a <main+0x19e2>
							}
						}
					} else if (!TenPointMode) {
 80037f8:	4b44      	ldr	r3, [pc, #272]	@ (800390c <main+0x1ad4>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	f083 0301 	eor.w	r3, r3, #1
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <main+0x19e4>
						Mode = 1;
 8003806:	4a3b      	ldr	r2, [pc, #236]	@ (80038f4 <main+0x1abc>)
 8003808:	2301      	movs	r3, #1
 800380a:	7013      	strb	r3, [r2, #0]
 800380c:	e006      	b.n	800381c <main+0x19e4>
					}
				} else {
					PenIsNotDelay = PenDelay();
 800380e:	f000 ffab 	bl	8004768 <PenDelay>
 8003812:	4603      	mov	r3, r0
 8003814:	4a38      	ldr	r2, [pc, #224]	@ (80038f8 <main+0x1ac0>)
 8003816:	7013      	strb	r3, [r2, #0]
 8003818:	e000      	b.n	800381c <main+0x19e4>
						if (TenPointMode) {
 800381a:	bf00      	nop
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 7) {
 800381c:	4b35      	ldr	r3, [pc, #212]	@ (80038f4 <main+0x1abc>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b07      	cmp	r3, #7
 8003822:	d128      	bne.n	8003876 <main+0x1a3e>
				static uint64_t lastPressTime7 = 0;
				if (testArraydone && IsPress
 8003824:	4b3e      	ldr	r3, [pc, #248]	@ (8003920 <main+0x1ae8>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d021      	beq.n	8003870 <main+0x1a38>
 800382c:	4b33      	ldr	r3, [pc, #204]	@ (80038fc <main+0x1ac4>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01d      	beq.n	8003870 <main+0x1a38>
						&& currentTimer - lastPressTime7 >= 2000000) {
 8003834:	4b32      	ldr	r3, [pc, #200]	@ (8003900 <main+0x1ac8>)
 8003836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800383a:	4b3a      	ldr	r3, [pc, #232]	@ (8003924 <main+0x1aec>)
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	1a84      	subs	r4, r0, r2
 8003842:	603c      	str	r4, [r7, #0]
 8003844:	eb61 0303 	sbc.w	r3, r1, r3
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	4b2f      	ldr	r3, [pc, #188]	@ (8003908 <main+0x1ad0>)
 800384c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003850:	4602      	mov	r2, r0
 8003852:	429a      	cmp	r2, r3
 8003854:	460b      	mov	r3, r1
 8003856:	f173 0300 	sbcs.w	r3, r3, #0
 800385a:	d309      	bcc.n	8003870 <main+0x1a38>
					lastPressTime7 = currentTimer;
 800385c:	4b28      	ldr	r3, [pc, #160]	@ (8003900 <main+0x1ac8>)
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	4930      	ldr	r1, [pc, #192]	@ (8003924 <main+0x1aec>)
 8003864:	e9c1 2300 	strd	r2, r3, [r1]
					TenPointMode = true;
 8003868:	4a28      	ldr	r2, [pc, #160]	@ (800390c <main+0x1ad4>)
 800386a:	2301      	movs	r3, #1
 800386c:	7013      	strb	r3, [r2, #0]
 800386e:	e002      	b.n	8003876 <main+0x1a3e>
				} else {
					Mode = 2;
 8003870:	4a20      	ldr	r2, [pc, #128]	@ (80038f4 <main+0x1abc>)
 8003872:	2302      	movs	r3, #2
 8003874:	7013      	strb	r3, [r2, #0]
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 8) {
 8003876:	4b1f      	ldr	r3, [pc, #124]	@ (80038f4 <main+0x1abc>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b08      	cmp	r3, #8
 800387c:	f47e ab65 	bne.w	8001f4a <main+0x112>
				if (counter8 < 10) {
 8003880:	4b29      	ldr	r3, [pc, #164]	@ (8003928 <main+0x1af0>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b09      	cmp	r3, #9
 8003886:	f200 8082 	bhi.w	800398e <main+0x1b56>
					goCenter8 = true;
 800388a:	4a28      	ldr	r2, [pc, #160]	@ (800392c <main+0x1af4>)
 800388c:	2301      	movs	r3, #1
 800388e:	7013      	strb	r3, [r2, #0]

					if (goCenter8) {
 8003890:	4b26      	ldr	r3, [pc, #152]	@ (800392c <main+0x1af4>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d04d      	beq.n	8003934 <main+0x1afc>
						TargetR = M_PI_2;
 8003898:	4a05      	ldr	r2, [pc, #20]	@ (80038b0 <main+0x1a78>)
 800389a:	4b25      	ldr	r3, [pc, #148]	@ (8003930 <main+0x1af8>)
 800389c:	6013      	str	r3, [r2, #0]
						TargetP = 0;
 800389e:	4a08      	ldr	r2, [pc, #32]	@ (80038c0 <main+0x1a88>)
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e04b      	b.n	8003940 <main+0x1b08>
 80038a8:	20000bb4 	.word	0x20000bb4
 80038ac:	2000132c 	.word	0x2000132c
 80038b0:	20000b94 	.word	0x20000b94
 80038b4:	20001318 	.word	0x20001318
 80038b8:	3a83126f 	.word	0x3a83126f
 80038bc:	20001370 	.word	0x20001370
 80038c0:	20000b98 	.word	0x20000b98
 80038c4:	2000131c 	.word	0x2000131c
 80038c8:	3c23d70a 	.word	0x3c23d70a
 80038cc:	20000bb8 	.word	0x20000bb8
 80038d0:	44bb8000 	.word	0x44bb8000
 80038d4:	20000b9c 	.word	0x20000b9c
 80038d8:	20000ba4 	.word	0x20000ba4
 80038dc:	20000bac 	.word	0x20000bac
 80038e0:	20000ba0 	.word	0x20000ba0
 80038e4:	20000ba8 	.word	0x20000ba8
 80038e8:	20000bb0 	.word	0x20000bb0
 80038ec:	20000bc4 	.word	0x20000bc4
 80038f0:	20000bc8 	.word	0x20000bc8
 80038f4:	20000bcc 	.word	0x20000bcc
 80038f8:	2000022e 	.word	0x2000022e
 80038fc:	20000bcf 	.word	0x20000bcf
 8003900:	20001310 	.word	0x20001310
 8003904:	20001400 	.word	0x20001400
 8003908:	001e8480 	.word	0x001e8480
 800390c:	20000c42 	.word	0x20000c42
 8003910:	20000c41 	.word	0x20000c41
 8003914:	20000b38 	.word	0x20000b38
 8003918:	200012bc 	.word	0x200012bc
 800391c:	20000af8 	.word	0x20000af8
 8003920:	2000130c 	.word	0x2000130c
 8003924:	20001408 	.word	0x20001408
 8003928:	20000c40 	.word	0x20000c40
 800392c:	2000022c 	.word	0x2000022c
 8003930:	3fc90fdb 	.word	0x3fc90fdb
					} else {
						TargetR = M_PI_4;
 8003934:	4a1d      	ldr	r2, [pc, #116]	@ (80039ac <main+0x1b74>)
 8003936:	4b1e      	ldr	r3, [pc, #120]	@ (80039b0 <main+0x1b78>)
 8003938:	6013      	str	r3, [r2, #0]
						TargetP = 150;
 800393a:	4a1e      	ldr	r2, [pc, #120]	@ (80039b4 <main+0x1b7c>)
 800393c:	4b1e      	ldr	r3, [pc, #120]	@ (80039b8 <main+0x1b80>)
 800393e:	6013      	str	r3, [r2, #0]
					}

					if (CascadeControl_Step()) {
 8003940:	f002 f802 	bl	8005948 <CascadeControl_Step>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	f43e aaff 	beq.w	8001f4a <main+0x112>
						if (PenDelay()) {
 800394c:	f000 ff0c 	bl	8004768 <PenDelay>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	f43e aaf9 	beq.w	8001f4a <main+0x112>
							if (goCenter8) {
 8003958:	4b18      	ldr	r3, [pc, #96]	@ (80039bc <main+0x1b84>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <main+0x1b34>
								counter8++;
 8003960:	4b17      	ldr	r3, [pc, #92]	@ (80039c0 <main+0x1b88>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	3301      	adds	r3, #1
 8003966:	b2db      	uxtb	r3, r3
 8003968:	4a15      	ldr	r2, [pc, #84]	@ (80039c0 <main+0x1b88>)
 800396a:	7013      	strb	r3, [r2, #0]
							}
							goCenter8 = !goCenter8;
 800396c:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <main+0x1b84>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf14      	ite	ne
 8003974:	2301      	movne	r3, #1
 8003976:	2300      	moveq	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f083 0301 	eor.w	r3, r3, #1
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	b2db      	uxtb	r3, r3
 8003986:	4a0d      	ldr	r2, [pc, #52]	@ (80039bc <main+0x1b84>)
 8003988:	7013      	strb	r3, [r2, #0]
 800398a:	f7fe bade 	b.w	8001f4a <main+0x112>
						}
					}
				} else if (counter8 >= 10 && IsPress) {
 800398e:	4b0c      	ldr	r3, [pc, #48]	@ (80039c0 <main+0x1b88>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b09      	cmp	r3, #9
 8003994:	f67e aad9 	bls.w	8001f4a <main+0x112>
 8003998:	4b0a      	ldr	r3, [pc, #40]	@ (80039c4 <main+0x1b8c>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f43e aad4 	beq.w	8001f4a <main+0x112>
					counter8 = 0;
 80039a2:	4a07      	ldr	r2, [pc, #28]	@ (80039c0 <main+0x1b88>)
 80039a4:	2300      	movs	r3, #0
 80039a6:	7013      	strb	r3, [r2, #0]
	while (1) {
 80039a8:	f7fe bacf 	b.w	8001f4a <main+0x112>
 80039ac:	20000b94 	.word	0x20000b94
 80039b0:	3f490fdb 	.word	0x3f490fdb
 80039b4:	20000b98 	.word	0x20000b98
 80039b8:	43160000 	.word	0x43160000
 80039bc:	2000022c 	.word	0x2000022c
 80039c0:	20000c40 	.word	0x20000c40
 80039c4:	20000bcf 	.word	0x20000bcf

080039c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b094      	sub	sp, #80	@ 0x50
 80039cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80039ce:	f107 0318 	add.w	r3, r7, #24
 80039d2:	2238      	movs	r2, #56	@ 0x38
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f008 ff06 	bl	800c7e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80039dc:	1d3b      	adds	r3, r7, #4
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	605a      	str	r2, [r3, #4]
 80039e4:	609a      	str	r2, [r3, #8]
 80039e6:	60da      	str	r2, [r3, #12]
 80039e8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80039ea:	2000      	movs	r0, #0
 80039ec:	f003 fa44 	bl	8006e78 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039f0:	2302      	movs	r3, #2
 80039f2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039f8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039fa:	2340      	movs	r3, #64	@ 0x40
 80039fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039fe:	2302      	movs	r3, #2
 8003a00:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a02:	2302      	movs	r3, #2
 8003a04:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003a06:	2304      	movs	r3, #4
 8003a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003a0a:	2355      	movs	r3, #85	@ 0x55
 8003a0c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003a12:	2302      	movs	r3, #2
 8003a14:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003a16:	2302      	movs	r3, #2
 8003a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003a1a:	f107 0318 	add.w	r3, r7, #24
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f003 fade 	bl	8006fe0 <HAL_RCC_OscConfig>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <SystemClock_Config+0x66>
		Error_Handler();
 8003a2a:	f002 f80f 	bl	8005a4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003a2e:	230f      	movs	r3, #15
 8003a30:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a32:	2303      	movs	r3, #3
 8003a34:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003a42:	1d3b      	adds	r3, r7, #4
 8003a44:	2104      	movs	r1, #4
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 fddc 	bl	8007604 <HAL_RCC_ClockConfig>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <SystemClock_Config+0x8e>
		Error_Handler();
 8003a52:	f001 fffb 	bl	8005a4c <Error_Handler>
	}
}
 8003a56:	bf00      	nop
 8003a58:	3750      	adds	r7, #80	@ 0x50
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08c      	sub	sp, #48	@ 0x30
 8003a64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003a66:	f107 031c 	add.w	r3, r7, #28
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	605a      	str	r2, [r3, #4]
 8003a70:	609a      	str	r2, [r3, #8]
 8003a72:	60da      	str	r2, [r3, #12]
 8003a74:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003a76:	f107 030c 	add.w	r3, r7, #12
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	609a      	str	r2, [r3, #8]
 8003a82:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003a84:	463b      	mov	r3, r7
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	605a      	str	r2, [r3, #4]
 8003a8c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003a8e:	4b35      	ldr	r3, [pc, #212]	@ (8003b64 <MX_TIM1_Init+0x104>)
 8003a90:	4a35      	ldr	r2, [pc, #212]	@ (8003b68 <MX_TIM1_Init+0x108>)
 8003a92:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 8003a94:	4b33      	ldr	r3, [pc, #204]	@ (8003b64 <MX_TIM1_Init+0x104>)
 8003a96:	22a9      	movs	r2, #169	@ 0xa9
 8003a98:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a9a:	4b32      	ldr	r3, [pc, #200]	@ (8003b64 <MX_TIM1_Init+0x104>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003aa0:	4b30      	ldr	r3, [pc, #192]	@ (8003b64 <MX_TIM1_Init+0x104>)
 8003aa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aa6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8003b64 <MX_TIM1_Init+0x104>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003aae:	4b2d      	ldr	r3, [pc, #180]	@ (8003b64 <MX_TIM1_Init+0x104>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b64 <MX_TIM1_Init+0x104>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8003aba:	482a      	ldr	r0, [pc, #168]	@ (8003b64 <MX_TIM1_Init+0x104>)
 8003abc:	f004 fcd8 	bl	8008470 <HAL_TIM_IC_Init>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <MX_TIM1_Init+0x6a>
		Error_Handler();
 8003ac6:	f001 ffc1 	bl	8005a4c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003aca:	2304      	movs	r3, #4
 8003acc:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003ace:	2360      	movs	r3, #96	@ 0x60
 8003ad0:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8003ade:	f107 031c 	add.w	r3, r7, #28
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	481f      	ldr	r0, [pc, #124]	@ (8003b64 <MX_TIM1_Init+0x104>)
 8003ae6:	f005 fca3 	bl	8009430 <HAL_TIM_SlaveConfigSynchro>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <MX_TIM1_Init+0x94>
		Error_Handler();
 8003af0:	f001 ffac 	bl	8005a4c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003af8:	2302      	movs	r3, #2
 8003afa:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003b04:	f107 030c 	add.w	r3, r7, #12
 8003b08:	2200      	movs	r2, #0
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4815      	ldr	r0, [pc, #84]	@ (8003b64 <MX_TIM1_Init+0x104>)
 8003b0e:	f005 f9c8 	bl	8008ea2 <HAL_TIM_IC_ConfigChannel>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_TIM1_Init+0xbc>
		Error_Handler();
 8003b18:	f001 ff98 	bl	8005a4c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003b20:	2301      	movs	r3, #1
 8003b22:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003b24:	f107 030c 	add.w	r3, r7, #12
 8003b28:	2204      	movs	r2, #4
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	480d      	ldr	r0, [pc, #52]	@ (8003b64 <MX_TIM1_Init+0x104>)
 8003b2e:	f005 f9b8 	bl	8008ea2 <HAL_TIM_IC_ConfigChannel>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <MX_TIM1_Init+0xdc>
		Error_Handler();
 8003b38:	f001 ff88 	bl	8005a4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b40:	2300      	movs	r3, #0
 8003b42:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003b48:	463b      	mov	r3, r7
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4805      	ldr	r0, [pc, #20]	@ (8003b64 <MX_TIM1_Init+0x104>)
 8003b4e:	f006 fd8b 	bl	800a668 <HAL_TIMEx_MasterConfigSynchronization>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003b58:	f001 ff78 	bl	8005a4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
}
 8003b5c:	bf00      	nop
 8003b5e:	3730      	adds	r7, #48	@ 0x30
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	200002b0 	.word	0x200002b0
 8003b68:	40012c00 	.word	0x40012c00

08003b6c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08c      	sub	sp, #48	@ 0x30
 8003b70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003b72:	f107 031c 	add.w	r3, r7, #28
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	609a      	str	r2, [r3, #8]
 8003b7e:	60da      	str	r2, [r3, #12]
 8003b80:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003b82:	f107 030c 	add.w	r3, r7, #12
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003b90:	463b      	mov	r3, r7
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003b9a:	4b33      	ldr	r3, [pc, #204]	@ (8003c68 <MX_TIM2_Init+0xfc>)
 8003b9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ba0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 8003ba2:	4b31      	ldr	r3, [pc, #196]	@ (8003c68 <MX_TIM2_Init+0xfc>)
 8003ba4:	22a9      	movs	r2, #169	@ 0xa9
 8003ba6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba8:	4b2f      	ldr	r3, [pc, #188]	@ (8003c68 <MX_TIM2_Init+0xfc>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003bae:	4b2e      	ldr	r3, [pc, #184]	@ (8003c68 <MX_TIM2_Init+0xfc>)
 8003bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8003c68 <MX_TIM2_Init+0xfc>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8003c68 <MX_TIM2_Init+0xfc>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8003bc2:	4829      	ldr	r0, [pc, #164]	@ (8003c68 <MX_TIM2_Init+0xfc>)
 8003bc4:	f004 fc54 	bl	8008470 <HAL_TIM_IC_Init>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <MX_TIM2_Init+0x66>
		Error_Handler();
 8003bce:	f001 ff3d 	bl	8005a4c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003bd2:	2304      	movs	r3, #4
 8003bd4:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003bd6:	2350      	movs	r3, #80	@ 0x50
 8003bd8:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003bde:	2300      	movs	r3, #0
 8003be0:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003be6:	f107 031c 	add.w	r3, r7, #28
 8003bea:	4619      	mov	r1, r3
 8003bec:	481e      	ldr	r0, [pc, #120]	@ (8003c68 <MX_TIM2_Init+0xfc>)
 8003bee:	f005 fc1f 	bl	8009430 <HAL_TIM_SlaveConfigSynchro>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <MX_TIM2_Init+0x90>
		Error_Handler();
 8003bf8:	f001 ff28 	bl	8005a4c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003c00:	2301      	movs	r3, #1
 8003c02:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003c0c:	f107 030c 	add.w	r3, r7, #12
 8003c10:	2200      	movs	r2, #0
 8003c12:	4619      	mov	r1, r3
 8003c14:	4814      	ldr	r0, [pc, #80]	@ (8003c68 <MX_TIM2_Init+0xfc>)
 8003c16:	f005 f944 	bl	8008ea2 <HAL_TIM_IC_ConfigChannel>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <MX_TIM2_Init+0xb8>
		Error_Handler();
 8003c20:	f001 ff14 	bl	8005a4c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003c24:	2302      	movs	r3, #2
 8003c26:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003c2c:	f107 030c 	add.w	r3, r7, #12
 8003c30:	2204      	movs	r2, #4
 8003c32:	4619      	mov	r1, r3
 8003c34:	480c      	ldr	r0, [pc, #48]	@ (8003c68 <MX_TIM2_Init+0xfc>)
 8003c36:	f005 f934 	bl	8008ea2 <HAL_TIM_IC_ConfigChannel>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <MX_TIM2_Init+0xd8>
		Error_Handler();
 8003c40:	f001 ff04 	bl	8005a4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c44:	2300      	movs	r3, #0
 8003c46:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003c4c:	463b      	mov	r3, r7
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4805      	ldr	r0, [pc, #20]	@ (8003c68 <MX_TIM2_Init+0xfc>)
 8003c52:	f006 fd09 	bl	800a668 <HAL_TIMEx_MasterConfigSynchronization>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_TIM2_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 8003c5c:	f001 fef6 	bl	8005a4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 8003c60:	bf00      	nop
 8003c62:	3730      	adds	r7, #48	@ 0x30
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	2000037c 	.word	0x2000037c

08003c6c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08c      	sub	sp, #48	@ 0x30
 8003c70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003c72:	f107 030c 	add.w	r3, r7, #12
 8003c76:	2224      	movs	r2, #36	@ 0x24
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f008 fdb4 	bl	800c7e8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c80:	463b      	mov	r3, r7
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	605a      	str	r2, [r3, #4]
 8003c88:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003c8a:	4b21      	ldr	r3, [pc, #132]	@ (8003d10 <MX_TIM3_Init+0xa4>)
 8003c8c:	4a21      	ldr	r2, [pc, #132]	@ (8003d14 <MX_TIM3_Init+0xa8>)
 8003c8e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003c90:	4b1f      	ldr	r3, [pc, #124]	@ (8003d10 <MX_TIM3_Init+0xa4>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c96:	4b1e      	ldr	r3, [pc, #120]	@ (8003d10 <MX_TIM3_Init+0xa4>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003d10 <MX_TIM3_Init+0xa4>)
 8003c9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ca2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d10 <MX_TIM3_Init+0xa4>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003caa:	4b19      	ldr	r3, [pc, #100]	@ (8003d10 <MX_TIM3_Init+0xa4>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8003cd4:	f107 030c 	add.w	r3, r7, #12
 8003cd8:	4619      	mov	r1, r3
 8003cda:	480d      	ldr	r0, [pc, #52]	@ (8003d10 <MX_TIM3_Init+0xa4>)
 8003cdc:	f004 fe26 	bl	800892c <HAL_TIM_Encoder_Init>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_TIM3_Init+0x7e>
		Error_Handler();
 8003ce6:	f001 feb1 	bl	8005a4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cea:	2300      	movs	r3, #0
 8003cec:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003cf2:	463b      	mov	r3, r7
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4806      	ldr	r0, [pc, #24]	@ (8003d10 <MX_TIM3_Init+0xa4>)
 8003cf8:	f006 fcb6 	bl	800a668 <HAL_TIMEx_MasterConfigSynchronization>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003d02:	f001 fea3 	bl	8005a4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
}
 8003d06:	bf00      	nop
 8003d08:	3730      	adds	r7, #48	@ 0x30
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000448 	.word	0x20000448
 8003d14:	40000400 	.word	0x40000400

08003d18 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08c      	sub	sp, #48	@ 0x30
 8003d1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003d1e:	f107 030c 	add.w	r3, r7, #12
 8003d22:	2224      	movs	r2, #36	@ 0x24
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f008 fd5e 	bl	800c7e8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003d36:	4b21      	ldr	r3, [pc, #132]	@ (8003dbc <MX_TIM4_Init+0xa4>)
 8003d38:	4a21      	ldr	r2, [pc, #132]	@ (8003dc0 <MX_TIM4_Init+0xa8>)
 8003d3a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dbc <MX_TIM4_Init+0xa4>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d42:	4b1e      	ldr	r3, [pc, #120]	@ (8003dbc <MX_TIM4_Init+0xa4>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003d48:	4b1c      	ldr	r3, [pc, #112]	@ (8003dbc <MX_TIM4_Init+0xa4>)
 8003d4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d4e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d50:	4b1a      	ldr	r3, [pc, #104]	@ (8003dbc <MX_TIM4_Init+0xa4>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d56:	4b19      	ldr	r3, [pc, #100]	@ (8003dbc <MX_TIM4_Init+0xa4>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d64:	2301      	movs	r3, #1
 8003d66:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d70:	2300      	movs	r3, #0
 8003d72:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d74:	2301      	movs	r3, #1
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003d80:	f107 030c 	add.w	r3, r7, #12
 8003d84:	4619      	mov	r1, r3
 8003d86:	480d      	ldr	r0, [pc, #52]	@ (8003dbc <MX_TIM4_Init+0xa4>)
 8003d88:	f004 fdd0 	bl	800892c <HAL_TIM_Encoder_Init>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <MX_TIM4_Init+0x7e>
		Error_Handler();
 8003d92:	f001 fe5b 	bl	8005a4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d96:	2300      	movs	r3, #0
 8003d98:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003d9e:	463b      	mov	r3, r7
 8003da0:	4619      	mov	r1, r3
 8003da2:	4806      	ldr	r0, [pc, #24]	@ (8003dbc <MX_TIM4_Init+0xa4>)
 8003da4:	f006 fc60 	bl	800a668 <HAL_TIMEx_MasterConfigSynchronization>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003dae:	f001 fe4d 	bl	8005a4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
}
 8003db2:	bf00      	nop
 8003db4:	3730      	adds	r7, #48	@ 0x30
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000514 	.word	0x20000514
 8003dc0:	40000800 	.word	0x40000800

08003dc4 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003dca:	f107 0310 	add.w	r3, r7, #16
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	605a      	str	r2, [r3, #4]
 8003dd4:	609a      	str	r2, [r3, #8]
 8003dd6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003dd8:	1d3b      	adds	r3, r7, #4
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003de2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e58 <MX_TIM5_Init+0x94>)
 8003de4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e5c <MX_TIM5_Init+0x98>)
 8003de6:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 8003de8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e58 <MX_TIM5_Init+0x94>)
 8003dea:	22a9      	movs	r2, #169	@ 0xa9
 8003dec:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dee:	4b1a      	ldr	r3, [pc, #104]	@ (8003e58 <MX_TIM5_Init+0x94>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003df4:	4b18      	ldr	r3, [pc, #96]	@ (8003e58 <MX_TIM5_Init+0x94>)
 8003df6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dfa:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dfc:	4b16      	ldr	r3, [pc, #88]	@ (8003e58 <MX_TIM5_Init+0x94>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e02:	4b15      	ldr	r3, [pc, #84]	@ (8003e58 <MX_TIM5_Init+0x94>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003e08:	4813      	ldr	r0, [pc, #76]	@ (8003e58 <MX_TIM5_Init+0x94>)
 8003e0a:	f004 f865 	bl	8007ed8 <HAL_TIM_Base_Init>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <MX_TIM5_Init+0x54>
		Error_Handler();
 8003e14:	f001 fe1a 	bl	8005a4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e1c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8003e1e:	f107 0310 	add.w	r3, r7, #16
 8003e22:	4619      	mov	r1, r3
 8003e24:	480c      	ldr	r0, [pc, #48]	@ (8003e58 <MX_TIM5_Init+0x94>)
 8003e26:	f005 f9ed 	bl	8009204 <HAL_TIM_ConfigClockSource>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <MX_TIM5_Init+0x70>
		Error_Handler();
 8003e30:	f001 fe0c 	bl	8005a4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e34:	2300      	movs	r3, #0
 8003e36:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8003e3c:	1d3b      	adds	r3, r7, #4
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4805      	ldr	r0, [pc, #20]	@ (8003e58 <MX_TIM5_Init+0x94>)
 8003e42:	f006 fc11 	bl	800a668 <HAL_TIMEx_MasterConfigSynchronization>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8003e4c:	f001 fdfe 	bl	8005a4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
}
 8003e50:	bf00      	nop
 8003e52:	3720      	adds	r7, #32
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	200005e0 	.word	0x200005e0
 8003e5c:	40000c00 	.word	0x40000c00

08003e60 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b09c      	sub	sp, #112	@ 0x70
 8003e64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003e66:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	605a      	str	r2, [r3, #4]
 8003e70:	609a      	str	r2, [r3, #8]
 8003e72:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003e80:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	60da      	str	r2, [r3, #12]
 8003e8e:	611a      	str	r2, [r3, #16]
 8003e90:	615a      	str	r2, [r3, #20]
 8003e92:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	2234      	movs	r2, #52	@ 0x34
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f008 fca4 	bl	800c7e8 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8003fd0 <MX_TIM8_Init+0x170>)
 8003ea2:	4a4c      	ldr	r2, [pc, #304]	@ (8003fd4 <MX_TIM8_Init+0x174>)
 8003ea4:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 8003ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8003fd0 <MX_TIM8_Init+0x170>)
 8003ea8:	22a9      	movs	r2, #169	@ 0xa9
 8003eaa:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eac:	4b48      	ldr	r3, [pc, #288]	@ (8003fd0 <MX_TIM8_Init+0x170>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 100;
 8003eb2:	4b47      	ldr	r3, [pc, #284]	@ (8003fd0 <MX_TIM8_Init+0x170>)
 8003eb4:	2264      	movs	r2, #100	@ 0x64
 8003eb6:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eb8:	4b45      	ldr	r3, [pc, #276]	@ (8003fd0 <MX_TIM8_Init+0x170>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8003ebe:	4b44      	ldr	r3, [pc, #272]	@ (8003fd0 <MX_TIM8_Init+0x170>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ec4:	4b42      	ldr	r3, [pc, #264]	@ (8003fd0 <MX_TIM8_Init+0x170>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8003eca:	4841      	ldr	r0, [pc, #260]	@ (8003fd0 <MX_TIM8_Init+0x170>)
 8003ecc:	f004 f804 	bl	8007ed8 <HAL_TIM_Base_Init>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_TIM8_Init+0x7a>
		Error_Handler();
 8003ed6:	f001 fdb9 	bl	8005a4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003eda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ede:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8003ee0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	483a      	ldr	r0, [pc, #232]	@ (8003fd0 <MX_TIM8_Init+0x170>)
 8003ee8:	f005 f98c 	bl	8009204 <HAL_TIM_ConfigClockSource>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_TIM8_Init+0x96>
		Error_Handler();
 8003ef2:	f001 fdab 	bl	8005a4c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8003ef6:	4836      	ldr	r0, [pc, #216]	@ (8003fd0 <MX_TIM8_Init+0x170>)
 8003ef8:	f004 f93a 	bl	8008170 <HAL_TIM_PWM_Init>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <MX_TIM8_Init+0xa6>
		Error_Handler();
 8003f02:	f001 fda3 	bl	8005a4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f06:	2300      	movs	r3, #0
 8003f08:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8003f12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003f16:	4619      	mov	r1, r3
 8003f18:	482d      	ldr	r0, [pc, #180]	@ (8003fd0 <MX_TIM8_Init+0x170>)
 8003f1a:	f006 fba5 	bl	800a668 <HAL_TIMEx_MasterConfigSynchronization>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <MX_TIM8_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8003f24:	f001 fd92 	bl	8005a4c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f28:	2360      	movs	r3, #96	@ 0x60
 8003f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 100;
 8003f2c:	2364      	movs	r3, #100	@ 0x64
 8003f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f30:	2300      	movs	r3, #0
 8003f32:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f34:	2300      	movs	r3, #0
 8003f36:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f40:	2300      	movs	r3, #0
 8003f42:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 8003f44:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f48:	2208      	movs	r2, #8
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4820      	ldr	r0, [pc, #128]	@ (8003fd0 <MX_TIM8_Init+0x170>)
 8003f4e:	f005 f845 	bl	8008fdc <HAL_TIM_PWM_ConfigChannel>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <MX_TIM8_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003f58:	f001 fd78 	bl	8005a4c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 8003f5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f60:	220c      	movs	r2, #12
 8003f62:	4619      	mov	r1, r3
 8003f64:	481a      	ldr	r0, [pc, #104]	@ (8003fd0 <MX_TIM8_Init+0x170>)
 8003f66:	f005 f839 	bl	8008fdc <HAL_TIM_PWM_ConfigChannel>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_TIM8_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 8003f70:	f001 fd6c 	bl	8005a4c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f8c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003f92:	2300      	movs	r3, #0
 8003f94:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8003fac:	1d3b      	adds	r3, r7, #4
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4807      	ldr	r0, [pc, #28]	@ (8003fd0 <MX_TIM8_Init+0x170>)
 8003fb2:	f006 fbef 	bl	800a794 <HAL_TIMEx_ConfigBreakDeadTime>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <MX_TIM8_Init+0x160>
			!= HAL_OK) {
		Error_Handler();
 8003fbc:	f001 fd46 	bl	8005a4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8003fc0:	4803      	ldr	r0, [pc, #12]	@ (8003fd0 <MX_TIM8_Init+0x170>)
 8003fc2:	f001 fed7 	bl	8005d74 <HAL_TIM_MspPostInit>
}
 8003fc6:	bf00      	nop
 8003fc8:	3770      	adds	r7, #112	@ 0x70
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	200006ac 	.word	0x200006ac
 8003fd4:	40013400 	.word	0x40013400

08003fd8 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b09c      	sub	sp, #112	@ 0x70
 8003fdc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003fde:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	609a      	str	r2, [r3, #8]
 8003fea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003fec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003ff8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	60da      	str	r2, [r3, #12]
 8004006:	611a      	str	r2, [r3, #16]
 8004008:	615a      	str	r2, [r3, #20]
 800400a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800400c:	1d3b      	adds	r3, r7, #4
 800400e:	2234      	movs	r2, #52	@ 0x34
 8004010:	2100      	movs	r1, #0
 8004012:	4618      	mov	r0, r3
 8004014:	f008 fbe8 	bl	800c7e8 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8004018:	4b3f      	ldr	r3, [pc, #252]	@ (8004118 <MX_TIM15_Init+0x140>)
 800401a:	4a40      	ldr	r2, [pc, #256]	@ (800411c <MX_TIM15_Init+0x144>)
 800401c:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 169;
 800401e:	4b3e      	ldr	r3, [pc, #248]	@ (8004118 <MX_TIM15_Init+0x140>)
 8004020:	22a9      	movs	r2, #169	@ 0xa9
 8004022:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004024:	4b3c      	ldr	r3, [pc, #240]	@ (8004118 <MX_TIM15_Init+0x140>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 20000;
 800402a:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <MX_TIM15_Init+0x140>)
 800402c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8004030:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004032:	4b39      	ldr	r3, [pc, #228]	@ (8004118 <MX_TIM15_Init+0x140>)
 8004034:	2200      	movs	r2, #0
 8004036:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8004038:	4b37      	ldr	r3, [pc, #220]	@ (8004118 <MX_TIM15_Init+0x140>)
 800403a:	2200      	movs	r2, #0
 800403c:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800403e:	4b36      	ldr	r3, [pc, #216]	@ (8004118 <MX_TIM15_Init+0x140>)
 8004040:	2200      	movs	r2, #0
 8004042:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8004044:	4834      	ldr	r0, [pc, #208]	@ (8004118 <MX_TIM15_Init+0x140>)
 8004046:	f003 ff47 	bl	8007ed8 <HAL_TIM_Base_Init>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_TIM15_Init+0x7c>
		Error_Handler();
 8004050:	f001 fcfc 	bl	8005a4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004054:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004058:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 800405a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800405e:	4619      	mov	r1, r3
 8004060:	482d      	ldr	r0, [pc, #180]	@ (8004118 <MX_TIM15_Init+0x140>)
 8004062:	f005 f8cf 	bl	8009204 <HAL_TIM_ConfigClockSource>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <MX_TIM15_Init+0x98>
		Error_Handler();
 800406c:	f001 fcee 	bl	8005a4c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8004070:	4829      	ldr	r0, [pc, #164]	@ (8004118 <MX_TIM15_Init+0x140>)
 8004072:	f004 f87d 	bl	8008170 <HAL_TIM_PWM_Init>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <MX_TIM15_Init+0xa8>
		Error_Handler();
 800407c:	f001 fce6 	bl	8005a4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004080:	2300      	movs	r3, #0
 8004082:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004084:	2300      	movs	r3, #0
 8004086:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8004088:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800408c:	4619      	mov	r1, r3
 800408e:	4822      	ldr	r0, [pc, #136]	@ (8004118 <MX_TIM15_Init+0x140>)
 8004090:	f006 faea 	bl	800a668 <HAL_TIMEx_MasterConfigSynchronization>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_TIM15_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 800409a:	f001 fcd7 	bl	8005a4c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800409e:	2360      	movs	r3, #96	@ 0x60
 80040a0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040a6:	2300      	movs	r3, #0
 80040a8:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040aa:	2300      	movs	r3, #0
 80040ac:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040b2:	2300      	movs	r3, #0
 80040b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 80040ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80040be:	2200      	movs	r2, #0
 80040c0:	4619      	mov	r1, r3
 80040c2:	4815      	ldr	r0, [pc, #84]	@ (8004118 <MX_TIM15_Init+0x140>)
 80040c4:	f004 ff8a 	bl	8008fdc <HAL_TIM_PWM_ConfigChannel>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <MX_TIM15_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 80040ce:	f001 fcbd 	bl	8005a4c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040ea:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 80040f4:	1d3b      	adds	r3, r7, #4
 80040f6:	4619      	mov	r1, r3
 80040f8:	4807      	ldr	r0, [pc, #28]	@ (8004118 <MX_TIM15_Init+0x140>)
 80040fa:	f006 fb4b 	bl	800a794 <HAL_TIMEx_ConfigBreakDeadTime>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <MX_TIM15_Init+0x130>
			!= HAL_OK) {
		Error_Handler();
 8004104:	f001 fca2 	bl	8005a4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8004108:	4803      	ldr	r0, [pc, #12]	@ (8004118 <MX_TIM15_Init+0x140>)
 800410a:	f001 fe33 	bl	8005d74 <HAL_TIM_MspPostInit>
}
 800410e:	bf00      	nop
 8004110:	3770      	adds	r7, #112	@ 0x70
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000778 	.word	0x20000778
 800411c:	40014000 	.word	0x40014000

08004120 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8004124:	4b14      	ldr	r3, [pc, #80]	@ (8004178 <MX_TIM16_Init+0x58>)
 8004126:	4a15      	ldr	r2, [pc, #84]	@ (800417c <MX_TIM16_Init+0x5c>)
 8004128:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 800412a:	4b13      	ldr	r3, [pc, #76]	@ (8004178 <MX_TIM16_Init+0x58>)
 800412c:	22a9      	movs	r2, #169	@ 0xa9
 800412e:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004130:	4b11      	ldr	r3, [pc, #68]	@ (8004178 <MX_TIM16_Init+0x58>)
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 8004136:	4b10      	ldr	r3, [pc, #64]	@ (8004178 <MX_TIM16_Init+0x58>)
 8004138:	f240 4279 	movw	r2, #1145	@ 0x479
 800413c:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800413e:	4b0e      	ldr	r3, [pc, #56]	@ (8004178 <MX_TIM16_Init+0x58>)
 8004140:	2200      	movs	r2, #0
 8004142:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8004144:	4b0c      	ldr	r3, [pc, #48]	@ (8004178 <MX_TIM16_Init+0x58>)
 8004146:	2200      	movs	r2, #0
 8004148:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800414a:	4b0b      	ldr	r3, [pc, #44]	@ (8004178 <MX_TIM16_Init+0x58>)
 800414c:	2200      	movs	r2, #0
 800414e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8004150:	4809      	ldr	r0, [pc, #36]	@ (8004178 <MX_TIM16_Init+0x58>)
 8004152:	f003 fec1 	bl	8007ed8 <HAL_TIM_Base_Init>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <MX_TIM16_Init+0x40>
		Error_Handler();
 800415c:	f001 fc76 	bl	8005a4c <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 8004160:	2108      	movs	r1, #8
 8004162:	4805      	ldr	r0, [pc, #20]	@ (8004178 <MX_TIM16_Init+0x58>)
 8004164:	f004 faec 	bl	8008740 <HAL_TIM_OnePulse_Init>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <MX_TIM16_Init+0x52>
		Error_Handler();
 800416e:	f001 fc6d 	bl	8005a4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */
}
 8004172:	bf00      	nop
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000844 	.word	0x20000844
 800417c:	40014400 	.word	0x40014400

08004180 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004184:	4b23      	ldr	r3, [pc, #140]	@ (8004214 <MX_USART2_UART_Init+0x94>)
 8004186:	4a24      	ldr	r2, [pc, #144]	@ (8004218 <MX_USART2_UART_Init+0x98>)
 8004188:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800418a:	4b22      	ldr	r3, [pc, #136]	@ (8004214 <MX_USART2_UART_Init+0x94>)
 800418c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004190:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8004192:	4b20      	ldr	r3, [pc, #128]	@ (8004214 <MX_USART2_UART_Init+0x94>)
 8004194:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004198:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800419a:	4b1e      	ldr	r3, [pc, #120]	@ (8004214 <MX_USART2_UART_Init+0x94>)
 800419c:	2200      	movs	r2, #0
 800419e:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 80041a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004214 <MX_USART2_UART_Init+0x94>)
 80041a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041a6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80041a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004214 <MX_USART2_UART_Init+0x94>)
 80041aa:	220c      	movs	r2, #12
 80041ac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ae:	4b19      	ldr	r3, [pc, #100]	@ (8004214 <MX_USART2_UART_Init+0x94>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80041b4:	4b17      	ldr	r3, [pc, #92]	@ (8004214 <MX_USART2_UART_Init+0x94>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041ba:	4b16      	ldr	r3, [pc, #88]	@ (8004214 <MX_USART2_UART_Init+0x94>)
 80041bc:	2200      	movs	r2, #0
 80041be:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041c0:	4b14      	ldr	r3, [pc, #80]	@ (8004214 <MX_USART2_UART_Init+0x94>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041c6:	4b13      	ldr	r3, [pc, #76]	@ (8004214 <MX_USART2_UART_Init+0x94>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80041cc:	4811      	ldr	r0, [pc, #68]	@ (8004214 <MX_USART2_UART_Init+0x94>)
 80041ce:	f006 fbc5 	bl	800a95c <HAL_UART_Init>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 80041d8:	f001 fc38 	bl	8005a4c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80041dc:	2100      	movs	r1, #0
 80041de:	480d      	ldr	r0, [pc, #52]	@ (8004214 <MX_USART2_UART_Init+0x94>)
 80041e0:	f008 fa01 	bl	800c5e6 <HAL_UARTEx_SetTxFifoThreshold>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 80041ea:	f001 fc2f 	bl	8005a4c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80041ee:	2100      	movs	r1, #0
 80041f0:	4808      	ldr	r0, [pc, #32]	@ (8004214 <MX_USART2_UART_Init+0x94>)
 80041f2:	f008 fa36 	bl	800c662 <HAL_UARTEx_SetRxFifoThreshold>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 80041fc:	f001 fc26 	bl	8005a4c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8004200:	4804      	ldr	r0, [pc, #16]	@ (8004214 <MX_USART2_UART_Init+0x94>)
 8004202:	f008 f9b7 	bl	800c574 <HAL_UARTEx_DisableFifoMode>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <MX_USART2_UART_Init+0x90>
		Error_Handler();
 800420c:	f001 fc1e 	bl	8005a4c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8004210:	bf00      	nop
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20000910 	.word	0x20000910
 8004218:	40004400 	.word	0x40004400

0800421c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004222:	4b16      	ldr	r3, [pc, #88]	@ (800427c <MX_DMA_Init+0x60>)
 8004224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004226:	4a15      	ldr	r2, [pc, #84]	@ (800427c <MX_DMA_Init+0x60>)
 8004228:	f043 0304 	orr.w	r3, r3, #4
 800422c:	6493      	str	r3, [r2, #72]	@ 0x48
 800422e:	4b13      	ldr	r3, [pc, #76]	@ (800427c <MX_DMA_Init+0x60>)
 8004230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	607b      	str	r3, [r7, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800423a:	4b10      	ldr	r3, [pc, #64]	@ (800427c <MX_DMA_Init+0x60>)
 800423c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800423e:	4a0f      	ldr	r2, [pc, #60]	@ (800427c <MX_DMA_Init+0x60>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	6493      	str	r3, [r2, #72]	@ 0x48
 8004246:	4b0d      	ldr	r3, [pc, #52]	@ (800427c <MX_DMA_Init+0x60>)
 8004248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004252:	2200      	movs	r2, #0
 8004254:	2100      	movs	r1, #0
 8004256:	200b      	movs	r0, #11
 8004258:	f002 f8dd 	bl	8006416 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800425c:	200b      	movs	r0, #11
 800425e:	f002 f8f4 	bl	800644a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004262:	2200      	movs	r2, #0
 8004264:	2100      	movs	r1, #0
 8004266:	200c      	movs	r0, #12
 8004268:	f002 f8d5 	bl	8006416 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800426c:	200c      	movs	r0, #12
 800426e:	f002 f8ec 	bl	800644a <HAL_NVIC_EnableIRQ>
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40021000 	.word	0x40021000

08004280 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004280:	b580      	push	{r7, lr}
 8004282:	b08a      	sub	sp, #40	@ 0x28
 8004284:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004286:	f107 0314 	add.w	r3, r7, #20
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	605a      	str	r2, [r3, #4]
 8004290:	609a      	str	r2, [r3, #8]
 8004292:	60da      	str	r2, [r3, #12]
 8004294:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004296:	4b7a      	ldr	r3, [pc, #488]	@ (8004480 <MX_GPIO_Init+0x200>)
 8004298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429a:	4a79      	ldr	r2, [pc, #484]	@ (8004480 <MX_GPIO_Init+0x200>)
 800429c:	f043 0304 	orr.w	r3, r3, #4
 80042a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042a2:	4b77      	ldr	r3, [pc, #476]	@ (8004480 <MX_GPIO_Init+0x200>)
 80042a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80042ae:	4b74      	ldr	r3, [pc, #464]	@ (8004480 <MX_GPIO_Init+0x200>)
 80042b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b2:	4a73      	ldr	r2, [pc, #460]	@ (8004480 <MX_GPIO_Init+0x200>)
 80042b4:	f043 0320 	orr.w	r3, r3, #32
 80042b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042ba:	4b71      	ldr	r3, [pc, #452]	@ (8004480 <MX_GPIO_Init+0x200>)
 80042bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80042c6:	4b6e      	ldr	r3, [pc, #440]	@ (8004480 <MX_GPIO_Init+0x200>)
 80042c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ca:	4a6d      	ldr	r2, [pc, #436]	@ (8004480 <MX_GPIO_Init+0x200>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042d2:	4b6b      	ldr	r3, [pc, #428]	@ (8004480 <MX_GPIO_Init+0x200>)
 80042d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80042de:	4b68      	ldr	r3, [pc, #416]	@ (8004480 <MX_GPIO_Init+0x200>)
 80042e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e2:	4a67      	ldr	r2, [pc, #412]	@ (8004480 <MX_GPIO_Init+0x200>)
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042ea:	4b65      	ldr	r3, [pc, #404]	@ (8004480 <MX_GPIO_Init+0x200>)
 80042ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	607b      	str	r3, [r7, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80042f6:	2200      	movs	r2, #0
 80042f8:	2120      	movs	r1, #32
 80042fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042fe:	f002 fd8b 	bl	8006e18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12,
 8004302:	2200      	movs	r2, #0
 8004304:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8004308:	485e      	ldr	r0, [pc, #376]	@ (8004484 <MX_GPIO_Init+0x204>)
 800430a:	f002 fd85 	bl	8006e18 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800430e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004312:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004318:	2300      	movs	r3, #0
 800431a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800431c:	f107 0314 	add.w	r3, r7, #20
 8004320:	4619      	mov	r1, r3
 8004322:	4858      	ldr	r0, [pc, #352]	@ (8004484 <MX_GPIO_Init+0x204>)
 8004324:	f002 fbde 	bl	8006ae4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 8004328:	230d      	movs	r3, #13
 800432a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800432c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004330:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004336:	f107 0314 	add.w	r3, r7, #20
 800433a:	4619      	mov	r1, r3
 800433c:	4851      	ldr	r0, [pc, #324]	@ (8004484 <MX_GPIO_Init+0x204>)
 800433e:	f002 fbd1 	bl	8006ae4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8004342:	2320      	movs	r3, #32
 8004344:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004346:	2301      	movs	r3, #1
 8004348:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800434e:	2300      	movs	r3, #0
 8004350:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004352:	f107 0314 	add.w	r3, r7, #20
 8004356:	4619      	mov	r1, r3
 8004358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800435c:	f002 fbc2 	bl	8006ae4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12;
 8004360:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 8004364:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004366:	2301      	movs	r3, #1
 8004368:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436a:	2300      	movs	r3, #0
 800436c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800436e:	2300      	movs	r3, #0
 8004370:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004372:	f107 0314 	add.w	r3, r7, #20
 8004376:	4619      	mov	r1, r3
 8004378:	4842      	ldr	r0, [pc, #264]	@ (8004484 <MX_GPIO_Init+0x204>)
 800437a:	f002 fbb3 	bl	8006ae4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11;
 800437e:	f640 0304 	movw	r3, #2052	@ 0x804
 8004382:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800438c:	f107 0314 	add.w	r3, r7, #20
 8004390:	4619      	mov	r1, r3
 8004392:	483d      	ldr	r0, [pc, #244]	@ (8004488 <MX_GPIO_Init+0x208>)
 8004394:	f002 fba6 	bl	8006ae4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8004398:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800439c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800439e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80043a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80043a4:	2302      	movs	r3, #2
 80043a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043a8:	f107 0314 	add.w	r3, r7, #20
 80043ac:	4619      	mov	r1, r3
 80043ae:	4836      	ldr	r0, [pc, #216]	@ (8004488 <MX_GPIO_Init+0x208>)
 80043b0:	f002 fb98 	bl	8006ae4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80043b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80043be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80043c0:	2302      	movs	r3, #2
 80043c2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043c4:	f107 0314 	add.w	r3, r7, #20
 80043c8:	4619      	mov	r1, r3
 80043ca:	482f      	ldr	r0, [pc, #188]	@ (8004488 <MX_GPIO_Init+0x208>)
 80043cc:	f002 fb8a 	bl	8006ae4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80043d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80043da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e0:	f107 0314 	add.w	r3, r7, #20
 80043e4:	4619      	mov	r1, r3
 80043e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043ea:	f002 fb7b 	bl	8006ae4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80043ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80043f8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80043fa:	2302      	movs	r3, #2
 80043fc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043fe:	f107 0314 	add.w	r3, r7, #20
 8004402:	4619      	mov	r1, r3
 8004404:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004408:	f002 fb6c 	bl	8006ae4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800440c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004410:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004412:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004416:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004418:	2302      	movs	r3, #2
 800441a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800441c:	f107 0314 	add.w	r3, r7, #20
 8004420:	4619      	mov	r1, r3
 8004422:	4818      	ldr	r0, [pc, #96]	@ (8004484 <MX_GPIO_Init+0x204>)
 8004424:	f002 fb5e 	bl	8006ae4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004428:	2200      	movs	r2, #0
 800442a:	2100      	movs	r1, #0
 800442c:	2006      	movs	r0, #6
 800442e:	f001 fff2 	bl	8006416 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004432:	2006      	movs	r0, #6
 8004434:	f002 f809 	bl	800644a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004438:	2200      	movs	r2, #0
 800443a:	2100      	movs	r1, #0
 800443c:	2008      	movs	r0, #8
 800443e:	f001 ffea 	bl	8006416 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004442:	2008      	movs	r0, #8
 8004444:	f002 f801 	bl	800644a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8004448:	2200      	movs	r2, #0
 800444a:	2100      	movs	r1, #0
 800444c:	2009      	movs	r0, #9
 800444e:	f001 ffe2 	bl	8006416 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004452:	2009      	movs	r0, #9
 8004454:	f001 fff9 	bl	800644a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004458:	2200      	movs	r2, #0
 800445a:	2100      	movs	r1, #0
 800445c:	2017      	movs	r0, #23
 800445e:	f001 ffda 	bl	8006416 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004462:	2017      	movs	r0, #23
 8004464:	f001 fff1 	bl	800644a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004468:	2200      	movs	r2, #0
 800446a:	2100      	movs	r1, #0
 800446c:	2028      	movs	r0, #40	@ 0x28
 800446e:	f001 ffd2 	bl	8006416 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004472:	2028      	movs	r0, #40	@ 0x28
 8004474:	f001 ffe9 	bl	800644a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8004478:	bf00      	nop
 800447a:	3728      	adds	r7, #40	@ 0x28
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000
 8004484:	48000800 	.word	0x48000800
 8004488:	48000400 	.word	0x48000400

0800448c <calculateOvershoot>:

/* USER CODE BEGIN 4 */
void calculateOvershoot(void) {
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
    static float prevP = 0.0f, peakP = 0.0f;
    static bool  reachedP = false;
    static float prevR = 0.0f, peakR = 0.0f;
    static bool  reachedR = false;

    float currP = Prismatic_QEIdata.mmPosition;
 8004492:	4ba8      	ldr	r3, [pc, #672]	@ (8004734 <calculateOvershoot+0x2a8>)
 8004494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004496:	607b      	str	r3, [r7, #4]
    float currR = Revolute_QEIdata.RadPosition;
 8004498:	4ba7      	ldr	r3, [pc, #668]	@ (8004738 <calculateOvershoot+0x2ac>)
 800449a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449c:	603b      	str	r3, [r7, #0]

    // --- Prismatic channel ---
    if (TargetP != prevP) {
 800449e:	4ba7      	ldr	r3, [pc, #668]	@ (800473c <calculateOvershoot+0x2b0>)
 80044a0:	ed93 7a00 	vldr	s14, [r3]
 80044a4:	4ba6      	ldr	r3, [pc, #664]	@ (8004740 <calculateOvershoot+0x2b4>)
 80044a6:	edd3 7a00 	vldr	s15, [r3]
 80044aa:	eeb4 7a67 	vcmp.f32	s14, s15
 80044ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b2:	d00e      	beq.n	80044d2 <calculateOvershoot+0x46>
        // new move: reset
        prevP     = TargetP;
 80044b4:	4ba1      	ldr	r3, [pc, #644]	@ (800473c <calculateOvershoot+0x2b0>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4aa1      	ldr	r2, [pc, #644]	@ (8004740 <calculateOvershoot+0x2b4>)
 80044ba:	6013      	str	r3, [r2, #0]
        peakP     = TargetP;
 80044bc:	4b9f      	ldr	r3, [pc, #636]	@ (800473c <calculateOvershoot+0x2b0>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4aa0      	ldr	r2, [pc, #640]	@ (8004744 <calculateOvershoot+0x2b8>)
 80044c2:	6013      	str	r3, [r2, #0]
        reachedP  = false;
 80044c4:	4ba0      	ldr	r3, [pc, #640]	@ (8004748 <calculateOvershoot+0x2bc>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	701a      	strb	r2, [r3, #0]
        P_Overshoot_Percent = 0.0f;
 80044ca:	4ba0      	ldr	r3, [pc, #640]	@ (800474c <calculateOvershoot+0x2c0>)
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
    }

    if (!reachedP) {
 80044d2:	4b9d      	ldr	r3, [pc, #628]	@ (8004748 <calculateOvershoot+0x2bc>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	f083 0301 	eor.w	r3, r3, #1
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d02f      	beq.n	8004540 <calculateOvershoot+0xb4>
        // wait until we first cross the target
        if ((TargetP > 0.0f && currP >= TargetP) ||
 80044e0:	4b96      	ldr	r3, [pc, #600]	@ (800473c <calculateOvershoot+0x2b0>)
 80044e2:	edd3 7a00 	vldr	s15, [r3]
 80044e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ee:	dd09      	ble.n	8004504 <calculateOvershoot+0x78>
 80044f0:	4b92      	ldr	r3, [pc, #584]	@ (800473c <calculateOvershoot+0x2b0>)
 80044f2:	edd3 7a00 	vldr	s15, [r3]
 80044f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80044fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004502:	da11      	bge.n	8004528 <calculateOvershoot+0x9c>
            (TargetP < 0.0f && currP <= TargetP))
 8004504:	4b8d      	ldr	r3, [pc, #564]	@ (800473c <calculateOvershoot+0x2b0>)
 8004506:	edd3 7a00 	vldr	s15, [r3]
        if ((TargetP > 0.0f && currP >= TargetP) ||
 800450a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004512:	d510      	bpl.n	8004536 <calculateOvershoot+0xaa>
            (TargetP < 0.0f && currP <= TargetP))
 8004514:	4b89      	ldr	r3, [pc, #548]	@ (800473c <calculateOvershoot+0x2b0>)
 8004516:	edd3 7a00 	vldr	s15, [r3]
 800451a:	ed97 7a01 	vldr	s14, [r7, #4]
 800451e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004526:	d806      	bhi.n	8004536 <calculateOvershoot+0xaa>
        {
            reachedP = true;
 8004528:	4b87      	ldr	r3, [pc, #540]	@ (8004748 <calculateOvershoot+0x2bc>)
 800452a:	2201      	movs	r2, #1
 800452c:	701a      	strb	r2, [r3, #0]
            peakP    = currP;
 800452e:	4a85      	ldr	r2, [pc, #532]	@ (8004744 <calculateOvershoot+0x2b8>)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	e055      	b.n	80045e2 <calculateOvershoot+0x156>
        }
        else {
            // not there yet → no overshoot
            P_Overshoot_Percent = 0.0f;
 8004536:	4b85      	ldr	r3, [pc, #532]	@ (800474c <calculateOvershoot+0x2c0>)
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e050      	b.n	80045e2 <calculateOvershoot+0x156>
        }
    }
    else {
        // we have reached the target at least once → track peak beyond it
        if ((TargetP > 0.0f && currP > peakP) ||
 8004540:	4b7e      	ldr	r3, [pc, #504]	@ (800473c <calculateOvershoot+0x2b0>)
 8004542:	edd3 7a00 	vldr	s15, [r3]
 8004546:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800454a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454e:	dd09      	ble.n	8004564 <calculateOvershoot+0xd8>
 8004550:	4b7c      	ldr	r3, [pc, #496]	@ (8004744 <calculateOvershoot+0x2b8>)
 8004552:	edd3 7a00 	vldr	s15, [r3]
 8004556:	ed97 7a01 	vldr	s14, [r7, #4]
 800455a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800455e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004562:	dc11      	bgt.n	8004588 <calculateOvershoot+0xfc>
            (TargetP < 0.0f && currP < peakP))
 8004564:	4b75      	ldr	r3, [pc, #468]	@ (800473c <calculateOvershoot+0x2b0>)
 8004566:	edd3 7a00 	vldr	s15, [r3]
        if ((TargetP > 0.0f && currP > peakP) ||
 800456a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800456e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004572:	d50c      	bpl.n	800458e <calculateOvershoot+0x102>
            (TargetP < 0.0f && currP < peakP))
 8004574:	4b73      	ldr	r3, [pc, #460]	@ (8004744 <calculateOvershoot+0x2b8>)
 8004576:	edd3 7a00 	vldr	s15, [r3]
 800457a:	ed97 7a01 	vldr	s14, [r7, #4]
 800457e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004586:	d502      	bpl.n	800458e <calculateOvershoot+0x102>
        {
            peakP = currP;
 8004588:	4a6e      	ldr	r2, [pc, #440]	@ (8004744 <calculateOvershoot+0x2b8>)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6013      	str	r3, [r2, #0]
        }
        // compute percent overshoot
        if (TargetP != 0.0f) {
 800458e:	4b6b      	ldr	r3, [pc, #428]	@ (800473c <calculateOvershoot+0x2b0>)
 8004590:	edd3 7a00 	vldr	s15, [r3]
 8004594:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459c:	d021      	beq.n	80045e2 <calculateOvershoot+0x156>
            P_Overshoot_Percent = ((peakP - TargetP) / fabsf(TargetP)) * 100.0f;
 800459e:	4b69      	ldr	r3, [pc, #420]	@ (8004744 <calculateOvershoot+0x2b8>)
 80045a0:	ed93 7a00 	vldr	s14, [r3]
 80045a4:	4b65      	ldr	r3, [pc, #404]	@ (800473c <calculateOvershoot+0x2b0>)
 80045a6:	edd3 7a00 	vldr	s15, [r3]
 80045aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80045ae:	4b63      	ldr	r3, [pc, #396]	@ (800473c <calculateOvershoot+0x2b0>)
 80045b0:	edd3 7a00 	vldr	s15, [r3]
 80045b4:	eeb0 7ae7 	vabs.f32	s14, s15
 80045b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045bc:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8004750 <calculateOvershoot+0x2c4>
 80045c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045c4:	4b61      	ldr	r3, [pc, #388]	@ (800474c <calculateOvershoot+0x2c0>)
 80045c6:	edc3 7a00 	vstr	s15, [r3]
            if (P_Overshoot_Percent < 0.0f) P_Overshoot_Percent = 0.0f;
 80045ca:	4b60      	ldr	r3, [pc, #384]	@ (800474c <calculateOvershoot+0x2c0>)
 80045cc:	edd3 7a00 	vldr	s15, [r3]
 80045d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d8:	d503      	bpl.n	80045e2 <calculateOvershoot+0x156>
 80045da:	4b5c      	ldr	r3, [pc, #368]	@ (800474c <calculateOvershoot+0x2c0>)
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
        }
    }

    // --- Revolute channel (same logic) ---
    if (TargetR != prevR) {
 80045e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004754 <calculateOvershoot+0x2c8>)
 80045e4:	ed93 7a00 	vldr	s14, [r3]
 80045e8:	4b5b      	ldr	r3, [pc, #364]	@ (8004758 <calculateOvershoot+0x2cc>)
 80045ea:	edd3 7a00 	vldr	s15, [r3]
 80045ee:	eeb4 7a67 	vcmp.f32	s14, s15
 80045f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f6:	d00e      	beq.n	8004616 <calculateOvershoot+0x18a>
        prevR     = TargetR;
 80045f8:	4b56      	ldr	r3, [pc, #344]	@ (8004754 <calculateOvershoot+0x2c8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a56      	ldr	r2, [pc, #344]	@ (8004758 <calculateOvershoot+0x2cc>)
 80045fe:	6013      	str	r3, [r2, #0]
        peakR     = TargetR;
 8004600:	4b54      	ldr	r3, [pc, #336]	@ (8004754 <calculateOvershoot+0x2c8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a55      	ldr	r2, [pc, #340]	@ (800475c <calculateOvershoot+0x2d0>)
 8004606:	6013      	str	r3, [r2, #0]
        reachedR  = false;
 8004608:	4b55      	ldr	r3, [pc, #340]	@ (8004760 <calculateOvershoot+0x2d4>)
 800460a:	2200      	movs	r2, #0
 800460c:	701a      	strb	r2, [r3, #0]
        R_Overshoot_Percent = 0.0f;
 800460e:	4b55      	ldr	r3, [pc, #340]	@ (8004764 <calculateOvershoot+0x2d8>)
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
    }

    if (!reachedR) {
 8004616:	4b52      	ldr	r3, [pc, #328]	@ (8004760 <calculateOvershoot+0x2d4>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	f083 0301 	eor.w	r3, r3, #1
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d02f      	beq.n	8004684 <calculateOvershoot+0x1f8>
        if ((TargetR > 0.0f && currR >= TargetR) ||
 8004624:	4b4b      	ldr	r3, [pc, #300]	@ (8004754 <calculateOvershoot+0x2c8>)
 8004626:	edd3 7a00 	vldr	s15, [r3]
 800462a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800462e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004632:	dd09      	ble.n	8004648 <calculateOvershoot+0x1bc>
 8004634:	4b47      	ldr	r3, [pc, #284]	@ (8004754 <calculateOvershoot+0x2c8>)
 8004636:	edd3 7a00 	vldr	s15, [r3]
 800463a:	ed97 7a00 	vldr	s14, [r7]
 800463e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004646:	da11      	bge.n	800466c <calculateOvershoot+0x1e0>
            (TargetR < 0.0f && currR <= TargetR))
 8004648:	4b42      	ldr	r3, [pc, #264]	@ (8004754 <calculateOvershoot+0x2c8>)
 800464a:	edd3 7a00 	vldr	s15, [r3]
        if ((TargetR > 0.0f && currR >= TargetR) ||
 800464e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004656:	d510      	bpl.n	800467a <calculateOvershoot+0x1ee>
            (TargetR < 0.0f && currR <= TargetR))
 8004658:	4b3e      	ldr	r3, [pc, #248]	@ (8004754 <calculateOvershoot+0x2c8>)
 800465a:	edd3 7a00 	vldr	s15, [r3]
 800465e:	ed97 7a00 	vldr	s14, [r7]
 8004662:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466a:	d806      	bhi.n	800467a <calculateOvershoot+0x1ee>
        {
            reachedR = true;
 800466c:	4b3c      	ldr	r3, [pc, #240]	@ (8004760 <calculateOvershoot+0x2d4>)
 800466e:	2201      	movs	r2, #1
 8004670:	701a      	strb	r2, [r3, #0]
            peakR    = currR;
 8004672:	4a3a      	ldr	r2, [pc, #232]	@ (800475c <calculateOvershoot+0x2d0>)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	6013      	str	r3, [r2, #0]
        if (TargetR != 0.0f) {
            R_Overshoot_Percent = ((peakR - TargetR) / fabsf(TargetR)) * 100.0f;
            if (R_Overshoot_Percent < 0.0f) R_Overshoot_Percent = 0.0f;
        }
    }
}
 8004678:	e056      	b.n	8004728 <calculateOvershoot+0x29c>
            R_Overshoot_Percent = 0.0f;
 800467a:	4b3a      	ldr	r3, [pc, #232]	@ (8004764 <calculateOvershoot+0x2d8>)
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
}
 8004682:	e051      	b.n	8004728 <calculateOvershoot+0x29c>
        if ((TargetR > 0.0f && currR > peakR) ||
 8004684:	4b33      	ldr	r3, [pc, #204]	@ (8004754 <calculateOvershoot+0x2c8>)
 8004686:	edd3 7a00 	vldr	s15, [r3]
 800468a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800468e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004692:	dd09      	ble.n	80046a8 <calculateOvershoot+0x21c>
 8004694:	4b31      	ldr	r3, [pc, #196]	@ (800475c <calculateOvershoot+0x2d0>)
 8004696:	edd3 7a00 	vldr	s15, [r3]
 800469a:	ed97 7a00 	vldr	s14, [r7]
 800469e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a6:	dc11      	bgt.n	80046cc <calculateOvershoot+0x240>
            (TargetR < 0.0f && currR < peakR))
 80046a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004754 <calculateOvershoot+0x2c8>)
 80046aa:	edd3 7a00 	vldr	s15, [r3]
        if ((TargetR > 0.0f && currR > peakR) ||
 80046ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b6:	d50c      	bpl.n	80046d2 <calculateOvershoot+0x246>
            (TargetR < 0.0f && currR < peakR))
 80046b8:	4b28      	ldr	r3, [pc, #160]	@ (800475c <calculateOvershoot+0x2d0>)
 80046ba:	edd3 7a00 	vldr	s15, [r3]
 80046be:	ed97 7a00 	vldr	s14, [r7]
 80046c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ca:	d502      	bpl.n	80046d2 <calculateOvershoot+0x246>
            peakR = currR;
 80046cc:	4a23      	ldr	r2, [pc, #140]	@ (800475c <calculateOvershoot+0x2d0>)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6013      	str	r3, [r2, #0]
        if (TargetR != 0.0f) {
 80046d2:	4b20      	ldr	r3, [pc, #128]	@ (8004754 <calculateOvershoot+0x2c8>)
 80046d4:	edd3 7a00 	vldr	s15, [r3]
 80046d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e0:	d022      	beq.n	8004728 <calculateOvershoot+0x29c>
            R_Overshoot_Percent = ((peakR - TargetR) / fabsf(TargetR)) * 100.0f;
 80046e2:	4b1e      	ldr	r3, [pc, #120]	@ (800475c <calculateOvershoot+0x2d0>)
 80046e4:	ed93 7a00 	vldr	s14, [r3]
 80046e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004754 <calculateOvershoot+0x2c8>)
 80046ea:	edd3 7a00 	vldr	s15, [r3]
 80046ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80046f2:	4b18      	ldr	r3, [pc, #96]	@ (8004754 <calculateOvershoot+0x2c8>)
 80046f4:	edd3 7a00 	vldr	s15, [r3]
 80046f8:	eeb0 7ae7 	vabs.f32	s14, s15
 80046fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004700:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8004750 <calculateOvershoot+0x2c4>
 8004704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004708:	4b16      	ldr	r3, [pc, #88]	@ (8004764 <calculateOvershoot+0x2d8>)
 800470a:	edc3 7a00 	vstr	s15, [r3]
            if (R_Overshoot_Percent < 0.0f) R_Overshoot_Percent = 0.0f;
 800470e:	4b15      	ldr	r3, [pc, #84]	@ (8004764 <calculateOvershoot+0x2d8>)
 8004710:	edd3 7a00 	vldr	s15, [r3]
 8004714:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471c:	d400      	bmi.n	8004720 <calculateOvershoot+0x294>
}
 800471e:	e003      	b.n	8004728 <calculateOvershoot+0x29c>
            if (R_Overshoot_Percent < 0.0f) R_Overshoot_Percent = 0.0f;
 8004720:	4b10      	ldr	r3, [pc, #64]	@ (8004764 <calculateOvershoot+0x2d8>)
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	20000b38 	.word	0x20000b38
 8004738:	20000af8 	.word	0x20000af8
 800473c:	20000b98 	.word	0x20000b98
 8004740:	20001410 	.word	0x20001410
 8004744:	20001414 	.word	0x20001414
 8004748:	20001418 	.word	0x20001418
 800474c:	20000c1c 	.word	0x20000c1c
 8004750:	42c80000 	.word	0x42c80000
 8004754:	20000b94 	.word	0x20000b94
 8004758:	2000141c 	.word	0x2000141c
 800475c:	20001420 	.word	0x20001420
 8004760:	20001424 	.word	0x20001424
 8004764:	20000c20 	.word	0x20000c20

08004768 <PenDelay>:

bool PenDelay(void) {
 8004768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800476c:	b08e      	sub	sp, #56	@ 0x38
 800476e:	af00      	add	r7, sp, #0
	static int state = 0;
	unsigned long now = micros();
 8004770:	f000 f9b4 	bl	8004adc <micros>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4613      	mov	r3, r2
 800477a:	633b      	str	r3, [r7, #48]	@ 0x30
	bool Done = false;
 800477c:	2300      	movs	r3, #0
 800477e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	switch (state) {
 8004782:	4b45      	ldr	r3, [pc, #276]	@ (8004898 <PenDelay+0x130>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b03      	cmp	r3, #3
 8004788:	d87e      	bhi.n	8004888 <PenDelay+0x120>
 800478a:	a201      	add	r2, pc, #4	@ (adr r2, 8004790 <PenDelay+0x28>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047a1 	.word	0x080047a1
 8004794:	080047bb 	.word	0x080047bb
 8004798:	08004803 	.word	0x08004803
 800479c:	0800484b 	.word	0x0800484b
	case 0: // Start sequence with initial wait
		pen_delay_timer = now;
 80047a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a2:	2200      	movs	r2, #0
 80047a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047a8:	4b3c      	ldr	r3, [pc, #240]	@ (800489c <PenDelay+0x134>)
 80047aa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80047ae:	e9c3 1200 	strd	r1, r2, [r3]
		state = 1;
 80047b2:	4b39      	ldr	r3, [pc, #228]	@ (8004898 <PenDelay+0x130>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
		break;
 80047b8:	e066      	b.n	8004888 <PenDelay+0x120>
	case 1: // Waiting for first 500ms
		if (now - pen_delay_timer >= 500000UL) {
 80047ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047bc:	2200      	movs	r2, #0
 80047be:	623b      	str	r3, [r7, #32]
 80047c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80047c2:	4b36      	ldr	r3, [pc, #216]	@ (800489c <PenDelay+0x134>)
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80047cc:	4621      	mov	r1, r4
 80047ce:	ebb1 0a02 	subs.w	sl, r1, r2
 80047d2:	4629      	mov	r1, r5
 80047d4:	eb61 0b03 	sbc.w	fp, r1, r3
 80047d8:	4b31      	ldr	r3, [pc, #196]	@ (80048a0 <PenDelay+0x138>)
 80047da:	459a      	cmp	sl, r3
 80047dc:	f17b 0300 	sbcs.w	r3, fp, #0
 80047e0:	d34d      	bcc.n	800487e <PenDelay+0x116>
			Set_Servo(1);
 80047e2:	2001      	movs	r0, #1
 80047e4:	f000 fcac 	bl	8005140 <Set_Servo>
			pen_delay_timer = now;
 80047e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ea:	2200      	movs	r2, #0
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	61fa      	str	r2, [r7, #28]
 80047f0:	4b2a      	ldr	r3, [pc, #168]	@ (800489c <PenDelay+0x134>)
 80047f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047f6:	e9c3 1200 	strd	r1, r2, [r3]
			state = 2;
 80047fa:	4b27      	ldr	r3, [pc, #156]	@ (8004898 <PenDelay+0x130>)
 80047fc:	2202      	movs	r2, #2
 80047fe:	601a      	str	r2, [r3, #0]
		}
		break;
 8004800:	e03d      	b.n	800487e <PenDelay+0x116>
	case 2: // Waiting for second 500ms after servo set to 1
		if (now - pen_delay_timer >= 500000UL) {
 8004802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004804:	2200      	movs	r2, #0
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	617a      	str	r2, [r7, #20]
 800480a:	4b24      	ldr	r3, [pc, #144]	@ (800489c <PenDelay+0x134>)
 800480c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004810:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004814:	4621      	mov	r1, r4
 8004816:	ebb1 0802 	subs.w	r8, r1, r2
 800481a:	4629      	mov	r1, r5
 800481c:	eb61 0903 	sbc.w	r9, r1, r3
 8004820:	4b1f      	ldr	r3, [pc, #124]	@ (80048a0 <PenDelay+0x138>)
 8004822:	4598      	cmp	r8, r3
 8004824:	f179 0300 	sbcs.w	r3, r9, #0
 8004828:	d32b      	bcc.n	8004882 <PenDelay+0x11a>
			Set_Servo(0);
 800482a:	2000      	movs	r0, #0
 800482c:	f000 fc88 	bl	8005140 <Set_Servo>
			pen_delay_timer = now;
 8004830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004832:	2200      	movs	r2, #0
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	60fa      	str	r2, [r7, #12]
 8004838:	4b18      	ldr	r3, [pc, #96]	@ (800489c <PenDelay+0x134>)
 800483a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800483e:	e9c3 1200 	strd	r1, r2, [r3]
			state = 3;
 8004842:	4b15      	ldr	r3, [pc, #84]	@ (8004898 <PenDelay+0x130>)
 8004844:	2203      	movs	r2, #3
 8004846:	601a      	str	r2, [r3, #0]
		}
		break;
 8004848:	e01b      	b.n	8004882 <PenDelay+0x11a>
	case 3: // Waiting for third 500ms after servo set to 0
		if (now - pen_delay_timer >= 500000UL) {
 800484a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484c:	2200      	movs	r2, #0
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	4b12      	ldr	r3, [pc, #72]	@ (800489c <PenDelay+0x134>)
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	e9d7 8900 	ldrd	r8, r9, [r7]
 800485c:	4641      	mov	r1, r8
 800485e:	1a8c      	subs	r4, r1, r2
 8004860:	4649      	mov	r1, r9
 8004862:	eb61 0503 	sbc.w	r5, r1, r3
 8004866:	4b0e      	ldr	r3, [pc, #56]	@ (80048a0 <PenDelay+0x138>)
 8004868:	429c      	cmp	r4, r3
 800486a:	f175 0300 	sbcs.w	r3, r5, #0
 800486e:	d30a      	bcc.n	8004886 <PenDelay+0x11e>
			state = 0;
 8004870:	4b09      	ldr	r3, [pc, #36]	@ (8004898 <PenDelay+0x130>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
			Done = true;
 8004876:	2301      	movs	r3, #1
 8004878:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}
		break;
 800487c:	e003      	b.n	8004886 <PenDelay+0x11e>
		break;
 800487e:	bf00      	nop
 8004880:	e002      	b.n	8004888 <PenDelay+0x120>
		break;
 8004882:	bf00      	nop
 8004884:	e000      	b.n	8004888 <PenDelay+0x120>
		break;
 8004886:	bf00      	nop
	}

	return Done;
 8004888:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800488c:	4618      	mov	r0, r3
 800488e:	3738      	adds	r7, #56	@ 0x38
 8004890:	46bd      	mov	sp, r7
 8004892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004896:	bf00      	nop
 8004898:	20001428 	.word	0x20001428
 800489c:	20001320 	.word	0x20001320
 80048a0:	0007a120 	.word	0x0007a120

080048a4 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80048ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80048b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80048b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80048ba:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80048be:	ed97 7a05 	vldr	s14, [r7, #20]
 80048c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80048c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048ca:	edd7 6a01 	vldr	s13, [r7, #4]
 80048ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80048d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80048d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80048da:	ed97 7a03 	vldr	s14, [r7, #12]
 80048de:	edd7 7a04 	vldr	s15, [r7, #16]
 80048e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80048ee:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80048f2:	eeb0 0a67 	vmov.f32	s0, s15
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <DWT_Init>:

void DWT_Init(void) {
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004904:	4b08      	ldr	r3, [pc, #32]	@ (8004928 <DWT_Init+0x28>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4a07      	ldr	r2, [pc, #28]	@ (8004928 <DWT_Init+0x28>)
 800490a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800490e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004910:	4b06      	ldr	r3, [pc, #24]	@ (800492c <DWT_Init+0x2c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a05      	ldr	r2, [pc, #20]	@ (800492c <DWT_Init+0x2c>)
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	6013      	str	r3, [r2, #0]
}
 800491c:	bf00      	nop
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	e000edf0 	.word	0xe000edf0
 800492c:	e0001000 	.word	0xe0001000

08004930 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004940:	d10e      	bne.n	8004960 <HAL_GPIO_EXTI_Callback+0x30>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 8004942:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004946:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800494a:	f002 fa4d 	bl	8006de8 <HAL_GPIO_ReadPin>
 800494e:	4603      	mov	r3, r0
 8004950:	2b01      	cmp	r3, #1
 8004952:	d105      	bne.n	8004960 <HAL_GPIO_EXTI_Callback+0x30>
			Z_index_R += 1;
 8004954:	4b47      	ldr	r3, [pc, #284]	@ (8004a74 <HAL_GPIO_EXTI_Callback+0x144>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	3301      	adds	r3, #1
 800495a:	b2da      	uxtb	r2, r3
 800495c:	4b45      	ldr	r3, [pc, #276]	@ (8004a74 <HAL_GPIO_EXTI_Callback+0x144>)
 800495e:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_10) {
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004966:	d10d      	bne.n	8004984 <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8004968:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800496c:	4842      	ldr	r0, [pc, #264]	@ (8004a78 <HAL_GPIO_EXTI_Callback+0x148>)
 800496e:	f002 fa3b 	bl	8006de8 <HAL_GPIO_ReadPin>
 8004972:	4603      	mov	r3, r0
 8004974:	2b01      	cmp	r3, #1
 8004976:	d105      	bne.n	8004984 <HAL_GPIO_EXTI_Callback+0x54>
			Mode = 0;
 8004978:	4b40      	ldr	r3, [pc, #256]	@ (8004a7c <HAL_GPIO_EXTI_Callback+0x14c>)
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 800497e:	4b40      	ldr	r3, [pc, #256]	@ (8004a80 <HAL_GPIO_EXTI_Callback+0x150>)
 8004980:	2201      	movs	r2, #1
 8004982:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800498a:	d10e      	bne.n	80049aa <HAL_GPIO_EXTI_Callback+0x7a>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 800498c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004990:	483c      	ldr	r0, [pc, #240]	@ (8004a84 <HAL_GPIO_EXTI_Callback+0x154>)
 8004992:	f002 fa29 	bl	8006de8 <HAL_GPIO_ReadPin>
 8004996:	4603      	mov	r3, r0
 8004998:	2b01      	cmp	r3, #1
 800499a:	d103      	bne.n	80049a4 <HAL_GPIO_EXTI_Callback+0x74>
			P_Limit = 1;
 800499c:	4b3a      	ldr	r3, [pc, #232]	@ (8004a88 <HAL_GPIO_EXTI_Callback+0x158>)
 800499e:	2201      	movs	r2, #1
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	e002      	b.n	80049aa <HAL_GPIO_EXTI_Callback+0x7a>
		} else {
			P_Limit = 0;
 80049a4:	4b38      	ldr	r3, [pc, #224]	@ (8004a88 <HAL_GPIO_EXTI_Callback+0x158>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049b0:	d10e      	bne.n	80049d0 <HAL_GPIO_EXTI_Callback+0xa0>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1) {
 80049b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80049b6:	4833      	ldr	r0, [pc, #204]	@ (8004a84 <HAL_GPIO_EXTI_Callback+0x154>)
 80049b8:	f002 fa16 	bl	8006de8 <HAL_GPIO_ReadPin>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d103      	bne.n	80049ca <HAL_GPIO_EXTI_Callback+0x9a>
			R_Limit = 1;
 80049c2:	4b32      	ldr	r3, [pc, #200]	@ (8004a8c <HAL_GPIO_EXTI_Callback+0x15c>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	e002      	b.n	80049d0 <HAL_GPIO_EXTI_Callback+0xa0>
		} else {
			R_Limit = 0;
 80049ca:	4b30      	ldr	r3, [pc, #192]	@ (8004a8c <HAL_GPIO_EXTI_Callback+0x15c>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]
	//		EmergencyState = 0;
	//	}

	static uint8_t state[3] = { 0 }; // 0 = waiting for rise, 1 = waiting for fall

	uint32_t now = DWT->CYCCNT;
 80049d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004a90 <HAL_GPIO_EXTI_Callback+0x160>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	613b      	str	r3, [r7, #16]
	uint32_t idx;

	if (GPIO_Pin == GPIO_PIN_0)
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d102      	bne.n	80049e2 <HAL_GPIO_EXTI_Callback+0xb2>
		idx = 0; // PC0
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	e00a      	b.n	80049f8 <HAL_GPIO_EXTI_Callback+0xc8>
	else if (GPIO_Pin == GPIO_PIN_2)
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d102      	bne.n	80049ee <HAL_GPIO_EXTI_Callback+0xbe>
		idx = 1; // PC2
 80049e8:	2301      	movs	r3, #1
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e004      	b.n	80049f8 <HAL_GPIO_EXTI_Callback+0xc8>
	else if (GPIO_Pin == GPIO_PIN_3)
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d13b      	bne.n	8004a6c <HAL_GPIO_EXTI_Callback+0x13c>
		idx = 2; // PC3
 80049f4:	2302      	movs	r3, #2
 80049f6:	617b      	str	r3, [r7, #20]
	else
		return;

	if (state[idx] == 0) {
 80049f8:	4a26      	ldr	r2, [pc, #152]	@ (8004a94 <HAL_GPIO_EXTI_Callback+0x164>)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	4413      	add	r3, r2
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10a      	bne.n	8004a1a <HAL_GPIO_EXTI_Callback+0xea>
		rise_time[idx] = now;
 8004a04:	4924      	ldr	r1, [pc, #144]	@ (8004a98 <HAL_GPIO_EXTI_Callback+0x168>)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 1;
 8004a0e:	4a21      	ldr	r2, [pc, #132]	@ (8004a94 <HAL_GPIO_EXTI_Callback+0x164>)
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	4413      	add	r3, r2
 8004a14:	2201      	movs	r2, #1
 8004a16:	701a      	strb	r2, [r3, #0]
 8004a18:	e029      	b.n	8004a6e <HAL_GPIO_EXTI_Callback+0x13e>
	} else {
		uint32_t delta =
				(now >= rise_time[idx]) ?
 8004a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8004a98 <HAL_GPIO_EXTI_Callback+0x168>)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						(now - rise_time[idx]) :
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d306      	bcc.n	8004a36 <HAL_GPIO_EXTI_Callback+0x106>
 8004a28:	4a1b      	ldr	r2, [pc, #108]	@ (8004a98 <HAL_GPIO_EXTI_Callback+0x168>)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	e006      	b.n	8004a44 <HAL_GPIO_EXTI_Callback+0x114>
						(0xFFFFFFFF - rise_time[idx] + now);
 8004a36:	4a18      	ldr	r2, [pc, #96]	@ (8004a98 <HAL_GPIO_EXTI_Callback+0x168>)
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
						(now - rise_time[idx]) :
 8004a42:	3b01      	subs	r3, #1
		uint32_t delta =
 8004a44:	60fb      	str	r3, [r7, #12]
		pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 8004a46:	4b15      	ldr	r3, [pc, #84]	@ (8004a9c <HAL_GPIO_EXTI_Callback+0x16c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a15      	ldr	r2, [pc, #84]	@ (8004aa0 <HAL_GPIO_EXTI_Callback+0x170>)
 8004a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a50:	0c9b      	lsrs	r3, r3, #18
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a58:	4912      	ldr	r1, [pc, #72]	@ (8004aa4 <HAL_GPIO_EXTI_Callback+0x174>)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 0;
 8004a60:	4a0c      	ldr	r2, [pc, #48]	@ (8004a94 <HAL_GPIO_EXTI_Callback+0x164>)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	4413      	add	r3, r2
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	e000      	b.n	8004a6e <HAL_GPIO_EXTI_Callback+0x13e>
		return;
 8004a6c:	bf00      	nop
	}
}
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	20000b78 	.word	0x20000b78
 8004a78:	48000800 	.word	0x48000800
 8004a7c:	20000bcc 	.word	0x20000bcc
 8004a80:	20000bce 	.word	0x20000bce
 8004a84:	48000400 	.word	0x48000400
 8004a88:	20000bd2 	.word	0x20000bd2
 8004a8c:	20000bd3 	.word	0x20000bd3
 8004a90:	e0001000 	.word	0xe0001000
 8004a94:	2000142c 	.word	0x2000142c
 8004a98:	20000ad8 	.word	0x20000ad8
 8004a9c:	20000230 	.word	0x20000230
 8004aa0:	431bde83 	.word	0x431bde83
 8004aa4:	20000ae4 	.word	0x20000ae4

08004aa8 <HAL_TIM_PeriodElapsedCallback>:

// MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004aa8:	b4b0      	push	{r4, r5, r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a08      	ldr	r2, [pc, #32]	@ (8004ad4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d108      	bne.n	8004aca <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8004ab8:	4b07      	ldr	r3, [pc, #28]	@ (8004ad8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	1e54      	subs	r4, r2, #1
 8004ac0:	f143 0500 	adc.w	r5, r3, #0
 8004ac4:	4b04      	ldr	r3, [pc, #16]	@ (8004ad8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004ac6:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bcb0      	pop	{r4, r5, r7}
 8004ad2:	4770      	bx	lr
 8004ad4:	200005e0 	.word	0x200005e0
 8004ad8:	20000aa0 	.word	0x20000aa0

08004adc <micros>:
uint64_t micros() {
 8004adc:	b4b0      	push	{r4, r5, r7}
 8004ade:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8004ae0:	4b09      	ldr	r3, [pc, #36]	@ (8004b08 <micros+0x2c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	4611      	mov	r1, r2
 8004aec:	4b07      	ldr	r3, [pc, #28]	@ (8004b0c <micros+0x30>)
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	1884      	adds	r4, r0, r2
 8004af4:	eb41 0503 	adc.w	r5, r1, r3
 8004af8:	4622      	mov	r2, r4
 8004afa:	462b      	mov	r3, r5
}
 8004afc:	4610      	mov	r0, r2
 8004afe:	4619      	mov	r1, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bcb0      	pop	{r4, r5, r7}
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	200005e0 	.word	0x200005e0
 8004b0c:	20000aa0 	.word	0x20000aa0

08004b10 <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
		float outMin, float outMax, PID_State *state) {
 8004b10:	b480      	push	{r7}
 8004b12:	b08f      	sub	sp, #60	@ 0x3c
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	ed87 0a07 	vstr	s0, [r7, #28]
 8004b1a:	edc7 0a06 	vstr	s1, [r7, #24]
 8004b1e:	ed87 1a05 	vstr	s2, [r7, #20]
 8004b22:	edc7 1a04 	vstr	s3, [r7, #16]
 8004b26:	ed87 2a03 	vstr	s4, [r7, #12]
 8004b2a:	edc7 2a02 	vstr	s5, [r7, #8]
 8004b2e:	ed87 3a01 	vstr	s6, [r7, #4]
 8004b32:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 8004b34:	ed97 7a06 	vldr	s14, [r7, #24]
 8004b38:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b40:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	ed93 7a00 	vldr	s14, [r3]
 8004b4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	ed93 7a00 	vldr	s14, [r3]
 8004b66:	ed97 6a01 	vldr	s12, [r7, #4]
 8004b6a:	edd7 6a05 	vldr	s13, [r7, #20]
 8004b6e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004b72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7a:	dd08      	ble.n	8004b8e <PID_Update+0x7e>
		state->integ = outMax / kI;
 8004b7c:	edd7 6a01 	vldr	s13, [r7, #4]
 8004b80:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	ed93 7a00 	vldr	s14, [r3]
 8004b94:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b98:	edd7 6a05 	vldr	s13, [r7, #20]
 8004b9c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba8:	d508      	bpl.n	8004bbc <PID_Update+0xac>
		state->integ = outMin / kI;
 8004baa:	edd7 6a02 	vldr	s13, [r7, #8]
 8004bae:	ed97 7a05 	vldr	s14, [r7, #20]
 8004bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 8004bbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc8:	dd0b      	ble.n	8004be2 <PID_Update+0xd2>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	edd3 7a00 	vldr	s15, [r3]
 8004bd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd8:	d503      	bpl.n	8004be2 <PID_Update+0xd2>
		state->integ = 0;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 8004be2:	edd7 7a07 	vldr	s15, [r7, #28]
 8004be6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bee:	d50b      	bpl.n	8004c08 <PID_Update+0xf8>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	edd3 7a00 	vldr	s15, [r3]
 8004bf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfe:	dd03      	ble.n	8004c08 <PID_Update+0xf8>
		state->integ = 0;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	edd3 7a00 	vldr	s15, [r3]
 8004c0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c16:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c20:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c24:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004c28:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c30:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 8004c34:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c38:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c40:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 8004c4a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004c4e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c56:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c5e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 8004c62:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004c66:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c72:	dd01      	ble.n	8004c78 <PID_Update+0x168>
		out = outMax;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 8004c78:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004c7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c88:	d501      	bpl.n	8004c8e <PID_Update+0x17e>
		out = outMin;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 8004c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c90:	ee07 3a90 	vmov	s15, r3
}
 8004c94:	eeb0 0a67 	vmov.f32	s0, s15
 8004c98:	373c      	adds	r7, #60	@ 0x3c
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	0000      	movs	r0, r0
 8004ca4:	0000      	movs	r0, r0
	...

08004ca8 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update() {
 8004ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
	// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 8004cb0:	f7ff ff14 	bl	8004adc <micros>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	497b      	ldr	r1, [pc, #492]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004cba:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 8004cbe:	4b7b      	ldr	r3, [pc, #492]	@ (8004eac <Revolute_PosVel_Update+0x204>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc4:	4a78      	ldr	r2, [pc, #480]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004cc6:	6013      	str	r3, [r2, #0]

	// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8004cc8:	4b77      	ldr	r3, [pc, #476]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004cd0:	ee07 3a90 	vmov	s15, r3
 8004cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd8:	4b73      	ldr	r3, [pc, #460]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004cda:	edc3 7a06 	vstr	s15, [r3, #24]

	// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8004cde:	4b72      	ldr	r3, [pc, #456]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
			- Revolute_QEIdata.Position[OLD];
 8004ce2:	4b71      	ldr	r3, [pc, #452]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8004ce8:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cf0:	dd04      	ble.n	8004cfc <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e007      	b.n	8004d0c <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004d02:	da03      	bge.n	8004d0c <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004d0a:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8004d0c:	4b66      	ldr	r3, [pc, #408]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004d0e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004d12:	4b65      	ldr	r3, [pc, #404]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004d14:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004d18:	ebb0 0a02 	subs.w	sl, r0, r2
 8004d1c:	eb61 0b03 	sbc.w	fp, r1, r3
 8004d20:	4650      	mov	r0, sl
 8004d22:	4659      	mov	r1, fp
 8004d24:	f7fc f806 	bl	8000d34 <__aeabi_ul2f>
 8004d28:	ee07 0a10 	vmov	s14, r0
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8004d2c:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8004eb0 <Revolute_PosVel_Update+0x208>
 8004d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d34:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 8004d38:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d44:	f000 80a0 	beq.w	8004e88 <Revolute_PosVel_Update+0x1e0>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_r = (float) diffPosition_r / diffTime_r;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d52:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d5a:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
			- Revolute_QEIdata.QEIVelocity) / diffTime_r;
 8004d5e:	4b52      	ldr	r3, [pc, #328]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004d60:	edd3 7a07 	vldr	s15, [r3, #28]
 8004d64:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d68:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004d6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
 8004d74:	4b4c      	ldr	r3, [pc, #304]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004d76:	edc3 7a08 	vstr	s15, [r3, #32]

	// Store raw velocity
	Revolute_QEIdata.QEIVelocity = Vel_counts_r;
 8004d7a:	4a4b      	ldr	r2, [pc, #300]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	61d3      	str	r3, [r2, #28]

	// Angular velocity in rad/s
	Revolute_QEIdata.Velocity = Vel_counts_r * (2.0f * M_PI / 16384.0f);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7fb fbad 	bl	80004e0 <__aeabi_f2d>
 8004d86:	a344      	add	r3, pc, #272	@ (adr r3, 8004e98 <Revolute_PosVel_Update+0x1f0>)
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	f7fb fc00 	bl	8000590 <__aeabi_dmul>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4610      	mov	r0, r2
 8004d96:	4619      	mov	r1, r3
 8004d98:	f7fb feb4 	bl	8000b04 <__aeabi_d2f>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4a42      	ldr	r2, [pc, #264]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004da0:	6253      	str	r3, [r2, #36]	@ 0x24
	float R_alpha = 0.4f;
 8004da2:	4b44      	ldr	r3, [pc, #272]	@ (8004eb4 <Revolute_PosVel_Update+0x20c>)
 8004da4:	603b      	str	r3, [r7, #0]
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity
 8004da6:	4b40      	ldr	r3, [pc, #256]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004da8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004dac:	edd7 7a00 	vldr	s15, [r7]
 8004db0:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (1 - R_alpha) * Revolute_QEIdata.Velocity_f;
 8004db4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004db8:	edd7 7a00 	vldr	s15, [r7]
 8004dbc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004dc0:	4b39      	ldr	r3, [pc, #228]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004dc2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dca:	ee77 7a27 	vadd.f32	s15, s14, s15
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity
 8004dce:	4b36      	ldr	r3, [pc, #216]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004dd0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Angular acceleration in rad/s²
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 8004dd4:	4b34      	ldr	r3, [pc, #208]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fb fb81 	bl	80004e0 <__aeabi_f2d>
			* (2.0f * M_PI / 16384.0f);
 8004dde:	a32e      	add	r3, pc, #184	@ (adr r3, 8004e98 <Revolute_PosVel_Update+0x1f0>)
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f7fb fbd4 	bl	8000590 <__aeabi_dmul>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4610      	mov	r0, r2
 8004dee:	4619      	mov	r1, r3
 8004df0:	f7fb fe88 	bl	8000b04 <__aeabi_d2f>
 8004df4:	4603      	mov	r3, r0
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 8004df6:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004df8:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 8004dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004dfc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004e00:	68f9      	ldr	r1, [r7, #12]
 8004e02:	17c8      	asrs	r0, r1, #31
 8004e04:	460c      	mov	r4, r1
 8004e06:	4605      	mov	r5, r0
 8004e08:	eb12 0804 	adds.w	r8, r2, r4
 8004e0c:	eb43 0905 	adc.w	r9, r3, r5
 8004e10:	4b25      	ldr	r3, [pc, #148]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004e12:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8004e16:	4b24      	ldr	r3, [pc, #144]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004e18:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (2.0f * M_PI / 16384.0f);
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	4619      	mov	r1, r3
 8004e20:	f7fb fb88 	bl	8000534 <__aeabi_l2d>
 8004e24:	a31c      	add	r3, pc, #112	@ (adr r3, 8004e98 <Revolute_PosVel_Update+0x1f0>)
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	f7fb fbb1 	bl	8000590 <__aeabi_dmul>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4610      	mov	r0, r2
 8004e34:	4619      	mov	r1, r3
 8004e36:	f7fb fe65 	bl	8000b04 <__aeabi_d2f>
 8004e3a:	4603      	mov	r3, r0
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8004e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004e3e:	6393      	str	r3, [r2, #56]	@ 0x38

	// Deg position
	Revolute_QEIdata.DegPosition = Revolute_QEIdata.RadPosition * 180 / M_PI;
 8004e40:	4b19      	ldr	r3, [pc, #100]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004e42:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004e46:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004eb8 <Revolute_PosVel_Update+0x210>
 8004e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e4e:	ee17 0a90 	vmov	r0, s15
 8004e52:	f7fb fb45 	bl	80004e0 <__aeabi_f2d>
 8004e56:	a312      	add	r3, pc, #72	@ (adr r3, 8004ea0 <Revolute_PosVel_Update+0x1f8>)
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f7fb fcc2 	bl	80007e4 <__aeabi_ddiv>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4610      	mov	r0, r2
 8004e66:	4619      	mov	r1, r3
 8004e68:	f7fb fe4c 	bl	8000b04 <__aeabi_d2f>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004e70:	63d3      	str	r3, [r2, #60]	@ 0x3c

	// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 8004e72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a0c      	ldr	r2, [pc, #48]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004e78:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004e7c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004e80:	4909      	ldr	r1, [pc, #36]	@ (8004ea8 <Revolute_PosVel_Update+0x200>)
 8004e82:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004e86:	e000      	b.n	8004e8a <Revolute_PosVel_Update+0x1e2>
		return;
 8004e88:	bf00      	nop
}
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e92:	bf00      	nop
 8004e94:	f3af 8000 	nop.w
 8004e98:	54442d18 	.word	0x54442d18
 8004e9c:	3f3921fb 	.word	0x3f3921fb
 8004ea0:	54442d18 	.word	0x54442d18
 8004ea4:	400921fb 	.word	0x400921fb
 8004ea8:	20000af8 	.word	0x20000af8
 8004eac:	20000514 	.word	0x20000514
 8004eb0:	358637bd 	.word	0x358637bd
 8004eb4:	3ecccccd 	.word	0x3ecccccd
 8004eb8:	43340000 	.word	0x43340000

08004ebc <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update() {
 8004ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
	// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 8004ec4:	f7ff fe0a 	bl	8004adc <micros>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4958      	ldr	r1, [pc, #352]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004ece:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8004ed2:	4b58      	ldr	r3, [pc, #352]	@ (8005034 <Prismatic_PosVel_Update+0x178>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	4a55      	ldr	r2, [pc, #340]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004eda:	6013      	str	r3, [r2, #0]

	// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004edc:	4b54      	ldr	r3, [pc, #336]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004ede:	681a      	ldr	r2, [r3, #0]
			- Prismatic_QEIdata.Position[OLD];
 8004ee0:	4b53      	ldr	r3, [pc, #332]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004ee6:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eee:	dd04      	ble.n	8004efa <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	e007      	b.n	8004f0a <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004f00:	da03      	bge.n	8004f0a <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004f08:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 8004f0a:	4b49      	ldr	r3, [pc, #292]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004f0c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004f10:	4b47      	ldr	r3, [pc, #284]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004f12:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004f16:	ebb0 0a02 	subs.w	sl, r0, r2
 8004f1a:	eb61 0b03 	sbc.w	fp, r1, r3
 8004f1e:	4650      	mov	r0, sl
 8004f20:	4659      	mov	r1, fp
 8004f22:	f7fb ff07 	bl	8000d34 <__aeabi_ul2f>
 8004f26:	ee07 0a10 	vmov	s14, r0
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 8004f2a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8005038 <Prismatic_PosVel_Update+0x17c>
 8004f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f32:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 8004f36:	edd7 7a02 	vldr	s15, [r7, #8]
 8004f3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f42:	d070      	beq.n	8005026 <Prismatic_PosVel_Update+0x16a>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_p = (float) diffPosition_p / diffTime_p;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f56:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
			- Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 8004f5a:	4b35      	ldr	r3, [pc, #212]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004f5c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004f60:	ed97 7a01 	vldr	s14, [r7, #4]
 8004f64:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004f68:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
 8004f70:	4b2f      	ldr	r3, [pc, #188]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004f72:	edc3 7a07 	vstr	s15, [r3, #28]

	// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 8004f76:	4a2e      	ldr	r2, [pc, #184]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6193      	str	r3, [r2, #24]

	// Velocity in mm/s
	Prismatic_QEIdata.Velocity = Vel_counts_p * (10.0f / 8192.0f);
 8004f7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f80:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800503c <Prismatic_PosVel_Update+0x180>
 8004f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f88:	4b29      	ldr	r3, [pc, #164]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004f8a:	edc3 7a08 	vstr	s15, [r3, #32]
	float P_alpha = 0.4f;
 8004f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8005040 <Prismatic_PosVel_Update+0x184>)
 8004f90:	603b      	str	r3, [r7, #0]
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity
 8004f92:	4b27      	ldr	r3, [pc, #156]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004f94:	ed93 7a08 	vldr	s14, [r3, #32]
 8004f98:	edd7 7a00 	vldr	s15, [r7]
 8004f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (1 - P_alpha) * Prismatic_QEIdata.Velocity_f;
 8004fa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fa4:	edd7 7a00 	vldr	s15, [r7]
 8004fa8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004fac:	4b20      	ldr	r3, [pc, #128]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004fae:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity
 8004fba:	4b1d      	ldr	r3, [pc, #116]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004fbc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004fc2:	edd3 7a07 	vldr	s15, [r3, #28]
			* (10.0f / 8192.0f);
 8004fc6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800503c <Prismatic_PosVel_Update+0x180>
 8004fca:	ee67 7a87 	vmul.f32	s15, s15, s14
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004fce:	4b18      	ldr	r3, [pc, #96]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004fd0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 8004fd4:	4b16      	ldr	r3, [pc, #88]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004fd6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004fda:	68f9      	ldr	r1, [r7, #12]
 8004fdc:	17c8      	asrs	r0, r1, #31
 8004fde:	460c      	mov	r4, r1
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	eb12 0804 	adds.w	r8, r2, r4
 8004fe6:	eb43 0905 	adc.w	r9, r3, r5
 8004fea:	4b11      	ldr	r3, [pc, #68]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004fec:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8004ff2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (10.0f / 8192.0f);
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	f7fb fea3 	bl	8000d44 <__aeabi_l2f>
 8004ffe:	ee07 0a10 	vmov	s14, r0
 8005002:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800503c <Prismatic_PosVel_Update+0x180>
 8005006:	ee67 7a27 	vmul.f32	s15, s14, s15
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 800500a:	4b09      	ldr	r3, [pc, #36]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 800500c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 8005010:	4b07      	ldr	r3, [pc, #28]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a06      	ldr	r2, [pc, #24]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8005016:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 8005018:	4b05      	ldr	r3, [pc, #20]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 800501a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800501e:	4904      	ldr	r1, [pc, #16]	@ (8005030 <Prismatic_PosVel_Update+0x174>)
 8005020:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005024:	e000      	b.n	8005028 <Prismatic_PosVel_Update+0x16c>
		return;
 8005026:	bf00      	nop
}
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005030:	20000b38 	.word	0x20000b38
 8005034:	20000448 	.word	0x20000448
 8005038:	358637bd 	.word	0x358637bd
 800503c:	3aa00000 	.word	0x3aa00000
 8005040:	3ecccccd 	.word	0x3ecccccd

08005044 <Set_Motor>:

void Set_Motor(int motor_num, float speed) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)
 8005050:	edd7 7a00 	vldr	s15, [r7]
 8005054:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8005128 <Set_Motor+0xe4>
 8005058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800505c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005060:	dd01      	ble.n	8005066 <Set_Motor+0x22>
		speed = 100.0f;
 8005062:	4b32      	ldr	r3, [pc, #200]	@ (800512c <Set_Motor+0xe8>)
 8005064:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f)
 8005066:	edd7 7a00 	vldr	s15, [r7]
 800506a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005130 <Set_Motor+0xec>
 800506e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005076:	d501      	bpl.n	800507c <Set_Motor+0x38>
		speed = -100.0f;
 8005078:	4b2e      	ldr	r3, [pc, #184]	@ (8005134 <Set_Motor+0xf0>)
 800507a:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t) ((fabsf(speed) * 100) / 100);
 800507c:	edd7 7a00 	vldr	s15, [r7]
 8005080:	eef0 7ae7 	vabs.f32	s15, s15
 8005084:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005128 <Set_Motor+0xe4>
 8005088:	ee27 7a87 	vmul.f32	s14, s15, s14
 800508c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005128 <Set_Motor+0xe4>
 8005090:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005098:	ee17 3a90 	vmov	r3, s15
 800509c:	60fb      	str	r3, [r7, #12]
	if (motor_num == 0) {
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11d      	bne.n	80050e0 <Set_Motor+0x9c>
		if (speed > 0) {
 80050a4:	edd7 7a00 	vldr	s15, [r7]
 80050a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b0:	dd05      	ble.n	80050be <Set_Motor+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80050b2:	2200      	movs	r2, #0
 80050b4:	2120      	movs	r1, #32
 80050b6:	4820      	ldr	r0, [pc, #128]	@ (8005138 <Set_Motor+0xf4>)
 80050b8:	f001 feae 	bl	8006e18 <HAL_GPIO_WritePin>
 80050bc:	e00b      	b.n	80050d6 <Set_Motor+0x92>
		} else if (speed < 0) {
 80050be:	edd7 7a00 	vldr	s15, [r7]
 80050c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ca:	d504      	bpl.n	80050d6 <Set_Motor+0x92>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80050cc:	2201      	movs	r2, #1
 80050ce:	2120      	movs	r1, #32
 80050d0:	4819      	ldr	r0, [pc, #100]	@ (8005138 <Set_Motor+0xf4>)
 80050d2:	f001 fea1 	bl	8006e18 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 80050d6:	4b19      	ldr	r3, [pc, #100]	@ (800513c <Set_Motor+0xf8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	63da      	str	r2, [r3, #60]	@ 0x3c
		} else if (speed < 0) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 80050de:	e01f      	b.n	8005120 <Set_Motor+0xdc>
	} else if (motor_num == 1) {
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d11c      	bne.n	8005120 <Set_Motor+0xdc>
		if (speed > 0) {
 80050e6:	edd7 7a00 	vldr	s15, [r7]
 80050ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f2:	dd05      	ble.n	8005100 <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80050f4:	2200      	movs	r2, #0
 80050f6:	2140      	movs	r1, #64	@ 0x40
 80050f8:	480f      	ldr	r0, [pc, #60]	@ (8005138 <Set_Motor+0xf4>)
 80050fa:	f001 fe8d 	bl	8006e18 <HAL_GPIO_WritePin>
 80050fe:	e00b      	b.n	8005118 <Set_Motor+0xd4>
		} else if (speed < 0) {
 8005100:	edd7 7a00 	vldr	s15, [r7]
 8005104:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800510c:	d504      	bpl.n	8005118 <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800510e:	2201      	movs	r2, #1
 8005110:	2140      	movs	r1, #64	@ 0x40
 8005112:	4809      	ldr	r0, [pc, #36]	@ (8005138 <Set_Motor+0xf4>)
 8005114:	f001 fe80 	bl	8006e18 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 8005118:	4b08      	ldr	r3, [pc, #32]	@ (800513c <Set_Motor+0xf8>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005120:	bf00      	nop
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	42c80000 	.word	0x42c80000
 800512c:	42c80000 	.word	0x42c80000
 8005130:	c2c80000 	.word	0xc2c80000
 8005134:	c2c80000 	.word	0xc2c80000
 8005138:	48000800 	.word	0x48000800
 800513c:	200006ac 	.word	0x200006ac

08005140 <Set_Servo>:

void Set_Servo(int Pen_Pos) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0) {
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10f      	bne.n	800516e <Set_Servo+0x2e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 800514e:	4b0e      	ldr	r3, [pc, #56]	@ (8005188 <Set_Servo+0x48>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8005156:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 8005158:	4b0c      	ldr	r3, [pc, #48]	@ (800518c <Set_Servo+0x4c>)
 800515a:	2200      	movs	r2, #0
 800515c:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 800515e:	f7ff fcbd 	bl	8004adc <micros>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	490a      	ldr	r1, [pc, #40]	@ (8005190 <Set_Servo+0x50>)
 8005168:	e9c1 2300 	strd	r2, r3, [r1]
	} else {
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 800516c:	e007      	b.n	800517e <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 800516e:	4b06      	ldr	r3, [pc, #24]	@ (8005188 <Set_Servo+0x48>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005176:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 8005178:	4b04      	ldr	r3, [pc, #16]	@ (800518c <Set_Servo+0x4c>)
 800517a:	2201      	movs	r2, #1
 800517c:	701a      	strb	r2, [r3, #0]
}
 800517e:	bf00      	nop
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000778 	.word	0x20000778
 800518c:	20000bd1 	.word	0x20000bd1
 8005190:	20000c38 	.word	0x20000c38

08005194 <Reset_R>:

void Reset_R() {
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 8005198:	4905      	ldr	r1, [pc, #20]	@ (80051b0 <Reset_R+0x1c>)
 800519a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 80051a6:	bf00      	nop
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	20000af8 	.word	0x20000af8

080051b4 <Reset_P>:
void Reset_P() {
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 80051b8:	4905      	ldr	r1, [pc, #20]	@ (80051d0 <Reset_P+0x1c>)
 80051ba:	4a06      	ldr	r2, [pc, #24]	@ (80051d4 <Reset_P+0x20>)
 80051bc:	f04f 33ff 	mov.w	r3, #4294967295
 80051c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	//	Prismatic_QEIdata.mmPosition = 0;
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	20000b38 	.word	0x20000b38
 80051d4:	fffff99a 	.word	0xfffff99a

080051d8 <Workspace_limit>:

void Workspace_limit() {
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
	if (Revolute_QEIdata.RadPosition < -1.91986 && R_PWM > 0) {
 80051dc:	4b34      	ldr	r3, [pc, #208]	@ (80052b0 <Workspace_limit+0xd8>)
 80051de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fb f97d 	bl	80004e0 <__aeabi_f2d>
 80051e6:	a32e      	add	r3, pc, #184	@ (adr r3, 80052a0 <Workspace_limit+0xc8>)
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	f7fb fc42 	bl	8000a74 <__aeabi_dcmplt>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <Workspace_limit+0x36>
 80051f6:	4b2f      	ldr	r3, [pc, #188]	@ (80052b4 <Workspace_limit+0xdc>)
 80051f8:	edd3 7a00 	vldr	s15, [r3]
 80051fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005204:	dd03      	ble.n	800520e <Workspace_limit+0x36>
		R_PWM = 0;
 8005206:	4b2b      	ldr	r3, [pc, #172]	@ (80052b4 <Workspace_limit+0xdc>)
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
	}
	if (Revolute_QEIdata.RadPosition > 5.06145 && R_PWM < 0) {
 800520e:	4b28      	ldr	r3, [pc, #160]	@ (80052b0 <Workspace_limit+0xd8>)
 8005210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005212:	4618      	mov	r0, r3
 8005214:	f7fb f964 	bl	80004e0 <__aeabi_f2d>
 8005218:	a323      	add	r3, pc, #140	@ (adr r3, 80052a8 <Workspace_limit+0xd0>)
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	f7fb fc47 	bl	8000ab0 <__aeabi_dcmpgt>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <Workspace_limit+0x68>
 8005228:	4b22      	ldr	r3, [pc, #136]	@ (80052b4 <Workspace_limit+0xdc>)
 800522a:	edd3 7a00 	vldr	s15, [r3]
 800522e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005236:	d503      	bpl.n	8005240 <Workspace_limit+0x68>
		R_PWM = 0;
 8005238:	4b1e      	ldr	r3, [pc, #120]	@ (80052b4 <Workspace_limit+0xdc>)
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition > 305 && P_PWM > 0) {
 8005240:	4b1d      	ldr	r3, [pc, #116]	@ (80052b8 <Workspace_limit+0xe0>)
 8005242:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8005246:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80052bc <Workspace_limit+0xe4>
 800524a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800524e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005252:	dd0b      	ble.n	800526c <Workspace_limit+0x94>
 8005254:	4b1a      	ldr	r3, [pc, #104]	@ (80052c0 <Workspace_limit+0xe8>)
 8005256:	edd3 7a00 	vldr	s15, [r3]
 800525a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800525e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005262:	dd03      	ble.n	800526c <Workspace_limit+0x94>
		P_PWM = 0;
 8005264:	4b16      	ldr	r3, [pc, #88]	@ (80052c0 <Workspace_limit+0xe8>)
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 800526c:	4b12      	ldr	r3, [pc, #72]	@ (80052b8 <Workspace_limit+0xe0>)
 800526e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8005272:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527e:	d400      	bmi.n	8005282 <Workspace_limit+0xaa>
		P_PWM = 0;
	}
}
 8005280:	e00c      	b.n	800529c <Workspace_limit+0xc4>
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 8005282:	4b0f      	ldr	r3, [pc, #60]	@ (80052c0 <Workspace_limit+0xe8>)
 8005284:	edd3 7a00 	vldr	s15, [r3]
 8005288:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800528c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005290:	d400      	bmi.n	8005294 <Workspace_limit+0xbc>
}
 8005292:	e003      	b.n	800529c <Workspace_limit+0xc4>
		P_PWM = 0;
 8005294:	4b0a      	ldr	r3, [pc, #40]	@ (80052c0 <Workspace_limit+0xe8>)
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
}
 800529c:	bf00      	nop
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	1e8e6080 	.word	0x1e8e6080
 80052a4:	bffeb7bf 	.word	0xbffeb7bf
 80052a8:	bfb15b57 	.word	0xbfb15b57
 80052ac:	40143eec 	.word	0x40143eec
 80052b0:	20000af8 	.word	0x20000af8
 80052b4:	20000bc4 	.word	0x20000bc4
 80052b8:	20000b38 	.word	0x20000b38
 80052bc:	43988000 	.word	0x43988000
 80052c0:	20000bc8 	.word	0x20000bc8

080052c4 <Get_QRIdata>:

void Get_QRIdata(float *prism_vel_mm, float *prism_acc_mm, float *prism_mm_pos,
		float *rev_ang_vel_rad, float *rev_ang_acc_rad, float *rev_rad_pos) {
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	603b      	str	r3, [r7, #0]
	if (prism_vel_mm)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <Get_QRIdata+0x1c>
		*prism_vel_mm = Prismatic_QEIdata.Velocity;
 80052d8:	4b16      	ldr	r3, [pc, #88]	@ (8005334 <Get_QRIdata+0x70>)
 80052da:	6a1a      	ldr	r2, [r3, #32]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	601a      	str	r2, [r3, #0]
	if (prism_acc_mm)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <Get_QRIdata+0x2a>
		*prism_acc_mm = Prismatic_QEIdata.Acceleration;
 80052e6:	4b13      	ldr	r3, [pc, #76]	@ (8005334 <Get_QRIdata+0x70>)
 80052e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	601a      	str	r2, [r3, #0]
	if (prism_mm_pos)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <Get_QRIdata+0x38>
		*prism_mm_pos = Prismatic_QEIdata.mmPosition;
 80052f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005334 <Get_QRIdata+0x70>)
 80052f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	601a      	str	r2, [r3, #0]
	if (rev_ang_vel_rad)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <Get_QRIdata+0x46>
		*rev_ang_vel_rad = Revolute_QEIdata.Velocity;
 8005302:	4b0d      	ldr	r3, [pc, #52]	@ (8005338 <Get_QRIdata+0x74>)
 8005304:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	601a      	str	r2, [r3, #0]
	if (rev_ang_acc_rad)
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <Get_QRIdata+0x54>
		*rev_ang_acc_rad = Revolute_QEIdata.Acceleration;
 8005310:	4b09      	ldr	r3, [pc, #36]	@ (8005338 <Get_QRIdata+0x74>)
 8005312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	601a      	str	r2, [r3, #0]
	if (rev_rad_pos)
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <Get_QRIdata+0x62>
		*rev_rad_pos = Revolute_QEIdata.RadPosition;
 800531e:	4b06      	ldr	r3, [pc, #24]	@ (8005338 <Get_QRIdata+0x74>)
 8005320:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	601a      	str	r2, [r3, #0]
}
 8005326:	bf00      	nop
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000b38 	.word	0x20000b38
 8005338:	20000af8 	.word	0x20000af8

0800533c <Trapezoidal_CalcTotalTime>:

float Trapezoidal_CalcTotalTime(float distance, float vmax, float amax) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	ed87 0a03 	vstr	s0, [r7, #12]
 8005346:	edc7 0a02 	vstr	s1, [r7, #8]
 800534a:	ed87 1a01 	vstr	s2, [r7, #4]
	float t_acc = vmax / amax;
 800534e:	edd7 6a02 	vldr	s13, [r7, #8]
 8005352:	ed97 7a01 	vldr	s14, [r7, #4]
 8005356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800535a:	edc7 7a07 	vstr	s15, [r7, #28]
	float d_acc = 0.5f * amax * t_acc * t_acc;
 800535e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005362:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005366:	ee27 7a87 	vmul.f32	s14, s15, s14
 800536a:	edd7 7a07 	vldr	s15, [r7, #28]
 800536e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005372:	ed97 7a07 	vldr	s14, [r7, #28]
 8005376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537a:	edc7 7a06 	vstr	s15, [r7, #24]
	if (2 * d_acc > distance) {
 800537e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005382:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005386:	ed97 7a03 	vldr	s14, [r7, #12]
 800538a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800538e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005392:	d510      	bpl.n	80053b6 <Trapezoidal_CalcTotalTime+0x7a>
		t_acc = sqrtf(distance / amax);
 8005394:	ed97 7a03 	vldr	s14, [r7, #12]
 8005398:	edd7 7a01 	vldr	s15, [r7, #4]
 800539c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80053a0:	eeb0 0a66 	vmov.f32	s0, s13
 80053a4:	f007 fa62 	bl	800c86c <sqrtf>
 80053a8:	ed87 0a07 	vstr	s0, [r7, #28]
		return 2 * t_acc;
 80053ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80053b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80053b4:	e019      	b.n	80053ea <Trapezoidal_CalcTotalTime+0xae>
	}
	float d_const = distance - 2 * d_acc;
 80053b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80053ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80053be:	ed97 7a03 	vldr	s14, [r7, #12]
 80053c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053c6:	edc7 7a05 	vstr	s15, [r7, #20]
	float t_const = d_const / vmax;
 80053ca:	edd7 6a05 	vldr	s13, [r7, #20]
 80053ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80053d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d6:	edc7 7a04 	vstr	s15, [r7, #16]
	return 2 * t_acc + t_const;
 80053da:	edd7 7a07 	vldr	s15, [r7, #28]
 80053de:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80053e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80053e6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80053ea:	eeb0 0a67 	vmov.f32	s0, s15
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <Trapezoidal_CalcVmaxFromTime>:

float Trapezoidal_CalcVmaxFromTime(float distance, float amax, float total_time) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80053fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8005402:	ed87 1a01 	vstr	s2, [r7, #4]
	float t_half = total_time / 2.0f;
 8005406:	ed97 7a01 	vldr	s14, [r7, #4]
 800540a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800540e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005412:	edc7 7a07 	vstr	s15, [r7, #28]
	float d_half = distance / 2.0f;
 8005416:	ed97 7a03 	vldr	s14, [r7, #12]
 800541a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800541e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005422:	edc7 7a06 	vstr	s15, [r7, #24]

	float v_peak = amax * t_half;
 8005426:	ed97 7a02 	vldr	s14, [r7, #8]
 800542a:	edd7 7a07 	vldr	s15, [r7, #28]
 800542e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005432:	edc7 7a05 	vstr	s15, [r7, #20]
	if (0.5f * v_peak * t_half >= d_half) {
 8005436:	edd7 7a05 	vldr	s15, [r7, #20]
 800543a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800543e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005442:	edd7 7a07 	vldr	s15, [r7, #28]
 8005446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544a:	ed97 7a06 	vldr	s14, [r7, #24]
 800544e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005456:	d80c      	bhi.n	8005472 <Trapezoidal_CalcVmaxFromTime+0x7e>
		return sqrtf(distance * amax);
 8005458:	ed97 7a03 	vldr	s14, [r7, #12]
 800545c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005464:	eeb0 0a67 	vmov.f32	s0, s15
 8005468:	f007 fa00 	bl	800c86c <sqrtf>
 800546c:	eef0 6a40 	vmov.f32	s13, s0
 8005470:	e015      	b.n	800549e <Trapezoidal_CalcVmaxFromTime+0xaa>
	}
	return (distance - 0.5f * amax * t_half * t_half) / t_half;
 8005472:	edd7 7a02 	vldr	s15, [r7, #8]
 8005476:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800547a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800547e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005486:	edd7 7a07 	vldr	s15, [r7, #28]
 800548a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005492:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005496:	edd7 7a07 	vldr	s15, [r7, #28]
 800549a:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 800549e:	eef0 7a66 	vmov.f32	s15, s13
 80054a2:	eeb0 0a67 	vmov.f32	s0, s15
 80054a6:	3720      	adds	r7, #32
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	0000      	movs	r0, r0
	...

080054b0 <InverseKinematics>:

void InverseKinematics(float x, float y, float *r, float *p) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80054ba:	edc7 0a02 	vstr	s1, [r7, #8]
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
	*r = atan2f(x * -1, y) + M_PI_2;
 80054c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80054c6:	eef1 7a67 	vneg.f32	s15, s15
 80054ca:	edd7 0a02 	vldr	s1, [r7, #8]
 80054ce:	eeb0 0a67 	vmov.f32	s0, s15
 80054d2:	f007 f9c9 	bl	800c868 <atan2f>
 80054d6:	ee10 3a10 	vmov	r3, s0
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fb f800 	bl	80004e0 <__aeabi_f2d>
 80054e0:	a313      	add	r3, pc, #76	@ (adr r3, 8005530 <InverseKinematics+0x80>)
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f7fa fe9d 	bl	8000224 <__adddf3>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4610      	mov	r0, r2
 80054f0:	4619      	mov	r1, r3
 80054f2:	f7fb fb07 	bl	8000b04 <__aeabi_d2f>
 80054f6:	4602      	mov	r2, r0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	601a      	str	r2, [r3, #0]
	*p = sqrtf(x * x + y * y);
 80054fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005500:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005504:	edd7 7a02 	vldr	s15, [r7, #8]
 8005508:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800550c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005510:	eeb0 0a67 	vmov.f32	s0, s15
 8005514:	f007 f9aa 	bl	800c86c <sqrtf>
 8005518:	eef0 7a40 	vmov.f32	s15, s0
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	edc3 7a00 	vstr	s15, [r3]
}
 8005522:	bf00      	nop
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	f3af 8000 	nop.w
 8005530:	54442d18 	.word	0x54442d18
 8005534:	3ff921fb 	.word	0x3ff921fb

08005538 <TrapezoidStep>:

void TrapezoidStep(void) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
	//	static float last_TargetR = 0.0f;
	//	static float last_TargetP = 0.0f;

	// 2a) Detect setpoint jump (revolute, in radians)
	float r_diff = fabsf(TargetR - last_TargetR);
 800553e:	4b38      	ldr	r3, [pc, #224]	@ (8005620 <TrapezoidStep+0xe8>)
 8005540:	ed93 7a00 	vldr	s14, [r3]
 8005544:	4b37      	ldr	r3, [pc, #220]	@ (8005624 <TrapezoidStep+0xec>)
 8005546:	edd3 7a00 	vldr	s15, [r3]
 800554a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800554e:	eef0 7ae7 	vabs.f32	s15, s15
 8005552:	edc7 7a01 	vstr	s15, [r7, #4]
	if (r_diff > 0.001f) {
 8005556:	edd7 7a01 	vldr	s15, [r7, #4]
 800555a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8005628 <TrapezoidStep+0xf0>
 800555e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005566:	dd0f      	ble.n	8005588 <TrapezoidStep+0x50>
		// Re‐init revolute trapezoid: distance_to_go = R_Pos_Error (rad)
		Trapezoidal_Init(&revolute, R_Pos_Error, /*maxVel*/1.40f, /*maxAcc*/
 8005568:	4b30      	ldr	r3, [pc, #192]	@ (800562c <TrapezoidStep+0xf4>)
 800556a:	edd3 7a00 	vldr	s15, [r3]
 800556e:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8005572:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8005630 <TrapezoidStep+0xf8>
 8005576:	eeb0 0a67 	vmov.f32	s0, s15
 800557a:	482e      	ldr	r0, [pc, #184]	@ (8005634 <TrapezoidStep+0xfc>)
 800557c:	f7fc fa52 	bl	8001a24 <Trapezoidal_Init>
		9.0f);
		last_TargetR = TargetR;
 8005580:	4b27      	ldr	r3, [pc, #156]	@ (8005620 <TrapezoidStep+0xe8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a27      	ldr	r2, [pc, #156]	@ (8005624 <TrapezoidStep+0xec>)
 8005586:	6013      	str	r3, [r2, #0]
	}

	// 2b) Detect setpoint jump (prismatic, in mm)
	float p_diff = fabsf(TargetP - last_TargetP);
 8005588:	4b2b      	ldr	r3, [pc, #172]	@ (8005638 <TrapezoidStep+0x100>)
 800558a:	ed93 7a00 	vldr	s14, [r3]
 800558e:	4b2b      	ldr	r3, [pc, #172]	@ (800563c <TrapezoidStep+0x104>)
 8005590:	edd3 7a00 	vldr	s15, [r3]
 8005594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005598:	eef0 7ae7 	vabs.f32	s15, s15
 800559c:	edc7 7a00 	vstr	s15, [r7]
	if (p_diff > 0.01f) {
 80055a0:	edd7 7a00 	vldr	s15, [r7]
 80055a4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005640 <TrapezoidStep+0x108>
 80055a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b0:	dd0f      	ble.n	80055d2 <TrapezoidStep+0x9a>
		// Re‐init prismatic trapezoid: distance_to_go = P_Pos_Error (mm)
		Trapezoidal_Init(&prismatic, P_Pos_Error, /*maxVel*/600.0f, /*maxAcc*/
 80055b2:	4b24      	ldr	r3, [pc, #144]	@ (8005644 <TrapezoidStep+0x10c>)
 80055b4:	edd3 7a00 	vldr	s15, [r3]
 80055b8:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8005648 <TrapezoidStep+0x110>
 80055bc:	eddf 0a23 	vldr	s1, [pc, #140]	@ 800564c <TrapezoidStep+0x114>
 80055c0:	eeb0 0a67 	vmov.f32	s0, s15
 80055c4:	4822      	ldr	r0, [pc, #136]	@ (8005650 <TrapezoidStep+0x118>)
 80055c6:	f7fc fa2d 	bl	8001a24 <Trapezoidal_Init>
		3000.0f);
		last_TargetP = TargetP;
 80055ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005638 <TrapezoidStep+0x100>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1b      	ldr	r2, [pc, #108]	@ (800563c <TrapezoidStep+0x104>)
 80055d0:	6013      	str	r3, [r2, #0]
	}

	// 2c) Advance both trapezoids by 1 ms → update feedforward pos/vel/acc
	Trapezoidal_Update(&revolute, 0.001f);
 80055d2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8005628 <TrapezoidStep+0xf0>
 80055d6:	4817      	ldr	r0, [pc, #92]	@ (8005634 <TrapezoidStep+0xfc>)
 80055d8:	f7fc faee 	bl	8001bb8 <Trapezoidal_Update>
	TargetRPos = revolute.current_position;
 80055dc:	4b15      	ldr	r3, [pc, #84]	@ (8005634 <TrapezoidStep+0xfc>)
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005654 <TrapezoidStep+0x11c>)
 80055e2:	6013      	str	r3, [r2, #0]
	TargetRVel = revolute.current_velocity;
 80055e4:	4b13      	ldr	r3, [pc, #76]	@ (8005634 <TrapezoidStep+0xfc>)
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005658 <TrapezoidStep+0x120>)
 80055ea:	6013      	str	r3, [r2, #0]
	TargetRAcc = revolute.current_acceleration;
 80055ec:	4b11      	ldr	r3, [pc, #68]	@ (8005634 <TrapezoidStep+0xfc>)
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	4a1a      	ldr	r2, [pc, #104]	@ (800565c <TrapezoidStep+0x124>)
 80055f2:	6013      	str	r3, [r2, #0]

	Trapezoidal_Update(&prismatic, 0.001f);
 80055f4:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8005628 <TrapezoidStep+0xf0>
 80055f8:	4815      	ldr	r0, [pc, #84]	@ (8005650 <TrapezoidStep+0x118>)
 80055fa:	f7fc fadd 	bl	8001bb8 <Trapezoidal_Update>
	TargetPPos = prismatic.current_position;
 80055fe:	4b14      	ldr	r3, [pc, #80]	@ (8005650 <TrapezoidStep+0x118>)
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	4a17      	ldr	r2, [pc, #92]	@ (8005660 <TrapezoidStep+0x128>)
 8005604:	6013      	str	r3, [r2, #0]
	TargetPVel = prismatic.current_velocity;
 8005606:	4b12      	ldr	r3, [pc, #72]	@ (8005650 <TrapezoidStep+0x118>)
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	4a16      	ldr	r2, [pc, #88]	@ (8005664 <TrapezoidStep+0x12c>)
 800560c:	6013      	str	r3, [r2, #0]
	TargetPAcc = prismatic.current_acceleration;
 800560e:	4b10      	ldr	r3, [pc, #64]	@ (8005650 <TrapezoidStep+0x118>)
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	4a15      	ldr	r2, [pc, #84]	@ (8005668 <TrapezoidStep+0x130>)
 8005614:	6013      	str	r3, [r2, #0]
}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000b94 	.word	0x20000b94
 8005624:	20001318 	.word	0x20001318
 8005628:	3a83126f 	.word	0x3a83126f
 800562c:	20000bb4 	.word	0x20000bb4
 8005630:	3fb33333 	.word	0x3fb33333
 8005634:	2000132c 	.word	0x2000132c
 8005638:	20000b98 	.word	0x20000b98
 800563c:	2000131c 	.word	0x2000131c
 8005640:	3c23d70a 	.word	0x3c23d70a
 8005644:	20000bb8 	.word	0x20000bb8
 8005648:	453b8000 	.word	0x453b8000
 800564c:	44160000 	.word	0x44160000
 8005650:	20001370 	.word	0x20001370
 8005654:	20000b9c 	.word	0x20000b9c
 8005658:	20000ba4 	.word	0x20000ba4
 800565c:	20000bac 	.word	0x20000bac
 8005660:	20000ba0 	.word	0x20000ba0
 8005664:	20000ba8 	.word	0x20000ba8
 8005668:	20000bb0 	.word	0x20000bb0

0800566c <PIDStep>:

void PIDStep(void) {
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
	static int loop_counter1 = 0;
	static float R_Target_Velocity = 0.0f;
	static float P_Target_Velocity = 0.0f;

	loop_counter1++;
 8005672:	4b65      	ldr	r3, [pc, #404]	@ (8005808 <PIDStep+0x19c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3301      	adds	r3, #1
 8005678:	4a63      	ldr	r2, [pc, #396]	@ (8005808 <PIDStep+0x19c>)
 800567a:	6013      	str	r3, [r2, #0]
	// 3a) Outer‐loop (position) PID every 10 ms
	if (loop_counter1 >= 10) {
 800567c:	4b62      	ldr	r3, [pc, #392]	@ (8005808 <PIDStep+0x19c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b09      	cmp	r3, #9
 8005682:	dd62      	ble.n	800574a <PIDStep+0xde>
		loop_counter1 = 0;
 8005684:	4b60      	ldr	r3, [pc, #384]	@ (8005808 <PIDStep+0x19c>)
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]

		// Recompute “true” pos‐errors
		float R_Pos_now = TargetR - Revolute_QEIdata.RadPosition;
 800568a:	4b60      	ldr	r3, [pc, #384]	@ (800580c <PIDStep+0x1a0>)
 800568c:	ed93 7a00 	vldr	s14, [r3]
 8005690:	4b5f      	ldr	r3, [pc, #380]	@ (8005810 <PIDStep+0x1a4>)
 8005692:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8005696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800569a:	edc7 7a03 	vstr	s15, [r7, #12]
		float P_Pos_now = TargetP - Prismatic_QEIdata.mmPosition;
 800569e:	4b5d      	ldr	r3, [pc, #372]	@ (8005814 <PIDStep+0x1a8>)
 80056a0:	ed93 7a00 	vldr	s14, [r3]
 80056a4:	4b5c      	ldr	r3, [pc, #368]	@ (8005818 <PIDStep+0x1ac>)
 80056a6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80056aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056ae:	edc7 7a02 	vstr	s15, [r7, #8]

		// Position‐PID → corrective velocity for revolute
		float R_corr_vel = PID_Update(R_Pos_now, R_kP_pos, R_kI_pos, R_kD_pos,
 80056b2:	4b5a      	ldr	r3, [pc, #360]	@ (800581c <PIDStep+0x1b0>)
 80056b4:	edd3 7a00 	vldr	s15, [r3]
 80056b8:	4b59      	ldr	r3, [pc, #356]	@ (8005820 <PIDStep+0x1b4>)
 80056ba:	ed93 7a00 	vldr	s14, [r3]
 80056be:	4b59      	ldr	r3, [pc, #356]	@ (8005824 <PIDStep+0x1b8>)
 80056c0:	edd3 6a00 	vldr	s13, [r3]
 80056c4:	4858      	ldr	r0, [pc, #352]	@ (8005828 <PIDStep+0x1bc>)
 80056c6:	ed9f 3a59 	vldr	s6, [pc, #356]	@ 800582c <PIDStep+0x1c0>
 80056ca:	eddf 2a59 	vldr	s5, [pc, #356]	@ 8005830 <PIDStep+0x1c4>
 80056ce:	ed9f 2a59 	vldr	s4, [pc, #356]	@ 8005834 <PIDStep+0x1c8>
 80056d2:	eef0 1a66 	vmov.f32	s3, s13
 80056d6:	eeb0 1a47 	vmov.f32	s2, s14
 80056da:	eef0 0a67 	vmov.f32	s1, s15
 80056de:	ed97 0a03 	vldr	s0, [r7, #12]
 80056e2:	f7ff fa15 	bl	8004b10 <PID_Update>
 80056e6:	ed87 0a01 	vstr	s0, [r7, #4]
				0.010f, // dt = 10 ms
				-100.0f, +100.0f, &pid_r);

		// Position‐PID → corrective velocity for prismatic
		float P_corr_vel = PID_Update(P_Pos_now, P_kP_pos, P_kI_pos, P_kD_pos,
 80056ea:	4b53      	ldr	r3, [pc, #332]	@ (8005838 <PIDStep+0x1cc>)
 80056ec:	edd3 7a00 	vldr	s15, [r3]
 80056f0:	4b52      	ldr	r3, [pc, #328]	@ (800583c <PIDStep+0x1d0>)
 80056f2:	ed93 7a00 	vldr	s14, [r3]
 80056f6:	4b52      	ldr	r3, [pc, #328]	@ (8005840 <PIDStep+0x1d4>)
 80056f8:	edd3 6a00 	vldr	s13, [r3]
 80056fc:	4851      	ldr	r0, [pc, #324]	@ (8005844 <PIDStep+0x1d8>)
 80056fe:	ed9f 3a4b 	vldr	s6, [pc, #300]	@ 800582c <PIDStep+0x1c0>
 8005702:	eddf 2a4b 	vldr	s5, [pc, #300]	@ 8005830 <PIDStep+0x1c4>
 8005706:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 8005834 <PIDStep+0x1c8>
 800570a:	eef0 1a66 	vmov.f32	s3, s13
 800570e:	eeb0 1a47 	vmov.f32	s2, s14
 8005712:	eef0 0a67 	vmov.f32	s1, s15
 8005716:	ed97 0a02 	vldr	s0, [r7, #8]
 800571a:	f7ff f9f9 	bl	8004b10 <PID_Update>
 800571e:	ed87 0a00 	vstr	s0, [r7]
				0.010f, -100.0f, +100.0f, &pid_p);

		// Combine with feedforward velocities
		R_Target_Velocity = TargetRVel + R_corr_vel;
 8005722:	4b49      	ldr	r3, [pc, #292]	@ (8005848 <PIDStep+0x1dc>)
 8005724:	ed93 7a00 	vldr	s14, [r3]
 8005728:	edd7 7a01 	vldr	s15, [r7, #4]
 800572c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005730:	4b46      	ldr	r3, [pc, #280]	@ (800584c <PIDStep+0x1e0>)
 8005732:	edc3 7a00 	vstr	s15, [r3]
		P_Target_Velocity = TargetPVel + P_corr_vel;
 8005736:	4b46      	ldr	r3, [pc, #280]	@ (8005850 <PIDStep+0x1e4>)
 8005738:	ed93 7a00 	vldr	s14, [r3]
 800573c:	edd7 7a00 	vldr	s15, [r7]
 8005740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005744:	4b43      	ldr	r3, [pc, #268]	@ (8005854 <PIDStep+0x1e8>)
 8005746:	edc3 7a00 	vstr	s15, [r3]
	}

	// 3b) Inner‐loop (velocity) PID _every_ 1 ms:
	R_Velo_Error = R_Target_Velocity - Revolute_QEIdata.Velocity_f;
 800574a:	4b40      	ldr	r3, [pc, #256]	@ (800584c <PIDStep+0x1e0>)
 800574c:	ed93 7a00 	vldr	s14, [r3]
 8005750:	4b2f      	ldr	r3, [pc, #188]	@ (8005810 <PIDStep+0x1a4>)
 8005752:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800575a:	4b3f      	ldr	r3, [pc, #252]	@ (8005858 <PIDStep+0x1ec>)
 800575c:	edc3 7a00 	vstr	s15, [r3]
	R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel, R_kD_vel, 0.001f, // dt = 1 ms
 8005760:	4b3d      	ldr	r3, [pc, #244]	@ (8005858 <PIDStep+0x1ec>)
 8005762:	edd3 7a00 	vldr	s15, [r3]
 8005766:	4b3d      	ldr	r3, [pc, #244]	@ (800585c <PIDStep+0x1f0>)
 8005768:	ed93 7a00 	vldr	s14, [r3]
 800576c:	4b3c      	ldr	r3, [pc, #240]	@ (8005860 <PIDStep+0x1f4>)
 800576e:	edd3 6a00 	vldr	s13, [r3]
 8005772:	4b3c      	ldr	r3, [pc, #240]	@ (8005864 <PIDStep+0x1f8>)
 8005774:	ed93 6a00 	vldr	s12, [r3]
 8005778:	483b      	ldr	r0, [pc, #236]	@ (8005868 <PIDStep+0x1fc>)
 800577a:	ed9f 3a2c 	vldr	s6, [pc, #176]	@ 800582c <PIDStep+0x1c0>
 800577e:	eddf 2a2c 	vldr	s5, [pc, #176]	@ 8005830 <PIDStep+0x1c4>
 8005782:	ed9f 2a3a 	vldr	s4, [pc, #232]	@ 800586c <PIDStep+0x200>
 8005786:	eef0 1a46 	vmov.f32	s3, s12
 800578a:	eeb0 1a66 	vmov.f32	s2, s13
 800578e:	eef0 0a47 	vmov.f32	s1, s14
 8005792:	eeb0 0a67 	vmov.f32	s0, s15
 8005796:	f7ff f9bb 	bl	8004b10 <PID_Update>
 800579a:	eef0 7a40 	vmov.f32	s15, s0
 800579e:	4b34      	ldr	r3, [pc, #208]	@ (8005870 <PIDStep+0x204>)
 80057a0:	edc3 7a00 	vstr	s15, [r3]
			-100.0f, +100.0f, &pid_r_v);

	P_Velo_Error = P_Target_Velocity - Prismatic_QEIdata.Velocity_f;
 80057a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005854 <PIDStep+0x1e8>)
 80057a6:	ed93 7a00 	vldr	s14, [r3]
 80057aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005818 <PIDStep+0x1ac>)
 80057ac:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80057b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005874 <PIDStep+0x208>)
 80057b6:	edc3 7a00 	vstr	s15, [r3]
	P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel, P_kD_vel, 0.001f,
 80057ba:	4b2e      	ldr	r3, [pc, #184]	@ (8005874 <PIDStep+0x208>)
 80057bc:	edd3 7a00 	vldr	s15, [r3]
 80057c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005878 <PIDStep+0x20c>)
 80057c2:	ed93 7a00 	vldr	s14, [r3]
 80057c6:	4b2d      	ldr	r3, [pc, #180]	@ (800587c <PIDStep+0x210>)
 80057c8:	edd3 6a00 	vldr	s13, [r3]
 80057cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005880 <PIDStep+0x214>)
 80057ce:	ed93 6a00 	vldr	s12, [r3]
 80057d2:	482c      	ldr	r0, [pc, #176]	@ (8005884 <PIDStep+0x218>)
 80057d4:	ed9f 3a15 	vldr	s6, [pc, #84]	@ 800582c <PIDStep+0x1c0>
 80057d8:	eddf 2a15 	vldr	s5, [pc, #84]	@ 8005830 <PIDStep+0x1c4>
 80057dc:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 800586c <PIDStep+0x200>
 80057e0:	eef0 1a46 	vmov.f32	s3, s12
 80057e4:	eeb0 1a66 	vmov.f32	s2, s13
 80057e8:	eef0 0a47 	vmov.f32	s1, s14
 80057ec:	eeb0 0a67 	vmov.f32	s0, s15
 80057f0:	f7ff f98e 	bl	8004b10 <PID_Update>
 80057f4:	eef0 7a40 	vmov.f32	s15, s0
 80057f8:	4b23      	ldr	r3, [pc, #140]	@ (8005888 <PIDStep+0x21c>)
 80057fa:	edc3 7a00 	vstr	s15, [r3]
			-100.0f, +100.0f, &pid_p_v);
}
 80057fe:	bf00      	nop
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20001430 	.word	0x20001430
 800580c:	20000b94 	.word	0x20000b94
 8005810:	20000af8 	.word	0x20000af8
 8005814:	20000b98 	.word	0x20000b98
 8005818:	20000b38 	.word	0x20000b38
 800581c:	2000020c 	.word	0x2000020c
 8005820:	20000210 	.word	0x20000210
 8005824:	20000214 	.word	0x20000214
 8005828:	20000bf8 	.word	0x20000bf8
 800582c:	42c80000 	.word	0x42c80000
 8005830:	c2c80000 	.word	0xc2c80000
 8005834:	3c23d70a 	.word	0x3c23d70a
 8005838:	20000220 	.word	0x20000220
 800583c:	20000224 	.word	0x20000224
 8005840:	20000228 	.word	0x20000228
 8005844:	20000c00 	.word	0x20000c00
 8005848:	20000ba4 	.word	0x20000ba4
 800584c:	20001434 	.word	0x20001434
 8005850:	20000ba8 	.word	0x20000ba8
 8005854:	20001438 	.word	0x20001438
 8005858:	20000bbc 	.word	0x20000bbc
 800585c:	20000200 	.word	0x20000200
 8005860:	20000204 	.word	0x20000204
 8005864:	20000208 	.word	0x20000208
 8005868:	20000c08 	.word	0x20000c08
 800586c:	3a83126f 	.word	0x3a83126f
 8005870:	20000bc4 	.word	0x20000bc4
 8005874:	20000bc0 	.word	0x20000bc0
 8005878:	20000218 	.word	0x20000218
 800587c:	2000021c 	.word	0x2000021c
 8005880:	20000c18 	.word	0x20000c18
 8005884:	20000c10 	.word	0x20000c10
 8005888:	20000bc8 	.word	0x20000bc8

0800588c <ToleranceCheck>:

int ToleranceCheck(void) {
 800588c:	b5b0      	push	{r4, r5, r7, lr}
 800588e:	af00      	add	r7, sp, #0
	static uint64_t lock_timer_us = 0;

	if ((fabsf(TargetR - Revolute_QEIdata.RadPosition) < R_ERR_TOL_RAD)
 8005890:	4b24      	ldr	r3, [pc, #144]	@ (8005924 <ToleranceCheck+0x98>)
 8005892:	ed93 7a00 	vldr	s14, [r3]
 8005896:	4b24      	ldr	r3, [pc, #144]	@ (8005928 <ToleranceCheck+0x9c>)
 8005898:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800589c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058a0:	eef0 7ae7 	vabs.f32	s15, s15
 80058a4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800592c <ToleranceCheck+0xa0>
 80058a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b0:	d52c      	bpl.n	800590c <ToleranceCheck+0x80>
			&& (fabsf(TargetP - Prismatic_QEIdata.mmPosition) < P_ERR_TOL_MM)) {
 80058b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005930 <ToleranceCheck+0xa4>)
 80058b4:	ed93 7a00 	vldr	s14, [r3]
 80058b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005934 <ToleranceCheck+0xa8>)
 80058ba:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80058be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058c2:	eef0 7ae7 	vabs.f32	s15, s15
 80058c6:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8005938 <ToleranceCheck+0xac>
 80058ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d2:	d51b      	bpl.n	800590c <ToleranceCheck+0x80>
		if (lock_timer_us == 0) {
 80058d4:	4b19      	ldr	r3, [pc, #100]	@ (800593c <ToleranceCheck+0xb0>)
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	4313      	orrs	r3, r2
 80058dc:	d107      	bne.n	80058ee <ToleranceCheck+0x62>
			lock_timer_us = micros();
 80058de:	f7ff f8fd 	bl	8004adc <micros>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4915      	ldr	r1, [pc, #84]	@ (800593c <ToleranceCheck+0xb0>)
 80058e8:	e9c1 2300 	strd	r2, r3, [r1]
		if (lock_timer_us == 0) {
 80058ec:	e016      	b.n	800591c <ToleranceCheck+0x90>
		} else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 80058ee:	f7ff f8f5 	bl	8004adc <micros>
 80058f2:	4b12      	ldr	r3, [pc, #72]	@ (800593c <ToleranceCheck+0xb0>)
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	1a84      	subs	r4, r0, r2
 80058fa:	eb61 0503 	sbc.w	r5, r1, r3
 80058fe:	4b10      	ldr	r3, [pc, #64]	@ (8005940 <ToleranceCheck+0xb4>)
 8005900:	429c      	cmp	r4, r3
 8005902:	f175 0300 	sbcs.w	r3, r5, #0
 8005906:	d309      	bcc.n	800591c <ToleranceCheck+0x90>
			// We have stayed inside tolerance for long enough → “lock & hold”
			return 1;
 8005908:	2301      	movs	r3, #1
 800590a:	e009      	b.n	8005920 <ToleranceCheck+0x94>
		}
	} else {
		lock_timer_us = 0;
 800590c:	490b      	ldr	r1, [pc, #44]	@ (800593c <ToleranceCheck+0xb0>)
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	e9c1 2300 	strd	r2, r3, [r1]
 800591a:	e000      	b.n	800591e <ToleranceCheck+0x92>
		if (lock_timer_us == 0) {
 800591c:	bf00      	nop
	}

	return 0;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	bdb0      	pop	{r4, r5, r7, pc}
 8005924:	20000b94 	.word	0x20000b94
 8005928:	20000af8 	.word	0x20000af8
 800592c:	3bded289 	.word	0x3bded289
 8005930:	20000b98 	.word	0x20000b98
 8005934:	20000b38 	.word	0x20000b38
 8005938:	3ecccccd 	.word	0x3ecccccd
 800593c:	20001440 	.word	0x20001440
 8005940:	000f4240 	.word	0x000f4240
 8005944:	00000000 	.word	0x00000000

08005948 <CascadeControl_Step>:

int CascadeControl_Step(void) {
 8005948:	b5b0      	push	{r4, r5, r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
	static uint64_t timestampState2 = 0;

	// 1a) Convert desired‐angle (deg) → (rad) and compute current pos‐errors
	// float TargetR = TargetR_Deg * (M_PI / 180.0f);
	R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 800594e:	4b34      	ldr	r3, [pc, #208]	@ (8005a20 <CascadeControl_Step+0xd8>)
 8005950:	ed93 7a00 	vldr	s14, [r3]
 8005954:	4b33      	ldr	r3, [pc, #204]	@ (8005a24 <CascadeControl_Step+0xdc>)
 8005956:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800595a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800595e:	4b32      	ldr	r3, [pc, #200]	@ (8005a28 <CascadeControl_Step+0xe0>)
 8005960:	edc3 7a00 	vstr	s15, [r3]
	P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8005964:	4b31      	ldr	r3, [pc, #196]	@ (8005a2c <CascadeControl_Step+0xe4>)
 8005966:	ed93 7a00 	vldr	s14, [r3]
 800596a:	4b31      	ldr	r3, [pc, #196]	@ (8005a30 <CascadeControl_Step+0xe8>)
 800596c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8005970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005974:	4b2f      	ldr	r3, [pc, #188]	@ (8005a34 <CascadeControl_Step+0xec>)
 8005976:	edc3 7a00 	vstr	s15, [r3]
	R_Pos_Error_Deg = R_Pos_Error * (180.0f / M_PI);
 800597a:	4b2b      	ldr	r3, [pc, #172]	@ (8005a28 <CascadeControl_Step+0xe0>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f7fa fdae 	bl	80004e0 <__aeabi_f2d>
 8005984:	a324      	add	r3, pc, #144	@ (adr r3, 8005a18 <CascadeControl_Step+0xd0>)
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f7fa fe01 	bl	8000590 <__aeabi_dmul>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4610      	mov	r0, r2
 8005994:	4619      	mov	r1, r3
 8005996:	f7fb f8b5 	bl	8000b04 <__aeabi_d2f>
 800599a:	4603      	mov	r3, r0
 800599c:	4a26      	ldr	r2, [pc, #152]	@ (8005a38 <CascadeControl_Step+0xf0>)
 800599e:	6013      	str	r3, [r2, #0]

	// 1b) 1 ms timer check
	uint64_t nowtimestamp = micros();
 80059a0:	f7ff f89c 	bl	8004adc <micros>
 80059a4:	e9c7 0100 	strd	r0, r1, [r7]
	if (nowtimestamp <= timestampState2) {
 80059a8:	4b24      	ldr	r3, [pc, #144]	@ (8005a3c <CascadeControl_Step+0xf4>)
 80059aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059b2:	4290      	cmp	r0, r2
 80059b4:	eb71 0303 	sbcs.w	r3, r1, r3
 80059b8:	d301      	bcc.n	80059be <CascadeControl_Step+0x76>
		// Not yet 1 ms since last run → bail out
		return 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e026      	b.n	8005a0c <CascadeControl_Step+0xc4>
	}
	// Advance to next 1 ms tick
	timestampState2 = nowtimestamp + 1000;
 80059be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059c2:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 80059c6:	f143 0500 	adc.w	r5, r3, #0
 80059ca:	4b1c      	ldr	r3, [pc, #112]	@ (8005a3c <CascadeControl_Step+0xf4>)
 80059cc:	e9c3 4500 	strd	r4, r5, [r3]

	// 2) Trapezoid logic: init if needed + update (1 ms)
	TrapezoidStep();
 80059d0:	f7ff fdb2 	bl	8005538 <TrapezoidStep>

	// 3) PID logic: 10 ms outer, 1 ms inner
	PIDStep();
 80059d4:	f7ff fe4a 	bl	800566c <PIDStep>

	// 4) Apply workspace limits (joint‐limits, etc.) and send the PWM commands
	Workspace_limit();
 80059d8:	f7ff fbfe 	bl	80051d8 <Workspace_limit>
	Set_Motor(0, R_PWM);
 80059dc:	4b18      	ldr	r3, [pc, #96]	@ (8005a40 <CascadeControl_Step+0xf8>)
 80059de:	edd3 7a00 	vldr	s15, [r3]
 80059e2:	eeb0 0a67 	vmov.f32	s0, s15
 80059e6:	2000      	movs	r0, #0
 80059e8:	f7ff fb2c 	bl	8005044 <Set_Motor>
	Set_Motor(1, P_PWM);
 80059ec:	4b15      	ldr	r3, [pc, #84]	@ (8005a44 <CascadeControl_Step+0xfc>)
 80059ee:	edd3 7a00 	vldr	s15, [r3]
 80059f2:	eeb0 0a67 	vmov.f32	s0, s15
 80059f6:	2001      	movs	r0, #1
 80059f8:	f7ff fb24 	bl	8005044 <Set_Motor>

	// 5) Tolerance‐check + “lock & hold” (servo + zero motors) if arrived
	CheckTolerance = ToleranceCheck();
 80059fc:	f7ff ff46 	bl	800588c <ToleranceCheck>
 8005a00:	4603      	mov	r3, r0
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	4b10      	ldr	r3, [pc, #64]	@ (8005a48 <CascadeControl_Step+0x100>)
 8005a06:	701a      	strb	r2, [r3, #0]
	return CheckTolerance;
 8005a08:	4b0f      	ldr	r3, [pc, #60]	@ (8005a48 <CascadeControl_Step+0x100>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
	//	return ToleranceCheck();
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bdb0      	pop	{r4, r5, r7, pc}
 8005a14:	f3af 8000 	nop.w
 8005a18:	1a63c1f8 	.word	0x1a63c1f8
 8005a1c:	404ca5dc 	.word	0x404ca5dc
 8005a20:	20000b94 	.word	0x20000b94
 8005a24:	20000af8 	.word	0x20000af8
 8005a28:	20000bb4 	.word	0x20000bb4
 8005a2c:	20000b98 	.word	0x20000b98
 8005a30:	20000b38 	.word	0x20000b38
 8005a34:	20000bb8 	.word	0x20000bb8
 8005a38:	20000aac 	.word	0x20000aac
 8005a3c:	20001448 	.word	0x20001448
 8005a40:	20000bc4 	.word	0x20000bc4
 8005a44:	20000bc8 	.word	0x20000bc8
 8005a48:	20001328 	.word	0x20001328

08005a4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a50:	b672      	cpsid	i
}
 8005a52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005a54:	bf00      	nop
 8005a56:	e7fd      	b.n	8005a54 <Error_Handler+0x8>

08005a58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8005a9c <HAL_MspInit+0x44>)
 8005a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a62:	4a0e      	ldr	r2, [pc, #56]	@ (8005a9c <HAL_MspInit+0x44>)
 8005a64:	f043 0301 	orr.w	r3, r3, #1
 8005a68:	6613      	str	r3, [r2, #96]	@ 0x60
 8005a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a9c <HAL_MspInit+0x44>)
 8005a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	607b      	str	r3, [r7, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a76:	4b09      	ldr	r3, [pc, #36]	@ (8005a9c <HAL_MspInit+0x44>)
 8005a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a7a:	4a08      	ldr	r2, [pc, #32]	@ (8005a9c <HAL_MspInit+0x44>)
 8005a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a80:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a82:	4b06      	ldr	r3, [pc, #24]	@ (8005a9c <HAL_MspInit+0x44>)
 8005a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005a8e:	f001 fa97 	bl	8006fc0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000

08005aa0 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08c      	sub	sp, #48	@ 0x30
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aa8:	f107 031c 	add.w	r3, r7, #28
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	605a      	str	r2, [r3, #4]
 8005ab2:	609a      	str	r2, [r3, #8]
 8005ab4:	60da      	str	r2, [r3, #12]
 8005ab6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a32      	ldr	r2, [pc, #200]	@ (8005b88 <HAL_TIM_IC_MspInit+0xe8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d130      	bne.n	8005b24 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ac2:	4b32      	ldr	r3, [pc, #200]	@ (8005b8c <HAL_TIM_IC_MspInit+0xec>)
 8005ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ac6:	4a31      	ldr	r2, [pc, #196]	@ (8005b8c <HAL_TIM_IC_MspInit+0xec>)
 8005ac8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005acc:	6613      	str	r3, [r2, #96]	@ 0x60
 8005ace:	4b2f      	ldr	r3, [pc, #188]	@ (8005b8c <HAL_TIM_IC_MspInit+0xec>)
 8005ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ad2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ad6:	61bb      	str	r3, [r7, #24]
 8005ad8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ada:	4b2c      	ldr	r3, [pc, #176]	@ (8005b8c <HAL_TIM_IC_MspInit+0xec>)
 8005adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ade:	4a2b      	ldr	r2, [pc, #172]	@ (8005b8c <HAL_TIM_IC_MspInit+0xec>)
 8005ae0:	f043 0304 	orr.w	r3, r3, #4
 8005ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ae6:	4b29      	ldr	r3, [pc, #164]	@ (8005b8c <HAL_TIM_IC_MspInit+0xec>)
 8005ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005af2:	2302      	movs	r3, #2
 8005af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005af6:	2302      	movs	r3, #2
 8005af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005afe:	2300      	movs	r3, #0
 8005b00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005b02:	2302      	movs	r3, #2
 8005b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b06:	f107 031c 	add.w	r3, r7, #28
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4820      	ldr	r0, [pc, #128]	@ (8005b90 <HAL_TIM_IC_MspInit+0xf0>)
 8005b0e:	f000 ffe9 	bl	8006ae4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005b12:	2200      	movs	r2, #0
 8005b14:	2100      	movs	r1, #0
 8005b16:	2019      	movs	r0, #25
 8005b18:	f000 fc7d 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005b1c:	2019      	movs	r0, #25
 8005b1e:	f000 fc94 	bl	800644a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005b22:	e02d      	b.n	8005b80 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b2c:	d128      	bne.n	8005b80 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b2e:	4b17      	ldr	r3, [pc, #92]	@ (8005b8c <HAL_TIM_IC_MspInit+0xec>)
 8005b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b32:	4a16      	ldr	r2, [pc, #88]	@ (8005b8c <HAL_TIM_IC_MspInit+0xec>)
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b3a:	4b14      	ldr	r3, [pc, #80]	@ (8005b8c <HAL_TIM_IC_MspInit+0xec>)
 8005b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b46:	4b11      	ldr	r3, [pc, #68]	@ (8005b8c <HAL_TIM_IC_MspInit+0xec>)
 8005b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b4a:	4a10      	ldr	r2, [pc, #64]	@ (8005b8c <HAL_TIM_IC_MspInit+0xec>)
 8005b4c:	f043 0301 	orr.w	r3, r3, #1
 8005b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b52:	4b0e      	ldr	r3, [pc, #56]	@ (8005b8c <HAL_TIM_IC_MspInit+0xec>)
 8005b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b62:	2302      	movs	r3, #2
 8005b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b72:	f107 031c 	add.w	r3, r7, #28
 8005b76:	4619      	mov	r1, r3
 8005b78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005b7c:	f000 ffb2 	bl	8006ae4 <HAL_GPIO_Init>
}
 8005b80:	bf00      	nop
 8005b82:	3730      	adds	r7, #48	@ 0x30
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	48000800 	.word	0x48000800

08005b94 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08c      	sub	sp, #48	@ 0x30
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b9c:	f107 031c 	add.w	r3, r7, #28
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	609a      	str	r2, [r3, #8]
 8005ba8:	60da      	str	r2, [r3, #12]
 8005baa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a37      	ldr	r2, [pc, #220]	@ (8005c90 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d130      	bne.n	8005c18 <HAL_TIM_Encoder_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005bb6:	4b37      	ldr	r3, [pc, #220]	@ (8005c94 <HAL_TIM_Encoder_MspInit+0x100>)
 8005bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bba:	4a36      	ldr	r2, [pc, #216]	@ (8005c94 <HAL_TIM_Encoder_MspInit+0x100>)
 8005bbc:	f043 0302 	orr.w	r3, r3, #2
 8005bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bc2:	4b34      	ldr	r3, [pc, #208]	@ (8005c94 <HAL_TIM_Encoder_MspInit+0x100>)
 8005bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bce:	4b31      	ldr	r3, [pc, #196]	@ (8005c94 <HAL_TIM_Encoder_MspInit+0x100>)
 8005bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd2:	4a30      	ldr	r2, [pc, #192]	@ (8005c94 <HAL_TIM_Encoder_MspInit+0x100>)
 8005bd4:	f043 0302 	orr.w	r3, r3, #2
 8005bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bda:	4b2e      	ldr	r3, [pc, #184]	@ (8005c94 <HAL_TIM_Encoder_MspInit+0x100>)
 8005bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005be6:	2330      	movs	r3, #48	@ 0x30
 8005be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bea:	2302      	movs	r3, #2
 8005bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bfa:	f107 031c 	add.w	r3, r7, #28
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4825      	ldr	r0, [pc, #148]	@ (8005c98 <HAL_TIM_Encoder_MspInit+0x104>)
 8005c02:	f000 ff6f 	bl	8006ae4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005c06:	2200      	movs	r2, #0
 8005c08:	2100      	movs	r1, #0
 8005c0a:	201d      	movs	r0, #29
 8005c0c:	f000 fc03 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005c10:	201d      	movs	r0, #29
 8005c12:	f000 fc1a 	bl	800644a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005c16:	e036      	b.n	8005c86 <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM4)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8005c9c <HAL_TIM_Encoder_MspInit+0x108>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d131      	bne.n	8005c86 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005c22:	4b1c      	ldr	r3, [pc, #112]	@ (8005c94 <HAL_TIM_Encoder_MspInit+0x100>)
 8005c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c26:	4a1b      	ldr	r2, [pc, #108]	@ (8005c94 <HAL_TIM_Encoder_MspInit+0x100>)
 8005c28:	f043 0304 	orr.w	r3, r3, #4
 8005c2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c2e:	4b19      	ldr	r3, [pc, #100]	@ (8005c94 <HAL_TIM_Encoder_MspInit+0x100>)
 8005c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c3a:	4b16      	ldr	r3, [pc, #88]	@ (8005c94 <HAL_TIM_Encoder_MspInit+0x100>)
 8005c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c3e:	4a15      	ldr	r2, [pc, #84]	@ (8005c94 <HAL_TIM_Encoder_MspInit+0x100>)
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c46:	4b13      	ldr	r3, [pc, #76]	@ (8005c94 <HAL_TIM_Encoder_MspInit+0x100>)
 8005c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005c52:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c60:	2300      	movs	r3, #0
 8005c62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005c64:	230a      	movs	r3, #10
 8005c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c68:	f107 031c 	add.w	r3, r7, #28
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005c72:	f000 ff37 	bl	8006ae4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005c76:	2200      	movs	r2, #0
 8005c78:	2100      	movs	r1, #0
 8005c7a:	201e      	movs	r0, #30
 8005c7c:	f000 fbcb 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005c80:	201e      	movs	r0, #30
 8005c82:	f000 fbe2 	bl	800644a <HAL_NVIC_EnableIRQ>
}
 8005c86:	bf00      	nop
 8005c88:	3730      	adds	r7, #48	@ 0x30
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40000400 	.word	0x40000400
 8005c94:	40021000 	.word	0x40021000
 8005c98:	48000400 	.word	0x48000400
 8005c9c:	40000800 	.word	0x40000800

08005ca0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2c      	ldr	r2, [pc, #176]	@ (8005d60 <HAL_TIM_Base_MspInit+0xc0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d114      	bne.n	8005cdc <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8005d64 <HAL_TIM_Base_MspInit+0xc4>)
 8005cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb6:	4a2b      	ldr	r2, [pc, #172]	@ (8005d64 <HAL_TIM_Base_MspInit+0xc4>)
 8005cb8:	f043 0308 	orr.w	r3, r3, #8
 8005cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cbe:	4b29      	ldr	r3, [pc, #164]	@ (8005d64 <HAL_TIM_Base_MspInit+0xc4>)
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2100      	movs	r1, #0
 8005cce:	2032      	movs	r0, #50	@ 0x32
 8005cd0:	f000 fba1 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005cd4:	2032      	movs	r0, #50	@ 0x32
 8005cd6:	f000 fbb8 	bl	800644a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8005cda:	e03c      	b.n	8005d56 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a21      	ldr	r2, [pc, #132]	@ (8005d68 <HAL_TIM_Base_MspInit+0xc8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d10c      	bne.n	8005d00 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8005d64 <HAL_TIM_Base_MspInit+0xc4>)
 8005ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cea:	4a1e      	ldr	r2, [pc, #120]	@ (8005d64 <HAL_TIM_Base_MspInit+0xc4>)
 8005cec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005cf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8005cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8005d64 <HAL_TIM_Base_MspInit+0xc4>)
 8005cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	693b      	ldr	r3, [r7, #16]
}
 8005cfe:	e02a      	b.n	8005d56 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM15)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a19      	ldr	r2, [pc, #100]	@ (8005d6c <HAL_TIM_Base_MspInit+0xcc>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d10c      	bne.n	8005d24 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005d0a:	4b16      	ldr	r3, [pc, #88]	@ (8005d64 <HAL_TIM_Base_MspInit+0xc4>)
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d0e:	4a15      	ldr	r2, [pc, #84]	@ (8005d64 <HAL_TIM_Base_MspInit+0xc4>)
 8005d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d14:	6613      	str	r3, [r2, #96]	@ 0x60
 8005d16:	4b13      	ldr	r3, [pc, #76]	@ (8005d64 <HAL_TIM_Base_MspInit+0xc4>)
 8005d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]
}
 8005d22:	e018      	b.n	8005d56 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a11      	ldr	r2, [pc, #68]	@ (8005d70 <HAL_TIM_Base_MspInit+0xd0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d113      	bne.n	8005d56 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d64 <HAL_TIM_Base_MspInit+0xc4>)
 8005d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d32:	4a0c      	ldr	r2, [pc, #48]	@ (8005d64 <HAL_TIM_Base_MspInit+0xc4>)
 8005d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d38:	6613      	str	r3, [r2, #96]	@ 0x60
 8005d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d64 <HAL_TIM_Base_MspInit+0xc4>)
 8005d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d42:	60bb      	str	r3, [r7, #8]
 8005d44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005d46:	2200      	movs	r2, #0
 8005d48:	2100      	movs	r1, #0
 8005d4a:	2019      	movs	r0, #25
 8005d4c:	f000 fb63 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005d50:	2019      	movs	r0, #25
 8005d52:	f000 fb7a 	bl	800644a <HAL_NVIC_EnableIRQ>
}
 8005d56:	bf00      	nop
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40000c00 	.word	0x40000c00
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40013400 	.word	0x40013400
 8005d6c:	40014000 	.word	0x40014000
 8005d70:	40014400 	.word	0x40014400

08005d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08a      	sub	sp, #40	@ 0x28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d7c:	f107 0314 	add.w	r3, r7, #20
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	605a      	str	r2, [r3, #4]
 8005d86:	609a      	str	r2, [r3, #8]
 8005d88:	60da      	str	r2, [r3, #12]
 8005d8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a23      	ldr	r2, [pc, #140]	@ (8005e20 <HAL_TIM_MspPostInit+0xac>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d11d      	bne.n	8005dd2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d96:	4b23      	ldr	r3, [pc, #140]	@ (8005e24 <HAL_TIM_MspPostInit+0xb0>)
 8005d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d9a:	4a22      	ldr	r2, [pc, #136]	@ (8005e24 <HAL_TIM_MspPostInit+0xb0>)
 8005d9c:	f043 0304 	orr.w	r3, r3, #4
 8005da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005da2:	4b20      	ldr	r3, [pc, #128]	@ (8005e24 <HAL_TIM_MspPostInit+0xb0>)
 8005da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	613b      	str	r3, [r7, #16]
 8005dac:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005dae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005db4:	2302      	movs	r3, #2
 8005db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dc4:	f107 0314 	add.w	r3, r7, #20
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4817      	ldr	r0, [pc, #92]	@ (8005e28 <HAL_TIM_MspPostInit+0xb4>)
 8005dcc:	f000 fe8a 	bl	8006ae4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005dd0:	e021      	b.n	8005e16 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a15      	ldr	r2, [pc, #84]	@ (8005e2c <HAL_TIM_MspPostInit+0xb8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d11c      	bne.n	8005e16 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ddc:	4b11      	ldr	r3, [pc, #68]	@ (8005e24 <HAL_TIM_MspPostInit+0xb0>)
 8005dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005de0:	4a10      	ldr	r2, [pc, #64]	@ (8005e24 <HAL_TIM_MspPostInit+0xb0>)
 8005de2:	f043 0302 	orr.w	r3, r3, #2
 8005de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005de8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e24 <HAL_TIM_MspPostInit+0xb0>)
 8005dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005df4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e02:	2300      	movs	r3, #0
 8005e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8005e06:	2301      	movs	r3, #1
 8005e08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e0a:	f107 0314 	add.w	r3, r7, #20
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4807      	ldr	r0, [pc, #28]	@ (8005e30 <HAL_TIM_MspPostInit+0xbc>)
 8005e12:	f000 fe67 	bl	8006ae4 <HAL_GPIO_Init>
}
 8005e16:	bf00      	nop
 8005e18:	3728      	adds	r7, #40	@ 0x28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	40013400 	.word	0x40013400
 8005e24:	40021000 	.word	0x40021000
 8005e28:	48000800 	.word	0x48000800
 8005e2c:	40014000 	.word	0x40014000
 8005e30:	48000400 	.word	0x48000400

08005e34 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b09e      	sub	sp, #120	@ 0x78
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	605a      	str	r2, [r3, #4]
 8005e46:	609a      	str	r2, [r3, #8]
 8005e48:	60da      	str	r2, [r3, #12]
 8005e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e4c:	f107 0310 	add.w	r3, r7, #16
 8005e50:	2254      	movs	r2, #84	@ 0x54
 8005e52:	2100      	movs	r1, #0
 8005e54:	4618      	mov	r0, r3
 8005e56:	f006 fcc7 	bl	800c7e8 <memset>
  if(huart->Instance==USART2)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a4d      	ldr	r2, [pc, #308]	@ (8005f94 <HAL_UART_MspInit+0x160>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	f040 8092 	bne.w	8005f8a <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005e66:	2302      	movs	r3, #2
 8005e68:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e6e:	f107 0310 	add.w	r3, r7, #16
 8005e72:	4618      	mov	r0, r3
 8005e74:	f001 fde2 	bl	8007a3c <HAL_RCCEx_PeriphCLKConfig>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005e7e:	f7ff fde5 	bl	8005a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e82:	4b45      	ldr	r3, [pc, #276]	@ (8005f98 <HAL_UART_MspInit+0x164>)
 8005e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e86:	4a44      	ldr	r2, [pc, #272]	@ (8005f98 <HAL_UART_MspInit+0x164>)
 8005e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e8e:	4b42      	ldr	r3, [pc, #264]	@ (8005f98 <HAL_UART_MspInit+0x164>)
 8005e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e9a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f98 <HAL_UART_MspInit+0x164>)
 8005e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e9e:	4a3e      	ldr	r2, [pc, #248]	@ (8005f98 <HAL_UART_MspInit+0x164>)
 8005ea0:	f043 0301 	orr.w	r3, r3, #1
 8005ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8005f98 <HAL_UART_MspInit+0x164>)
 8005ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	60bb      	str	r3, [r7, #8]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005eb2:	230c      	movs	r3, #12
 8005eb4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ec2:	2307      	movs	r3, #7
 8005ec4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ec6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005eca:	4619      	mov	r1, r3
 8005ecc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005ed0:	f000 fe08 	bl	8006ae4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8005ed4:	4b31      	ldr	r3, [pc, #196]	@ (8005f9c <HAL_UART_MspInit+0x168>)
 8005ed6:	4a32      	ldr	r2, [pc, #200]	@ (8005fa0 <HAL_UART_MspInit+0x16c>)
 8005ed8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005eda:	4b30      	ldr	r3, [pc, #192]	@ (8005f9c <HAL_UART_MspInit+0x168>)
 8005edc:	221a      	movs	r2, #26
 8005ede:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8005f9c <HAL_UART_MspInit+0x168>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ee6:	4b2d      	ldr	r3, [pc, #180]	@ (8005f9c <HAL_UART_MspInit+0x168>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005eec:	4b2b      	ldr	r3, [pc, #172]	@ (8005f9c <HAL_UART_MspInit+0x168>)
 8005eee:	2280      	movs	r2, #128	@ 0x80
 8005ef0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8005f9c <HAL_UART_MspInit+0x168>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ef8:	4b28      	ldr	r3, [pc, #160]	@ (8005f9c <HAL_UART_MspInit+0x168>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005efe:	4b27      	ldr	r3, [pc, #156]	@ (8005f9c <HAL_UART_MspInit+0x168>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005f04:	4b25      	ldr	r3, [pc, #148]	@ (8005f9c <HAL_UART_MspInit+0x168>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005f0a:	4824      	ldr	r0, [pc, #144]	@ (8005f9c <HAL_UART_MspInit+0x168>)
 8005f0c:	f000 fab8 	bl	8006480 <HAL_DMA_Init>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8005f16:	f7ff fd99 	bl	8005a4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8005f9c <HAL_UART_MspInit+0x168>)
 8005f1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005f22:	4a1e      	ldr	r2, [pc, #120]	@ (8005f9c <HAL_UART_MspInit+0x168>)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8005f28:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa4 <HAL_UART_MspInit+0x170>)
 8005f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa8 <HAL_UART_MspInit+0x174>)
 8005f2c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa4 <HAL_UART_MspInit+0x170>)
 8005f30:	221b      	movs	r2, #27
 8005f32:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f34:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa4 <HAL_UART_MspInit+0x170>)
 8005f36:	2210      	movs	r2, #16
 8005f38:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005fa4 <HAL_UART_MspInit+0x170>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005f40:	4b18      	ldr	r3, [pc, #96]	@ (8005fa4 <HAL_UART_MspInit+0x170>)
 8005f42:	2280      	movs	r2, #128	@ 0x80
 8005f44:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f46:	4b17      	ldr	r3, [pc, #92]	@ (8005fa4 <HAL_UART_MspInit+0x170>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f4c:	4b15      	ldr	r3, [pc, #84]	@ (8005fa4 <HAL_UART_MspInit+0x170>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005f52:	4b14      	ldr	r3, [pc, #80]	@ (8005fa4 <HAL_UART_MspInit+0x170>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005f58:	4b12      	ldr	r3, [pc, #72]	@ (8005fa4 <HAL_UART_MspInit+0x170>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005f5e:	4811      	ldr	r0, [pc, #68]	@ (8005fa4 <HAL_UART_MspInit+0x170>)
 8005f60:	f000 fa8e 	bl	8006480 <HAL_DMA_Init>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8005f6a:	f7ff fd6f 	bl	8005a4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a0c      	ldr	r2, [pc, #48]	@ (8005fa4 <HAL_UART_MspInit+0x170>)
 8005f72:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005f74:	4a0b      	ldr	r2, [pc, #44]	@ (8005fa4 <HAL_UART_MspInit+0x170>)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	2026      	movs	r0, #38	@ 0x26
 8005f80:	f000 fa49 	bl	8006416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f84:	2026      	movs	r0, #38	@ 0x26
 8005f86:	f000 fa60 	bl	800644a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8005f8a:	bf00      	nop
 8005f8c:	3778      	adds	r7, #120	@ 0x78
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40004400 	.word	0x40004400
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	200009dc 	.word	0x200009dc
 8005fa0:	40020008 	.word	0x40020008
 8005fa4:	20000a3c 	.word	0x20000a3c
 8005fa8:	4002001c 	.word	0x4002001c

08005fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005fb0:	bf00      	nop
 8005fb2:	e7fd      	b.n	8005fb0 <NMI_Handler+0x4>

08005fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005fb8:	bf00      	nop
 8005fba:	e7fd      	b.n	8005fb8 <HardFault_Handler+0x4>

08005fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005fc0:	bf00      	nop
 8005fc2:	e7fd      	b.n	8005fc0 <MemManage_Handler+0x4>

08005fc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005fc8:	bf00      	nop
 8005fca:	e7fd      	b.n	8005fc8 <BusFault_Handler+0x4>

08005fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005fd0:	bf00      	nop
 8005fd2:	e7fd      	b.n	8005fd0 <UsageFault_Handler+0x4>

08005fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005fd8:	bf00      	nop
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005fe6:	bf00      	nop
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ff4:	bf00      	nop
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006002:	f000 f90f 	bl	8006224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006006:	bf00      	nop
 8006008:	bd80      	pop	{r7, pc}

0800600a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800600e:	2001      	movs	r0, #1
 8006010:	f000 ff1a 	bl	8006e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006014:	bf00      	nop
 8006016:	bd80      	pop	{r7, pc}

08006018 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800601c:	2004      	movs	r0, #4
 800601e:	f000 ff13 	bl	8006e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006022:	bf00      	nop
 8006024:	bd80      	pop	{r7, pc}

08006026 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800602a:	2008      	movs	r0, #8
 800602c:	f000 ff0c 	bl	8006e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8006030:	bf00      	nop
 8006032:	bd80      	pop	{r7, pc}

08006034 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006038:	4802      	ldr	r0, [pc, #8]	@ (8006044 <DMA1_Channel1_IRQHandler+0x10>)
 800603a:	f000 fc04 	bl	8006846 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800603e:	bf00      	nop
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	200009dc 	.word	0x200009dc

08006048 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800604c:	4802      	ldr	r0, [pc, #8]	@ (8006058 <DMA1_Channel2_IRQHandler+0x10>)
 800604e:	f000 fbfa 	bl	8006846 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006052:	bf00      	nop
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20000a3c 	.word	0x20000a3c

0800605c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006060:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006064:	f000 fef0 	bl	8006e48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8006068:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800606c:	f000 feec 	bl	8006e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006070:	bf00      	nop
 8006072:	bd80      	pop	{r7, pc}

08006074 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006078:	4803      	ldr	r0, [pc, #12]	@ (8006088 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800607a:	f002 fd99 	bl	8008bb0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800607e:	4803      	ldr	r0, [pc, #12]	@ (800608c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8006080:	f002 fd96 	bl	8008bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006084:	bf00      	nop
 8006086:	bd80      	pop	{r7, pc}
 8006088:	200002b0 	.word	0x200002b0
 800608c:	20000844 	.word	0x20000844

08006090 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006094:	4802      	ldr	r0, [pc, #8]	@ (80060a0 <TIM3_IRQHandler+0x10>)
 8006096:	f002 fd8b 	bl	8008bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800609a:	bf00      	nop
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20000448 	.word	0x20000448

080060a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80060a8:	4802      	ldr	r0, [pc, #8]	@ (80060b4 <TIM4_IRQHandler+0x10>)
 80060aa:	f002 fd81 	bl	8008bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80060ae:	bf00      	nop
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000514 	.word	0x20000514

080060b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80060bc:	4802      	ldr	r0, [pc, #8]	@ (80060c8 <USART2_IRQHandler+0x10>)
 80060be:	f004 fe33 	bl	800ad28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80060c2:	bf00      	nop
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000910 	.word	0x20000910

080060cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80060d0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80060d4:	f000 feb8 	bl	8006e48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80060d8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80060dc:	f000 feb4 	bl	8006e48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80060e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80060e4:	f000 feb0 	bl	8006e48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80060e8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80060ec:	f000 feac 	bl	8006e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80060f0:	bf00      	nop
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80060f8:	4802      	ldr	r0, [pc, #8]	@ (8006104 <TIM5_IRQHandler+0x10>)
 80060fa:	f002 fd59 	bl	8008bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80060fe:	bf00      	nop
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	200005e0 	.word	0x200005e0

08006108 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800610c:	4b06      	ldr	r3, [pc, #24]	@ (8006128 <SystemInit+0x20>)
 800610e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006112:	4a05      	ldr	r2, [pc, #20]	@ (8006128 <SystemInit+0x20>)
 8006114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800611c:	bf00      	nop
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	e000ed00 	.word	0xe000ed00

0800612c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800612c:	480d      	ldr	r0, [pc, #52]	@ (8006164 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800612e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006130:	f7ff ffea 	bl	8006108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006134:	480c      	ldr	r0, [pc, #48]	@ (8006168 <LoopForever+0x6>)
  ldr r1, =_edata
 8006136:	490d      	ldr	r1, [pc, #52]	@ (800616c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006138:	4a0d      	ldr	r2, [pc, #52]	@ (8006170 <LoopForever+0xe>)
  movs r3, #0
 800613a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800613c:	e002      	b.n	8006144 <LoopCopyDataInit>

0800613e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800613e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006142:	3304      	adds	r3, #4

08006144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006148:	d3f9      	bcc.n	800613e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800614a:	4a0a      	ldr	r2, [pc, #40]	@ (8006174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800614c:	4c0a      	ldr	r4, [pc, #40]	@ (8006178 <LoopForever+0x16>)
  movs r3, #0
 800614e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006150:	e001      	b.n	8006156 <LoopFillZerobss>

08006152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006154:	3204      	adds	r2, #4

08006156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006158:	d3fb      	bcc.n	8006152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800615a:	f006 fb53 	bl	800c804 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800615e:	f7fb fe6b 	bl	8001e38 <main>

08006162 <LoopForever>:

LoopForever:
    b LoopForever
 8006162:	e7fe      	b.n	8006162 <LoopForever>
  ldr   r0, =_estack
 8006164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800616c:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8006170:	08023d00 	.word	0x08023d00
  ldr r2, =_sbss
 8006174:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8006178:	2000158c 	.word	0x2000158c

0800617c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800617c:	e7fe      	b.n	800617c <ADC1_2_IRQHandler>

0800617e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006188:	2003      	movs	r0, #3
 800618a:	f000 f939 	bl	8006400 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800618e:	2000      	movs	r0, #0
 8006190:	f000 f80e 	bl	80061b0 <HAL_InitTick>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	71fb      	strb	r3, [r7, #7]
 800619e:	e001      	b.n	80061a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80061a0:	f7ff fc5a 	bl	8005a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80061a4:	79fb      	ldrb	r3, [r7, #7]

}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80061bc:	4b16      	ldr	r3, [pc, #88]	@ (8006218 <HAL_InitTick+0x68>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d022      	beq.n	800620a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80061c4:	4b15      	ldr	r3, [pc, #84]	@ (800621c <HAL_InitTick+0x6c>)
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	4b13      	ldr	r3, [pc, #76]	@ (8006218 <HAL_InitTick+0x68>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80061d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80061d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 f944 	bl	8006466 <HAL_SYSTICK_Config>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10f      	bne.n	8006204 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b0f      	cmp	r3, #15
 80061e8:	d809      	bhi.n	80061fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061ea:	2200      	movs	r2, #0
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	f04f 30ff 	mov.w	r0, #4294967295
 80061f2:	f000 f910 	bl	8006416 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80061f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006220 <HAL_InitTick+0x70>)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	e007      	b.n	800620e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	73fb      	strb	r3, [r7, #15]
 8006202:	e004      	b.n	800620e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	73fb      	strb	r3, [r7, #15]
 8006208:	e001      	b.n	800620e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800620e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	20000238 	.word	0x20000238
 800621c:	20000230 	.word	0x20000230
 8006220:	20000234 	.word	0x20000234

08006224 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006228:	4b05      	ldr	r3, [pc, #20]	@ (8006240 <HAL_IncTick+0x1c>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	4b05      	ldr	r3, [pc, #20]	@ (8006244 <HAL_IncTick+0x20>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4413      	add	r3, r2
 8006232:	4a03      	ldr	r2, [pc, #12]	@ (8006240 <HAL_IncTick+0x1c>)
 8006234:	6013      	str	r3, [r2, #0]
}
 8006236:	bf00      	nop
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	20001450 	.word	0x20001450
 8006244:	20000238 	.word	0x20000238

08006248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  return uwTick;
 800624c:	4b03      	ldr	r3, [pc, #12]	@ (800625c <HAL_GetTick+0x14>)
 800624e:	681b      	ldr	r3, [r3, #0]
}
 8006250:	4618      	mov	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	20001450 	.word	0x20001450

08006260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006270:	4b0c      	ldr	r3, [pc, #48]	@ (80062a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800627c:	4013      	ands	r3, r2
 800627e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800628c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006292:	4a04      	ldr	r2, [pc, #16]	@ (80062a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	60d3      	str	r3, [r2, #12]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	e000ed00 	.word	0xe000ed00

080062a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062ac:	4b04      	ldr	r3, [pc, #16]	@ (80062c0 <__NVIC_GetPriorityGrouping+0x18>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	0a1b      	lsrs	r3, r3, #8
 80062b2:	f003 0307 	and.w	r3, r3, #7
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	e000ed00 	.word	0xe000ed00

080062c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	db0b      	blt.n	80062ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	f003 021f 	and.w	r2, r3, #31
 80062dc:	4907      	ldr	r1, [pc, #28]	@ (80062fc <__NVIC_EnableIRQ+0x38>)
 80062de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	2001      	movs	r0, #1
 80062e6:	fa00 f202 	lsl.w	r2, r0, r2
 80062ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	e000e100 	.word	0xe000e100

08006300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	4603      	mov	r3, r0
 8006308:	6039      	str	r1, [r7, #0]
 800630a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800630c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006310:	2b00      	cmp	r3, #0
 8006312:	db0a      	blt.n	800632a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	b2da      	uxtb	r2, r3
 8006318:	490c      	ldr	r1, [pc, #48]	@ (800634c <__NVIC_SetPriority+0x4c>)
 800631a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800631e:	0112      	lsls	r2, r2, #4
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	440b      	add	r3, r1
 8006324:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006328:	e00a      	b.n	8006340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	b2da      	uxtb	r2, r3
 800632e:	4908      	ldr	r1, [pc, #32]	@ (8006350 <__NVIC_SetPriority+0x50>)
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	3b04      	subs	r3, #4
 8006338:	0112      	lsls	r2, r2, #4
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	440b      	add	r3, r1
 800633e:	761a      	strb	r2, [r3, #24]
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	e000e100 	.word	0xe000e100
 8006350:	e000ed00 	.word	0xe000ed00

08006354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006354:	b480      	push	{r7}
 8006356:	b089      	sub	sp, #36	@ 0x24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	f1c3 0307 	rsb	r3, r3, #7
 800636e:	2b04      	cmp	r3, #4
 8006370:	bf28      	it	cs
 8006372:	2304      	movcs	r3, #4
 8006374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	3304      	adds	r3, #4
 800637a:	2b06      	cmp	r3, #6
 800637c:	d902      	bls.n	8006384 <NVIC_EncodePriority+0x30>
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	3b03      	subs	r3, #3
 8006382:	e000      	b.n	8006386 <NVIC_EncodePriority+0x32>
 8006384:	2300      	movs	r3, #0
 8006386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006388:	f04f 32ff 	mov.w	r2, #4294967295
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	43da      	mvns	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	401a      	ands	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800639c:	f04f 31ff 	mov.w	r1, #4294967295
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	fa01 f303 	lsl.w	r3, r1, r3
 80063a6:	43d9      	mvns	r1, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063ac:	4313      	orrs	r3, r2
         );
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3724      	adds	r7, #36	@ 0x24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063cc:	d301      	bcc.n	80063d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063ce:	2301      	movs	r3, #1
 80063d0:	e00f      	b.n	80063f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063d2:	4a0a      	ldr	r2, [pc, #40]	@ (80063fc <SysTick_Config+0x40>)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063da:	210f      	movs	r1, #15
 80063dc:	f04f 30ff 	mov.w	r0, #4294967295
 80063e0:	f7ff ff8e 	bl	8006300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063e4:	4b05      	ldr	r3, [pc, #20]	@ (80063fc <SysTick_Config+0x40>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063ea:	4b04      	ldr	r3, [pc, #16]	@ (80063fc <SysTick_Config+0x40>)
 80063ec:	2207      	movs	r2, #7
 80063ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	e000e010 	.word	0xe000e010

08006400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff ff29 	bl	8006260 <__NVIC_SetPriorityGrouping>
}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b086      	sub	sp, #24
 800641a:	af00      	add	r7, sp, #0
 800641c:	4603      	mov	r3, r0
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	607a      	str	r2, [r7, #4]
 8006422:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006424:	f7ff ff40 	bl	80062a8 <__NVIC_GetPriorityGrouping>
 8006428:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	68b9      	ldr	r1, [r7, #8]
 800642e:	6978      	ldr	r0, [r7, #20]
 8006430:	f7ff ff90 	bl	8006354 <NVIC_EncodePriority>
 8006434:	4602      	mov	r2, r0
 8006436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800643a:	4611      	mov	r1, r2
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff ff5f 	bl	8006300 <__NVIC_SetPriority>
}
 8006442:	bf00      	nop
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	4603      	mov	r3, r0
 8006452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff ff33 	bl	80062c4 <__NVIC_EnableIRQ>
}
 800645e:	bf00      	nop
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff ffa4 	bl	80063bc <SysTick_Config>
 8006474:	4603      	mov	r3, r0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e08d      	b.n	80065ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	4b47      	ldr	r3, [pc, #284]	@ (80065b8 <HAL_DMA_Init+0x138>)
 800649a:	429a      	cmp	r2, r3
 800649c:	d80f      	bhi.n	80064be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	4b45      	ldr	r3, [pc, #276]	@ (80065bc <HAL_DMA_Init+0x13c>)
 80064a6:	4413      	add	r3, r2
 80064a8:	4a45      	ldr	r2, [pc, #276]	@ (80065c0 <HAL_DMA_Init+0x140>)
 80064aa:	fba2 2303 	umull	r2, r3, r2, r3
 80064ae:	091b      	lsrs	r3, r3, #4
 80064b0:	009a      	lsls	r2, r3, #2
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a42      	ldr	r2, [pc, #264]	@ (80065c4 <HAL_DMA_Init+0x144>)
 80064ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80064bc:	e00e      	b.n	80064dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	4b40      	ldr	r3, [pc, #256]	@ (80065c8 <HAL_DMA_Init+0x148>)
 80064c6:	4413      	add	r3, r2
 80064c8:	4a3d      	ldr	r2, [pc, #244]	@ (80065c0 <HAL_DMA_Init+0x140>)
 80064ca:	fba2 2303 	umull	r2, r3, r2, r3
 80064ce:	091b      	lsrs	r3, r3, #4
 80064d0:	009a      	lsls	r2, r3, #2
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a3c      	ldr	r2, [pc, #240]	@ (80065cc <HAL_DMA_Init+0x14c>)
 80064da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80064f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006500:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800650c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006518:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fa76 	bl	8006a20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800653c:	d102      	bne.n	8006544 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800654c:	b2d2      	uxtb	r2, r2
 800654e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006558:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d010      	beq.n	8006584 <HAL_DMA_Init+0x104>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2b04      	cmp	r3, #4
 8006568:	d80c      	bhi.n	8006584 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fa96 	bl	8006a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006580:	605a      	str	r2, [r3, #4]
 8006582:	e008      	b.n	8006596 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	40020407 	.word	0x40020407
 80065bc:	bffdfff8 	.word	0xbffdfff8
 80065c0:	cccccccd 	.word	0xcccccccd
 80065c4:	40020000 	.word	0x40020000
 80065c8:	bffdfbf8 	.word	0xbffdfbf8
 80065cc:	40020400 	.word	0x40020400

080065d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_DMA_Start_IT+0x20>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e066      	b.n	80066be <HAL_DMA_Start_IT+0xee>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b01      	cmp	r3, #1
 8006602:	d155      	bne.n	80066b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0201 	bic.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f9bb 	bl	80069a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006632:	2b00      	cmp	r3, #0
 8006634:	d008      	beq.n	8006648 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f042 020e 	orr.w	r2, r2, #14
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	e00f      	b.n	8006668 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0204 	bic.w	r2, r2, #4
 8006656:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 020a 	orr.w	r2, r2, #10
 8006666:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d007      	beq.n	8006686 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006680:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006684:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800668a:	2b00      	cmp	r3, #0
 800668c:	d007      	beq.n	800669e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006698:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800669c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0201 	orr.w	r2, r2, #1
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	e005      	b.n	80066bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80066b8:	2302      	movs	r3, #2
 80066ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b085      	sub	sp, #20
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d005      	beq.n	80066ea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2204      	movs	r2, #4
 80066e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
 80066e8:	e037      	b.n	800675a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 020e 	bic.w	r2, r2, #14
 80066f8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006704:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006708:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0201 	bic.w	r2, r2, #1
 8006718:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671e:	f003 021f 	and.w	r2, r3, #31
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006726:	2101      	movs	r1, #1
 8006728:	fa01 f202 	lsl.w	r2, r1, r2
 800672c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006736:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00c      	beq.n	800675a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800674e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006758:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800676a:	7bfb      	ldrb	r3, [r7, #15]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b02      	cmp	r3, #2
 800678e:	d00d      	beq.n	80067ac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2204      	movs	r2, #4
 8006794:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	73fb      	strb	r3, [r7, #15]
 80067aa:	e047      	b.n	800683c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 020e 	bic.w	r2, r2, #14
 80067ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0201 	bic.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e0:	f003 021f 	and.w	r2, r3, #31
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e8:	2101      	movs	r1, #1
 80067ea:	fa01 f202 	lsl.w	r2, r1, r2
 80067ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80067f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00c      	beq.n	800681c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800680c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006810:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800681a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	4798      	blx	r3
    }
  }
  return status;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006862:	f003 031f 	and.w	r3, r3, #31
 8006866:	2204      	movs	r2, #4
 8006868:	409a      	lsls	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4013      	ands	r3, r2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d026      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x7a>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d021      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	d107      	bne.n	800689a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0204 	bic.w	r2, r2, #4
 8006898:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689e:	f003 021f 	and.w	r2, r3, #31
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a6:	2104      	movs	r1, #4
 80068a8:	fa01 f202 	lsl.w	r2, r1, r2
 80068ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d071      	beq.n	800699a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80068be:	e06c      	b.n	800699a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	2202      	movs	r2, #2
 80068ca:	409a      	lsls	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4013      	ands	r3, r2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d02e      	beq.n	8006932 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d029      	beq.n	8006932 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10b      	bne.n	8006904 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 020a 	bic.w	r2, r2, #10
 80068fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006908:	f003 021f 	and.w	r2, r3, #31
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006910:	2102      	movs	r1, #2
 8006912:	fa01 f202 	lsl.w	r2, r1, r2
 8006916:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d038      	beq.n	800699a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006930:	e033      	b.n	800699a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	2208      	movs	r2, #8
 800693c:	409a      	lsls	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4013      	ands	r3, r2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d02a      	beq.n	800699c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f003 0308 	and.w	r3, r3, #8
 800694c:	2b00      	cmp	r3, #0
 800694e:	d025      	beq.n	800699c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 020e 	bic.w	r2, r2, #14
 800695e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006964:	f003 021f 	and.w	r2, r3, #31
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696c:	2101      	movs	r1, #1
 800696e:	fa01 f202 	lsl.w	r2, r1, r2
 8006972:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800698e:	2b00      	cmp	r3, #0
 8006990:	d004      	beq.n	800699c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800699a:	bf00      	nop
 800699c:	bf00      	nop
}
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80069ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d004      	beq.n	80069ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80069cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d2:	f003 021f 	and.w	r2, r3, #31
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069da:	2101      	movs	r1, #1
 80069dc:	fa01 f202 	lsl.w	r2, r1, r2
 80069e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	2b10      	cmp	r3, #16
 80069f0:	d108      	bne.n	8006a04 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006a02:	e007      	b.n	8006a14 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	60da      	str	r2, [r3, #12]
}
 8006a14:	bf00      	nop
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	4b16      	ldr	r3, [pc, #88]	@ (8006a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d802      	bhi.n	8006a3a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006a34:	4b15      	ldr	r3, [pc, #84]	@ (8006a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	e001      	b.n	8006a3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006a3a:	4b15      	ldr	r3, [pc, #84]	@ (8006a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006a3c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	3b08      	subs	r3, #8
 8006a4a:	4a12      	ldr	r2, [pc, #72]	@ (8006a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a50:	091b      	lsrs	r3, r3, #4
 8006a52:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a58:	089b      	lsrs	r3, r3, #2
 8006a5a:	009a      	lsls	r2, r3, #2
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	4413      	add	r3, r2
 8006a60:	461a      	mov	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a0b      	ldr	r2, [pc, #44]	@ (8006a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006a6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f003 031f 	and.w	r3, r3, #31
 8006a72:	2201      	movs	r2, #1
 8006a74:	409a      	lsls	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006a7a:	bf00      	nop
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40020407 	.word	0x40020407
 8006a8c:	40020800 	.word	0x40020800
 8006a90:	40020820 	.word	0x40020820
 8006a94:	cccccccd 	.word	0xcccccccd
 8006a98:	40020880 	.word	0x40020880

08006a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4b0b      	ldr	r3, [pc, #44]	@ (8006adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006ab0:	4413      	add	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a08      	ldr	r2, [pc, #32]	@ (8006ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006abe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	2201      	movs	r2, #1
 8006aca:	409a      	lsls	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006ad0:	bf00      	nop
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	1000823f 	.word	0x1000823f
 8006ae0:	40020940 	.word	0x40020940

08006ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006af2:	e15a      	b.n	8006daa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	2101      	movs	r1, #1
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	fa01 f303 	lsl.w	r3, r1, r3
 8006b00:	4013      	ands	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 814c 	beq.w	8006da4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f003 0303 	and.w	r3, r3, #3
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d005      	beq.n	8006b24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d130      	bne.n	8006b86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	2203      	movs	r2, #3
 8006b30:	fa02 f303 	lsl.w	r3, r2, r3
 8006b34:	43db      	mvns	r3, r3
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4013      	ands	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	fa02 f303 	lsl.w	r3, r2, r3
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b62:	43db      	mvns	r3, r3
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4013      	ands	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	091b      	lsrs	r3, r3, #4
 8006b70:	f003 0201 	and.w	r2, r3, #1
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d017      	beq.n	8006bc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	2203      	movs	r2, #3
 8006b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d123      	bne.n	8006c16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	08da      	lsrs	r2, r3, #3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	3208      	adds	r2, #8
 8006bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	220f      	movs	r2, #15
 8006be6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bea:	43db      	mvns	r3, r3
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	691a      	ldr	r2, [r3, #16]
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f003 0307 	and.w	r3, r3, #7
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	08da      	lsrs	r2, r3, #3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3208      	adds	r2, #8
 8006c10:	6939      	ldr	r1, [r7, #16]
 8006c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	2203      	movs	r2, #3
 8006c22:	fa02 f303 	lsl.w	r3, r2, r3
 8006c26:	43db      	mvns	r3, r3
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f003 0203 	and.w	r2, r3, #3
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 80a6 	beq.w	8006da4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c58:	4b5b      	ldr	r3, [pc, #364]	@ (8006dc8 <HAL_GPIO_Init+0x2e4>)
 8006c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c5c:	4a5a      	ldr	r2, [pc, #360]	@ (8006dc8 <HAL_GPIO_Init+0x2e4>)
 8006c5e:	f043 0301 	orr.w	r3, r3, #1
 8006c62:	6613      	str	r3, [r2, #96]	@ 0x60
 8006c64:	4b58      	ldr	r3, [pc, #352]	@ (8006dc8 <HAL_GPIO_Init+0x2e4>)
 8006c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	60bb      	str	r3, [r7, #8]
 8006c6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c70:	4a56      	ldr	r2, [pc, #344]	@ (8006dcc <HAL_GPIO_Init+0x2e8>)
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	089b      	lsrs	r3, r3, #2
 8006c76:	3302      	adds	r3, #2
 8006c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f003 0303 	and.w	r3, r3, #3
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	220f      	movs	r2, #15
 8006c88:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8c:	43db      	mvns	r3, r3
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	4013      	ands	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006c9a:	d01f      	beq.n	8006cdc <HAL_GPIO_Init+0x1f8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a4c      	ldr	r2, [pc, #304]	@ (8006dd0 <HAL_GPIO_Init+0x2ec>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d019      	beq.n	8006cd8 <HAL_GPIO_Init+0x1f4>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a4b      	ldr	r2, [pc, #300]	@ (8006dd4 <HAL_GPIO_Init+0x2f0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d013      	beq.n	8006cd4 <HAL_GPIO_Init+0x1f0>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a4a      	ldr	r2, [pc, #296]	@ (8006dd8 <HAL_GPIO_Init+0x2f4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00d      	beq.n	8006cd0 <HAL_GPIO_Init+0x1ec>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a49      	ldr	r2, [pc, #292]	@ (8006ddc <HAL_GPIO_Init+0x2f8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d007      	beq.n	8006ccc <HAL_GPIO_Init+0x1e8>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a48      	ldr	r2, [pc, #288]	@ (8006de0 <HAL_GPIO_Init+0x2fc>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d101      	bne.n	8006cc8 <HAL_GPIO_Init+0x1e4>
 8006cc4:	2305      	movs	r3, #5
 8006cc6:	e00a      	b.n	8006cde <HAL_GPIO_Init+0x1fa>
 8006cc8:	2306      	movs	r3, #6
 8006cca:	e008      	b.n	8006cde <HAL_GPIO_Init+0x1fa>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	e006      	b.n	8006cde <HAL_GPIO_Init+0x1fa>
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e004      	b.n	8006cde <HAL_GPIO_Init+0x1fa>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e002      	b.n	8006cde <HAL_GPIO_Init+0x1fa>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <HAL_GPIO_Init+0x1fa>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	f002 0203 	and.w	r2, r2, #3
 8006ce4:	0092      	lsls	r2, r2, #2
 8006ce6:	4093      	lsls	r3, r2
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cee:	4937      	ldr	r1, [pc, #220]	@ (8006dcc <HAL_GPIO_Init+0x2e8>)
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	089b      	lsrs	r3, r3, #2
 8006cf4:	3302      	adds	r3, #2
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cfc:	4b39      	ldr	r3, [pc, #228]	@ (8006de4 <HAL_GPIO_Init+0x300>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	43db      	mvns	r3, r3
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	4013      	ands	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d20:	4a30      	ldr	r2, [pc, #192]	@ (8006de4 <HAL_GPIO_Init+0x300>)
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006d26:	4b2f      	ldr	r3, [pc, #188]	@ (8006de4 <HAL_GPIO_Init+0x300>)
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	43db      	mvns	r3, r3
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	4013      	ands	r3, r2
 8006d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006d4a:	4a26      	ldr	r2, [pc, #152]	@ (8006de4 <HAL_GPIO_Init+0x300>)
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006d50:	4b24      	ldr	r3, [pc, #144]	@ (8006de4 <HAL_GPIO_Init+0x300>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006d74:	4a1b      	ldr	r2, [pc, #108]	@ (8006de4 <HAL_GPIO_Init+0x300>)
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006de4 <HAL_GPIO_Init+0x300>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	43db      	mvns	r3, r3
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4013      	ands	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006d9e:	4a11      	ldr	r2, [pc, #68]	@ (8006de4 <HAL_GPIO_Init+0x300>)
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	3301      	adds	r3, #1
 8006da8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	fa22 f303 	lsr.w	r3, r2, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f47f ae9d 	bne.w	8006af4 <HAL_GPIO_Init+0x10>
  }
}
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	40021000 	.word	0x40021000
 8006dcc:	40010000 	.word	0x40010000
 8006dd0:	48000400 	.word	0x48000400
 8006dd4:	48000800 	.word	0x48000800
 8006dd8:	48000c00 	.word	0x48000c00
 8006ddc:	48001000 	.word	0x48001000
 8006de0:	48001400 	.word	0x48001400
 8006de4:	40010400 	.word	0x40010400

08006de8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	887b      	ldrh	r3, [r7, #2]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e00:	2301      	movs	r3, #1
 8006e02:	73fb      	strb	r3, [r7, #15]
 8006e04:	e001      	b.n	8006e0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	807b      	strh	r3, [r7, #2]
 8006e24:	4613      	mov	r3, r2
 8006e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e28:	787b      	ldrb	r3, [r7, #1]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e2e:	887a      	ldrh	r2, [r7, #2]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e34:	e002      	b.n	8006e3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e36:	887a      	ldrh	r2, [r7, #2]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006e52:	4b08      	ldr	r3, [pc, #32]	@ (8006e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e54:	695a      	ldr	r2, [r3, #20]
 8006e56:	88fb      	ldrh	r3, [r7, #6]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d006      	beq.n	8006e6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e5e:	4a05      	ldr	r2, [pc, #20]	@ (8006e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e60:	88fb      	ldrh	r3, [r7, #6]
 8006e62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e64:	88fb      	ldrh	r3, [r7, #6]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fd fd62 	bl	8004930 <HAL_GPIO_EXTI_Callback>
  }
}
 8006e6c:	bf00      	nop
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40010400 	.word	0x40010400

08006e78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d141      	bne.n	8006f0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e86:	4b4b      	ldr	r3, [pc, #300]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e92:	d131      	bne.n	8006ef8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e94:	4b47      	ldr	r3, [pc, #284]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e9a:	4a46      	ldr	r2, [pc, #280]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ea0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ea4:	4b43      	ldr	r3, [pc, #268]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006eac:	4a41      	ldr	r2, [pc, #260]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006eb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006eb4:	4b40      	ldr	r3, [pc, #256]	@ (8006fb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2232      	movs	r2, #50	@ 0x32
 8006eba:	fb02 f303 	mul.w	r3, r2, r3
 8006ebe:	4a3f      	ldr	r2, [pc, #252]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec4:	0c9b      	lsrs	r3, r3, #18
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eca:	e002      	b.n	8006ed2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ed2:	4b38      	ldr	r3, [pc, #224]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ede:	d102      	bne.n	8006ee6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f2      	bne.n	8006ecc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ee6:	4b33      	ldr	r3, [pc, #204]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef2:	d158      	bne.n	8006fa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e057      	b.n	8006fa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006efe:	4a2d      	ldr	r2, [pc, #180]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006f08:	e04d      	b.n	8006fa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f10:	d141      	bne.n	8006f96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f12:	4b28      	ldr	r3, [pc, #160]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f1e:	d131      	bne.n	8006f84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f20:	4b24      	ldr	r3, [pc, #144]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f26:	4a23      	ldr	r2, [pc, #140]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f30:	4b20      	ldr	r3, [pc, #128]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f38:	4a1e      	ldr	r2, [pc, #120]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f40:	4b1d      	ldr	r3, [pc, #116]	@ (8006fb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2232      	movs	r2, #50	@ 0x32
 8006f46:	fb02 f303 	mul.w	r3, r2, r3
 8006f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8006fbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f50:	0c9b      	lsrs	r3, r3, #18
 8006f52:	3301      	adds	r3, #1
 8006f54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f56:	e002      	b.n	8006f5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f5e:	4b15      	ldr	r3, [pc, #84]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f6a:	d102      	bne.n	8006f72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f2      	bne.n	8006f58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f72:	4b10      	ldr	r3, [pc, #64]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f7e:	d112      	bne.n	8006fa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e011      	b.n	8006fa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f84:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006f94:	e007      	b.n	8006fa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f96:	4b07      	ldr	r3, [pc, #28]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f9e:	4a05      	ldr	r2, [pc, #20]	@ (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fa0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006fa4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	40007000 	.word	0x40007000
 8006fb8:	20000230 	.word	0x20000230
 8006fbc:	431bde83 	.word	0x431bde83

08006fc0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006fc4:	4b05      	ldr	r3, [pc, #20]	@ (8006fdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	4a04      	ldr	r2, [pc, #16]	@ (8006fdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006fca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fce:	6093      	str	r3, [r2, #8]
}
 8006fd0:	bf00      	nop
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	40007000 	.word	0x40007000

08006fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e2fe      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d075      	beq.n	80070ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ffe:	4b97      	ldr	r3, [pc, #604]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 030c 	and.w	r3, r3, #12
 8007006:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007008:	4b94      	ldr	r3, [pc, #592]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b0c      	cmp	r3, #12
 8007016:	d102      	bne.n	800701e <HAL_RCC_OscConfig+0x3e>
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2b03      	cmp	r3, #3
 800701c:	d002      	beq.n	8007024 <HAL_RCC_OscConfig+0x44>
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b08      	cmp	r3, #8
 8007022:	d10b      	bne.n	800703c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007024:	4b8d      	ldr	r3, [pc, #564]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d05b      	beq.n	80070e8 <HAL_RCC_OscConfig+0x108>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d157      	bne.n	80070e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e2d9      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007044:	d106      	bne.n	8007054 <HAL_RCC_OscConfig+0x74>
 8007046:	4b85      	ldr	r3, [pc, #532]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a84      	ldr	r2, [pc, #528]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 800704c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	e01d      	b.n	8007090 <HAL_RCC_OscConfig+0xb0>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800705c:	d10c      	bne.n	8007078 <HAL_RCC_OscConfig+0x98>
 800705e:	4b7f      	ldr	r3, [pc, #508]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a7e      	ldr	r2, [pc, #504]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 8007064:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	4b7c      	ldr	r3, [pc, #496]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a7b      	ldr	r2, [pc, #492]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 8007070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	e00b      	b.n	8007090 <HAL_RCC_OscConfig+0xb0>
 8007078:	4b78      	ldr	r3, [pc, #480]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a77      	ldr	r2, [pc, #476]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 800707e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	4b75      	ldr	r3, [pc, #468]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a74      	ldr	r2, [pc, #464]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 800708a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800708e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d013      	beq.n	80070c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007098:	f7ff f8d6 	bl	8006248 <HAL_GetTick>
 800709c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800709e:	e008      	b.n	80070b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070a0:	f7ff f8d2 	bl	8006248 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b64      	cmp	r3, #100	@ 0x64
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e29e      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070b2:	4b6a      	ldr	r3, [pc, #424]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0f0      	beq.n	80070a0 <HAL_RCC_OscConfig+0xc0>
 80070be:	e014      	b.n	80070ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c0:	f7ff f8c2 	bl	8006248 <HAL_GetTick>
 80070c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070c6:	e008      	b.n	80070da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070c8:	f7ff f8be 	bl	8006248 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b64      	cmp	r3, #100	@ 0x64
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e28a      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070da:	4b60      	ldr	r3, [pc, #384]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1f0      	bne.n	80070c8 <HAL_RCC_OscConfig+0xe8>
 80070e6:	e000      	b.n	80070ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d075      	beq.n	80071e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070f6:	4b59      	ldr	r3, [pc, #356]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 030c 	and.w	r3, r3, #12
 80070fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007100:	4b56      	ldr	r3, [pc, #344]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f003 0303 	and.w	r3, r3, #3
 8007108:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	2b0c      	cmp	r3, #12
 800710e:	d102      	bne.n	8007116 <HAL_RCC_OscConfig+0x136>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d002      	beq.n	800711c <HAL_RCC_OscConfig+0x13c>
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b04      	cmp	r3, #4
 800711a:	d11f      	bne.n	800715c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800711c:	4b4f      	ldr	r3, [pc, #316]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <HAL_RCC_OscConfig+0x154>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e25d      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007134:	4b49      	ldr	r3, [pc, #292]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	061b      	lsls	r3, r3, #24
 8007142:	4946      	ldr	r1, [pc, #280]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 8007144:	4313      	orrs	r3, r2
 8007146:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007148:	4b45      	ldr	r3, [pc, #276]	@ (8007260 <HAL_RCC_OscConfig+0x280>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4618      	mov	r0, r3
 800714e:	f7ff f82f 	bl	80061b0 <HAL_InitTick>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d043      	beq.n	80071e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e249      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d023      	beq.n	80071ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007164:	4b3d      	ldr	r3, [pc, #244]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a3c      	ldr	r2, [pc, #240]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 800716a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800716e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007170:	f7ff f86a 	bl	8006248 <HAL_GetTick>
 8007174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007178:	f7ff f866 	bl	8006248 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e232      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800718a:	4b34      	ldr	r3, [pc, #208]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0f0      	beq.n	8007178 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007196:	4b31      	ldr	r3, [pc, #196]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	061b      	lsls	r3, r3, #24
 80071a4:	492d      	ldr	r1, [pc, #180]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	604b      	str	r3, [r1, #4]
 80071aa:	e01a      	b.n	80071e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071ac:	4b2b      	ldr	r3, [pc, #172]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a2a      	ldr	r2, [pc, #168]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 80071b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b8:	f7ff f846 	bl	8006248 <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071c0:	f7ff f842 	bl	8006248 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e20e      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071d2:	4b22      	ldr	r3, [pc, #136]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1f0      	bne.n	80071c0 <HAL_RCC_OscConfig+0x1e0>
 80071de:	e000      	b.n	80071e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d041      	beq.n	8007272 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d01c      	beq.n	8007230 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071f6:	4b19      	ldr	r3, [pc, #100]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 80071f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071fc:	4a17      	ldr	r2, [pc, #92]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 80071fe:	f043 0301 	orr.w	r3, r3, #1
 8007202:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007206:	f7ff f81f 	bl	8006248 <HAL_GetTick>
 800720a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800720c:	e008      	b.n	8007220 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800720e:	f7ff f81b 	bl	8006248 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b02      	cmp	r3, #2
 800721a:	d901      	bls.n	8007220 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e1e7      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007220:	4b0e      	ldr	r3, [pc, #56]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 8007222:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0ef      	beq.n	800720e <HAL_RCC_OscConfig+0x22e>
 800722e:	e020      	b.n	8007272 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007230:	4b0a      	ldr	r3, [pc, #40]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 8007232:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007236:	4a09      	ldr	r2, [pc, #36]	@ (800725c <HAL_RCC_OscConfig+0x27c>)
 8007238:	f023 0301 	bic.w	r3, r3, #1
 800723c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007240:	f7ff f802 	bl	8006248 <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007246:	e00d      	b.n	8007264 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007248:	f7fe fffe 	bl	8006248 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d906      	bls.n	8007264 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e1ca      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
 800725a:	bf00      	nop
 800725c:	40021000 	.word	0x40021000
 8007260:	20000234 	.word	0x20000234
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007264:	4b8c      	ldr	r3, [pc, #560]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007266:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1ea      	bne.n	8007248 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0304 	and.w	r3, r3, #4
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 80a6 	beq.w	80073cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007280:	2300      	movs	r3, #0
 8007282:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007284:	4b84      	ldr	r3, [pc, #528]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <HAL_RCC_OscConfig+0x2b4>
 8007290:	2301      	movs	r3, #1
 8007292:	e000      	b.n	8007296 <HAL_RCC_OscConfig+0x2b6>
 8007294:	2300      	movs	r3, #0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00d      	beq.n	80072b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800729a:	4b7f      	ldr	r3, [pc, #508]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800729c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800729e:	4a7e      	ldr	r2, [pc, #504]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80072a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80072a6:	4b7c      	ldr	r3, [pc, #496]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80072a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80072b2:	2301      	movs	r3, #1
 80072b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072b6:	4b79      	ldr	r3, [pc, #484]	@ (800749c <HAL_RCC_OscConfig+0x4bc>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d118      	bne.n	80072f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072c2:	4b76      	ldr	r3, [pc, #472]	@ (800749c <HAL_RCC_OscConfig+0x4bc>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a75      	ldr	r2, [pc, #468]	@ (800749c <HAL_RCC_OscConfig+0x4bc>)
 80072c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072ce:	f7fe ffbb 	bl	8006248 <HAL_GetTick>
 80072d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072d4:	e008      	b.n	80072e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072d6:	f7fe ffb7 	bl	8006248 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e183      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072e8:	4b6c      	ldr	r3, [pc, #432]	@ (800749c <HAL_RCC_OscConfig+0x4bc>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0f0      	beq.n	80072d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d108      	bne.n	800730e <HAL_RCC_OscConfig+0x32e>
 80072fc:	4b66      	ldr	r3, [pc, #408]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80072fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007302:	4a65      	ldr	r2, [pc, #404]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007304:	f043 0301 	orr.w	r3, r3, #1
 8007308:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800730c:	e024      	b.n	8007358 <HAL_RCC_OscConfig+0x378>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	2b05      	cmp	r3, #5
 8007314:	d110      	bne.n	8007338 <HAL_RCC_OscConfig+0x358>
 8007316:	4b60      	ldr	r3, [pc, #384]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800731c:	4a5e      	ldr	r2, [pc, #376]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800731e:	f043 0304 	orr.w	r3, r3, #4
 8007322:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007326:	4b5c      	ldr	r3, [pc, #368]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800732c:	4a5a      	ldr	r2, [pc, #360]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800732e:	f043 0301 	orr.w	r3, r3, #1
 8007332:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007336:	e00f      	b.n	8007358 <HAL_RCC_OscConfig+0x378>
 8007338:	4b57      	ldr	r3, [pc, #348]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800733a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800733e:	4a56      	ldr	r2, [pc, #344]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007340:	f023 0301 	bic.w	r3, r3, #1
 8007344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007348:	4b53      	ldr	r3, [pc, #332]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800734a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800734e:	4a52      	ldr	r2, [pc, #328]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007350:	f023 0304 	bic.w	r3, r3, #4
 8007354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d016      	beq.n	800738e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007360:	f7fe ff72 	bl	8006248 <HAL_GetTick>
 8007364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007366:	e00a      	b.n	800737e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007368:	f7fe ff6e 	bl	8006248 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007376:	4293      	cmp	r3, r2
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e138      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800737e:	4b46      	ldr	r3, [pc, #280]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0ed      	beq.n	8007368 <HAL_RCC_OscConfig+0x388>
 800738c:	e015      	b.n	80073ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800738e:	f7fe ff5b 	bl	8006248 <HAL_GetTick>
 8007392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007394:	e00a      	b.n	80073ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007396:	f7fe ff57 	bl	8006248 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d901      	bls.n	80073ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e121      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073ac:	4b3a      	ldr	r3, [pc, #232]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80073ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1ed      	bne.n	8007396 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073ba:	7ffb      	ldrb	r3, [r7, #31]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d105      	bne.n	80073cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073c0:	4b35      	ldr	r3, [pc, #212]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80073c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c4:	4a34      	ldr	r2, [pc, #208]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80073c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0320 	and.w	r3, r3, #32
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d03c      	beq.n	8007452 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01c      	beq.n	800741a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073e0:	4b2d      	ldr	r3, [pc, #180]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80073e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073e6:	4a2c      	ldr	r2, [pc, #176]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80073e8:	f043 0301 	orr.w	r3, r3, #1
 80073ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f0:	f7fe ff2a 	bl	8006248 <HAL_GetTick>
 80073f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073f6:	e008      	b.n	800740a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073f8:	f7fe ff26 	bl	8006248 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	2b02      	cmp	r3, #2
 8007404:	d901      	bls.n	800740a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e0f2      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800740a:	4b23      	ldr	r3, [pc, #140]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800740c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0ef      	beq.n	80073f8 <HAL_RCC_OscConfig+0x418>
 8007418:	e01b      	b.n	8007452 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800741a:	4b1f      	ldr	r3, [pc, #124]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800741c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007420:	4a1d      	ldr	r2, [pc, #116]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007422:	f023 0301 	bic.w	r3, r3, #1
 8007426:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742a:	f7fe ff0d 	bl	8006248 <HAL_GetTick>
 800742e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007430:	e008      	b.n	8007444 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007432:	f7fe ff09 	bl	8006248 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d901      	bls.n	8007444 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e0d5      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007444:	4b14      	ldr	r3, [pc, #80]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007446:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1ef      	bne.n	8007432 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 80c9 	beq.w	80075ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800745c:	4b0e      	ldr	r3, [pc, #56]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f003 030c 	and.w	r3, r3, #12
 8007464:	2b0c      	cmp	r3, #12
 8007466:	f000 8083 	beq.w	8007570 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	2b02      	cmp	r3, #2
 8007470:	d15e      	bne.n	8007530 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007472:	4b09      	ldr	r3, [pc, #36]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a08      	ldr	r2, [pc, #32]	@ (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007478:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800747c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800747e:	f7fe fee3 	bl	8006248 <HAL_GetTick>
 8007482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007484:	e00c      	b.n	80074a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007486:	f7fe fedf 	bl	8006248 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d905      	bls.n	80074a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e0ab      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
 8007498:	40021000 	.word	0x40021000
 800749c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a0:	4b55      	ldr	r3, [pc, #340]	@ (80075f8 <HAL_RCC_OscConfig+0x618>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1ec      	bne.n	8007486 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074ac:	4b52      	ldr	r3, [pc, #328]	@ (80075f8 <HAL_RCC_OscConfig+0x618>)
 80074ae:	68da      	ldr	r2, [r3, #12]
 80074b0:	4b52      	ldr	r3, [pc, #328]	@ (80075fc <HAL_RCC_OscConfig+0x61c>)
 80074b2:	4013      	ands	r3, r2
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	6a11      	ldr	r1, [r2, #32]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074bc:	3a01      	subs	r2, #1
 80074be:	0112      	lsls	r2, r2, #4
 80074c0:	4311      	orrs	r1, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80074c6:	0212      	lsls	r2, r2, #8
 80074c8:	4311      	orrs	r1, r2
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80074ce:	0852      	lsrs	r2, r2, #1
 80074d0:	3a01      	subs	r2, #1
 80074d2:	0552      	lsls	r2, r2, #21
 80074d4:	4311      	orrs	r1, r2
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80074da:	0852      	lsrs	r2, r2, #1
 80074dc:	3a01      	subs	r2, #1
 80074de:	0652      	lsls	r2, r2, #25
 80074e0:	4311      	orrs	r1, r2
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80074e6:	06d2      	lsls	r2, r2, #27
 80074e8:	430a      	orrs	r2, r1
 80074ea:	4943      	ldr	r1, [pc, #268]	@ (80075f8 <HAL_RCC_OscConfig+0x618>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074f0:	4b41      	ldr	r3, [pc, #260]	@ (80075f8 <HAL_RCC_OscConfig+0x618>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a40      	ldr	r2, [pc, #256]	@ (80075f8 <HAL_RCC_OscConfig+0x618>)
 80074f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074fc:	4b3e      	ldr	r3, [pc, #248]	@ (80075f8 <HAL_RCC_OscConfig+0x618>)
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	4a3d      	ldr	r2, [pc, #244]	@ (80075f8 <HAL_RCC_OscConfig+0x618>)
 8007502:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007506:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007508:	f7fe fe9e 	bl	8006248 <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007510:	f7fe fe9a 	bl	8006248 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e066      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007522:	4b35      	ldr	r3, [pc, #212]	@ (80075f8 <HAL_RCC_OscConfig+0x618>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0f0      	beq.n	8007510 <HAL_RCC_OscConfig+0x530>
 800752e:	e05e      	b.n	80075ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007530:	4b31      	ldr	r3, [pc, #196]	@ (80075f8 <HAL_RCC_OscConfig+0x618>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a30      	ldr	r2, [pc, #192]	@ (80075f8 <HAL_RCC_OscConfig+0x618>)
 8007536:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800753a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753c:	f7fe fe84 	bl	8006248 <HAL_GetTick>
 8007540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007542:	e008      	b.n	8007556 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007544:	f7fe fe80 	bl	8006248 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b02      	cmp	r3, #2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e04c      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007556:	4b28      	ldr	r3, [pc, #160]	@ (80075f8 <HAL_RCC_OscConfig+0x618>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1f0      	bne.n	8007544 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007562:	4b25      	ldr	r3, [pc, #148]	@ (80075f8 <HAL_RCC_OscConfig+0x618>)
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	4924      	ldr	r1, [pc, #144]	@ (80075f8 <HAL_RCC_OscConfig+0x618>)
 8007568:	4b25      	ldr	r3, [pc, #148]	@ (8007600 <HAL_RCC_OscConfig+0x620>)
 800756a:	4013      	ands	r3, r2
 800756c:	60cb      	str	r3, [r1, #12]
 800756e:	e03e      	b.n	80075ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d101      	bne.n	800757c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e039      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800757c:	4b1e      	ldr	r3, [pc, #120]	@ (80075f8 <HAL_RCC_OscConfig+0x618>)
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f003 0203 	and.w	r2, r3, #3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	429a      	cmp	r2, r3
 800758e:	d12c      	bne.n	80075ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759a:	3b01      	subs	r3, #1
 800759c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800759e:	429a      	cmp	r2, r3
 80075a0:	d123      	bne.n	80075ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d11b      	bne.n	80075ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80075be:	429a      	cmp	r2, r3
 80075c0:	d113      	bne.n	80075ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075cc:	085b      	lsrs	r3, r3, #1
 80075ce:	3b01      	subs	r3, #1
 80075d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d109      	bne.n	80075ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e0:	085b      	lsrs	r3, r3, #1
 80075e2:	3b01      	subs	r3, #1
 80075e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d001      	beq.n	80075ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e000      	b.n	80075f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3720      	adds	r7, #32
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	40021000 	.word	0x40021000
 80075fc:	019f800c 	.word	0x019f800c
 8007600:	feeefffc 	.word	0xfeeefffc

08007604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800760e:	2300      	movs	r3, #0
 8007610:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e11e      	b.n	800785a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800761c:	4b91      	ldr	r3, [pc, #580]	@ (8007864 <HAL_RCC_ClockConfig+0x260>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 030f 	and.w	r3, r3, #15
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d910      	bls.n	800764c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800762a:	4b8e      	ldr	r3, [pc, #568]	@ (8007864 <HAL_RCC_ClockConfig+0x260>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f023 020f 	bic.w	r2, r3, #15
 8007632:	498c      	ldr	r1, [pc, #560]	@ (8007864 <HAL_RCC_ClockConfig+0x260>)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	4313      	orrs	r3, r2
 8007638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800763a:	4b8a      	ldr	r3, [pc, #552]	@ (8007864 <HAL_RCC_ClockConfig+0x260>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d001      	beq.n	800764c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e106      	b.n	800785a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d073      	beq.n	8007740 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b03      	cmp	r3, #3
 800765e:	d129      	bne.n	80076b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007660:	4b81      	ldr	r3, [pc, #516]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e0f4      	b.n	800785a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007670:	f000 f99e 	bl	80079b0 <RCC_GetSysClockFreqFromPLLSource>
 8007674:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	4a7c      	ldr	r2, [pc, #496]	@ (800786c <HAL_RCC_ClockConfig+0x268>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d93f      	bls.n	80076fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800767e:	4b7a      	ldr	r3, [pc, #488]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d009      	beq.n	800769e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007692:	2b00      	cmp	r3, #0
 8007694:	d033      	beq.n	80076fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800769a:	2b00      	cmp	r3, #0
 800769c:	d12f      	bne.n	80076fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800769e:	4b72      	ldr	r3, [pc, #456]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076a6:	4a70      	ldr	r2, [pc, #448]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 80076a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80076ae:	2380      	movs	r3, #128	@ 0x80
 80076b0:	617b      	str	r3, [r7, #20]
 80076b2:	e024      	b.n	80076fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d107      	bne.n	80076cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076bc:	4b6a      	ldr	r3, [pc, #424]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d109      	bne.n	80076dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e0c6      	b.n	800785a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076cc:	4b66      	ldr	r3, [pc, #408]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e0be      	b.n	800785a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80076dc:	f000 f8ce 	bl	800787c <HAL_RCC_GetSysClockFreq>
 80076e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	4a61      	ldr	r2, [pc, #388]	@ (800786c <HAL_RCC_ClockConfig+0x268>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d909      	bls.n	80076fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80076ea:	4b5f      	ldr	r3, [pc, #380]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076f2:	4a5d      	ldr	r2, [pc, #372]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 80076f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80076fa:	2380      	movs	r3, #128	@ 0x80
 80076fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076fe:	4b5a      	ldr	r3, [pc, #360]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f023 0203 	bic.w	r2, r3, #3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	4957      	ldr	r1, [pc, #348]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 800770c:	4313      	orrs	r3, r2
 800770e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007710:	f7fe fd9a 	bl	8006248 <HAL_GetTick>
 8007714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007716:	e00a      	b.n	800772e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007718:	f7fe fd96 	bl	8006248 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007726:	4293      	cmp	r3, r2
 8007728:	d901      	bls.n	800772e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e095      	b.n	800785a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800772e:	4b4e      	ldr	r3, [pc, #312]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f003 020c 	and.w	r2, r3, #12
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	429a      	cmp	r2, r3
 800773e:	d1eb      	bne.n	8007718 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d023      	beq.n	8007794 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007758:	4b43      	ldr	r3, [pc, #268]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	4a42      	ldr	r2, [pc, #264]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 800775e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007762:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d007      	beq.n	8007780 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007770:	4b3d      	ldr	r3, [pc, #244]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007778:	4a3b      	ldr	r2, [pc, #236]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 800777a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800777e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007780:	4b39      	ldr	r3, [pc, #228]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	4936      	ldr	r1, [pc, #216]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 800778e:	4313      	orrs	r3, r2
 8007790:	608b      	str	r3, [r1, #8]
 8007792:	e008      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2b80      	cmp	r3, #128	@ 0x80
 8007798:	d105      	bne.n	80077a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800779a:	4b33      	ldr	r3, [pc, #204]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	4a32      	ldr	r2, [pc, #200]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 80077a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077a6:	4b2f      	ldr	r3, [pc, #188]	@ (8007864 <HAL_RCC_ClockConfig+0x260>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 030f 	and.w	r3, r3, #15
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d21d      	bcs.n	80077f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077b4:	4b2b      	ldr	r3, [pc, #172]	@ (8007864 <HAL_RCC_ClockConfig+0x260>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f023 020f 	bic.w	r2, r3, #15
 80077bc:	4929      	ldr	r1, [pc, #164]	@ (8007864 <HAL_RCC_ClockConfig+0x260>)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80077c4:	f7fe fd40 	bl	8006248 <HAL_GetTick>
 80077c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ca:	e00a      	b.n	80077e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077cc:	f7fe fd3c 	bl	8006248 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077da:	4293      	cmp	r3, r2
 80077dc:	d901      	bls.n	80077e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e03b      	b.n	800785a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077e2:	4b20      	ldr	r3, [pc, #128]	@ (8007864 <HAL_RCC_ClockConfig+0x260>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 030f 	and.w	r3, r3, #15
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d1ed      	bne.n	80077cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d008      	beq.n	800780e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	4917      	ldr	r1, [pc, #92]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 800780a:	4313      	orrs	r3, r2
 800780c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0308 	and.w	r3, r3, #8
 8007816:	2b00      	cmp	r3, #0
 8007818:	d009      	beq.n	800782e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800781a:	4b13      	ldr	r3, [pc, #76]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	490f      	ldr	r1, [pc, #60]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 800782a:	4313      	orrs	r3, r2
 800782c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800782e:	f000 f825 	bl	800787c <HAL_RCC_GetSysClockFreq>
 8007832:	4602      	mov	r2, r0
 8007834:	4b0c      	ldr	r3, [pc, #48]	@ (8007868 <HAL_RCC_ClockConfig+0x264>)
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	091b      	lsrs	r3, r3, #4
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	490c      	ldr	r1, [pc, #48]	@ (8007870 <HAL_RCC_ClockConfig+0x26c>)
 8007840:	5ccb      	ldrb	r3, [r1, r3]
 8007842:	f003 031f 	and.w	r3, r3, #31
 8007846:	fa22 f303 	lsr.w	r3, r2, r3
 800784a:	4a0a      	ldr	r2, [pc, #40]	@ (8007874 <HAL_RCC_ClockConfig+0x270>)
 800784c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800784e:	4b0a      	ldr	r3, [pc, #40]	@ (8007878 <HAL_RCC_ClockConfig+0x274>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f7fe fcac 	bl	80061b0 <HAL_InitTick>
 8007858:	4603      	mov	r3, r0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	40022000 	.word	0x40022000
 8007868:	40021000 	.word	0x40021000
 800786c:	04c4b400 	.word	0x04c4b400
 8007870:	080238a8 	.word	0x080238a8
 8007874:	20000230 	.word	0x20000230
 8007878:	20000234 	.word	0x20000234

0800787c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007882:	4b2c      	ldr	r3, [pc, #176]	@ (8007934 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f003 030c 	and.w	r3, r3, #12
 800788a:	2b04      	cmp	r3, #4
 800788c:	d102      	bne.n	8007894 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800788e:	4b2a      	ldr	r3, [pc, #168]	@ (8007938 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007890:	613b      	str	r3, [r7, #16]
 8007892:	e047      	b.n	8007924 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007894:	4b27      	ldr	r3, [pc, #156]	@ (8007934 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f003 030c 	and.w	r3, r3, #12
 800789c:	2b08      	cmp	r3, #8
 800789e:	d102      	bne.n	80078a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078a0:	4b26      	ldr	r3, [pc, #152]	@ (800793c <HAL_RCC_GetSysClockFreq+0xc0>)
 80078a2:	613b      	str	r3, [r7, #16]
 80078a4:	e03e      	b.n	8007924 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80078a6:	4b23      	ldr	r3, [pc, #140]	@ (8007934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f003 030c 	and.w	r3, r3, #12
 80078ae:	2b0c      	cmp	r3, #12
 80078b0:	d136      	bne.n	8007920 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078b2:	4b20      	ldr	r3, [pc, #128]	@ (8007934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	f003 0303 	and.w	r3, r3, #3
 80078ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	091b      	lsrs	r3, r3, #4
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	3301      	adds	r3, #1
 80078c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d10c      	bne.n	80078ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078d0:	4a1a      	ldr	r2, [pc, #104]	@ (800793c <HAL_RCC_GetSysClockFreq+0xc0>)
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d8:	4a16      	ldr	r2, [pc, #88]	@ (8007934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078da:	68d2      	ldr	r2, [r2, #12]
 80078dc:	0a12      	lsrs	r2, r2, #8
 80078de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80078e2:	fb02 f303 	mul.w	r3, r2, r3
 80078e6:	617b      	str	r3, [r7, #20]
      break;
 80078e8:	e00c      	b.n	8007904 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078ea:	4a13      	ldr	r2, [pc, #76]	@ (8007938 <HAL_RCC_GetSysClockFreq+0xbc>)
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f2:	4a10      	ldr	r2, [pc, #64]	@ (8007934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078f4:	68d2      	ldr	r2, [r2, #12]
 80078f6:	0a12      	lsrs	r2, r2, #8
 80078f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80078fc:	fb02 f303 	mul.w	r3, r2, r3
 8007900:	617b      	str	r3, [r7, #20]
      break;
 8007902:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007904:	4b0b      	ldr	r3, [pc, #44]	@ (8007934 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	0e5b      	lsrs	r3, r3, #25
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	3301      	adds	r3, #1
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	fbb2 f3f3 	udiv	r3, r2, r3
 800791c:	613b      	str	r3, [r7, #16]
 800791e:	e001      	b.n	8007924 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007920:	2300      	movs	r3, #0
 8007922:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007924:	693b      	ldr	r3, [r7, #16]
}
 8007926:	4618      	mov	r0, r3
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	40021000 	.word	0x40021000
 8007938:	00f42400 	.word	0x00f42400
 800793c:	016e3600 	.word	0x016e3600

08007940 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007944:	4b03      	ldr	r3, [pc, #12]	@ (8007954 <HAL_RCC_GetHCLKFreq+0x14>)
 8007946:	681b      	ldr	r3, [r3, #0]
}
 8007948:	4618      	mov	r0, r3
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20000230 	.word	0x20000230

08007958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800795c:	f7ff fff0 	bl	8007940 <HAL_RCC_GetHCLKFreq>
 8007960:	4602      	mov	r2, r0
 8007962:	4b06      	ldr	r3, [pc, #24]	@ (800797c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	0a1b      	lsrs	r3, r3, #8
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	4904      	ldr	r1, [pc, #16]	@ (8007980 <HAL_RCC_GetPCLK1Freq+0x28>)
 800796e:	5ccb      	ldrb	r3, [r1, r3]
 8007970:	f003 031f 	and.w	r3, r3, #31
 8007974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007978:	4618      	mov	r0, r3
 800797a:	bd80      	pop	{r7, pc}
 800797c:	40021000 	.word	0x40021000
 8007980:	080238b8 	.word	0x080238b8

08007984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007988:	f7ff ffda 	bl	8007940 <HAL_RCC_GetHCLKFreq>
 800798c:	4602      	mov	r2, r0
 800798e:	4b06      	ldr	r3, [pc, #24]	@ (80079a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	0adb      	lsrs	r3, r3, #11
 8007994:	f003 0307 	and.w	r3, r3, #7
 8007998:	4904      	ldr	r1, [pc, #16]	@ (80079ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800799a:	5ccb      	ldrb	r3, [r1, r3]
 800799c:	f003 031f 	and.w	r3, r3, #31
 80079a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	40021000 	.word	0x40021000
 80079ac:	080238b8 	.word	0x080238b8

080079b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007a30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007a30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	091b      	lsrs	r3, r3, #4
 80079c6:	f003 030f 	and.w	r3, r3, #15
 80079ca:	3301      	adds	r3, #1
 80079cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d10c      	bne.n	80079ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079d4:	4a17      	ldr	r2, [pc, #92]	@ (8007a34 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079dc:	4a14      	ldr	r2, [pc, #80]	@ (8007a30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079de:	68d2      	ldr	r2, [r2, #12]
 80079e0:	0a12      	lsrs	r2, r2, #8
 80079e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079e6:	fb02 f303 	mul.w	r3, r2, r3
 80079ea:	617b      	str	r3, [r7, #20]
    break;
 80079ec:	e00c      	b.n	8007a08 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079ee:	4a12      	ldr	r2, [pc, #72]	@ (8007a38 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f6:	4a0e      	ldr	r2, [pc, #56]	@ (8007a30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079f8:	68d2      	ldr	r2, [r2, #12]
 80079fa:	0a12      	lsrs	r2, r2, #8
 80079fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007a00:	fb02 f303 	mul.w	r3, r2, r3
 8007a04:	617b      	str	r3, [r7, #20]
    break;
 8007a06:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a08:	4b09      	ldr	r3, [pc, #36]	@ (8007a30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	0e5b      	lsrs	r3, r3, #25
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	3301      	adds	r3, #1
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a20:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007a22:	687b      	ldr	r3, [r7, #4]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	371c      	adds	r7, #28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	40021000 	.word	0x40021000
 8007a34:	016e3600 	.word	0x016e3600
 8007a38:	00f42400 	.word	0x00f42400

08007a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a44:	2300      	movs	r3, #0
 8007a46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a48:	2300      	movs	r3, #0
 8007a4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 8098 	beq.w	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a5e:	4b43      	ldr	r3, [pc, #268]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10d      	bne.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a6a:	4b40      	ldr	r3, [pc, #256]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a6e:	4a3f      	ldr	r2, [pc, #252]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a76:	4b3d      	ldr	r3, [pc, #244]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a7e:	60bb      	str	r3, [r7, #8]
 8007a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a82:	2301      	movs	r3, #1
 8007a84:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a86:	4b3a      	ldr	r3, [pc, #232]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a39      	ldr	r2, [pc, #228]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a92:	f7fe fbd9 	bl	8006248 <HAL_GetTick>
 8007a96:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a98:	e009      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a9a:	f7fe fbd5 	bl	8006248 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d902      	bls.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	74fb      	strb	r3, [r7, #19]
        break;
 8007aac:	e005      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aae:	4b30      	ldr	r3, [pc, #192]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0ef      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007aba:	7cfb      	ldrb	r3, [r7, #19]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d159      	bne.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d01e      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d019      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007adc:	4b23      	ldr	r3, [pc, #140]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ae6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ae8:	4b20      	ldr	r3, [pc, #128]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aee:	4a1f      	ldr	r2, [pc, #124]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007af8:	4b1c      	ldr	r3, [pc, #112]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007afe:	4a1b      	ldr	r2, [pc, #108]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b08:	4a18      	ldr	r2, [pc, #96]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d016      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b1a:	f7fe fb95 	bl	8006248 <HAL_GetTick>
 8007b1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b20:	e00b      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b22:	f7fe fb91 	bl	8006248 <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d902      	bls.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	74fb      	strb	r3, [r7, #19]
            break;
 8007b38:	e006      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d0ec      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007b48:	7cfb      	ldrb	r3, [r7, #19]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10b      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b4e:	4b07      	ldr	r3, [pc, #28]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b5c:	4903      	ldr	r1, [pc, #12]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007b64:	e008      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b66:	7cfb      	ldrb	r3, [r7, #19]
 8007b68:	74bb      	strb	r3, [r7, #18]
 8007b6a:	e005      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007b6c:	40021000 	.word	0x40021000
 8007b70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b74:	7cfb      	ldrb	r3, [r7, #19]
 8007b76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b78:	7c7b      	ldrb	r3, [r7, #17]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d105      	bne.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b7e:	4ba7      	ldr	r3, [pc, #668]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b82:	4aa6      	ldr	r2, [pc, #664]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b88:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b96:	4ba1      	ldr	r3, [pc, #644]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b9c:	f023 0203 	bic.w	r2, r3, #3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	499d      	ldr	r1, [pc, #628]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bb8:	4b98      	ldr	r3, [pc, #608]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bbe:	f023 020c 	bic.w	r2, r3, #12
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	4995      	ldr	r1, [pc, #596]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0304 	and.w	r3, r3, #4
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bda:	4b90      	ldr	r3, [pc, #576]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	498c      	ldr	r1, [pc, #560]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0308 	and.w	r3, r3, #8
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00a      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bfc:	4b87      	ldr	r3, [pc, #540]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	4984      	ldr	r1, [pc, #528]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0310 	and.w	r3, r3, #16
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c1e:	4b7f      	ldr	r3, [pc, #508]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	497b      	ldr	r1, [pc, #492]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0320 	and.w	r3, r3, #32
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00a      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c40:	4b76      	ldr	r3, [pc, #472]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	4973      	ldr	r1, [pc, #460]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c62:	4b6e      	ldr	r3, [pc, #440]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c68:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	496a      	ldr	r1, [pc, #424]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00a      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c84:	4b65      	ldr	r3, [pc, #404]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c8a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	4962      	ldr	r1, [pc, #392]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb4:	4959      	ldr	r1, [pc, #356]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007cc8:	4b54      	ldr	r3, [pc, #336]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cce:	f023 0203 	bic.w	r2, r3, #3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd6:	4951      	ldr	r1, [pc, #324]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cea:	4b4c      	ldr	r3, [pc, #304]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cf0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf8:	4948      	ldr	r1, [pc, #288]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d015      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d0c:	4b43      	ldr	r3, [pc, #268]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1a:	4940      	ldr	r1, [pc, #256]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d2a:	d105      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	4a3a      	ldr	r2, [pc, #232]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d36:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d015      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007d44:	4b35      	ldr	r3, [pc, #212]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d52:	4932      	ldr	r1, [pc, #200]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d62:	d105      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d64:	4b2d      	ldr	r3, [pc, #180]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	4a2c      	ldr	r2, [pc, #176]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d6e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d015      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d7c:	4b27      	ldr	r3, [pc, #156]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d82:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8a:	4924      	ldr	r1, [pc, #144]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d9a:	d105      	bne.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	4a1e      	ldr	r2, [pc, #120]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007da2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007da6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d015      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007db4:	4b19      	ldr	r3, [pc, #100]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dc2:	4916      	ldr	r1, [pc, #88]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dd2:	d105      	bne.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dd4:	4b11      	ldr	r3, [pc, #68]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	4a10      	ldr	r2, [pc, #64]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dde:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d019      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007dec:	4b0b      	ldr	r3, [pc, #44]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007df2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dfa:	4908      	ldr	r1, [pc, #32]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e0a:	d109      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e0c:	4b03      	ldr	r3, [pc, #12]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	4a02      	ldr	r2, [pc, #8]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e16:	60d3      	str	r3, [r2, #12]
 8007e18:	e002      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007e1a:	bf00      	nop
 8007e1c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d015      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007e2c:	4b29      	ldr	r3, [pc, #164]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e3a:	4926      	ldr	r1, [pc, #152]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e4a:	d105      	bne.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e4c:	4b21      	ldr	r3, [pc, #132]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	4a20      	ldr	r2, [pc, #128]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e56:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d015      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007e64:	4b1b      	ldr	r3, [pc, #108]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e6a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e72:	4918      	ldr	r1, [pc, #96]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e82:	d105      	bne.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e84:	4b13      	ldr	r3, [pc, #76]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	4a12      	ldr	r2, [pc, #72]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e8e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d015      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ea2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eaa:	490a      	ldr	r1, [pc, #40]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007eba:	d105      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ebc:	4b05      	ldr	r3, [pc, #20]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	4a04      	ldr	r2, [pc, #16]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ec6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007ec8:	7cbb      	ldrb	r3, [r7, #18]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	40021000 	.word	0x40021000

08007ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e054      	b.n	8007f94 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d111      	bne.n	8007f1a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f002 fb3c 	bl	800a57c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d102      	bne.n	8007f12 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a23      	ldr	r2, [pc, #140]	@ (8007f9c <HAL_TIM_Base_Init+0xc4>)
 8007f10:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	3304      	adds	r3, #4
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f001 fc7b 	bl	8009828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	08005ca1 	.word	0x08005ca1

08007fa0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d001      	beq.n	8007fb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e04c      	b.n	8008052 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a26      	ldr	r2, [pc, #152]	@ (8008060 <HAL_TIM_Base_Start+0xc0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d022      	beq.n	8008010 <HAL_TIM_Base_Start+0x70>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fd2:	d01d      	beq.n	8008010 <HAL_TIM_Base_Start+0x70>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a22      	ldr	r2, [pc, #136]	@ (8008064 <HAL_TIM_Base_Start+0xc4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d018      	beq.n	8008010 <HAL_TIM_Base_Start+0x70>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a21      	ldr	r2, [pc, #132]	@ (8008068 <HAL_TIM_Base_Start+0xc8>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d013      	beq.n	8008010 <HAL_TIM_Base_Start+0x70>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a1f      	ldr	r2, [pc, #124]	@ (800806c <HAL_TIM_Base_Start+0xcc>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d00e      	beq.n	8008010 <HAL_TIM_Base_Start+0x70>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8008070 <HAL_TIM_Base_Start+0xd0>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d009      	beq.n	8008010 <HAL_TIM_Base_Start+0x70>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a1c      	ldr	r2, [pc, #112]	@ (8008074 <HAL_TIM_Base_Start+0xd4>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d004      	beq.n	8008010 <HAL_TIM_Base_Start+0x70>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a1b      	ldr	r2, [pc, #108]	@ (8008078 <HAL_TIM_Base_Start+0xd8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d115      	bne.n	800803c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689a      	ldr	r2, [r3, #8]
 8008016:	4b19      	ldr	r3, [pc, #100]	@ (800807c <HAL_TIM_Base_Start+0xdc>)
 8008018:	4013      	ands	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b06      	cmp	r3, #6
 8008020:	d015      	beq.n	800804e <HAL_TIM_Base_Start+0xae>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008028:	d011      	beq.n	800804e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f042 0201 	orr.w	r2, r2, #1
 8008038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800803a:	e008      	b.n	800804e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0201 	orr.w	r2, r2, #1
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	e000      	b.n	8008050 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800804e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	40012c00 	.word	0x40012c00
 8008064:	40000400 	.word	0x40000400
 8008068:	40000800 	.word	0x40000800
 800806c:	40000c00 	.word	0x40000c00
 8008070:	40013400 	.word	0x40013400
 8008074:	40014000 	.word	0x40014000
 8008078:	40015000 	.word	0x40015000
 800807c:	00010007 	.word	0x00010007

08008080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b01      	cmp	r3, #1
 8008092:	d001      	beq.n	8008098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e054      	b.n	8008142 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68da      	ldr	r2, [r3, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0201 	orr.w	r2, r2, #1
 80080ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a26      	ldr	r2, [pc, #152]	@ (8008150 <HAL_TIM_Base_Start_IT+0xd0>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d022      	beq.n	8008100 <HAL_TIM_Base_Start_IT+0x80>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c2:	d01d      	beq.n	8008100 <HAL_TIM_Base_Start_IT+0x80>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a22      	ldr	r2, [pc, #136]	@ (8008154 <HAL_TIM_Base_Start_IT+0xd4>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d018      	beq.n	8008100 <HAL_TIM_Base_Start_IT+0x80>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a21      	ldr	r2, [pc, #132]	@ (8008158 <HAL_TIM_Base_Start_IT+0xd8>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d013      	beq.n	8008100 <HAL_TIM_Base_Start_IT+0x80>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a1f      	ldr	r2, [pc, #124]	@ (800815c <HAL_TIM_Base_Start_IT+0xdc>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d00e      	beq.n	8008100 <HAL_TIM_Base_Start_IT+0x80>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a1e      	ldr	r2, [pc, #120]	@ (8008160 <HAL_TIM_Base_Start_IT+0xe0>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d009      	beq.n	8008100 <HAL_TIM_Base_Start_IT+0x80>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008164 <HAL_TIM_Base_Start_IT+0xe4>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d004      	beq.n	8008100 <HAL_TIM_Base_Start_IT+0x80>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008168 <HAL_TIM_Base_Start_IT+0xe8>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d115      	bne.n	800812c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689a      	ldr	r2, [r3, #8]
 8008106:	4b19      	ldr	r3, [pc, #100]	@ (800816c <HAL_TIM_Base_Start_IT+0xec>)
 8008108:	4013      	ands	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2b06      	cmp	r3, #6
 8008110:	d015      	beq.n	800813e <HAL_TIM_Base_Start_IT+0xbe>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008118:	d011      	beq.n	800813e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f042 0201 	orr.w	r2, r2, #1
 8008128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800812a:	e008      	b.n	800813e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0201 	orr.w	r2, r2, #1
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	e000      	b.n	8008140 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800813e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	40012c00 	.word	0x40012c00
 8008154:	40000400 	.word	0x40000400
 8008158:	40000800 	.word	0x40000800
 800815c:	40000c00 	.word	0x40000c00
 8008160:	40013400 	.word	0x40013400
 8008164:	40014000 	.word	0x40014000
 8008168:	40015000 	.word	0x40015000
 800816c:	00010007 	.word	0x00010007

08008170 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d101      	bne.n	8008182 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e054      	b.n	800822c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d111      	bne.n	80081b2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f002 f9f0 	bl	800a57c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a23      	ldr	r2, [pc, #140]	@ (8008234 <HAL_TIM_PWM_Init+0xc4>)
 80081a8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2202      	movs	r2, #2
 80081b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	3304      	adds	r3, #4
 80081c2:	4619      	mov	r1, r3
 80081c4:	4610      	mov	r0, r2
 80081c6:	f001 fb2f 	bl	8009828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	08008239 	.word	0x08008239

08008238 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d109      	bne.n	8008270 <HAL_TIM_PWM_Start+0x24>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b01      	cmp	r3, #1
 8008266:	bf14      	ite	ne
 8008268:	2301      	movne	r3, #1
 800826a:	2300      	moveq	r3, #0
 800826c:	b2db      	uxtb	r3, r3
 800826e:	e03c      	b.n	80082ea <HAL_TIM_PWM_Start+0x9e>
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b04      	cmp	r3, #4
 8008274:	d109      	bne.n	800828a <HAL_TIM_PWM_Start+0x3e>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b01      	cmp	r3, #1
 8008280:	bf14      	ite	ne
 8008282:	2301      	movne	r3, #1
 8008284:	2300      	moveq	r3, #0
 8008286:	b2db      	uxtb	r3, r3
 8008288:	e02f      	b.n	80082ea <HAL_TIM_PWM_Start+0x9e>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b08      	cmp	r3, #8
 800828e:	d109      	bne.n	80082a4 <HAL_TIM_PWM_Start+0x58>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b01      	cmp	r3, #1
 800829a:	bf14      	ite	ne
 800829c:	2301      	movne	r3, #1
 800829e:	2300      	moveq	r3, #0
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	e022      	b.n	80082ea <HAL_TIM_PWM_Start+0x9e>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b0c      	cmp	r3, #12
 80082a8:	d109      	bne.n	80082be <HAL_TIM_PWM_Start+0x72>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	bf14      	ite	ne
 80082b6:	2301      	movne	r3, #1
 80082b8:	2300      	moveq	r3, #0
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	e015      	b.n	80082ea <HAL_TIM_PWM_Start+0x9e>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b10      	cmp	r3, #16
 80082c2:	d109      	bne.n	80082d8 <HAL_TIM_PWM_Start+0x8c>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	bf14      	ite	ne
 80082d0:	2301      	movne	r3, #1
 80082d2:	2300      	moveq	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	e008      	b.n	80082ea <HAL_TIM_PWM_Start+0x9e>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	bf14      	ite	ne
 80082e4:	2301      	movne	r3, #1
 80082e6:	2300      	moveq	r3, #0
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e0a6      	b.n	8008440 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d104      	bne.n	8008302 <HAL_TIM_PWM_Start+0xb6>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008300:	e023      	b.n	800834a <HAL_TIM_PWM_Start+0xfe>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b04      	cmp	r3, #4
 8008306:	d104      	bne.n	8008312 <HAL_TIM_PWM_Start+0xc6>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2202      	movs	r2, #2
 800830c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008310:	e01b      	b.n	800834a <HAL_TIM_PWM_Start+0xfe>
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b08      	cmp	r3, #8
 8008316:	d104      	bne.n	8008322 <HAL_TIM_PWM_Start+0xd6>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2202      	movs	r2, #2
 800831c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008320:	e013      	b.n	800834a <HAL_TIM_PWM_Start+0xfe>
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	2b0c      	cmp	r3, #12
 8008326:	d104      	bne.n	8008332 <HAL_TIM_PWM_Start+0xe6>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008330:	e00b      	b.n	800834a <HAL_TIM_PWM_Start+0xfe>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b10      	cmp	r3, #16
 8008336:	d104      	bne.n	8008342 <HAL_TIM_PWM_Start+0xf6>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008340:	e003      	b.n	800834a <HAL_TIM_PWM_Start+0xfe>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2202      	movs	r2, #2
 8008346:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2201      	movs	r2, #1
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	4618      	mov	r0, r3
 8008354:	f002 f8ec 	bl	800a530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a3a      	ldr	r2, [pc, #232]	@ (8008448 <HAL_TIM_PWM_Start+0x1fc>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d018      	beq.n	8008394 <HAL_TIM_PWM_Start+0x148>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a39      	ldr	r2, [pc, #228]	@ (800844c <HAL_TIM_PWM_Start+0x200>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d013      	beq.n	8008394 <HAL_TIM_PWM_Start+0x148>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a37      	ldr	r2, [pc, #220]	@ (8008450 <HAL_TIM_PWM_Start+0x204>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d00e      	beq.n	8008394 <HAL_TIM_PWM_Start+0x148>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a36      	ldr	r2, [pc, #216]	@ (8008454 <HAL_TIM_PWM_Start+0x208>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d009      	beq.n	8008394 <HAL_TIM_PWM_Start+0x148>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a34      	ldr	r2, [pc, #208]	@ (8008458 <HAL_TIM_PWM_Start+0x20c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d004      	beq.n	8008394 <HAL_TIM_PWM_Start+0x148>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a33      	ldr	r2, [pc, #204]	@ (800845c <HAL_TIM_PWM_Start+0x210>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d101      	bne.n	8008398 <HAL_TIM_PWM_Start+0x14c>
 8008394:	2301      	movs	r3, #1
 8008396:	e000      	b.n	800839a <HAL_TIM_PWM_Start+0x14e>
 8008398:	2300      	movs	r3, #0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d007      	beq.n	80083ae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80083ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a25      	ldr	r2, [pc, #148]	@ (8008448 <HAL_TIM_PWM_Start+0x1fc>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d022      	beq.n	80083fe <HAL_TIM_PWM_Start+0x1b2>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083c0:	d01d      	beq.n	80083fe <HAL_TIM_PWM_Start+0x1b2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a26      	ldr	r2, [pc, #152]	@ (8008460 <HAL_TIM_PWM_Start+0x214>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d018      	beq.n	80083fe <HAL_TIM_PWM_Start+0x1b2>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a24      	ldr	r2, [pc, #144]	@ (8008464 <HAL_TIM_PWM_Start+0x218>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d013      	beq.n	80083fe <HAL_TIM_PWM_Start+0x1b2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a23      	ldr	r2, [pc, #140]	@ (8008468 <HAL_TIM_PWM_Start+0x21c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d00e      	beq.n	80083fe <HAL_TIM_PWM_Start+0x1b2>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a19      	ldr	r2, [pc, #100]	@ (800844c <HAL_TIM_PWM_Start+0x200>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d009      	beq.n	80083fe <HAL_TIM_PWM_Start+0x1b2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a18      	ldr	r2, [pc, #96]	@ (8008450 <HAL_TIM_PWM_Start+0x204>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d004      	beq.n	80083fe <HAL_TIM_PWM_Start+0x1b2>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a18      	ldr	r2, [pc, #96]	@ (800845c <HAL_TIM_PWM_Start+0x210>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d115      	bne.n	800842a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689a      	ldr	r2, [r3, #8]
 8008404:	4b19      	ldr	r3, [pc, #100]	@ (800846c <HAL_TIM_PWM_Start+0x220>)
 8008406:	4013      	ands	r3, r2
 8008408:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2b06      	cmp	r3, #6
 800840e:	d015      	beq.n	800843c <HAL_TIM_PWM_Start+0x1f0>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008416:	d011      	beq.n	800843c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f042 0201 	orr.w	r2, r2, #1
 8008426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008428:	e008      	b.n	800843c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f042 0201 	orr.w	r2, r2, #1
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	e000      	b.n	800843e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800843c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	40012c00 	.word	0x40012c00
 800844c:	40013400 	.word	0x40013400
 8008450:	40014000 	.word	0x40014000
 8008454:	40014400 	.word	0x40014400
 8008458:	40014800 	.word	0x40014800
 800845c:	40015000 	.word	0x40015000
 8008460:	40000400 	.word	0x40000400
 8008464:	40000800 	.word	0x40000800
 8008468:	40000c00 	.word	0x40000c00
 800846c:	00010007 	.word	0x00010007

08008470 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e054      	b.n	800852c <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d111      	bne.n	80084b2 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f002 f870 	bl	800a57c <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d102      	bne.n	80084aa <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a23      	ldr	r2, [pc, #140]	@ (8008534 <HAL_TIM_IC_Init+0xc4>)
 80084a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2202      	movs	r2, #2
 80084b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	3304      	adds	r3, #4
 80084c2:	4619      	mov	r1, r3
 80084c4:	4610      	mov	r0, r2
 80084c6:	f001 f9af 	bl	8009828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	08005aa1 	.word	0x08005aa1

08008538 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d104      	bne.n	8008552 <HAL_TIM_IC_Start+0x1a>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800854e:	b2db      	uxtb	r3, r3
 8008550:	e023      	b.n	800859a <HAL_TIM_IC_Start+0x62>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2b04      	cmp	r3, #4
 8008556:	d104      	bne.n	8008562 <HAL_TIM_IC_Start+0x2a>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800855e:	b2db      	uxtb	r3, r3
 8008560:	e01b      	b.n	800859a <HAL_TIM_IC_Start+0x62>
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b08      	cmp	r3, #8
 8008566:	d104      	bne.n	8008572 <HAL_TIM_IC_Start+0x3a>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800856e:	b2db      	uxtb	r3, r3
 8008570:	e013      	b.n	800859a <HAL_TIM_IC_Start+0x62>
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2b0c      	cmp	r3, #12
 8008576:	d104      	bne.n	8008582 <HAL_TIM_IC_Start+0x4a>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800857e:	b2db      	uxtb	r3, r3
 8008580:	e00b      	b.n	800859a <HAL_TIM_IC_Start+0x62>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b10      	cmp	r3, #16
 8008586:	d104      	bne.n	8008592 <HAL_TIM_IC_Start+0x5a>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800858e:	b2db      	uxtb	r3, r3
 8008590:	e003      	b.n	800859a <HAL_TIM_IC_Start+0x62>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008598:	b2db      	uxtb	r3, r3
 800859a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d104      	bne.n	80085ac <HAL_TIM_IC_Start+0x74>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	e013      	b.n	80085d4 <HAL_TIM_IC_Start+0x9c>
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2b04      	cmp	r3, #4
 80085b0:	d104      	bne.n	80085bc <HAL_TIM_IC_Start+0x84>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	e00b      	b.n	80085d4 <HAL_TIM_IC_Start+0x9c>
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2b08      	cmp	r3, #8
 80085c0:	d104      	bne.n	80085cc <HAL_TIM_IC_Start+0x94>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	e003      	b.n	80085d4 <HAL_TIM_IC_Start+0x9c>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d102      	bne.n	80085e2 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d001      	beq.n	80085e6 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e097      	b.n	8008716 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d104      	bne.n	80085f6 <HAL_TIM_IC_Start+0xbe>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085f4:	e023      	b.n	800863e <HAL_TIM_IC_Start+0x106>
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b04      	cmp	r3, #4
 80085fa:	d104      	bne.n	8008606 <HAL_TIM_IC_Start+0xce>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008604:	e01b      	b.n	800863e <HAL_TIM_IC_Start+0x106>
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2b08      	cmp	r3, #8
 800860a:	d104      	bne.n	8008616 <HAL_TIM_IC_Start+0xde>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008614:	e013      	b.n	800863e <HAL_TIM_IC_Start+0x106>
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2b0c      	cmp	r3, #12
 800861a:	d104      	bne.n	8008626 <HAL_TIM_IC_Start+0xee>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008624:	e00b      	b.n	800863e <HAL_TIM_IC_Start+0x106>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b10      	cmp	r3, #16
 800862a:	d104      	bne.n	8008636 <HAL_TIM_IC_Start+0xfe>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2202      	movs	r2, #2
 8008630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008634:	e003      	b.n	800863e <HAL_TIM_IC_Start+0x106>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2202      	movs	r2, #2
 800863a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d104      	bne.n	800864e <HAL_TIM_IC_Start+0x116>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800864c:	e013      	b.n	8008676 <HAL_TIM_IC_Start+0x13e>
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b04      	cmp	r3, #4
 8008652:	d104      	bne.n	800865e <HAL_TIM_IC_Start+0x126>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2202      	movs	r2, #2
 8008658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800865c:	e00b      	b.n	8008676 <HAL_TIM_IC_Start+0x13e>
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2b08      	cmp	r3, #8
 8008662:	d104      	bne.n	800866e <HAL_TIM_IC_Start+0x136>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800866c:	e003      	b.n	8008676 <HAL_TIM_IC_Start+0x13e>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2202      	movs	r2, #2
 8008672:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2201      	movs	r2, #1
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	4618      	mov	r0, r3
 8008680:	f001 ff56 	bl	800a530 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a25      	ldr	r2, [pc, #148]	@ (8008720 <HAL_TIM_IC_Start+0x1e8>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d022      	beq.n	80086d4 <HAL_TIM_IC_Start+0x19c>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008696:	d01d      	beq.n	80086d4 <HAL_TIM_IC_Start+0x19c>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a21      	ldr	r2, [pc, #132]	@ (8008724 <HAL_TIM_IC_Start+0x1ec>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d018      	beq.n	80086d4 <HAL_TIM_IC_Start+0x19c>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a20      	ldr	r2, [pc, #128]	@ (8008728 <HAL_TIM_IC_Start+0x1f0>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d013      	beq.n	80086d4 <HAL_TIM_IC_Start+0x19c>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a1e      	ldr	r2, [pc, #120]	@ (800872c <HAL_TIM_IC_Start+0x1f4>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d00e      	beq.n	80086d4 <HAL_TIM_IC_Start+0x19c>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a1d      	ldr	r2, [pc, #116]	@ (8008730 <HAL_TIM_IC_Start+0x1f8>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d009      	beq.n	80086d4 <HAL_TIM_IC_Start+0x19c>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008734 <HAL_TIM_IC_Start+0x1fc>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d004      	beq.n	80086d4 <HAL_TIM_IC_Start+0x19c>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008738 <HAL_TIM_IC_Start+0x200>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d115      	bne.n	8008700 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689a      	ldr	r2, [r3, #8]
 80086da:	4b18      	ldr	r3, [pc, #96]	@ (800873c <HAL_TIM_IC_Start+0x204>)
 80086dc:	4013      	ands	r3, r2
 80086de:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b06      	cmp	r3, #6
 80086e4:	d015      	beq.n	8008712 <HAL_TIM_IC_Start+0x1da>
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086ec:	d011      	beq.n	8008712 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f042 0201 	orr.w	r2, r2, #1
 80086fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086fe:	e008      	b.n	8008712 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f042 0201 	orr.w	r2, r2, #1
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	e000      	b.n	8008714 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008712:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	40012c00 	.word	0x40012c00
 8008724:	40000400 	.word	0x40000400
 8008728:	40000800 	.word	0x40000800
 800872c:	40000c00 	.word	0x40000c00
 8008730:	40013400 	.word	0x40013400
 8008734:	40014000 	.word	0x40014000
 8008738:	40015000 	.word	0x40015000
 800873c:	00010007 	.word	0x00010007

08008740 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e04c      	b.n	80087ee <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	d111      	bne.n	8008784 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f001 ff07 	bl	800a57c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008772:	2b00      	cmp	r3, #0
 8008774:	d102      	bne.n	800877c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a1f      	ldr	r2, [pc, #124]	@ (80087f8 <HAL_TIM_OnePulse_Init+0xb8>)
 800877a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3304      	adds	r3, #4
 8008794:	4619      	mov	r1, r3
 8008796:	4610      	mov	r0, r2
 8008798:	f001 f846 	bl	8009828 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f022 0208 	bic.w	r2, r2, #8
 80087aa:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6819      	ldr	r1, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	430a      	orrs	r2, r1
 80087ba:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	080087fd 	.word	0x080087fd

080087fc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008820:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008828:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008830:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008838:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d108      	bne.n	8008852 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d105      	bne.n	8008852 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008846:	7b7b      	ldrb	r3, [r7, #13]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d102      	bne.n	8008852 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800884c:	7b3b      	ldrb	r3, [r7, #12]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d001      	beq.n	8008856 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e059      	b.n	800890a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2202      	movs	r2, #2
 800885a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2202      	movs	r2, #2
 8008862:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2202      	movs	r2, #2
 800886a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2202      	movs	r2, #2
 8008872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68da      	ldr	r2, [r3, #12]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f042 0202 	orr.w	r2, r2, #2
 8008884:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68da      	ldr	r2, [r3, #12]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f042 0204 	orr.w	r2, r2, #4
 8008894:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2201      	movs	r2, #1
 800889c:	2100      	movs	r1, #0
 800889e:	4618      	mov	r0, r3
 80088a0:	f001 fe46 	bl	800a530 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2201      	movs	r2, #1
 80088aa:	2104      	movs	r1, #4
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 fe3f 	bl	800a530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a17      	ldr	r2, [pc, #92]	@ (8008914 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d018      	beq.n	80088ee <HAL_TIM_OnePulse_Start_IT+0xde>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a15      	ldr	r2, [pc, #84]	@ (8008918 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d013      	beq.n	80088ee <HAL_TIM_OnePulse_Start_IT+0xde>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a14      	ldr	r2, [pc, #80]	@ (800891c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00e      	beq.n	80088ee <HAL_TIM_OnePulse_Start_IT+0xde>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a12      	ldr	r2, [pc, #72]	@ (8008920 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d009      	beq.n	80088ee <HAL_TIM_OnePulse_Start_IT+0xde>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a11      	ldr	r2, [pc, #68]	@ (8008924 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d004      	beq.n	80088ee <HAL_TIM_OnePulse_Start_IT+0xde>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a0f      	ldr	r2, [pc, #60]	@ (8008928 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d101      	bne.n	80088f2 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e000      	b.n	80088f4 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80088f2:	2300      	movs	r3, #0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d007      	beq.n	8008908 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008906:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	40012c00 	.word	0x40012c00
 8008918:	40013400 	.word	0x40013400
 800891c:	40014000 	.word	0x40014000
 8008920:	40014400 	.word	0x40014400
 8008924:	40014800 	.word	0x40014800
 8008928:	40015000 	.word	0x40015000

0800892c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d101      	bne.n	8008940 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e0a2      	b.n	8008a86 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d111      	bne.n	8008970 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 fe11 	bl	800a57c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800895e:	2b00      	cmp	r3, #0
 8008960:	d102      	bne.n	8008968 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a4a      	ldr	r2, [pc, #296]	@ (8008a90 <HAL_TIM_Encoder_Init+0x164>)
 8008966:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2202      	movs	r2, #2
 8008974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	6812      	ldr	r2, [r2, #0]
 8008982:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8008986:	f023 0307 	bic.w	r3, r3, #7
 800898a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3304      	adds	r3, #4
 8008994:	4619      	mov	r1, r3
 8008996:	4610      	mov	r0, r2
 8008998:	f000 ff46 	bl	8009828 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089c4:	f023 0303 	bic.w	r3, r3, #3
 80089c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	689a      	ldr	r2, [r3, #8]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	021b      	lsls	r3, r3, #8
 80089d4:	4313      	orrs	r3, r2
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	4313      	orrs	r3, r2
 80089da:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80089e2:	f023 030c 	bic.w	r3, r3, #12
 80089e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	68da      	ldr	r2, [r3, #12]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	69db      	ldr	r3, [r3, #28]
 80089fc:	021b      	lsls	r3, r3, #8
 80089fe:	4313      	orrs	r3, r2
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	011a      	lsls	r2, r3, #4
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	031b      	lsls	r3, r3, #12
 8008a12:	4313      	orrs	r3, r2
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008a20:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008a28:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	695b      	ldr	r3, [r3, #20]
 8008a32:	011b      	lsls	r3, r3, #4
 8008a34:	4313      	orrs	r3, r2
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	08005b95 	.word	0x08005b95

08008a94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008aa4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008aac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ab4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008abc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d110      	bne.n	8008ae6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d102      	bne.n	8008ad0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008aca:	7b7b      	ldrb	r3, [r7, #13]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d001      	beq.n	8008ad4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e069      	b.n	8008ba8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ae4:	e031      	b.n	8008b4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	d110      	bne.n	8008b0e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d102      	bne.n	8008af8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008af2:	7b3b      	ldrb	r3, [r7, #12]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d001      	beq.n	8008afc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e055      	b.n	8008ba8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2202      	movs	r2, #2
 8008b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b0c:	e01d      	b.n	8008b4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d108      	bne.n	8008b26 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d105      	bne.n	8008b26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b1a:	7b7b      	ldrb	r3, [r7, #13]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d102      	bne.n	8008b26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b20:	7b3b      	ldrb	r3, [r7, #12]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d001      	beq.n	8008b2a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e03e      	b.n	8008ba8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2202      	movs	r2, #2
 8008b36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2202      	movs	r2, #2
 8008b46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <HAL_TIM_Encoder_Start+0xc4>
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	d008      	beq.n	8008b68 <HAL_TIM_Encoder_Start+0xd4>
 8008b56:	e00f      	b.n	8008b78 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	2100      	movs	r1, #0
 8008b60:	4618      	mov	r0, r3
 8008b62:	f001 fce5 	bl	800a530 <TIM_CCxChannelCmd>
      break;
 8008b66:	e016      	b.n	8008b96 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	2104      	movs	r1, #4
 8008b70:	4618      	mov	r0, r3
 8008b72:	f001 fcdd 	bl	800a530 <TIM_CCxChannelCmd>
      break;
 8008b76:	e00e      	b.n	8008b96 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	2100      	movs	r1, #0
 8008b80:	4618      	mov	r0, r3
 8008b82:	f001 fcd5 	bl	800a530 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	2104      	movs	r1, #4
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f001 fcce 	bl	800a530 <TIM_CCxChannelCmd>
      break;
 8008b94:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f042 0201 	orr.w	r2, r2, #1
 8008ba4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	f003 0302 	and.w	r3, r3, #2
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d026      	beq.n	8008c20 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d021      	beq.n	8008c20 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f06f 0202 	mvn.w	r2, #2
 8008be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d005      	beq.n	8008c06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	4798      	blx	r3
 8008c04:	e009      	b.n	8008c1a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f003 0304 	and.w	r3, r3, #4
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d026      	beq.n	8008c78 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d021      	beq.n	8008c78 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f06f 0204 	mvn.w	r2, #4
 8008c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2202      	movs	r2, #2
 8008c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d005      	beq.n	8008c5e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	4798      	blx	r3
 8008c5c:	e009      	b.n	8008c72 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f003 0308 	and.w	r3, r3, #8
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d026      	beq.n	8008cd0 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f003 0308 	and.w	r3, r3, #8
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d021      	beq.n	8008cd0 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f06f 0208 	mvn.w	r2, #8
 8008c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2204      	movs	r2, #4
 8008c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	69db      	ldr	r3, [r3, #28]
 8008ca2:	f003 0303 	and.w	r3, r3, #3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d005      	beq.n	8008cb6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	4798      	blx	r3
 8008cb4:	e009      	b.n	8008cca <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	f003 0310 	and.w	r3, r3, #16
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d026      	beq.n	8008d28 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f003 0310 	and.w	r3, r3, #16
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d021      	beq.n	8008d28 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f06f 0210 	mvn.w	r2, #16
 8008cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2208      	movs	r2, #8
 8008cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d005      	beq.n	8008d0e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	4798      	blx	r3
 8008d0c:	e009      	b.n	8008d22 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00e      	beq.n	8008d50 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d009      	beq.n	8008d50 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f06f 0201 	mvn.w	r2, #1
 8008d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d104      	bne.n	8008d64 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00e      	beq.n	8008d82 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d009      	beq.n	8008d82 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00e      	beq.n	8008daa <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d009      	beq.n	8008daa <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00e      	beq.n	8008dd2 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d009      	beq.n	8008dd2 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	f003 0320 	and.w	r3, r3, #32
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00e      	beq.n	8008dfa <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f003 0320 	and.w	r3, r3, #32
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d009      	beq.n	8008dfa <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f06f 0220 	mvn.w	r2, #32
 8008dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00e      	beq.n	8008e22 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d009      	beq.n	8008e22 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00e      	beq.n	8008e4a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d009      	beq.n	8008e4a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00e      	beq.n	8008e72 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d009      	beq.n	8008e72 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00e      	beq.n	8008e9a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d009      	beq.n	8008e9a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e9a:	bf00      	nop
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b086      	sub	sp, #24
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	60b9      	str	r1, [r7, #8]
 8008eac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d101      	bne.n	8008ec0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	e088      	b.n	8008fd2 <HAL_TIM_IC_ConfigChannel+0x130>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d11b      	bne.n	8008f06 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008ede:	f001 f961 	bl	800a1a4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	699a      	ldr	r2, [r3, #24]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f022 020c 	bic.w	r2, r2, #12
 8008ef0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6999      	ldr	r1, [r3, #24]
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	689a      	ldr	r2, [r3, #8]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	430a      	orrs	r2, r1
 8008f02:	619a      	str	r2, [r3, #24]
 8008f04:	e060      	b.n	8008fc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b04      	cmp	r3, #4
 8008f0a:	d11c      	bne.n	8008f46 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008f1c:	f001 f9e5 	bl	800a2ea <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	699a      	ldr	r2, [r3, #24]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008f2e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6999      	ldr	r1, [r3, #24]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	021a      	lsls	r2, r3, #8
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	430a      	orrs	r2, r1
 8008f42:	619a      	str	r2, [r3, #24]
 8008f44:	e040      	b.n	8008fc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b08      	cmp	r3, #8
 8008f4a:	d11b      	bne.n	8008f84 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008f5c:	f001 fa32 	bl	800a3c4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	69da      	ldr	r2, [r3, #28]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f022 020c 	bic.w	r2, r2, #12
 8008f6e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	69d9      	ldr	r1, [r3, #28]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	689a      	ldr	r2, [r3, #8]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	61da      	str	r2, [r3, #28]
 8008f82:	e021      	b.n	8008fc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b0c      	cmp	r3, #12
 8008f88:	d11c      	bne.n	8008fc4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008f9a:	f001 fa4f 	bl	800a43c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	69da      	ldr	r2, [r3, #28]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008fac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	69d9      	ldr	r1, [r3, #28]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	021a      	lsls	r2, r3, #8
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	61da      	str	r2, [r3, #28]
 8008fc2:	e001      	b.n	8008fc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3718      	adds	r7, #24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d101      	bne.n	8008ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e0ff      	b.n	80091fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b14      	cmp	r3, #20
 8009006:	f200 80f0 	bhi.w	80091ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800900a:	a201      	add	r2, pc, #4	@ (adr r2, 8009010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800900c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009010:	08009065 	.word	0x08009065
 8009014:	080091eb 	.word	0x080091eb
 8009018:	080091eb 	.word	0x080091eb
 800901c:	080091eb 	.word	0x080091eb
 8009020:	080090a5 	.word	0x080090a5
 8009024:	080091eb 	.word	0x080091eb
 8009028:	080091eb 	.word	0x080091eb
 800902c:	080091eb 	.word	0x080091eb
 8009030:	080090e7 	.word	0x080090e7
 8009034:	080091eb 	.word	0x080091eb
 8009038:	080091eb 	.word	0x080091eb
 800903c:	080091eb 	.word	0x080091eb
 8009040:	08009127 	.word	0x08009127
 8009044:	080091eb 	.word	0x080091eb
 8009048:	080091eb 	.word	0x080091eb
 800904c:	080091eb 	.word	0x080091eb
 8009050:	08009169 	.word	0x08009169
 8009054:	080091eb 	.word	0x080091eb
 8009058:	080091eb 	.word	0x080091eb
 800905c:	080091eb 	.word	0x080091eb
 8009060:	080091a9 	.word	0x080091a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 fc90 	bl	8009990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	699a      	ldr	r2, [r3, #24]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0208 	orr.w	r2, r2, #8
 800907e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	699a      	ldr	r2, [r3, #24]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 0204 	bic.w	r2, r2, #4
 800908e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6999      	ldr	r1, [r3, #24]
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	691a      	ldr	r2, [r3, #16]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	619a      	str	r2, [r3, #24]
      break;
 80090a2:	e0a5      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68b9      	ldr	r1, [r7, #8]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fd0a 	bl	8009ac4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	699a      	ldr	r2, [r3, #24]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	699a      	ldr	r2, [r3, #24]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6999      	ldr	r1, [r3, #24]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	021a      	lsls	r2, r3, #8
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	619a      	str	r2, [r3, #24]
      break;
 80090e4:	e084      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68b9      	ldr	r1, [r7, #8]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 fd7d 	bl	8009bec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	69da      	ldr	r2, [r3, #28]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f042 0208 	orr.w	r2, r2, #8
 8009100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	69da      	ldr	r2, [r3, #28]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0204 	bic.w	r2, r2, #4
 8009110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	69d9      	ldr	r1, [r3, #28]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	691a      	ldr	r2, [r3, #16]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	61da      	str	r2, [r3, #28]
      break;
 8009124:	e064      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68b9      	ldr	r1, [r7, #8]
 800912c:	4618      	mov	r0, r3
 800912e:	f000 fdef 	bl	8009d10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69da      	ldr	r2, [r3, #28]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	69da      	ldr	r2, [r3, #28]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69d9      	ldr	r1, [r3, #28]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	021a      	lsls	r2, r3, #8
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	430a      	orrs	r2, r1
 8009164:	61da      	str	r2, [r3, #28]
      break;
 8009166:	e043      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68b9      	ldr	r1, [r7, #8]
 800916e:	4618      	mov	r0, r3
 8009170:	f000 fe62 	bl	8009e38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f042 0208 	orr.w	r2, r2, #8
 8009182:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f022 0204 	bic.w	r2, r2, #4
 8009192:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	691a      	ldr	r2, [r3, #16]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	430a      	orrs	r2, r1
 80091a4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80091a6:	e023      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68b9      	ldr	r1, [r7, #8]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 feac 	bl	8009f0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	021a      	lsls	r2, r3, #8
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	430a      	orrs	r2, r1
 80091e6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80091e8:	e002      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	75fb      	strb	r3, [r7, #23]
      break;
 80091ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop

08009204 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009218:	2b01      	cmp	r3, #1
 800921a:	d101      	bne.n	8009220 <HAL_TIM_ConfigClockSource+0x1c>
 800921c:	2302      	movs	r3, #2
 800921e:	e0f6      	b.n	800940e <HAL_TIM_ConfigClockSource+0x20a>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2202      	movs	r2, #2
 800922c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800923e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800924a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a6f      	ldr	r2, [pc, #444]	@ (8009418 <HAL_TIM_ConfigClockSource+0x214>)
 800925a:	4293      	cmp	r3, r2
 800925c:	f000 80c1 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 8009260:	4a6d      	ldr	r2, [pc, #436]	@ (8009418 <HAL_TIM_ConfigClockSource+0x214>)
 8009262:	4293      	cmp	r3, r2
 8009264:	f200 80c6 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009268:	4a6c      	ldr	r2, [pc, #432]	@ (800941c <HAL_TIM_ConfigClockSource+0x218>)
 800926a:	4293      	cmp	r3, r2
 800926c:	f000 80b9 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 8009270:	4a6a      	ldr	r2, [pc, #424]	@ (800941c <HAL_TIM_ConfigClockSource+0x218>)
 8009272:	4293      	cmp	r3, r2
 8009274:	f200 80be 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009278:	4a69      	ldr	r2, [pc, #420]	@ (8009420 <HAL_TIM_ConfigClockSource+0x21c>)
 800927a:	4293      	cmp	r3, r2
 800927c:	f000 80b1 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 8009280:	4a67      	ldr	r2, [pc, #412]	@ (8009420 <HAL_TIM_ConfigClockSource+0x21c>)
 8009282:	4293      	cmp	r3, r2
 8009284:	f200 80b6 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009288:	4a66      	ldr	r2, [pc, #408]	@ (8009424 <HAL_TIM_ConfigClockSource+0x220>)
 800928a:	4293      	cmp	r3, r2
 800928c:	f000 80a9 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 8009290:	4a64      	ldr	r2, [pc, #400]	@ (8009424 <HAL_TIM_ConfigClockSource+0x220>)
 8009292:	4293      	cmp	r3, r2
 8009294:	f200 80ae 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009298:	4a63      	ldr	r2, [pc, #396]	@ (8009428 <HAL_TIM_ConfigClockSource+0x224>)
 800929a:	4293      	cmp	r3, r2
 800929c:	f000 80a1 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 80092a0:	4a61      	ldr	r2, [pc, #388]	@ (8009428 <HAL_TIM_ConfigClockSource+0x224>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	f200 80a6 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80092a8:	4a60      	ldr	r2, [pc, #384]	@ (800942c <HAL_TIM_ConfigClockSource+0x228>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	f000 8099 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 80092b0:	4a5e      	ldr	r2, [pc, #376]	@ (800942c <HAL_TIM_ConfigClockSource+0x228>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	f200 809e 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80092b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092bc:	f000 8091 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 80092c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092c4:	f200 8096 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80092c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092cc:	f000 8089 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 80092d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092d4:	f200 808e 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80092d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092dc:	d03e      	beq.n	800935c <HAL_TIM_ConfigClockSource+0x158>
 80092de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092e2:	f200 8087 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80092e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ea:	f000 8086 	beq.w	80093fa <HAL_TIM_ConfigClockSource+0x1f6>
 80092ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092f2:	d87f      	bhi.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80092f4:	2b70      	cmp	r3, #112	@ 0x70
 80092f6:	d01a      	beq.n	800932e <HAL_TIM_ConfigClockSource+0x12a>
 80092f8:	2b70      	cmp	r3, #112	@ 0x70
 80092fa:	d87b      	bhi.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80092fc:	2b60      	cmp	r3, #96	@ 0x60
 80092fe:	d050      	beq.n	80093a2 <HAL_TIM_ConfigClockSource+0x19e>
 8009300:	2b60      	cmp	r3, #96	@ 0x60
 8009302:	d877      	bhi.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009304:	2b50      	cmp	r3, #80	@ 0x50
 8009306:	d03c      	beq.n	8009382 <HAL_TIM_ConfigClockSource+0x17e>
 8009308:	2b50      	cmp	r3, #80	@ 0x50
 800930a:	d873      	bhi.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 800930c:	2b40      	cmp	r3, #64	@ 0x40
 800930e:	d058      	beq.n	80093c2 <HAL_TIM_ConfigClockSource+0x1be>
 8009310:	2b40      	cmp	r3, #64	@ 0x40
 8009312:	d86f      	bhi.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009314:	2b30      	cmp	r3, #48	@ 0x30
 8009316:	d064      	beq.n	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 8009318:	2b30      	cmp	r3, #48	@ 0x30
 800931a:	d86b      	bhi.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 800931c:	2b20      	cmp	r3, #32
 800931e:	d060      	beq.n	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 8009320:	2b20      	cmp	r3, #32
 8009322:	d867      	bhi.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009324:	2b00      	cmp	r3, #0
 8009326:	d05c      	beq.n	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 8009328:	2b10      	cmp	r3, #16
 800932a:	d05a      	beq.n	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 800932c:	e062      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800933e:	f001 f8d7 	bl	800a4f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009350:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	609a      	str	r2, [r3, #8]
      break;
 800935a:	e04f      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800936c:	f001 f8c0 	bl	800a4f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689a      	ldr	r2, [r3, #8]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800937e:	609a      	str	r2, [r3, #8]
      break;
 8009380:	e03c      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800938e:	461a      	mov	r2, r3
 8009390:	f000 ff7c 	bl	800a28c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2150      	movs	r1, #80	@ 0x50
 800939a:	4618      	mov	r0, r3
 800939c:	f001 f88b 	bl	800a4b6 <TIM_ITRx_SetConfig>
      break;
 80093a0:	e02c      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093ae:	461a      	mov	r2, r3
 80093b0:	f000 ffd8 	bl	800a364 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2160      	movs	r1, #96	@ 0x60
 80093ba:	4618      	mov	r0, r3
 80093bc:	f001 f87b 	bl	800a4b6 <TIM_ITRx_SetConfig>
      break;
 80093c0:	e01c      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ce:	461a      	mov	r2, r3
 80093d0:	f000 ff5c 	bl	800a28c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2140      	movs	r1, #64	@ 0x40
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 f86b 	bl	800a4b6 <TIM_ITRx_SetConfig>
      break;
 80093e0:	e00c      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4619      	mov	r1, r3
 80093ec:	4610      	mov	r0, r2
 80093ee:	f001 f862 	bl	800a4b6 <TIM_ITRx_SetConfig>
      break;
 80093f2:	e003      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	73fb      	strb	r3, [r7, #15]
      break;
 80093f8:	e000      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80093fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800940c:	7bfb      	ldrb	r3, [r7, #15]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	00100070 	.word	0x00100070
 800941c:	00100060 	.word	0x00100060
 8009420:	00100050 	.word	0x00100050
 8009424:	00100040 	.word	0x00100040
 8009428:	00100030 	.word	0x00100030
 800942c:	00100020 	.word	0x00100020

08009430 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009440:	2b01      	cmp	r3, #1
 8009442:	d101      	bne.n	8009448 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009444:	2302      	movs	r3, #2
 8009446:	e031      	b.n	80094ac <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2202      	movs	r2, #2
 8009454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fdc2 	bl	8009fe4 <TIM_SlaveTimer_SetConfig>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e018      	b.n	80094ac <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68da      	ldr	r2, [r3, #12]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009488:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68da      	ldr	r2, [r3, #12]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009498:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009568:	b480      	push	{r7}
 800956a:	b087      	sub	sp, #28
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	460b      	mov	r3, r1
 8009572:	607a      	str	r2, [r7, #4]
 8009574:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009576:	2300      	movs	r3, #0
 8009578:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e14a      	b.n	800981a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b01      	cmp	r3, #1
 800958e:	f040 80dd 	bne.w	800974c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8009592:	7afb      	ldrb	r3, [r7, #11]
 8009594:	2b1f      	cmp	r3, #31
 8009596:	f200 80d6 	bhi.w	8009746 <HAL_TIM_RegisterCallback+0x1de>
 800959a:	a201      	add	r2, pc, #4	@ (adr r2, 80095a0 <HAL_TIM_RegisterCallback+0x38>)
 800959c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a0:	08009621 	.word	0x08009621
 80095a4:	08009629 	.word	0x08009629
 80095a8:	08009631 	.word	0x08009631
 80095ac:	08009639 	.word	0x08009639
 80095b0:	08009641 	.word	0x08009641
 80095b4:	08009649 	.word	0x08009649
 80095b8:	08009651 	.word	0x08009651
 80095bc:	08009659 	.word	0x08009659
 80095c0:	08009661 	.word	0x08009661
 80095c4:	08009669 	.word	0x08009669
 80095c8:	08009671 	.word	0x08009671
 80095cc:	08009679 	.word	0x08009679
 80095d0:	08009681 	.word	0x08009681
 80095d4:	08009689 	.word	0x08009689
 80095d8:	08009693 	.word	0x08009693
 80095dc:	0800969d 	.word	0x0800969d
 80095e0:	080096a7 	.word	0x080096a7
 80095e4:	080096b1 	.word	0x080096b1
 80095e8:	080096bb 	.word	0x080096bb
 80095ec:	080096c5 	.word	0x080096c5
 80095f0:	080096cf 	.word	0x080096cf
 80095f4:	080096d9 	.word	0x080096d9
 80095f8:	080096e3 	.word	0x080096e3
 80095fc:	080096ed 	.word	0x080096ed
 8009600:	080096f7 	.word	0x080096f7
 8009604:	08009701 	.word	0x08009701
 8009608:	0800970b 	.word	0x0800970b
 800960c:	08009715 	.word	0x08009715
 8009610:	0800971f 	.word	0x0800971f
 8009614:	08009729 	.word	0x08009729
 8009618:	08009733 	.word	0x08009733
 800961c:	0800973d 	.word	0x0800973d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009626:	e0f7      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800962e:	e0f3      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009636:	e0ef      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800963e:	e0eb      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009646:	e0e7      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800964e:	e0e3      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009656:	e0df      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800965e:	e0db      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009666:	e0d7      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800966e:	e0d3      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009676:	e0cf      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800967e:	e0cb      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009686:	e0c7      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009690:	e0c2      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800969a:	e0bd      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80096a4:	e0b8      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80096ae:	e0b3      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80096b8:	e0ae      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80096c2:	e0a9      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80096cc:	e0a4      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80096d6:	e09f      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80096e0:	e09a      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80096ea:	e095      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80096f4:	e090      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80096fe:	e08b      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009708:	e086      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009712:	e081      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800971c:	e07c      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009726:	e077      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009730:	e072      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800973a:	e06d      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009744:	e068      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	75fb      	strb	r3, [r7, #23]
        break;
 800974a:	e065      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d15d      	bne.n	8009814 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009758:	7afb      	ldrb	r3, [r7, #11]
 800975a:	2b0d      	cmp	r3, #13
 800975c:	d857      	bhi.n	800980e <HAL_TIM_RegisterCallback+0x2a6>
 800975e:	a201      	add	r2, pc, #4	@ (adr r2, 8009764 <HAL_TIM_RegisterCallback+0x1fc>)
 8009760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009764:	0800979d 	.word	0x0800979d
 8009768:	080097a5 	.word	0x080097a5
 800976c:	080097ad 	.word	0x080097ad
 8009770:	080097b5 	.word	0x080097b5
 8009774:	080097bd 	.word	0x080097bd
 8009778:	080097c5 	.word	0x080097c5
 800977c:	080097cd 	.word	0x080097cd
 8009780:	080097d5 	.word	0x080097d5
 8009784:	080097dd 	.word	0x080097dd
 8009788:	080097e5 	.word	0x080097e5
 800978c:	080097ed 	.word	0x080097ed
 8009790:	080097f5 	.word	0x080097f5
 8009794:	080097fd 	.word	0x080097fd
 8009798:	08009805 	.word	0x08009805
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80097a2:	e039      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80097aa:	e035      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80097b2:	e031      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80097ba:	e02d      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80097c2:	e029      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80097ca:	e025      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80097d2:	e021      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80097da:	e01d      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80097e2:	e019      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80097ea:	e015      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80097f2:	e011      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80097fa:	e00d      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009802:	e009      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800980c:	e004      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	75fb      	strb	r3, [r7, #23]
        break;
 8009812:	e001      	b.n	8009818 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009818:	7dfb      	ldrb	r3, [r7, #23]
}
 800981a:	4618      	mov	r0, r3
 800981c:	371c      	adds	r7, #28
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop

08009828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a4c      	ldr	r2, [pc, #304]	@ (800996c <TIM_Base_SetConfig+0x144>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d017      	beq.n	8009870 <TIM_Base_SetConfig+0x48>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009846:	d013      	beq.n	8009870 <TIM_Base_SetConfig+0x48>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a49      	ldr	r2, [pc, #292]	@ (8009970 <TIM_Base_SetConfig+0x148>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d00f      	beq.n	8009870 <TIM_Base_SetConfig+0x48>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a48      	ldr	r2, [pc, #288]	@ (8009974 <TIM_Base_SetConfig+0x14c>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d00b      	beq.n	8009870 <TIM_Base_SetConfig+0x48>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a47      	ldr	r2, [pc, #284]	@ (8009978 <TIM_Base_SetConfig+0x150>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d007      	beq.n	8009870 <TIM_Base_SetConfig+0x48>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a46      	ldr	r2, [pc, #280]	@ (800997c <TIM_Base_SetConfig+0x154>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d003      	beq.n	8009870 <TIM_Base_SetConfig+0x48>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a45      	ldr	r2, [pc, #276]	@ (8009980 <TIM_Base_SetConfig+0x158>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d108      	bne.n	8009882 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	4313      	orrs	r3, r2
 8009880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a39      	ldr	r2, [pc, #228]	@ (800996c <TIM_Base_SetConfig+0x144>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d023      	beq.n	80098d2 <TIM_Base_SetConfig+0xaa>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009890:	d01f      	beq.n	80098d2 <TIM_Base_SetConfig+0xaa>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a36      	ldr	r2, [pc, #216]	@ (8009970 <TIM_Base_SetConfig+0x148>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d01b      	beq.n	80098d2 <TIM_Base_SetConfig+0xaa>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a35      	ldr	r2, [pc, #212]	@ (8009974 <TIM_Base_SetConfig+0x14c>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d017      	beq.n	80098d2 <TIM_Base_SetConfig+0xaa>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a34      	ldr	r2, [pc, #208]	@ (8009978 <TIM_Base_SetConfig+0x150>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d013      	beq.n	80098d2 <TIM_Base_SetConfig+0xaa>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a33      	ldr	r2, [pc, #204]	@ (800997c <TIM_Base_SetConfig+0x154>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d00f      	beq.n	80098d2 <TIM_Base_SetConfig+0xaa>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a33      	ldr	r2, [pc, #204]	@ (8009984 <TIM_Base_SetConfig+0x15c>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d00b      	beq.n	80098d2 <TIM_Base_SetConfig+0xaa>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a32      	ldr	r2, [pc, #200]	@ (8009988 <TIM_Base_SetConfig+0x160>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d007      	beq.n	80098d2 <TIM_Base_SetConfig+0xaa>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a31      	ldr	r2, [pc, #196]	@ (800998c <TIM_Base_SetConfig+0x164>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d003      	beq.n	80098d2 <TIM_Base_SetConfig+0xaa>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a2c      	ldr	r2, [pc, #176]	@ (8009980 <TIM_Base_SetConfig+0x158>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d108      	bne.n	80098e4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a18      	ldr	r2, [pc, #96]	@ (800996c <TIM_Base_SetConfig+0x144>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d013      	beq.n	8009938 <TIM_Base_SetConfig+0x110>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a1a      	ldr	r2, [pc, #104]	@ (800997c <TIM_Base_SetConfig+0x154>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d00f      	beq.n	8009938 <TIM_Base_SetConfig+0x110>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a1a      	ldr	r2, [pc, #104]	@ (8009984 <TIM_Base_SetConfig+0x15c>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d00b      	beq.n	8009938 <TIM_Base_SetConfig+0x110>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a19      	ldr	r2, [pc, #100]	@ (8009988 <TIM_Base_SetConfig+0x160>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d007      	beq.n	8009938 <TIM_Base_SetConfig+0x110>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a18      	ldr	r2, [pc, #96]	@ (800998c <TIM_Base_SetConfig+0x164>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d003      	beq.n	8009938 <TIM_Base_SetConfig+0x110>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a13      	ldr	r2, [pc, #76]	@ (8009980 <TIM_Base_SetConfig+0x158>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d103      	bne.n	8009940 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	691a      	ldr	r2, [r3, #16]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	2b01      	cmp	r3, #1
 8009950:	d105      	bne.n	800995e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	f023 0201 	bic.w	r2, r3, #1
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	611a      	str	r2, [r3, #16]
  }
}
 800995e:	bf00      	nop
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	40012c00 	.word	0x40012c00
 8009970:	40000400 	.word	0x40000400
 8009974:	40000800 	.word	0x40000800
 8009978:	40000c00 	.word	0x40000c00
 800997c:	40013400 	.word	0x40013400
 8009980:	40015000 	.word	0x40015000
 8009984:	40014000 	.word	0x40014000
 8009988:	40014400 	.word	0x40014400
 800998c:	40014800 	.word	0x40014800

08009990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009990:	b480      	push	{r7}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a1b      	ldr	r3, [r3, #32]
 80099a4:	f023 0201 	bic.w	r2, r3, #1
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f023 0303 	bic.w	r3, r3, #3
 80099ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f023 0302 	bic.w	r3, r3, #2
 80099dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a30      	ldr	r2, [pc, #192]	@ (8009aac <TIM_OC1_SetConfig+0x11c>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d013      	beq.n	8009a18 <TIM_OC1_SetConfig+0x88>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a2f      	ldr	r2, [pc, #188]	@ (8009ab0 <TIM_OC1_SetConfig+0x120>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d00f      	beq.n	8009a18 <TIM_OC1_SetConfig+0x88>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a2e      	ldr	r2, [pc, #184]	@ (8009ab4 <TIM_OC1_SetConfig+0x124>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d00b      	beq.n	8009a18 <TIM_OC1_SetConfig+0x88>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a2d      	ldr	r2, [pc, #180]	@ (8009ab8 <TIM_OC1_SetConfig+0x128>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d007      	beq.n	8009a18 <TIM_OC1_SetConfig+0x88>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a2c      	ldr	r2, [pc, #176]	@ (8009abc <TIM_OC1_SetConfig+0x12c>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d003      	beq.n	8009a18 <TIM_OC1_SetConfig+0x88>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a2b      	ldr	r2, [pc, #172]	@ (8009ac0 <TIM_OC1_SetConfig+0x130>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d10c      	bne.n	8009a32 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	f023 0308 	bic.w	r3, r3, #8
 8009a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f023 0304 	bic.w	r3, r3, #4
 8009a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a1d      	ldr	r2, [pc, #116]	@ (8009aac <TIM_OC1_SetConfig+0x11c>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d013      	beq.n	8009a62 <TIM_OC1_SetConfig+0xd2>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ab0 <TIM_OC1_SetConfig+0x120>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d00f      	beq.n	8009a62 <TIM_OC1_SetConfig+0xd2>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a1b      	ldr	r2, [pc, #108]	@ (8009ab4 <TIM_OC1_SetConfig+0x124>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d00b      	beq.n	8009a62 <TIM_OC1_SetConfig+0xd2>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ab8 <TIM_OC1_SetConfig+0x128>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d007      	beq.n	8009a62 <TIM_OC1_SetConfig+0xd2>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a19      	ldr	r2, [pc, #100]	@ (8009abc <TIM_OC1_SetConfig+0x12c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d003      	beq.n	8009a62 <TIM_OC1_SetConfig+0xd2>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a18      	ldr	r2, [pc, #96]	@ (8009ac0 <TIM_OC1_SetConfig+0x130>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d111      	bne.n	8009a86 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	685a      	ldr	r2, [r3, #4]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	621a      	str	r2, [r3, #32]
}
 8009aa0:	bf00      	nop
 8009aa2:	371c      	adds	r7, #28
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	40012c00 	.word	0x40012c00
 8009ab0:	40013400 	.word	0x40013400
 8009ab4:	40014000 	.word	0x40014000
 8009ab8:	40014400 	.word	0x40014400
 8009abc:	40014800 	.word	0x40014800
 8009ac0:	40015000 	.word	0x40015000

08009ac4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b087      	sub	sp, #28
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a1b      	ldr	r3, [r3, #32]
 8009ad2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a1b      	ldr	r3, [r3, #32]
 8009ad8:	f023 0210 	bic.w	r2, r3, #16
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	699b      	ldr	r3, [r3, #24]
 8009aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	021b      	lsls	r3, r3, #8
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	f023 0320 	bic.w	r3, r3, #32
 8009b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	011b      	lsls	r3, r3, #4
 8009b1a:	697a      	ldr	r2, [r7, #20]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a2c      	ldr	r2, [pc, #176]	@ (8009bd4 <TIM_OC2_SetConfig+0x110>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d007      	beq.n	8009b38 <TIM_OC2_SetConfig+0x74>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a2b      	ldr	r2, [pc, #172]	@ (8009bd8 <TIM_OC2_SetConfig+0x114>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d003      	beq.n	8009b38 <TIM_OC2_SetConfig+0x74>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a2a      	ldr	r2, [pc, #168]	@ (8009bdc <TIM_OC2_SetConfig+0x118>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d10d      	bne.n	8009b54 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	011b      	lsls	r3, r3, #4
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a1f      	ldr	r2, [pc, #124]	@ (8009bd4 <TIM_OC2_SetConfig+0x110>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d013      	beq.n	8009b84 <TIM_OC2_SetConfig+0xc0>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8009bd8 <TIM_OC2_SetConfig+0x114>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d00f      	beq.n	8009b84 <TIM_OC2_SetConfig+0xc0>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a1e      	ldr	r2, [pc, #120]	@ (8009be0 <TIM_OC2_SetConfig+0x11c>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d00b      	beq.n	8009b84 <TIM_OC2_SetConfig+0xc0>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8009be4 <TIM_OC2_SetConfig+0x120>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d007      	beq.n	8009b84 <TIM_OC2_SetConfig+0xc0>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a1c      	ldr	r2, [pc, #112]	@ (8009be8 <TIM_OC2_SetConfig+0x124>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d003      	beq.n	8009b84 <TIM_OC2_SetConfig+0xc0>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a17      	ldr	r2, [pc, #92]	@ (8009bdc <TIM_OC2_SetConfig+0x118>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d113      	bne.n	8009bac <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	695b      	ldr	r3, [r3, #20]
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	693a      	ldr	r2, [r7, #16]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	621a      	str	r2, [r3, #32]
}
 8009bc6:	bf00      	nop
 8009bc8:	371c      	adds	r7, #28
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	40012c00 	.word	0x40012c00
 8009bd8:	40013400 	.word	0x40013400
 8009bdc:	40015000 	.word	0x40015000
 8009be0:	40014000 	.word	0x40014000
 8009be4:	40014400 	.word	0x40014400
 8009be8:	40014800 	.word	0x40014800

08009bec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b087      	sub	sp, #28
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a1b      	ldr	r3, [r3, #32]
 8009c00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f023 0303 	bic.w	r3, r3, #3
 8009c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	021b      	lsls	r3, r3, #8
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a2b      	ldr	r2, [pc, #172]	@ (8009cf8 <TIM_OC3_SetConfig+0x10c>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d007      	beq.n	8009c5e <TIM_OC3_SetConfig+0x72>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a2a      	ldr	r2, [pc, #168]	@ (8009cfc <TIM_OC3_SetConfig+0x110>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d003      	beq.n	8009c5e <TIM_OC3_SetConfig+0x72>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a29      	ldr	r2, [pc, #164]	@ (8009d00 <TIM_OC3_SetConfig+0x114>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d10d      	bne.n	8009c7a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	021b      	lsls	r3, r3, #8
 8009c6c:	697a      	ldr	r2, [r7, #20]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8009cf8 <TIM_OC3_SetConfig+0x10c>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d013      	beq.n	8009caa <TIM_OC3_SetConfig+0xbe>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a1d      	ldr	r2, [pc, #116]	@ (8009cfc <TIM_OC3_SetConfig+0x110>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d00f      	beq.n	8009caa <TIM_OC3_SetConfig+0xbe>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8009d04 <TIM_OC3_SetConfig+0x118>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d00b      	beq.n	8009caa <TIM_OC3_SetConfig+0xbe>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a1c      	ldr	r2, [pc, #112]	@ (8009d08 <TIM_OC3_SetConfig+0x11c>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d007      	beq.n	8009caa <TIM_OC3_SetConfig+0xbe>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8009d0c <TIM_OC3_SetConfig+0x120>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d003      	beq.n	8009caa <TIM_OC3_SetConfig+0xbe>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a16      	ldr	r2, [pc, #88]	@ (8009d00 <TIM_OC3_SetConfig+0x114>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d113      	bne.n	8009cd2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	695b      	ldr	r3, [r3, #20]
 8009cbe:	011b      	lsls	r3, r3, #4
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	011b      	lsls	r3, r3, #4
 8009ccc:	693a      	ldr	r2, [r7, #16]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	697a      	ldr	r2, [r7, #20]
 8009cea:	621a      	str	r2, [r3, #32]
}
 8009cec:	bf00      	nop
 8009cee:	371c      	adds	r7, #28
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	40012c00 	.word	0x40012c00
 8009cfc:	40013400 	.word	0x40013400
 8009d00:	40015000 	.word	0x40015000
 8009d04:	40014000 	.word	0x40014000
 8009d08:	40014400 	.word	0x40014400
 8009d0c:	40014800 	.word	0x40014800

08009d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b087      	sub	sp, #28
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a1b      	ldr	r3, [r3, #32]
 8009d24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	69db      	ldr	r3, [r3, #28]
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	021b      	lsls	r3, r3, #8
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	031b      	lsls	r3, r3, #12
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a2c      	ldr	r2, [pc, #176]	@ (8009e20 <TIM_OC4_SetConfig+0x110>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d007      	beq.n	8009d84 <TIM_OC4_SetConfig+0x74>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a2b      	ldr	r2, [pc, #172]	@ (8009e24 <TIM_OC4_SetConfig+0x114>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d003      	beq.n	8009d84 <TIM_OC4_SetConfig+0x74>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8009e28 <TIM_OC4_SetConfig+0x118>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d10d      	bne.n	8009da0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	031b      	lsls	r3, r3, #12
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a1f      	ldr	r2, [pc, #124]	@ (8009e20 <TIM_OC4_SetConfig+0x110>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d013      	beq.n	8009dd0 <TIM_OC4_SetConfig+0xc0>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a1e      	ldr	r2, [pc, #120]	@ (8009e24 <TIM_OC4_SetConfig+0x114>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d00f      	beq.n	8009dd0 <TIM_OC4_SetConfig+0xc0>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a1e      	ldr	r2, [pc, #120]	@ (8009e2c <TIM_OC4_SetConfig+0x11c>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d00b      	beq.n	8009dd0 <TIM_OC4_SetConfig+0xc0>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a1d      	ldr	r2, [pc, #116]	@ (8009e30 <TIM_OC4_SetConfig+0x120>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d007      	beq.n	8009dd0 <TIM_OC4_SetConfig+0xc0>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8009e34 <TIM_OC4_SetConfig+0x124>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d003      	beq.n	8009dd0 <TIM_OC4_SetConfig+0xc0>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a17      	ldr	r2, [pc, #92]	@ (8009e28 <TIM_OC4_SetConfig+0x118>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d113      	bne.n	8009df8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009dd6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009dde:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	695b      	ldr	r3, [r3, #20]
 8009de4:	019b      	lsls	r3, r3, #6
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	019b      	lsls	r3, r3, #6
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	621a      	str	r2, [r3, #32]
}
 8009e12:	bf00      	nop
 8009e14:	371c      	adds	r7, #28
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	40012c00 	.word	0x40012c00
 8009e24:	40013400 	.word	0x40013400
 8009e28:	40015000 	.word	0x40015000
 8009e2c:	40014000 	.word	0x40014000
 8009e30:	40014400 	.word	0x40014400
 8009e34:	40014800 	.word	0x40014800

08009e38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b087      	sub	sp, #28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a1b      	ldr	r3, [r3, #32]
 8009e46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a1b      	ldr	r3, [r3, #32]
 8009e4c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009e7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	041b      	lsls	r3, r3, #16
 8009e84:	693a      	ldr	r2, [r7, #16]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a19      	ldr	r2, [pc, #100]	@ (8009ef4 <TIM_OC5_SetConfig+0xbc>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d013      	beq.n	8009eba <TIM_OC5_SetConfig+0x82>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a18      	ldr	r2, [pc, #96]	@ (8009ef8 <TIM_OC5_SetConfig+0xc0>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d00f      	beq.n	8009eba <TIM_OC5_SetConfig+0x82>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a17      	ldr	r2, [pc, #92]	@ (8009efc <TIM_OC5_SetConfig+0xc4>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d00b      	beq.n	8009eba <TIM_OC5_SetConfig+0x82>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a16      	ldr	r2, [pc, #88]	@ (8009f00 <TIM_OC5_SetConfig+0xc8>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d007      	beq.n	8009eba <TIM_OC5_SetConfig+0x82>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a15      	ldr	r2, [pc, #84]	@ (8009f04 <TIM_OC5_SetConfig+0xcc>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d003      	beq.n	8009eba <TIM_OC5_SetConfig+0x82>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a14      	ldr	r2, [pc, #80]	@ (8009f08 <TIM_OC5_SetConfig+0xd0>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d109      	bne.n	8009ece <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	695b      	ldr	r3, [r3, #20]
 8009ec6:	021b      	lsls	r3, r3, #8
 8009ec8:	697a      	ldr	r2, [r7, #20]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	685a      	ldr	r2, [r3, #4]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	621a      	str	r2, [r3, #32]
}
 8009ee8:	bf00      	nop
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	40012c00 	.word	0x40012c00
 8009ef8:	40013400 	.word	0x40013400
 8009efc:	40014000 	.word	0x40014000
 8009f00:	40014400 	.word	0x40014400
 8009f04:	40014800 	.word	0x40014800
 8009f08:	40015000 	.word	0x40015000

08009f0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b087      	sub	sp, #28
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a1b      	ldr	r3, [r3, #32]
 8009f20:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	021b      	lsls	r3, r3, #8
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	051b      	lsls	r3, r3, #20
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a1a      	ldr	r2, [pc, #104]	@ (8009fcc <TIM_OC6_SetConfig+0xc0>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d013      	beq.n	8009f90 <TIM_OC6_SetConfig+0x84>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a19      	ldr	r2, [pc, #100]	@ (8009fd0 <TIM_OC6_SetConfig+0xc4>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d00f      	beq.n	8009f90 <TIM_OC6_SetConfig+0x84>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a18      	ldr	r2, [pc, #96]	@ (8009fd4 <TIM_OC6_SetConfig+0xc8>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d00b      	beq.n	8009f90 <TIM_OC6_SetConfig+0x84>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a17      	ldr	r2, [pc, #92]	@ (8009fd8 <TIM_OC6_SetConfig+0xcc>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d007      	beq.n	8009f90 <TIM_OC6_SetConfig+0x84>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a16      	ldr	r2, [pc, #88]	@ (8009fdc <TIM_OC6_SetConfig+0xd0>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d003      	beq.n	8009f90 <TIM_OC6_SetConfig+0x84>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a15      	ldr	r2, [pc, #84]	@ (8009fe0 <TIM_OC6_SetConfig+0xd4>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d109      	bne.n	8009fa4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	695b      	ldr	r3, [r3, #20]
 8009f9c:	029b      	lsls	r3, r3, #10
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	685a      	ldr	r2, [r3, #4]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	621a      	str	r2, [r3, #32]
}
 8009fbe:	bf00      	nop
 8009fc0:	371c      	adds	r7, #28
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	40012c00 	.word	0x40012c00
 8009fd0:	40013400 	.word	0x40013400
 8009fd4:	40014000 	.word	0x40014000
 8009fd8:	40014400 	.word	0x40014400
 8009fdc:	40014800 	.word	0x40014800
 8009fe0:	40015000 	.word	0x40015000

08009fe4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a004:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a016:	f023 0307 	bic.w	r3, r3, #7
 800a01a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	4313      	orrs	r3, r2
 800a024:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	4a56      	ldr	r2, [pc, #344]	@ (800a18c <TIM_SlaveTimer_SetConfig+0x1a8>)
 800a034:	4293      	cmp	r3, r2
 800a036:	f000 80a2 	beq.w	800a17e <TIM_SlaveTimer_SetConfig+0x19a>
 800a03a:	4a54      	ldr	r2, [pc, #336]	@ (800a18c <TIM_SlaveTimer_SetConfig+0x1a8>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	f200 809b 	bhi.w	800a178 <TIM_SlaveTimer_SetConfig+0x194>
 800a042:	4a53      	ldr	r2, [pc, #332]	@ (800a190 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800a044:	4293      	cmp	r3, r2
 800a046:	f000 809a 	beq.w	800a17e <TIM_SlaveTimer_SetConfig+0x19a>
 800a04a:	4a51      	ldr	r2, [pc, #324]	@ (800a190 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	f200 8093 	bhi.w	800a178 <TIM_SlaveTimer_SetConfig+0x194>
 800a052:	4a50      	ldr	r2, [pc, #320]	@ (800a194 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800a054:	4293      	cmp	r3, r2
 800a056:	f000 8092 	beq.w	800a17e <TIM_SlaveTimer_SetConfig+0x19a>
 800a05a:	4a4e      	ldr	r2, [pc, #312]	@ (800a194 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	f200 808b 	bhi.w	800a178 <TIM_SlaveTimer_SetConfig+0x194>
 800a062:	4a4d      	ldr	r2, [pc, #308]	@ (800a198 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800a064:	4293      	cmp	r3, r2
 800a066:	f000 808a 	beq.w	800a17e <TIM_SlaveTimer_SetConfig+0x19a>
 800a06a:	4a4b      	ldr	r2, [pc, #300]	@ (800a198 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	f200 8083 	bhi.w	800a178 <TIM_SlaveTimer_SetConfig+0x194>
 800a072:	4a4a      	ldr	r2, [pc, #296]	@ (800a19c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800a074:	4293      	cmp	r3, r2
 800a076:	f000 8082 	beq.w	800a17e <TIM_SlaveTimer_SetConfig+0x19a>
 800a07a:	4a48      	ldr	r2, [pc, #288]	@ (800a19c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d87b      	bhi.n	800a178 <TIM_SlaveTimer_SetConfig+0x194>
 800a080:	4a47      	ldr	r2, [pc, #284]	@ (800a1a0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d07b      	beq.n	800a17e <TIM_SlaveTimer_SetConfig+0x19a>
 800a086:	4a46      	ldr	r2, [pc, #280]	@ (800a1a0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d875      	bhi.n	800a178 <TIM_SlaveTimer_SetConfig+0x194>
 800a08c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a090:	d075      	beq.n	800a17e <TIM_SlaveTimer_SetConfig+0x19a>
 800a092:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a096:	d86f      	bhi.n	800a178 <TIM_SlaveTimer_SetConfig+0x194>
 800a098:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a09c:	d06f      	beq.n	800a17e <TIM_SlaveTimer_SetConfig+0x19a>
 800a09e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0a2:	d869      	bhi.n	800a178 <TIM_SlaveTimer_SetConfig+0x194>
 800a0a4:	2b70      	cmp	r3, #112	@ 0x70
 800a0a6:	d01a      	beq.n	800a0de <TIM_SlaveTimer_SetConfig+0xfa>
 800a0a8:	2b70      	cmp	r3, #112	@ 0x70
 800a0aa:	d865      	bhi.n	800a178 <TIM_SlaveTimer_SetConfig+0x194>
 800a0ac:	2b60      	cmp	r3, #96	@ 0x60
 800a0ae:	d059      	beq.n	800a164 <TIM_SlaveTimer_SetConfig+0x180>
 800a0b0:	2b60      	cmp	r3, #96	@ 0x60
 800a0b2:	d861      	bhi.n	800a178 <TIM_SlaveTimer_SetConfig+0x194>
 800a0b4:	2b50      	cmp	r3, #80	@ 0x50
 800a0b6:	d04b      	beq.n	800a150 <TIM_SlaveTimer_SetConfig+0x16c>
 800a0b8:	2b50      	cmp	r3, #80	@ 0x50
 800a0ba:	d85d      	bhi.n	800a178 <TIM_SlaveTimer_SetConfig+0x194>
 800a0bc:	2b40      	cmp	r3, #64	@ 0x40
 800a0be:	d019      	beq.n	800a0f4 <TIM_SlaveTimer_SetConfig+0x110>
 800a0c0:	2b40      	cmp	r3, #64	@ 0x40
 800a0c2:	d859      	bhi.n	800a178 <TIM_SlaveTimer_SetConfig+0x194>
 800a0c4:	2b30      	cmp	r3, #48	@ 0x30
 800a0c6:	d05a      	beq.n	800a17e <TIM_SlaveTimer_SetConfig+0x19a>
 800a0c8:	2b30      	cmp	r3, #48	@ 0x30
 800a0ca:	d855      	bhi.n	800a178 <TIM_SlaveTimer_SetConfig+0x194>
 800a0cc:	2b20      	cmp	r3, #32
 800a0ce:	d056      	beq.n	800a17e <TIM_SlaveTimer_SetConfig+0x19a>
 800a0d0:	2b20      	cmp	r3, #32
 800a0d2:	d851      	bhi.n	800a178 <TIM_SlaveTimer_SetConfig+0x194>
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d052      	beq.n	800a17e <TIM_SlaveTimer_SetConfig+0x19a>
 800a0d8:	2b10      	cmp	r3, #16
 800a0da:	d050      	beq.n	800a17e <TIM_SlaveTimer_SetConfig+0x19a>
 800a0dc:	e04c      	b.n	800a178 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800a0ee:	f000 f9ff 	bl	800a4f0 <TIM_ETR_SetConfig>
      break;
 800a0f2:	e045      	b.n	800a180 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2b05      	cmp	r3, #5
 800a0fa:	d004      	beq.n	800a106 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800a100:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800a104:	d101      	bne.n	800a10a <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e03b      	b.n	800a182 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6a1a      	ldr	r2, [r3, #32]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f022 0201 	bic.w	r2, r2, #1
 800a120:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a130:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	011b      	lsls	r3, r3, #4
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	621a      	str	r2, [r3, #32]
      break;
 800a14e:	e017      	b.n	800a180 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a15c:	461a      	mov	r2, r3
 800a15e:	f000 f895 	bl	800a28c <TIM_TI1_ConfigInputStage>
      break;
 800a162:	e00d      	b.n	800a180 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a170:	461a      	mov	r2, r3
 800a172:	f000 f8f7 	bl	800a364 <TIM_TI2_ConfigInputStage>
      break;
 800a176:	e003      	b.n	800a180 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	75fb      	strb	r3, [r7, #23]
      break;
 800a17c:	e000      	b.n	800a180 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800a17e:	bf00      	nop
  }

  return status;
 800a180:	7dfb      	ldrb	r3, [r7, #23]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3718      	adds	r7, #24
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	00100070 	.word	0x00100070
 800a190:	00100060 	.word	0x00100060
 800a194:	00100050 	.word	0x00100050
 800a198:	00100040 	.word	0x00100040
 800a19c:	00100030 	.word	0x00100030
 800a1a0:	00100020 	.word	0x00100020

0800a1a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	607a      	str	r2, [r7, #4]
 800a1b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6a1b      	ldr	r3, [r3, #32]
 800a1bc:	f023 0201 	bic.w	r2, r3, #1
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	4a28      	ldr	r2, [pc, #160]	@ (800a270 <TIM_TI1_SetConfig+0xcc>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d01b      	beq.n	800a20a <TIM_TI1_SetConfig+0x66>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1d8:	d017      	beq.n	800a20a <TIM_TI1_SetConfig+0x66>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	4a25      	ldr	r2, [pc, #148]	@ (800a274 <TIM_TI1_SetConfig+0xd0>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d013      	beq.n	800a20a <TIM_TI1_SetConfig+0x66>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	4a24      	ldr	r2, [pc, #144]	@ (800a278 <TIM_TI1_SetConfig+0xd4>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d00f      	beq.n	800a20a <TIM_TI1_SetConfig+0x66>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	4a23      	ldr	r2, [pc, #140]	@ (800a27c <TIM_TI1_SetConfig+0xd8>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d00b      	beq.n	800a20a <TIM_TI1_SetConfig+0x66>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	4a22      	ldr	r2, [pc, #136]	@ (800a280 <TIM_TI1_SetConfig+0xdc>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d007      	beq.n	800a20a <TIM_TI1_SetConfig+0x66>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	4a21      	ldr	r2, [pc, #132]	@ (800a284 <TIM_TI1_SetConfig+0xe0>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d003      	beq.n	800a20a <TIM_TI1_SetConfig+0x66>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	4a20      	ldr	r2, [pc, #128]	@ (800a288 <TIM_TI1_SetConfig+0xe4>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d101      	bne.n	800a20e <TIM_TI1_SetConfig+0x6a>
 800a20a:	2301      	movs	r3, #1
 800a20c:	e000      	b.n	800a210 <TIM_TI1_SetConfig+0x6c>
 800a20e:	2300      	movs	r3, #0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d008      	beq.n	800a226 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f023 0303 	bic.w	r3, r3, #3
 800a21a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a21c:	697a      	ldr	r2, [r7, #20]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4313      	orrs	r3, r2
 800a222:	617b      	str	r3, [r7, #20]
 800a224:	e003      	b.n	800a22e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	f043 0301 	orr.w	r3, r3, #1
 800a22c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	011b      	lsls	r3, r3, #4
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	4313      	orrs	r3, r2
 800a240:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f023 030a 	bic.w	r3, r3, #10
 800a248:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	f003 030a 	and.w	r3, r3, #10
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	4313      	orrs	r3, r2
 800a254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	621a      	str	r2, [r3, #32]
}
 800a262:	bf00      	nop
 800a264:	371c      	adds	r7, #28
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	40012c00 	.word	0x40012c00
 800a274:	40000400 	.word	0x40000400
 800a278:	40000800 	.word	0x40000800
 800a27c:	40000c00 	.word	0x40000c00
 800a280:	40013400 	.word	0x40013400
 800a284:	40014000 	.word	0x40014000
 800a288:	40015000 	.word	0x40015000

0800a28c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b087      	sub	sp, #28
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6a1b      	ldr	r3, [r3, #32]
 800a29c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	f023 0201 	bic.w	r2, r3, #1
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a2b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	011b      	lsls	r3, r3, #4
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	f023 030a 	bic.w	r3, r3, #10
 800a2c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	621a      	str	r2, [r3, #32]
}
 800a2de:	bf00      	nop
 800a2e0:	371c      	adds	r7, #28
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a2ea:	b480      	push	{r7}
 800a2ec:	b087      	sub	sp, #28
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	60f8      	str	r0, [r7, #12]
 800a2f2:	60b9      	str	r1, [r7, #8]
 800a2f4:	607a      	str	r2, [r7, #4]
 800a2f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6a1b      	ldr	r3, [r3, #32]
 800a2fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	f023 0210 	bic.w	r2, r3, #16
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	021b      	lsls	r3, r3, #8
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	4313      	orrs	r3, r2
 800a320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	031b      	lsls	r3, r3, #12
 800a32e:	b29b      	uxth	r3, r3
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	4313      	orrs	r3, r2
 800a334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a33c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	011b      	lsls	r3, r3, #4
 800a342:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a346:	697a      	ldr	r2, [r7, #20]
 800a348:	4313      	orrs	r3, r2
 800a34a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	621a      	str	r2, [r3, #32]
}
 800a358:	bf00      	nop
 800a35a:	371c      	adds	r7, #28
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a364:	b480      	push	{r7}
 800a366:	b087      	sub	sp, #28
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6a1b      	ldr	r3, [r3, #32]
 800a374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6a1b      	ldr	r3, [r3, #32]
 800a37a:	f023 0210 	bic.w	r2, r3, #16
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	699b      	ldr	r3, [r3, #24]
 800a386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a38e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	031b      	lsls	r3, r3, #12
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	4313      	orrs	r3, r2
 800a398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a3a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	011b      	lsls	r3, r3, #4
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	697a      	ldr	r2, [r7, #20]
 800a3b6:	621a      	str	r2, [r3, #32]
}
 800a3b8:	bf00      	nop
 800a3ba:	371c      	adds	r7, #28
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
 800a3d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	f023 0303 	bic.w	r3, r3, #3
 800a3f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a400:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	011b      	lsls	r3, r3, #4
 800a406:	b2db      	uxtb	r3, r3
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a414:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	021b      	lsls	r3, r3, #8
 800a41a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	4313      	orrs	r3, r2
 800a422:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	621a      	str	r2, [r3, #32]
}
 800a430:	bf00      	nop
 800a432:	371c      	adds	r7, #28
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
 800a448:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6a1b      	ldr	r3, [r3, #32]
 800a44e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6a1b      	ldr	r3, [r3, #32]
 800a454:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	69db      	ldr	r3, [r3, #28]
 800a460:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a468:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	021b      	lsls	r3, r3, #8
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	4313      	orrs	r3, r2
 800a472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a47a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	031b      	lsls	r3, r3, #12
 800a480:	b29b      	uxth	r3, r3
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	4313      	orrs	r3, r2
 800a486:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a48e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	031b      	lsls	r3, r3, #12
 800a494:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	621a      	str	r2, [r3, #32]
}
 800a4aa:	bf00      	nop
 800a4ac:	371c      	adds	r7, #28
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b085      	sub	sp, #20
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a4cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	f043 0307 	orr.w	r3, r3, #7
 800a4dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	609a      	str	r2, [r3, #8]
}
 800a4e4:	bf00      	nop
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
 800a4fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a50a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	021a      	lsls	r2, r3, #8
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	431a      	orrs	r2, r3
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	4313      	orrs	r3, r2
 800a518:	697a      	ldr	r2, [r7, #20]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	609a      	str	r2, [r3, #8]
}
 800a524:	bf00      	nop
 800a526:	371c      	adds	r7, #28
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a530:	b480      	push	{r7}
 800a532:	b087      	sub	sp, #28
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	f003 031f 	and.w	r3, r3, #31
 800a542:	2201      	movs	r2, #1
 800a544:	fa02 f303 	lsl.w	r3, r2, r3
 800a548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6a1a      	ldr	r2, [r3, #32]
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	43db      	mvns	r3, r3
 800a552:	401a      	ands	r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6a1a      	ldr	r2, [r3, #32]
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	f003 031f 	and.w	r3, r3, #31
 800a562:	6879      	ldr	r1, [r7, #4]
 800a564:	fa01 f303 	lsl.w	r3, r1, r3
 800a568:	431a      	orrs	r2, r3
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	621a      	str	r2, [r3, #32]
}
 800a56e:	bf00      	nop
 800a570:	371c      	adds	r7, #28
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
	...

0800a57c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a26      	ldr	r2, [pc, #152]	@ (800a620 <TIM_ResetCallback+0xa4>)
 800a588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4a25      	ldr	r2, [pc, #148]	@ (800a624 <TIM_ResetCallback+0xa8>)
 800a590:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a24      	ldr	r2, [pc, #144]	@ (800a628 <TIM_ResetCallback+0xac>)
 800a598:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a23      	ldr	r2, [pc, #140]	@ (800a62c <TIM_ResetCallback+0xb0>)
 800a5a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a22      	ldr	r2, [pc, #136]	@ (800a630 <TIM_ResetCallback+0xb4>)
 800a5a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a21      	ldr	r2, [pc, #132]	@ (800a634 <TIM_ResetCallback+0xb8>)
 800a5b0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a20      	ldr	r2, [pc, #128]	@ (800a638 <TIM_ResetCallback+0xbc>)
 800a5b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a1f      	ldr	r2, [pc, #124]	@ (800a63c <TIM_ResetCallback+0xc0>)
 800a5c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a1e      	ldr	r2, [pc, #120]	@ (800a640 <TIM_ResetCallback+0xc4>)
 800a5c8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a1d      	ldr	r2, [pc, #116]	@ (800a644 <TIM_ResetCallback+0xc8>)
 800a5d0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a1c      	ldr	r2, [pc, #112]	@ (800a648 <TIM_ResetCallback+0xcc>)
 800a5d8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a1b      	ldr	r2, [pc, #108]	@ (800a64c <TIM_ResetCallback+0xd0>)
 800a5e0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a1a      	ldr	r2, [pc, #104]	@ (800a650 <TIM_ResetCallback+0xd4>)
 800a5e8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a19      	ldr	r2, [pc, #100]	@ (800a654 <TIM_ResetCallback+0xd8>)
 800a5f0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a18      	ldr	r2, [pc, #96]	@ (800a658 <TIM_ResetCallback+0xdc>)
 800a5f8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a17      	ldr	r2, [pc, #92]	@ (800a65c <TIM_ResetCallback+0xe0>)
 800a600:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a16      	ldr	r2, [pc, #88]	@ (800a660 <TIM_ResetCallback+0xe4>)
 800a608:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a15      	ldr	r2, [pc, #84]	@ (800a664 <TIM_ResetCallback+0xe8>)
 800a610:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr
 800a620:	08004aa9 	.word	0x08004aa9
 800a624:	080094b5 	.word	0x080094b5
 800a628:	0800952d 	.word	0x0800952d
 800a62c:	08009541 	.word	0x08009541
 800a630:	080094dd 	.word	0x080094dd
 800a634:	080094f1 	.word	0x080094f1
 800a638:	080094c9 	.word	0x080094c9
 800a63c:	08009505 	.word	0x08009505
 800a640:	08009519 	.word	0x08009519
 800a644:	08009555 	.word	0x08009555
 800a648:	0800a8bd 	.word	0x0800a8bd
 800a64c:	0800a8d1 	.word	0x0800a8d1
 800a650:	0800a8e5 	.word	0x0800a8e5
 800a654:	0800a8f9 	.word	0x0800a8f9
 800a658:	0800a90d 	.word	0x0800a90d
 800a65c:	0800a921 	.word	0x0800a921
 800a660:	0800a935 	.word	0x0800a935
 800a664:	0800a949 	.word	0x0800a949

0800a668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d101      	bne.n	800a680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a67c:	2302      	movs	r3, #2
 800a67e:	e074      	b.n	800a76a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a34      	ldr	r2, [pc, #208]	@ (800a778 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d009      	beq.n	800a6be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a33      	ldr	r2, [pc, #204]	@ (800a77c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d004      	beq.n	800a6be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a31      	ldr	r2, [pc, #196]	@ (800a780 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d108      	bne.n	800a6d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a6c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a6d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a21      	ldr	r2, [pc, #132]	@ (800a778 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d022      	beq.n	800a73e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a700:	d01d      	beq.n	800a73e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a1f      	ldr	r2, [pc, #124]	@ (800a784 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d018      	beq.n	800a73e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a1d      	ldr	r2, [pc, #116]	@ (800a788 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d013      	beq.n	800a73e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a1c      	ldr	r2, [pc, #112]	@ (800a78c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d00e      	beq.n	800a73e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a15      	ldr	r2, [pc, #84]	@ (800a77c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d009      	beq.n	800a73e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a18      	ldr	r2, [pc, #96]	@ (800a790 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d004      	beq.n	800a73e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a11      	ldr	r2, [pc, #68]	@ (800a780 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d10c      	bne.n	800a758 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	40012c00 	.word	0x40012c00
 800a77c:	40013400 	.word	0x40013400
 800a780:	40015000 	.word	0x40015000
 800a784:	40000400 	.word	0x40000400
 800a788:	40000800 	.word	0x40000800
 800a78c:	40000c00 	.word	0x40000c00
 800a790:	40014000 	.word	0x40014000

0800a794 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d101      	bne.n	800a7b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	e078      	b.n	800a8a2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	691b      	ldr	r3, [r3, #16]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	695b      	ldr	r3, [r3, #20]
 800a808:	4313      	orrs	r3, r2
 800a80a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a816:	4313      	orrs	r3, r2
 800a818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	699b      	ldr	r3, [r3, #24]
 800a824:	041b      	lsls	r3, r3, #16
 800a826:	4313      	orrs	r3, r2
 800a828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	69db      	ldr	r3, [r3, #28]
 800a834:	4313      	orrs	r3, r2
 800a836:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a1c      	ldr	r2, [pc, #112]	@ (800a8b0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d009      	beq.n	800a856 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a1b      	ldr	r2, [pc, #108]	@ (800a8b4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d004      	beq.n	800a856 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a19      	ldr	r2, [pc, #100]	@ (800a8b8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d11c      	bne.n	800a890 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a860:	051b      	lsls	r3, r3, #20
 800a862:	4313      	orrs	r3, r2
 800a864:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	6a1b      	ldr	r3, [r3, #32]
 800a870:	4313      	orrs	r3, r2
 800a872:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a87e:	4313      	orrs	r3, r2
 800a880:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a88c:	4313      	orrs	r3, r2
 800a88e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	40012c00 	.word	0x40012c00
 800a8b4:	40013400 	.word	0x40013400
 800a8b8:	40015000 	.word	0x40015000

0800a8bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e050      	b.n	800aa10 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a974:	2b00      	cmp	r3, #0
 800a976:	d114      	bne.n	800a9a2 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fde5 	bl	800b550 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d103      	bne.n	800a998 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4a21      	ldr	r2, [pc, #132]	@ (800aa18 <HAL_UART_Init+0xbc>)
 800a994:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2224      	movs	r2, #36	@ 0x24
 800a9a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f022 0201 	bic.w	r2, r2, #1
 800a9b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d002      	beq.n	800a9c8 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f001 f912 	bl	800bbec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fe13 	bl	800b5f4 <UART_SetConfig>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d101      	bne.n	800a9d8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e01b      	b.n	800aa10 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a9e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	689a      	ldr	r2, [r3, #8]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a9f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f042 0201 	orr.w	r2, r2, #1
 800aa06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f001 f991 	bl	800bd30 <UART_CheckIdleState>
 800aa0e:	4603      	mov	r3, r0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	08005e35 	.word	0x08005e35

0800aa1c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b087      	sub	sp, #28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	460b      	mov	r3, r1
 800aa26:	607a      	str	r2, [r7, #4]
 800aa28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d109      	bne.n	800aa48 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	e09c      	b.n	800ab82 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa4e:	2b20      	cmp	r3, #32
 800aa50:	d16c      	bne.n	800ab2c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800aa52:	7afb      	ldrb	r3, [r7, #11]
 800aa54:	2b0c      	cmp	r3, #12
 800aa56:	d85e      	bhi.n	800ab16 <HAL_UART_RegisterCallback+0xfa>
 800aa58:	a201      	add	r2, pc, #4	@ (adr r2, 800aa60 <HAL_UART_RegisterCallback+0x44>)
 800aa5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5e:	bf00      	nop
 800aa60:	0800aa95 	.word	0x0800aa95
 800aa64:	0800aa9f 	.word	0x0800aa9f
 800aa68:	0800aaa9 	.word	0x0800aaa9
 800aa6c:	0800aab3 	.word	0x0800aab3
 800aa70:	0800aabd 	.word	0x0800aabd
 800aa74:	0800aac7 	.word	0x0800aac7
 800aa78:	0800aad1 	.word	0x0800aad1
 800aa7c:	0800aadb 	.word	0x0800aadb
 800aa80:	0800aae5 	.word	0x0800aae5
 800aa84:	0800aaef 	.word	0x0800aaef
 800aa88:	0800aaf9 	.word	0x0800aaf9
 800aa8c:	0800ab03 	.word	0x0800ab03
 800aa90:	0800ab0d 	.word	0x0800ab0d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800aa9c:	e070      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800aaa6:	e06b      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800aab0:	e066      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800aaba:	e061      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800aac4:	e05c      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800aace:	e057      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800aad8:	e052      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800aae2:	e04d      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800aaec:	e048      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800aaf6:	e043      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800ab00:	e03e      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800ab0a:	e039      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800ab14:	e034      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	75fb      	strb	r3, [r7, #23]
        break;
 800ab2a:	e029      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d11a      	bne.n	800ab6c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800ab36:	7afb      	ldrb	r3, [r7, #11]
 800ab38:	2b0b      	cmp	r3, #11
 800ab3a:	d002      	beq.n	800ab42 <HAL_UART_RegisterCallback+0x126>
 800ab3c:	2b0c      	cmp	r3, #12
 800ab3e:	d005      	beq.n	800ab4c <HAL_UART_RegisterCallback+0x130>
 800ab40:	e009      	b.n	800ab56 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800ab4a:	e019      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800ab54:	e014      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	75fb      	strb	r3, [r7, #23]
        break;
 800ab6a:	e009      	b.n	800ab80 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	371c      	adds	r7, #28
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop

0800ab90 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b08a      	sub	sp, #40	@ 0x28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aba4:	2b20      	cmp	r3, #32
 800aba6:	d167      	bne.n	800ac78 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d002      	beq.n	800abb4 <HAL_UART_Transmit_DMA+0x24>
 800abae:	88fb      	ldrh	r3, [r7, #6]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e060      	b.n	800ac7a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	88fa      	ldrh	r2, [r7, #6]
 800abc2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	88fa      	ldrh	r2, [r7, #6]
 800abca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2221      	movs	r2, #33	@ 0x21
 800abda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d028      	beq.n	800ac38 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abea:	4a26      	ldr	r2, [pc, #152]	@ (800ac84 <HAL_UART_Transmit_DMA+0xf4>)
 800abec:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abf2:	4a25      	ldr	r2, [pc, #148]	@ (800ac88 <HAL_UART_Transmit_DMA+0xf8>)
 800abf4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abfa:	4a24      	ldr	r2, [pc, #144]	@ (800ac8c <HAL_UART_Transmit_DMA+0xfc>)
 800abfc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac02:	2200      	movs	r2, #0
 800ac04:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac0e:	4619      	mov	r1, r3
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	3328      	adds	r3, #40	@ 0x28
 800ac16:	461a      	mov	r2, r3
 800ac18:	88fb      	ldrh	r3, [r7, #6]
 800ac1a:	f7fb fcd9 	bl	80065d0 <HAL_DMA_Start_IT>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d009      	beq.n	800ac38 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2210      	movs	r2, #16
 800ac28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2220      	movs	r2, #32
 800ac30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ac34:	2301      	movs	r3, #1
 800ac36:	e020      	b.n	800ac7a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2240      	movs	r2, #64	@ 0x40
 800ac3e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	3308      	adds	r3, #8
 800ac46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	e853 3f00 	ldrex	r3, [r3]
 800ac4e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac56:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3308      	adds	r3, #8
 800ac5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac60:	623a      	str	r2, [r7, #32]
 800ac62:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac64:	69f9      	ldr	r1, [r7, #28]
 800ac66:	6a3a      	ldr	r2, [r7, #32]
 800ac68:	e841 2300 	strex	r3, r2, [r1]
 800ac6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d1e5      	bne.n	800ac40 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	e000      	b.n	800ac7a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ac78:	2302      	movs	r3, #2
  }
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3728      	adds	r7, #40	@ 0x28
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	0800c1fb 	.word	0x0800c1fb
 800ac88:	0800c299 	.word	0x0800c299
 800ac8c:	0800c433 	.word	0x0800c433

0800ac90 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b08a      	sub	sp, #40	@ 0x28
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aca4:	2b20      	cmp	r3, #32
 800aca6:	d137      	bne.n	800ad18 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d002      	beq.n	800acb4 <HAL_UART_Receive_DMA+0x24>
 800acae:	88fb      	ldrh	r3, [r7, #6]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e030      	b.n	800ad1a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2200      	movs	r2, #0
 800acbc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a18      	ldr	r2, [pc, #96]	@ (800ad24 <HAL_UART_Receive_DMA+0x94>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d01f      	beq.n	800ad08 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d018      	beq.n	800ad08 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	e853 3f00 	ldrex	r3, [r3]
 800ace2:	613b      	str	r3, [r7, #16]
   return(result);
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800acea:	627b      	str	r3, [r7, #36]	@ 0x24
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	461a      	mov	r2, r3
 800acf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf4:	623b      	str	r3, [r7, #32]
 800acf6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf8:	69f9      	ldr	r1, [r7, #28]
 800acfa:	6a3a      	ldr	r2, [r7, #32]
 800acfc:	e841 2300 	strex	r3, r2, [r1]
 800ad00:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1e6      	bne.n	800acd6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ad08:	88fb      	ldrh	r3, [r7, #6]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	68b9      	ldr	r1, [r7, #8]
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f001 f926 	bl	800bf60 <UART_Start_Receive_DMA>
 800ad14:	4603      	mov	r3, r0
 800ad16:	e000      	b.n	800ad1a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ad18:	2302      	movs	r3, #2
  }
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3728      	adds	r7, #40	@ 0x28
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	40008000 	.word	0x40008000

0800ad28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b0ba      	sub	sp, #232	@ 0xe8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	69db      	ldr	r3, [r3, #28]
 800ad36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ad52:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ad56:	4013      	ands	r3, r2
 800ad58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ad5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d11b      	bne.n	800ad9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad68:	f003 0320 	and.w	r3, r3, #32
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d015      	beq.n	800ad9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad74:	f003 0320 	and.w	r3, r3, #32
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d105      	bne.n	800ad88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d009      	beq.n	800ad9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f000 8312 	beq.w	800b3b6 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	4798      	blx	r3
      }
      return;
 800ad9a:	e30c      	b.n	800b3b6 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ad9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f000 8129 	beq.w	800aff8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ada6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800adaa:	4b90      	ldr	r3, [pc, #576]	@ (800afec <HAL_UART_IRQHandler+0x2c4>)
 800adac:	4013      	ands	r3, r2
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d106      	bne.n	800adc0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800adb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800adb6:	4b8e      	ldr	r3, [pc, #568]	@ (800aff0 <HAL_UART_IRQHandler+0x2c8>)
 800adb8:	4013      	ands	r3, r2
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f000 811c 	beq.w	800aff8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800adc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d011      	beq.n	800adf0 <HAL_UART_IRQHandler+0xc8>
 800adcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800add0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00b      	beq.n	800adf0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2201      	movs	r2, #1
 800adde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ade6:	f043 0201 	orr.w	r2, r3, #1
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adf4:	f003 0302 	and.w	r3, r3, #2
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d011      	beq.n	800ae20 <HAL_UART_IRQHandler+0xf8>
 800adfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00b      	beq.n	800ae20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae16:	f043 0204 	orr.w	r2, r3, #4
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae24:	f003 0304 	and.w	r3, r3, #4
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d011      	beq.n	800ae50 <HAL_UART_IRQHandler+0x128>
 800ae2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae30:	f003 0301 	and.w	r3, r3, #1
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00b      	beq.n	800ae50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2204      	movs	r2, #4
 800ae3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae46:	f043 0202 	orr.w	r2, r3, #2
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae54:	f003 0308 	and.w	r3, r3, #8
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d017      	beq.n	800ae8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae60:	f003 0320 	and.w	r3, r3, #32
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d105      	bne.n	800ae74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ae68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ae6c:	4b5f      	ldr	r3, [pc, #380]	@ (800afec <HAL_UART_IRQHandler+0x2c4>)
 800ae6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00b      	beq.n	800ae8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2208      	movs	r2, #8
 800ae7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae82:	f043 0208 	orr.w	r2, r3, #8
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d012      	beq.n	800aebe <HAL_UART_IRQHandler+0x196>
 800ae98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d00c      	beq.n	800aebe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aeac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeb4:	f043 0220 	orr.w	r2, r3, #32
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f000 8278 	beq.w	800b3ba <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aeca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aece:	f003 0320 	and.w	r3, r3, #32
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d013      	beq.n	800aefe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aeda:	f003 0320 	and.w	r3, r3, #32
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d105      	bne.n	800aeee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d007      	beq.n	800aefe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af12:	2b40      	cmp	r3, #64	@ 0x40
 800af14:	d005      	beq.n	800af22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af1a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d058      	beq.n	800afd4 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f001 f903 	bl	800c12e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af32:	2b40      	cmp	r3, #64	@ 0x40
 800af34:	d148      	bne.n	800afc8 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	3308      	adds	r3, #8
 800af3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af44:	e853 3f00 	ldrex	r3, [r3]
 800af48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800af4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	3308      	adds	r3, #8
 800af5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800af62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800af66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800af6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800af72:	e841 2300 	strex	r3, r2, [r1]
 800af76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800af7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1d9      	bne.n	800af36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d017      	beq.n	800afbc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af92:	4a18      	ldr	r2, [pc, #96]	@ (800aff4 <HAL_UART_IRQHandler+0x2cc>)
 800af94:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7fb fbeb 	bl	8006778 <HAL_DMA_Abort_IT>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d01f      	beq.n	800afe8 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800afb6:	4610      	mov	r0, r2
 800afb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afba:	e015      	b.n	800afe8 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afc6:	e00f      	b.n	800afe8 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afd2:	e009      	b.n	800afe8 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800afe6:	e1e8      	b.n	800b3ba <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afe8:	bf00      	nop
    return;
 800afea:	e1e6      	b.n	800b3ba <HAL_UART_IRQHandler+0x692>
 800afec:	10000001 	.word	0x10000001
 800aff0:	04000120 	.word	0x04000120
 800aff4:	0800c4b7 	.word	0x0800c4b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800affc:	2b01      	cmp	r3, #1
 800affe:	f040 8176 	bne.w	800b2ee <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b006:	f003 0310 	and.w	r3, r3, #16
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	f000 816f 	beq.w	800b2ee <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b014:	f003 0310 	and.w	r3, r3, #16
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f000 8168 	beq.w	800b2ee <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2210      	movs	r2, #16
 800b024:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b030:	2b40      	cmp	r3, #64	@ 0x40
 800b032:	f040 80dc 	bne.w	800b1ee <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b044:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b048:	2b00      	cmp	r3, #0
 800b04a:	f000 80b1 	beq.w	800b1b0 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b054:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b058:	429a      	cmp	r2, r3
 800b05a:	f080 80a9 	bcs.w	800b1b0 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b064:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f003 0320 	and.w	r3, r3, #32
 800b076:	2b00      	cmp	r3, #0
 800b078:	f040 8087 	bne.w	800b18a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b084:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b088:	e853 3f00 	ldrex	r3, [r3]
 800b08c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b090:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b0a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b0aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b0b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b0b6:	e841 2300 	strex	r3, r2, [r1]
 800b0ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b0be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d1da      	bne.n	800b07c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0d0:	e853 3f00 	ldrex	r3, [r3]
 800b0d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b0d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0d8:	f023 0301 	bic.w	r3, r3, #1
 800b0dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b0ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b0ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b0f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b0f6:	e841 2300 	strex	r3, r2, [r1]
 800b0fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b0fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1e1      	bne.n	800b0c6 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	3308      	adds	r3, #8
 800b108:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b10c:	e853 3f00 	ldrex	r3, [r3]
 800b110:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b118:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3308      	adds	r3, #8
 800b122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b126:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b128:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b12c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b12e:	e841 2300 	strex	r3, r2, [r1]
 800b132:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1e3      	bne.n	800b102 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2220      	movs	r2, #32
 800b13e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b150:	e853 3f00 	ldrex	r3, [r3]
 800b154:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b158:	f023 0310 	bic.w	r3, r3, #16
 800b15c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	461a      	mov	r2, r3
 800b166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b16a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b16c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b170:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b172:	e841 2300 	strex	r3, r2, [r1]
 800b176:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1e4      	bne.n	800b148 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b184:	4618      	mov	r0, r3
 800b186:	f7fb fa9e 	bl	80066c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2202      	movs	r2, #2
 800b18e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800b1a2:	b292      	uxth	r2, r2
 800b1a4:	1a8a      	subs	r2, r1, r2
 800b1a6:	b292      	uxth	r2, r2
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b1ae:	e106      	b.n	800b3be <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b1b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	f040 80ff 	bne.w	800b3be <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 0320 	and.w	r3, r3, #32
 800b1ce:	2b20      	cmp	r3, #32
 800b1d0:	f040 80f5 	bne.w	800b3be <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b1e6:	4611      	mov	r1, r2
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	4798      	blx	r3
      return;
 800b1ec:	e0e7      	b.n	800b3be <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	1ad3      	subs	r3, r2, r3
 800b1fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b208:	b29b      	uxth	r3, r3
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f000 80d9 	beq.w	800b3c2 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800b210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b214:	2b00      	cmp	r3, #0
 800b216:	f000 80d4 	beq.w	800b3c2 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b222:	e853 3f00 	ldrex	r3, [r3]
 800b226:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b22a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b22e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	461a      	mov	r2, r3
 800b238:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b23c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b23e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b240:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b242:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b244:	e841 2300 	strex	r3, r2, [r1]
 800b248:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b24a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1e4      	bne.n	800b21a <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3308      	adds	r3, #8
 800b256:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25a:	e853 3f00 	ldrex	r3, [r3]
 800b25e:	623b      	str	r3, [r7, #32]
   return(result);
 800b260:	6a3b      	ldr	r3, [r7, #32]
 800b262:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b266:	f023 0301 	bic.w	r3, r3, #1
 800b26a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3308      	adds	r3, #8
 800b274:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b278:	633a      	str	r2, [r7, #48]	@ 0x30
 800b27a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b27e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b280:	e841 2300 	strex	r3, r2, [r1]
 800b284:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1e1      	bne.n	800b250 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2220      	movs	r2, #32
 800b290:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	e853 3f00 	ldrex	r3, [r3]
 800b2ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f023 0310 	bic.w	r3, r3, #16
 800b2b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	461a      	mov	r2, r3
 800b2be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b2c2:	61fb      	str	r3, [r7, #28]
 800b2c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c6:	69b9      	ldr	r1, [r7, #24]
 800b2c8:	69fa      	ldr	r2, [r7, #28]
 800b2ca:	e841 2300 	strex	r3, r2, [r1]
 800b2ce:	617b      	str	r3, [r7, #20]
   return(result);
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1e4      	bne.n	800b2a0 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2202      	movs	r2, #2
 800b2da:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b2e2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b2ec:	e069      	b.n	800b3c2 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d010      	beq.n	800b31c <HAL_UART_IRQHandler+0x5f4>
 800b2fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00a      	beq.n	800b31c <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b30e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b31a:	e055      	b.n	800b3c8 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b324:	2b00      	cmp	r3, #0
 800b326:	d014      	beq.n	800b352 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b32c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b330:	2b00      	cmp	r3, #0
 800b332:	d105      	bne.n	800b340 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b338:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d008      	beq.n	800b352 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b344:	2b00      	cmp	r3, #0
 800b346:	d03e      	beq.n	800b3c6 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	4798      	blx	r3
    }
    return;
 800b350:	e039      	b.n	800b3c6 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d009      	beq.n	800b372 <HAL_UART_IRQHandler+0x64a>
 800b35e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b366:	2b00      	cmp	r3, #0
 800b368:	d003      	beq.n	800b372 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f001 f8b7 	bl	800c4de <UART_EndTransmit_IT>
    return;
 800b370:	e02a      	b.n	800b3c8 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b376:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00b      	beq.n	800b396 <HAL_UART_IRQHandler+0x66e>
 800b37e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b382:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b386:	2b00      	cmp	r3, #0
 800b388:	d005      	beq.n	800b396 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b394:	e018      	b.n	800b3c8 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b39a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d012      	beq.n	800b3c8 <HAL_UART_IRQHandler+0x6a0>
 800b3a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	da0e      	bge.n	800b3c8 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3b4:	e008      	b.n	800b3c8 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b3b6:	bf00      	nop
 800b3b8:	e006      	b.n	800b3c8 <HAL_UART_IRQHandler+0x6a0>
    return;
 800b3ba:	bf00      	nop
 800b3bc:	e004      	b.n	800b3c8 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b3be:	bf00      	nop
 800b3c0:	e002      	b.n	800b3c8 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b3c2:	bf00      	nop
 800b3c4:	e000      	b.n	800b3c8 <HAL_UART_IRQHandler+0x6a0>
    return;
 800b3c6:	bf00      	nop
  }
}
 800b3c8:	37e8      	adds	r7, #232	@ 0xe8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop

0800b3d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b3d8:	bf00      	nop
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b428:	bf00      	nop
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b47c:	bf00      	nop
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a09      	ldr	r2, [pc, #36]	@ (800b4bc <HAL_UART_ReceiverTimeout_Config+0x34>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d009      	beq.n	800b4b0 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	695b      	ldr	r3, [r3, #20]
 800b4a2:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	430a      	orrs	r2, r1
 800b4ae:	615a      	str	r2, [r3, #20]
  }
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	40008000 	.word	0x40008000

0800b4c0 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a18      	ldr	r2, [pc, #96]	@ (800b530 <HAL_UART_EnableReceiverTimeout+0x70>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d027      	beq.n	800b522 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4d8:	2b20      	cmp	r3, #32
 800b4da:	d120      	bne.n	800b51e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d101      	bne.n	800b4ea <HAL_UART_EnableReceiverTimeout+0x2a>
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	e01c      	b.n	800b524 <HAL_UART_EnableReceiverTimeout+0x64>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2224      	movs	r2, #36	@ 0x24
 800b4f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	685a      	ldr	r2, [r3, #4]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b508:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2220      	movs	r2, #32
 800b50e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	e002      	b.n	800b524 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800b51e:	2302      	movs	r3, #2
 800b520:	e000      	b.n	800b524 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
  }
}
 800b524:	4618      	mov	r0, r3
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	40008000 	.word	0x40008000

0800b534 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800b542:	4618      	mov	r0, r3
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
	...

0800b550 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a1a      	ldr	r2, [pc, #104]	@ (800b5c4 <UART_InitCallbacksToDefault+0x74>)
 800b55c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a19      	ldr	r2, [pc, #100]	@ (800b5c8 <UART_InitCallbacksToDefault+0x78>)
 800b564:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a18      	ldr	r2, [pc, #96]	@ (800b5cc <UART_InitCallbacksToDefault+0x7c>)
 800b56c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a17      	ldr	r2, [pc, #92]	@ (800b5d0 <UART_InitCallbacksToDefault+0x80>)
 800b574:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a16      	ldr	r2, [pc, #88]	@ (800b5d4 <UART_InitCallbacksToDefault+0x84>)
 800b57c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a15      	ldr	r2, [pc, #84]	@ (800b5d8 <UART_InitCallbacksToDefault+0x88>)
 800b584:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a14      	ldr	r2, [pc, #80]	@ (800b5dc <UART_InitCallbacksToDefault+0x8c>)
 800b58c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4a13      	ldr	r2, [pc, #76]	@ (800b5e0 <UART_InitCallbacksToDefault+0x90>)
 800b594:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4a12      	ldr	r2, [pc, #72]	@ (800b5e4 <UART_InitCallbacksToDefault+0x94>)
 800b59c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a11      	ldr	r2, [pc, #68]	@ (800b5e8 <UART_InitCallbacksToDefault+0x98>)
 800b5a4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a10      	ldr	r2, [pc, #64]	@ (800b5ec <UART_InitCallbacksToDefault+0x9c>)
 800b5ac:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a0f      	ldr	r2, [pc, #60]	@ (800b5f0 <UART_InitCallbacksToDefault+0xa0>)
 800b5b4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	0800b3e5 	.word	0x0800b3e5
 800b5c8:	0800b3d1 	.word	0x0800b3d1
 800b5cc:	0800b40d 	.word	0x0800b40d
 800b5d0:	0800b3f9 	.word	0x0800b3f9
 800b5d4:	0800b421 	.word	0x0800b421
 800b5d8:	0800b435 	.word	0x0800b435
 800b5dc:	0800b449 	.word	0x0800b449
 800b5e0:	0800b45d 	.word	0x0800b45d
 800b5e4:	0800c539 	.word	0x0800c539
 800b5e8:	0800c54d 	.word	0x0800c54d
 800b5ec:	0800c561 	.word	0x0800c561
 800b5f0:	0800b471 	.word	0x0800b471

0800b5f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5f8:	b08c      	sub	sp, #48	@ 0x30
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5fe:	2300      	movs	r3, #0
 800b600:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	689a      	ldr	r2, [r3, #8]
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	431a      	orrs	r2, r3
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	695b      	ldr	r3, [r3, #20]
 800b612:	431a      	orrs	r2, r3
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	69db      	ldr	r3, [r3, #28]
 800b618:	4313      	orrs	r3, r2
 800b61a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	4baa      	ldr	r3, [pc, #680]	@ (800b8cc <UART_SetConfig+0x2d8>)
 800b624:	4013      	ands	r3, r2
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	6812      	ldr	r2, [r2, #0]
 800b62a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b62c:	430b      	orrs	r3, r1
 800b62e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	68da      	ldr	r2, [r3, #12]
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	430a      	orrs	r2, r1
 800b644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a9f      	ldr	r2, [pc, #636]	@ (800b8d0 <UART_SetConfig+0x2dc>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d004      	beq.n	800b660 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	6a1b      	ldr	r3, [r3, #32]
 800b65a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b65c:	4313      	orrs	r3, r2
 800b65e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b66a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	6812      	ldr	r2, [r2, #0]
 800b672:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b674:	430b      	orrs	r3, r1
 800b676:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b67e:	f023 010f 	bic.w	r1, r3, #15
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	430a      	orrs	r2, r1
 800b68c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a90      	ldr	r2, [pc, #576]	@ (800b8d4 <UART_SetConfig+0x2e0>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d125      	bne.n	800b6e4 <UART_SetConfig+0xf0>
 800b698:	4b8f      	ldr	r3, [pc, #572]	@ (800b8d8 <UART_SetConfig+0x2e4>)
 800b69a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b69e:	f003 0303 	and.w	r3, r3, #3
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	d81a      	bhi.n	800b6dc <UART_SetConfig+0xe8>
 800b6a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b6ac <UART_SetConfig+0xb8>)
 800b6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ac:	0800b6bd 	.word	0x0800b6bd
 800b6b0:	0800b6cd 	.word	0x0800b6cd
 800b6b4:	0800b6c5 	.word	0x0800b6c5
 800b6b8:	0800b6d5 	.word	0x0800b6d5
 800b6bc:	2301      	movs	r3, #1
 800b6be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6c2:	e116      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b6c4:	2302      	movs	r3, #2
 800b6c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6ca:	e112      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b6cc:	2304      	movs	r3, #4
 800b6ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6d2:	e10e      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b6d4:	2308      	movs	r3, #8
 800b6d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6da:	e10a      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b6dc:	2310      	movs	r3, #16
 800b6de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6e2:	e106      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a7c      	ldr	r2, [pc, #496]	@ (800b8dc <UART_SetConfig+0x2e8>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d138      	bne.n	800b760 <UART_SetConfig+0x16c>
 800b6ee:	4b7a      	ldr	r3, [pc, #488]	@ (800b8d8 <UART_SetConfig+0x2e4>)
 800b6f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6f4:	f003 030c 	and.w	r3, r3, #12
 800b6f8:	2b0c      	cmp	r3, #12
 800b6fa:	d82d      	bhi.n	800b758 <UART_SetConfig+0x164>
 800b6fc:	a201      	add	r2, pc, #4	@ (adr r2, 800b704 <UART_SetConfig+0x110>)
 800b6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b702:	bf00      	nop
 800b704:	0800b739 	.word	0x0800b739
 800b708:	0800b759 	.word	0x0800b759
 800b70c:	0800b759 	.word	0x0800b759
 800b710:	0800b759 	.word	0x0800b759
 800b714:	0800b749 	.word	0x0800b749
 800b718:	0800b759 	.word	0x0800b759
 800b71c:	0800b759 	.word	0x0800b759
 800b720:	0800b759 	.word	0x0800b759
 800b724:	0800b741 	.word	0x0800b741
 800b728:	0800b759 	.word	0x0800b759
 800b72c:	0800b759 	.word	0x0800b759
 800b730:	0800b759 	.word	0x0800b759
 800b734:	0800b751 	.word	0x0800b751
 800b738:	2300      	movs	r3, #0
 800b73a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b73e:	e0d8      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b740:	2302      	movs	r3, #2
 800b742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b746:	e0d4      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b748:	2304      	movs	r3, #4
 800b74a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b74e:	e0d0      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b750:	2308      	movs	r3, #8
 800b752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b756:	e0cc      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b758:	2310      	movs	r3, #16
 800b75a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b75e:	e0c8      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a5e      	ldr	r2, [pc, #376]	@ (800b8e0 <UART_SetConfig+0x2ec>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d125      	bne.n	800b7b6 <UART_SetConfig+0x1c2>
 800b76a:	4b5b      	ldr	r3, [pc, #364]	@ (800b8d8 <UART_SetConfig+0x2e4>)
 800b76c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b770:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b774:	2b30      	cmp	r3, #48	@ 0x30
 800b776:	d016      	beq.n	800b7a6 <UART_SetConfig+0x1b2>
 800b778:	2b30      	cmp	r3, #48	@ 0x30
 800b77a:	d818      	bhi.n	800b7ae <UART_SetConfig+0x1ba>
 800b77c:	2b20      	cmp	r3, #32
 800b77e:	d00a      	beq.n	800b796 <UART_SetConfig+0x1a2>
 800b780:	2b20      	cmp	r3, #32
 800b782:	d814      	bhi.n	800b7ae <UART_SetConfig+0x1ba>
 800b784:	2b00      	cmp	r3, #0
 800b786:	d002      	beq.n	800b78e <UART_SetConfig+0x19a>
 800b788:	2b10      	cmp	r3, #16
 800b78a:	d008      	beq.n	800b79e <UART_SetConfig+0x1aa>
 800b78c:	e00f      	b.n	800b7ae <UART_SetConfig+0x1ba>
 800b78e:	2300      	movs	r3, #0
 800b790:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b794:	e0ad      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b796:	2302      	movs	r3, #2
 800b798:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b79c:	e0a9      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b79e:	2304      	movs	r3, #4
 800b7a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7a4:	e0a5      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b7a6:	2308      	movs	r3, #8
 800b7a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7ac:	e0a1      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b7ae:	2310      	movs	r3, #16
 800b7b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7b4:	e09d      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a4a      	ldr	r2, [pc, #296]	@ (800b8e4 <UART_SetConfig+0x2f0>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d125      	bne.n	800b80c <UART_SetConfig+0x218>
 800b7c0:	4b45      	ldr	r3, [pc, #276]	@ (800b8d8 <UART_SetConfig+0x2e4>)
 800b7c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b7ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7cc:	d016      	beq.n	800b7fc <UART_SetConfig+0x208>
 800b7ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7d0:	d818      	bhi.n	800b804 <UART_SetConfig+0x210>
 800b7d2:	2b80      	cmp	r3, #128	@ 0x80
 800b7d4:	d00a      	beq.n	800b7ec <UART_SetConfig+0x1f8>
 800b7d6:	2b80      	cmp	r3, #128	@ 0x80
 800b7d8:	d814      	bhi.n	800b804 <UART_SetConfig+0x210>
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d002      	beq.n	800b7e4 <UART_SetConfig+0x1f0>
 800b7de:	2b40      	cmp	r3, #64	@ 0x40
 800b7e0:	d008      	beq.n	800b7f4 <UART_SetConfig+0x200>
 800b7e2:	e00f      	b.n	800b804 <UART_SetConfig+0x210>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7ea:	e082      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b7ec:	2302      	movs	r3, #2
 800b7ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7f2:	e07e      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b7f4:	2304      	movs	r3, #4
 800b7f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7fa:	e07a      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b7fc:	2308      	movs	r3, #8
 800b7fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b802:	e076      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b804:	2310      	movs	r3, #16
 800b806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b80a:	e072      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a35      	ldr	r2, [pc, #212]	@ (800b8e8 <UART_SetConfig+0x2f4>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d12a      	bne.n	800b86c <UART_SetConfig+0x278>
 800b816:	4b30      	ldr	r3, [pc, #192]	@ (800b8d8 <UART_SetConfig+0x2e4>)
 800b818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b81c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b820:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b824:	d01a      	beq.n	800b85c <UART_SetConfig+0x268>
 800b826:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b82a:	d81b      	bhi.n	800b864 <UART_SetConfig+0x270>
 800b82c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b830:	d00c      	beq.n	800b84c <UART_SetConfig+0x258>
 800b832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b836:	d815      	bhi.n	800b864 <UART_SetConfig+0x270>
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d003      	beq.n	800b844 <UART_SetConfig+0x250>
 800b83c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b840:	d008      	beq.n	800b854 <UART_SetConfig+0x260>
 800b842:	e00f      	b.n	800b864 <UART_SetConfig+0x270>
 800b844:	2300      	movs	r3, #0
 800b846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b84a:	e052      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b84c:	2302      	movs	r3, #2
 800b84e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b852:	e04e      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b854:	2304      	movs	r3, #4
 800b856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b85a:	e04a      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b85c:	2308      	movs	r3, #8
 800b85e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b862:	e046      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b864:	2310      	movs	r3, #16
 800b866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b86a:	e042      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a17      	ldr	r2, [pc, #92]	@ (800b8d0 <UART_SetConfig+0x2dc>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d13a      	bne.n	800b8ec <UART_SetConfig+0x2f8>
 800b876:	4b18      	ldr	r3, [pc, #96]	@ (800b8d8 <UART_SetConfig+0x2e4>)
 800b878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b87c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b880:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b884:	d01a      	beq.n	800b8bc <UART_SetConfig+0x2c8>
 800b886:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b88a:	d81b      	bhi.n	800b8c4 <UART_SetConfig+0x2d0>
 800b88c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b890:	d00c      	beq.n	800b8ac <UART_SetConfig+0x2b8>
 800b892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b896:	d815      	bhi.n	800b8c4 <UART_SetConfig+0x2d0>
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d003      	beq.n	800b8a4 <UART_SetConfig+0x2b0>
 800b89c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8a0:	d008      	beq.n	800b8b4 <UART_SetConfig+0x2c0>
 800b8a2:	e00f      	b.n	800b8c4 <UART_SetConfig+0x2d0>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8aa:	e022      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8b2:	e01e      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b8b4:	2304      	movs	r3, #4
 800b8b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ba:	e01a      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b8bc:	2308      	movs	r3, #8
 800b8be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8c2:	e016      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b8c4:	2310      	movs	r3, #16
 800b8c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ca:	e012      	b.n	800b8f2 <UART_SetConfig+0x2fe>
 800b8cc:	cfff69f3 	.word	0xcfff69f3
 800b8d0:	40008000 	.word	0x40008000
 800b8d4:	40013800 	.word	0x40013800
 800b8d8:	40021000 	.word	0x40021000
 800b8dc:	40004400 	.word	0x40004400
 800b8e0:	40004800 	.word	0x40004800
 800b8e4:	40004c00 	.word	0x40004c00
 800b8e8:	40005000 	.word	0x40005000
 800b8ec:	2310      	movs	r3, #16
 800b8ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4aae      	ldr	r2, [pc, #696]	@ (800bbb0 <UART_SetConfig+0x5bc>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	f040 8097 	bne.w	800ba2c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b8fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b902:	2b08      	cmp	r3, #8
 800b904:	d823      	bhi.n	800b94e <UART_SetConfig+0x35a>
 800b906:	a201      	add	r2, pc, #4	@ (adr r2, 800b90c <UART_SetConfig+0x318>)
 800b908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90c:	0800b931 	.word	0x0800b931
 800b910:	0800b94f 	.word	0x0800b94f
 800b914:	0800b939 	.word	0x0800b939
 800b918:	0800b94f 	.word	0x0800b94f
 800b91c:	0800b93f 	.word	0x0800b93f
 800b920:	0800b94f 	.word	0x0800b94f
 800b924:	0800b94f 	.word	0x0800b94f
 800b928:	0800b94f 	.word	0x0800b94f
 800b92c:	0800b947 	.word	0x0800b947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b930:	f7fc f812 	bl	8007958 <HAL_RCC_GetPCLK1Freq>
 800b934:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b936:	e010      	b.n	800b95a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b938:	4b9e      	ldr	r3, [pc, #632]	@ (800bbb4 <UART_SetConfig+0x5c0>)
 800b93a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b93c:	e00d      	b.n	800b95a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b93e:	f7fb ff9d 	bl	800787c <HAL_RCC_GetSysClockFreq>
 800b942:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b944:	e009      	b.n	800b95a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b94a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b94c:	e005      	b.n	800b95a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b94e:	2300      	movs	r3, #0
 800b950:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b958:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f000 8130 	beq.w	800bbc2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b966:	4a94      	ldr	r2, [pc, #592]	@ (800bbb8 <UART_SetConfig+0x5c4>)
 800b968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b96c:	461a      	mov	r2, r3
 800b96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b970:	fbb3 f3f2 	udiv	r3, r3, r2
 800b974:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	685a      	ldr	r2, [r3, #4]
 800b97a:	4613      	mov	r3, r2
 800b97c:	005b      	lsls	r3, r3, #1
 800b97e:	4413      	add	r3, r2
 800b980:	69ba      	ldr	r2, [r7, #24]
 800b982:	429a      	cmp	r2, r3
 800b984:	d305      	bcc.n	800b992 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b98c:	69ba      	ldr	r2, [r7, #24]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d903      	bls.n	800b99a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b998:	e113      	b.n	800bbc2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99c:	2200      	movs	r2, #0
 800b99e:	60bb      	str	r3, [r7, #8]
 800b9a0:	60fa      	str	r2, [r7, #12]
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9a6:	4a84      	ldr	r2, [pc, #528]	@ (800bbb8 <UART_SetConfig+0x5c4>)
 800b9a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	603b      	str	r3, [r7, #0]
 800b9b2:	607a      	str	r2, [r7, #4]
 800b9b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b9bc:	f7f5 fa00 	bl	8000dc0 <__aeabi_uldivmod>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4610      	mov	r0, r2
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	f04f 0200 	mov.w	r2, #0
 800b9cc:	f04f 0300 	mov.w	r3, #0
 800b9d0:	020b      	lsls	r3, r1, #8
 800b9d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b9d6:	0202      	lsls	r2, r0, #8
 800b9d8:	6979      	ldr	r1, [r7, #20]
 800b9da:	6849      	ldr	r1, [r1, #4]
 800b9dc:	0849      	lsrs	r1, r1, #1
 800b9de:	2000      	movs	r0, #0
 800b9e0:	460c      	mov	r4, r1
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	eb12 0804 	adds.w	r8, r2, r4
 800b9e8:	eb43 0905 	adc.w	r9, r3, r5
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	469a      	mov	sl, r3
 800b9f4:	4693      	mov	fp, r2
 800b9f6:	4652      	mov	r2, sl
 800b9f8:	465b      	mov	r3, fp
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	f7f5 f9df 	bl	8000dc0 <__aeabi_uldivmod>
 800ba02:	4602      	mov	r2, r0
 800ba04:	460b      	mov	r3, r1
 800ba06:	4613      	mov	r3, r2
 800ba08:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba0a:	6a3b      	ldr	r3, [r7, #32]
 800ba0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba10:	d308      	bcc.n	800ba24 <UART_SetConfig+0x430>
 800ba12:	6a3b      	ldr	r3, [r7, #32]
 800ba14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba18:	d204      	bcs.n	800ba24 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6a3a      	ldr	r2, [r7, #32]
 800ba20:	60da      	str	r2, [r3, #12]
 800ba22:	e0ce      	b.n	800bbc2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ba2a:	e0ca      	b.n	800bbc2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	69db      	ldr	r3, [r3, #28]
 800ba30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba34:	d166      	bne.n	800bb04 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ba36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba3a:	2b08      	cmp	r3, #8
 800ba3c:	d827      	bhi.n	800ba8e <UART_SetConfig+0x49a>
 800ba3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba44 <UART_SetConfig+0x450>)
 800ba40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba44:	0800ba69 	.word	0x0800ba69
 800ba48:	0800ba71 	.word	0x0800ba71
 800ba4c:	0800ba79 	.word	0x0800ba79
 800ba50:	0800ba8f 	.word	0x0800ba8f
 800ba54:	0800ba7f 	.word	0x0800ba7f
 800ba58:	0800ba8f 	.word	0x0800ba8f
 800ba5c:	0800ba8f 	.word	0x0800ba8f
 800ba60:	0800ba8f 	.word	0x0800ba8f
 800ba64:	0800ba87 	.word	0x0800ba87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba68:	f7fb ff76 	bl	8007958 <HAL_RCC_GetPCLK1Freq>
 800ba6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba6e:	e014      	b.n	800ba9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba70:	f7fb ff88 	bl	8007984 <HAL_RCC_GetPCLK2Freq>
 800ba74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba76:	e010      	b.n	800ba9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba78:	4b4e      	ldr	r3, [pc, #312]	@ (800bbb4 <UART_SetConfig+0x5c0>)
 800ba7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba7c:	e00d      	b.n	800ba9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba7e:	f7fb fefd 	bl	800787c <HAL_RCC_GetSysClockFreq>
 800ba82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba84:	e009      	b.n	800ba9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba8c:	e005      	b.n	800ba9a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ba98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 8090 	beq.w	800bbc2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baa6:	4a44      	ldr	r2, [pc, #272]	@ (800bbb8 <UART_SetConfig+0x5c4>)
 800baa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800baac:	461a      	mov	r2, r3
 800baae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bab4:	005a      	lsls	r2, r3, #1
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	085b      	lsrs	r3, r3, #1
 800babc:	441a      	add	r2, r3
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bac6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bac8:	6a3b      	ldr	r3, [r7, #32]
 800baca:	2b0f      	cmp	r3, #15
 800bacc:	d916      	bls.n	800bafc <UART_SetConfig+0x508>
 800bace:	6a3b      	ldr	r3, [r7, #32]
 800bad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bad4:	d212      	bcs.n	800bafc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bad6:	6a3b      	ldr	r3, [r7, #32]
 800bad8:	b29b      	uxth	r3, r3
 800bada:	f023 030f 	bic.w	r3, r3, #15
 800bade:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bae0:	6a3b      	ldr	r3, [r7, #32]
 800bae2:	085b      	lsrs	r3, r3, #1
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	f003 0307 	and.w	r3, r3, #7
 800baea:	b29a      	uxth	r2, r3
 800baec:	8bfb      	ldrh	r3, [r7, #30]
 800baee:	4313      	orrs	r3, r2
 800baf0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	8bfa      	ldrh	r2, [r7, #30]
 800baf8:	60da      	str	r2, [r3, #12]
 800bafa:	e062      	b.n	800bbc2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bb02:	e05e      	b.n	800bbc2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb08:	2b08      	cmp	r3, #8
 800bb0a:	d828      	bhi.n	800bb5e <UART_SetConfig+0x56a>
 800bb0c:	a201      	add	r2, pc, #4	@ (adr r2, 800bb14 <UART_SetConfig+0x520>)
 800bb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb12:	bf00      	nop
 800bb14:	0800bb39 	.word	0x0800bb39
 800bb18:	0800bb41 	.word	0x0800bb41
 800bb1c:	0800bb49 	.word	0x0800bb49
 800bb20:	0800bb5f 	.word	0x0800bb5f
 800bb24:	0800bb4f 	.word	0x0800bb4f
 800bb28:	0800bb5f 	.word	0x0800bb5f
 800bb2c:	0800bb5f 	.word	0x0800bb5f
 800bb30:	0800bb5f 	.word	0x0800bb5f
 800bb34:	0800bb57 	.word	0x0800bb57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb38:	f7fb ff0e 	bl	8007958 <HAL_RCC_GetPCLK1Freq>
 800bb3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb3e:	e014      	b.n	800bb6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb40:	f7fb ff20 	bl	8007984 <HAL_RCC_GetPCLK2Freq>
 800bb44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb46:	e010      	b.n	800bb6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb48:	4b1a      	ldr	r3, [pc, #104]	@ (800bbb4 <UART_SetConfig+0x5c0>)
 800bb4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb4c:	e00d      	b.n	800bb6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb4e:	f7fb fe95 	bl	800787c <HAL_RCC_GetSysClockFreq>
 800bb52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb54:	e009      	b.n	800bb6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb5c:	e005      	b.n	800bb6a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bb68:	bf00      	nop
    }

    if (pclk != 0U)
 800bb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d028      	beq.n	800bbc2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb74:	4a10      	ldr	r2, [pc, #64]	@ (800bbb8 <UART_SetConfig+0x5c4>)
 800bb76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	085b      	lsrs	r3, r3, #1
 800bb88:	441a      	add	r2, r3
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb94:	6a3b      	ldr	r3, [r7, #32]
 800bb96:	2b0f      	cmp	r3, #15
 800bb98:	d910      	bls.n	800bbbc <UART_SetConfig+0x5c8>
 800bb9a:	6a3b      	ldr	r3, [r7, #32]
 800bb9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bba0:	d20c      	bcs.n	800bbbc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bba2:	6a3b      	ldr	r3, [r7, #32]
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	60da      	str	r2, [r3, #12]
 800bbac:	e009      	b.n	800bbc2 <UART_SetConfig+0x5ce>
 800bbae:	bf00      	nop
 800bbb0:	40008000 	.word	0x40008000
 800bbb4:	00f42400 	.word	0x00f42400
 800bbb8:	080238c0 	.word	0x080238c0
      }
      else
      {
        ret = HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bbde:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3730      	adds	r7, #48	@ 0x30
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bbec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbf8:	f003 0308 	and.w	r3, r3, #8
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d00a      	beq.n	800bc16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	430a      	orrs	r2, r1
 800bc14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc1a:	f003 0301 	and.w	r3, r3, #1
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00a      	beq.n	800bc38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	430a      	orrs	r2, r1
 800bc36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc3c:	f003 0302 	and.w	r3, r3, #2
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00a      	beq.n	800bc5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	430a      	orrs	r2, r1
 800bc58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc5e:	f003 0304 	and.w	r3, r3, #4
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00a      	beq.n	800bc7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	430a      	orrs	r2, r1
 800bc7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc80:	f003 0310 	and.w	r3, r3, #16
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00a      	beq.n	800bc9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	430a      	orrs	r2, r1
 800bc9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bca2:	f003 0320 	and.w	r3, r3, #32
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	430a      	orrs	r2, r1
 800bcbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d01a      	beq.n	800bd02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	430a      	orrs	r2, r1
 800bce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bce6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bcea:	d10a      	bne.n	800bd02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	430a      	orrs	r2, r1
 800bd00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00a      	beq.n	800bd24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	430a      	orrs	r2, r1
 800bd22:	605a      	str	r2, [r3, #4]
  }
}
 800bd24:	bf00      	nop
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b098      	sub	sp, #96	@ 0x60
 800bd34:	af02      	add	r7, sp, #8
 800bd36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bd40:	f7fa fa82 	bl	8006248 <HAL_GetTick>
 800bd44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f003 0308 	and.w	r3, r3, #8
 800bd50:	2b08      	cmp	r3, #8
 800bd52:	d12f      	bne.n	800bdb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 f88e 	bl	800be84 <UART_WaitOnFlagUntilTimeout>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d022      	beq.n	800bdb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd76:	e853 3f00 	ldrex	r3, [r3]
 800bd7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd82:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	461a      	mov	r2, r3
 800bd8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd94:	e841 2300 	strex	r3, r2, [r1]
 800bd98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1e6      	bne.n	800bd6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2220      	movs	r2, #32
 800bda4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e063      	b.n	800be7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f003 0304 	and.w	r3, r3, #4
 800bdbe:	2b04      	cmp	r3, #4
 800bdc0:	d149      	bne.n	800be56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 f857 	bl	800be84 <UART_WaitOnFlagUntilTimeout>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d03c      	beq.n	800be56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde4:	e853 3f00 	ldrex	r3, [r3]
 800bde8:	623b      	str	r3, [r7, #32]
   return(result);
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bdf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdfa:	633b      	str	r3, [r7, #48]	@ 0x30
 800bdfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be02:	e841 2300 	strex	r3, r2, [r1]
 800be06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d1e6      	bne.n	800bddc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	3308      	adds	r3, #8
 800be14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	e853 3f00 	ldrex	r3, [r3]
 800be1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f023 0301 	bic.w	r3, r3, #1
 800be24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	3308      	adds	r3, #8
 800be2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be2e:	61fa      	str	r2, [r7, #28]
 800be30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be32:	69b9      	ldr	r1, [r7, #24]
 800be34:	69fa      	ldr	r2, [r7, #28]
 800be36:	e841 2300 	strex	r3, r2, [r1]
 800be3a:	617b      	str	r3, [r7, #20]
   return(result);
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1e5      	bne.n	800be0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2220      	movs	r2, #32
 800be46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be52:	2303      	movs	r3, #3
 800be54:	e012      	b.n	800be7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2220      	movs	r2, #32
 800be5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2220      	movs	r2, #32
 800be62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3758      	adds	r7, #88	@ 0x58
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	603b      	str	r3, [r7, #0]
 800be90:	4613      	mov	r3, r2
 800be92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be94:	e04f      	b.n	800bf36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9c:	d04b      	beq.n	800bf36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be9e:	f7fa f9d3 	bl	8006248 <HAL_GetTick>
 800bea2:	4602      	mov	r2, r0
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	69ba      	ldr	r2, [r7, #24]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d302      	bcc.n	800beb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d101      	bne.n	800beb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800beb4:	2303      	movs	r3, #3
 800beb6:	e04e      	b.n	800bf56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f003 0304 	and.w	r3, r3, #4
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d037      	beq.n	800bf36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	2b80      	cmp	r3, #128	@ 0x80
 800beca:	d034      	beq.n	800bf36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	2b40      	cmp	r3, #64	@ 0x40
 800bed0:	d031      	beq.n	800bf36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	69db      	ldr	r3, [r3, #28]
 800bed8:	f003 0308 	and.w	r3, r3, #8
 800bedc:	2b08      	cmp	r3, #8
 800bede:	d110      	bne.n	800bf02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2208      	movs	r2, #8
 800bee6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f000 f920 	bl	800c12e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2208      	movs	r2, #8
 800bef2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2200      	movs	r2, #0
 800befa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800befe:	2301      	movs	r3, #1
 800bf00:	e029      	b.n	800bf56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	69db      	ldr	r3, [r3, #28]
 800bf08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bf10:	d111      	bne.n	800bf36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f000 f906 	bl	800c12e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2220      	movs	r2, #32
 800bf26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bf32:	2303      	movs	r3, #3
 800bf34:	e00f      	b.n	800bf56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	69da      	ldr	r2, [r3, #28]
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	4013      	ands	r3, r2
 800bf40:	68ba      	ldr	r2, [r7, #8]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	bf0c      	ite	eq
 800bf46:	2301      	moveq	r3, #1
 800bf48:	2300      	movne	r3, #0
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	79fb      	ldrb	r3, [r7, #7]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d0a0      	beq.n	800be96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
	...

0800bf60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b096      	sub	sp, #88	@ 0x58
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	88fa      	ldrh	r2, [r7, #6]
 800bf78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2222      	movs	r2, #34	@ 0x22
 800bf88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d02d      	beq.n	800bff2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf9c:	4a40      	ldr	r2, [pc, #256]	@ (800c0a0 <UART_Start_Receive_DMA+0x140>)
 800bf9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfa6:	4a3f      	ldr	r2, [pc, #252]	@ (800c0a4 <UART_Start_Receive_DMA+0x144>)
 800bfa8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfb0:	4a3d      	ldr	r2, [pc, #244]	@ (800c0a8 <UART_Start_Receive_DMA+0x148>)
 800bfb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfba:	2200      	movs	r2, #0
 800bfbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	3324      	adds	r3, #36	@ 0x24
 800bfca:	4619      	mov	r1, r3
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	88fb      	ldrh	r3, [r7, #6]
 800bfd4:	f7fa fafc 	bl	80065d0 <HAL_DMA_Start_IT>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d009      	beq.n	800bff2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2210      	movs	r2, #16
 800bfe2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2220      	movs	r2, #32
 800bfea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	e051      	b.n	800c096 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	691b      	ldr	r3, [r3, #16]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d018      	beq.n	800c02c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c002:	e853 3f00 	ldrex	r3, [r3]
 800c006:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c00a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c00e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	461a      	mov	r2, r3
 800c016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c018:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c01a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c01e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c020:	e841 2300 	strex	r3, r2, [r1]
 800c024:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1e6      	bne.n	800bffa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3308      	adds	r3, #8
 800c032:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c036:	e853 3f00 	ldrex	r3, [r3]
 800c03a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03e:	f043 0301 	orr.w	r3, r3, #1
 800c042:	653b      	str	r3, [r7, #80]	@ 0x50
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	3308      	adds	r3, #8
 800c04a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c04c:	637a      	str	r2, [r7, #52]	@ 0x34
 800c04e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c050:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c052:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c054:	e841 2300 	strex	r3, r2, [r1]
 800c058:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1e5      	bne.n	800c02c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3308      	adds	r3, #8
 800c066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	e853 3f00 	ldrex	r3, [r3]
 800c06e:	613b      	str	r3, [r7, #16]
   return(result);
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	3308      	adds	r3, #8
 800c07e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c080:	623a      	str	r2, [r7, #32]
 800c082:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c084:	69f9      	ldr	r1, [r7, #28]
 800c086:	6a3a      	ldr	r2, [r7, #32]
 800c088:	e841 2300 	strex	r3, r2, [r1]
 800c08c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d1e5      	bne.n	800c060 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3758      	adds	r7, #88	@ 0x58
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	0800c2b9 	.word	0x0800c2b9
 800c0a4:	0800c3ed 	.word	0x0800c3ed
 800c0a8:	0800c433 	.word	0x0800c433

0800c0ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b08f      	sub	sp, #60	@ 0x3c
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ba:	6a3b      	ldr	r3, [r7, #32]
 800c0bc:	e853 3f00 	ldrex	r3, [r3]
 800c0c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c0c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c0d4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0da:	e841 2300 	strex	r3, r2, [r1]
 800c0de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d1e6      	bne.n	800c0b4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	3308      	adds	r3, #8
 800c0ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	e853 3f00 	ldrex	r3, [r3]
 800c0f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c0fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	3308      	adds	r3, #8
 800c104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c106:	61ba      	str	r2, [r7, #24]
 800c108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10a:	6979      	ldr	r1, [r7, #20]
 800c10c:	69ba      	ldr	r2, [r7, #24]
 800c10e:	e841 2300 	strex	r3, r2, [r1]
 800c112:	613b      	str	r3, [r7, #16]
   return(result);
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1e5      	bne.n	800c0e6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2220      	movs	r2, #32
 800c11e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c122:	bf00      	nop
 800c124:	373c      	adds	r7, #60	@ 0x3c
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr

0800c12e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c12e:	b480      	push	{r7}
 800c130:	b095      	sub	sp, #84	@ 0x54
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c13e:	e853 3f00 	ldrex	r3, [r3]
 800c142:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c146:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c14a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	461a      	mov	r2, r3
 800c152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c154:	643b      	str	r3, [r7, #64]	@ 0x40
 800c156:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c158:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c15a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c15c:	e841 2300 	strex	r3, r2, [r1]
 800c160:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1e6      	bne.n	800c136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	3308      	adds	r3, #8
 800c16e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	e853 3f00 	ldrex	r3, [r3]
 800c176:	61fb      	str	r3, [r7, #28]
   return(result);
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c17e:	f023 0301 	bic.w	r3, r3, #1
 800c182:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	3308      	adds	r3, #8
 800c18a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c18c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c18e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c194:	e841 2300 	strex	r3, r2, [r1]
 800c198:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1e3      	bne.n	800c168 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d118      	bne.n	800c1da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	e853 3f00 	ldrex	r3, [r3]
 800c1b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	f023 0310 	bic.w	r3, r3, #16
 800c1bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1c6:	61bb      	str	r3, [r7, #24]
 800c1c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ca:	6979      	ldr	r1, [r7, #20]
 800c1cc:	69ba      	ldr	r2, [r7, #24]
 800c1ce:	e841 2300 	strex	r3, r2, [r1]
 800c1d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d1e6      	bne.n	800c1a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2220      	movs	r2, #32
 800c1de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c1ee:	bf00      	nop
 800c1f0:	3754      	adds	r7, #84	@ 0x54
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr

0800c1fa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b090      	sub	sp, #64	@ 0x40
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c206:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f003 0320 	and.w	r3, r3, #32
 800c212:	2b00      	cmp	r3, #0
 800c214:	d137      	bne.n	800c286 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c218:	2200      	movs	r2, #0
 800c21a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c21e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	3308      	adds	r3, #8
 800c224:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c228:	e853 3f00 	ldrex	r3, [r3]
 800c22c:	623b      	str	r3, [r7, #32]
   return(result);
 800c22e:	6a3b      	ldr	r3, [r7, #32]
 800c230:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c234:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	3308      	adds	r3, #8
 800c23c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c23e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c240:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c246:	e841 2300 	strex	r3, r2, [r1]
 800c24a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1e5      	bne.n	800c21e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	e853 3f00 	ldrex	r3, [r3]
 800c25e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c266:	637b      	str	r3, [r7, #52]	@ 0x34
 800c268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	461a      	mov	r2, r3
 800c26e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c270:	61fb      	str	r3, [r7, #28]
 800c272:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c274:	69b9      	ldr	r1, [r7, #24]
 800c276:	69fa      	ldr	r2, [r7, #28]
 800c278:	e841 2300 	strex	r3, r2, [r1]
 800c27c:	617b      	str	r3, [r7, #20]
   return(result);
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d1e6      	bne.n	800c252 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c284:	e004      	b.n	800c290 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800c286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c288:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c28c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c28e:	4798      	blx	r3
}
 800c290:	bf00      	nop
 800c292:	3740      	adds	r7, #64	@ 0x40
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2a4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2b0:	bf00      	nop
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b09c      	sub	sp, #112	@ 0x70
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2c4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f003 0320 	and.w	r3, r3, #32
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d171      	bne.n	800c3b8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c2d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2e4:	e853 3f00 	ldrex	r3, [r3]
 800c2e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c2ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c2f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c2fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c2fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c300:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c302:	e841 2300 	strex	r3, r2, [r1]
 800c306:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1e6      	bne.n	800c2dc <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c30e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	3308      	adds	r3, #8
 800c314:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c318:	e853 3f00 	ldrex	r3, [r3]
 800c31c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c320:	f023 0301 	bic.w	r3, r3, #1
 800c324:	667b      	str	r3, [r7, #100]	@ 0x64
 800c326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	3308      	adds	r3, #8
 800c32c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c32e:	647a      	str	r2, [r7, #68]	@ 0x44
 800c330:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c332:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c334:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c336:	e841 2300 	strex	r3, r2, [r1]
 800c33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c33c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1e5      	bne.n	800c30e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	3308      	adds	r3, #8
 800c348:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34c:	e853 3f00 	ldrex	r3, [r3]
 800c350:	623b      	str	r3, [r7, #32]
   return(result);
 800c352:	6a3b      	ldr	r3, [r7, #32]
 800c354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c358:	663b      	str	r3, [r7, #96]	@ 0x60
 800c35a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	3308      	adds	r3, #8
 800c360:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c362:	633a      	str	r2, [r7, #48]	@ 0x30
 800c364:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c36a:	e841 2300 	strex	r3, r2, [r1]
 800c36e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c372:	2b00      	cmp	r3, #0
 800c374:	d1e5      	bne.n	800c342 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c376:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c378:	2220      	movs	r2, #32
 800c37a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c37e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c380:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c382:	2b01      	cmp	r3, #1
 800c384:	d118      	bne.n	800c3b8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	e853 3f00 	ldrex	r3, [r3]
 800c392:	60fb      	str	r3, [r7, #12]
   return(result);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f023 0310 	bic.w	r3, r3, #16
 800c39a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c39c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3a4:	61fb      	str	r3, [r7, #28]
 800c3a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a8:	69b9      	ldr	r1, [r7, #24]
 800c3aa:	69fa      	ldr	r2, [r7, #28]
 800c3ac:	e841 2300 	strex	r3, r2, [r1]
 800c3b0:	617b      	str	r3, [r7, #20]
   return(result);
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1e6      	bne.n	800c386 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d109      	bne.n	800c3da <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c3c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c3cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c3ce:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c3d2:	4611      	mov	r1, r2
 800c3d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c3d6:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c3d8:	e004      	b.n	800c3e4 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800c3da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c3e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c3e2:	4798      	blx	r3
}
 800c3e4:	bf00      	nop
 800c3e6:	3770      	adds	r7, #112	@ 0x70
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3f8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c404:	2b01      	cmp	r3, #1
 800c406:	d10b      	bne.n	800c420 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c414:	0852      	lsrs	r2, r2, #1
 800c416:	b292      	uxth	r2, r2
 800c418:	4611      	mov	r1, r2
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c41e:	e004      	b.n	800c42a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c426:	68f8      	ldr	r0, [r7, #12]
 800c428:	4798      	blx	r3
}
 800c42a:	bf00      	nop
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b086      	sub	sp, #24
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c43e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c446:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c44e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c45a:	2b80      	cmp	r3, #128	@ 0x80
 800c45c:	d109      	bne.n	800c472 <UART_DMAError+0x40>
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	2b21      	cmp	r3, #33	@ 0x21
 800c462:	d106      	bne.n	800c472 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	2200      	movs	r2, #0
 800c468:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c46c:	6978      	ldr	r0, [r7, #20]
 800c46e:	f7ff fe1d 	bl	800c0ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c47c:	2b40      	cmp	r3, #64	@ 0x40
 800c47e:	d109      	bne.n	800c494 <UART_DMAError+0x62>
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2b22      	cmp	r3, #34	@ 0x22
 800c484:	d106      	bne.n	800c494 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	2200      	movs	r2, #0
 800c48a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c48e:	6978      	ldr	r0, [r7, #20]
 800c490:	f7ff fe4d 	bl	800c12e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c49a:	f043 0210 	orr.w	r2, r3, #16
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c4aa:	6978      	ldr	r0, [r7, #20]
 800c4ac:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4ae:	bf00      	nop
 800c4b0:	3718      	adds	r7, #24
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b084      	sub	sp, #16
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4d6:	bf00      	nop
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b088      	sub	sp, #32
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	e853 3f00 	ldrex	r3, [r3]
 800c4f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4fa:	61fb      	str	r3, [r7, #28]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	461a      	mov	r2, r3
 800c502:	69fb      	ldr	r3, [r7, #28]
 800c504:	61bb      	str	r3, [r7, #24]
 800c506:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c508:	6979      	ldr	r1, [r7, #20]
 800c50a:	69ba      	ldr	r2, [r7, #24]
 800c50c:	e841 2300 	strex	r3, r2, [r1]
 800c510:	613b      	str	r3, [r7, #16]
   return(result);
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1e6      	bne.n	800c4e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2220      	movs	r2, #32
 800c51c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c530:	bf00      	nop
 800c532:	3720      	adds	r7, #32
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c538:	b480      	push	{r7}
 800c53a:	b083      	sub	sp, #12
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c540:	bf00      	nop
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c554:	bf00      	nop
 800c556:	370c      	adds	r7, #12
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c568:	bf00      	nop
 800c56a:	370c      	adds	r7, #12
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c582:	2b01      	cmp	r3, #1
 800c584:	d101      	bne.n	800c58a <HAL_UARTEx_DisableFifoMode+0x16>
 800c586:	2302      	movs	r3, #2
 800c588:	e027      	b.n	800c5da <HAL_UARTEx_DisableFifoMode+0x66>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2201      	movs	r2, #1
 800c58e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2224      	movs	r2, #36	@ 0x24
 800c596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f022 0201 	bic.w	r2, r2, #1
 800c5b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c5b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	68fa      	ldr	r2, [r7, #12]
 800c5c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2220      	movs	r2, #32
 800c5cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3714      	adds	r7, #20
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b084      	sub	sp, #16
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
 800c5ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d101      	bne.n	800c5fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c5fa:	2302      	movs	r3, #2
 800c5fc:	e02d      	b.n	800c65a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2201      	movs	r2, #1
 800c602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2224      	movs	r2, #36	@ 0x24
 800c60a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f022 0201 	bic.w	r2, r2, #1
 800c624:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	683a      	ldr	r2, [r7, #0]
 800c636:	430a      	orrs	r2, r1
 800c638:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 f850 	bl	800c6e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2220      	movs	r2, #32
 800c64c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3710      	adds	r7, #16
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b084      	sub	sp, #16
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
 800c66a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c672:	2b01      	cmp	r3, #1
 800c674:	d101      	bne.n	800c67a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c676:	2302      	movs	r3, #2
 800c678:	e02d      	b.n	800c6d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2201      	movs	r2, #1
 800c67e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2224      	movs	r2, #36	@ 0x24
 800c686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f022 0201 	bic.w	r2, r2, #1
 800c6a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	430a      	orrs	r2, r1
 800c6b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f812 	bl	800c6e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	68fa      	ldr	r2, [r7, #12]
 800c6c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2220      	movs	r2, #32
 800c6c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
	...

0800c6e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d108      	bne.n	800c702 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c700:	e031      	b.n	800c766 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c702:	2308      	movs	r3, #8
 800c704:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c706:	2308      	movs	r3, #8
 800c708:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	0e5b      	lsrs	r3, r3, #25
 800c712:	b2db      	uxtb	r3, r3
 800c714:	f003 0307 	and.w	r3, r3, #7
 800c718:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	0f5b      	lsrs	r3, r3, #29
 800c722:	b2db      	uxtb	r3, r3
 800c724:	f003 0307 	and.w	r3, r3, #7
 800c728:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c72a:	7bbb      	ldrb	r3, [r7, #14]
 800c72c:	7b3a      	ldrb	r2, [r7, #12]
 800c72e:	4911      	ldr	r1, [pc, #68]	@ (800c774 <UARTEx_SetNbDataToProcess+0x94>)
 800c730:	5c8a      	ldrb	r2, [r1, r2]
 800c732:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c736:	7b3a      	ldrb	r2, [r7, #12]
 800c738:	490f      	ldr	r1, [pc, #60]	@ (800c778 <UARTEx_SetNbDataToProcess+0x98>)
 800c73a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c73c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c740:	b29a      	uxth	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c748:	7bfb      	ldrb	r3, [r7, #15]
 800c74a:	7b7a      	ldrb	r2, [r7, #13]
 800c74c:	4909      	ldr	r1, [pc, #36]	@ (800c774 <UARTEx_SetNbDataToProcess+0x94>)
 800c74e:	5c8a      	ldrb	r2, [r1, r2]
 800c750:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c754:	7b7a      	ldrb	r2, [r7, #13]
 800c756:	4908      	ldr	r1, [pc, #32]	@ (800c778 <UARTEx_SetNbDataToProcess+0x98>)
 800c758:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c75a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c75e:	b29a      	uxth	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c766:	bf00      	nop
 800c768:	3714      	adds	r7, #20
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	080238d8 	.word	0x080238d8
 800c778:	080238e0 	.word	0x080238e0

0800c77c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	ed93 7a06 	vldr	s14, [r3, #24]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c792:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	edd3 7a08 	vldr	s15, [r3, #32]
 800c79c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	edd3 7a06 	vldr	s15, [r3, #24]
 800c7ac:	eeb1 7a67 	vneg.f32	s14, s15
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	edd3 7a08 	vldr	s15, [r3, #32]
 800c7b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c7ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6a1a      	ldr	r2, [r3, #32]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d006      	beq.n	800c7e0 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	330c      	adds	r3, #12
 800c7d6:	220c      	movs	r2, #12
 800c7d8:	2100      	movs	r1, #0
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 f804 	bl	800c7e8 <memset>
  }

}
 800c7e0:	bf00      	nop
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <memset>:
 800c7e8:	4402      	add	r2, r0
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d100      	bne.n	800c7f2 <memset+0xa>
 800c7f0:	4770      	bx	lr
 800c7f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c7f6:	e7f9      	b.n	800c7ec <memset+0x4>

0800c7f8 <__errno>:
 800c7f8:	4b01      	ldr	r3, [pc, #4]	@ (800c800 <__errno+0x8>)
 800c7fa:	6818      	ldr	r0, [r3, #0]
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	2000023c 	.word	0x2000023c

0800c804 <__libc_init_array>:
 800c804:	b570      	push	{r4, r5, r6, lr}
 800c806:	4d0d      	ldr	r5, [pc, #52]	@ (800c83c <__libc_init_array+0x38>)
 800c808:	4c0d      	ldr	r4, [pc, #52]	@ (800c840 <__libc_init_array+0x3c>)
 800c80a:	1b64      	subs	r4, r4, r5
 800c80c:	10a4      	asrs	r4, r4, #2
 800c80e:	2600      	movs	r6, #0
 800c810:	42a6      	cmp	r6, r4
 800c812:	d109      	bne.n	800c828 <__libc_init_array+0x24>
 800c814:	4d0b      	ldr	r5, [pc, #44]	@ (800c844 <__libc_init_array+0x40>)
 800c816:	4c0c      	ldr	r4, [pc, #48]	@ (800c848 <__libc_init_array+0x44>)
 800c818:	f000 ff32 	bl	800d680 <_init>
 800c81c:	1b64      	subs	r4, r4, r5
 800c81e:	10a4      	asrs	r4, r4, #2
 800c820:	2600      	movs	r6, #0
 800c822:	42a6      	cmp	r6, r4
 800c824:	d105      	bne.n	800c832 <__libc_init_array+0x2e>
 800c826:	bd70      	pop	{r4, r5, r6, pc}
 800c828:	f855 3b04 	ldr.w	r3, [r5], #4
 800c82c:	4798      	blx	r3
 800c82e:	3601      	adds	r6, #1
 800c830:	e7ee      	b.n	800c810 <__libc_init_array+0xc>
 800c832:	f855 3b04 	ldr.w	r3, [r5], #4
 800c836:	4798      	blx	r3
 800c838:	3601      	adds	r6, #1
 800c83a:	e7f2      	b.n	800c822 <__libc_init_array+0x1e>
 800c83c:	08023cf8 	.word	0x08023cf8
 800c840:	08023cf8 	.word	0x08023cf8
 800c844:	08023cf8 	.word	0x08023cf8
 800c848:	08023cfc 	.word	0x08023cfc

0800c84c <memcpy>:
 800c84c:	440a      	add	r2, r1
 800c84e:	4291      	cmp	r1, r2
 800c850:	f100 33ff 	add.w	r3, r0, #4294967295
 800c854:	d100      	bne.n	800c858 <memcpy+0xc>
 800c856:	4770      	bx	lr
 800c858:	b510      	push	{r4, lr}
 800c85a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c85e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c862:	4291      	cmp	r1, r2
 800c864:	d1f9      	bne.n	800c85a <memcpy+0xe>
 800c866:	bd10      	pop	{r4, pc}

0800c868 <atan2f>:
 800c868:	f000 b94c 	b.w	800cb04 <__ieee754_atan2f>

0800c86c <sqrtf>:
 800c86c:	b508      	push	{r3, lr}
 800c86e:	ed2d 8b02 	vpush	{d8}
 800c872:	eeb0 8a40 	vmov.f32	s16, s0
 800c876:	f000 f8a1 	bl	800c9bc <__ieee754_sqrtf>
 800c87a:	eeb4 8a48 	vcmp.f32	s16, s16
 800c87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c882:	d60c      	bvs.n	800c89e <sqrtf+0x32>
 800c884:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c8a4 <sqrtf+0x38>
 800c888:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c890:	d505      	bpl.n	800c89e <sqrtf+0x32>
 800c892:	f7ff ffb1 	bl	800c7f8 <__errno>
 800c896:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c89a:	2321      	movs	r3, #33	@ 0x21
 800c89c:	6003      	str	r3, [r0, #0]
 800c89e:	ecbd 8b02 	vpop	{d8}
 800c8a2:	bd08      	pop	{r3, pc}
 800c8a4:	00000000 	.word	0x00000000

0800c8a8 <cosf>:
 800c8a8:	ee10 3a10 	vmov	r3, s0
 800c8ac:	b507      	push	{r0, r1, r2, lr}
 800c8ae:	4a1e      	ldr	r2, [pc, #120]	@ (800c928 <cosf+0x80>)
 800c8b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d806      	bhi.n	800c8c6 <cosf+0x1e>
 800c8b8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800c92c <cosf+0x84>
 800c8bc:	b003      	add	sp, #12
 800c8be:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8c2:	f000 b87f 	b.w	800c9c4 <__kernel_cosf>
 800c8c6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c8ca:	d304      	bcc.n	800c8d6 <cosf+0x2e>
 800c8cc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c8d0:	b003      	add	sp, #12
 800c8d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8d6:	4668      	mov	r0, sp
 800c8d8:	f000 f9b4 	bl	800cc44 <__ieee754_rem_pio2f>
 800c8dc:	f000 0003 	and.w	r0, r0, #3
 800c8e0:	2801      	cmp	r0, #1
 800c8e2:	d009      	beq.n	800c8f8 <cosf+0x50>
 800c8e4:	2802      	cmp	r0, #2
 800c8e6:	d010      	beq.n	800c90a <cosf+0x62>
 800c8e8:	b9b0      	cbnz	r0, 800c918 <cosf+0x70>
 800c8ea:	eddd 0a01 	vldr	s1, [sp, #4]
 800c8ee:	ed9d 0a00 	vldr	s0, [sp]
 800c8f2:	f000 f867 	bl	800c9c4 <__kernel_cosf>
 800c8f6:	e7eb      	b.n	800c8d0 <cosf+0x28>
 800c8f8:	eddd 0a01 	vldr	s1, [sp, #4]
 800c8fc:	ed9d 0a00 	vldr	s0, [sp]
 800c900:	f000 f8b8 	bl	800ca74 <__kernel_sinf>
 800c904:	eeb1 0a40 	vneg.f32	s0, s0
 800c908:	e7e2      	b.n	800c8d0 <cosf+0x28>
 800c90a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c90e:	ed9d 0a00 	vldr	s0, [sp]
 800c912:	f000 f857 	bl	800c9c4 <__kernel_cosf>
 800c916:	e7f5      	b.n	800c904 <cosf+0x5c>
 800c918:	eddd 0a01 	vldr	s1, [sp, #4]
 800c91c:	ed9d 0a00 	vldr	s0, [sp]
 800c920:	2001      	movs	r0, #1
 800c922:	f000 f8a7 	bl	800ca74 <__kernel_sinf>
 800c926:	e7d3      	b.n	800c8d0 <cosf+0x28>
 800c928:	3f490fd8 	.word	0x3f490fd8
 800c92c:	00000000 	.word	0x00000000

0800c930 <sinf>:
 800c930:	ee10 3a10 	vmov	r3, s0
 800c934:	b507      	push	{r0, r1, r2, lr}
 800c936:	4a1f      	ldr	r2, [pc, #124]	@ (800c9b4 <sinf+0x84>)
 800c938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d807      	bhi.n	800c950 <sinf+0x20>
 800c940:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800c9b8 <sinf+0x88>
 800c944:	2000      	movs	r0, #0
 800c946:	b003      	add	sp, #12
 800c948:	f85d eb04 	ldr.w	lr, [sp], #4
 800c94c:	f000 b892 	b.w	800ca74 <__kernel_sinf>
 800c950:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c954:	d304      	bcc.n	800c960 <sinf+0x30>
 800c956:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c95a:	b003      	add	sp, #12
 800c95c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c960:	4668      	mov	r0, sp
 800c962:	f000 f96f 	bl	800cc44 <__ieee754_rem_pio2f>
 800c966:	f000 0003 	and.w	r0, r0, #3
 800c96a:	2801      	cmp	r0, #1
 800c96c:	d00a      	beq.n	800c984 <sinf+0x54>
 800c96e:	2802      	cmp	r0, #2
 800c970:	d00f      	beq.n	800c992 <sinf+0x62>
 800c972:	b9c0      	cbnz	r0, 800c9a6 <sinf+0x76>
 800c974:	eddd 0a01 	vldr	s1, [sp, #4]
 800c978:	ed9d 0a00 	vldr	s0, [sp]
 800c97c:	2001      	movs	r0, #1
 800c97e:	f000 f879 	bl	800ca74 <__kernel_sinf>
 800c982:	e7ea      	b.n	800c95a <sinf+0x2a>
 800c984:	eddd 0a01 	vldr	s1, [sp, #4]
 800c988:	ed9d 0a00 	vldr	s0, [sp]
 800c98c:	f000 f81a 	bl	800c9c4 <__kernel_cosf>
 800c990:	e7e3      	b.n	800c95a <sinf+0x2a>
 800c992:	eddd 0a01 	vldr	s1, [sp, #4]
 800c996:	ed9d 0a00 	vldr	s0, [sp]
 800c99a:	2001      	movs	r0, #1
 800c99c:	f000 f86a 	bl	800ca74 <__kernel_sinf>
 800c9a0:	eeb1 0a40 	vneg.f32	s0, s0
 800c9a4:	e7d9      	b.n	800c95a <sinf+0x2a>
 800c9a6:	eddd 0a01 	vldr	s1, [sp, #4]
 800c9aa:	ed9d 0a00 	vldr	s0, [sp]
 800c9ae:	f000 f809 	bl	800c9c4 <__kernel_cosf>
 800c9b2:	e7f5      	b.n	800c9a0 <sinf+0x70>
 800c9b4:	3f490fd8 	.word	0x3f490fd8
 800c9b8:	00000000 	.word	0x00000000

0800c9bc <__ieee754_sqrtf>:
 800c9bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c9c0:	4770      	bx	lr
	...

0800c9c4 <__kernel_cosf>:
 800c9c4:	ee10 3a10 	vmov	r3, s0
 800c9c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c9cc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c9d0:	eef0 6a40 	vmov.f32	s13, s0
 800c9d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c9d8:	d204      	bcs.n	800c9e4 <__kernel_cosf+0x20>
 800c9da:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c9de:	ee17 2a90 	vmov	r2, s15
 800c9e2:	b342      	cbz	r2, 800ca36 <__kernel_cosf+0x72>
 800c9e4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c9e8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ca54 <__kernel_cosf+0x90>
 800c9ec:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ca58 <__kernel_cosf+0x94>
 800c9f0:	4a1a      	ldr	r2, [pc, #104]	@ (800ca5c <__kernel_cosf+0x98>)
 800c9f2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ca60 <__kernel_cosf+0x9c>
 800c9fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ca00:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800ca64 <__kernel_cosf+0xa0>
 800ca04:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ca08:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800ca68 <__kernel_cosf+0xa4>
 800ca0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ca10:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800ca6c <__kernel_cosf+0xa8>
 800ca14:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ca18:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ca1c:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ca20:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ca24:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ca28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca2c:	d804      	bhi.n	800ca38 <__kernel_cosf+0x74>
 800ca2e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ca32:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ca36:	4770      	bx	lr
 800ca38:	4a0d      	ldr	r2, [pc, #52]	@ (800ca70 <__kernel_cosf+0xac>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	bf9a      	itte	ls
 800ca3e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ca42:	ee07 3a10 	vmovls	s14, r3
 800ca46:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ca4a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ca4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca52:	e7ec      	b.n	800ca2e <__kernel_cosf+0x6a>
 800ca54:	ad47d74e 	.word	0xad47d74e
 800ca58:	310f74f6 	.word	0x310f74f6
 800ca5c:	3e999999 	.word	0x3e999999
 800ca60:	b493f27c 	.word	0xb493f27c
 800ca64:	37d00d01 	.word	0x37d00d01
 800ca68:	bab60b61 	.word	0xbab60b61
 800ca6c:	3d2aaaab 	.word	0x3d2aaaab
 800ca70:	3f480000 	.word	0x3f480000

0800ca74 <__kernel_sinf>:
 800ca74:	ee10 3a10 	vmov	r3, s0
 800ca78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca7c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ca80:	d204      	bcs.n	800ca8c <__kernel_sinf+0x18>
 800ca82:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ca86:	ee17 3a90 	vmov	r3, s15
 800ca8a:	b35b      	cbz	r3, 800cae4 <__kernel_sinf+0x70>
 800ca8c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ca90:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800cae8 <__kernel_sinf+0x74>
 800ca94:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800caec <__kernel_sinf+0x78>
 800ca98:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ca9c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800caf0 <__kernel_sinf+0x7c>
 800caa0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800caa4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800caf4 <__kernel_sinf+0x80>
 800caa8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800caac:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800caf8 <__kernel_sinf+0x84>
 800cab0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800cab4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cab8:	b930      	cbnz	r0, 800cac8 <__kernel_sinf+0x54>
 800caba:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800cafc <__kernel_sinf+0x88>
 800cabe:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cac2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800cac6:	4770      	bx	lr
 800cac8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800cacc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800cad0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800cad4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800cad8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800cb00 <__kernel_sinf+0x8c>
 800cadc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800cae0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	2f2ec9d3 	.word	0x2f2ec9d3
 800caec:	b2d72f34 	.word	0xb2d72f34
 800caf0:	3638ef1b 	.word	0x3638ef1b
 800caf4:	b9500d01 	.word	0xb9500d01
 800caf8:	3c088889 	.word	0x3c088889
 800cafc:	be2aaaab 	.word	0xbe2aaaab
 800cb00:	3e2aaaab 	.word	0x3e2aaaab

0800cb04 <__ieee754_atan2f>:
 800cb04:	ee10 2a90 	vmov	r2, s1
 800cb08:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800cb0c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cb10:	b510      	push	{r4, lr}
 800cb12:	eef0 7a40 	vmov.f32	s15, s0
 800cb16:	d806      	bhi.n	800cb26 <__ieee754_atan2f+0x22>
 800cb18:	ee10 0a10 	vmov	r0, s0
 800cb1c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800cb20:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cb24:	d904      	bls.n	800cb30 <__ieee754_atan2f+0x2c>
 800cb26:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800cb2a:	eeb0 0a67 	vmov.f32	s0, s15
 800cb2e:	bd10      	pop	{r4, pc}
 800cb30:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800cb34:	d103      	bne.n	800cb3e <__ieee754_atan2f+0x3a>
 800cb36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb3a:	f000 b9b3 	b.w	800cea4 <atanf>
 800cb3e:	1794      	asrs	r4, r2, #30
 800cb40:	f004 0402 	and.w	r4, r4, #2
 800cb44:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800cb48:	b943      	cbnz	r3, 800cb5c <__ieee754_atan2f+0x58>
 800cb4a:	2c02      	cmp	r4, #2
 800cb4c:	d05e      	beq.n	800cc0c <__ieee754_atan2f+0x108>
 800cb4e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800cc20 <__ieee754_atan2f+0x11c>
 800cb52:	2c03      	cmp	r4, #3
 800cb54:	bf08      	it	eq
 800cb56:	eef0 7a47 	vmoveq.f32	s15, s14
 800cb5a:	e7e6      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cb5c:	b941      	cbnz	r1, 800cb70 <__ieee754_atan2f+0x6c>
 800cb5e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800cc24 <__ieee754_atan2f+0x120>
 800cb62:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800cc28 <__ieee754_atan2f+0x124>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	bfa8      	it	ge
 800cb6a:	eef0 7a47 	vmovge.f32	s15, s14
 800cb6e:	e7dc      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cb70:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cb74:	d110      	bne.n	800cb98 <__ieee754_atan2f+0x94>
 800cb76:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cb7a:	f104 34ff 	add.w	r4, r4, #4294967295
 800cb7e:	d107      	bne.n	800cb90 <__ieee754_atan2f+0x8c>
 800cb80:	2c02      	cmp	r4, #2
 800cb82:	d846      	bhi.n	800cc12 <__ieee754_atan2f+0x10e>
 800cb84:	4b29      	ldr	r3, [pc, #164]	@ (800cc2c <__ieee754_atan2f+0x128>)
 800cb86:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cb8a:	edd3 7a00 	vldr	s15, [r3]
 800cb8e:	e7cc      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cb90:	2c02      	cmp	r4, #2
 800cb92:	d841      	bhi.n	800cc18 <__ieee754_atan2f+0x114>
 800cb94:	4b26      	ldr	r3, [pc, #152]	@ (800cc30 <__ieee754_atan2f+0x12c>)
 800cb96:	e7f6      	b.n	800cb86 <__ieee754_atan2f+0x82>
 800cb98:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cb9c:	d0df      	beq.n	800cb5e <__ieee754_atan2f+0x5a>
 800cb9e:	1a5b      	subs	r3, r3, r1
 800cba0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800cba4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800cba8:	da1a      	bge.n	800cbe0 <__ieee754_atan2f+0xdc>
 800cbaa:	2a00      	cmp	r2, #0
 800cbac:	da01      	bge.n	800cbb2 <__ieee754_atan2f+0xae>
 800cbae:	313c      	adds	r1, #60	@ 0x3c
 800cbb0:	db19      	blt.n	800cbe6 <__ieee754_atan2f+0xe2>
 800cbb2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800cbb6:	f000 fa49 	bl	800d04c <fabsf>
 800cbba:	f000 f973 	bl	800cea4 <atanf>
 800cbbe:	eef0 7a40 	vmov.f32	s15, s0
 800cbc2:	2c01      	cmp	r4, #1
 800cbc4:	d012      	beq.n	800cbec <__ieee754_atan2f+0xe8>
 800cbc6:	2c02      	cmp	r4, #2
 800cbc8:	d017      	beq.n	800cbfa <__ieee754_atan2f+0xf6>
 800cbca:	2c00      	cmp	r4, #0
 800cbcc:	d0ad      	beq.n	800cb2a <__ieee754_atan2f+0x26>
 800cbce:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800cc34 <__ieee754_atan2f+0x130>
 800cbd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbd6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800cc38 <__ieee754_atan2f+0x134>
 800cbda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cbde:	e7a4      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cbe0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800cc28 <__ieee754_atan2f+0x124>
 800cbe4:	e7ed      	b.n	800cbc2 <__ieee754_atan2f+0xbe>
 800cbe6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800cc3c <__ieee754_atan2f+0x138>
 800cbea:	e7ea      	b.n	800cbc2 <__ieee754_atan2f+0xbe>
 800cbec:	ee17 3a90 	vmov	r3, s15
 800cbf0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cbf4:	ee07 3a90 	vmov	s15, r3
 800cbf8:	e797      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cbfa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800cc34 <__ieee754_atan2f+0x130>
 800cbfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc02:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800cc38 <__ieee754_atan2f+0x134>
 800cc06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc0a:	e78e      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cc0c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800cc38 <__ieee754_atan2f+0x134>
 800cc10:	e78b      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cc12:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800cc40 <__ieee754_atan2f+0x13c>
 800cc16:	e788      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cc18:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800cc3c <__ieee754_atan2f+0x138>
 800cc1c:	e785      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cc1e:	bf00      	nop
 800cc20:	c0490fdb 	.word	0xc0490fdb
 800cc24:	bfc90fdb 	.word	0xbfc90fdb
 800cc28:	3fc90fdb 	.word	0x3fc90fdb
 800cc2c:	080238f4 	.word	0x080238f4
 800cc30:	080238e8 	.word	0x080238e8
 800cc34:	33bbbd2e 	.word	0x33bbbd2e
 800cc38:	40490fdb 	.word	0x40490fdb
 800cc3c:	00000000 	.word	0x00000000
 800cc40:	3f490fdb 	.word	0x3f490fdb

0800cc44 <__ieee754_rem_pio2f>:
 800cc44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc46:	ee10 6a10 	vmov	r6, s0
 800cc4a:	4b88      	ldr	r3, [pc, #544]	@ (800ce6c <__ieee754_rem_pio2f+0x228>)
 800cc4c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800cc50:	429d      	cmp	r5, r3
 800cc52:	b087      	sub	sp, #28
 800cc54:	4604      	mov	r4, r0
 800cc56:	d805      	bhi.n	800cc64 <__ieee754_rem_pio2f+0x20>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	ed80 0a00 	vstr	s0, [r0]
 800cc5e:	6043      	str	r3, [r0, #4]
 800cc60:	2000      	movs	r0, #0
 800cc62:	e022      	b.n	800ccaa <__ieee754_rem_pio2f+0x66>
 800cc64:	4b82      	ldr	r3, [pc, #520]	@ (800ce70 <__ieee754_rem_pio2f+0x22c>)
 800cc66:	429d      	cmp	r5, r3
 800cc68:	d83a      	bhi.n	800cce0 <__ieee754_rem_pio2f+0x9c>
 800cc6a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800cc6e:	2e00      	cmp	r6, #0
 800cc70:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800ce74 <__ieee754_rem_pio2f+0x230>
 800cc74:	4a80      	ldr	r2, [pc, #512]	@ (800ce78 <__ieee754_rem_pio2f+0x234>)
 800cc76:	f023 030f 	bic.w	r3, r3, #15
 800cc7a:	dd18      	ble.n	800ccae <__ieee754_rem_pio2f+0x6a>
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800cc82:	bf09      	itett	eq
 800cc84:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800ce7c <__ieee754_rem_pio2f+0x238>
 800cc88:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800ce80 <__ieee754_rem_pio2f+0x23c>
 800cc8c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800ce84 <__ieee754_rem_pio2f+0x240>
 800cc90:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800cc94:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800cc98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc9c:	ed80 7a00 	vstr	s14, [r0]
 800cca0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cca4:	edc0 7a01 	vstr	s15, [r0, #4]
 800cca8:	2001      	movs	r0, #1
 800ccaa:	b007      	add	sp, #28
 800ccac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ccb4:	bf09      	itett	eq
 800ccb6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800ce7c <__ieee754_rem_pio2f+0x238>
 800ccba:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800ce80 <__ieee754_rem_pio2f+0x23c>
 800ccbe:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800ce84 <__ieee754_rem_pio2f+0x240>
 800ccc2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800ccc6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ccca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccce:	ed80 7a00 	vstr	s14, [r0]
 800ccd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccd6:	edc0 7a01 	vstr	s15, [r0, #4]
 800ccda:	f04f 30ff 	mov.w	r0, #4294967295
 800ccde:	e7e4      	b.n	800ccaa <__ieee754_rem_pio2f+0x66>
 800cce0:	4b69      	ldr	r3, [pc, #420]	@ (800ce88 <__ieee754_rem_pio2f+0x244>)
 800cce2:	429d      	cmp	r5, r3
 800cce4:	d873      	bhi.n	800cdce <__ieee754_rem_pio2f+0x18a>
 800cce6:	f000 f9b1 	bl	800d04c <fabsf>
 800ccea:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800ce8c <__ieee754_rem_pio2f+0x248>
 800ccee:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ccf2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ccf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ccfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ccfe:	ee17 0a90 	vmov	r0, s15
 800cd02:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ce74 <__ieee754_rem_pio2f+0x230>
 800cd06:	eea7 0a67 	vfms.f32	s0, s14, s15
 800cd0a:	281f      	cmp	r0, #31
 800cd0c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ce80 <__ieee754_rem_pio2f+0x23c>
 800cd10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd14:	eeb1 6a47 	vneg.f32	s12, s14
 800cd18:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cd1c:	ee16 1a90 	vmov	r1, s13
 800cd20:	dc09      	bgt.n	800cd36 <__ieee754_rem_pio2f+0xf2>
 800cd22:	4a5b      	ldr	r2, [pc, #364]	@ (800ce90 <__ieee754_rem_pio2f+0x24c>)
 800cd24:	1e47      	subs	r7, r0, #1
 800cd26:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800cd2a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800cd2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d107      	bne.n	800cd46 <__ieee754_rem_pio2f+0x102>
 800cd36:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800cd3a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800cd3e:	2a08      	cmp	r2, #8
 800cd40:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800cd44:	dc14      	bgt.n	800cd70 <__ieee754_rem_pio2f+0x12c>
 800cd46:	6021      	str	r1, [r4, #0]
 800cd48:	ed94 7a00 	vldr	s14, [r4]
 800cd4c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cd50:	2e00      	cmp	r6, #0
 800cd52:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cd56:	ed84 0a01 	vstr	s0, [r4, #4]
 800cd5a:	daa6      	bge.n	800ccaa <__ieee754_rem_pio2f+0x66>
 800cd5c:	eeb1 7a47 	vneg.f32	s14, s14
 800cd60:	eeb1 0a40 	vneg.f32	s0, s0
 800cd64:	ed84 7a00 	vstr	s14, [r4]
 800cd68:	ed84 0a01 	vstr	s0, [r4, #4]
 800cd6c:	4240      	negs	r0, r0
 800cd6e:	e79c      	b.n	800ccaa <__ieee754_rem_pio2f+0x66>
 800cd70:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800ce7c <__ieee754_rem_pio2f+0x238>
 800cd74:	eef0 6a40 	vmov.f32	s13, s0
 800cd78:	eee6 6a25 	vfma.f32	s13, s12, s11
 800cd7c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800cd80:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cd84:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ce84 <__ieee754_rem_pio2f+0x240>
 800cd88:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800cd8c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800cd90:	ee15 2a90 	vmov	r2, s11
 800cd94:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800cd98:	1a5b      	subs	r3, r3, r1
 800cd9a:	2b19      	cmp	r3, #25
 800cd9c:	dc04      	bgt.n	800cda8 <__ieee754_rem_pio2f+0x164>
 800cd9e:	edc4 5a00 	vstr	s11, [r4]
 800cda2:	eeb0 0a66 	vmov.f32	s0, s13
 800cda6:	e7cf      	b.n	800cd48 <__ieee754_rem_pio2f+0x104>
 800cda8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800ce94 <__ieee754_rem_pio2f+0x250>
 800cdac:	eeb0 0a66 	vmov.f32	s0, s13
 800cdb0:	eea6 0a25 	vfma.f32	s0, s12, s11
 800cdb4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800cdb8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800ce98 <__ieee754_rem_pio2f+0x254>
 800cdbc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cdc0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800cdc4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cdc8:	ed84 7a00 	vstr	s14, [r4]
 800cdcc:	e7bc      	b.n	800cd48 <__ieee754_rem_pio2f+0x104>
 800cdce:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800cdd2:	d306      	bcc.n	800cde2 <__ieee754_rem_pio2f+0x19e>
 800cdd4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cdd8:	edc0 7a01 	vstr	s15, [r0, #4]
 800cddc:	edc0 7a00 	vstr	s15, [r0]
 800cde0:	e73e      	b.n	800cc60 <__ieee754_rem_pio2f+0x1c>
 800cde2:	15ea      	asrs	r2, r5, #23
 800cde4:	3a86      	subs	r2, #134	@ 0x86
 800cde6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800cdea:	ee07 3a90 	vmov	s15, r3
 800cdee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cdf2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800ce9c <__ieee754_rem_pio2f+0x258>
 800cdf6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cdfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cdfe:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ce02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ce06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ce0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ce0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce12:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ce16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ce1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ce1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce22:	edcd 7a05 	vstr	s15, [sp, #20]
 800ce26:	d11e      	bne.n	800ce66 <__ieee754_rem_pio2f+0x222>
 800ce28:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ce2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce30:	bf0c      	ite	eq
 800ce32:	2301      	moveq	r3, #1
 800ce34:	2302      	movne	r3, #2
 800ce36:	491a      	ldr	r1, [pc, #104]	@ (800cea0 <__ieee754_rem_pio2f+0x25c>)
 800ce38:	9101      	str	r1, [sp, #4]
 800ce3a:	2102      	movs	r1, #2
 800ce3c:	9100      	str	r1, [sp, #0]
 800ce3e:	a803      	add	r0, sp, #12
 800ce40:	4621      	mov	r1, r4
 800ce42:	f000 f971 	bl	800d128 <__kernel_rem_pio2f>
 800ce46:	2e00      	cmp	r6, #0
 800ce48:	f6bf af2f 	bge.w	800ccaa <__ieee754_rem_pio2f+0x66>
 800ce4c:	edd4 7a00 	vldr	s15, [r4]
 800ce50:	eef1 7a67 	vneg.f32	s15, s15
 800ce54:	edc4 7a00 	vstr	s15, [r4]
 800ce58:	edd4 7a01 	vldr	s15, [r4, #4]
 800ce5c:	eef1 7a67 	vneg.f32	s15, s15
 800ce60:	edc4 7a01 	vstr	s15, [r4, #4]
 800ce64:	e782      	b.n	800cd6c <__ieee754_rem_pio2f+0x128>
 800ce66:	2303      	movs	r3, #3
 800ce68:	e7e5      	b.n	800ce36 <__ieee754_rem_pio2f+0x1f2>
 800ce6a:	bf00      	nop
 800ce6c:	3f490fd8 	.word	0x3f490fd8
 800ce70:	4016cbe3 	.word	0x4016cbe3
 800ce74:	3fc90f80 	.word	0x3fc90f80
 800ce78:	3fc90fd0 	.word	0x3fc90fd0
 800ce7c:	37354400 	.word	0x37354400
 800ce80:	37354443 	.word	0x37354443
 800ce84:	2e85a308 	.word	0x2e85a308
 800ce88:	43490f80 	.word	0x43490f80
 800ce8c:	3f22f984 	.word	0x3f22f984
 800ce90:	08023900 	.word	0x08023900
 800ce94:	2e85a300 	.word	0x2e85a300
 800ce98:	248d3132 	.word	0x248d3132
 800ce9c:	43800000 	.word	0x43800000
 800cea0:	08023980 	.word	0x08023980

0800cea4 <atanf>:
 800cea4:	b538      	push	{r3, r4, r5, lr}
 800cea6:	ee10 5a10 	vmov	r5, s0
 800ceaa:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ceae:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800ceb2:	eef0 7a40 	vmov.f32	s15, s0
 800ceb6:	d310      	bcc.n	800ceda <atanf+0x36>
 800ceb8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800cebc:	d904      	bls.n	800cec8 <atanf+0x24>
 800cebe:	ee70 7a00 	vadd.f32	s15, s0, s0
 800cec2:	eeb0 0a67 	vmov.f32	s0, s15
 800cec6:	bd38      	pop	{r3, r4, r5, pc}
 800cec8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d000 <atanf+0x15c>
 800cecc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d004 <atanf+0x160>
 800ced0:	2d00      	cmp	r5, #0
 800ced2:	bfc8      	it	gt
 800ced4:	eef0 7a47 	vmovgt.f32	s15, s14
 800ced8:	e7f3      	b.n	800cec2 <atanf+0x1e>
 800ceda:	4b4b      	ldr	r3, [pc, #300]	@ (800d008 <atanf+0x164>)
 800cedc:	429c      	cmp	r4, r3
 800cede:	d810      	bhi.n	800cf02 <atanf+0x5e>
 800cee0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800cee4:	d20a      	bcs.n	800cefc <atanf+0x58>
 800cee6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d00c <atanf+0x168>
 800ceea:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ceee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cef2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800cef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cefa:	dce2      	bgt.n	800cec2 <atanf+0x1e>
 800cefc:	f04f 33ff 	mov.w	r3, #4294967295
 800cf00:	e013      	b.n	800cf2a <atanf+0x86>
 800cf02:	f000 f8a3 	bl	800d04c <fabsf>
 800cf06:	4b42      	ldr	r3, [pc, #264]	@ (800d010 <atanf+0x16c>)
 800cf08:	429c      	cmp	r4, r3
 800cf0a:	d84f      	bhi.n	800cfac <atanf+0x108>
 800cf0c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800cf10:	429c      	cmp	r4, r3
 800cf12:	d841      	bhi.n	800cf98 <atanf+0xf4>
 800cf14:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800cf18:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cf1c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cf20:	2300      	movs	r3, #0
 800cf22:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cf26:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cf2a:	1c5a      	adds	r2, r3, #1
 800cf2c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800cf30:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800d014 <atanf+0x170>
 800cf34:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800d018 <atanf+0x174>
 800cf38:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800d01c <atanf+0x178>
 800cf3c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800cf40:	eee6 5a87 	vfma.f32	s11, s13, s14
 800cf44:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800d020 <atanf+0x17c>
 800cf48:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cf4c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800d024 <atanf+0x180>
 800cf50:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cf54:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d028 <atanf+0x184>
 800cf58:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cf5c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d02c <atanf+0x188>
 800cf60:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cf64:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d030 <atanf+0x18c>
 800cf68:	eea6 5a87 	vfma.f32	s10, s13, s14
 800cf6c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d034 <atanf+0x190>
 800cf70:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cf74:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800d038 <atanf+0x194>
 800cf78:	eea7 5a26 	vfma.f32	s10, s14, s13
 800cf7c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800d03c <atanf+0x198>
 800cf80:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cf84:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cf88:	eea5 7a86 	vfma.f32	s14, s11, s12
 800cf8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cf90:	d121      	bne.n	800cfd6 <atanf+0x132>
 800cf92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf96:	e794      	b.n	800cec2 <atanf+0x1e>
 800cf98:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cf9c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cfa0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cfaa:	e7be      	b.n	800cf2a <atanf+0x86>
 800cfac:	4b24      	ldr	r3, [pc, #144]	@ (800d040 <atanf+0x19c>)
 800cfae:	429c      	cmp	r4, r3
 800cfb0:	d80b      	bhi.n	800cfca <atanf+0x126>
 800cfb2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800cfb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cfba:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cfbe:	2302      	movs	r3, #2
 800cfc0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cfc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfc8:	e7af      	b.n	800cf2a <atanf+0x86>
 800cfca:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cfce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cfd2:	2303      	movs	r3, #3
 800cfd4:	e7a9      	b.n	800cf2a <atanf+0x86>
 800cfd6:	4a1b      	ldr	r2, [pc, #108]	@ (800d044 <atanf+0x1a0>)
 800cfd8:	491b      	ldr	r1, [pc, #108]	@ (800d048 <atanf+0x1a4>)
 800cfda:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cfde:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800cfe2:	edd3 6a00 	vldr	s13, [r3]
 800cfe6:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cfea:	2d00      	cmp	r5, #0
 800cfec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cff0:	edd2 7a00 	vldr	s15, [r2]
 800cff4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cff8:	bfb8      	it	lt
 800cffa:	eef1 7a67 	vneglt.f32	s15, s15
 800cffe:	e760      	b.n	800cec2 <atanf+0x1e>
 800d000:	bfc90fdb 	.word	0xbfc90fdb
 800d004:	3fc90fdb 	.word	0x3fc90fdb
 800d008:	3edfffff 	.word	0x3edfffff
 800d00c:	7149f2ca 	.word	0x7149f2ca
 800d010:	3f97ffff 	.word	0x3f97ffff
 800d014:	3c8569d7 	.word	0x3c8569d7
 800d018:	3d4bda59 	.word	0x3d4bda59
 800d01c:	bd6ef16b 	.word	0xbd6ef16b
 800d020:	3d886b35 	.word	0x3d886b35
 800d024:	3dba2e6e 	.word	0x3dba2e6e
 800d028:	3e124925 	.word	0x3e124925
 800d02c:	3eaaaaab 	.word	0x3eaaaaab
 800d030:	bd15a221 	.word	0xbd15a221
 800d034:	bd9d8795 	.word	0xbd9d8795
 800d038:	bde38e38 	.word	0xbde38e38
 800d03c:	be4ccccd 	.word	0xbe4ccccd
 800d040:	401bffff 	.word	0x401bffff
 800d044:	08023ca8 	.word	0x08023ca8
 800d048:	08023c98 	.word	0x08023c98

0800d04c <fabsf>:
 800d04c:	ee10 3a10 	vmov	r3, s0
 800d050:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d054:	ee00 3a10 	vmov	s0, r3
 800d058:	4770      	bx	lr
	...

0800d05c <scalbnf>:
 800d05c:	ee10 3a10 	vmov	r3, s0
 800d060:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d064:	d02b      	beq.n	800d0be <scalbnf+0x62>
 800d066:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d06a:	d302      	bcc.n	800d072 <scalbnf+0x16>
 800d06c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d070:	4770      	bx	lr
 800d072:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d076:	d123      	bne.n	800d0c0 <scalbnf+0x64>
 800d078:	4b24      	ldr	r3, [pc, #144]	@ (800d10c <scalbnf+0xb0>)
 800d07a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d110 <scalbnf+0xb4>
 800d07e:	4298      	cmp	r0, r3
 800d080:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d084:	db17      	blt.n	800d0b6 <scalbnf+0x5a>
 800d086:	ee10 3a10 	vmov	r3, s0
 800d08a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d08e:	3a19      	subs	r2, #25
 800d090:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d094:	4288      	cmp	r0, r1
 800d096:	dd15      	ble.n	800d0c4 <scalbnf+0x68>
 800d098:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d114 <scalbnf+0xb8>
 800d09c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d118 <scalbnf+0xbc>
 800d0a0:	ee10 3a10 	vmov	r3, s0
 800d0a4:	eeb0 7a67 	vmov.f32	s14, s15
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	bfb8      	it	lt
 800d0ac:	eef0 7a66 	vmovlt.f32	s15, s13
 800d0b0:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d0b4:	4770      	bx	lr
 800d0b6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d11c <scalbnf+0xc0>
 800d0ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d0be:	4770      	bx	lr
 800d0c0:	0dd2      	lsrs	r2, r2, #23
 800d0c2:	e7e5      	b.n	800d090 <scalbnf+0x34>
 800d0c4:	4410      	add	r0, r2
 800d0c6:	28fe      	cmp	r0, #254	@ 0xfe
 800d0c8:	dce6      	bgt.n	800d098 <scalbnf+0x3c>
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	dd06      	ble.n	800d0dc <scalbnf+0x80>
 800d0ce:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d0d2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d0d6:	ee00 3a10 	vmov	s0, r3
 800d0da:	4770      	bx	lr
 800d0dc:	f110 0f16 	cmn.w	r0, #22
 800d0e0:	da09      	bge.n	800d0f6 <scalbnf+0x9a>
 800d0e2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d11c <scalbnf+0xc0>
 800d0e6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d120 <scalbnf+0xc4>
 800d0ea:	ee10 3a10 	vmov	r3, s0
 800d0ee:	eeb0 7a67 	vmov.f32	s14, s15
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	e7d9      	b.n	800d0aa <scalbnf+0x4e>
 800d0f6:	3019      	adds	r0, #25
 800d0f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d0fc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d100:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d124 <scalbnf+0xc8>
 800d104:	ee07 3a90 	vmov	s15, r3
 800d108:	e7d7      	b.n	800d0ba <scalbnf+0x5e>
 800d10a:	bf00      	nop
 800d10c:	ffff3cb0 	.word	0xffff3cb0
 800d110:	4c000000 	.word	0x4c000000
 800d114:	7149f2ca 	.word	0x7149f2ca
 800d118:	f149f2ca 	.word	0xf149f2ca
 800d11c:	0da24260 	.word	0x0da24260
 800d120:	8da24260 	.word	0x8da24260
 800d124:	33000000 	.word	0x33000000

0800d128 <__kernel_rem_pio2f>:
 800d128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d12c:	ed2d 8b04 	vpush	{d8-d9}
 800d130:	b0d9      	sub	sp, #356	@ 0x164
 800d132:	4690      	mov	r8, r2
 800d134:	9001      	str	r0, [sp, #4]
 800d136:	4ab6      	ldr	r2, [pc, #728]	@ (800d410 <__kernel_rem_pio2f+0x2e8>)
 800d138:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d13a:	f118 0f04 	cmn.w	r8, #4
 800d13e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d142:	460f      	mov	r7, r1
 800d144:	f103 3bff 	add.w	fp, r3, #4294967295
 800d148:	db26      	blt.n	800d198 <__kernel_rem_pio2f+0x70>
 800d14a:	f1b8 0203 	subs.w	r2, r8, #3
 800d14e:	bf48      	it	mi
 800d150:	f108 0204 	addmi.w	r2, r8, #4
 800d154:	10d2      	asrs	r2, r2, #3
 800d156:	1c55      	adds	r5, r2, #1
 800d158:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d15a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800d420 <__kernel_rem_pio2f+0x2f8>
 800d15e:	00e8      	lsls	r0, r5, #3
 800d160:	eba2 060b 	sub.w	r6, r2, fp
 800d164:	9002      	str	r0, [sp, #8]
 800d166:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800d16a:	eb0a 0c0b 	add.w	ip, sl, fp
 800d16e:	ac1c      	add	r4, sp, #112	@ 0x70
 800d170:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800d174:	2000      	movs	r0, #0
 800d176:	4560      	cmp	r0, ip
 800d178:	dd10      	ble.n	800d19c <__kernel_rem_pio2f+0x74>
 800d17a:	a91c      	add	r1, sp, #112	@ 0x70
 800d17c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d180:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800d184:	2600      	movs	r6, #0
 800d186:	4556      	cmp	r6, sl
 800d188:	dc24      	bgt.n	800d1d4 <__kernel_rem_pio2f+0xac>
 800d18a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d18e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800d420 <__kernel_rem_pio2f+0x2f8>
 800d192:	4684      	mov	ip, r0
 800d194:	2400      	movs	r4, #0
 800d196:	e016      	b.n	800d1c6 <__kernel_rem_pio2f+0x9e>
 800d198:	2200      	movs	r2, #0
 800d19a:	e7dc      	b.n	800d156 <__kernel_rem_pio2f+0x2e>
 800d19c:	42c6      	cmn	r6, r0
 800d19e:	bf5d      	ittte	pl
 800d1a0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800d1a4:	ee07 1a90 	vmovpl	s15, r1
 800d1a8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d1ac:	eef0 7a47 	vmovmi.f32	s15, s14
 800d1b0:	ece4 7a01 	vstmia	r4!, {s15}
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	e7de      	b.n	800d176 <__kernel_rem_pio2f+0x4e>
 800d1b8:	ecfe 6a01 	vldmia	lr!, {s13}
 800d1bc:	ed3c 7a01 	vldmdb	ip!, {s14}
 800d1c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d1c4:	3401      	adds	r4, #1
 800d1c6:	455c      	cmp	r4, fp
 800d1c8:	ddf6      	ble.n	800d1b8 <__kernel_rem_pio2f+0x90>
 800d1ca:	ece9 7a01 	vstmia	r9!, {s15}
 800d1ce:	3601      	adds	r6, #1
 800d1d0:	3004      	adds	r0, #4
 800d1d2:	e7d8      	b.n	800d186 <__kernel_rem_pio2f+0x5e>
 800d1d4:	a908      	add	r1, sp, #32
 800d1d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1da:	9104      	str	r1, [sp, #16]
 800d1dc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d1de:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800d41c <__kernel_rem_pio2f+0x2f4>
 800d1e2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800d418 <__kernel_rem_pio2f+0x2f0>
 800d1e6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d1ea:	9203      	str	r2, [sp, #12]
 800d1ec:	4654      	mov	r4, sl
 800d1ee:	00a2      	lsls	r2, r4, #2
 800d1f0:	9205      	str	r2, [sp, #20]
 800d1f2:	aa58      	add	r2, sp, #352	@ 0x160
 800d1f4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d1f8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d1fc:	a944      	add	r1, sp, #272	@ 0x110
 800d1fe:	aa08      	add	r2, sp, #32
 800d200:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d204:	4694      	mov	ip, r2
 800d206:	4626      	mov	r6, r4
 800d208:	2e00      	cmp	r6, #0
 800d20a:	dc4c      	bgt.n	800d2a6 <__kernel_rem_pio2f+0x17e>
 800d20c:	4628      	mov	r0, r5
 800d20e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d212:	f7ff ff23 	bl	800d05c <scalbnf>
 800d216:	eeb0 8a40 	vmov.f32	s16, s0
 800d21a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d21e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d222:	f000 f9e9 	bl	800d5f8 <floorf>
 800d226:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d22a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d22e:	2d00      	cmp	r5, #0
 800d230:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d234:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d238:	ee17 9a90 	vmov	r9, s15
 800d23c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d240:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d244:	dd41      	ble.n	800d2ca <__kernel_rem_pio2f+0x1a2>
 800d246:	f104 3cff 	add.w	ip, r4, #4294967295
 800d24a:	a908      	add	r1, sp, #32
 800d24c:	f1c5 0e08 	rsb	lr, r5, #8
 800d250:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800d254:	fa46 f00e 	asr.w	r0, r6, lr
 800d258:	4481      	add	r9, r0
 800d25a:	fa00 f00e 	lsl.w	r0, r0, lr
 800d25e:	1a36      	subs	r6, r6, r0
 800d260:	f1c5 0007 	rsb	r0, r5, #7
 800d264:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800d268:	4106      	asrs	r6, r0
 800d26a:	2e00      	cmp	r6, #0
 800d26c:	dd3c      	ble.n	800d2e8 <__kernel_rem_pio2f+0x1c0>
 800d26e:	f04f 0e00 	mov.w	lr, #0
 800d272:	f109 0901 	add.w	r9, r9, #1
 800d276:	4670      	mov	r0, lr
 800d278:	4574      	cmp	r4, lr
 800d27a:	dc68      	bgt.n	800d34e <__kernel_rem_pio2f+0x226>
 800d27c:	2d00      	cmp	r5, #0
 800d27e:	dd03      	ble.n	800d288 <__kernel_rem_pio2f+0x160>
 800d280:	2d01      	cmp	r5, #1
 800d282:	d074      	beq.n	800d36e <__kernel_rem_pio2f+0x246>
 800d284:	2d02      	cmp	r5, #2
 800d286:	d07d      	beq.n	800d384 <__kernel_rem_pio2f+0x25c>
 800d288:	2e02      	cmp	r6, #2
 800d28a:	d12d      	bne.n	800d2e8 <__kernel_rem_pio2f+0x1c0>
 800d28c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d290:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d294:	b340      	cbz	r0, 800d2e8 <__kernel_rem_pio2f+0x1c0>
 800d296:	4628      	mov	r0, r5
 800d298:	9306      	str	r3, [sp, #24]
 800d29a:	f7ff fedf 	bl	800d05c <scalbnf>
 800d29e:	9b06      	ldr	r3, [sp, #24]
 800d2a0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d2a4:	e020      	b.n	800d2e8 <__kernel_rem_pio2f+0x1c0>
 800d2a6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d2aa:	3e01      	subs	r6, #1
 800d2ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2b4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d2b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d2bc:	ecac 0a01 	vstmia	ip!, {s0}
 800d2c0:	ed30 0a01 	vldmdb	r0!, {s0}
 800d2c4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d2c8:	e79e      	b.n	800d208 <__kernel_rem_pio2f+0xe0>
 800d2ca:	d105      	bne.n	800d2d8 <__kernel_rem_pio2f+0x1b0>
 800d2cc:	1e60      	subs	r0, r4, #1
 800d2ce:	a908      	add	r1, sp, #32
 800d2d0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d2d4:	11f6      	asrs	r6, r6, #7
 800d2d6:	e7c8      	b.n	800d26a <__kernel_rem_pio2f+0x142>
 800d2d8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d2dc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2e4:	da31      	bge.n	800d34a <__kernel_rem_pio2f+0x222>
 800d2e6:	2600      	movs	r6, #0
 800d2e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2f0:	f040 8098 	bne.w	800d424 <__kernel_rem_pio2f+0x2fc>
 800d2f4:	1e60      	subs	r0, r4, #1
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	4550      	cmp	r0, sl
 800d2fa:	da4b      	bge.n	800d394 <__kernel_rem_pio2f+0x26c>
 800d2fc:	2a00      	cmp	r2, #0
 800d2fe:	d065      	beq.n	800d3cc <__kernel_rem_pio2f+0x2a4>
 800d300:	3c01      	subs	r4, #1
 800d302:	ab08      	add	r3, sp, #32
 800d304:	3d08      	subs	r5, #8
 800d306:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d0f8      	beq.n	800d300 <__kernel_rem_pio2f+0x1d8>
 800d30e:	4628      	mov	r0, r5
 800d310:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d314:	f7ff fea2 	bl	800d05c <scalbnf>
 800d318:	1c63      	adds	r3, r4, #1
 800d31a:	aa44      	add	r2, sp, #272	@ 0x110
 800d31c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d41c <__kernel_rem_pio2f+0x2f4>
 800d320:	0099      	lsls	r1, r3, #2
 800d322:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d326:	4623      	mov	r3, r4
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f280 80a9 	bge.w	800d480 <__kernel_rem_pio2f+0x358>
 800d32e:	4623      	mov	r3, r4
 800d330:	2b00      	cmp	r3, #0
 800d332:	f2c0 80c7 	blt.w	800d4c4 <__kernel_rem_pio2f+0x39c>
 800d336:	aa44      	add	r2, sp, #272	@ 0x110
 800d338:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d33c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d414 <__kernel_rem_pio2f+0x2ec>
 800d340:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d420 <__kernel_rem_pio2f+0x2f8>
 800d344:	2000      	movs	r0, #0
 800d346:	1ae2      	subs	r2, r4, r3
 800d348:	e0b1      	b.n	800d4ae <__kernel_rem_pio2f+0x386>
 800d34a:	2602      	movs	r6, #2
 800d34c:	e78f      	b.n	800d26e <__kernel_rem_pio2f+0x146>
 800d34e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d352:	b948      	cbnz	r0, 800d368 <__kernel_rem_pio2f+0x240>
 800d354:	b121      	cbz	r1, 800d360 <__kernel_rem_pio2f+0x238>
 800d356:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d35a:	f842 1c04 	str.w	r1, [r2, #-4]
 800d35e:	2101      	movs	r1, #1
 800d360:	f10e 0e01 	add.w	lr, lr, #1
 800d364:	4608      	mov	r0, r1
 800d366:	e787      	b.n	800d278 <__kernel_rem_pio2f+0x150>
 800d368:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d36c:	e7f5      	b.n	800d35a <__kernel_rem_pio2f+0x232>
 800d36e:	f104 3cff 	add.w	ip, r4, #4294967295
 800d372:	aa08      	add	r2, sp, #32
 800d374:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d378:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d37c:	a908      	add	r1, sp, #32
 800d37e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d382:	e781      	b.n	800d288 <__kernel_rem_pio2f+0x160>
 800d384:	f104 3cff 	add.w	ip, r4, #4294967295
 800d388:	aa08      	add	r2, sp, #32
 800d38a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d38e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d392:	e7f3      	b.n	800d37c <__kernel_rem_pio2f+0x254>
 800d394:	a908      	add	r1, sp, #32
 800d396:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d39a:	3801      	subs	r0, #1
 800d39c:	430a      	orrs	r2, r1
 800d39e:	e7ab      	b.n	800d2f8 <__kernel_rem_pio2f+0x1d0>
 800d3a0:	3201      	adds	r2, #1
 800d3a2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d3a6:	2e00      	cmp	r6, #0
 800d3a8:	d0fa      	beq.n	800d3a0 <__kernel_rem_pio2f+0x278>
 800d3aa:	9905      	ldr	r1, [sp, #20]
 800d3ac:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d3b0:	eb0d 0001 	add.w	r0, sp, r1
 800d3b4:	18e6      	adds	r6, r4, r3
 800d3b6:	a91c      	add	r1, sp, #112	@ 0x70
 800d3b8:	f104 0c01 	add.w	ip, r4, #1
 800d3bc:	384c      	subs	r0, #76	@ 0x4c
 800d3be:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d3c2:	4422      	add	r2, r4
 800d3c4:	4562      	cmp	r2, ip
 800d3c6:	da04      	bge.n	800d3d2 <__kernel_rem_pio2f+0x2aa>
 800d3c8:	4614      	mov	r4, r2
 800d3ca:	e710      	b.n	800d1ee <__kernel_rem_pio2f+0xc6>
 800d3cc:	9804      	ldr	r0, [sp, #16]
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	e7e7      	b.n	800d3a2 <__kernel_rem_pio2f+0x27a>
 800d3d2:	9903      	ldr	r1, [sp, #12]
 800d3d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d3d8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d3dc:	9105      	str	r1, [sp, #20]
 800d3de:	ee07 1a90 	vmov	s15, r1
 800d3e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3e6:	2400      	movs	r4, #0
 800d3e8:	ece6 7a01 	vstmia	r6!, {s15}
 800d3ec:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d420 <__kernel_rem_pio2f+0x2f8>
 800d3f0:	46b1      	mov	r9, r6
 800d3f2:	455c      	cmp	r4, fp
 800d3f4:	dd04      	ble.n	800d400 <__kernel_rem_pio2f+0x2d8>
 800d3f6:	ece0 7a01 	vstmia	r0!, {s15}
 800d3fa:	f10c 0c01 	add.w	ip, ip, #1
 800d3fe:	e7e1      	b.n	800d3c4 <__kernel_rem_pio2f+0x29c>
 800d400:	ecfe 6a01 	vldmia	lr!, {s13}
 800d404:	ed39 7a01 	vldmdb	r9!, {s14}
 800d408:	3401      	adds	r4, #1
 800d40a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d40e:	e7f0      	b.n	800d3f2 <__kernel_rem_pio2f+0x2ca>
 800d410:	08023ce4 	.word	0x08023ce4
 800d414:	08023cb8 	.word	0x08023cb8
 800d418:	43800000 	.word	0x43800000
 800d41c:	3b800000 	.word	0x3b800000
 800d420:	00000000 	.word	0x00000000
 800d424:	9b02      	ldr	r3, [sp, #8]
 800d426:	eeb0 0a48 	vmov.f32	s0, s16
 800d42a:	eba3 0008 	sub.w	r0, r3, r8
 800d42e:	f7ff fe15 	bl	800d05c <scalbnf>
 800d432:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d418 <__kernel_rem_pio2f+0x2f0>
 800d436:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d43e:	db19      	blt.n	800d474 <__kernel_rem_pio2f+0x34c>
 800d440:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d41c <__kernel_rem_pio2f+0x2f4>
 800d444:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d448:	aa08      	add	r2, sp, #32
 800d44a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d44e:	3508      	adds	r5, #8
 800d450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d454:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d45c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d460:	ee10 3a10 	vmov	r3, s0
 800d464:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d468:	ee17 3a90 	vmov	r3, s15
 800d46c:	3401      	adds	r4, #1
 800d46e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d472:	e74c      	b.n	800d30e <__kernel_rem_pio2f+0x1e6>
 800d474:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d478:	aa08      	add	r2, sp, #32
 800d47a:	ee10 3a10 	vmov	r3, s0
 800d47e:	e7f6      	b.n	800d46e <__kernel_rem_pio2f+0x346>
 800d480:	a808      	add	r0, sp, #32
 800d482:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d486:	9001      	str	r0, [sp, #4]
 800d488:	ee07 0a90 	vmov	s15, r0
 800d48c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d490:	3b01      	subs	r3, #1
 800d492:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d496:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d49a:	ed62 7a01 	vstmdb	r2!, {s15}
 800d49e:	e743      	b.n	800d328 <__kernel_rem_pio2f+0x200>
 800d4a0:	ecfc 6a01 	vldmia	ip!, {s13}
 800d4a4:	ecb5 7a01 	vldmia	r5!, {s14}
 800d4a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d4ac:	3001      	adds	r0, #1
 800d4ae:	4550      	cmp	r0, sl
 800d4b0:	dc01      	bgt.n	800d4b6 <__kernel_rem_pio2f+0x38e>
 800d4b2:	4290      	cmp	r0, r2
 800d4b4:	ddf4      	ble.n	800d4a0 <__kernel_rem_pio2f+0x378>
 800d4b6:	a858      	add	r0, sp, #352	@ 0x160
 800d4b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d4bc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	e735      	b.n	800d330 <__kernel_rem_pio2f+0x208>
 800d4c4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d4c6:	2b02      	cmp	r3, #2
 800d4c8:	dc09      	bgt.n	800d4de <__kernel_rem_pio2f+0x3b6>
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	dc27      	bgt.n	800d51e <__kernel_rem_pio2f+0x3f6>
 800d4ce:	d040      	beq.n	800d552 <__kernel_rem_pio2f+0x42a>
 800d4d0:	f009 0007 	and.w	r0, r9, #7
 800d4d4:	b059      	add	sp, #356	@ 0x164
 800d4d6:	ecbd 8b04 	vpop	{d8-d9}
 800d4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4de:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d4e0:	2b03      	cmp	r3, #3
 800d4e2:	d1f5      	bne.n	800d4d0 <__kernel_rem_pio2f+0x3a8>
 800d4e4:	aa30      	add	r2, sp, #192	@ 0xc0
 800d4e6:	1f0b      	subs	r3, r1, #4
 800d4e8:	4413      	add	r3, r2
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	dc50      	bgt.n	800d594 <__kernel_rem_pio2f+0x46c>
 800d4f2:	4622      	mov	r2, r4
 800d4f4:	2a01      	cmp	r2, #1
 800d4f6:	dc5d      	bgt.n	800d5b4 <__kernel_rem_pio2f+0x48c>
 800d4f8:	ab30      	add	r3, sp, #192	@ 0xc0
 800d4fa:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800d420 <__kernel_rem_pio2f+0x2f8>
 800d4fe:	440b      	add	r3, r1
 800d500:	2c01      	cmp	r4, #1
 800d502:	dc67      	bgt.n	800d5d4 <__kernel_rem_pio2f+0x4ac>
 800d504:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d508:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d50c:	2e00      	cmp	r6, #0
 800d50e:	d167      	bne.n	800d5e0 <__kernel_rem_pio2f+0x4b8>
 800d510:	edc7 6a00 	vstr	s13, [r7]
 800d514:	ed87 7a01 	vstr	s14, [r7, #4]
 800d518:	edc7 7a02 	vstr	s15, [r7, #8]
 800d51c:	e7d8      	b.n	800d4d0 <__kernel_rem_pio2f+0x3a8>
 800d51e:	ab30      	add	r3, sp, #192	@ 0xc0
 800d520:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800d420 <__kernel_rem_pio2f+0x2f8>
 800d524:	440b      	add	r3, r1
 800d526:	4622      	mov	r2, r4
 800d528:	2a00      	cmp	r2, #0
 800d52a:	da24      	bge.n	800d576 <__kernel_rem_pio2f+0x44e>
 800d52c:	b34e      	cbz	r6, 800d582 <__kernel_rem_pio2f+0x45a>
 800d52e:	eef1 7a47 	vneg.f32	s15, s14
 800d532:	edc7 7a00 	vstr	s15, [r7]
 800d536:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d53a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d53e:	aa31      	add	r2, sp, #196	@ 0xc4
 800d540:	2301      	movs	r3, #1
 800d542:	429c      	cmp	r4, r3
 800d544:	da20      	bge.n	800d588 <__kernel_rem_pio2f+0x460>
 800d546:	b10e      	cbz	r6, 800d54c <__kernel_rem_pio2f+0x424>
 800d548:	eef1 7a67 	vneg.f32	s15, s15
 800d54c:	edc7 7a01 	vstr	s15, [r7, #4]
 800d550:	e7be      	b.n	800d4d0 <__kernel_rem_pio2f+0x3a8>
 800d552:	ab30      	add	r3, sp, #192	@ 0xc0
 800d554:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800d420 <__kernel_rem_pio2f+0x2f8>
 800d558:	440b      	add	r3, r1
 800d55a:	2c00      	cmp	r4, #0
 800d55c:	da05      	bge.n	800d56a <__kernel_rem_pio2f+0x442>
 800d55e:	b10e      	cbz	r6, 800d564 <__kernel_rem_pio2f+0x43c>
 800d560:	eef1 7a67 	vneg.f32	s15, s15
 800d564:	edc7 7a00 	vstr	s15, [r7]
 800d568:	e7b2      	b.n	800d4d0 <__kernel_rem_pio2f+0x3a8>
 800d56a:	ed33 7a01 	vldmdb	r3!, {s14}
 800d56e:	3c01      	subs	r4, #1
 800d570:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d574:	e7f1      	b.n	800d55a <__kernel_rem_pio2f+0x432>
 800d576:	ed73 7a01 	vldmdb	r3!, {s15}
 800d57a:	3a01      	subs	r2, #1
 800d57c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d580:	e7d2      	b.n	800d528 <__kernel_rem_pio2f+0x400>
 800d582:	eef0 7a47 	vmov.f32	s15, s14
 800d586:	e7d4      	b.n	800d532 <__kernel_rem_pio2f+0x40a>
 800d588:	ecb2 7a01 	vldmia	r2!, {s14}
 800d58c:	3301      	adds	r3, #1
 800d58e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d592:	e7d6      	b.n	800d542 <__kernel_rem_pio2f+0x41a>
 800d594:	ed72 7a01 	vldmdb	r2!, {s15}
 800d598:	edd2 6a01 	vldr	s13, [r2, #4]
 800d59c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d5a0:	3801      	subs	r0, #1
 800d5a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5a6:	ed82 7a00 	vstr	s14, [r2]
 800d5aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5ae:	edc2 7a01 	vstr	s15, [r2, #4]
 800d5b2:	e79c      	b.n	800d4ee <__kernel_rem_pio2f+0x3c6>
 800d5b4:	ed73 7a01 	vldmdb	r3!, {s15}
 800d5b8:	edd3 6a01 	vldr	s13, [r3, #4]
 800d5bc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d5c0:	3a01      	subs	r2, #1
 800d5c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5c6:	ed83 7a00 	vstr	s14, [r3]
 800d5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5ce:	edc3 7a01 	vstr	s15, [r3, #4]
 800d5d2:	e78f      	b.n	800d4f4 <__kernel_rem_pio2f+0x3cc>
 800d5d4:	ed33 7a01 	vldmdb	r3!, {s14}
 800d5d8:	3c01      	subs	r4, #1
 800d5da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d5de:	e78f      	b.n	800d500 <__kernel_rem_pio2f+0x3d8>
 800d5e0:	eef1 6a66 	vneg.f32	s13, s13
 800d5e4:	eeb1 7a47 	vneg.f32	s14, s14
 800d5e8:	edc7 6a00 	vstr	s13, [r7]
 800d5ec:	ed87 7a01 	vstr	s14, [r7, #4]
 800d5f0:	eef1 7a67 	vneg.f32	s15, s15
 800d5f4:	e790      	b.n	800d518 <__kernel_rem_pio2f+0x3f0>
 800d5f6:	bf00      	nop

0800d5f8 <floorf>:
 800d5f8:	ee10 3a10 	vmov	r3, s0
 800d5fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d600:	3a7f      	subs	r2, #127	@ 0x7f
 800d602:	2a16      	cmp	r2, #22
 800d604:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d608:	dc2b      	bgt.n	800d662 <floorf+0x6a>
 800d60a:	2a00      	cmp	r2, #0
 800d60c:	da12      	bge.n	800d634 <floorf+0x3c>
 800d60e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d674 <floorf+0x7c>
 800d612:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d616:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d61e:	dd06      	ble.n	800d62e <floorf+0x36>
 800d620:	2b00      	cmp	r3, #0
 800d622:	da24      	bge.n	800d66e <floorf+0x76>
 800d624:	2900      	cmp	r1, #0
 800d626:	4b14      	ldr	r3, [pc, #80]	@ (800d678 <floorf+0x80>)
 800d628:	bf08      	it	eq
 800d62a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d62e:	ee00 3a10 	vmov	s0, r3
 800d632:	4770      	bx	lr
 800d634:	4911      	ldr	r1, [pc, #68]	@ (800d67c <floorf+0x84>)
 800d636:	4111      	asrs	r1, r2
 800d638:	420b      	tst	r3, r1
 800d63a:	d0fa      	beq.n	800d632 <floorf+0x3a>
 800d63c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d674 <floorf+0x7c>
 800d640:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d644:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d64c:	ddef      	ble.n	800d62e <floorf+0x36>
 800d64e:	2b00      	cmp	r3, #0
 800d650:	bfbe      	ittt	lt
 800d652:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800d656:	fa40 f202 	asrlt.w	r2, r0, r2
 800d65a:	189b      	addlt	r3, r3, r2
 800d65c:	ea23 0301 	bic.w	r3, r3, r1
 800d660:	e7e5      	b.n	800d62e <floorf+0x36>
 800d662:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d666:	d3e4      	bcc.n	800d632 <floorf+0x3a>
 800d668:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d66c:	4770      	bx	lr
 800d66e:	2300      	movs	r3, #0
 800d670:	e7dd      	b.n	800d62e <floorf+0x36>
 800d672:	bf00      	nop
 800d674:	7149f2ca 	.word	0x7149f2ca
 800d678:	bf800000 	.word	0xbf800000
 800d67c:	007fffff 	.word	0x007fffff

0800d680 <_init>:
 800d680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d682:	bf00      	nop
 800d684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d686:	bc08      	pop	{r3}
 800d688:	469e      	mov	lr, r3
 800d68a:	4770      	bx	lr

0800d68c <_fini>:
 800d68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d68e:	bf00      	nop
 800d690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d692:	bc08      	pop	{r3}
 800d694:	469e      	mov	lr, r3
 800d696:	4770      	bx	lr
