
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be28  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800c000  0800c000  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c410  0800c410  0000e084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c410  0800c410  0000d410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c418  0800c418  0000e084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c418  0800c418  0000d418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c41c  0800c41c  0000d41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800c420  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c4  20000088  0800c4a4  0000e088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000124c  0800c4a4  0000e24c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ec6  00000000  00000000  0000e0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d20  00000000  00000000  00025f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00028ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb1  00000000  00000000  00029f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027449  00000000  00000000  0002adf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016929  00000000  00000000  00052242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100015  00000000  00000000  00068b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168b80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e0  00000000  00000000  00168bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0016e0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000088 	.word	0x20000088
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bfe8 	.word	0x0800bfe8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000008c 	.word	0x2000008c
 8000214:	0800bfe8 	.word	0x0800bfe8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_frsub>:
 8000ba4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba8:	e002      	b.n	8000bb0 <__addsf3>
 8000baa:	bf00      	nop

08000bac <__aeabi_fsub>:
 8000bac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb0 <__addsf3>:
 8000bb0:	0042      	lsls	r2, r0, #1
 8000bb2:	bf1f      	itttt	ne
 8000bb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb8:	ea92 0f03 	teqne	r2, r3
 8000bbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc4:	d06a      	beq.n	8000c9c <__addsf3+0xec>
 8000bc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bce:	bfc1      	itttt	gt
 8000bd0:	18d2      	addgt	r2, r2, r3
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	4048      	eorgt	r0, r1
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	2b19      	cmp	r3, #25
 8000bde:	bf88      	it	hi
 8000be0:	4770      	bxhi	lr
 8000be2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bee:	bf18      	it	ne
 8000bf0:	4240      	negne	r0, r0
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4249      	negne	r1, r1
 8000c02:	ea92 0f03 	teq	r2, r3
 8000c06:	d03f      	beq.n	8000c88 <__addsf3+0xd8>
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c10:	eb10 000c 	adds.w	r0, r0, ip
 8000c14:	f1c3 0320 	rsb	r3, r3, #32
 8000c18:	fa01 f103 	lsl.w	r1, r1, r3
 8000c1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__addsf3+0x78>
 8000c22:	4249      	negs	r1, r1
 8000c24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c2c:	d313      	bcc.n	8000c56 <__addsf3+0xa6>
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c32:	d306      	bcc.n	8000c42 <__addsf3+0x92>
 8000c34:	0840      	lsrs	r0, r0, #1
 8000c36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3a:	f102 0201 	add.w	r2, r2, #1
 8000c3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c40:	d251      	bcs.n	8000ce6 <__addsf3+0x136>
 8000c42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4a:	bf08      	it	eq
 8000c4c:	f020 0001 	biceq.w	r0, r0, #1
 8000c50:	ea40 0003 	orr.w	r0, r0, r3
 8000c54:	4770      	bx	lr
 8000c56:	0049      	lsls	r1, r1, #1
 8000c58:	eb40 0000 	adc.w	r0, r0, r0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c64:	d2ed      	bcs.n	8000c42 <__addsf3+0x92>
 8000c66:	fab0 fc80 	clz	ip, r0
 8000c6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c76:	bfaa      	itet	ge
 8000c78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c7c:	4252      	neglt	r2, r2
 8000c7e:	4318      	orrge	r0, r3
 8000c80:	bfbc      	itt	lt
 8000c82:	40d0      	lsrlt	r0, r2
 8000c84:	4318      	orrlt	r0, r3
 8000c86:	4770      	bx	lr
 8000c88:	f092 0f00 	teq	r2, #0
 8000c8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c90:	bf06      	itte	eq
 8000c92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c96:	3201      	addeq	r2, #1
 8000c98:	3b01      	subne	r3, #1
 8000c9a:	e7b5      	b.n	8000c08 <__addsf3+0x58>
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000caa:	d021      	beq.n	8000cf0 <__addsf3+0x140>
 8000cac:	ea92 0f03 	teq	r2, r3
 8000cb0:	d004      	beq.n	8000cbc <__addsf3+0x10c>
 8000cb2:	f092 0f00 	teq	r2, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	4608      	moveq	r0, r1
 8000cba:	4770      	bx	lr
 8000cbc:	ea90 0f01 	teq	r0, r1
 8000cc0:	bf1c      	itt	ne
 8000cc2:	2000      	movne	r0, #0
 8000cc4:	4770      	bxne	lr
 8000cc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cca:	d104      	bne.n	8000cd6 <__addsf3+0x126>
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cda:	bf3c      	itt	cc
 8000cdc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce0:	4770      	bxcc	lr
 8000ce2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cee:	4770      	bx	lr
 8000cf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf4:	bf16      	itet	ne
 8000cf6:	4608      	movne	r0, r1
 8000cf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cfc:	4601      	movne	r1, r0
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	bf06      	itte	eq
 8000d02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d06:	ea90 0f01 	teqeq	r0, r1
 8000d0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_ui2f>:
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e004      	b.n	8000d20 <__aeabi_i2f+0x8>
 8000d16:	bf00      	nop

08000d18 <__aeabi_i2f>:
 8000d18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d1c:	bf48      	it	mi
 8000d1e:	4240      	negmi	r0, r0
 8000d20:	ea5f 0c00 	movs.w	ip, r0
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	e01c      	b.n	8000d6e <__aeabi_l2f+0x2a>

08000d34 <__aeabi_ul2f>:
 8000d34:	ea50 0201 	orrs.w	r2, r0, r1
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e00a      	b.n	8000d58 <__aeabi_l2f+0x14>
 8000d42:	bf00      	nop

08000d44 <__aeabi_l2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_l2f+0x14>
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	ea5f 0c01 	movs.w	ip, r1
 8000d5c:	bf02      	ittt	eq
 8000d5e:	4684      	moveq	ip, r0
 8000d60:	4601      	moveq	r1, r0
 8000d62:	2000      	moveq	r0, #0
 8000d64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d68:	bf08      	it	eq
 8000d6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d72:	fabc f28c 	clz	r2, ip
 8000d76:	3a08      	subs	r2, #8
 8000d78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d7c:	db10      	blt.n	8000da0 <__aeabi_l2f+0x5c>
 8000d7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d90:	fa20 f202 	lsr.w	r2, r0, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f102 0220 	add.w	r2, r2, #32
 8000da4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db0:	fa21 f202 	lsr.w	r2, r1, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef *huart);

// function for interrupt
void modbus_1t5_Timeout() {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200000a4 	.word	0x200000a4

0800112c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <modbus_3t5_Timeout+0x1c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2201      	movs	r2, #1
 800113a:	755a      	strb	r2, [r3, #21]

}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200000a4 	.word	0x200000a4

0800114c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(huart) == HAL_UART_ERROR_RTO) {
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f009 f885 	bl	800a264 <HAL_UART_GetError>
 800115a:	4603      	mov	r3, r0
 800115c:	2b20      	cmp	r3, #32
 800115e:	d101      	bne.n	8001164 <modbus_ErrorTimeout+0x18>
		modbus_1t5_Timeout();
 8001160:	f7ff ffc4 	bl	80010ec <modbus_1t5_Timeout>

	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <Modbus_init+0xa0>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <Modbus_init+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <Modbus_init+0xa4>)
 800118a:	210e      	movs	r1, #14
 800118c:	4618      	mov	r0, r3
 800118e:	f007 f903 	bl	8008398 <HAL_TIM_RegisterCallback>
			(void*) modbus_3t5_Timeout);

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2110      	movs	r1, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f009 f80d 	bl	800a1b8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f009 f824 	bl	800a1f0 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <Modbus_init+0xa8>)
 80011ae:	2104      	movs	r1, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f008 fb4b 	bl	800984c <HAL_UART_RegisterCallback>
			(void*) modbus_ErrorTimeout);
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
	HAL_UART_Receive_DMA(hModbus->huart,
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <Modbus_init+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d8      	ldr	r0, [r3, #12]
			&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <Modbus_init+0xa0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <Modbus_init+0xa0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
	HAL_UART_Receive_DMA(hModbus->huart,
 80011c8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011cc:	4413      	add	r3, r2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011d4:	4619      	mov	r1, r3
 80011d6:	f008 fbf3 	bl	80099c0 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE);

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10c      	bne.n	8001204 <Modbus_init+0x98>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Modbus_init+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f005 fe5d 	bl	8006eb0 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <Modbus_init+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f006 fa1e 	bl	8007640 <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200000a4 	.word	0x200000a4
 8001210:	0800112d 	.word	0x0800112d
 8001214:	0800114d 	.word	0x0800114d

08001218 <Trapezoidal_Init>:
 */

#include "math.h"
#include "Trapezoidal.h"

void Trapezoidal_Init(VELO_PROFILE *profile, float distance_total, float v_max, float a_max) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	ed87 0a02 	vstr	s0, [r7, #8]
 8001224:	edc7 0a01 	vstr	s1, [r7, #4]
 8001228:	ed87 1a00 	vstr	s2, [r7]
    profile->distance_total = fabsf(distance_total);
 800122c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001230:	eef0 7ae7 	vabs.f32	s15, s15
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	edc3 7a00 	vstr	s15, [r3]
    profile->v_max = fabsf(v_max);
 800123a:	edd7 7a01 	vldr	s15, [r7, #4]
 800123e:	eef0 7ae7 	vabs.f32	s15, s15
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	edc3 7a01 	vstr	s15, [r3, #4]
    profile->a_max = fabsf(a_max);
 8001248:	edd7 7a00 	vldr	s15, [r7]
 800124c:	eef0 7ae7 	vabs.f32	s15, s15
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	edc3 7a02 	vstr	s15, [r3, #8]
    profile->current_position = 0.0f;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
    profile->current_velocity = 0.0f;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
    profile->target_position = distance_total;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	61da      	str	r2, [r3, #28]
    profile->direction = (distance_total >= 0.0f) ? 1.0f : -1.0f;
 800126c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001270:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	db02      	blt.n	8001280 <Trapezoidal_Init+0x68>
 800127a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800127e:	e000      	b.n	8001282 <Trapezoidal_Init+0x6a>
 8001280:	4a49      	ldr	r2, [pc, #292]	@ (80013a8 <Trapezoidal_Init+0x190>)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	621a      	str	r2, [r3, #32]
    profile->finished = 0;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2200      	movs	r2, #0
 800128a:	629a      	str	r2, [r3, #40]	@ 0x28
    profile->elapsed_time = 0.0f;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	625a      	str	r2, [r3, #36]	@ 0x24

    // Check if triangular profile is required
    float d_total_min = (profile->v_max * profile->v_max) / profile->a_max;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	ed93 7a01 	vldr	s14, [r3, #4]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	edd3 7a01 	vldr	s15, [r3, #4]
 80012a0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80012aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ae:	edc7 7a05 	vstr	s15, [r7, #20]
    if (profile->distance_total < d_total_min) {
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80012bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c4:	dd14      	ble.n	80012f0 <Trapezoidal_Init+0xd8>
        profile->is_triangular = 1;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2201      	movs	r2, #1
 80012ca:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = sqrtf(profile->a_max * profile->distance_total);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	edd3 7a00 	vldr	s15, [r3]
 80012d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012dc:	eeb0 0a67 	vmov.f32	s0, s15
 80012e0:	f00a f8ec 	bl	800b4bc <sqrtf>
 80012e4:	eef0 7a40 	vmov.f32	s15, s0
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	edc3 7a03 	vstr	s15, [r3, #12]
 80012ee:	e006      	b.n	80012fe <Trapezoidal_Init+0xe6>
    } else {
        profile->is_triangular = 0;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2200      	movs	r2, #0
 80012f4:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = profile->v_max;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	60da      	str	r2, [r3, #12]
    }

    // Precompute timing and distances
    profile->t_acc = profile->v_peak / profile->a_max;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	edd3 6a03 	vldr	s13, [r3, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	ed93 7a02 	vldr	s14, [r3, #8]
 800130a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    profile->d_acc = 0.5f * profile->a_max * profile->t_acc * profile->t_acc;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	edd3 7a02 	vldr	s15, [r3, #8]
 800131a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800131e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    if (profile->is_triangular) {
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <Trapezoidal_Init+0x13e>
        profile->t_flat = 0.0f;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	635a      	str	r2, [r3, #52]	@ 0x34
        profile->d_flat = 0.0f;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	641a      	str	r2, [r3, #64]	@ 0x40
 8001354:	e017      	b.n	8001386 <Trapezoidal_Init+0x16e>
    } else {
        profile->d_flat = profile->distance_total - 2 * profile->d_acc;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	ed93 7a00 	vldr	s14, [r3]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001362:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        profile->t_flat = profile->d_flat / profile->v_peak;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	ed93 7a03 	vldr	s14, [r3, #12]
 800137c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    }

    profile->t_total = 2 * profile->t_acc + profile->t_flat;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800138c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	bf800000 	.word	0xbf800000

080013ac <Trapezoidal_Update>:

void Trapezoidal_Update(VELO_PROFILE *profile, float dt) {
 80013ac:	b480      	push	{r7}
 80013ae:	b095      	sub	sp, #84	@ 0x54
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	ed87 0a00 	vstr	s0, [r7]
    if (profile->finished) return;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f040 812c 	bne.w	800161a <Trapezoidal_Update+0x26e>

    profile->elapsed_time += dt;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80013c8:	edd7 7a00 	vldr	s15, [r7]
 80013cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    float t = profile->elapsed_time;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013da:	63bb      	str	r3, [r7, #56]	@ 0x38

    float a = profile->a_max;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	637b      	str	r3, [r7, #52]	@ 0x34
    float v = profile->v_peak;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	633b      	str	r3, [r7, #48]	@ 0x30
    float d_total = profile->distance_total;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float t_acc = v / a;
 80013ee:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80013f2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80013f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fa:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float d_acc = 0.5f * a * t_acc * t_acc;
 80013fe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001402:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001406:	ee27 7a87 	vmul.f32	s14, s15, s14
 800140a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800140e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001412:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    float t_flat = 0.0f;
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float d_flat = 0.0f;
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	64bb      	str	r3, [r7, #72]	@ 0x48

    if (!profile->is_triangular) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800142e:	2b00      	cmp	r3, #0
 8001430:	d111      	bne.n	8001456 <Trapezoidal_Update+0xaa>
        d_flat = d_total - 2 * d_acc;
 8001432:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001436:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800143a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800143e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001442:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        t_flat = d_flat / v;
 8001446:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 800144a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800144e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001452:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    }

    float t1 = t_acc;
 8001456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001458:	623b      	str	r3, [r7, #32]
    float t2 = t_acc + t_flat;
 800145a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800145e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001466:	edc7 7a07 	vstr	s15, [r7, #28]
    float t3 = t_acc + t_flat + t_acc;
 800146a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800146e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001476:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800147a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147e:	edc7 7a06 	vstr	s15, [r7, #24]

    float pos = 0.0f;
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	647b      	str	r3, [r7, #68]	@ 0x44
    float vel = 0.0f;
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	643b      	str	r3, [r7, #64]	@ 0x40
    float acc = 0.0f;
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float eps = 1e-6f;
 8001494:	4b64      	ldr	r3, [pc, #400]	@ (8001628 <Trapezoidal_Update+0x27c>)
 8001496:	617b      	str	r3, [r7, #20]

    if (t < t1 - eps) {
 8001498:	ed97 7a08 	vldr	s14, [r7, #32]
 800149c:	edd7 7a05 	vldr	s15, [r7, #20]
 80014a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80014a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b0:	d51a      	bpl.n	80014e8 <Trapezoidal_Update+0x13c>
        // Acceleration phase
        pos = 0.5f * a * t * t;
 80014b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80014b6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014be:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80014c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80014ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ce:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = a * t;
 80014d2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80014d6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80014da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014de:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = a;
 80014e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014e6:	e079      	b.n	80015dc <Trapezoidal_Update+0x230>
    } else if (t < t2 - eps) {
 80014e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80014f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80014f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	d519      	bpl.n	8001536 <Trapezoidal_Update+0x18a>
        // Constant velocity phase
        float t_flat_phase = t - t1;
 8001502:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001506:	edd7 7a08 	vldr	s15, [r7, #32]
 800150a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800150e:	edc7 7a03 	vstr	s15, [r7, #12]
        pos = d_acc + v * t_flat_phase;
 8001512:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001516:	edd7 7a03 	vldr	s15, [r7, #12]
 800151a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001526:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v;
 800152a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800152c:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001534:	e052      	b.n	80015dc <Trapezoidal_Update+0x230>
    } else if (t < t3 - eps) {
 8001536:	ed97 7a06 	vldr	s14, [r7, #24]
 800153a:	edd7 7a05 	vldr	s15, [r7, #20]
 800153e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001542:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154e:	d53a      	bpl.n	80015c6 <Trapezoidal_Update+0x21a>
        // Deceleration phase
        float td = t - t2;
 8001550:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001554:	edd7 7a07 	vldr	s15, [r7, #28]
 8001558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155c:	edc7 7a04 	vstr	s15, [r7, #16]
        pos = d_acc + d_flat + v * td - 0.5f * a * td * td;
 8001560:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001564:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156c:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001570:	edd7 7a04 	vldr	s15, [r7, #16]
 8001574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800157c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001580:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001584:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001588:	edd7 7a04 	vldr	s15, [r7, #16]
 800158c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001590:	edd7 7a04 	vldr	s15, [r7, #16]
 8001594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v - a * td;
 80015a0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80015a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80015a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ac:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80015b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = -a;
 80015b8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80015bc:	eef1 7a67 	vneg.f32	s15, s15
 80015c0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80015c4:	e00a      	b.n	80015dc <Trapezoidal_Update+0x230>
    } else {
        // Motion complete
        pos = d_total;
 80015c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c8:	647b      	str	r3, [r7, #68]	@ 0x44
        vel = 0.0f;
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        profile->finished = 1;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // Apply direction
    profile->current_position = pos * profile->direction;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	ed93 7a08 	vldr	s14, [r3, #32]
 80015e2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80015e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->current_velocity = vel * profile->direction;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	ed93 7a08 	vldr	s14, [r3, #32]
 80015f6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80015fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->current_acceleration = acc * profile->direction;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	ed93 7a08 	vldr	s14, [r3, #32]
 800160a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800160e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	edc3 7a06 	vstr	s15, [r3, #24]
 8001618:	e000      	b.n	800161c <Trapezoidal_Update+0x270>
    if (profile->finished) return;
 800161a:	bf00      	nop
}
 800161c:	3754      	adds	r7, #84	@ 0x54
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	358637bd 	.word	0x358637bd
 800162c:	00000000 	.word	0x00000000

08001630 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001634:	ed2d 8b02 	vpush	{d8}
 8001638:	b0db      	sub	sp, #364	@ 0x16c
 800163a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800163c:	f003 fcb7 	bl	8004fae <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001640:	f001 feb0 	bl	80033a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001644:	f002 fb0a 	bl	8003c5c <MX_GPIO_Init>
	MX_DMA_Init();
 8001648:	f002 fad6 	bl	8003bf8 <MX_DMA_Init>
	MX_TIM4_Init();
 800164c:	f002 f852 	bl	80036f4 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001650:	f002 f8a6 	bl	80037a0 <MX_TIM5_Init>
	MX_TIM3_Init();
 8001654:	f001 fff8 	bl	8003648 <MX_TIM3_Init>
	MX_TIM8_Init();
 8001658:	f002 f8f0 	bl	800383c <MX_TIM8_Init>
	MX_TIM15_Init();
 800165c:	f002 f9aa 	bl	80039b4 <MX_TIM15_Init>
	MX_TIM1_Init();
 8001660:	f001 feec 	bl	800343c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001664:	f001 ff70 	bl	8003548 <MX_TIM2_Init>
	MX_TIM16_Init();
 8001668:	f002 fa48 	bl	8003afc <MX_TIM16_Init>
	MX_USART2_UART_Init();
 800166c:	f002 fa76 	bl	8003b5c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001670:	48bf      	ldr	r0, [pc, #764]	@ (8001970 <main+0x340>)
 8001672:	f005 fbad 	bl	8006dd0 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001676:	2100      	movs	r1, #0
 8001678:	48bd      	ldr	r0, [pc, #756]	@ (8001970 <main+0x340>)
 800167a:	f005 fe75 	bl	8007368 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 800167e:	2104      	movs	r1, #4
 8001680:	48bb      	ldr	r0, [pc, #748]	@ (8001970 <main+0x340>)
 8001682:	f005 fe71 	bl	8007368 <HAL_TIM_IC_Start>
	HAL_TIM_Base_Start(&htim2);
 8001686:	48bb      	ldr	r0, [pc, #748]	@ (8001974 <main+0x344>)
 8001688:	f005 fba2 	bl	8006dd0 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 800168c:	2100      	movs	r1, #0
 800168e:	48b9      	ldr	r0, [pc, #740]	@ (8001974 <main+0x344>)
 8001690:	f005 fe6a 	bl	8007368 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001694:	2104      	movs	r1, #4
 8001696:	48b7      	ldr	r0, [pc, #732]	@ (8001974 <main+0x344>)
 8001698:	f005 fe66 	bl	8007368 <HAL_TIM_IC_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800169c:	213c      	movs	r1, #60	@ 0x3c
 800169e:	48b6      	ldr	r0, [pc, #728]	@ (8001978 <main+0x348>)
 80016a0:	f006 f910 	bl	80078c4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80016a4:	213c      	movs	r1, #60	@ 0x3c
 80016a6:	48b5      	ldr	r0, [pc, #724]	@ (800197c <main+0x34c>)
 80016a8:	f006 f90c 	bl	80078c4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 80016ac:	48b4      	ldr	r0, [pc, #720]	@ (8001980 <main+0x350>)
 80016ae:	f005 fbff 	bl	8006eb0 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8);
 80016b2:	48b4      	ldr	r0, [pc, #720]	@ (8001984 <main+0x354>)
 80016b4:	f005 fb8c 	bl	8006dd0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80016b8:	2108      	movs	r1, #8
 80016ba:	48b2      	ldr	r0, [pc, #712]	@ (8001984 <main+0x354>)
 80016bc:	f005 fcde 	bl	800707c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80016c0:	210c      	movs	r1, #12
 80016c2:	48b0      	ldr	r0, [pc, #704]	@ (8001984 <main+0x354>)
 80016c4:	f005 fcda 	bl	800707c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim15);
 80016c8:	48af      	ldr	r0, [pc, #700]	@ (8001988 <main+0x358>)
 80016ca:	f005 fb81 	bl	8006dd0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80016ce:	2100      	movs	r1, #0
 80016d0:	48ad      	ldr	r0, [pc, #692]	@ (8001988 <main+0x358>)
 80016d2:	f005 fcd3 	bl	800707c <HAL_TIM_PWM_Start>
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
	DWT_Init();
 80016d6:	f002 fbe9 	bl	8003eac <DWT_Init>

	PID.Kp = 0.1;
 80016da:	4aac      	ldr	r2, [pc, #688]	@ (800198c <main+0x35c>)
 80016dc:	4bac      	ldr	r3, [pc, #688]	@ (8001990 <main+0x360>)
 80016de:	6193      	str	r3, [r2, #24]
	PID.Ki = 0.00001;
 80016e0:	4aaa      	ldr	r2, [pc, #680]	@ (800198c <main+0x35c>)
 80016e2:	4bac      	ldr	r3, [pc, #688]	@ (8001994 <main+0x364>)
 80016e4:	61d3      	str	r3, [r2, #28]
	PID.Kd = 0.1;
 80016e6:	4aa9      	ldr	r2, [pc, #676]	@ (800198c <main+0x35c>)
 80016e8:	4ba9      	ldr	r3, [pc, #676]	@ (8001990 <main+0x360>)
 80016ea:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 80016ec:	2100      	movs	r1, #0
 80016ee:	48a7      	ldr	r0, [pc, #668]	@ (800198c <main+0x35c>)
 80016f0:	f009 fe7c 	bl	800b3ec <arm_pid_init_f32>

	Reset_R();
 80016f4:	f003 f82a 	bl	800474c <Reset_R>
	Reset_P();
 80016f8:	f003 f838 	bl	800476c <Reset_P>
	calibState = CALIB_IDLE;
 80016fc:	4aa6      	ldr	r2, [pc, #664]	@ (8001998 <main+0x368>)
 80016fe:	2300      	movs	r3, #0
 8001700:	7013      	strb	r3, [r2, #0]

	Set_Servo(0);
 8001702:	2000      	movs	r0, #0
 8001704:	f002 fff8 	bl	80046f8 <Set_Servo>

	//BaseSystem//////////
	hmodbus.huart = &huart2;
 8001708:	4aa4      	ldr	r2, [pc, #656]	@ (800199c <main+0x36c>)
 800170a:	4ba5      	ldr	r3, [pc, #660]	@ (80019a0 <main+0x370>)
 800170c:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim16;
 800170e:	4aa3      	ldr	r2, [pc, #652]	@ (800199c <main+0x36c>)
 8001710:	4ba4      	ldr	r3, [pc, #656]	@ (80019a4 <main+0x374>)
 8001712:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8001714:	4aa1      	ldr	r2, [pc, #644]	@ (800199c <main+0x36c>)
 8001716:	2315      	movs	r3, #21
 8001718:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 800171a:	4aa0      	ldr	r2, [pc, #640]	@ (800199c <main+0x36c>)
 800171c:	23c8      	movs	r3, #200	@ 0xc8
 800171e:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001720:	49a1      	ldr	r1, [pc, #644]	@ (80019a8 <main+0x378>)
 8001722:	489e      	ldr	r0, [pc, #632]	@ (800199c <main+0x36c>)
 8001724:	f7ff fd22 	bl	800116c <Modbus_init>
////		RD_Velo_Error = R_Velo_Error * (M_PI / 180.0f);
//		Modbus_Protocal_Worker();
//		//////////////////////

		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8001728:	4b94      	ldr	r3, [pc, #592]	@ (800197c <main+0x34c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800172e:	4b9f      	ldr	r3, [pc, #636]	@ (80019ac <main+0x37c>)
 8001730:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8001732:	4b91      	ldr	r3, [pc, #580]	@ (8001978 <main+0x348>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001738:	4b9d      	ldr	r3, [pc, #628]	@ (80019b0 <main+0x380>)
 800173a:	601a      	str	r2, [r3, #0]
		//Call every 0.001 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 800173c:	f002 fcac 	bl	8004098 <micros>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
		if (currentTime > timestamp) {
 8001748:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 800174c:	4b99      	ldr	r3, [pc, #612]	@ (80019b4 <main+0x384>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	4282      	cmp	r2, r0
 8001754:	418b      	sbcs	r3, r1
 8001756:	d210      	bcs.n	800177a <main+0x14a>
			timestamp = currentTime + 1000;  //us
 8001758:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 800175c:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8001760:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001762:	f143 0300 	adc.w	r3, r3, #0
 8001766:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001768:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800176c:	4b91      	ldr	r3, [pc, #580]	@ (80019b4 <main+0x384>)
 800176e:	e9c3 0100 	strd	r0, r1, [r3]
			Revolute_PosVel_Update();
 8001772:	f002 fd75 	bl	8004260 <Revolute_PosVel_Update>
			Prismatic_PosVel_Update();
 8001776:	f002 fe7d 	bl	8004474 <Prismatic_PosVel_Update>
		}
		//Call every 0.01 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 800177a:	f002 fc8d 	bl	8004098 <micros>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
		if (currentTime1 > timestamp1) {
 8001786:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800178a:	4b8b      	ldr	r3, [pc, #556]	@ (80019b8 <main+0x388>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	4282      	cmp	r2, r0
 8001792:	418b      	sbcs	r3, r1
 8001794:	d20d      	bcs.n	80017b2 <main+0x182>
			timestamp1 = currentTime1 + 10000;  //us
 8001796:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800179a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800179e:	1851      	adds	r1, r2, r1
 80017a0:	6739      	str	r1, [r7, #112]	@ 0x70
 80017a2:	f143 0300 	adc.w	r3, r3, #0
 80017a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80017a8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80017ac:	4b82      	ldr	r3, [pc, #520]	@ (80019b8 <main+0x388>)
 80017ae:	e9c3 0100 	strd	r0, r1, [r3]

		}
		//Call every 0.1 s
		static uint64_t timestamp2 = 0;
		int64_t currentTime2 = micros();
 80017b2:	f002 fc71 	bl	8004098 <micros>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
		if (currentTime2 > timestamp2) {
 80017be:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 80017c2:	4b7e      	ldr	r3, [pc, #504]	@ (80019bc <main+0x38c>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	4282      	cmp	r2, r0
 80017ca:	418b      	sbcs	r3, r1
 80017cc:	d20c      	bcs.n	80017e8 <main+0x1b8>
			timestamp2 = currentTime2 + 100000;  //us
 80017ce:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80017d2:	497b      	ldr	r1, [pc, #492]	@ (80019c0 <main+0x390>)
 80017d4:	1851      	adds	r1, r2, r1
 80017d6:	66b9      	str	r1, [r7, #104]	@ 0x68
 80017d8:	f143 0300 	adc.w	r3, r3, #0
 80017dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80017de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80017e2:	4b76      	ldr	r3, [pc, #472]	@ (80019bc <main+0x38c>)
 80017e4:	e9c3 0100 	strd	r0, r1, [r3]

		}
		End_x = Prismatic_QEIdata.mmPosition
 80017e8:	4b76      	ldr	r3, [pc, #472]	@ (80019c4 <main+0x394>)
 80017ea:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
				* cosf(Revolute_QEIdata.RadPosition * -1);
 80017ee:	4b76      	ldr	r3, [pc, #472]	@ (80019c8 <main+0x398>)
 80017f0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80017f4:	eef1 7a67 	vneg.f32	s15, s15
 80017f8:	eeb0 0a67 	vmov.f32	s0, s15
 80017fc:	f009 fe7c 	bl	800b4f8 <cosf>
 8001800:	eef0 7a40 	vmov.f32	s15, s0
 8001804:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_x = Prismatic_QEIdata.mmPosition
 8001808:	4b70      	ldr	r3, [pc, #448]	@ (80019cc <main+0x39c>)
 800180a:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition
 800180e:	4b6d      	ldr	r3, [pc, #436]	@ (80019c4 <main+0x394>)
 8001810:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
				* sinf(Revolute_QEIdata.RadPosition);
 8001814:	4b6c      	ldr	r3, [pc, #432]	@ (80019c8 <main+0x398>)
 8001816:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800181a:	eeb0 0a67 	vmov.f32	s0, s15
 800181e:	f009 feaf 	bl	800b580 <sinf>
 8001822:	eef0 7a40 	vmov.f32	s15, s0
 8001826:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_y = Prismatic_QEIdata.mmPosition
 800182a:	4b69      	ldr	r3, [pc, #420]	@ (80019d0 <main+0x3a0>)
 800182c:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<RECEIVER>> ////////////////////////
		Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8001830:	4b50      	ldr	r3, [pc, #320]	@ (8001974 <main+0x344>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001836:	461a      	mov	r2, r3
 8001838:	4b66      	ldr	r3, [pc, #408]	@ (80019d4 <main+0x3a4>)
 800183a:	601a      	str	r2, [r3, #0]
		Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 800183c:	4b4c      	ldr	r3, [pc, #304]	@ (8001970 <main+0x340>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001842:	461a      	mov	r2, r3
 8001844:	4b63      	ldr	r3, [pc, #396]	@ (80019d4 <main+0x3a4>)
 8001846:	605a      	str	r2, [r3, #4]
		float RX_temp = map(
		__HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_2) - 1500.00, -500.00, 500.00,
 8001848:	4b4a      	ldr	r3, [pc, #296]	@ (8001974 <main+0x344>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe24 	bl	800049c <__aeabi_ui2d>
 8001854:	a342      	add	r3, pc, #264	@ (adr r3, 8001960 <main+0x330>)
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	f7fe fce1 	bl	8000220 <__aeabi_dsub>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
		float RX_temp = map(
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff f94d 	bl	8000b04 <__aeabi_d2f>
 800186a:	4603      	mov	r3, r0
 800186c:	ed9f 2a60 	vldr	s4, [pc, #384]	@ 80019f0 <main+0x3c0>
 8001870:	eddf 1a59 	vldr	s3, [pc, #356]	@ 80019d8 <main+0x3a8>
 8001874:	ed9f 1a59 	vldr	s2, [pc, #356]	@ 80019dc <main+0x3ac>
 8001878:	eddf 0a59 	vldr	s1, [pc, #356]	@ 80019e0 <main+0x3b0>
 800187c:	ee00 3a10 	vmov	s0, r3
 8001880:	f002 fae6 	bl	8003e50 <map>
 8001884:	ed87 0a53 	vstr	s0, [r7, #332]	@ 0x14c
				-100.00, 100.00);
		float RY_temp = map(
		__HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1) - 18530.00, -500.00, 500.00,
 8001888:	4b39      	ldr	r3, [pc, #228]	@ (8001970 <main+0x340>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe04 	bl	800049c <__aeabi_ui2d>
 8001894:	a334      	add	r3, pc, #208	@ (adr r3, 8001968 <main+0x338>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe fcc1 	bl	8000220 <__aeabi_dsub>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
		float RY_temp = map(
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f92d 	bl	8000b04 <__aeabi_d2f>
 80018aa:	4603      	mov	r3, r0
 80018ac:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 80019f0 <main+0x3c0>
 80018b0:	eddf 1a49 	vldr	s3, [pc, #292]	@ 80019d8 <main+0x3a8>
 80018b4:	ed9f 1a49 	vldr	s2, [pc, #292]	@ 80019dc <main+0x3ac>
 80018b8:	eddf 0a49 	vldr	s1, [pc, #292]	@ 80019e0 <main+0x3b0>
 80018bc:	ee00 3a10 	vmov	s0, r3
 80018c0:	f002 fac6 	bl	8003e50 <map>
 80018c4:	ed87 0a52 	vstr	s0, [r7, #328]	@ 0x148
				-100.00, 100.00);

		if (RX_temp >= -4 && RX_temp <= 4)
 80018c8:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 80018cc:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 80018d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d8:	db0d      	blt.n	80018f6 <main+0x2c6>
 80018da:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 80018de:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80018e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ea:	d804      	bhi.n	80018f6 <main+0x2c6>
			Receiver[0] = 0.00;
 80018ec:	4a3d      	ldr	r2, [pc, #244]	@ (80019e4 <main+0x3b4>)
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	e01d      	b.n	8001932 <main+0x302>
		else if (RX_temp > 100)
 80018f6:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 80018fa:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80019f0 <main+0x3c0>
 80018fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001906:	dd03      	ble.n	8001910 <main+0x2e0>
			Receiver[0] = 100.00;
 8001908:	4a36      	ldr	r2, [pc, #216]	@ (80019e4 <main+0x3b4>)
 800190a:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <main+0x3b8>)
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e010      	b.n	8001932 <main+0x302>
		else if (RX_temp < -100)
 8001910:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8001914:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80019d8 <main+0x3a8>
 8001918:	eef4 7ac7 	vcmpe.f32	s15, s14
 800191c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001920:	d503      	bpl.n	800192a <main+0x2fa>
			Receiver[0] = -100.00;
 8001922:	4a30      	ldr	r2, [pc, #192]	@ (80019e4 <main+0x3b4>)
 8001924:	4b31      	ldr	r3, [pc, #196]	@ (80019ec <main+0x3bc>)
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e003      	b.n	8001932 <main+0x302>
		else
			Receiver[0] = RX_temp;
 800192a:	4a2e      	ldr	r2, [pc, #184]	@ (80019e4 <main+0x3b4>)
 800192c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001930:	6013      	str	r3, [r2, #0]
		if (RY_temp >= -4 && RY_temp <= 4)
 8001932:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8001936:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 800193a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800193e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001942:	db57      	blt.n	80019f4 <main+0x3c4>
 8001944:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8001948:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800194c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001954:	d84e      	bhi.n	80019f4 <main+0x3c4>
			Receiver[1] = 0.00;
 8001956:	4a23      	ldr	r2, [pc, #140]	@ (80019e4 <main+0x3b4>)
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	6053      	str	r3, [r2, #4]
 800195e:	e067      	b.n	8001a30 <main+0x400>
 8001960:	00000000 	.word	0x00000000
 8001964:	40977000 	.word	0x40977000
 8001968:	00000000 	.word	0x00000000
 800196c:	40d21880 	.word	0x40d21880
 8001970:	200000a8 	.word	0x200000a8
 8001974:	20000174 	.word	0x20000174
 8001978:	20000240 	.word	0x20000240
 800197c:	2000030c 	.word	0x2000030c
 8001980:	200003d8 	.word	0x200003d8
 8001984:	200004a4 	.word	0x200004a4
 8001988:	20000570 	.word	0x20000570
 800198c:	200009d8 	.word	0x200009d8
 8001990:	3dcccccd 	.word	0x3dcccccd
 8001994:	3727c5ac 	.word	0x3727c5ac
 8001998:	20000a24 	.word	0x20000a24
 800199c:	20000a44 	.word	0x20000a44
 80019a0:	20000708 	.word	0x20000708
 80019a4:	2000063c 	.word	0x2000063c
 80019a8:	20000f1c 	.word	0x20000f1c
 80019ac:	200008e8 	.word	0x200008e8
 80019b0:	200008ec 	.word	0x200008ec
 80019b4:	200010b8 	.word	0x200010b8
 80019b8:	200010c0 	.word	0x200010c0
 80019bc:	200010c8 	.word	0x200010c8
 80019c0:	000186a0 	.word	0x000186a0
 80019c4:	20000930 	.word	0x20000930
 80019c8:	200008f0 	.word	0x200008f0
 80019cc:	2000097c 	.word	0x2000097c
 80019d0:	20000980 	.word	0x20000980
 80019d4:	200008bc 	.word	0x200008bc
 80019d8:	c2c80000 	.word	0xc2c80000
 80019dc:	43fa0000 	.word	0x43fa0000
 80019e0:	c3fa0000 	.word	0xc3fa0000
 80019e4:	200008a8 	.word	0x200008a8
 80019e8:	42c80000 	.word	0x42c80000
 80019ec:	c2c80000 	.word	0xc2c80000
 80019f0:	42c80000 	.word	0x42c80000
		else if (RY_temp > 100)
 80019f4:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 80019f8:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 80019f0 <main+0x3c0>
 80019fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a04:	dd03      	ble.n	8001a0e <main+0x3de>
			Receiver[1] = 100.00;
 8001a06:	4ac0      	ldr	r2, [pc, #768]	@ (8001d08 <main+0x6d8>)
 8001a08:	4bc0      	ldr	r3, [pc, #768]	@ (8001d0c <main+0x6dc>)
 8001a0a:	6053      	str	r3, [r2, #4]
 8001a0c:	e010      	b.n	8001a30 <main+0x400>
		else if (RY_temp < -100)
 8001a0e:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8001a12:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 8001d10 <main+0x6e0>
 8001a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1e:	d503      	bpl.n	8001a28 <main+0x3f8>
			Receiver[1] = -100.00;
 8001a20:	4ab9      	ldr	r2, [pc, #740]	@ (8001d08 <main+0x6d8>)
 8001a22:	4bbc      	ldr	r3, [pc, #752]	@ (8001d14 <main+0x6e4>)
 8001a24:	6053      	str	r3, [r2, #4]
 8001a26:	e003      	b.n	8001a30 <main+0x400>
		else
			Receiver[1] = RY_temp;
 8001a28:	4ab7      	ldr	r2, [pc, #732]	@ (8001d08 <main+0x6d8>)
 8001a2a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001a2e:	6053      	str	r3, [r2, #4]

		if (pulse_width_us[0] > 4000.00)
 8001a30:	4bb9      	ldr	r3, [pc, #740]	@ (8001d18 <main+0x6e8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001a38:	d912      	bls.n	8001a60 <main+0x430>
			pulse_width_us[0] = pulse_width_us[0] - 4900.00;
 8001a3a:	4bb7      	ldr	r3, [pc, #732]	@ (8001d18 <main+0x6e8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd2c 	bl	800049c <__aeabi_ui2d>
 8001a44:	a3ac      	add	r3, pc, #688	@ (adr r3, 8001cf8 <main+0x6c8>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fbe9 	bl	8000220 <__aeabi_dsub>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7ff f835 	bl	8000ac4 <__aeabi_d2uiz>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	4bae      	ldr	r3, [pc, #696]	@ (8001d18 <main+0x6e8>)
 8001a5e:	601a      	str	r2, [r3, #0]
		if (pulse_width_us[1] > 4000.00)
 8001a60:	4bad      	ldr	r3, [pc, #692]	@ (8001d18 <main+0x6e8>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001a68:	d912      	bls.n	8001a90 <main+0x460>
			pulse_width_us[1] = pulse_width_us[1] - 4900.00;
 8001a6a:	4bab      	ldr	r3, [pc, #684]	@ (8001d18 <main+0x6e8>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fd14 	bl	800049c <__aeabi_ui2d>
 8001a74:	a3a0      	add	r3, pc, #640	@ (adr r3, 8001cf8 <main+0x6c8>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe fbd1 	bl	8000220 <__aeabi_dsub>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7ff f81d 	bl	8000ac4 <__aeabi_d2uiz>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	4ba2      	ldr	r3, [pc, #648]	@ (8001d18 <main+0x6e8>)
 8001a8e:	605a      	str	r2, [r3, #4]
		if (pulse_width_us[2] > 4000.00)
 8001a90:	4ba1      	ldr	r3, [pc, #644]	@ (8001d18 <main+0x6e8>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001a98:	d912      	bls.n	8001ac0 <main+0x490>
			pulse_width_us[2] = pulse_width_us[2] - 4900.00;
 8001a9a:	4b9f      	ldr	r3, [pc, #636]	@ (8001d18 <main+0x6e8>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fcfc 	bl	800049c <__aeabi_ui2d>
 8001aa4:	a394      	add	r3, pc, #592	@ (adr r3, 8001cf8 <main+0x6c8>)
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	f7fe fbb9 	bl	8000220 <__aeabi_dsub>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f7ff f805 	bl	8000ac4 <__aeabi_d2uiz>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b96      	ldr	r3, [pc, #600]	@ (8001d18 <main+0x6e8>)
 8001abe:	609a      	str	r2, [r3, #8]

		Receiver[2] = map((float) pulse_width_us[0] - 1500.00, -500.00, 500.00,
 8001ac0:	4b95      	ldr	r3, [pc, #596]	@ (8001d18 <main+0x6e8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001acc:	ee17 0a90 	vmov	r0, s15
 8001ad0:	f7fe fd06 	bl	80004e0 <__aeabi_f2d>
 8001ad4:	a38a      	add	r3, pc, #552	@ (adr r3, 8001d00 <main+0x6d0>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fba1 	bl	8000220 <__aeabi_dsub>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f80d 	bl	8000b04 <__aeabi_d2f>
 8001aea:	4603      	mov	r3, r0
 8001aec:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 8001d1c <main+0x6ec>
 8001af0:	eddf 1a87 	vldr	s3, [pc, #540]	@ 8001d10 <main+0x6e0>
 8001af4:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 8001d20 <main+0x6f0>
 8001af8:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8001d24 <main+0x6f4>
 8001afc:	ee00 3a10 	vmov	s0, r3
 8001b00:	f002 f9a6 	bl	8003e50 <map>
 8001b04:	eef0 7a40 	vmov.f32	s15, s0
 8001b08:	4b7f      	ldr	r3, [pc, #508]	@ (8001d08 <main+0x6d8>)
 8001b0a:	edc3 7a02 	vstr	s15, [r3, #8]
				-100.00, 100.00);
		Receiver[3] = map((float) pulse_width_us[1] - 1500.00, -500.00, 500.00,
 8001b0e:	4b82      	ldr	r3, [pc, #520]	@ (8001d18 <main+0x6e8>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b1a:	ee17 0a90 	vmov	r0, s15
 8001b1e:	f7fe fcdf 	bl	80004e0 <__aeabi_f2d>
 8001b22:	a377      	add	r3, pc, #476	@ (adr r3, 8001d00 <main+0x6d0>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fb7a 	bl	8000220 <__aeabi_dsub>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7fe ffe6 	bl	8000b04 <__aeabi_d2f>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	ed9f 2a78 	vldr	s4, [pc, #480]	@ 8001d1c <main+0x6ec>
 8001b3e:	eddf 1a74 	vldr	s3, [pc, #464]	@ 8001d10 <main+0x6e0>
 8001b42:	ed9f 1a77 	vldr	s2, [pc, #476]	@ 8001d20 <main+0x6f0>
 8001b46:	eddf 0a77 	vldr	s1, [pc, #476]	@ 8001d24 <main+0x6f4>
 8001b4a:	ee00 3a10 	vmov	s0, r3
 8001b4e:	f002 f97f 	bl	8003e50 <map>
 8001b52:	eef0 7a40 	vmov.f32	s15, s0
 8001b56:	4b6c      	ldr	r3, [pc, #432]	@ (8001d08 <main+0x6d8>)
 8001b58:	edc3 7a03 	vstr	s15, [r3, #12]
				-100.00, 100.00);
		Receiver[4] = map((float) pulse_width_us[2] - 1500.00, -500.00, 500.00,
 8001b5c:	4b6e      	ldr	r3, [pc, #440]	@ (8001d18 <main+0x6e8>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b68:	ee17 0a90 	vmov	r0, s15
 8001b6c:	f7fe fcb8 	bl	80004e0 <__aeabi_f2d>
 8001b70:	a363      	add	r3, pc, #396	@ (adr r3, 8001d00 <main+0x6d0>)
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	f7fe fb53 	bl	8000220 <__aeabi_dsub>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f7fe ffbf 	bl	8000b04 <__aeabi_d2f>
 8001b86:	4603      	mov	r3, r0
 8001b88:	ed9f 2a64 	vldr	s4, [pc, #400]	@ 8001d1c <main+0x6ec>
 8001b8c:	eddf 1a60 	vldr	s3, [pc, #384]	@ 8001d10 <main+0x6e0>
 8001b90:	ed9f 1a63 	vldr	s2, [pc, #396]	@ 8001d20 <main+0x6f0>
 8001b94:	eddf 0a63 	vldr	s1, [pc, #396]	@ 8001d24 <main+0x6f4>
 8001b98:	ee00 3a10 	vmov	s0, r3
 8001b9c:	f002 f958 	bl	8003e50 <map>
 8001ba0:	eef0 7a40 	vmov.f32	s15, s0
 8001ba4:	4b58      	ldr	r3, [pc, #352]	@ (8001d08 <main+0x6d8>)
 8001ba6:	edc3 7a04 	vstr	s15, [r3, #16]
//		if(Receiver[2] > 1500.00) Receiver[2] = Receiver[2] - 3400.00;
//		if(Receiver[3] > 1500.00) Receiver[3] = Receiver[3] - 3400.00;
//		if(Receiver[4] > 1500.00) Receiver[4] = Receiver[4] - 3400.00;

		//Adjust as needed
		vx = map((float) Receiver[0], -100.00, 100.00, -300.00, 300.00);
 8001baa:	4b57      	ldr	r3, [pc, #348]	@ (8001d08 <main+0x6d8>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	ed9f 2a5d 	vldr	s4, [pc, #372]	@ 8001d28 <main+0x6f8>
 8001bb4:	eddf 1a5d 	vldr	s3, [pc, #372]	@ 8001d2c <main+0x6fc>
 8001bb8:	ed9f 1a58 	vldr	s2, [pc, #352]	@ 8001d1c <main+0x6ec>
 8001bbc:	eddf 0a54 	vldr	s1, [pc, #336]	@ 8001d10 <main+0x6e0>
 8001bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc4:	f002 f944 	bl	8003e50 <map>
 8001bc8:	eef0 7a40 	vmov.f32	s15, s0
 8001bcc:	4b58      	ldr	r3, [pc, #352]	@ (8001d30 <main+0x700>)
 8001bce:	edc3 7a00 	vstr	s15, [r3]
		vy = map((float) Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8001bd2:	4b4d      	ldr	r3, [pc, #308]	@ (8001d08 <main+0x6d8>)
 8001bd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bd8:	ed9f 2a53 	vldr	s4, [pc, #332]	@ 8001d28 <main+0x6f8>
 8001bdc:	eddf 1a53 	vldr	s3, [pc, #332]	@ 8001d2c <main+0x6fc>
 8001be0:	ed9f 1a4e 	vldr	s2, [pc, #312]	@ 8001d1c <main+0x6ec>
 8001be4:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 8001d10 <main+0x6e0>
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	f002 f930 	bl	8003e50 <map>
 8001bf0:	eef0 7a40 	vmov.f32	s15, s0
 8001bf4:	4b4f      	ldr	r3, [pc, #316]	@ (8001d34 <main+0x704>)
 8001bf6:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8001bfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bfe:	484e      	ldr	r0, [pc, #312]	@ (8001d38 <main+0x708>)
 8001c00:	f004 f80a 	bl	8005c18 <HAL_GPIO_ReadPin>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d10e      	bne.n	8001c28 <main+0x5f8>
			Mode = 0;
 8001c0a:	4a4c      	ldr	r2, [pc, #304]	@ (8001d3c <main+0x70c>)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 8001c10:	4a4b      	ldr	r2, [pc, #300]	@ (8001d40 <main+0x710>)
 8001c12:	2301      	movs	r3, #1
 8001c14:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f002 fd6e 	bl	80046f8 <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c22:	4845      	ldr	r0, [pc, #276]	@ (8001d38 <main+0x708>)
 8001c24:	f004 f810 	bl	8005c48 <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1) {
 8001c28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c2c:	4845      	ldr	r0, [pc, #276]	@ (8001d44 <main+0x714>)
 8001c2e:	f003 fff3 	bl	8005c18 <HAL_GPIO_ReadPin>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d108      	bne.n	8001c4a <main+0x61a>
			EmergencyState = 0;
 8001c38:	4a41      	ldr	r2, [pc, #260]	@ (8001d40 <main+0x710>)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c44:	483c      	ldr	r0, [pc, #240]	@ (8001d38 <main+0x708>)
 8001c46:	f003 ffff 	bl	8005c48 <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 8001c4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c4e:	483d      	ldr	r0, [pc, #244]	@ (8001d44 <main+0x714>)
 8001c50:	f003 ffe2 	bl	8005c18 <HAL_GPIO_ReadPin>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d102      	bne.n	8001c60 <main+0x630>
			Pen_Status = 0;
 8001c5a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d48 <main+0x718>)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1) {
 8001c60:	2104      	movs	r1, #4
 8001c62:	4838      	ldr	r0, [pc, #224]	@ (8001d44 <main+0x714>)
 8001c64:	f003 ffd8 	bl	8005c18 <HAL_GPIO_ReadPin>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d102      	bne.n	8001c74 <main+0x644>
			Pen_Status = 1;
 8001c6e:	4a36      	ldr	r2, [pc, #216]	@ (8001d48 <main+0x718>)
 8001c70:	2301      	movs	r3, #1
 8001c72:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 8001c74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c7c:	f003 ffcc 	bl	8005c18 <HAL_GPIO_ReadPin>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d103      	bne.n	8001c8e <main+0x65e>
			z_temp = 1;
 8001c86:	4a31      	ldr	r2, [pc, #196]	@ (8001d4c <main+0x71c>)
 8001c88:	2301      	movs	r3, #1
 8001c8a:	7013      	strb	r3, [r2, #0]
 8001c8c:	e00b      	b.n	8001ca6 <main+0x676>
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0) {
 8001c8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c96:	f003 ffbf 	bl	8005c18 <HAL_GPIO_ReadPin>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <main+0x676>
			z_temp = 0;
 8001ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8001d4c <main+0x71c>)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	7013      	strb	r3, [r2, #0]
		}

		if (EmergencyState == 1) {
 8001ca6:	4b26      	ldr	r3, [pc, #152]	@ (8001d40 <main+0x710>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d103      	bne.n	8001cb6 <main+0x686>
			Mode = 0;
 8001cae:	4a23      	ldr	r2, [pc, #140]	@ (8001d3c <main+0x70c>)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	7013      	strb	r3, [r2, #0]
 8001cb4:	e1ab      	b.n	800200e <main+0x9de>
		} else if (Receiver[2] < -30 && Receiver[4] < -30) {
 8001cb6:	4b14      	ldr	r3, [pc, #80]	@ (8001d08 <main+0x6d8>)
 8001cb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cbc:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc8:	d542      	bpl.n	8001d50 <main+0x720>
 8001cca:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <main+0x6d8>)
 8001ccc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cd0:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cdc:	d538      	bpl.n	8001d50 <main+0x720>
			Mode = 0;
 8001cde:	4a17      	ldr	r2, [pc, #92]	@ (8001d3c <main+0x70c>)
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cea:	4813      	ldr	r0, [pc, #76]	@ (8001d38 <main+0x708>)
 8001cec:	f003 ffac 	bl	8005c48 <HAL_GPIO_WritePin>
 8001cf0:	e18d      	b.n	800200e <main+0x9de>
 8001cf2:	bf00      	nop
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	00000000 	.word	0x00000000
 8001cfc:	40b32400 	.word	0x40b32400
 8001d00:	00000000 	.word	0x00000000
 8001d04:	40977000 	.word	0x40977000
 8001d08:	200008a8 	.word	0x200008a8
 8001d0c:	42c80000 	.word	0x42c80000
 8001d10:	c2c80000 	.word	0xc2c80000
 8001d14:	c2c80000 	.word	0xc2c80000
 8001d18:	200008dc 	.word	0x200008dc
 8001d1c:	42c80000 	.word	0x42c80000
 8001d20:	43fa0000 	.word	0x43fa0000
 8001d24:	c3fa0000 	.word	0xc3fa0000
 8001d28:	43960000 	.word	0x43960000
 8001d2c:	c3960000 	.word	0xc3960000
 8001d30:	20000974 	.word	0x20000974
 8001d34:	20000978 	.word	0x20000978
 8001d38:	48000800 	.word	0x48000800
 8001d3c:	200009c4 	.word	0x200009c4
 8001d40:	200009c5 	.word	0x200009c5
 8001d44:	48000400 	.word	0x48000400
 8001d48:	200009c7 	.word	0x200009c7
 8001d4c:	20000971 	.word	0x20000971
		} else if (Receiver[3] > 0 && IsPress == 0) {
 8001d50:	4b9e      	ldr	r3, [pc, #632]	@ (8001fcc <main+0x99c>)
 8001d52:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5e:	f340 8153 	ble.w	8002008 <main+0x9d8>
 8001d62:	4b9b      	ldr	r3, [pc, #620]	@ (8001fd0 <main+0x9a0>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 814e 	bne.w	8002008 <main+0x9d8>
			IsPress = 1;
 8001d6c:	4a98      	ldr	r2, [pc, #608]	@ (8001fd0 <main+0x9a0>)
 8001d6e:	2301      	movs	r3, #1
 8001d70:	7013      	strb	r3, [r2, #0]
			calibState = CALIB_IDLE;
 8001d72:	4a98      	ldr	r2, [pc, #608]	@ (8001fd4 <main+0x9a4>)
 8001d74:	2300      	movs	r3, #0
 8001d76:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 8001d78:	4b94      	ldr	r3, [pc, #592]	@ (8001fcc <main+0x99c>)
 8001d7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d7e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	dd2c      	ble.n	8001de6 <main+0x7b6>
 8001d8c:	4b8f      	ldr	r3, [pc, #572]	@ (8001fcc <main+0x99c>)
 8001d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d92:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	d522      	bpl.n	8001de6 <main+0x7b6>
 8001da0:	4b8a      	ldr	r3, [pc, #552]	@ (8001fcc <main+0x99c>)
 8001da2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001da6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	d518      	bpl.n	8001de6 <main+0x7b6>
				if (Mode != 1) {
 8001db4:	4b88      	ldr	r3, [pc, #544]	@ (8001fd8 <main+0x9a8>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d003      	beq.n	8001dc4 <main+0x794>
					Mode = 1;
 8001dbc:	4a86      	ldr	r2, [pc, #536]	@ (8001fd8 <main+0x9a8>)
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	7013      	strb	r3, [r2, #0]
				if (Mode != 1) {
 8001dc2:	e101      	b.n	8001fc8 <main+0x998>
				} else {
					TargetX = End_x;
 8001dc4:	4b85      	ldr	r3, [pc, #532]	@ (8001fdc <main+0x9ac>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b85      	ldr	r3, [pc, #532]	@ (8001fe0 <main+0x9b0>)
 8001dca:	601a      	str	r2, [r3, #0]
					TargetY = End_y;
 8001dcc:	4b85      	ldr	r3, [pc, #532]	@ (8001fe4 <main+0x9b4>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b85      	ldr	r3, [pc, #532]	@ (8001fe8 <main+0x9b8>)
 8001dd2:	601a      	str	r2, [r3, #0]
					TargetR = Revolute_QEIdata.RadPosition;
 8001dd4:	4b85      	ldr	r3, [pc, #532]	@ (8001fec <main+0x9bc>)
 8001dd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001dd8:	4b85      	ldr	r3, [pc, #532]	@ (8001ff0 <main+0x9c0>)
 8001dda:	601a      	str	r2, [r3, #0]
					TargetP = Prismatic_QEIdata.mmPosition;
 8001ddc:	4b85      	ldr	r3, [pc, #532]	@ (8001ff4 <main+0x9c4>)
 8001dde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001de0:	4b85      	ldr	r3, [pc, #532]	@ (8001ff8 <main+0x9c8>)
 8001de2:	601a      	str	r2, [r3, #0]
				if (Mode != 1) {
 8001de4:	e0f0      	b.n	8001fc8 <main+0x998>
				}
			} else if (Receiver[2] > 30 && Receiver[4] < -30) {
 8001de6:	4b79      	ldr	r3, [pc, #484]	@ (8001fcc <main+0x99c>)
 8001de8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dec:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001df0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	dd13      	ble.n	8001e22 <main+0x7f2>
 8001dfa:	4b74      	ldr	r3, [pc, #464]	@ (8001fcc <main+0x99c>)
 8001dfc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e00:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	d509      	bpl.n	8001e22 <main+0x7f2>
				revolute.finished = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
				prismatic.finished = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				Mode = 2;
 8001e1a:	4a6f      	ldr	r2, [pc, #444]	@ (8001fd8 <main+0x9a8>)
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	7013      	strb	r3, [r2, #0]
 8001e20:	e0d2      	b.n	8001fc8 <main+0x998>
			} else if (Receiver[2] < -30 && Receiver[4] > -30
 8001e22:	4b6a      	ldr	r3, [pc, #424]	@ (8001fcc <main+0x99c>)
 8001e24:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e28:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	d517      	bpl.n	8001e66 <main+0x836>
 8001e36:	4b65      	ldr	r3, [pc, #404]	@ (8001fcc <main+0x99c>)
 8001e38:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e3c:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	dd0d      	ble.n	8001e66 <main+0x836>
					&& Receiver[4] < 30) {
 8001e4a:	4b60      	ldr	r3, [pc, #384]	@ (8001fcc <main+0x99c>)
 8001e4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e50:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	d503      	bpl.n	8001e66 <main+0x836>
				Mode = 3;
 8001e5e:	4a5e      	ldr	r2, [pc, #376]	@ (8001fd8 <main+0x9a8>)
 8001e60:	2303      	movs	r3, #3
 8001e62:	7013      	strb	r3, [r2, #0]
 8001e64:	e0b0      	b.n	8001fc8 <main+0x998>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 8001e66:	4b59      	ldr	r3, [pc, #356]	@ (8001fcc <main+0x99c>)
 8001e68:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e6c:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001e70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	dd27      	ble.n	8001eca <main+0x89a>
 8001e7a:	4b54      	ldr	r3, [pc, #336]	@ (8001fcc <main+0x99c>)
 8001e7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e80:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001e84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8c:	d51d      	bpl.n	8001eca <main+0x89a>
					&& Receiver[4] > -30 && Receiver[4] < 30) {
 8001e8e:	4b4f      	ldr	r3, [pc, #316]	@ (8001fcc <main+0x99c>)
 8001e90:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e94:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea0:	dd13      	ble.n	8001eca <main+0x89a>
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fcc <main+0x99c>)
 8001ea4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ea8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb4:	d509      	bpl.n	8001eca <main+0x89a>
				revolute.finished = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
				prismatic.finished = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				Mode = 4;
 8001ec2:	4a45      	ldr	r2, [pc, #276]	@ (8001fd8 <main+0x9a8>)
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	7013      	strb	r3, [r2, #0]
 8001ec8:	e07e      	b.n	8001fc8 <main+0x998>
			} else if (Receiver[2] > 30 && Receiver[4] > -30
 8001eca:	4b40      	ldr	r3, [pc, #256]	@ (8001fcc <main+0x99c>)
 8001ecc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ed0:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001edc:	dd17      	ble.n	8001f0e <main+0x8de>
 8001ede:	4b3b      	ldr	r3, [pc, #236]	@ (8001fcc <main+0x99c>)
 8001ee0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ee4:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef0:	dd0d      	ble.n	8001f0e <main+0x8de>
					&& Receiver[4] < 30) {
 8001ef2:	4b36      	ldr	r3, [pc, #216]	@ (8001fcc <main+0x99c>)
 8001ef4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ef8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	d503      	bpl.n	8001f0e <main+0x8de>
				Mode = 5;
 8001f06:	4a34      	ldr	r2, [pc, #208]	@ (8001fd8 <main+0x9a8>)
 8001f08:	2305      	movs	r3, #5
 8001f0a:	7013      	strb	r3, [r2, #0]
 8001f0c:	e05c      	b.n	8001fc8 <main+0x998>
			} else if (Receiver[2] < -30 && Receiver[4] > 30) {
 8001f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001fcc <main+0x99c>)
 8001f10:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f14:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f20:	d50d      	bpl.n	8001f3e <main+0x90e>
 8001f22:	4b2a      	ldr	r3, [pc, #168]	@ (8001fcc <main+0x99c>)
 8001f24:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f28:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	dd03      	ble.n	8001f3e <main+0x90e>
				Mode = 6;
 8001f36:	4a28      	ldr	r2, [pc, #160]	@ (8001fd8 <main+0x9a8>)
 8001f38:	2306      	movs	r3, #6
 8001f3a:	7013      	strb	r3, [r2, #0]
 8001f3c:	e044      	b.n	8001fc8 <main+0x998>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 8001f3e:	4b23      	ldr	r3, [pc, #140]	@ (8001fcc <main+0x99c>)
 8001f40:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f44:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f50:	dd17      	ble.n	8001f82 <main+0x952>
 8001f52:	4b1e      	ldr	r3, [pc, #120]	@ (8001fcc <main+0x99c>)
 8001f54:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f58:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	d50d      	bpl.n	8001f82 <main+0x952>
					&& Receiver[4] > 30) {
 8001f66:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <main+0x99c>)
 8001f68:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f6c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f78:	dd03      	ble.n	8001f82 <main+0x952>
				Mode = 7;
 8001f7a:	4a17      	ldr	r2, [pc, #92]	@ (8001fd8 <main+0x9a8>)
 8001f7c:	2307      	movs	r3, #7
 8001f7e:	7013      	strb	r3, [r2, #0]
 8001f80:	e022      	b.n	8001fc8 <main+0x998>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8001f82:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <main+0x99c>)
 8001f84:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f88:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f94:	dc00      	bgt.n	8001f98 <main+0x968>
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 8001f96:	e03a      	b.n	800200e <main+0x9de>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8001f98:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <main+0x99c>)
 8001f9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f9e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001faa:	dc00      	bgt.n	8001fae <main+0x97e>
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 8001fac:	e02f      	b.n	800200e <main+0x9de>
				loop_counter = 0;
 8001fae:	4a13      	ldr	r2, [pc, #76]	@ (8001ffc <main+0x9cc>)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	6013      	str	r3, [r2, #0]
				TargetR = 4.18879;
 8001fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff0 <main+0x9c0>)
 8001fb6:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <main+0x9d0>)
 8001fb8:	6013      	str	r3, [r2, #0]
				TargetP = 50;
 8001fba:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff8 <main+0x9c8>)
 8001fbc:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <main+0x9d4>)
 8001fbe:	6013      	str	r3, [r2, #0]
				Mode = 8;
 8001fc0:	4a05      	ldr	r2, [pc, #20]	@ (8001fd8 <main+0x9a8>)
 8001fc2:	2308      	movs	r3, #8
 8001fc4:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 8001fc6:	e022      	b.n	800200e <main+0x9de>
 8001fc8:	e021      	b.n	800200e <main+0x9de>
 8001fca:	bf00      	nop
 8001fcc:	200008a8 	.word	0x200008a8
 8001fd0:	200009c6 	.word	0x200009c6
 8001fd4:	20000a24 	.word	0x20000a24
 8001fd8:	200009c4 	.word	0x200009c4
 8001fdc:	2000097c 	.word	0x2000097c
 8001fe0:	20000984 	.word	0x20000984
 8001fe4:	20000980 	.word	0x20000980
 8001fe8:	20000988 	.word	0x20000988
 8001fec:	200008f0 	.word	0x200008f0
 8001ff0:	2000098c 	.word	0x2000098c
 8001ff4:	20000930 	.word	0x20000930
 8001ff8:	20000990 	.word	0x20000990
 8001ffc:	20000a40 	.word	0x20000a40
 8002000:	40860a91 	.word	0x40860a91
 8002004:	42480000 	.word	0x42480000
			}
		} else {
			IsPress = 0;
 8002008:	4aa3      	ldr	r2, [pc, #652]	@ (8002298 <main+0xc68>)
 800200a:	2300      	movs	r3, #0
 800200c:	7013      	strb	r3, [r2, #0]
//			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
//		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<STOP>> ////////////////////////////
		if (Mode == 0) {
 800200e:	4ba3      	ldr	r3, [pc, #652]	@ (800229c <main+0xc6c>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10c      	bne.n	8002030 <main+0xa00>
			Set_Motor(0, 0);
 8002016:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 80022a0 <main+0xc70>
 800201a:	2000      	movs	r0, #0
 800201c:	f002 faee 	bl	80045fc <Set_Motor>
			Set_Motor(1, 0);
 8002020:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 80022a0 <main+0xc70>
 8002024:	2001      	movs	r0, #1
 8002026:	f002 fae9 	bl	80045fc <Set_Motor>
			Set_Servo(0);
 800202a:	2000      	movs	r0, #0
 800202c:	f002 fb64 	bl	80046f8 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MANUAL>> //////////////////////////
		if (Mode == 1) {
 8002030:	4b9a      	ldr	r3, [pc, #616]	@ (800229c <main+0xc6c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	f040 80af 	bne.w	8002198 <main+0xb68>
			//////////////////////// <<CONTROL>> /////////////////////////
//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
			TargetRVel =
					(map((float) Receiver[0], -100.00, 100.00, -1.00, 1.00));
 800203a:	4b9a      	ldr	r3, [pc, #616]	@ (80022a4 <main+0xc74>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8002044:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 8002048:	ed9f 1a97 	vldr	s2, [pc, #604]	@ 80022a8 <main+0xc78>
 800204c:	eddf 0a97 	vldr	s1, [pc, #604]	@ 80022ac <main+0xc7c>
 8002050:	eeb0 0a67 	vmov.f32	s0, s15
 8002054:	f001 fefc 	bl	8003e50 <map>
 8002058:	eef0 7a40 	vmov.f32	s15, s0
			TargetRVel =
 800205c:	4b94      	ldr	r3, [pc, #592]	@ (80022b0 <main+0xc80>)
 800205e:	edc3 7a00 	vstr	s15, [r3]
			TargetPVel = map((float) Receiver[1], -100.00, 100.00, -500.00,
 8002062:	4b90      	ldr	r3, [pc, #576]	@ (80022a4 <main+0xc74>)
 8002064:	edd3 7a01 	vldr	s15, [r3, #4]
 8002068:	ed9f 2a92 	vldr	s4, [pc, #584]	@ 80022b4 <main+0xc84>
 800206c:	eddf 1a92 	vldr	s3, [pc, #584]	@ 80022b8 <main+0xc88>
 8002070:	ed9f 1a8d 	vldr	s2, [pc, #564]	@ 80022a8 <main+0xc78>
 8002074:	eddf 0a8d 	vldr	s1, [pc, #564]	@ 80022ac <main+0xc7c>
 8002078:	eeb0 0a67 	vmov.f32	s0, s15
 800207c:	f001 fee8 	bl	8003e50 <map>
 8002080:	eef0 7a40 	vmov.f32	s15, s0
 8002084:	4b8d      	ldr	r3, [pc, #564]	@ (80022bc <main+0xc8c>)
 8002086:	edc3 7a00 	vstr	s15, [r3]
					500.00);
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MOTOR>> ///////////////////////////
			R_Velo_Error = (TargetRVel - Revolute_QEIdata.Velocity_f);
 800208a:	4b89      	ldr	r3, [pc, #548]	@ (80022b0 <main+0xc80>)
 800208c:	ed93 7a00 	vldr	s14, [r3]
 8002090:	4b8b      	ldr	r3, [pc, #556]	@ (80022c0 <main+0xc90>)
 8002092:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209a:	4b8a      	ldr	r3, [pc, #552]	@ (80022c4 <main+0xc94>)
 800209c:	edc3 7a00 	vstr	s15, [r3]
			P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity;
 80020a0:	4b86      	ldr	r3, [pc, #536]	@ (80022bc <main+0xc8c>)
 80020a2:	ed93 7a00 	vldr	s14, [r3]
 80020a6:	4b88      	ldr	r3, [pc, #544]	@ (80022c8 <main+0xc98>)
 80020a8:	edd3 7a08 	vldr	s15, [r3, #32]
 80020ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b0:	4b86      	ldr	r3, [pc, #536]	@ (80022cc <main+0xc9c>)
 80020b2:	edc3 7a00 	vstr	s15, [r3]
//			arm_pid_init_f32(&PID, 1);
//			P_PWM = arm_pid_f32(&PID, P_Velo_Error);

			//Call every 0.001 s
			static uint64_t timestampState1 = 0;
			int64_t currentTimeState1 = micros();
 80020b6:	f001 ffef 	bl	8004098 <micros>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			if (currentTimeState1 > timestampState1) {
 80020c2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80020c6:	4b82      	ldr	r3, [pc, #520]	@ (80022d0 <main+0xca0>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	4282      	cmp	r2, r0
 80020ce:	418b      	sbcs	r3, r1
 80020d0:	d250      	bcs.n	8002174 <main+0xb44>
				timestampState1 = currentTimeState1 + 1000;		//us
 80020d2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80020d6:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 80020da:	6639      	str	r1, [r7, #96]	@ 0x60
 80020dc:	f143 0300 	adc.w	r3, r3, #0
 80020e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80020e2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80020e6:	4b7a      	ldr	r3, [pc, #488]	@ (80022d0 <main+0xca0>)
 80020e8:	e9c3 0100 	strd	r0, r1, [r3]
				R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel, R_kD_vel,
 80020ec:	4b75      	ldr	r3, [pc, #468]	@ (80022c4 <main+0xc94>)
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	4b78      	ldr	r3, [pc, #480]	@ (80022d4 <main+0xca4>)
 80020f4:	ed93 7a00 	vldr	s14, [r3]
 80020f8:	4b77      	ldr	r3, [pc, #476]	@ (80022d8 <main+0xca8>)
 80020fa:	edd3 6a00 	vldr	s13, [r3]
 80020fe:	4b77      	ldr	r3, [pc, #476]	@ (80022dc <main+0xcac>)
 8002100:	ed93 6a00 	vldr	s12, [r3]
 8002104:	4876      	ldr	r0, [pc, #472]	@ (80022e0 <main+0xcb0>)
 8002106:	ed9f 3a68 	vldr	s6, [pc, #416]	@ 80022a8 <main+0xc78>
 800210a:	eddf 2a68 	vldr	s5, [pc, #416]	@ 80022ac <main+0xc7c>
 800210e:	ed9f 2a75 	vldr	s4, [pc, #468]	@ 80022e4 <main+0xcb4>
 8002112:	eef0 1a46 	vmov.f32	s3, s12
 8002116:	eeb0 1a66 	vmov.f32	s2, s13
 800211a:	eef0 0a47 	vmov.f32	s1, s14
 800211e:	eeb0 0a67 	vmov.f32	s0, s15
 8002122:	f001 ffd3 	bl	80040cc <PID_Update>
 8002126:	eef0 7a40 	vmov.f32	s15, s0
 800212a:	4b6f      	ldr	r3, [pc, #444]	@ (80022e8 <main+0xcb8>)
 800212c:	edc3 7a00 	vstr	s15, [r3]
						0.01f, -100.0f, 100.0f, &pid_r_v);
				P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel, P_kD_vel,
 8002130:	4b66      	ldr	r3, [pc, #408]	@ (80022cc <main+0xc9c>)
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	4b6d      	ldr	r3, [pc, #436]	@ (80022ec <main+0xcbc>)
 8002138:	ed93 7a00 	vldr	s14, [r3]
 800213c:	4b6c      	ldr	r3, [pc, #432]	@ (80022f0 <main+0xcc0>)
 800213e:	edd3 6a00 	vldr	s13, [r3]
 8002142:	4b6c      	ldr	r3, [pc, #432]	@ (80022f4 <main+0xcc4>)
 8002144:	ed93 6a00 	vldr	s12, [r3]
 8002148:	486b      	ldr	r0, [pc, #428]	@ (80022f8 <main+0xcc8>)
 800214a:	ed9f 3a57 	vldr	s6, [pc, #348]	@ 80022a8 <main+0xc78>
 800214e:	eddf 2a57 	vldr	s5, [pc, #348]	@ 80022ac <main+0xc7c>
 8002152:	ed9f 2a64 	vldr	s4, [pc, #400]	@ 80022e4 <main+0xcb4>
 8002156:	eef0 1a46 	vmov.f32	s3, s12
 800215a:	eeb0 1a66 	vmov.f32	s2, s13
 800215e:	eef0 0a47 	vmov.f32	s1, s14
 8002162:	eeb0 0a67 	vmov.f32	s0, s15
 8002166:	f001 ffb1 	bl	80040cc <PID_Update>
 800216a:	eef0 7a40 	vmov.f32	s15, s0
 800216e:	4b63      	ldr	r3, [pc, #396]	@ (80022fc <main+0xccc>)
 8002170:	edc3 7a00 	vstr	s15, [r3]
			}

//			R_PWM = Receiver[0];
//			P_PWM = Receiver[1];

			Workspace_limit();
 8002174:	f002 fb0c 	bl	8004790 <Workspace_limit>

			Set_Motor(0, R_PWM);
 8002178:	4b5b      	ldr	r3, [pc, #364]	@ (80022e8 <main+0xcb8>)
 800217a:	edd3 7a00 	vldr	s15, [r3]
 800217e:	eeb0 0a67 	vmov.f32	s0, s15
 8002182:	2000      	movs	r0, #0
 8002184:	f002 fa3a 	bl	80045fc <Set_Motor>
			Set_Motor(1, P_PWM);
 8002188:	4b5c      	ldr	r3, [pc, #368]	@ (80022fc <main+0xccc>)
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	eeb0 0a67 	vmov.f32	s0, s15
 8002192:	2001      	movs	r0, #1
 8002194:	f002 fa32 	bl	80045fc <Set_Motor>
			//////////////////////////////////////////////////////////////
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<GOTO>> ////////////////////////////
		if (Mode == 2) {
 8002198:	4b40      	ldr	r3, [pc, #256]	@ (800229c <main+0xc6c>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b02      	cmp	r3, #2
 800219e:	f040 8192 	bne.w	80024c6 <main+0xe96>
			R_Pos_Error = (TargetR - Revolute_QEIdata.RadPosition);
 80021a2:	4b57      	ldr	r3, [pc, #348]	@ (8002300 <main+0xcd0>)
 80021a4:	ed93 7a00 	vldr	s14, [r3]
 80021a8:	4b45      	ldr	r3, [pc, #276]	@ (80022c0 <main+0xc90>)
 80021aa:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80021ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b2:	4b54      	ldr	r3, [pc, #336]	@ (8002304 <main+0xcd4>)
 80021b4:	edc3 7a00 	vstr	s15, [r3]
			revolute.target_position = TargetR;
 80021b8:	4b51      	ldr	r3, [pc, #324]	@ (8002300 <main+0xcd0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
//			PID.Ki = 10;
//			PID.Kd = 0.1;
//			arm_pid_init_f32(&PID, 1);
//			R_PWM = arm_pid_f32(&PID, R_Pos_Error);
//
			P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 80021c0:	4b51      	ldr	r3, [pc, #324]	@ (8002308 <main+0xcd8>)
 80021c2:	ed93 7a00 	vldr	s14, [r3]
 80021c6:	4b40      	ldr	r3, [pc, #256]	@ (80022c8 <main+0xc98>)
 80021c8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80021cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d0:	4b4e      	ldr	r3, [pc, #312]	@ (800230c <main+0xcdc>)
 80021d2:	edc3 7a00 	vstr	s15, [r3]
			prismatic.target_position = TargetP;
 80021d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002308 <main+0xcd8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
//			arm_pid_init_f32(&PID, 1);
//			P_PWM = arm_pid_f32(&PID, P_Pos_Error);

			//Call every 0.001 s
			static uint64_t timestampState2 = 0;
			int64_t currentTimeState2 = micros();
 80021de:	f001 ff5b 	bl	8004098 <micros>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
			if (currentTimeState2 > timestampState2) {
 80021ea:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 80021ee:	4b48      	ldr	r3, [pc, #288]	@ (8002310 <main+0xce0>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	4282      	cmp	r2, r0
 80021f6:	418b      	sbcs	r3, r1
 80021f8:	f080 8111 	bcs.w	800241e <main+0xdee>
				timestampState2 = currentTimeState2 + 1000;		//us
 80021fc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8002200:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8002204:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002206:	f143 0300 	adc.w	r3, r3, #0
 800220a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800220c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002210:	4b3f      	ldr	r3, [pc, #252]	@ (8002310 <main+0xce0>)
 8002212:	e9c3 0100 	strd	r0, r1, [r3]

//				R_PWM = PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f, 0.01f, -100.0f, 100.0f, &pid_r);
//				P_PWM = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f, -100.0f, 100.0f, &pid_p);

				if (revolute.finished == 0) {
 8002216:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800221a:	2b00      	cmp	r3, #0
 800221c:	d17a      	bne.n	8002314 <main+0xce4>
					revolute.current_position = Revolute_QEIdata.RadPosition;
 800221e:	4b28      	ldr	r3, [pc, #160]	@ (80022c0 <main+0xc90>)
 8002220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					Trapezoidal_Update(&revolute, 0.01);
 8002226:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800222a:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 80022e4 <main+0xcb4>
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff f8bc 	bl	80013ac <Trapezoidal_Update>
					TargetRVel = revolute.current_velocity;
 8002234:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8002238:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <main+0xc80>)
 800223a:	601a      	str	r2, [r3, #0]
					R_Velo_Error = (TargetRVel - Revolute_QEIdata.Velocity_f);
 800223c:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <main+0xc80>)
 800223e:	ed93 7a00 	vldr	s14, [r3]
 8002242:	4b1f      	ldr	r3, [pc, #124]	@ (80022c0 <main+0xc90>)
 8002244:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800224c:	4b1d      	ldr	r3, [pc, #116]	@ (80022c4 <main+0xc94>)
 800224e:	edc3 7a00 	vstr	s15, [r3]
//					R_PWM = PID_Update(R_Velo_Error, 71.42f, 0.10f, 0.00f,
//							0.01f, -100.0f, 100.0f, &pid_r_v);
					R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel,
 8002252:	4b1c      	ldr	r3, [pc, #112]	@ (80022c4 <main+0xc94>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <main+0xca4>)
 800225a:	ed93 7a00 	vldr	s14, [r3]
 800225e:	4b1e      	ldr	r3, [pc, #120]	@ (80022d8 <main+0xca8>)
 8002260:	edd3 6a00 	vldr	s13, [r3]
 8002264:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <main+0xcac>)
 8002266:	ed93 6a00 	vldr	s12, [r3]
 800226a:	481d      	ldr	r0, [pc, #116]	@ (80022e0 <main+0xcb0>)
 800226c:	ed9f 3a0e 	vldr	s6, [pc, #56]	@ 80022a8 <main+0xc78>
 8002270:	eddf 2a0e 	vldr	s5, [pc, #56]	@ 80022ac <main+0xc7c>
 8002274:	ed9f 2a1b 	vldr	s4, [pc, #108]	@ 80022e4 <main+0xcb4>
 8002278:	eef0 1a46 	vmov.f32	s3, s12
 800227c:	eeb0 1a66 	vmov.f32	s2, s13
 8002280:	eef0 0a47 	vmov.f32	s1, s14
 8002284:	eeb0 0a67 	vmov.f32	s0, s15
 8002288:	f001 ff20 	bl	80040cc <PID_Update>
 800228c:	eef0 7a40 	vmov.f32	s15, s0
 8002290:	4b15      	ldr	r3, [pc, #84]	@ (80022e8 <main+0xcb8>)
 8002292:	edc3 7a00 	vstr	s15, [r3]
 8002296:	e05f      	b.n	8002358 <main+0xd28>
 8002298:	200009c6 	.word	0x200009c6
 800229c:	200009c4 	.word	0x200009c4
 80022a0:	00000000 	.word	0x00000000
 80022a4:	200008a8 	.word	0x200008a8
 80022a8:	42c80000 	.word	0x42c80000
 80022ac:	c2c80000 	.word	0xc2c80000
 80022b0:	2000099c 	.word	0x2000099c
 80022b4:	43fa0000 	.word	0x43fa0000
 80022b8:	c3fa0000 	.word	0xc3fa0000
 80022bc:	200009a0 	.word	0x200009a0
 80022c0:	200008f0 	.word	0x200008f0
 80022c4:	200009b4 	.word	0x200009b4
 80022c8:	20000930 	.word	0x20000930
 80022cc:	200009b8 	.word	0x200009b8
 80022d0:	200010d0 	.word	0x200010d0
 80022d4:	20000000 	.word	0x20000000
 80022d8:	20000004 	.word	0x20000004
 80022dc:	20000a1c 	.word	0x20000a1c
 80022e0:	20000a0c 	.word	0x20000a0c
 80022e4:	3c23d70a 	.word	0x3c23d70a
 80022e8:	200009bc 	.word	0x200009bc
 80022ec:	20000014 	.word	0x20000014
 80022f0:	20000018 	.word	0x20000018
 80022f4:	20000a20 	.word	0x20000a20
 80022f8:	20000a14 	.word	0x20000a14
 80022fc:	200009c0 	.word	0x200009c0
 8002300:	2000098c 	.word	0x2000098c
 8002304:	200009ac 	.word	0x200009ac
 8002308:	20000990 	.word	0x20000990
 800230c:	200009b0 	.word	0x200009b0
 8002310:	200010d8 	.word	0x200010d8
							R_kD_vel, 0.01f, -100.0f, 100.0f, &pid_r_v);
				} else {
					R_PWM = PID_Update(R_Pos_Error, R_kP_pos, R_kI_pos,
 8002314:	4bb1      	ldr	r3, [pc, #708]	@ (80025dc <main+0xfac>)
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	4bb1      	ldr	r3, [pc, #708]	@ (80025e0 <main+0xfb0>)
 800231c:	ed93 7a00 	vldr	s14, [r3]
 8002320:	4bb0      	ldr	r3, [pc, #704]	@ (80025e4 <main+0xfb4>)
 8002322:	edd3 6a00 	vldr	s13, [r3]
 8002326:	4bb0      	ldr	r3, [pc, #704]	@ (80025e8 <main+0xfb8>)
 8002328:	ed93 6a00 	vldr	s12, [r3]
 800232c:	48af      	ldr	r0, [pc, #700]	@ (80025ec <main+0xfbc>)
 800232e:	ed9f 3ab0 	vldr	s6, [pc, #704]	@ 80025f0 <main+0xfc0>
 8002332:	eddf 2ab0 	vldr	s5, [pc, #704]	@ 80025f4 <main+0xfc4>
 8002336:	ed9f 2ab0 	vldr	s4, [pc, #704]	@ 80025f8 <main+0xfc8>
 800233a:	eef0 1a46 	vmov.f32	s3, s12
 800233e:	eeb0 1a66 	vmov.f32	s2, s13
 8002342:	eef0 0a47 	vmov.f32	s1, s14
 8002346:	eeb0 0a67 	vmov.f32	s0, s15
 800234a:	f001 febf 	bl	80040cc <PID_Update>
 800234e:	eef0 7a40 	vmov.f32	s15, s0
 8002352:	4baa      	ldr	r3, [pc, #680]	@ (80025fc <main+0xfcc>)
 8002354:	edc3 7a00 	vstr	s15, [r3]
							R_kD_pos, 0.01f, -100.0f, 100.0f, &pid_r);
				}

				if (prismatic.finished == 0) {
 8002358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d13c      	bne.n	80023da <main+0xdaa>
					prismatic.current_position = Prismatic_QEIdata.mmPosition;
 8002360:	4ba7      	ldr	r3, [pc, #668]	@ (8002600 <main+0xfd0>)
 8002362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002364:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
					Trapezoidal_Update(&prismatic, 0.01);
 8002368:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800236c:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 80025f8 <main+0xfc8>
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff f81b 	bl	80013ac <Trapezoidal_Update>
					TargetPVel = prismatic.current_velocity;
 8002376:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800237a:	4ba2      	ldr	r3, [pc, #648]	@ (8002604 <main+0xfd4>)
 800237c:	601a      	str	r2, [r3, #0]
					P_Velo_Error = (TargetPVel - Prismatic_QEIdata.Velocity);
 800237e:	4ba1      	ldr	r3, [pc, #644]	@ (8002604 <main+0xfd4>)
 8002380:	ed93 7a00 	vldr	s14, [r3]
 8002384:	4b9e      	ldr	r3, [pc, #632]	@ (8002600 <main+0xfd0>)
 8002386:	edd3 7a08 	vldr	s15, [r3, #32]
 800238a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238e:	4b9e      	ldr	r3, [pc, #632]	@ (8002608 <main+0xfd8>)
 8002390:	edc3 7a00 	vstr	s15, [r3]
//					P_PWM = PID_Update(P_Velo_Error, 0.2f, 1.5f, 0.00f, 0.01f,
//							-100.0f, 100.0f, &pid_p_v);
					P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel,
 8002394:	4b9c      	ldr	r3, [pc, #624]	@ (8002608 <main+0xfd8>)
 8002396:	edd3 7a00 	vldr	s15, [r3]
 800239a:	4b9c      	ldr	r3, [pc, #624]	@ (800260c <main+0xfdc>)
 800239c:	ed93 7a00 	vldr	s14, [r3]
 80023a0:	4b9b      	ldr	r3, [pc, #620]	@ (8002610 <main+0xfe0>)
 80023a2:	edd3 6a00 	vldr	s13, [r3]
 80023a6:	4b9b      	ldr	r3, [pc, #620]	@ (8002614 <main+0xfe4>)
 80023a8:	ed93 6a00 	vldr	s12, [r3]
 80023ac:	489a      	ldr	r0, [pc, #616]	@ (8002618 <main+0xfe8>)
 80023ae:	ed9f 3a90 	vldr	s6, [pc, #576]	@ 80025f0 <main+0xfc0>
 80023b2:	eddf 2a90 	vldr	s5, [pc, #576]	@ 80025f4 <main+0xfc4>
 80023b6:	ed9f 2a90 	vldr	s4, [pc, #576]	@ 80025f8 <main+0xfc8>
 80023ba:	eef0 1a46 	vmov.f32	s3, s12
 80023be:	eeb0 1a66 	vmov.f32	s2, s13
 80023c2:	eef0 0a47 	vmov.f32	s1, s14
 80023c6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ca:	f001 fe7f 	bl	80040cc <PID_Update>
 80023ce:	eef0 7a40 	vmov.f32	s15, s0
 80023d2:	4b92      	ldr	r3, [pc, #584]	@ (800261c <main+0xfec>)
 80023d4:	edc3 7a00 	vstr	s15, [r3]
 80023d8:	e021      	b.n	800241e <main+0xdee>
							P_kD_vel, 0.01f, -100.0f, 100.0f, &pid_p_v);
				} else {
					P_PWM = PID_Update(P_Pos_Error, P_kP_pos, P_kI_pos,
 80023da:	4b91      	ldr	r3, [pc, #580]	@ (8002620 <main+0xff0>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	4b90      	ldr	r3, [pc, #576]	@ (8002624 <main+0xff4>)
 80023e2:	ed93 7a00 	vldr	s14, [r3]
 80023e6:	4b90      	ldr	r3, [pc, #576]	@ (8002628 <main+0xff8>)
 80023e8:	edd3 6a00 	vldr	s13, [r3]
 80023ec:	4b8f      	ldr	r3, [pc, #572]	@ (800262c <main+0xffc>)
 80023ee:	ed93 6a00 	vldr	s12, [r3]
 80023f2:	488f      	ldr	r0, [pc, #572]	@ (8002630 <main+0x1000>)
 80023f4:	ed9f 3a7e 	vldr	s6, [pc, #504]	@ 80025f0 <main+0xfc0>
 80023f8:	eddf 2a7e 	vldr	s5, [pc, #504]	@ 80025f4 <main+0xfc4>
 80023fc:	ed9f 2a7e 	vldr	s4, [pc, #504]	@ 80025f8 <main+0xfc8>
 8002400:	eef0 1a46 	vmov.f32	s3, s12
 8002404:	eeb0 1a66 	vmov.f32	s2, s13
 8002408:	eef0 0a47 	vmov.f32	s1, s14
 800240c:	eeb0 0a67 	vmov.f32	s0, s15
 8002410:	f001 fe5c 	bl	80040cc <PID_Update>
 8002414:	eef0 7a40 	vmov.f32	s15, s0
 8002418:	4b80      	ldr	r3, [pc, #512]	@ (800261c <main+0xfec>)
 800241a:	edc3 7a00 	vstr	s15, [r3]
							P_kD_pos, 0.01f, -100.0f, 100.0f, &pid_p);
				}
			}

			Workspace_limit();
 800241e:	f002 f9b7 	bl	8004790 <Workspace_limit>

			Set_Motor(0, R_PWM);
 8002422:	4b76      	ldr	r3, [pc, #472]	@ (80025fc <main+0xfcc>)
 8002424:	edd3 7a00 	vldr	s15, [r3]
 8002428:	eeb0 0a67 	vmov.f32	s0, s15
 800242c:	2000      	movs	r0, #0
 800242e:	f002 f8e5 	bl	80045fc <Set_Motor>
			Set_Motor(1, P_PWM);
 8002432:	4b7a      	ldr	r3, [pc, #488]	@ (800261c <main+0xfec>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	eeb0 0a67 	vmov.f32	s0, s15
 800243c:	2001      	movs	r0, #1
 800243e:	f002 f8dd 	bl	80045fc <Set_Motor>
			if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 8002442:	4b66      	ldr	r3, [pc, #408]	@ (80025dc <main+0xfac>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	eef0 7ae7 	vabs.f32	s15, s15
 800244c:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8002634 <main+0x1004>
 8002450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002458:	d52c      	bpl.n	80024b4 <main+0xe84>
					&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 800245a:	4b71      	ldr	r3, [pc, #452]	@ (8002620 <main+0xff0>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	eef0 7ae7 	vabs.f32	s15, s15
 8002464:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8002638 <main+0x1008>
 8002468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800246c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002470:	d520      	bpl.n	80024b4 <main+0xe84>
				/* within window —— start or continue timer */
				if (lock_timer_us == 0)
 8002472:	4b72      	ldr	r3, [pc, #456]	@ (800263c <main+0x100c>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	4313      	orrs	r3, r2
 800247a:	d107      	bne.n	800248c <main+0xe5c>
					lock_timer_us = micros(); /* start timing */
 800247c:	f001 fe0c 	bl	8004098 <micros>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	496d      	ldr	r1, [pc, #436]	@ (800263c <main+0x100c>)
 8002486:	e9c1 2300 	strd	r2, r3, [r1]
				if (lock_timer_us == 0)
 800248a:	e01b      	b.n	80024c4 <main+0xe94>

				else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 800248c:	f001 fe04 	bl	8004098 <micros>
 8002490:	4b6a      	ldr	r3, [pc, #424]	@ (800263c <main+0x100c>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	1a84      	subs	r4, r0, r2
 8002498:	eb61 0503 	sbc.w	r5, r1, r3
 800249c:	4b68      	ldr	r3, [pc, #416]	@ (8002640 <main+0x1010>)
 800249e:	429c      	cmp	r4, r3
 80024a0:	f175 0300 	sbcs.w	r3, r5, #0
 80024a4:	d30e      	bcc.n	80024c4 <main+0xe94>
					Set_Servo(1);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f002 f926 	bl	80046f8 <Set_Servo>
					Mode = 1;
 80024ac:	4a65      	ldr	r2, [pc, #404]	@ (8002644 <main+0x1014>)
 80024ae:	2301      	movs	r3, #1
 80024b0:	7013      	strb	r3, [r2, #0]
				if (lock_timer_us == 0)
 80024b2:	e007      	b.n	80024c4 <main+0xe94>
				}
			} else {
				lock_timer_us = 0;
 80024b4:	4961      	ldr	r1, [pc, #388]	@ (800263c <main+0x100c>)
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	e9c1 2300 	strd	r2, r3, [r1]
 80024c2:	e000      	b.n	80024c6 <main+0xe96>
				if (lock_timer_us == 0)
 80024c4:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<CALIBRATING>> /////////////////////
		if (Mode == 3) {
 80024c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002644 <main+0x1014>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	f040 82a1 	bne.w	8002a12 <main+0x13e2>
			switch (calibState) {
 80024d0:	4b5d      	ldr	r3, [pc, #372]	@ (8002648 <main+0x1018>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b0c      	cmp	r3, #12
 80024d6:	f200 829c 	bhi.w	8002a12 <main+0x13e2>
 80024da:	a201      	add	r2, pc, #4	@ (adr r2, 80024e0 <main+0xeb0>)
 80024dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e0:	08002515 	.word	0x08002515
 80024e4:	0800254b 	.word	0x0800254b
 80024e8:	08002591 	.word	0x08002591
 80024ec:	08002671 	.word	0x08002671
 80024f0:	080026bb 	.word	0x080026bb
 80024f4:	08002709 	.word	0x08002709
 80024f8:	08002761 	.word	0x08002761
 80024fc:	080027a1 	.word	0x080027a1
 8002500:	080027ff 	.word	0x080027ff
 8002504:	0800286b 	.word	0x0800286b
 8002508:	080028d7 	.word	0x080028d7
 800250c:	08002947 	.word	0x08002947
 8002510:	080029b1 	.word	0x080029b1
			case CALIB_IDLE:
				Set_Motor(0, 0);
 8002514:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 800266c <main+0x103c>
 8002518:	2000      	movs	r0, #0
 800251a:	f002 f86f 	bl	80045fc <Set_Motor>
				Set_Motor(1, 0);
 800251e:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 800266c <main+0x103c>
 8002522:	2001      	movs	r0, #1
 8002524:	f002 f86a 	bl	80045fc <Set_Motor>
				P_Limit = 0;
 8002528:	4a48      	ldr	r2, [pc, #288]	@ (800264c <main+0x101c>)
 800252a:	2300      	movs	r3, #0
 800252c:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 800252e:	4a48      	ldr	r2, [pc, #288]	@ (8002650 <main+0x1020>)
 8002530:	2300      	movs	r3, #0
 8002532:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 8002534:	4a44      	ldr	r2, [pc, #272]	@ (8002648 <main+0x1018>)
 8002536:	2301      	movs	r3, #1
 8002538:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 800253a:	f001 fdad 	bl	8004098 <micros>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4944      	ldr	r1, [pc, #272]	@ (8002654 <main+0x1024>)
 8002544:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8002548:	e263      	b.n	8002a12 <main+0x13e2>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80) {
 800254a:	4b43      	ldr	r3, [pc, #268]	@ (8002658 <main+0x1028>)
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800265c <main+0x102c>
 8002554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255c:	dd06      	ble.n	800256c <main+0xf3c>
					Cal_Side = 1;
 800255e:	4a40      	ldr	r2, [pc, #256]	@ (8002660 <main+0x1030>)
 8002560:	2301      	movs	r3, #1
 8002562:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002564:	4a38      	ldr	r2, [pc, #224]	@ (8002648 <main+0x1018>)
 8002566:	2302      	movs	r3, #2
 8002568:	7013      	strb	r3, [r2, #0]
				} else if (Receiver[0] < -80) {
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 800256a:	e252      	b.n	8002a12 <main+0x13e2>
				} else if (Receiver[0] < -80) {
 800256c:	4b3a      	ldr	r3, [pc, #232]	@ (8002658 <main+0x1028>)
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8002664 <main+0x1034>
 8002576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257e:	d400      	bmi.n	8002582 <main+0xf52>
				break;
 8002580:	e247      	b.n	8002a12 <main+0x13e2>
					Cal_Side = 2;
 8002582:	4a37      	ldr	r2, [pc, #220]	@ (8002660 <main+0x1030>)
 8002584:	2302      	movs	r3, #2
 8002586:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002588:	4a2f      	ldr	r2, [pc, #188]	@ (8002648 <main+0x1018>)
 800258a:	2302      	movs	r3, #2
 800258c:	7013      	strb	r3, [r2, #0]
				break;
 800258e:	e240      	b.n	8002a12 <main+0x13e2>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -15);
 8002590:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8002594:	2001      	movs	r0, #1
 8002596:	f002 f831 	bl	80045fc <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 800259a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800259e:	4832      	ldr	r0, [pc, #200]	@ (8002668 <main+0x1038>)
 80025a0:	f003 fb3a 	bl	8005c18 <HAL_GPIO_ReadPin>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d004      	beq.n	80025b4 <main+0xf84>
 80025aa:	4b28      	ldr	r3, [pc, #160]	@ (800264c <main+0x101c>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8211 	beq.w	80029d6 <main+0x13a6>
					Set_Motor(1, 0);
 80025b4:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 800266c <main+0x103c>
 80025b8:	2001      	movs	r0, #1
 80025ba:	f002 f81f 	bl	80045fc <Set_Motor>
					calib_timer = micros();
 80025be:	f001 fd6b 	bl	8004098 <micros>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4923      	ldr	r1, [pc, #140]	@ (8002654 <main+0x1024>)
 80025c8:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80025cc:	4a1f      	ldr	r2, [pc, #124]	@ (800264c <main+0x101c>)
 80025ce:	2300      	movs	r3, #0
 80025d0:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 80025d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002648 <main+0x1018>)
 80025d4:	2303      	movs	r3, #3
 80025d6:	7013      	strb	r3, [r2, #0]
				}
				break;
 80025d8:	e1fd      	b.n	80029d6 <main+0x13a6>
 80025da:	bf00      	nop
 80025dc:	200009ac 	.word	0x200009ac
 80025e0:	20000008 	.word	0x20000008
 80025e4:	2000000c 	.word	0x2000000c
 80025e8:	20000010 	.word	0x20000010
 80025ec:	200009fc 	.word	0x200009fc
 80025f0:	42c80000 	.word	0x42c80000
 80025f4:	c2c80000 	.word	0xc2c80000
 80025f8:	3c23d70a 	.word	0x3c23d70a
 80025fc:	200009bc 	.word	0x200009bc
 8002600:	20000930 	.word	0x20000930
 8002604:	200009a0 	.word	0x200009a0
 8002608:	200009b8 	.word	0x200009b8
 800260c:	20000014 	.word	0x20000014
 8002610:	20000018 	.word	0x20000018
 8002614:	20000a20 	.word	0x20000a20
 8002618:	20000a14 	.word	0x20000a14
 800261c:	200009c0 	.word	0x200009c0
 8002620:	200009b0 	.word	0x200009b0
 8002624:	2000001c 	.word	0x2000001c
 8002628:	20000020 	.word	0x20000020
 800262c:	20000024 	.word	0x20000024
 8002630:	20000a04 	.word	0x20000a04
 8002634:	3d0b4396 	.word	0x3d0b4396
 8002638:	3e4ccccd 	.word	0x3e4ccccd
 800263c:	200009d0 	.word	0x200009d0
 8002640:	000f4240 	.word	0x000f4240
 8002644:	200009c4 	.word	0x200009c4
 8002648:	20000a24 	.word	0x20000a24
 800264c:	200009c9 	.word	0x200009c9
 8002650:	200009ca 	.word	0x200009ca
 8002654:	20000a28 	.word	0x20000a28
 8002658:	200008a8 	.word	0x200008a8
 800265c:	42a00000 	.word	0x42a00000
 8002660:	20000a30 	.word	0x20000a30
 8002664:	c2a00000 	.word	0xc2a00000
 8002668:	48000400 	.word	0x48000400
 800266c:	00000000 	.word	0x00000000

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 8002670:	ed1f 0a02 	vldr	s0, [pc, #-8]	@ 800266c <main+0x103c>
 8002674:	2001      	movs	r0, #1
 8002676:	f001 ffc1 	bl	80045fc <Set_Motor>

				if (micros() - calib_timer > 100000) {
 800267a:	f001 fd0d 	bl	8004098 <micros>
 800267e:	4bc2      	ldr	r3, [pc, #776]	@ (8002988 <main+0x1358>)
 8002680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002684:	ebb0 0802 	subs.w	r8, r0, r2
 8002688:	eb61 0903 	sbc.w	r9, r1, r3
 800268c:	4bbf      	ldr	r3, [pc, #764]	@ (800298c <main+0x135c>)
 800268e:	4598      	cmp	r8, r3
 8002690:	f179 0300 	sbcs.w	r3, r9, #0
 8002694:	d311      	bcc.n	80026ba <main+0x108a>
					Set_Motor(1, 15);
 8002696:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800269a:	2001      	movs	r0, #1
 800269c:	f001 ffae 	bl	80045fc <Set_Motor>
					calib_timer = micros();
 80026a0:	f001 fcfa 	bl	8004098 <micros>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	49b7      	ldr	r1, [pc, #732]	@ (8002988 <main+0x1358>)
 80026aa:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80026ae:	4ab8      	ldr	r2, [pc, #736]	@ (8002990 <main+0x1360>)
 80026b0:	2300      	movs	r3, #0
 80026b2:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 80026b4:	4ab7      	ldr	r2, [pc, #732]	@ (8002994 <main+0x1364>)
 80026b6:	2304      	movs	r3, #4
 80026b8:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 15);
 80026ba:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 80026be:	2001      	movs	r0, #1
 80026c0:	f001 ff9c 	bl	80045fc <Set_Motor>

				if (micros() - calib_timer > 100000) {
 80026c4:	f001 fce8 	bl	8004098 <micros>
 80026c8:	4baf      	ldr	r3, [pc, #700]	@ (8002988 <main+0x1358>)
 80026ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ce:	ebb0 0a02 	subs.w	sl, r0, r2
 80026d2:	eb61 0b03 	sbc.w	fp, r1, r3
 80026d6:	4bad      	ldr	r3, [pc, #692]	@ (800298c <main+0x135c>)
 80026d8:	459a      	cmp	sl, r3
 80026da:	f17b 0300 	sbcs.w	r3, fp, #0
 80026de:	f0c0 817c 	bcc.w	80029da <main+0x13aa>
					Set_Motor(1, 0);
 80026e2:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 8002998 <main+0x1368>
 80026e6:	2001      	movs	r0, #1
 80026e8:	f001 ff88 	bl	80045fc <Set_Motor>
					calib_timer = micros();
 80026ec:	f001 fcd4 	bl	8004098 <micros>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	49a4      	ldr	r1, [pc, #656]	@ (8002988 <main+0x1358>)
 80026f6:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80026fa:	4aa5      	ldr	r2, [pc, #660]	@ (8002990 <main+0x1360>)
 80026fc:	2300      	movs	r3, #0
 80026fe:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 8002700:	4aa4      	ldr	r2, [pc, #656]	@ (8002994 <main+0x1364>)
 8002702:	2305      	movs	r3, #5
 8002704:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002706:	e168      	b.n	80029da <main+0x13aa>

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 8002708:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8002998 <main+0x1368>
 800270c:	2001      	movs	r0, #1
 800270e:	f001 ff75 	bl	80045fc <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002712:	f001 fcc1 	bl	8004098 <micros>
 8002716:	4b9c      	ldr	r3, [pc, #624]	@ (8002988 <main+0x1358>)
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	1a86      	subs	r6, r0, r2
 800271e:	653e      	str	r6, [r7, #80]	@ 0x50
 8002720:	eb61 0303 	sbc.w	r3, r1, r3
 8002724:	657b      	str	r3, [r7, #84]	@ 0x54
 8002726:	4b99      	ldr	r3, [pc, #612]	@ (800298c <main+0x135c>)
 8002728:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800272c:	4602      	mov	r2, r0
 800272e:	429a      	cmp	r2, r3
 8002730:	460b      	mov	r3, r1
 8002732:	f173 0300 	sbcs.w	r3, r3, #0
 8002736:	f0c0 8152 	bcc.w	80029de <main+0x13ae>
					Set_Motor(1, -5);
 800273a:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 800273e:	2001      	movs	r0, #1
 8002740:	f001 ff5c 	bl	80045fc <Set_Motor>
					calib_timer = micros();
 8002744:	f001 fca8 	bl	8004098 <micros>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	498e      	ldr	r1, [pc, #568]	@ (8002988 <main+0x1358>)
 800274e:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002752:	4a8f      	ldr	r2, [pc, #572]	@ (8002990 <main+0x1360>)
 8002754:	2300      	movs	r3, #0
 8002756:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 8002758:	4a8e      	ldr	r2, [pc, #568]	@ (8002994 <main+0x1364>)
 800275a:	2306      	movs	r3, #6
 800275c:	7013      	strb	r3, [r2, #0]
				}
				break;
 800275e:	e13e      	b.n	80029de <main+0x13ae>

			case CALIB_RETOUCH_P:
				Set_Motor(1, -5);
 8002760:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8002764:	2001      	movs	r0, #1
 8002766:	f001 ff49 	bl	80045fc <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 800276a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800276e:	488b      	ldr	r0, [pc, #556]	@ (800299c <main+0x136c>)
 8002770:	f003 fa52 	bl	8005c18 <HAL_GPIO_ReadPin>
 8002774:	4603      	mov	r3, r0
 8002776:	2b01      	cmp	r3, #1
 8002778:	d004      	beq.n	8002784 <main+0x1154>
 800277a:	4b85      	ldr	r3, [pc, #532]	@ (8002990 <main+0x1360>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 812f 	beq.w	80029e2 <main+0x13b2>
					Set_Motor(1, 0);
 8002784:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 8002998 <main+0x1368>
 8002788:	2001      	movs	r0, #1
 800278a:	f001 ff37 	bl	80045fc <Set_Motor>
					Reset_P();
 800278e:	f001 ffed 	bl	800476c <Reset_P>
					P_Limit = 0;
 8002792:	4a7f      	ldr	r2, [pc, #508]	@ (8002990 <main+0x1360>)
 8002794:	2300      	movs	r3, #0
 8002796:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 8002798:	4a7e      	ldr	r2, [pc, #504]	@ (8002994 <main+0x1364>)
 800279a:	2307      	movs	r3, #7
 800279c:	7013      	strb	r3, [r2, #0]
				}
				break;
 800279e:	e120      	b.n	80029e2 <main+0x13b2>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 80027a0:	4b7f      	ldr	r3, [pc, #508]	@ (80029a0 <main+0x1370>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <main+0x1184>
					Set_Motor(0, -30);
 80027a8:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 80027ac:	2000      	movs	r0, #0
 80027ae:	f001 ff25 	bl	80045fc <Set_Motor>
 80027b2:	e004      	b.n	80027be <main+0x118e>
				else
					Set_Motor(0, 30);
 80027b4:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 80027b8:	2000      	movs	r0, #0
 80027ba:	f001 ff1f 	bl	80045fc <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 80027be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027c2:	4876      	ldr	r0, [pc, #472]	@ (800299c <main+0x136c>)
 80027c4:	f003 fa28 	bl	8005c18 <HAL_GPIO_ReadPin>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d004      	beq.n	80027d8 <main+0x11a8>
 80027ce:	4b75      	ldr	r3, [pc, #468]	@ (80029a4 <main+0x1374>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8107 	beq.w	80029e6 <main+0x13b6>
					Set_Motor(0, 0);
 80027d8:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 8002998 <main+0x1368>
 80027dc:	2000      	movs	r0, #0
 80027de:	f001 ff0d 	bl	80045fc <Set_Motor>
					calib_timer = micros();
 80027e2:	f001 fc59 	bl	8004098 <micros>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4967      	ldr	r1, [pc, #412]	@ (8002988 <main+0x1358>)
 80027ec:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80027f0:	4a6c      	ldr	r2, [pc, #432]	@ (80029a4 <main+0x1374>)
 80027f2:	2300      	movs	r3, #0
 80027f4:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 80027f6:	4a67      	ldr	r2, [pc, #412]	@ (8002994 <main+0x1364>)
 80027f8:	2308      	movs	r3, #8
 80027fa:	7013      	strb	r3, [r2, #0]
				}
				break;
 80027fc:	e0f3      	b.n	80029e6 <main+0x13b6>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 80027fe:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 8002998 <main+0x1368>
 8002802:	2000      	movs	r0, #0
 8002804:	f001 fefa 	bl	80045fc <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002808:	f001 fc46 	bl	8004098 <micros>
 800280c:	4b5e      	ldr	r3, [pc, #376]	@ (8002988 <main+0x1358>)
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	1a86      	subs	r6, r0, r2
 8002814:	64be      	str	r6, [r7, #72]	@ 0x48
 8002816:	eb61 0303 	sbc.w	r3, r1, r3
 800281a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800281c:	4b5b      	ldr	r3, [pc, #364]	@ (800298c <main+0x135c>)
 800281e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002822:	4602      	mov	r2, r0
 8002824:	429a      	cmp	r2, r3
 8002826:	460b      	mov	r3, r1
 8002828:	f173 0300 	sbcs.w	r3, r3, #0
 800282c:	f0c0 80dd 	bcc.w	80029ea <main+0x13ba>
					if (Cal_Side == 1)
 8002830:	4b5b      	ldr	r3, [pc, #364]	@ (80029a0 <main+0x1370>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d105      	bne.n	8002844 <main+0x1214>
						Set_Motor(0, 30);
 8002838:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800283c:	2000      	movs	r0, #0
 800283e:	f001 fedd 	bl	80045fc <Set_Motor>
 8002842:	e004      	b.n	800284e <main+0x121e>
					else
						Set_Motor(0, -30);
 8002844:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002848:	2000      	movs	r0, #0
 800284a:	f001 fed7 	bl	80045fc <Set_Motor>
					calib_timer = micros();
 800284e:	f001 fc23 	bl	8004098 <micros>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	494c      	ldr	r1, [pc, #304]	@ (8002988 <main+0x1358>)
 8002858:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 800285c:	4a51      	ldr	r2, [pc, #324]	@ (80029a4 <main+0x1374>)
 800285e:	2300      	movs	r3, #0
 8002860:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 8002862:	4a4c      	ldr	r2, [pc, #304]	@ (8002994 <main+0x1364>)
 8002864:	2309      	movs	r3, #9
 8002866:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002868:	e0bf      	b.n	80029ea <main+0x13ba>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 800286a:	4b4d      	ldr	r3, [pc, #308]	@ (80029a0 <main+0x1370>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d105      	bne.n	800287e <main+0x124e>
					Set_Motor(0, 30);
 8002872:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002876:	2000      	movs	r0, #0
 8002878:	f001 fec0 	bl	80045fc <Set_Motor>
 800287c:	e004      	b.n	8002888 <main+0x1258>
				else
					Set_Motor(0, -30);
 800287e:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002882:	2000      	movs	r0, #0
 8002884:	f001 feba 	bl	80045fc <Set_Motor>

				if (micros() - calib_timer > 200000) {
 8002888:	f001 fc06 	bl	8004098 <micros>
 800288c:	4b3e      	ldr	r3, [pc, #248]	@ (8002988 <main+0x1358>)
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	1a86      	subs	r6, r0, r2
 8002894:	643e      	str	r6, [r7, #64]	@ 0x40
 8002896:	eb61 0303 	sbc.w	r3, r1, r3
 800289a:	647b      	str	r3, [r7, #68]	@ 0x44
 800289c:	4b42      	ldr	r3, [pc, #264]	@ (80029a8 <main+0x1378>)
 800289e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80028a2:	4602      	mov	r2, r0
 80028a4:	429a      	cmp	r2, r3
 80028a6:	460b      	mov	r3, r1
 80028a8:	f173 0300 	sbcs.w	r3, r3, #0
 80028ac:	f0c0 809f 	bcc.w	80029ee <main+0x13be>
					Set_Motor(0, 0);
 80028b0:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8002998 <main+0x1368>
 80028b4:	2000      	movs	r0, #0
 80028b6:	f001 fea1 	bl	80045fc <Set_Motor>
					calib_timer = micros();
 80028ba:	f001 fbed 	bl	8004098 <micros>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4931      	ldr	r1, [pc, #196]	@ (8002988 <main+0x1358>)
 80028c4:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80028c8:	4a36      	ldr	r2, [pc, #216]	@ (80029a4 <main+0x1374>)
 80028ca:	2300      	movs	r3, #0
 80028cc:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 80028ce:	4a31      	ldr	r2, [pc, #196]	@ (8002994 <main+0x1364>)
 80028d0:	230a      	movs	r3, #10
 80028d2:	7013      	strb	r3, [r2, #0]
				}
				break;
 80028d4:	e08b      	b.n	80029ee <main+0x13be>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 80028d6:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8002998 <main+0x1368>
 80028da:	2000      	movs	r0, #0
 80028dc:	f001 fe8e 	bl	80045fc <Set_Motor>
				Z_index_R = 0;
 80028e0:	4a32      	ldr	r2, [pc, #200]	@ (80029ac <main+0x137c>)
 80028e2:	2300      	movs	r3, #0
 80028e4:	7013      	strb	r3, [r2, #0]

				if (micros() - calib_timer > 100000) {
 80028e6:	f001 fbd7 	bl	8004098 <micros>
 80028ea:	4b27      	ldr	r3, [pc, #156]	@ (8002988 <main+0x1358>)
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	1a86      	subs	r6, r0, r2
 80028f2:	63be      	str	r6, [r7, #56]	@ 0x38
 80028f4:	eb61 0303 	sbc.w	r3, r1, r3
 80028f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028fa:	4b24      	ldr	r3, [pc, #144]	@ (800298c <main+0x135c>)
 80028fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002900:	4602      	mov	r2, r0
 8002902:	429a      	cmp	r2, r3
 8002904:	460b      	mov	r3, r1
 8002906:	f173 0300 	sbcs.w	r3, r3, #0
 800290a:	d372      	bcc.n	80029f2 <main+0x13c2>
					if (Cal_Side == 1)
 800290c:	4b24      	ldr	r3, [pc, #144]	@ (80029a0 <main+0x1370>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <main+0x12f0>
						Set_Motor(0, -25);
 8002914:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 8002918:	2000      	movs	r0, #0
 800291a:	f001 fe6f 	bl	80045fc <Set_Motor>
 800291e:	e004      	b.n	800292a <main+0x12fa>
					else
						Set_Motor(0, 25);
 8002920:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002924:	2000      	movs	r0, #0
 8002926:	f001 fe69 	bl	80045fc <Set_Motor>
					calib_timer = micros();
 800292a:	f001 fbb5 	bl	8004098 <micros>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4915      	ldr	r1, [pc, #84]	@ (8002988 <main+0x1358>)
 8002934:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002938:	4a1a      	ldr	r2, [pc, #104]	@ (80029a4 <main+0x1374>)
 800293a:	2300      	movs	r3, #0
 800293c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 800293e:	4a15      	ldr	r2, [pc, #84]	@ (8002994 <main+0x1364>)
 8002940:	230b      	movs	r3, #11
 8002942:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002944:	e055      	b.n	80029f2 <main+0x13c2>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 8002946:	4b16      	ldr	r3, [pc, #88]	@ (80029a0 <main+0x1370>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d105      	bne.n	800295a <main+0x132a>
					Set_Motor(0, -25);
 800294e:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 8002952:	2000      	movs	r0, #0
 8002954:	f001 fe52 	bl	80045fc <Set_Motor>
 8002958:	e004      	b.n	8002964 <main+0x1334>
				else
					Set_Motor(0, 25);
 800295a:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800295e:	2000      	movs	r0, #0
 8002960:	f001 fe4c 	bl	80045fc <Set_Motor>

//				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
				if (Z_index_R > 0) {
 8002964:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <main+0x137c>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d051      	beq.n	8002a10 <main+0x13e0>
					Set_Motor(0, 0);
 800296c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8002998 <main+0x1368>
 8002970:	2000      	movs	r0, #0
 8002972:	f001 fe43 	bl	80045fc <Set_Motor>
					Reset_R();
 8002976:	f001 fee9 	bl	800474c <Reset_R>
					R_Limit = 0;
 800297a:	4a0a      	ldr	r2, [pc, #40]	@ (80029a4 <main+0x1374>)
 800297c:	2300      	movs	r3, #0
 800297e:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 8002980:	4a04      	ldr	r2, [pc, #16]	@ (8002994 <main+0x1364>)
 8002982:	230c      	movs	r3, #12
 8002984:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002986:	e043      	b.n	8002a10 <main+0x13e0>
 8002988:	20000a28 	.word	0x20000a28
 800298c:	000186a1 	.word	0x000186a1
 8002990:	200009c9 	.word	0x200009c9
 8002994:	20000a24 	.word	0x20000a24
 8002998:	00000000 	.word	0x00000000
 800299c:	48000400 	.word	0x48000400
 80029a0:	20000a30 	.word	0x20000a30
 80029a4:	200009ca 	.word	0x200009ca
 80029a8:	00030d41 	.word	0x00030d41
 80029ac:	20000970 	.word	0x20000970

			case CALIB_DONE:
				Cal_Side = 0;
 80029b0:	4a11      	ldr	r2, [pc, #68]	@ (80029f8 <main+0x13c8>)
 80029b2:	2300      	movs	r3, #0
 80029b4:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 80029b6:	4a11      	ldr	r2, [pc, #68]	@ (80029fc <main+0x13cc>)
 80029b8:	2300      	movs	r3, #0
 80029ba:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 80029bc:	4a10      	ldr	r2, [pc, #64]	@ (8002a00 <main+0x13d0>)
 80029be:	2300      	movs	r3, #0
 80029c0:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 80029c2:	4a10      	ldr	r2, [pc, #64]	@ (8002a04 <main+0x13d4>)
 80029c4:	2300      	movs	r3, #0
 80029c6:	7013      	strb	r3, [r2, #0]
				REG16(REG_MOTION_STATUS) = 0;
 80029c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002a08 <main+0x13d8>)
 80029ca:	2300      	movs	r3, #0
 80029cc:	8413      	strh	r3, [r2, #32]
				calibState = CALIB_IDLE;
 80029ce:	4a0f      	ldr	r2, [pc, #60]	@ (8002a0c <main+0x13dc>)
 80029d0:	2300      	movs	r3, #0
 80029d2:	7013      	strb	r3, [r2, #0]
				break;
 80029d4:	e01d      	b.n	8002a12 <main+0x13e2>
				break;
 80029d6:	bf00      	nop
 80029d8:	e01b      	b.n	8002a12 <main+0x13e2>
				break;
 80029da:	bf00      	nop
 80029dc:	e019      	b.n	8002a12 <main+0x13e2>
				break;
 80029de:	bf00      	nop
 80029e0:	e017      	b.n	8002a12 <main+0x13e2>
				break;
 80029e2:	bf00      	nop
 80029e4:	e015      	b.n	8002a12 <main+0x13e2>
				break;
 80029e6:	bf00      	nop
 80029e8:	e013      	b.n	8002a12 <main+0x13e2>
				break;
 80029ea:	bf00      	nop
 80029ec:	e011      	b.n	8002a12 <main+0x13e2>
				break;
 80029ee:	bf00      	nop
 80029f0:	e00f      	b.n	8002a12 <main+0x13e2>
				break;
 80029f2:	bf00      	nop
 80029f4:	e00d      	b.n	8002a12 <main+0x13e2>
 80029f6:	bf00      	nop
 80029f8:	20000a30 	.word	0x20000a30
 80029fc:	200009c4 	.word	0x200009c4
 8002a00:	200009c9 	.word	0x200009c9
 8002a04:	200009ca 	.word	0x200009ca
 8002a08:	20000f1c 	.word	0x20000f1c
 8002a0c:	20000a24 	.word	0x20000a24
				break;
 8002a10:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 4) {
 8002a12:	4bcb      	ldr	r3, [pc, #812]	@ (8002d40 <main+0x1710>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	f040 827f 	bne.w	8002f1a <main+0x18ea>
			//TargetR = (atan2f(TargetX * -1, TargetY) + M_PI_2);
			//TargetP = sqrtf(TargetX * TargetX + TargetY * TargetY);

			TargetR = TargetR_Deg * M_PI / 180;
 8002a1c:	4bc9      	ldr	r3, [pc, #804]	@ (8002d44 <main+0x1714>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fd5d 	bl	80004e0 <__aeabi_f2d>
 8002a26:	a3c4      	add	r3, pc, #784	@ (adr r3, 8002d38 <main+0x1708>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f7fd fdb0 	bl	8000590 <__aeabi_dmul>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	4bc2      	ldr	r3, [pc, #776]	@ (8002d48 <main+0x1718>)
 8002a3e:	f7fd fed1 	bl	80007e4 <__aeabi_ddiv>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f7fe f85b 	bl	8000b04 <__aeabi_d2f>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4bbe      	ldr	r3, [pc, #760]	@ (8002d4c <main+0x171c>)
 8002a52:	601a      	str	r2, [r3, #0]
			R_Pos_Error = (TargetR - Revolute_QEIdata.RadPosition);
 8002a54:	4bbd      	ldr	r3, [pc, #756]	@ (8002d4c <main+0x171c>)
 8002a56:	ed93 7a00 	vldr	s14, [r3]
 8002a5a:	4bbd      	ldr	r3, [pc, #756]	@ (8002d50 <main+0x1720>)
 8002a5c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a64:	4bbb      	ldr	r3, [pc, #748]	@ (8002d54 <main+0x1724>)
 8002a66:	edc3 7a00 	vstr	s15, [r3]
			P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8002a6a:	4bbb      	ldr	r3, [pc, #748]	@ (8002d58 <main+0x1728>)
 8002a6c:	ed93 7a00 	vldr	s14, [r3]
 8002a70:	4bba      	ldr	r3, [pc, #744]	@ (8002d5c <main+0x172c>)
 8002a72:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7a:	4bb9      	ldr	r3, [pc, #740]	@ (8002d60 <main+0x1730>)
 8002a7c:	edc3 7a00 	vstr	s15, [r3]
			R_Pos_Error_Deg = R_Pos_Error * 180 / M_PI;
 8002a80:	4bb4      	ldr	r3, [pc, #720]	@ (8002d54 <main+0x1724>)
 8002a82:	edd3 7a00 	vldr	s15, [r3]
 8002a86:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 8002d64 <main+0x1734>
 8002a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a8e:	ee17 0a90 	vmov	r0, s15
 8002a92:	f7fd fd25 	bl	80004e0 <__aeabi_f2d>
 8002a96:	a3a8      	add	r3, pc, #672	@ (adr r3, 8002d38 <main+0x1708>)
 8002a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9c:	f7fd fea2 	bl	80007e4 <__aeabi_ddiv>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f7fe f82c 	bl	8000b04 <__aeabi_d2f>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4bae      	ldr	r3, [pc, #696]	@ (8002d68 <main+0x1738>)
 8002ab0:	601a      	str	r2, [r3, #0]
			//Call every 0.001 s
			static uint64_t timestampState2 = 0;
			static int loop_counter = 0;
			static float P_Target_Velocity = 0;
			static float R_Target_Velocity = 0;
			int64_t currentTimeState2 = micros();
 8002ab2:	f001 faf1 	bl	8004098 <micros>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
			if (currentTimeState2 > timestampState2) {
 8002abe:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8002ac2:	4baa      	ldr	r3, [pc, #680]	@ (8002d6c <main+0x173c>)
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	4282      	cmp	r2, r0
 8002aca:	418b      	sbcs	r3, r1
 8002acc:	f080 8225 	bcs.w	8002f1a <main+0x18ea>
				timestampState2 = currentTimeState2 + 1000; //us
 8002ad0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8002ad4:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8002ad8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ada:	f143 0300 	adc.w	r3, r3, #0
 8002ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ae0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002ae4:	4ba1      	ldr	r3, [pc, #644]	@ (8002d6c <main+0x173c>)
 8002ae6:	e9c3 0100 	strd	r0, r1, [r3]
				loop_counter++;
 8002aea:	4ba1      	ldr	r3, [pc, #644]	@ (8002d70 <main+0x1740>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	4b9f      	ldr	r3, [pc, #636]	@ (8002d70 <main+0x1740>)
 8002af2:	601a      	str	r2, [r3, #0]

				float r_target_diff = fabsf(TargetR - last_TargetR);
 8002af4:	4b95      	ldr	r3, [pc, #596]	@ (8002d4c <main+0x171c>)
 8002af6:	ed93 7a00 	vldr	s14, [r3]
 8002afa:	4b9e      	ldr	r3, [pc, #632]	@ (8002d74 <main+0x1744>)
 8002afc:	edd3 7a00 	vldr	s15, [r3]
 8002b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b04:	eef0 7ae7 	vabs.f32	s15, s15
 8002b08:	edc7 7a4b 	vstr	s15, [r7, #300]	@ 0x12c
				float p_target_diff = fabsf(TargetP - last_TargetP);
 8002b0c:	4b92      	ldr	r3, [pc, #584]	@ (8002d58 <main+0x1728>)
 8002b0e:	ed93 7a00 	vldr	s14, [r3]
 8002b12:	4b99      	ldr	r3, [pc, #612]	@ (8002d78 <main+0x1748>)
 8002b14:	edd3 7a00 	vldr	s15, [r3]
 8002b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b1c:	eef0 7ae7 	vabs.f32	s15, s15
 8002b20:	edc7 7a4a 	vstr	s15, [r7, #296]	@ 0x128

				if (r_target_diff > 0.001f) {
 8002b24:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 8002b28:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8002d7c <main+0x174c>
 8002b2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b34:	dd18      	ble.n	8002b68 <main+0x1538>
					float R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8002b36:	4b85      	ldr	r3, [pc, #532]	@ (8002d4c <main+0x171c>)
 8002b38:	ed93 7a00 	vldr	s14, [r3]
 8002b3c:	4b84      	ldr	r3, [pc, #528]	@ (8002d50 <main+0x1720>)
 8002b3e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b46:	edc7 7a49 	vstr	s15, [r7, #292]	@ 0x124
					Trapezoidal_Init(&revolute, R_Pos_Error, 1.40f, 9.0f);
 8002b4a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002b4e:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8002b52:	eddf 0a8b 	vldr	s1, [pc, #556]	@ 8002d80 <main+0x1750>
 8002b56:	ed97 0a49 	vldr	s0, [r7, #292]	@ 0x124
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fb5c 	bl	8001218 <Trapezoidal_Init>
					last_TargetR = TargetR;
 8002b60:	4b7a      	ldr	r3, [pc, #488]	@ (8002d4c <main+0x171c>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b83      	ldr	r3, [pc, #524]	@ (8002d74 <main+0x1744>)
 8002b66:	601a      	str	r2, [r3, #0]
				}

				if (p_target_diff > 0.01f) {
 8002b68:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 8002b6c:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002d84 <main+0x1754>
 8002b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b78:	dd18      	ble.n	8002bac <main+0x157c>
					float P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8002b7a:	4b77      	ldr	r3, [pc, #476]	@ (8002d58 <main+0x1728>)
 8002b7c:	ed93 7a00 	vldr	s14, [r3]
 8002b80:	4b76      	ldr	r3, [pc, #472]	@ (8002d5c <main+0x172c>)
 8002b82:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b8a:	edc7 7a48 	vstr	s15, [r7, #288]	@ 0x120
					Trapezoidal_Init(&prismatic, P_Pos_Error, 600.0f, 3000.0f);
 8002b8e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002b92:	ed9f 1a7d 	vldr	s2, [pc, #500]	@ 8002d88 <main+0x1758>
 8002b96:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 8002d8c <main+0x175c>
 8002b9a:	ed97 0a48 	vldr	s0, [r7, #288]	@ 0x120
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fb3a 	bl	8001218 <Trapezoidal_Init>
					last_TargetP = TargetP;
 8002ba4:	4b6c      	ldr	r3, [pc, #432]	@ (8002d58 <main+0x1728>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b73      	ldr	r3, [pc, #460]	@ (8002d78 <main+0x1748>)
 8002baa:	601a      	str	r2, [r3, #0]
				}

				// Update trajectory every 1ms
				Trapezoidal_Update(&revolute, 0.001);
 8002bac:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002bb0:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 8002d7c <main+0x174c>
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe fbf9 	bl	80013ac <Trapezoidal_Update>
				TargetRPos = revolute.current_position;
 8002bba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002bbe:	4b74      	ldr	r3, [pc, #464]	@ (8002d90 <main+0x1760>)
 8002bc0:	601a      	str	r2, [r3, #0]
				TargetRVel = revolute.current_velocity;
 8002bc2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8002bc6:	4b73      	ldr	r3, [pc, #460]	@ (8002d94 <main+0x1764>)
 8002bc8:	601a      	str	r2, [r3, #0]
				TargetRAcc = revolute.current_acceleration;
 8002bca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002bce:	4b72      	ldr	r3, [pc, #456]	@ (8002d98 <main+0x1768>)
 8002bd0:	601a      	str	r2, [r3, #0]

				Trapezoidal_Update(&prismatic, 0.001);
 8002bd2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002bd6:	ed9f 0a69 	vldr	s0, [pc, #420]	@ 8002d7c <main+0x174c>
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe fbe6 	bl	80013ac <Trapezoidal_Update>
				TargetPPos = prismatic.current_position;
 8002be0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002be4:	4b6d      	ldr	r3, [pc, #436]	@ (8002d9c <main+0x176c>)
 8002be6:	601a      	str	r2, [r3, #0]
				TargetPVel = prismatic.current_velocity;
 8002be8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002bec:	4b6c      	ldr	r3, [pc, #432]	@ (8002da0 <main+0x1770>)
 8002bee:	601a      	str	r2, [r3, #0]
				TargetPAcc = prismatic.current_acceleration;
 8002bf0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002bf4:	4b6b      	ldr	r3, [pc, #428]	@ (8002da4 <main+0x1774>)
 8002bf6:	601a      	str	r2, [r3, #0]

				// Outer position PID every 10ms
				if (loop_counter >= 10) {
 8002bf8:	4b5d      	ldr	r3, [pc, #372]	@ (8002d70 <main+0x1740>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b09      	cmp	r3, #9
 8002bfe:	dd62      	ble.n	8002cc6 <main+0x1696>
					loop_counter = 0;
 8002c00:	4a5b      	ldr	r2, [pc, #364]	@ (8002d70 <main+0x1740>)
 8002c02:	2300      	movs	r3, #0
 8002c04:	6013      	str	r3, [r2, #0]
					float R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8002c06:	4b51      	ldr	r3, [pc, #324]	@ (8002d4c <main+0x171c>)
 8002c08:	ed93 7a00 	vldr	s14, [r3]
 8002c0c:	4b50      	ldr	r3, [pc, #320]	@ (8002d50 <main+0x1720>)
 8002c0e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c16:	edc7 7a47 	vstr	s15, [r7, #284]	@ 0x11c
					float P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8002c1a:	4b4f      	ldr	r3, [pc, #316]	@ (8002d58 <main+0x1728>)
 8002c1c:	ed93 7a00 	vldr	s14, [r3]
 8002c20:	4b4e      	ldr	r3, [pc, #312]	@ (8002d5c <main+0x172c>)
 8002c22:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c2a:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118

					float R_Corrective_Vel = PID_Update(R_Pos_Error, R_kP_pos, R_kI_pos,
 8002c2e:	4b5e      	ldr	r3, [pc, #376]	@ (8002da8 <main+0x1778>)
 8002c30:	edd3 7a00 	vldr	s15, [r3]
 8002c34:	4b5d      	ldr	r3, [pc, #372]	@ (8002dac <main+0x177c>)
 8002c36:	ed93 7a00 	vldr	s14, [r3]
 8002c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002db0 <main+0x1780>)
 8002c3c:	edd3 6a00 	vldr	s13, [r3]
 8002c40:	485c      	ldr	r0, [pc, #368]	@ (8002db4 <main+0x1784>)
 8002c42:	ed9f 3a5d 	vldr	s6, [pc, #372]	@ 8002db8 <main+0x1788>
 8002c46:	eddf 2a5d 	vldr	s5, [pc, #372]	@ 8002dbc <main+0x178c>
 8002c4a:	ed9f 2a4e 	vldr	s4, [pc, #312]	@ 8002d84 <main+0x1754>
 8002c4e:	eef0 1a66 	vmov.f32	s3, s13
 8002c52:	eeb0 1a47 	vmov.f32	s2, s14
 8002c56:	eef0 0a67 	vmov.f32	s1, s15
 8002c5a:	ed97 0a47 	vldr	s0, [r7, #284]	@ 0x11c
 8002c5e:	f001 fa35 	bl	80040cc <PID_Update>
 8002c62:	ed87 0a45 	vstr	s0, [r7, #276]	@ 0x114
							R_kD_pos, 0.01f, -100.0f, 100.0f, &pid_r);
					float P_Corrective_Vel = PID_Update(P_Pos_Error, P_kP_pos, P_kI_pos,
 8002c66:	4b56      	ldr	r3, [pc, #344]	@ (8002dc0 <main+0x1790>)
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	4b55      	ldr	r3, [pc, #340]	@ (8002dc4 <main+0x1794>)
 8002c6e:	ed93 7a00 	vldr	s14, [r3]
 8002c72:	4b55      	ldr	r3, [pc, #340]	@ (8002dc8 <main+0x1798>)
 8002c74:	edd3 6a00 	vldr	s13, [r3]
 8002c78:	4854      	ldr	r0, [pc, #336]	@ (8002dcc <main+0x179c>)
 8002c7a:	ed9f 3a4f 	vldr	s6, [pc, #316]	@ 8002db8 <main+0x1788>
 8002c7e:	eddf 2a4f 	vldr	s5, [pc, #316]	@ 8002dbc <main+0x178c>
 8002c82:	ed9f 2a40 	vldr	s4, [pc, #256]	@ 8002d84 <main+0x1754>
 8002c86:	eef0 1a66 	vmov.f32	s3, s13
 8002c8a:	eeb0 1a47 	vmov.f32	s2, s14
 8002c8e:	eef0 0a67 	vmov.f32	s1, s15
 8002c92:	ed97 0a46 	vldr	s0, [r7, #280]	@ 0x118
 8002c96:	f001 fa19 	bl	80040cc <PID_Update>
 8002c9a:	ed87 0a44 	vstr	s0, [r7, #272]	@ 0x110
							P_kD_pos, 0.01f, -100.0f, 100.0f, &pid_p);

					R_Target_Velocity = TargetRVel + R_Corrective_Vel;
 8002c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d94 <main+0x1764>)
 8002ca0:	ed93 7a00 	vldr	s14, [r3]
 8002ca4:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8002ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cac:	4b48      	ldr	r3, [pc, #288]	@ (8002dd0 <main+0x17a0>)
 8002cae:	edc3 7a00 	vstr	s15, [r3]
					P_Target_Velocity = TargetPVel + P_Corrective_Vel;
 8002cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8002da0 <main+0x1770>)
 8002cb4:	ed93 7a00 	vldr	s14, [r3]
 8002cb8:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8002cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc0:	4b44      	ldr	r3, [pc, #272]	@ (8002dd4 <main+0x17a4>)
 8002cc2:	edc3 7a00 	vstr	s15, [r3]
				}

				// Inner velocity PID every 1ms
				R_Velo_Error = R_Target_Velocity - Revolute_QEIdata.Velocity_f;
 8002cc6:	4b42      	ldr	r3, [pc, #264]	@ (8002dd0 <main+0x17a0>)
 8002cc8:	ed93 7a00 	vldr	s14, [r3]
 8002ccc:	4b20      	ldr	r3, [pc, #128]	@ (8002d50 <main+0x1720>)
 8002cce:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd6:	4b40      	ldr	r3, [pc, #256]	@ (8002dd8 <main+0x17a8>)
 8002cd8:	edc3 7a00 	vstr	s15, [r3]
				R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel, R_kD_vel,
 8002cdc:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd8 <main+0x17a8>)
 8002cde:	edd3 7a00 	vldr	s15, [r3]
 8002ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8002ddc <main+0x17ac>)
 8002ce4:	ed93 7a00 	vldr	s14, [r3]
 8002ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8002de0 <main+0x17b0>)
 8002cea:	edd3 6a00 	vldr	s13, [r3]
 8002cee:	4b3d      	ldr	r3, [pc, #244]	@ (8002de4 <main+0x17b4>)
 8002cf0:	ed93 6a00 	vldr	s12, [r3]
 8002cf4:	483c      	ldr	r0, [pc, #240]	@ (8002de8 <main+0x17b8>)
 8002cf6:	ed9f 3a30 	vldr	s6, [pc, #192]	@ 8002db8 <main+0x1788>
 8002cfa:	eddf 2a30 	vldr	s5, [pc, #192]	@ 8002dbc <main+0x178c>
 8002cfe:	ed9f 2a1f 	vldr	s4, [pc, #124]	@ 8002d7c <main+0x174c>
 8002d02:	eef0 1a46 	vmov.f32	s3, s12
 8002d06:	eeb0 1a66 	vmov.f32	s2, s13
 8002d0a:	eef0 0a47 	vmov.f32	s1, s14
 8002d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d12:	f001 f9db 	bl	80040cc <PID_Update>
 8002d16:	eef0 7a40 	vmov.f32	s15, s0
 8002d1a:	4b34      	ldr	r3, [pc, #208]	@ (8002dec <main+0x17bc>)
 8002d1c:	edc3 7a00 	vstr	s15, [r3]
						0.001f, -100.0f, 100.0f, &pid_r_v);

				P_Velo_Error = P_Target_Velocity - Prismatic_QEIdata.Velocity_f;
 8002d20:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd4 <main+0x17a4>)
 8002d22:	ed93 7a00 	vldr	s14, [r3]
 8002d26:	4b0d      	ldr	r3, [pc, #52]	@ (8002d5c <main+0x172c>)
 8002d28:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d30:	4b2f      	ldr	r3, [pc, #188]	@ (8002df0 <main+0x17c0>)
 8002d32:	edc3 7a00 	vstr	s15, [r3]
 8002d36:	e05d      	b.n	8002df4 <main+0x17c4>
 8002d38:	54442d18 	.word	0x54442d18
 8002d3c:	400921fb 	.word	0x400921fb
 8002d40:	200009c4 	.word	0x200009c4
 8002d44:	200008a0 	.word	0x200008a0
 8002d48:	40668000 	.word	0x40668000
 8002d4c:	2000098c 	.word	0x2000098c
 8002d50:	200008f0 	.word	0x200008f0
 8002d54:	200009ac 	.word	0x200009ac
 8002d58:	20000990 	.word	0x20000990
 8002d5c:	20000930 	.word	0x20000930
 8002d60:	200009b0 	.word	0x200009b0
 8002d64:	43340000 	.word	0x43340000
 8002d68:	200008a4 	.word	0x200008a4
 8002d6c:	200010e0 	.word	0x200010e0
 8002d70:	200010e8 	.word	0x200010e8
 8002d74:	200010ac 	.word	0x200010ac
 8002d78:	200010b0 	.word	0x200010b0
 8002d7c:	3a83126f 	.word	0x3a83126f
 8002d80:	3fb33333 	.word	0x3fb33333
 8002d84:	3c23d70a 	.word	0x3c23d70a
 8002d88:	453b8000 	.word	0x453b8000
 8002d8c:	44160000 	.word	0x44160000
 8002d90:	20000994 	.word	0x20000994
 8002d94:	2000099c 	.word	0x2000099c
 8002d98:	200009a4 	.word	0x200009a4
 8002d9c:	20000998 	.word	0x20000998
 8002da0:	200009a0 	.word	0x200009a0
 8002da4:	200009a8 	.word	0x200009a8
 8002da8:	20000008 	.word	0x20000008
 8002dac:	2000000c 	.word	0x2000000c
 8002db0:	20000010 	.word	0x20000010
 8002db4:	200009fc 	.word	0x200009fc
 8002db8:	42c80000 	.word	0x42c80000
 8002dbc:	c2c80000 	.word	0xc2c80000
 8002dc0:	2000001c 	.word	0x2000001c
 8002dc4:	20000020 	.word	0x20000020
 8002dc8:	20000024 	.word	0x20000024
 8002dcc:	20000a04 	.word	0x20000a04
 8002dd0:	200010ec 	.word	0x200010ec
 8002dd4:	200010f0 	.word	0x200010f0
 8002dd8:	200009b4 	.word	0x200009b4
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	20000004 	.word	0x20000004
 8002de4:	20000a1c 	.word	0x20000a1c
 8002de8:	20000a0c 	.word	0x20000a0c
 8002dec:	200009bc 	.word	0x200009bc
 8002df0:	200009b8 	.word	0x200009b8
				P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel, P_kD_vel,
 8002df4:	4b87      	ldr	r3, [pc, #540]	@ (8003014 <main+0x19e4>)
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	4b87      	ldr	r3, [pc, #540]	@ (8003018 <main+0x19e8>)
 8002dfc:	ed93 7a00 	vldr	s14, [r3]
 8002e00:	4b86      	ldr	r3, [pc, #536]	@ (800301c <main+0x19ec>)
 8002e02:	edd3 6a00 	vldr	s13, [r3]
 8002e06:	4b86      	ldr	r3, [pc, #536]	@ (8003020 <main+0x19f0>)
 8002e08:	ed93 6a00 	vldr	s12, [r3]
 8002e0c:	4885      	ldr	r0, [pc, #532]	@ (8003024 <main+0x19f4>)
 8002e0e:	ed9f 3a86 	vldr	s6, [pc, #536]	@ 8003028 <main+0x19f8>
 8002e12:	eddf 2a86 	vldr	s5, [pc, #536]	@ 800302c <main+0x19fc>
 8002e16:	ed9f 2a86 	vldr	s4, [pc, #536]	@ 8003030 <main+0x1a00>
 8002e1a:	eef0 1a46 	vmov.f32	s3, s12
 8002e1e:	eeb0 1a66 	vmov.f32	s2, s13
 8002e22:	eef0 0a47 	vmov.f32	s1, s14
 8002e26:	eeb0 0a67 	vmov.f32	s0, s15
 8002e2a:	f001 f94f 	bl	80040cc <PID_Update>
 8002e2e:	eef0 7a40 	vmov.f32	s15, s0
 8002e32:	4b80      	ldr	r3, [pc, #512]	@ (8003034 <main+0x1a04>)
 8002e34:	edc3 7a00 	vstr	s15, [r3]
						0.001f, -100.0f, 100.0f, &pid_p_v);

				Workspace_limit();
 8002e38:	f001 fcaa 	bl	8004790 <Workspace_limit>
				Set_Motor(0, R_PWM);
 8002e3c:	4b7e      	ldr	r3, [pc, #504]	@ (8003038 <main+0x1a08>)
 8002e3e:	edd3 7a00 	vldr	s15, [r3]
 8002e42:	eeb0 0a67 	vmov.f32	s0, s15
 8002e46:	2000      	movs	r0, #0
 8002e48:	f001 fbd8 	bl	80045fc <Set_Motor>
				Set_Motor(1, P_PWM);
 8002e4c:	4b79      	ldr	r3, [pc, #484]	@ (8003034 <main+0x1a04>)
 8002e4e:	edd3 7a00 	vldr	s15, [r3]
 8002e52:	eeb0 0a67 	vmov.f32	s0, s15
 8002e56:	2001      	movs	r0, #1
 8002e58:	f001 fbd0 	bl	80045fc <Set_Motor>

				if (fabsf(TargetR - Revolute_QEIdata.RadPosition) < R_ERR_TOL_RAD &&
 8002e5c:	4b77      	ldr	r3, [pc, #476]	@ (800303c <main+0x1a0c>)
 8002e5e:	ed93 7a00 	vldr	s14, [r3]
 8002e62:	4b77      	ldr	r3, [pc, #476]	@ (8003040 <main+0x1a10>)
 8002e64:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6c:	eef0 7ae7 	vabs.f32	s15, s15
 8002e70:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8003044 <main+0x1a14>
 8002e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7c:	d544      	bpl.n	8002f08 <main+0x18d8>
					fabsf(TargetP - Prismatic_QEIdata.mmPosition) < P_ERR_TOL_MM) {
 8002e7e:	4b72      	ldr	r3, [pc, #456]	@ (8003048 <main+0x1a18>)
 8002e80:	ed93 7a00 	vldr	s14, [r3]
 8002e84:	4b71      	ldr	r3, [pc, #452]	@ (800304c <main+0x1a1c>)
 8002e86:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e8e:	eef0 7ae7 	vabs.f32	s15, s15
				if (fabsf(TargetR - Revolute_QEIdata.RadPosition) < R_ERR_TOL_RAD &&
 8002e92:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8003050 <main+0x1a20>
 8002e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9e:	d533      	bpl.n	8002f08 <main+0x18d8>
					if (lock_timer_us == 0)
 8002ea0:	4b6c      	ldr	r3, [pc, #432]	@ (8003054 <main+0x1a24>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	d107      	bne.n	8002eba <main+0x188a>
						lock_timer_us = micros();
 8002eaa:	f001 f8f5 	bl	8004098 <micros>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4968      	ldr	r1, [pc, #416]	@ (8003054 <main+0x1a24>)
 8002eb4:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 8002eb8:	e02e      	b.n	8002f18 <main+0x18e8>
					else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8002eba:	f001 f8ed 	bl	8004098 <micros>
 8002ebe:	4b65      	ldr	r3, [pc, #404]	@ (8003054 <main+0x1a24>)
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	1a86      	subs	r6, r0, r2
 8002ec6:	62be      	str	r6, [r7, #40]	@ 0x28
 8002ec8:	eb61 0303 	sbc.w	r3, r1, r3
 8002ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ece:	4b62      	ldr	r3, [pc, #392]	@ (8003058 <main+0x1a28>)
 8002ed0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	460b      	mov	r3, r1
 8002eda:	f173 0300 	sbcs.w	r3, r3, #0
 8002ede:	d31b      	bcc.n	8002f18 <main+0x18e8>
						Set_Servo(1);
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f001 fc09 	bl	80046f8 <Set_Servo>
						Set_Motor(0, 0);
 8002ee6:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 800305c <main+0x1a2c>
 8002eea:	2000      	movs	r0, #0
 8002eec:	f001 fb86 	bl	80045fc <Set_Motor>
						Set_Motor(1, 0);
 8002ef0:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 800305c <main+0x1a2c>
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	f001 fb81 	bl	80045fc <Set_Motor>
						revolute.finished = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
						prismatic.finished = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
					if (lock_timer_us == 0)
 8002f06:	e007      	b.n	8002f18 <main+0x18e8>
					}
				} else {
					lock_timer_us = 0;
 8002f08:	4952      	ldr	r1, [pc, #328]	@ (8003054 <main+0x1a24>)
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9c1 2300 	strd	r2, r3, [r1]
 8002f16:	e000      	b.n	8002f1a <main+0x18ea>
					if (lock_timer_us == 0)
 8002f18:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 5) {
 8002f1a:	4b51      	ldr	r3, [pc, #324]	@ (8003060 <main+0x1a30>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b05      	cmp	r3, #5
 8002f20:	d111      	bne.n	8002f46 <main+0x1916>

			Workspace_limit();
 8002f22:	f001 fc35 	bl	8004790 <Workspace_limit>
			Set_Motor(0, R_PWM);
 8002f26:	4b44      	ldr	r3, [pc, #272]	@ (8003038 <main+0x1a08>)
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f30:	2000      	movs	r0, #0
 8002f32:	f001 fb63 	bl	80045fc <Set_Motor>
			Set_Motor(1, P_PWM);
 8002f36:	4b3f      	ldr	r3, [pc, #252]	@ (8003034 <main+0x1a04>)
 8002f38:	edd3 7a00 	vldr	s15, [r3]
 8002f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f40:	2001      	movs	r0, #1
 8002f42:	f001 fb5b 	bl	80045fc <Set_Motor>

		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 7) {
 8002f46:	4b46      	ldr	r3, [pc, #280]	@ (8003060 <main+0x1a30>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b07      	cmp	r3, #7
 8002f4c:	d11c      	bne.n	8002f88 <main+0x1958>
			Set_Motor(0, 5);
 8002f4e:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8002f52:	2000      	movs	r0, #0
 8002f54:	f001 fb52 	bl	80045fc <Set_Motor>
			if (Z_index_R > 0) {
 8002f58:	4b42      	ldr	r3, [pc, #264]	@ (8003064 <main+0x1a34>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00e      	beq.n	8002f7e <main+0x194e>
				Set_Motor(0, 0);
 8002f60:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800305c <main+0x1a2c>
 8002f64:	2000      	movs	r0, #0
 8002f66:	f001 fb49 	bl	80045fc <Set_Motor>
				Reset_R();
 8002f6a:	f001 fbef 	bl	800474c <Reset_R>
				TargetR = Revolute_QEIdata.RadPosition;
 8002f6e:	4b34      	ldr	r3, [pc, #208]	@ (8003040 <main+0x1a10>)
 8002f70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f72:	4b32      	ldr	r3, [pc, #200]	@ (800303c <main+0x1a0c>)
 8002f74:	601a      	str	r2, [r3, #0]
				Mode = 0;
 8002f76:	4a3a      	ldr	r2, [pc, #232]	@ (8003060 <main+0x1a30>)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	7013      	strb	r3, [r2, #0]
 8002f7c:	e004      	b.n	8002f88 <main+0x1958>
			} else {
				Set_Motor(0, 25);
 8002f7e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002f82:	2000      	movs	r0, #0
 8002f84:	f001 fb3a 	bl	80045fc <Set_Motor>
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 8) {
 8002f88:	4b35      	ldr	r3, [pc, #212]	@ (8003060 <main+0x1a30>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	f47e abcb 	bne.w	8001728 <main+0xf8>
			static uint64_t pen_delay_timer;
			if (loop_counter == 1 && micros() - pen_delay_timer < 300000) {
 8002f92:	4b35      	ldr	r3, [pc, #212]	@ (8003068 <main+0x1a38>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d120      	bne.n	8002fdc <main+0x19ac>
 8002f9a:	f001 f87d 	bl	8004098 <micros>
 8002f9e:	4b33      	ldr	r3, [pc, #204]	@ (800306c <main+0x1a3c>)
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	1a86      	subs	r6, r0, r2
 8002fa6:	623e      	str	r6, [r7, #32]
 8002fa8:	eb61 0303 	sbc.w	r3, r1, r3
 8002fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fae:	4b30      	ldr	r3, [pc, #192]	@ (8003070 <main+0x1a40>)
 8002fb0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	460b      	mov	r3, r1
 8002fba:	f173 0300 	sbcs.w	r3, r3, #0
 8002fbe:	d20d      	bcs.n	8002fdc <main+0x19ac>
				Set_Motor(0, 0);
 8002fc0:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 800305c <main+0x1a2c>
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f001 fb19 	bl	80045fc <Set_Motor>
				Set_Motor(1, 0);
 8002fca:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 800305c <main+0x1a2c>
 8002fce:	2001      	movs	r0, #1
 8002fd0:	f001 fb14 	bl	80045fc <Set_Motor>
				Set_Servo(1);
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f001 fb8f 	bl	80046f8 <Set_Servo>
 8002fda:	e19d      	b.n	8003318 <main+0x1ce8>
			} else if (loop_counter == 1
 8002fdc:	4b22      	ldr	r3, [pc, #136]	@ (8003068 <main+0x1a38>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d149      	bne.n	8003078 <main+0x1a48>
					&& micros() - pen_delay_timer < 500000) {
 8002fe4:	f001 f858 	bl	8004098 <micros>
 8002fe8:	4b20      	ldr	r3, [pc, #128]	@ (800306c <main+0x1a3c>)
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	1a86      	subs	r6, r0, r2
 8002ff0:	61be      	str	r6, [r7, #24]
 8002ff2:	eb61 0303 	sbc.w	r3, r1, r3
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8003074 <main+0x1a44>)
 8002ffa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ffe:	4602      	mov	r2, r0
 8003000:	429a      	cmp	r2, r3
 8003002:	460b      	mov	r3, r1
 8003004:	f173 0300 	sbcs.w	r3, r3, #0
 8003008:	d236      	bcs.n	8003078 <main+0x1a48>
				Set_Servo(0);
 800300a:	2000      	movs	r0, #0
 800300c:	f001 fb74 	bl	80046f8 <Set_Servo>
 8003010:	e182      	b.n	8003318 <main+0x1ce8>
 8003012:	bf00      	nop
 8003014:	200009b8 	.word	0x200009b8
 8003018:	20000014 	.word	0x20000014
 800301c:	20000018 	.word	0x20000018
 8003020:	20000a20 	.word	0x20000a20
 8003024:	20000a14 	.word	0x20000a14
 8003028:	42c80000 	.word	0x42c80000
 800302c:	c2c80000 	.word	0xc2c80000
 8003030:	3a83126f 	.word	0x3a83126f
 8003034:	200009c0 	.word	0x200009c0
 8003038:	200009bc 	.word	0x200009bc
 800303c:	2000098c 	.word	0x2000098c
 8003040:	200008f0 	.word	0x200008f0
 8003044:	3d0b4396 	.word	0x3d0b4396
 8003048:	20000990 	.word	0x20000990
 800304c:	20000930 	.word	0x20000930
 8003050:	3e4ccccd 	.word	0x3e4ccccd
 8003054:	200009d0 	.word	0x200009d0
 8003058:	000f4240 	.word	0x000f4240
 800305c:	00000000 	.word	0x00000000
 8003060:	200009c4 	.word	0x200009c4
 8003064:	20000970 	.word	0x20000970
 8003068:	20000a40 	.word	0x20000a40
 800306c:	200010f8 	.word	0x200010f8
 8003070:	000493e0 	.word	0x000493e0
 8003074:	0007a120 	.word	0x0007a120
			} else if (loop_counter < 100) {
 8003078:	4ba8      	ldr	r3, [pc, #672]	@ (800331c <main+0x1cec>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b63      	cmp	r3, #99	@ 0x63
 800307e:	f300 8120 	bgt.w	80032c2 <main+0x1c92>
				static uint16_t loop_temp = 0;
				Set_Servo(0);
 8003082:	2000      	movs	r0, #0
 8003084:	f001 fb38 	bl	80046f8 <Set_Servo>

				R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8003088:	4ba5      	ldr	r3, [pc, #660]	@ (8003320 <main+0x1cf0>)
 800308a:	ed93 7a00 	vldr	s14, [r3]
 800308e:	4ba5      	ldr	r3, [pc, #660]	@ (8003324 <main+0x1cf4>)
 8003090:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003098:	4ba3      	ldr	r3, [pc, #652]	@ (8003328 <main+0x1cf8>)
 800309a:	edc3 7a00 	vstr	s15, [r3]
				P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 800309e:	4ba3      	ldr	r3, [pc, #652]	@ (800332c <main+0x1cfc>)
 80030a0:	ed93 7a00 	vldr	s14, [r3]
 80030a4:	4ba2      	ldr	r3, [pc, #648]	@ (8003330 <main+0x1d00>)
 80030a6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80030aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ae:	4ba1      	ldr	r3, [pc, #644]	@ (8003334 <main+0x1d04>)
 80030b0:	edc3 7a00 	vstr	s15, [r3]

				static uint64_t timestampState8 = 0;
				int64_t currentTimeState8 = micros();
 80030b4:	f000 fff0 	bl	8004098 <micros>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
				if (currentTimeState8 > timestampState8) {
 80030c0:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 80030c4:	4b9c      	ldr	r3, [pc, #624]	@ (8003338 <main+0x1d08>)
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	4282      	cmp	r2, r0
 80030cc:	418b      	sbcs	r3, r1
 80030ce:	d251      	bcs.n	8003174 <main+0x1b44>
					timestampState8 = currentTimeState8 + 10000;		//us
 80030d0:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80030d4:	f242 7110 	movw	r1, #10000	@ 0x2710
 80030d8:	1851      	adds	r1, r2, r1
 80030da:	6139      	str	r1, [r7, #16]
 80030dc:	f143 0300 	adc.w	r3, r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030e6:	4b94      	ldr	r3, [pc, #592]	@ (8003338 <main+0x1d08>)
 80030e8:	e9c3 0100 	strd	r0, r1, [r3]
					R_PWM = PID_Update(R_Pos_Error, R_kP_pos, R_kI_pos,
 80030ec:	4b8e      	ldr	r3, [pc, #568]	@ (8003328 <main+0x1cf8>)
 80030ee:	edd3 7a00 	vldr	s15, [r3]
 80030f2:	4b92      	ldr	r3, [pc, #584]	@ (800333c <main+0x1d0c>)
 80030f4:	ed93 7a00 	vldr	s14, [r3]
 80030f8:	4b91      	ldr	r3, [pc, #580]	@ (8003340 <main+0x1d10>)
 80030fa:	edd3 6a00 	vldr	s13, [r3]
 80030fe:	4b91      	ldr	r3, [pc, #580]	@ (8003344 <main+0x1d14>)
 8003100:	ed93 6a00 	vldr	s12, [r3]
 8003104:	4890      	ldr	r0, [pc, #576]	@ (8003348 <main+0x1d18>)
 8003106:	ed9f 3a91 	vldr	s6, [pc, #580]	@ 800334c <main+0x1d1c>
 800310a:	eddf 2a91 	vldr	s5, [pc, #580]	@ 8003350 <main+0x1d20>
 800310e:	ed9f 2a91 	vldr	s4, [pc, #580]	@ 8003354 <main+0x1d24>
 8003112:	eef0 1a46 	vmov.f32	s3, s12
 8003116:	eeb0 1a66 	vmov.f32	s2, s13
 800311a:	eef0 0a47 	vmov.f32	s1, s14
 800311e:	eeb0 0a67 	vmov.f32	s0, s15
 8003122:	f000 ffd3 	bl	80040cc <PID_Update>
 8003126:	eef0 7a40 	vmov.f32	s15, s0
 800312a:	4b8b      	ldr	r3, [pc, #556]	@ (8003358 <main+0x1d28>)
 800312c:	edc3 7a00 	vstr	s15, [r3]
							R_kD_pos, 0.01f, -100.0f, 100.0f, &pid_r);
					P_PWM = PID_Update(P_Pos_Error, P_kP_pos, P_kI_pos,
 8003130:	4b80      	ldr	r3, [pc, #512]	@ (8003334 <main+0x1d04>)
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	4b89      	ldr	r3, [pc, #548]	@ (800335c <main+0x1d2c>)
 8003138:	ed93 7a00 	vldr	s14, [r3]
 800313c:	4b88      	ldr	r3, [pc, #544]	@ (8003360 <main+0x1d30>)
 800313e:	edd3 6a00 	vldr	s13, [r3]
 8003142:	4b88      	ldr	r3, [pc, #544]	@ (8003364 <main+0x1d34>)
 8003144:	ed93 6a00 	vldr	s12, [r3]
 8003148:	4887      	ldr	r0, [pc, #540]	@ (8003368 <main+0x1d38>)
 800314a:	ed9f 3a80 	vldr	s6, [pc, #512]	@ 800334c <main+0x1d1c>
 800314e:	eddf 2a80 	vldr	s5, [pc, #512]	@ 8003350 <main+0x1d20>
 8003152:	ed9f 2a80 	vldr	s4, [pc, #512]	@ 8003354 <main+0x1d24>
 8003156:	eef0 1a46 	vmov.f32	s3, s12
 800315a:	eeb0 1a66 	vmov.f32	s2, s13
 800315e:	eef0 0a47 	vmov.f32	s1, s14
 8003162:	eeb0 0a67 	vmov.f32	s0, s15
 8003166:	f000 ffb1 	bl	80040cc <PID_Update>
 800316a:	eef0 7a40 	vmov.f32	s15, s0
 800316e:	4b7f      	ldr	r3, [pc, #508]	@ (800336c <main+0x1d3c>)
 8003170:	edc3 7a00 	vstr	s15, [r3]
							P_kD_pos, 0.01f, -100.0f, 100.0f, &pid_p);
				}

				Workspace_limit();
 8003174:	f001 fb0c 	bl	8004790 <Workspace_limit>

				Set_Motor(0, R_PWM);
 8003178:	4b77      	ldr	r3, [pc, #476]	@ (8003358 <main+0x1d28>)
 800317a:	edd3 7a00 	vldr	s15, [r3]
 800317e:	eeb0 0a67 	vmov.f32	s0, s15
 8003182:	2000      	movs	r0, #0
 8003184:	f001 fa3a 	bl	80045fc <Set_Motor>
				Set_Motor(1, P_PWM);
 8003188:	4b78      	ldr	r3, [pc, #480]	@ (800336c <main+0x1d3c>)
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	eeb0 0a67 	vmov.f32	s0, s15
 8003192:	2001      	movs	r0, #1
 8003194:	f001 fa32 	bl	80045fc <Set_Motor>
				if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 8003198:	4b63      	ldr	r3, [pc, #396]	@ (8003328 <main+0x1cf8>)
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	eef0 7ae7 	vabs.f32	s15, s15
 80031a2:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8003370 <main+0x1d40>
 80031a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ae:	d57f      	bpl.n	80032b0 <main+0x1c80>
						&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 80031b0:	4b60      	ldr	r3, [pc, #384]	@ (8003334 <main+0x1d04>)
 80031b2:	edd3 7a00 	vldr	s15, [r3]
 80031b6:	eef0 7ae7 	vabs.f32	s15, s15
 80031ba:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8003374 <main+0x1d44>
 80031be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c6:	d573      	bpl.n	80032b0 <main+0x1c80>
					/* within window —— start or continue timer */
					if (lock_timer_us == 0)
 80031c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003378 <main+0x1d48>)
 80031ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	d107      	bne.n	80031e2 <main+0x1bb2>
						lock_timer_us = micros(); /* start timing */
 80031d2:	f000 ff61 	bl	8004098 <micros>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4967      	ldr	r1, [pc, #412]	@ (8003378 <main+0x1d48>)
 80031dc:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 80031e0:	e099      	b.n	8003316 <main+0x1ce6>

					else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 80031e2:	f000 ff59 	bl	8004098 <micros>
 80031e6:	4b64      	ldr	r3, [pc, #400]	@ (8003378 <main+0x1d48>)
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	1a86      	subs	r6, r0, r2
 80031ee:	60be      	str	r6, [r7, #8]
 80031f0:	eb61 0303 	sbc.w	r3, r1, r3
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	4b61      	ldr	r3, [pc, #388]	@ (800337c <main+0x1d4c>)
 80031f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031fc:	4602      	mov	r2, r0
 80031fe:	429a      	cmp	r2, r3
 8003200:	460b      	mov	r3, r1
 8003202:	f173 0300 	sbcs.w	r3, r3, #0
 8003206:	f0c0 8086 	bcc.w	8003316 <main+0x1ce6>
						if (loop_temp == 0) {
 800320a:	4b5d      	ldr	r3, [pc, #372]	@ (8003380 <main+0x1d50>)
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d119      	bne.n	8003246 <main+0x1c16>
							pid_r.integ = 0;
 8003212:	4a4d      	ldr	r2, [pc, #308]	@ (8003348 <main+0x1d18>)
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 800321a:	4a4b      	ldr	r2, [pc, #300]	@ (8003348 <main+0x1d18>)
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 8003222:	4a51      	ldr	r2, [pc, #324]	@ (8003368 <main+0x1d38>)
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 800322a:	4a4f      	ldr	r2, [pc, #316]	@ (8003368 <main+0x1d38>)
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	6053      	str	r3, [r2, #4]
							TargetR = -1.0472;
 8003232:	4a3b      	ldr	r2, [pc, #236]	@ (8003320 <main+0x1cf0>)
 8003234:	4b53      	ldr	r3, [pc, #332]	@ (8003384 <main+0x1d54>)
 8003236:	6013      	str	r3, [r2, #0]
							TargetP = 250;
 8003238:	4a3c      	ldr	r2, [pc, #240]	@ (800332c <main+0x1cfc>)
 800323a:	4b53      	ldr	r3, [pc, #332]	@ (8003388 <main+0x1d58>)
 800323c:	6013      	str	r3, [r2, #0]
							loop_temp = 1;
 800323e:	4a50      	ldr	r2, [pc, #320]	@ (8003380 <main+0x1d50>)
 8003240:	2301      	movs	r3, #1
 8003242:	8013      	strh	r3, [r2, #0]
					if (lock_timer_us == 0)
 8003244:	e067      	b.n	8003316 <main+0x1ce6>
						} else {
							pid_r.integ = 0;
 8003246:	4a40      	ldr	r2, [pc, #256]	@ (8003348 <main+0x1d18>)
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 800324e:	4a3e      	ldr	r2, [pc, #248]	@ (8003348 <main+0x1d18>)
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 8003256:	4a44      	ldr	r2, [pc, #272]	@ (8003368 <main+0x1d38>)
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 800325e:	4a42      	ldr	r2, [pc, #264]	@ (8003368 <main+0x1d38>)
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	6053      	str	r3, [r2, #4]
							TargetR = 4.18879;
 8003266:	4a2e      	ldr	r2, [pc, #184]	@ (8003320 <main+0x1cf0>)
 8003268:	4b48      	ldr	r3, [pc, #288]	@ (800338c <main+0x1d5c>)
 800326a:	6013      	str	r3, [r2, #0]
							TargetP = 50;
 800326c:	4a2f      	ldr	r2, [pc, #188]	@ (800332c <main+0x1cfc>)
 800326e:	4b48      	ldr	r3, [pc, #288]	@ (8003390 <main+0x1d60>)
 8003270:	6013      	str	r3, [r2, #0]
							loop_temp = 0;
 8003272:	4a43      	ldr	r2, [pc, #268]	@ (8003380 <main+0x1d50>)
 8003274:	2300      	movs	r3, #0
 8003276:	8013      	strh	r3, [r2, #0]
							loop_counter++;
 8003278:	4b28      	ldr	r3, [pc, #160]	@ (800331c <main+0x1cec>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	4b27      	ldr	r3, [pc, #156]	@ (800331c <main+0x1cec>)
 8003280:	601a      	str	r2, [r3, #0]
							if (loop_counter == 1) {
 8003282:	4b26      	ldr	r3, [pc, #152]	@ (800331c <main+0x1cec>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d106      	bne.n	8003298 <main+0x1c68>
								pen_delay_timer = micros();
 800328a:	f000 ff05 	bl	8004098 <micros>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4940      	ldr	r1, [pc, #256]	@ (8003394 <main+0x1d64>)
 8003294:	e9c1 2300 	strd	r2, r3, [r1]
							}
							if (loop_counter == 100) {
 8003298:	4b20      	ldr	r3, [pc, #128]	@ (800331c <main+0x1cec>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b64      	cmp	r3, #100	@ 0x64
 800329e:	d13a      	bne.n	8003316 <main+0x1ce6>
								pen_delay_timer = micros();
 80032a0:	f000 fefa 	bl	8004098 <micros>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	493a      	ldr	r1, [pc, #232]	@ (8003394 <main+0x1d64>)
 80032aa:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 80032ae:	e032      	b.n	8003316 <main+0x1ce6>
							}
						}
					}
				} else {
					lock_timer_us = 0;
 80032b0:	4931      	ldr	r1, [pc, #196]	@ (8003378 <main+0x1d48>)
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	e9c1 2300 	strd	r2, r3, [r1]
 80032be:	f7fe ba33 	b.w	8001728 <main+0xf8>
				}
			} else {
				if (micros() - pen_delay_timer < 500000) {
 80032c2:	f000 fee9 	bl	8004098 <micros>
 80032c6:	4b33      	ldr	r3, [pc, #204]	@ (8003394 <main+0x1d64>)
 80032c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032cc:	1a86      	subs	r6, r0, r2
 80032ce:	603e      	str	r6, [r7, #0]
 80032d0:	eb61 0303 	sbc.w	r3, r1, r3
 80032d4:	607b      	str	r3, [r7, #4]
 80032d6:	4b30      	ldr	r3, [pc, #192]	@ (8003398 <main+0x1d68>)
 80032d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032dc:	4602      	mov	r2, r0
 80032de:	429a      	cmp	r2, r3
 80032e0:	460b      	mov	r3, r1
 80032e2:	f173 0300 	sbcs.w	r3, r3, #0
 80032e6:	d20e      	bcs.n	8003306 <main+0x1cd6>
					Set_Motor(0, 0);
 80032e8:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800339c <main+0x1d6c>
 80032ec:	2000      	movs	r0, #0
 80032ee:	f001 f985 	bl	80045fc <Set_Motor>
					Set_Motor(1, 0);
 80032f2:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 800339c <main+0x1d6c>
 80032f6:	2001      	movs	r0, #1
 80032f8:	f001 f980 	bl	80045fc <Set_Motor>
					Set_Servo(1);
 80032fc:	2001      	movs	r0, #1
 80032fe:	f001 f9fb 	bl	80046f8 <Set_Servo>
 8003302:	f7fe ba11 	b.w	8001728 <main+0xf8>
				} else {
					Set_Servo(0);
 8003306:	2000      	movs	r0, #0
 8003308:	f001 f9f6 	bl	80046f8 <Set_Servo>
					Mode = 0;
 800330c:	4a24      	ldr	r2, [pc, #144]	@ (80033a0 <main+0x1d70>)
 800330e:	2300      	movs	r3, #0
 8003310:	7013      	strb	r3, [r2, #0]
 8003312:	f7fe ba09 	b.w	8001728 <main+0xf8>
					if (lock_timer_us == 0)
 8003316:	bf00      	nop
	while (1) {
 8003318:	f7fe ba06 	b.w	8001728 <main+0xf8>
 800331c:	20000a40 	.word	0x20000a40
 8003320:	2000098c 	.word	0x2000098c
 8003324:	200008f0 	.word	0x200008f0
 8003328:	200009ac 	.word	0x200009ac
 800332c:	20000990 	.word	0x20000990
 8003330:	20000930 	.word	0x20000930
 8003334:	200009b0 	.word	0x200009b0
 8003338:	20001100 	.word	0x20001100
 800333c:	20000008 	.word	0x20000008
 8003340:	2000000c 	.word	0x2000000c
 8003344:	20000010 	.word	0x20000010
 8003348:	200009fc 	.word	0x200009fc
 800334c:	42c80000 	.word	0x42c80000
 8003350:	c2c80000 	.word	0xc2c80000
 8003354:	3c23d70a 	.word	0x3c23d70a
 8003358:	200009bc 	.word	0x200009bc
 800335c:	2000001c 	.word	0x2000001c
 8003360:	20000020 	.word	0x20000020
 8003364:	20000024 	.word	0x20000024
 8003368:	20000a04 	.word	0x20000a04
 800336c:	200009c0 	.word	0x200009c0
 8003370:	3d0b4396 	.word	0x3d0b4396
 8003374:	3e4ccccd 	.word	0x3e4ccccd
 8003378:	200009d0 	.word	0x200009d0
 800337c:	000f4240 	.word	0x000f4240
 8003380:	20001108 	.word	0x20001108
 8003384:	bf860aa6 	.word	0xbf860aa6
 8003388:	437a0000 	.word	0x437a0000
 800338c:	40860a91 	.word	0x40860a91
 8003390:	42480000 	.word	0x42480000
 8003394:	200010f8 	.word	0x200010f8
 8003398:	0007a120 	.word	0x0007a120
 800339c:	00000000 	.word	0x00000000
 80033a0:	200009c4 	.word	0x200009c4

080033a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b094      	sub	sp, #80	@ 0x50
 80033a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80033aa:	f107 0318 	add.w	r3, r7, #24
 80033ae:	2238      	movs	r2, #56	@ 0x38
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f008 f850 	bl	800b458 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	609a      	str	r2, [r3, #8]
 80033c2:	60da      	str	r2, [r3, #12]
 80033c4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80033c6:	2000      	movs	r0, #0
 80033c8:	f002 fc6e 	bl	8005ca8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033cc:	2302      	movs	r3, #2
 80033ce:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033d6:	2340      	movs	r3, #64	@ 0x40
 80033d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033da:	2302      	movs	r3, #2
 80033dc:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033de:	2302      	movs	r3, #2
 80033e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80033e2:	2304      	movs	r3, #4
 80033e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80033e6:	2355      	movs	r3, #85	@ 0x55
 80033e8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033ea:	2302      	movs	r3, #2
 80033ec:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80033ee:	2302      	movs	r3, #2
 80033f0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80033f2:	2302      	movs	r3, #2
 80033f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80033f6:	f107 0318 	add.w	r3, r7, #24
 80033fa:	4618      	mov	r0, r3
 80033fc:	f002 fd08 	bl	8005e10 <HAL_RCC_OscConfig>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <SystemClock_Config+0x66>
		Error_Handler();
 8003406:	f001 fa39 	bl	800487c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800340a:	230f      	movs	r3, #15
 800340c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800340e:	2303      	movs	r3, #3
 8003410:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	2104      	movs	r1, #4
 8003422:	4618      	mov	r0, r3
 8003424:	f003 f806 	bl	8006434 <HAL_RCC_ClockConfig>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <SystemClock_Config+0x8e>
		Error_Handler();
 800342e:	f001 fa25 	bl	800487c <Error_Handler>
	}
}
 8003432:	bf00      	nop
 8003434:	3750      	adds	r7, #80	@ 0x50
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b08c      	sub	sp, #48	@ 0x30
 8003440:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003442:	f107 031c 	add.w	r3, r7, #28
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	605a      	str	r2, [r3, #4]
 800344c:	609a      	str	r2, [r3, #8]
 800344e:	60da      	str	r2, [r3, #12]
 8003450:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003452:	f107 030c 	add.w	r3, r7, #12
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003460:	463b      	mov	r3, r7
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800346a:	4b35      	ldr	r3, [pc, #212]	@ (8003540 <MX_TIM1_Init+0x104>)
 800346c:	4a35      	ldr	r2, [pc, #212]	@ (8003544 <MX_TIM1_Init+0x108>)
 800346e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 8003470:	4b33      	ldr	r3, [pc, #204]	@ (8003540 <MX_TIM1_Init+0x104>)
 8003472:	22a9      	movs	r2, #169	@ 0xa9
 8003474:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003476:	4b32      	ldr	r3, [pc, #200]	@ (8003540 <MX_TIM1_Init+0x104>)
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800347c:	4b30      	ldr	r3, [pc, #192]	@ (8003540 <MX_TIM1_Init+0x104>)
 800347e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003482:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003484:	4b2e      	ldr	r3, [pc, #184]	@ (8003540 <MX_TIM1_Init+0x104>)
 8003486:	2200      	movs	r2, #0
 8003488:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800348a:	4b2d      	ldr	r3, [pc, #180]	@ (8003540 <MX_TIM1_Init+0x104>)
 800348c:	2200      	movs	r2, #0
 800348e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003490:	4b2b      	ldr	r3, [pc, #172]	@ (8003540 <MX_TIM1_Init+0x104>)
 8003492:	2200      	movs	r2, #0
 8003494:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8003496:	482a      	ldr	r0, [pc, #168]	@ (8003540 <MX_TIM1_Init+0x104>)
 8003498:	f003 ff02 	bl	80072a0 <HAL_TIM_IC_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_TIM1_Init+0x6a>
		Error_Handler();
 80034a2:	f001 f9eb 	bl	800487c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80034a6:	2304      	movs	r3, #4
 80034a8:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80034aa:	2360      	movs	r3, #96	@ 0x60
 80034ac:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80034ae:	2302      	movs	r3, #2
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80034b2:	2300      	movs	r3, #0
 80034b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 80034ba:	f107 031c 	add.w	r3, r7, #28
 80034be:	4619      	mov	r1, r3
 80034c0:	481f      	ldr	r0, [pc, #124]	@ (8003540 <MX_TIM1_Init+0x104>)
 80034c2:	f004 fecd 	bl	8008260 <HAL_TIM_SlaveConfigSynchro>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <MX_TIM1_Init+0x94>
		Error_Handler();
 80034cc:	f001 f9d6 	bl	800487c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80034d4:	2302      	movs	r3, #2
 80034d6:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80034e0:	f107 030c 	add.w	r3, r7, #12
 80034e4:	2200      	movs	r2, #0
 80034e6:	4619      	mov	r1, r3
 80034e8:	4815      	ldr	r0, [pc, #84]	@ (8003540 <MX_TIM1_Init+0x104>)
 80034ea:	f004 fbf2 	bl	8007cd2 <HAL_TIM_IC_ConfigChannel>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <MX_TIM1_Init+0xbc>
		Error_Handler();
 80034f4:	f001 f9c2 	bl	800487c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80034f8:	2302      	movs	r3, #2
 80034fa:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80034fc:	2301      	movs	r3, #1
 80034fe:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003500:	f107 030c 	add.w	r3, r7, #12
 8003504:	2204      	movs	r2, #4
 8003506:	4619      	mov	r1, r3
 8003508:	480d      	ldr	r0, [pc, #52]	@ (8003540 <MX_TIM1_Init+0x104>)
 800350a:	f004 fbe2 	bl	8007cd2 <HAL_TIM_IC_ConfigChannel>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_TIM1_Init+0xdc>
		Error_Handler();
 8003514:	f001 f9b2 	bl	800487c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003518:	2300      	movs	r3, #0
 800351a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800351c:	2300      	movs	r3, #0
 800351e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003524:	463b      	mov	r3, r7
 8003526:	4619      	mov	r1, r3
 8003528:	4805      	ldr	r0, [pc, #20]	@ (8003540 <MX_TIM1_Init+0x104>)
 800352a:	f005 ffb5 	bl	8009498 <HAL_TIMEx_MasterConfigSynchronization>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003534:	f001 f9a2 	bl	800487c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8003538:	bf00      	nop
 800353a:	3730      	adds	r7, #48	@ 0x30
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	200000a8 	.word	0x200000a8
 8003544:	40012c00 	.word	0x40012c00

08003548 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003548:	b580      	push	{r7, lr}
 800354a:	b08c      	sub	sp, #48	@ 0x30
 800354c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 800354e:	f107 031c 	add.w	r3, r7, #28
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	609a      	str	r2, [r3, #8]
 800355a:	60da      	str	r2, [r3, #12]
 800355c:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800355e:	f107 030c 	add.w	r3, r7, #12
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800356c:	463b      	mov	r3, r7
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	605a      	str	r2, [r3, #4]
 8003574:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003576:	4b33      	ldr	r3, [pc, #204]	@ (8003644 <MX_TIM2_Init+0xfc>)
 8003578:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800357c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 800357e:	4b31      	ldr	r3, [pc, #196]	@ (8003644 <MX_TIM2_Init+0xfc>)
 8003580:	22a9      	movs	r2, #169	@ 0xa9
 8003582:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003584:	4b2f      	ldr	r3, [pc, #188]	@ (8003644 <MX_TIM2_Init+0xfc>)
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800358a:	4b2e      	ldr	r3, [pc, #184]	@ (8003644 <MX_TIM2_Init+0xfc>)
 800358c:	f04f 32ff 	mov.w	r2, #4294967295
 8003590:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003592:	4b2c      	ldr	r3, [pc, #176]	@ (8003644 <MX_TIM2_Init+0xfc>)
 8003594:	2200      	movs	r2, #0
 8003596:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003598:	4b2a      	ldr	r3, [pc, #168]	@ (8003644 <MX_TIM2_Init+0xfc>)
 800359a:	2200      	movs	r2, #0
 800359c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800359e:	4829      	ldr	r0, [pc, #164]	@ (8003644 <MX_TIM2_Init+0xfc>)
 80035a0:	f003 fe7e 	bl	80072a0 <HAL_TIM_IC_Init>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <MX_TIM2_Init+0x66>
		Error_Handler();
 80035aa:	f001 f967 	bl	800487c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80035ae:	2304      	movs	r3, #4
 80035b0:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80035b2:	2350      	movs	r3, #80	@ 0x50
 80035b4:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80035ba:	2300      	movs	r3, #0
 80035bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 80035c2:	f107 031c 	add.w	r3, r7, #28
 80035c6:	4619      	mov	r1, r3
 80035c8:	481e      	ldr	r0, [pc, #120]	@ (8003644 <MX_TIM2_Init+0xfc>)
 80035ca:	f004 fe49 	bl	8008260 <HAL_TIM_SlaveConfigSynchro>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <MX_TIM2_Init+0x90>
		Error_Handler();
 80035d4:	f001 f952 	bl	800487c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80035dc:	2301      	movs	r3, #1
 80035de:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80035e8:	f107 030c 	add.w	r3, r7, #12
 80035ec:	2200      	movs	r2, #0
 80035ee:	4619      	mov	r1, r3
 80035f0:	4814      	ldr	r0, [pc, #80]	@ (8003644 <MX_TIM2_Init+0xfc>)
 80035f2:	f004 fb6e 	bl	8007cd2 <HAL_TIM_IC_ConfigChannel>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <MX_TIM2_Init+0xb8>
		Error_Handler();
 80035fc:	f001 f93e 	bl	800487c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003600:	2302      	movs	r3, #2
 8003602:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003604:	2302      	movs	r3, #2
 8003606:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003608:	f107 030c 	add.w	r3, r7, #12
 800360c:	2204      	movs	r2, #4
 800360e:	4619      	mov	r1, r3
 8003610:	480c      	ldr	r0, [pc, #48]	@ (8003644 <MX_TIM2_Init+0xfc>)
 8003612:	f004 fb5e 	bl	8007cd2 <HAL_TIM_IC_ConfigChannel>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <MX_TIM2_Init+0xd8>
		Error_Handler();
 800361c:	f001 f92e 	bl	800487c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003620:	2300      	movs	r3, #0
 8003622:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003624:	2300      	movs	r3, #0
 8003626:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003628:	463b      	mov	r3, r7
 800362a:	4619      	mov	r1, r3
 800362c:	4805      	ldr	r0, [pc, #20]	@ (8003644 <MX_TIM2_Init+0xfc>)
 800362e:	f005 ff33 	bl	8009498 <HAL_TIMEx_MasterConfigSynchronization>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <MX_TIM2_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 8003638:	f001 f920 	bl	800487c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800363c:	bf00      	nop
 800363e:	3730      	adds	r7, #48	@ 0x30
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000174 	.word	0x20000174

08003648 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b08c      	sub	sp, #48	@ 0x30
 800364c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800364e:	f107 030c 	add.w	r3, r7, #12
 8003652:	2224      	movs	r2, #36	@ 0x24
 8003654:	2100      	movs	r1, #0
 8003656:	4618      	mov	r0, r3
 8003658:	f007 fefe 	bl	800b458 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800365c:	463b      	mov	r3, r7
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	605a      	str	r2, [r3, #4]
 8003664:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003666:	4b21      	ldr	r3, [pc, #132]	@ (80036ec <MX_TIM3_Init+0xa4>)
 8003668:	4a21      	ldr	r2, [pc, #132]	@ (80036f0 <MX_TIM3_Init+0xa8>)
 800366a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800366c:	4b1f      	ldr	r3, [pc, #124]	@ (80036ec <MX_TIM3_Init+0xa4>)
 800366e:	2200      	movs	r2, #0
 8003670:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003672:	4b1e      	ldr	r3, [pc, #120]	@ (80036ec <MX_TIM3_Init+0xa4>)
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003678:	4b1c      	ldr	r3, [pc, #112]	@ (80036ec <MX_TIM3_Init+0xa4>)
 800367a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800367e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003680:	4b1a      	ldr	r3, [pc, #104]	@ (80036ec <MX_TIM3_Init+0xa4>)
 8003682:	2200      	movs	r2, #0
 8003684:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003686:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <MX_TIM3_Init+0xa4>)
 8003688:	2200      	movs	r2, #0
 800368a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800368c:	2303      	movs	r3, #3
 800368e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003694:	2301      	movs	r3, #1
 8003696:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003698:	2300      	movs	r3, #0
 800369a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 800369c:	2304      	movs	r3, #4
 800369e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036a0:	2300      	movs	r3, #0
 80036a2:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036a4:	2301      	movs	r3, #1
 80036a6:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 80036ac:	2304      	movs	r3, #4
 80036ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80036b0:	f107 030c 	add.w	r3, r7, #12
 80036b4:	4619      	mov	r1, r3
 80036b6:	480d      	ldr	r0, [pc, #52]	@ (80036ec <MX_TIM3_Init+0xa4>)
 80036b8:	f004 f850 	bl	800775c <HAL_TIM_Encoder_Init>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_TIM3_Init+0x7e>
		Error_Handler();
 80036c2:	f001 f8db 	bl	800487c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036c6:	2300      	movs	r3, #0
 80036c8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80036ce:	463b      	mov	r3, r7
 80036d0:	4619      	mov	r1, r3
 80036d2:	4806      	ldr	r0, [pc, #24]	@ (80036ec <MX_TIM3_Init+0xa4>)
 80036d4:	f005 fee0 	bl	8009498 <HAL_TIMEx_MasterConfigSynchronization>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80036de:	f001 f8cd 	bl	800487c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80036e2:	bf00      	nop
 80036e4:	3730      	adds	r7, #48	@ 0x30
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000240 	.word	0x20000240
 80036f0:	40000400 	.word	0x40000400

080036f4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08c      	sub	sp, #48	@ 0x30
 80036f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80036fa:	f107 030c 	add.w	r3, r7, #12
 80036fe:	2224      	movs	r2, #36	@ 0x24
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f007 fea8 	bl	800b458 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003708:	463b      	mov	r3, r7
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003712:	4b21      	ldr	r3, [pc, #132]	@ (8003798 <MX_TIM4_Init+0xa4>)
 8003714:	4a21      	ldr	r2, [pc, #132]	@ (800379c <MX_TIM4_Init+0xa8>)
 8003716:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003718:	4b1f      	ldr	r3, [pc, #124]	@ (8003798 <MX_TIM4_Init+0xa4>)
 800371a:	2200      	movs	r2, #0
 800371c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800371e:	4b1e      	ldr	r3, [pc, #120]	@ (8003798 <MX_TIM4_Init+0xa4>)
 8003720:	2200      	movs	r2, #0
 8003722:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003724:	4b1c      	ldr	r3, [pc, #112]	@ (8003798 <MX_TIM4_Init+0xa4>)
 8003726:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800372a:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800372c:	4b1a      	ldr	r3, [pc, #104]	@ (8003798 <MX_TIM4_Init+0xa4>)
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003732:	4b19      	ldr	r3, [pc, #100]	@ (8003798 <MX_TIM4_Init+0xa4>)
 8003734:	2200      	movs	r2, #0
 8003736:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003738:	2303      	movs	r3, #3
 800373a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003740:	2301      	movs	r3, #1
 8003742:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 8003748:	2304      	movs	r3, #4
 800374a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800374c:	2300      	movs	r3, #0
 800374e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003750:	2301      	movs	r3, #1
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003754:	2300      	movs	r3, #0
 8003756:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 8003758:	2304      	movs	r3, #4
 800375a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 800375c:	f107 030c 	add.w	r3, r7, #12
 8003760:	4619      	mov	r1, r3
 8003762:	480d      	ldr	r0, [pc, #52]	@ (8003798 <MX_TIM4_Init+0xa4>)
 8003764:	f003 fffa 	bl	800775c <HAL_TIM_Encoder_Init>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <MX_TIM4_Init+0x7e>
		Error_Handler();
 800376e:	f001 f885 	bl	800487c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003772:	2300      	movs	r3, #0
 8003774:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800377a:	463b      	mov	r3, r7
 800377c:	4619      	mov	r1, r3
 800377e:	4806      	ldr	r0, [pc, #24]	@ (8003798 <MX_TIM4_Init+0xa4>)
 8003780:	f005 fe8a 	bl	8009498 <HAL_TIMEx_MasterConfigSynchronization>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800378a:	f001 f877 	bl	800487c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800378e:	bf00      	nop
 8003790:	3730      	adds	r7, #48	@ 0x30
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	2000030c 	.word	0x2000030c
 800379c:	40000800 	.word	0x40000800

080037a0 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80037a6:	f107 0310 	add.w	r3, r7, #16
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	609a      	str	r2, [r3, #8]
 80037b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80037be:	4b1d      	ldr	r3, [pc, #116]	@ (8003834 <MX_TIM5_Init+0x94>)
 80037c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003838 <MX_TIM5_Init+0x98>)
 80037c2:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 80037c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003834 <MX_TIM5_Init+0x94>)
 80037c6:	22a9      	movs	r2, #169	@ 0xa9
 80037c8:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003834 <MX_TIM5_Init+0x94>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80037d0:	4b18      	ldr	r3, [pc, #96]	@ (8003834 <MX_TIM5_Init+0x94>)
 80037d2:	f04f 32ff 	mov.w	r2, #4294967295
 80037d6:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d8:	4b16      	ldr	r3, [pc, #88]	@ (8003834 <MX_TIM5_Init+0x94>)
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037de:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <MX_TIM5_Init+0x94>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80037e4:	4813      	ldr	r0, [pc, #76]	@ (8003834 <MX_TIM5_Init+0x94>)
 80037e6:	f003 fa8f 	bl	8006d08 <HAL_TIM_Base_Init>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_TIM5_Init+0x54>
		Error_Handler();
 80037f0:	f001 f844 	bl	800487c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037f8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80037fa:	f107 0310 	add.w	r3, r7, #16
 80037fe:	4619      	mov	r1, r3
 8003800:	480c      	ldr	r0, [pc, #48]	@ (8003834 <MX_TIM5_Init+0x94>)
 8003802:	f004 fc17 	bl	8008034 <HAL_TIM_ConfigClockSource>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_TIM5_Init+0x70>
		Error_Handler();
 800380c:	f001 f836 	bl	800487c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003810:	2300      	movs	r3, #0
 8003812:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8003818:	1d3b      	adds	r3, r7, #4
 800381a:	4619      	mov	r1, r3
 800381c:	4805      	ldr	r0, [pc, #20]	@ (8003834 <MX_TIM5_Init+0x94>)
 800381e:	f005 fe3b 	bl	8009498 <HAL_TIMEx_MasterConfigSynchronization>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8003828:	f001 f828 	bl	800487c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 800382c:	bf00      	nop
 800382e:	3720      	adds	r7, #32
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	200003d8 	.word	0x200003d8
 8003838:	40000c00 	.word	0x40000c00

0800383c <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b09c      	sub	sp, #112	@ 0x70
 8003840:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003842:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003850:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800385c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	611a      	str	r2, [r3, #16]
 800386c:	615a      	str	r2, [r3, #20]
 800386e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003870:	1d3b      	adds	r3, r7, #4
 8003872:	2234      	movs	r2, #52	@ 0x34
 8003874:	2100      	movs	r1, #0
 8003876:	4618      	mov	r0, r3
 8003878:	f007 fdee 	bl	800b458 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800387c:	4b4b      	ldr	r3, [pc, #300]	@ (80039ac <MX_TIM8_Init+0x170>)
 800387e:	4a4c      	ldr	r2, [pc, #304]	@ (80039b0 <MX_TIM8_Init+0x174>)
 8003880:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 8003882:	4b4a      	ldr	r3, [pc, #296]	@ (80039ac <MX_TIM8_Init+0x170>)
 8003884:	22a9      	movs	r2, #169	@ 0xa9
 8003886:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003888:	4b48      	ldr	r3, [pc, #288]	@ (80039ac <MX_TIM8_Init+0x170>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 100;
 800388e:	4b47      	ldr	r3, [pc, #284]	@ (80039ac <MX_TIM8_Init+0x170>)
 8003890:	2264      	movs	r2, #100	@ 0x64
 8003892:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003894:	4b45      	ldr	r3, [pc, #276]	@ (80039ac <MX_TIM8_Init+0x170>)
 8003896:	2200      	movs	r2, #0
 8003898:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800389a:	4b44      	ldr	r3, [pc, #272]	@ (80039ac <MX_TIM8_Init+0x170>)
 800389c:	2200      	movs	r2, #0
 800389e:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038a0:	4b42      	ldr	r3, [pc, #264]	@ (80039ac <MX_TIM8_Init+0x170>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 80038a6:	4841      	ldr	r0, [pc, #260]	@ (80039ac <MX_TIM8_Init+0x170>)
 80038a8:	f003 fa2e 	bl	8006d08 <HAL_TIM_Base_Init>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <MX_TIM8_Init+0x7a>
		Error_Handler();
 80038b2:	f000 ffe3 	bl	800487c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038ba:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 80038bc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80038c0:	4619      	mov	r1, r3
 80038c2:	483a      	ldr	r0, [pc, #232]	@ (80039ac <MX_TIM8_Init+0x170>)
 80038c4:	f004 fbb6 	bl	8008034 <HAL_TIM_ConfigClockSource>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <MX_TIM8_Init+0x96>
		Error_Handler();
 80038ce:	f000 ffd5 	bl	800487c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80038d2:	4836      	ldr	r0, [pc, #216]	@ (80039ac <MX_TIM8_Init+0x170>)
 80038d4:	f003 fb64 	bl	8006fa0 <HAL_TIM_PWM_Init>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_TIM8_Init+0xa6>
		Error_Handler();
 80038de:	f000 ffcd 	bl	800487c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80038e6:	2300      	movs	r3, #0
 80038e8:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80038ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80038f2:	4619      	mov	r1, r3
 80038f4:	482d      	ldr	r0, [pc, #180]	@ (80039ac <MX_TIM8_Init+0x170>)
 80038f6:	f005 fdcf 	bl	8009498 <HAL_TIMEx_MasterConfigSynchronization>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <MX_TIM8_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8003900:	f000 ffbc 	bl	800487c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003904:	2360      	movs	r3, #96	@ 0x60
 8003906:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 100;
 8003908:	2364      	movs	r3, #100	@ 0x64
 800390a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800390c:	2300      	movs	r3, #0
 800390e:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003910:	2300      	movs	r3, #0
 8003912:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003914:	2300      	movs	r3, #0
 8003916:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003918:	2300      	movs	r3, #0
 800391a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800391c:	2300      	movs	r3, #0
 800391e:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 8003920:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003924:	2208      	movs	r2, #8
 8003926:	4619      	mov	r1, r3
 8003928:	4820      	ldr	r0, [pc, #128]	@ (80039ac <MX_TIM8_Init+0x170>)
 800392a:	f004 fa6f 	bl	8007e0c <HAL_TIM_PWM_ConfigChannel>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_TIM8_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8003934:	f000 ffa2 	bl	800487c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 8003938:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800393c:	220c      	movs	r2, #12
 800393e:	4619      	mov	r1, r3
 8003940:	481a      	ldr	r0, [pc, #104]	@ (80039ac <MX_TIM8_Init+0x170>)
 8003942:	f004 fa63 	bl	8007e0c <HAL_TIM_PWM_ConfigChannel>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_TIM8_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 800394c:	f000 ff96 	bl	800487c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003950:	2300      	movs	r3, #0
 8003952:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003954:	2300      	movs	r3, #0
 8003956:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003968:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800396e:	2300      	movs	r3, #0
 8003970:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003972:	2300      	movs	r3, #0
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003976:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800397a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003980:	2300      	movs	r3, #0
 8003982:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003984:	2300      	movs	r3, #0
 8003986:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8003988:	1d3b      	adds	r3, r7, #4
 800398a:	4619      	mov	r1, r3
 800398c:	4807      	ldr	r0, [pc, #28]	@ (80039ac <MX_TIM8_Init+0x170>)
 800398e:	f005 fe19 	bl	80095c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_TIM8_Init+0x160>
			!= HAL_OK) {
		Error_Handler();
 8003998:	f000 ff70 	bl	800487c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 800399c:	4803      	ldr	r0, [pc, #12]	@ (80039ac <MX_TIM8_Init+0x170>)
 800399e:	f001 f901 	bl	8004ba4 <HAL_TIM_MspPostInit>

}
 80039a2:	bf00      	nop
 80039a4:	3770      	adds	r7, #112	@ 0x70
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	200004a4 	.word	0x200004a4
 80039b0:	40013400 	.word	0x40013400

080039b4 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b09c      	sub	sp, #112	@ 0x70
 80039b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80039ba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	605a      	str	r2, [r3, #4]
 80039c4:	609a      	str	r2, [r3, #8]
 80039c6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80039c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80039d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	60da      	str	r2, [r3, #12]
 80039e2:	611a      	str	r2, [r3, #16]
 80039e4:	615a      	str	r2, [r3, #20]
 80039e6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80039e8:	1d3b      	adds	r3, r7, #4
 80039ea:	2234      	movs	r2, #52	@ 0x34
 80039ec:	2100      	movs	r1, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f007 fd32 	bl	800b458 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 80039f4:	4b3f      	ldr	r3, [pc, #252]	@ (8003af4 <MX_TIM15_Init+0x140>)
 80039f6:	4a40      	ldr	r2, [pc, #256]	@ (8003af8 <MX_TIM15_Init+0x144>)
 80039f8:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 169;
 80039fa:	4b3e      	ldr	r3, [pc, #248]	@ (8003af4 <MX_TIM15_Init+0x140>)
 80039fc:	22a9      	movs	r2, #169	@ 0xa9
 80039fe:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a00:	4b3c      	ldr	r3, [pc, #240]	@ (8003af4 <MX_TIM15_Init+0x140>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 20000;
 8003a06:	4b3b      	ldr	r3, [pc, #236]	@ (8003af4 <MX_TIM15_Init+0x140>)
 8003a08:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8003a0c:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a0e:	4b39      	ldr	r3, [pc, #228]	@ (8003af4 <MX_TIM15_Init+0x140>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8003a14:	4b37      	ldr	r3, [pc, #220]	@ (8003af4 <MX_TIM15_Init+0x140>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a1a:	4b36      	ldr	r3, [pc, #216]	@ (8003af4 <MX_TIM15_Init+0x140>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8003a20:	4834      	ldr	r0, [pc, #208]	@ (8003af4 <MX_TIM15_Init+0x140>)
 8003a22:	f003 f971 	bl	8006d08 <HAL_TIM_Base_Init>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_TIM15_Init+0x7c>
		Error_Handler();
 8003a2c:	f000 ff26 	bl	800487c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a34:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 8003a36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	482d      	ldr	r0, [pc, #180]	@ (8003af4 <MX_TIM15_Init+0x140>)
 8003a3e:	f004 faf9 	bl	8008034 <HAL_TIM_ConfigClockSource>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <MX_TIM15_Init+0x98>
		Error_Handler();
 8003a48:	f000 ff18 	bl	800487c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8003a4c:	4829      	ldr	r0, [pc, #164]	@ (8003af4 <MX_TIM15_Init+0x140>)
 8003a4e:	f003 faa7 	bl	8006fa0 <HAL_TIM_PWM_Init>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <MX_TIM15_Init+0xa8>
		Error_Handler();
 8003a58:	f000 ff10 	bl	800487c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8003a64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4822      	ldr	r0, [pc, #136]	@ (8003af4 <MX_TIM15_Init+0x140>)
 8003a6c:	f005 fd14 	bl	8009498 <HAL_TIMEx_MasterConfigSynchronization>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_TIM15_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8003a76:	f000 ff01 	bl	800487c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a7a:	2360      	movs	r3, #96	@ 0x60
 8003a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a82:	2300      	movs	r3, #0
 8003a84:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a86:	2300      	movs	r3, #0
 8003a88:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a92:	2300      	movs	r3, #0
 8003a94:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 8003a96:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4815      	ldr	r0, [pc, #84]	@ (8003af4 <MX_TIM15_Init+0x140>)
 8003aa0:	f004 f9b4 	bl	8007e0c <HAL_TIM_PWM_ConfigChannel>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <MX_TIM15_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8003aaa:	f000 fee7 	bl	800487c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ac2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ac6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 8003ad0:	1d3b      	adds	r3, r7, #4
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4807      	ldr	r0, [pc, #28]	@ (8003af4 <MX_TIM15_Init+0x140>)
 8003ad6:	f005 fd75 	bl	80095c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_TIM15_Init+0x130>
			!= HAL_OK) {
		Error_Handler();
 8003ae0:	f000 fecc 	bl	800487c <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8003ae4:	4803      	ldr	r0, [pc, #12]	@ (8003af4 <MX_TIM15_Init+0x140>)
 8003ae6:	f001 f85d 	bl	8004ba4 <HAL_TIM_MspPostInit>

}
 8003aea:	bf00      	nop
 8003aec:	3770      	adds	r7, #112	@ 0x70
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000570 	.word	0x20000570
 8003af8:	40014000 	.word	0x40014000

08003afc <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8003b00:	4b14      	ldr	r3, [pc, #80]	@ (8003b54 <MX_TIM16_Init+0x58>)
 8003b02:	4a15      	ldr	r2, [pc, #84]	@ (8003b58 <MX_TIM16_Init+0x5c>)
 8003b04:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 8003b06:	4b13      	ldr	r3, [pc, #76]	@ (8003b54 <MX_TIM16_Init+0x58>)
 8003b08:	22a9      	movs	r2, #169	@ 0xa9
 8003b0a:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b0c:	4b11      	ldr	r3, [pc, #68]	@ (8003b54 <MX_TIM16_Init+0x58>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 8003b12:	4b10      	ldr	r3, [pc, #64]	@ (8003b54 <MX_TIM16_Init+0x58>)
 8003b14:	f240 4279 	movw	r2, #1145	@ 0x479
 8003b18:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b54 <MX_TIM16_Init+0x58>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8003b20:	4b0c      	ldr	r3, [pc, #48]	@ (8003b54 <MX_TIM16_Init+0x58>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b26:	4b0b      	ldr	r3, [pc, #44]	@ (8003b54 <MX_TIM16_Init+0x58>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8003b2c:	4809      	ldr	r0, [pc, #36]	@ (8003b54 <MX_TIM16_Init+0x58>)
 8003b2e:	f003 f8eb 	bl	8006d08 <HAL_TIM_Base_Init>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <MX_TIM16_Init+0x40>
		Error_Handler();
 8003b38:	f000 fea0 	bl	800487c <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 8003b3c:	2108      	movs	r1, #8
 8003b3e:	4805      	ldr	r0, [pc, #20]	@ (8003b54 <MX_TIM16_Init+0x58>)
 8003b40:	f003 fd16 	bl	8007570 <HAL_TIM_OnePulse_Init>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <MX_TIM16_Init+0x52>
		Error_Handler();
 8003b4a:	f000 fe97 	bl	800487c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	2000063c 	.word	0x2000063c
 8003b58:	40014400 	.word	0x40014400

08003b5c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003b60:	4b23      	ldr	r3, [pc, #140]	@ (8003bf0 <MX_USART2_UART_Init+0x94>)
 8003b62:	4a24      	ldr	r2, [pc, #144]	@ (8003bf4 <MX_USART2_UART_Init+0x98>)
 8003b64:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 8003b66:	4b22      	ldr	r3, [pc, #136]	@ (8003bf0 <MX_USART2_UART_Init+0x94>)
 8003b68:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003b6c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003b6e:	4b20      	ldr	r3, [pc, #128]	@ (8003bf0 <MX_USART2_UART_Init+0x94>)
 8003b70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003b74:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003b76:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf0 <MX_USART2_UART_Init+0x94>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8003b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf0 <MX_USART2_UART_Init+0x94>)
 8003b7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b82:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003b84:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf0 <MX_USART2_UART_Init+0x94>)
 8003b86:	220c      	movs	r2, #12
 8003b88:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b8a:	4b19      	ldr	r3, [pc, #100]	@ (8003bf0 <MX_USART2_UART_Init+0x94>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b90:	4b17      	ldr	r3, [pc, #92]	@ (8003bf0 <MX_USART2_UART_Init+0x94>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b96:	4b16      	ldr	r3, [pc, #88]	@ (8003bf0 <MX_USART2_UART_Init+0x94>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b9c:	4b14      	ldr	r3, [pc, #80]	@ (8003bf0 <MX_USART2_UART_Init+0x94>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ba2:	4b13      	ldr	r3, [pc, #76]	@ (8003bf0 <MX_USART2_UART_Init+0x94>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003ba8:	4811      	ldr	r0, [pc, #68]	@ (8003bf0 <MX_USART2_UART_Init+0x94>)
 8003baa:	f005 fdef 	bl	800978c <HAL_UART_Init>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 8003bb4:	f000 fe62 	bl	800487c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8003bb8:	2100      	movs	r1, #0
 8003bba:	480d      	ldr	r0, [pc, #52]	@ (8003bf0 <MX_USART2_UART_Init+0x94>)
 8003bbc:	f007 fb4c 	bl	800b258 <HAL_UARTEx_SetTxFifoThreshold>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 8003bc6:	f000 fe59 	bl	800487c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4808      	ldr	r0, [pc, #32]	@ (8003bf0 <MX_USART2_UART_Init+0x94>)
 8003bce:	f007 fb81 	bl	800b2d4 <HAL_UARTEx_SetRxFifoThreshold>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 8003bd8:	f000 fe50 	bl	800487c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8003bdc:	4804      	ldr	r0, [pc, #16]	@ (8003bf0 <MX_USART2_UART_Init+0x94>)
 8003bde:	f007 fb02 	bl	800b1e6 <HAL_UARTEx_DisableFifoMode>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <MX_USART2_UART_Init+0x90>
		Error_Handler();
 8003be8:	f000 fe48 	bl	800487c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003bec:	bf00      	nop
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20000708 	.word	0x20000708
 8003bf4:	40004400 	.word	0x40004400

08003bf8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003bfe:	4b16      	ldr	r3, [pc, #88]	@ (8003c58 <MX_DMA_Init+0x60>)
 8003c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c02:	4a15      	ldr	r2, [pc, #84]	@ (8003c58 <MX_DMA_Init+0x60>)
 8003c04:	f043 0304 	orr.w	r3, r3, #4
 8003c08:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c0a:	4b13      	ldr	r3, [pc, #76]	@ (8003c58 <MX_DMA_Init+0x60>)
 8003c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	607b      	str	r3, [r7, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003c16:	4b10      	ldr	r3, [pc, #64]	@ (8003c58 <MX_DMA_Init+0x60>)
 8003c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8003c58 <MX_DMA_Init+0x60>)
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c22:	4b0d      	ldr	r3, [pc, #52]	@ (8003c58 <MX_DMA_Init+0x60>)
 8003c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2100      	movs	r1, #0
 8003c32:	200b      	movs	r0, #11
 8003c34:	f001 fb07 	bl	8005246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003c38:	200b      	movs	r0, #11
 8003c3a:	f001 fb1e 	bl	800527a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2100      	movs	r1, #0
 8003c42:	200c      	movs	r0, #12
 8003c44:	f001 faff 	bl	8005246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003c48:	200c      	movs	r0, #12
 8003c4a:	f001 fb16 	bl	800527a <HAL_NVIC_EnableIRQ>

}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000

08003c5c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08a      	sub	sp, #40	@ 0x28
 8003c60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003c62:	f107 0314 	add.w	r3, r7, #20
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	609a      	str	r2, [r3, #8]
 8003c6e:	60da      	str	r2, [r3, #12]
 8003c70:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003c72:	4b74      	ldr	r3, [pc, #464]	@ (8003e44 <MX_GPIO_Init+0x1e8>)
 8003c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c76:	4a73      	ldr	r2, [pc, #460]	@ (8003e44 <MX_GPIO_Init+0x1e8>)
 8003c78:	f043 0304 	orr.w	r3, r3, #4
 8003c7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c7e:	4b71      	ldr	r3, [pc, #452]	@ (8003e44 <MX_GPIO_Init+0x1e8>)
 8003c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8003e44 <MX_GPIO_Init+0x1e8>)
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8e:	4a6d      	ldr	r2, [pc, #436]	@ (8003e44 <MX_GPIO_Init+0x1e8>)
 8003c90:	f043 0320 	orr.w	r3, r3, #32
 8003c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c96:	4b6b      	ldr	r3, [pc, #428]	@ (8003e44 <MX_GPIO_Init+0x1e8>)
 8003c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca2:	4b68      	ldr	r3, [pc, #416]	@ (8003e44 <MX_GPIO_Init+0x1e8>)
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca6:	4a67      	ldr	r2, [pc, #412]	@ (8003e44 <MX_GPIO_Init+0x1e8>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cae:	4b65      	ldr	r3, [pc, #404]	@ (8003e44 <MX_GPIO_Init+0x1e8>)
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003cba:	4b62      	ldr	r3, [pc, #392]	@ (8003e44 <MX_GPIO_Init+0x1e8>)
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cbe:	4a61      	ldr	r2, [pc, #388]	@ (8003e44 <MX_GPIO_Init+0x1e8>)
 8003cc0:	f043 0302 	orr.w	r3, r3, #2
 8003cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cc6:	4b5f      	ldr	r3, [pc, #380]	@ (8003e44 <MX_GPIO_Init+0x1e8>)
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	607b      	str	r3, [r7, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2120      	movs	r1, #32
 8003cd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cda:	f001 ffb5 	bl	8005c48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12,
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8003ce4:	4858      	ldr	r0, [pc, #352]	@ (8003e48 <MX_GPIO_Init+0x1ec>)
 8003ce6:	f001 ffaf 	bl	8005c48 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC0 PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 8003cea:	230d      	movs	r3, #13
 8003cec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003cee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003cf2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4852      	ldr	r0, [pc, #328]	@ (8003e48 <MX_GPIO_Init+0x1ec>)
 8003d00:	f001 fe08 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8003d04:	2320      	movs	r3, #32
 8003d06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d10:	2300      	movs	r3, #0
 8003d12:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d1e:	f001 fdf9 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12;
 8003d22:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 8003d26:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d30:	2300      	movs	r3, #0
 8003d32:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d34:	f107 0314 	add.w	r3, r7, #20
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4843      	ldr	r0, [pc, #268]	@ (8003e48 <MX_GPIO_Init+0x1ec>)
 8003d3c:	f001 fdea 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11;
 8003d40:	f640 0304 	movw	r3, #2052	@ 0x804
 8003d44:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d4e:	f107 0314 	add.w	r3, r7, #20
 8003d52:	4619      	mov	r1, r3
 8003d54:	483d      	ldr	r0, [pc, #244]	@ (8003e4c <MX_GPIO_Init+0x1f0>)
 8003d56:	f001 fddd 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8003d5a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003d5e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003d60:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003d64:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d66:	2302      	movs	r3, #2
 8003d68:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d6a:	f107 0314 	add.w	r3, r7, #20
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4836      	ldr	r0, [pc, #216]	@ (8003e4c <MX_GPIO_Init+0x1f0>)
 8003d72:	f001 fdcf 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d7c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003d80:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d82:	2302      	movs	r3, #2
 8003d84:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d86:	f107 0314 	add.w	r3, r7, #20
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	482f      	ldr	r0, [pc, #188]	@ (8003e4c <MX_GPIO_Init+0x1f0>)
 8003d8e:	f001 fdc1 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003d92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d96:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003d9c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da2:	f107 0314 	add.w	r3, r7, #20
 8003da6:	4619      	mov	r1, r3
 8003da8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dac:	f001 fdb2 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003db0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003db4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003db6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003dba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc0:	f107 0314 	add.w	r3, r7, #20
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dca:	f001 fda3 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003dce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dd2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003dd4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003dd8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dde:	f107 0314 	add.w	r3, r7, #20
 8003de2:	4619      	mov	r1, r3
 8003de4:	4818      	ldr	r0, [pc, #96]	@ (8003e48 <MX_GPIO_Init+0x1ec>)
 8003de6:	f001 fd95 	bl	8005914 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003dea:	2200      	movs	r2, #0
 8003dec:	2100      	movs	r1, #0
 8003dee:	2006      	movs	r0, #6
 8003df0:	f001 fa29 	bl	8005246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003df4:	2006      	movs	r0, #6
 8003df6:	f001 fa40 	bl	800527a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	2008      	movs	r0, #8
 8003e00:	f001 fa21 	bl	8005246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003e04:	2008      	movs	r0, #8
 8003e06:	f001 fa38 	bl	800527a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	2009      	movs	r0, #9
 8003e10:	f001 fa19 	bl	8005246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003e14:	2009      	movs	r0, #9
 8003e16:	f001 fa30 	bl	800527a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	2017      	movs	r0, #23
 8003e20:	f001 fa11 	bl	8005246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e24:	2017      	movs	r0, #23
 8003e26:	f001 fa28 	bl	800527a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	2028      	movs	r0, #40	@ 0x28
 8003e30:	f001 fa09 	bl	8005246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e34:	2028      	movs	r0, #40	@ 0x28
 8003e36:	f001 fa20 	bl	800527a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003e3a:	bf00      	nop
 8003e3c:	3728      	adds	r7, #40	@ 0x28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000
 8003e48:	48000800 	.word	0x48000800
 8003e4c:	48000400 	.word	0x48000400

08003e50 <map>:

/* USER CODE BEGIN 4 */
float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	ed87 0a05 	vstr	s0, [r7, #20]
 8003e5a:	edc7 0a04 	vstr	s1, [r7, #16]
 8003e5e:	ed87 1a03 	vstr	s2, [r7, #12]
 8003e62:	edc7 1a02 	vstr	s3, [r7, #8]
 8003e66:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003e6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e76:	edd7 6a01 	vldr	s13, [r7, #4]
 8003e7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e7e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e82:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e86:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e96:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <DWT_Init>:

void DWT_Init(void) {
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003eb0:	4b08      	ldr	r3, [pc, #32]	@ (8003ed4 <DWT_Init+0x28>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4a07      	ldr	r2, [pc, #28]	@ (8003ed4 <DWT_Init+0x28>)
 8003eb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eba:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003ebc:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <DWT_Init+0x2c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a05      	ldr	r2, [pc, #20]	@ (8003ed8 <DWT_Init+0x2c>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	6013      	str	r3, [r2, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	e000edf0 	.word	0xe000edf0
 8003ed8:	e0001000 	.word	0xe0001000

08003edc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eec:	d10e      	bne.n	8003f0c <HAL_GPIO_EXTI_Callback+0x30>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 8003eee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ef6:	f001 fe8f 	bl	8005c18 <HAL_GPIO_ReadPin>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d105      	bne.n	8003f0c <HAL_GPIO_EXTI_Callback+0x30>
			Z_index_R += 1;
 8003f00:	4b4b      	ldr	r3, [pc, #300]	@ (8004030 <HAL_GPIO_EXTI_Callback+0x154>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	3301      	adds	r3, #1
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	4b49      	ldr	r3, [pc, #292]	@ (8004030 <HAL_GPIO_EXTI_Callback+0x154>)
 8003f0a:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_10) {
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f12:	d10d      	bne.n	8003f30 <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8003f14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003f18:	4846      	ldr	r0, [pc, #280]	@ (8004034 <HAL_GPIO_EXTI_Callback+0x158>)
 8003f1a:	f001 fe7d 	bl	8005c18 <HAL_GPIO_ReadPin>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d105      	bne.n	8003f30 <HAL_GPIO_EXTI_Callback+0x54>
			Mode = 0;
 8003f24:	4b44      	ldr	r3, [pc, #272]	@ (8004038 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 8003f2a:	4b44      	ldr	r3, [pc, #272]	@ (800403c <HAL_GPIO_EXTI_Callback+0x160>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f36:	d10e      	bne.n	8003f56 <HAL_GPIO_EXTI_Callback+0x7a>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 8003f38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f3c:	4840      	ldr	r0, [pc, #256]	@ (8004040 <HAL_GPIO_EXTI_Callback+0x164>)
 8003f3e:	f001 fe6b 	bl	8005c18 <HAL_GPIO_ReadPin>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d103      	bne.n	8003f50 <HAL_GPIO_EXTI_Callback+0x74>
			P_Limit = 1;
 8003f48:	4b3e      	ldr	r3, [pc, #248]	@ (8004044 <HAL_GPIO_EXTI_Callback+0x168>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	e002      	b.n	8003f56 <HAL_GPIO_EXTI_Callback+0x7a>
		} else {
			P_Limit = 0;
 8003f50:	4b3c      	ldr	r3, [pc, #240]	@ (8004044 <HAL_GPIO_EXTI_Callback+0x168>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f5c:	d10e      	bne.n	8003f7c <HAL_GPIO_EXTI_Callback+0xa0>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1) {
 8003f5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f62:	4837      	ldr	r0, [pc, #220]	@ (8004040 <HAL_GPIO_EXTI_Callback+0x164>)
 8003f64:	f001 fe58 	bl	8005c18 <HAL_GPIO_ReadPin>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d103      	bne.n	8003f76 <HAL_GPIO_EXTI_Callback+0x9a>
			R_Limit = 1;
 8003f6e:	4b36      	ldr	r3, [pc, #216]	@ (8004048 <HAL_GPIO_EXTI_Callback+0x16c>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	e002      	b.n	8003f7c <HAL_GPIO_EXTI_Callback+0xa0>
		} else {
			R_Limit = 0;
 8003f76:	4b34      	ldr	r3, [pc, #208]	@ (8004048 <HAL_GPIO_EXTI_Callback+0x16c>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15) {
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f82:	d102      	bne.n	8003f8a <HAL_GPIO_EXTI_Callback+0xae>
		EmergencyState = 0;
 8003f84:	4b2d      	ldr	r3, [pc, #180]	@ (800403c <HAL_GPIO_EXTI_Callback+0x160>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t state[3] = { 0 }; // 0 = waiting for rise, 1 = waiting for fall

	uint32_t now = DWT->CYCCNT;
 8003f8a:	4b30      	ldr	r3, [pc, #192]	@ (800404c <HAL_GPIO_EXTI_Callback+0x170>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	613b      	str	r3, [r7, #16]
	uint32_t idx;

	if (GPIO_Pin == GPIO_PIN_0)
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d102      	bne.n	8003f9c <HAL_GPIO_EXTI_Callback+0xc0>
		idx = 0;      // PC0
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	e00a      	b.n	8003fb2 <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_2)
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d102      	bne.n	8003fa8 <HAL_GPIO_EXTI_Callback+0xcc>
		idx = 1; // PC2
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	e004      	b.n	8003fb2 <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_3)
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d13b      	bne.n	8004026 <HAL_GPIO_EXTI_Callback+0x14a>
		idx = 2; // PC3
 8003fae:	2302      	movs	r3, #2
 8003fb0:	617b      	str	r3, [r7, #20]
	else
		return;

	if (state[idx] == 0) {
 8003fb2:	4a27      	ldr	r2, [pc, #156]	@ (8004050 <HAL_GPIO_EXTI_Callback+0x174>)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <HAL_GPIO_EXTI_Callback+0xf8>
		rise_time[idx] = now;
 8003fbe:	4925      	ldr	r1, [pc, #148]	@ (8004054 <HAL_GPIO_EXTI_Callback+0x178>)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 1;
 8003fc8:	4a21      	ldr	r2, [pc, #132]	@ (8004050 <HAL_GPIO_EXTI_Callback+0x174>)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	4413      	add	r3, r2
 8003fce:	2201      	movs	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	e029      	b.n	8004028 <HAL_GPIO_EXTI_Callback+0x14c>
	} else {
		uint32_t delta =
				(now >= rise_time[idx]) ?
 8003fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8004054 <HAL_GPIO_EXTI_Callback+0x178>)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						(now - rise_time[idx]) :
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d306      	bcc.n	8003ff0 <HAL_GPIO_EXTI_Callback+0x114>
 8003fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8004054 <HAL_GPIO_EXTI_Callback+0x178>)
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	e006      	b.n	8003ffe <HAL_GPIO_EXTI_Callback+0x122>
						(0xFFFFFFFF - rise_time[idx] + now);
 8003ff0:	4a18      	ldr	r2, [pc, #96]	@ (8004054 <HAL_GPIO_EXTI_Callback+0x178>)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
						(now - rise_time[idx]) :
 8003ffc:	3b01      	subs	r3, #1
		uint32_t delta =
 8003ffe:	60fb      	str	r3, [r7, #12]
		pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 8004000:	4b15      	ldr	r3, [pc, #84]	@ (8004058 <HAL_GPIO_EXTI_Callback+0x17c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a15      	ldr	r2, [pc, #84]	@ (800405c <HAL_GPIO_EXTI_Callback+0x180>)
 8004006:	fba2 2303 	umull	r2, r3, r2, r3
 800400a:	0c9b      	lsrs	r3, r3, #18
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004012:	4913      	ldr	r1, [pc, #76]	@ (8004060 <HAL_GPIO_EXTI_Callback+0x184>)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 0;
 800401a:	4a0d      	ldr	r2, [pc, #52]	@ (8004050 <HAL_GPIO_EXTI_Callback+0x174>)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	4413      	add	r3, r2
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	e000      	b.n	8004028 <HAL_GPIO_EXTI_Callback+0x14c>
		return;
 8004026:	bf00      	nop
	}
}
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000970 	.word	0x20000970
 8004034:	48000800 	.word	0x48000800
 8004038:	200009c4 	.word	0x200009c4
 800403c:	200009c5 	.word	0x200009c5
 8004040:	48000400 	.word	0x48000400
 8004044:	200009c9 	.word	0x200009c9
 8004048:	200009ca 	.word	0x200009ca
 800404c:	e0001000 	.word	0xe0001000
 8004050:	2000110c 	.word	0x2000110c
 8004054:	200008d0 	.word	0x200008d0
 8004058:	20000028 	.word	0x20000028
 800405c:	431bde83 	.word	0x431bde83
 8004060:	200008dc 	.word	0x200008dc

08004064 <HAL_TIM_PeriodElapsedCallback>:

//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004064:	b4b0      	push	{r4, r5, r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a08      	ldr	r2, [pc, #32]	@ (8004090 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d108      	bne.n	8004086 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8004074:	4b07      	ldr	r3, [pc, #28]	@ (8004094 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	1e54      	subs	r4, r2, #1
 800407c:	f143 0500 	adc.w	r5, r3, #0
 8004080:	4b04      	ldr	r3, [pc, #16]	@ (8004094 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004082:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	bcb0      	pop	{r4, r5, r7}
 800408e:	4770      	bx	lr
 8004090:	200003d8 	.word	0x200003d8
 8004094:	20000898 	.word	0x20000898

08004098 <micros>:
uint64_t micros() {
 8004098:	b4b0      	push	{r4, r5, r7}
 800409a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 800409c:	4b09      	ldr	r3, [pc, #36]	@ (80040c4 <micros+0x2c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	2200      	movs	r2, #0
 80040a4:	4618      	mov	r0, r3
 80040a6:	4611      	mov	r1, r2
 80040a8:	4b07      	ldr	r3, [pc, #28]	@ (80040c8 <micros+0x30>)
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	1884      	adds	r4, r0, r2
 80040b0:	eb41 0503 	adc.w	r5, r1, r3
 80040b4:	4622      	mov	r2, r4
 80040b6:	462b      	mov	r3, r5
}
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	bcb0      	pop	{r4, r5, r7}
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	200003d8 	.word	0x200003d8
 80040c8:	20000898 	.word	0x20000898

080040cc <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
		float outMin, float outMax, PID_State *state) {
 80040cc:	b480      	push	{r7}
 80040ce:	b08f      	sub	sp, #60	@ 0x3c
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	ed87 0a07 	vstr	s0, [r7, #28]
 80040d6:	edc7 0a06 	vstr	s1, [r7, #24]
 80040da:	ed87 1a05 	vstr	s2, [r7, #20]
 80040de:	edc7 1a04 	vstr	s3, [r7, #16]
 80040e2:	ed87 2a03 	vstr	s4, [r7, #12]
 80040e6:	edc7 2a02 	vstr	s5, [r7, #8]
 80040ea:	ed87 3a01 	vstr	s6, [r7, #4]
 80040ee:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 80040f0:	ed97 7a06 	vldr	s14, [r7, #24]
 80040f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80040f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	ed93 7a00 	vldr	s14, [r3]
 8004106:	edd7 6a07 	vldr	s13, [r7, #28]
 800410a:	edd7 7a03 	vldr	s15, [r7, #12]
 800410e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	ed93 7a00 	vldr	s14, [r3]
 8004122:	ed97 6a01 	vldr	s12, [r7, #4]
 8004126:	edd7 6a05 	vldr	s13, [r7, #20]
 800412a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800412e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004136:	dd08      	ble.n	800414a <PID_Update+0x7e>
		state->integ = outMax / kI;
 8004138:	edd7 6a01 	vldr	s13, [r7, #4]
 800413c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	ed93 7a00 	vldr	s14, [r3]
 8004150:	ed97 6a02 	vldr	s12, [r7, #8]
 8004154:	edd7 6a05 	vldr	s13, [r7, #20]
 8004158:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800415c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004164:	d508      	bpl.n	8004178 <PID_Update+0xac>
		state->integ = outMin / kI;
 8004166:	edd7 6a02 	vldr	s13, [r7, #8]
 800416a:	ed97 7a05 	vldr	s14, [r7, #20]
 800416e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 8004178:	edd7 7a07 	vldr	s15, [r7, #28]
 800417c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004184:	dd0b      	ble.n	800419e <PID_Update+0xd2>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004194:	d503      	bpl.n	800419e <PID_Update+0xd2>
		state->integ = 0;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 800419e:	edd7 7a07 	vldr	s15, [r7, #28]
 80041a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041aa:	d50b      	bpl.n	80041c4 <PID_Update+0xf8>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	edd3 7a00 	vldr	s15, [r3]
 80041b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ba:	dd03      	ble.n	80041c4 <PID_Update+0xf8>
		state->integ = 0;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	edd3 7a00 	vldr	s15, [r3]
 80041ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80041ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80041dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80041e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80041e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80041e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ec:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 80041f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80041f4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80041f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 8004206:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800420a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800420e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004212:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800421a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 800421e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004222:	edd7 7a01 	vldr	s15, [r7, #4]
 8004226:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800422a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422e:	dd01      	ble.n	8004234 <PID_Update+0x168>
		out = outMax;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 8004234:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004238:	edd7 7a02 	vldr	s15, [r7, #8]
 800423c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004244:	d501      	bpl.n	800424a <PID_Update+0x17e>
		out = outMin;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 800424a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800424c:	ee07 3a90 	vmov	s15, r3
}
 8004250:	eeb0 0a67 	vmov.f32	s0, s15
 8004254:	373c      	adds	r7, #60	@ 0x3c
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update() {
 8004260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 8004268:	f7ff ff16 	bl	8004098 <micros>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	497b      	ldr	r1, [pc, #492]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 8004272:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 8004276:	4b7b      	ldr	r3, [pc, #492]	@ (8004464 <Revolute_PosVel_Update+0x204>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427c:	4a78      	ldr	r2, [pc, #480]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 800427e:	6013      	str	r3, [r2, #0]

// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8004280:	4b77      	ldr	r3, [pc, #476]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004288:	ee07 3a90 	vmov	s15, r3
 800428c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004290:	4b73      	ldr	r3, [pc, #460]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 8004292:	edc3 7a06 	vstr	s15, [r3, #24]

// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8004296:	4b72      	ldr	r3, [pc, #456]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 8004298:	681a      	ldr	r2, [r3, #0]
			- Revolute_QEIdata.Position[OLD];
 800429a:	4b71      	ldr	r3, [pc, #452]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 80042a0:	60fb      	str	r3, [r7, #12]

// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042a8:	dd04      	ble.n	80042b4 <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e007      	b.n	80042c4 <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80042ba:	da03      	bge.n	80042c4 <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80042c2:	60fb      	str	r3, [r7, #12]

// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 80042c4:	4b66      	ldr	r3, [pc, #408]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 80042c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 80042ca:	4b65      	ldr	r3, [pc, #404]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 80042cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80042d0:	ebb0 0a02 	subs.w	sl, r0, r2
 80042d4:	eb61 0b03 	sbc.w	fp, r1, r3
 80042d8:	4650      	mov	r0, sl
 80042da:	4659      	mov	r1, fp
 80042dc:	f7fc fd2a 	bl	8000d34 <__aeabi_ul2f>
 80042e0:	ee07 0a10 	vmov	s14, r0
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 80042e4:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8004468 <Revolute_PosVel_Update+0x208>
 80042e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ec:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 80042f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80042f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80042f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fc:	f000 80a0 	beq.w	8004440 <Revolute_PosVel_Update+0x1e0>
		return;

// Raw angular velocity in counts/sec
	float Vel_counts_r = (float) diffPosition_r / diffTime_r;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800430a:	ed97 7a02 	vldr	s14, [r7, #8]
 800430e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004312:	edc7 7a01 	vstr	s15, [r7, #4]

// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
			- Revolute_QEIdata.QEIVelocity) / diffTime_r;
 8004316:	4b52      	ldr	r3, [pc, #328]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 8004318:	edd3 7a07 	vldr	s15, [r3, #28]
 800431c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004320:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004324:	ed97 7a02 	vldr	s14, [r7, #8]
 8004328:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r
 800432c:	4b4c      	ldr	r3, [pc, #304]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 800432e:	edc3 7a08 	vstr	s15, [r3, #32]

// Store raw velocity
	Revolute_QEIdata.QEIVelocity = Vel_counts_r;
 8004332:	4a4b      	ldr	r2, [pc, #300]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	61d3      	str	r3, [r2, #28]

// Angular velocity in rad/s
	Revolute_QEIdata.Velocity = Vel_counts_r * (2.0f * M_PI / 16384.0f);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7fc f8d1 	bl	80004e0 <__aeabi_f2d>
 800433e:	a344      	add	r3, pc, #272	@ (adr r3, 8004450 <Revolute_PosVel_Update+0x1f0>)
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	f7fc f924 	bl	8000590 <__aeabi_dmul>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	f7fc fbd8 	bl	8000b04 <__aeabi_d2f>
 8004354:	4603      	mov	r3, r0
 8004356:	4a42      	ldr	r2, [pc, #264]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 8004358:	6253      	str	r3, [r2, #36]	@ 0x24
	float R_alpha = 0.4f;
 800435a:	4b44      	ldr	r3, [pc, #272]	@ (800446c <Revolute_PosVel_Update+0x20c>)
 800435c:	603b      	str	r3, [r7, #0]
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity
 800435e:	4b40      	ldr	r3, [pc, #256]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 8004360:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004364:	edd7 7a00 	vldr	s15, [r7]
 8004368:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (1 - R_alpha) * Revolute_QEIdata.Velocity_f;
 800436c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004370:	edd7 7a00 	vldr	s15, [r7]
 8004374:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004378:	4b39      	ldr	r3, [pc, #228]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 800437a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800437e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004382:	ee77 7a27 	vadd.f32	s15, s14, s15
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity
 8004386:	4b36      	ldr	r3, [pc, #216]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 8004388:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

// Angular acceleration in rad/s²
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 800438c:	4b34      	ldr	r3, [pc, #208]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc f8a5 	bl	80004e0 <__aeabi_f2d>
			* (2.0f * M_PI / 16384.0f);
 8004396:	a32e      	add	r3, pc, #184	@ (adr r3, 8004450 <Revolute_PosVel_Update+0x1f0>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f7fc f8f8 	bl	8000590 <__aeabi_dmul>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4610      	mov	r0, r2
 80043a6:	4619      	mov	r1, r3
 80043a8:	f7fc fbac 	bl	8000b04 <__aeabi_d2f>
 80043ac:	4603      	mov	r3, r0
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration
 80043ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 80043b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 80043b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 80043b4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80043b8:	68f9      	ldr	r1, [r7, #12]
 80043ba:	17c8      	asrs	r0, r1, #31
 80043bc:	460c      	mov	r4, r1
 80043be:	4605      	mov	r5, r0
 80043c0:	eb12 0804 	adds.w	r8, r2, r4
 80043c4:	eb43 0905 	adc.w	r9, r3, r5
 80043c8:	4b25      	ldr	r3, [pc, #148]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 80043ca:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 80043ce:	4b24      	ldr	r3, [pc, #144]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 80043d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (2.0f * M_PI / 16384.0f);
 80043d4:	4610      	mov	r0, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	f7fc f8ac 	bl	8000534 <__aeabi_l2d>
 80043dc:	a31c      	add	r3, pc, #112	@ (adr r3, 8004450 <Revolute_PosVel_Update+0x1f0>)
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f7fc f8d5 	bl	8000590 <__aeabi_dmul>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	f7fc fb89 	bl	8000b04 <__aeabi_d2f>
 80043f2:	4603      	mov	r3, r0
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 80043f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 80043f6:	6393      	str	r3, [r2, #56]	@ 0x38

// Deg position
	Revolute_QEIdata.DegPosition = Revolute_QEIdata.RadPosition * 180 / M_PI;
 80043f8:	4b19      	ldr	r3, [pc, #100]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 80043fa:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80043fe:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004470 <Revolute_PosVel_Update+0x210>
 8004402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004406:	ee17 0a90 	vmov	r0, s15
 800440a:	f7fc f869 	bl	80004e0 <__aeabi_f2d>
 800440e:	a312      	add	r3, pc, #72	@ (adr r3, 8004458 <Revolute_PosVel_Update+0x1f8>)
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	f7fc f9e6 	bl	80007e4 <__aeabi_ddiv>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4610      	mov	r0, r2
 800441e:	4619      	mov	r1, r3
 8004420:	f7fc fb70 	bl	8000b04 <__aeabi_d2f>
 8004424:	4603      	mov	r3, r0
 8004426:	4a0e      	ldr	r2, [pc, #56]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 8004428:	63d3      	str	r3, [r2, #60]	@ 0x3c

// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 800442a:	4b0d      	ldr	r3, [pc, #52]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a0c      	ldr	r2, [pc, #48]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 8004430:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 8004432:	4b0b      	ldr	r3, [pc, #44]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 8004434:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004438:	4909      	ldr	r1, [pc, #36]	@ (8004460 <Revolute_PosVel_Update+0x200>)
 800443a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800443e:	e000      	b.n	8004442 <Revolute_PosVel_Update+0x1e2>
		return;
 8004440:	bf00      	nop
}
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800444a:	bf00      	nop
 800444c:	f3af 8000 	nop.w
 8004450:	54442d18 	.word	0x54442d18
 8004454:	3f3921fb 	.word	0x3f3921fb
 8004458:	54442d18 	.word	0x54442d18
 800445c:	400921fb 	.word	0x400921fb
 8004460:	200008f0 	.word	0x200008f0
 8004464:	2000030c 	.word	0x2000030c
 8004468:	358637bd 	.word	0x358637bd
 800446c:	3ecccccd 	.word	0x3ecccccd
 8004470:	43340000 	.word	0x43340000

08004474 <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update() {
 8004474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004478:	b084      	sub	sp, #16
 800447a:	af00      	add	r7, sp, #0
// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 800447c:	f7ff fe0c 	bl	8004098 <micros>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4958      	ldr	r1, [pc, #352]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 8004486:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 800448a:	4b58      	ldr	r3, [pc, #352]	@ (80045ec <Prismatic_PosVel_Update+0x178>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004490:	4a55      	ldr	r2, [pc, #340]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 8004492:	6013      	str	r3, [r2, #0]

// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004494:	4b54      	ldr	r3, [pc, #336]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 8004496:	681a      	ldr	r2, [r3, #0]
			- Prismatic_QEIdata.Position[OLD];
 8004498:	4b53      	ldr	r3, [pc, #332]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 800449e:	60fb      	str	r3, [r7, #12]

// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a6:	dd04      	ble.n	80044b2 <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e007      	b.n	80044c2 <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80044b8:	da03      	bge.n	80044c2 <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80044c0:	60fb      	str	r3, [r7, #12]

// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 80044c2:	4b49      	ldr	r3, [pc, #292]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 80044c4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 80044c8:	4b47      	ldr	r3, [pc, #284]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 80044ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80044ce:	ebb0 0a02 	subs.w	sl, r0, r2
 80044d2:	eb61 0b03 	sbc.w	fp, r1, r3
 80044d6:	4650      	mov	r0, sl
 80044d8:	4659      	mov	r1, fp
 80044da:	f7fc fc2b 	bl	8000d34 <__aeabi_ul2f>
 80044de:	ee07 0a10 	vmov	s14, r0
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 80044e2:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80045f0 <Prismatic_PosVel_Update+0x17c>
 80044e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ea:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 80044ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80044f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80044f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fa:	d070      	beq.n	80045de <Prismatic_PosVel_Update+0x16a>
		return;

// Raw angular velocity in counts/sec
	float Vel_counts_p = (float) diffPosition_p / diffTime_p;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004506:	ed97 7a02 	vldr	s14, [r7, #8]
 800450a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800450e:	edc7 7a01 	vstr	s15, [r7, #4]

// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
			- Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 8004512:	4b35      	ldr	r3, [pc, #212]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 8004514:	edd3 7a06 	vldr	s15, [r3, #24]
 8004518:	ed97 7a01 	vldr	s14, [r7, #4]
 800451c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004520:	ed97 7a02 	vldr	s14, [r7, #8]
 8004524:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
 8004528:	4b2f      	ldr	r3, [pc, #188]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 800452a:	edc3 7a07 	vstr	s15, [r3, #28]

// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 800452e:	4a2e      	ldr	r2, [pc, #184]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6193      	str	r3, [r2, #24]

// Velocity in mm/s
	Prismatic_QEIdata.Velocity = Vel_counts_p * (10.0f / 8192.0f);
 8004534:	edd7 7a01 	vldr	s15, [r7, #4]
 8004538:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80045f4 <Prismatic_PosVel_Update+0x180>
 800453c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004540:	4b29      	ldr	r3, [pc, #164]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 8004542:	edc3 7a08 	vstr	s15, [r3, #32]
	float P_alpha = 0.4f;
 8004546:	4b2c      	ldr	r3, [pc, #176]	@ (80045f8 <Prismatic_PosVel_Update+0x184>)
 8004548:	603b      	str	r3, [r7, #0]
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity
 800454a:	4b27      	ldr	r3, [pc, #156]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 800454c:	ed93 7a08 	vldr	s14, [r3, #32]
 8004550:	edd7 7a00 	vldr	s15, [r7]
 8004554:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ (1 - P_alpha) * Prismatic_QEIdata.Velocity_f;
 8004558:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800455c:	edd7 7a00 	vldr	s15, [r7]
 8004560:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004564:	4b20      	ldr	r3, [pc, #128]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 8004566:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800456a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800456e:	ee77 7a27 	vadd.f32	s15, s14, s15
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity
 8004572:	4b1d      	ldr	r3, [pc, #116]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 8004574:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004578:	4b1b      	ldr	r3, [pc, #108]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 800457a:	edd3 7a07 	vldr	s15, [r3, #28]
			* (10.0f / 8192.0f);
 800457e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80045f4 <Prismatic_PosVel_Update+0x180>
 8004582:	ee67 7a87 	vmul.f32	s15, s15, s14
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration
 8004586:	4b18      	ldr	r3, [pc, #96]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 8004588:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 800458c:	4b16      	ldr	r3, [pc, #88]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 800458e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004592:	68f9      	ldr	r1, [r7, #12]
 8004594:	17c8      	asrs	r0, r1, #31
 8004596:	460c      	mov	r4, r1
 8004598:	4605      	mov	r5, r0
 800459a:	eb12 0804 	adds.w	r8, r2, r4
 800459e:	eb43 0905 	adc.w	r9, r3, r5
 80045a2:	4b11      	ldr	r3, [pc, #68]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 80045a4:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 80045a8:	4b0f      	ldr	r3, [pc, #60]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 80045aa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (10.0f / 8192.0f);
 80045ae:	4610      	mov	r0, r2
 80045b0:	4619      	mov	r1, r3
 80045b2:	f7fc fbc7 	bl	8000d44 <__aeabi_l2f>
 80045b6:	ee07 0a10 	vmov	s14, r0
 80045ba:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80045f4 <Prismatic_PosVel_Update+0x180>
 80045be:	ee67 7a27 	vmul.f32	s15, s14, s15
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 80045c2:	4b09      	ldr	r3, [pc, #36]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 80045c4:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 80045c8:	4b07      	ldr	r3, [pc, #28]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a06      	ldr	r2, [pc, #24]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 80045ce:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 80045d0:	4b05      	ldr	r3, [pc, #20]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 80045d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80045d6:	4904      	ldr	r1, [pc, #16]	@ (80045e8 <Prismatic_PosVel_Update+0x174>)
 80045d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80045dc:	e000      	b.n	80045e0 <Prismatic_PosVel_Update+0x16c>
		return;
 80045de:	bf00      	nop
}
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045e8:	20000930 	.word	0x20000930
 80045ec:	20000240 	.word	0x20000240
 80045f0:	358637bd 	.word	0x358637bd
 80045f4:	3aa00000 	.word	0x3aa00000
 80045f8:	3ecccccd 	.word	0x3ecccccd

080045fc <Set_Motor>:

void Set_Motor(int motor_num, float speed) {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)
 8004608:	edd7 7a00 	vldr	s15, [r7]
 800460c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80046e0 <Set_Motor+0xe4>
 8004610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004618:	dd01      	ble.n	800461e <Set_Motor+0x22>
		speed = 100.0f;
 800461a:	4b32      	ldr	r3, [pc, #200]	@ (80046e4 <Set_Motor+0xe8>)
 800461c:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f)
 800461e:	edd7 7a00 	vldr	s15, [r7]
 8004622:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80046e8 <Set_Motor+0xec>
 8004626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462e:	d501      	bpl.n	8004634 <Set_Motor+0x38>
		speed = -100.0f;
 8004630:	4b2e      	ldr	r3, [pc, #184]	@ (80046ec <Set_Motor+0xf0>)
 8004632:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t) ((fabsf(speed) * 100) / 100);
 8004634:	edd7 7a00 	vldr	s15, [r7]
 8004638:	eef0 7ae7 	vabs.f32	s15, s15
 800463c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80046e0 <Set_Motor+0xe4>
 8004640:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004644:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80046e0 <Set_Motor+0xe4>
 8004648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800464c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004650:	ee17 3a90 	vmov	r3, s15
 8004654:	60fb      	str	r3, [r7, #12]
	if (motor_num == 0) {
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d11d      	bne.n	8004698 <Set_Motor+0x9c>
		if (speed > 0) {
 800465c:	edd7 7a00 	vldr	s15, [r7]
 8004660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004668:	dd05      	ble.n	8004676 <Set_Motor+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800466a:	2200      	movs	r2, #0
 800466c:	2120      	movs	r1, #32
 800466e:	4820      	ldr	r0, [pc, #128]	@ (80046f0 <Set_Motor+0xf4>)
 8004670:	f001 faea 	bl	8005c48 <HAL_GPIO_WritePin>
 8004674:	e00b      	b.n	800468e <Set_Motor+0x92>
		} else if (speed < 0) {
 8004676:	edd7 7a00 	vldr	s15, [r7]
 800467a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004682:	d504      	bpl.n	800468e <Set_Motor+0x92>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8004684:	2201      	movs	r2, #1
 8004686:	2120      	movs	r1, #32
 8004688:	4819      	ldr	r0, [pc, #100]	@ (80046f0 <Set_Motor+0xf4>)
 800468a:	f001 fadd 	bl	8005c48 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 800468e:	4b19      	ldr	r3, [pc, #100]	@ (80046f4 <Set_Motor+0xf8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	63da      	str	r2, [r3, #60]	@ 0x3c
		} else if (speed < 0) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 8004696:	e01f      	b.n	80046d8 <Set_Motor+0xdc>
	} else if (motor_num == 1) {
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d11c      	bne.n	80046d8 <Set_Motor+0xdc>
		if (speed > 0) {
 800469e:	edd7 7a00 	vldr	s15, [r7]
 80046a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046aa:	dd05      	ble.n	80046b8 <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80046ac:	2200      	movs	r2, #0
 80046ae:	2140      	movs	r1, #64	@ 0x40
 80046b0:	480f      	ldr	r0, [pc, #60]	@ (80046f0 <Set_Motor+0xf4>)
 80046b2:	f001 fac9 	bl	8005c48 <HAL_GPIO_WritePin>
 80046b6:	e00b      	b.n	80046d0 <Set_Motor+0xd4>
		} else if (speed < 0) {
 80046b8:	edd7 7a00 	vldr	s15, [r7]
 80046bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c4:	d504      	bpl.n	80046d0 <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80046c6:	2201      	movs	r2, #1
 80046c8:	2140      	movs	r1, #64	@ 0x40
 80046ca:	4809      	ldr	r0, [pc, #36]	@ (80046f0 <Set_Motor+0xf4>)
 80046cc:	f001 fabc 	bl	8005c48 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 80046d0:	4b08      	ldr	r3, [pc, #32]	@ (80046f4 <Set_Motor+0xf8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	42c80000 	.word	0x42c80000
 80046e4:	42c80000 	.word	0x42c80000
 80046e8:	c2c80000 	.word	0xc2c80000
 80046ec:	c2c80000 	.word	0xc2c80000
 80046f0:	48000800 	.word	0x48000800
 80046f4:	200004a4 	.word	0x200004a4

080046f8 <Set_Servo>:

void Set_Servo(int Pen_Pos) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0) {
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10f      	bne.n	8004726 <Set_Servo+0x2e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 8004706:	4b0e      	ldr	r3, [pc, #56]	@ (8004740 <Set_Servo+0x48>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800470e:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 8004710:	4b0c      	ldr	r3, [pc, #48]	@ (8004744 <Set_Servo+0x4c>)
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 8004716:	f7ff fcbf 	bl	8004098 <micros>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	490a      	ldr	r1, [pc, #40]	@ (8004748 <Set_Servo+0x50>)
 8004720:	e9c1 2300 	strd	r2, r3, [r1]
	} else {
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 8004724:	e007      	b.n	8004736 <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 8004726:	4b06      	ldr	r3, [pc, #24]	@ (8004740 <Set_Servo+0x48>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800472e:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 8004730:	4b04      	ldr	r3, [pc, #16]	@ (8004744 <Set_Servo+0x4c>)
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000570 	.word	0x20000570
 8004744:	200009c8 	.word	0x200009c8
 8004748:	20000a38 	.word	0x20000a38

0800474c <Reset_R>:

void Reset_R() {
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 8004750:	4905      	ldr	r1, [pc, #20]	@ (8004768 <Reset_R+0x1c>)
 8004752:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 800475e:	bf00      	nop
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	200008f0 	.word	0x200008f0

0800476c <Reset_P>:
void Reset_P() {
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 8004770:	4905      	ldr	r1, [pc, #20]	@ (8004788 <Reset_P+0x1c>)
 8004772:	4a06      	ldr	r2, [pc, #24]	@ (800478c <Reset_P+0x20>)
 8004774:	f04f 33ff 	mov.w	r3, #4294967295
 8004778:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
//	Prismatic_QEIdata.mmPosition = 0;
}
 800477c:	bf00      	nop
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000930 	.word	0x20000930
 800478c:	fffff99a 	.word	0xfffff99a

08004790 <Workspace_limit>:

void Workspace_limit() {
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
	if (Revolute_QEIdata.RadPosition < -1.91986 && R_PWM > 0) {
 8004794:	4b34      	ldr	r3, [pc, #208]	@ (8004868 <Workspace_limit+0xd8>)
 8004796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004798:	4618      	mov	r0, r3
 800479a:	f7fb fea1 	bl	80004e0 <__aeabi_f2d>
 800479e:	a32e      	add	r3, pc, #184	@ (adr r3, 8004858 <Workspace_limit+0xc8>)
 80047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a4:	f7fc f966 	bl	8000a74 <__aeabi_dcmplt>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00b      	beq.n	80047c6 <Workspace_limit+0x36>
 80047ae:	4b2f      	ldr	r3, [pc, #188]	@ (800486c <Workspace_limit+0xdc>)
 80047b0:	edd3 7a00 	vldr	s15, [r3]
 80047b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047bc:	dd03      	ble.n	80047c6 <Workspace_limit+0x36>
		R_PWM = 0;
 80047be:	4b2b      	ldr	r3, [pc, #172]	@ (800486c <Workspace_limit+0xdc>)
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
	}
	if (Revolute_QEIdata.RadPosition > 5.06145 && R_PWM < 0) {
 80047c6:	4b28      	ldr	r3, [pc, #160]	@ (8004868 <Workspace_limit+0xd8>)
 80047c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fb fe88 	bl	80004e0 <__aeabi_f2d>
 80047d0:	a323      	add	r3, pc, #140	@ (adr r3, 8004860 <Workspace_limit+0xd0>)
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	f7fc f96b 	bl	8000ab0 <__aeabi_dcmpgt>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <Workspace_limit+0x68>
 80047e0:	4b22      	ldr	r3, [pc, #136]	@ (800486c <Workspace_limit+0xdc>)
 80047e2:	edd3 7a00 	vldr	s15, [r3]
 80047e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ee:	d503      	bpl.n	80047f8 <Workspace_limit+0x68>
		R_PWM = 0;
 80047f0:	4b1e      	ldr	r3, [pc, #120]	@ (800486c <Workspace_limit+0xdc>)
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition > 305 && P_PWM > 0) {
 80047f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004870 <Workspace_limit+0xe0>)
 80047fa:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80047fe:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004874 <Workspace_limit+0xe4>
 8004802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480a:	dd0b      	ble.n	8004824 <Workspace_limit+0x94>
 800480c:	4b1a      	ldr	r3, [pc, #104]	@ (8004878 <Workspace_limit+0xe8>)
 800480e:	edd3 7a00 	vldr	s15, [r3]
 8004812:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481a:	dd03      	ble.n	8004824 <Workspace_limit+0x94>
		P_PWM = 0;
 800481c:	4b16      	ldr	r3, [pc, #88]	@ (8004878 <Workspace_limit+0xe8>)
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 8004824:	4b12      	ldr	r3, [pc, #72]	@ (8004870 <Workspace_limit+0xe0>)
 8004826:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800482a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800482e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004836:	d400      	bmi.n	800483a <Workspace_limit+0xaa>
		P_PWM = 0;
	}
}
 8004838:	e00c      	b.n	8004854 <Workspace_limit+0xc4>
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0) {
 800483a:	4b0f      	ldr	r3, [pc, #60]	@ (8004878 <Workspace_limit+0xe8>)
 800483c:	edd3 7a00 	vldr	s15, [r3]
 8004840:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004848:	d400      	bmi.n	800484c <Workspace_limit+0xbc>
}
 800484a:	e003      	b.n	8004854 <Workspace_limit+0xc4>
		P_PWM = 0;
 800484c:	4b0a      	ldr	r3, [pc, #40]	@ (8004878 <Workspace_limit+0xe8>)
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
}
 8004854:	bf00      	nop
 8004856:	bd80      	pop	{r7, pc}
 8004858:	1e8e6080 	.word	0x1e8e6080
 800485c:	bffeb7bf 	.word	0xbffeb7bf
 8004860:	bfb15b57 	.word	0xbfb15b57
 8004864:	40143eec 	.word	0x40143eec
 8004868:	200008f0 	.word	0x200008f0
 800486c:	200009bc 	.word	0x200009bc
 8004870:	20000930 	.word	0x20000930
 8004874:	43988000 	.word	0x43988000
 8004878:	200009c0 	.word	0x200009c0

0800487c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004880:	b672      	cpsid	i
}
 8004882:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004884:	bf00      	nop
 8004886:	e7fd      	b.n	8004884 <Error_Handler+0x8>

08004888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800488e:	4b0f      	ldr	r3, [pc, #60]	@ (80048cc <HAL_MspInit+0x44>)
 8004890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004892:	4a0e      	ldr	r2, [pc, #56]	@ (80048cc <HAL_MspInit+0x44>)
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	6613      	str	r3, [r2, #96]	@ 0x60
 800489a:	4b0c      	ldr	r3, [pc, #48]	@ (80048cc <HAL_MspInit+0x44>)
 800489c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	607b      	str	r3, [r7, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048a6:	4b09      	ldr	r3, [pc, #36]	@ (80048cc <HAL_MspInit+0x44>)
 80048a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048aa:	4a08      	ldr	r2, [pc, #32]	@ (80048cc <HAL_MspInit+0x44>)
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80048b2:	4b06      	ldr	r3, [pc, #24]	@ (80048cc <HAL_MspInit+0x44>)
 80048b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80048be:	f001 fa97 	bl	8005df0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048c2:	bf00      	nop
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000

080048d0 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08c      	sub	sp, #48	@ 0x30
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d8:	f107 031c 	add.w	r3, r7, #28
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a32      	ldr	r2, [pc, #200]	@ (80049b8 <HAL_TIM_IC_MspInit+0xe8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d130      	bne.n	8004954 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048f2:	4b32      	ldr	r3, [pc, #200]	@ (80049bc <HAL_TIM_IC_MspInit+0xec>)
 80048f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f6:	4a31      	ldr	r2, [pc, #196]	@ (80049bc <HAL_TIM_IC_MspInit+0xec>)
 80048f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80048fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80048fe:	4b2f      	ldr	r3, [pc, #188]	@ (80049bc <HAL_TIM_IC_MspInit+0xec>)
 8004900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004906:	61bb      	str	r3, [r7, #24]
 8004908:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800490a:	4b2c      	ldr	r3, [pc, #176]	@ (80049bc <HAL_TIM_IC_MspInit+0xec>)
 800490c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800490e:	4a2b      	ldr	r2, [pc, #172]	@ (80049bc <HAL_TIM_IC_MspInit+0xec>)
 8004910:	f043 0304 	orr.w	r3, r3, #4
 8004914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004916:	4b29      	ldr	r3, [pc, #164]	@ (80049bc <HAL_TIM_IC_MspInit+0xec>)
 8004918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004922:	2302      	movs	r3, #2
 8004924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004926:	2302      	movs	r3, #2
 8004928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492a:	2300      	movs	r3, #0
 800492c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800492e:	2300      	movs	r3, #0
 8004930:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004932:	2302      	movs	r3, #2
 8004934:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004936:	f107 031c 	add.w	r3, r7, #28
 800493a:	4619      	mov	r1, r3
 800493c:	4820      	ldr	r0, [pc, #128]	@ (80049c0 <HAL_TIM_IC_MspInit+0xf0>)
 800493e:	f000 ffe9 	bl	8005914 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004942:	2200      	movs	r2, #0
 8004944:	2100      	movs	r1, #0
 8004946:	2019      	movs	r0, #25
 8004948:	f000 fc7d 	bl	8005246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800494c:	2019      	movs	r0, #25
 800494e:	f000 fc94 	bl	800527a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004952:	e02d      	b.n	80049b0 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800495c:	d128      	bne.n	80049b0 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800495e:	4b17      	ldr	r3, [pc, #92]	@ (80049bc <HAL_TIM_IC_MspInit+0xec>)
 8004960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004962:	4a16      	ldr	r2, [pc, #88]	@ (80049bc <HAL_TIM_IC_MspInit+0xec>)
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	6593      	str	r3, [r2, #88]	@ 0x58
 800496a:	4b14      	ldr	r3, [pc, #80]	@ (80049bc <HAL_TIM_IC_MspInit+0xec>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004976:	4b11      	ldr	r3, [pc, #68]	@ (80049bc <HAL_TIM_IC_MspInit+0xec>)
 8004978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800497a:	4a10      	ldr	r2, [pc, #64]	@ (80049bc <HAL_TIM_IC_MspInit+0xec>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004982:	4b0e      	ldr	r3, [pc, #56]	@ (80049bc <HAL_TIM_IC_MspInit+0xec>)
 8004984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800498e:	2301      	movs	r3, #1
 8004990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004992:	2302      	movs	r3, #2
 8004994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004996:	2300      	movs	r3, #0
 8004998:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800499a:	2300      	movs	r3, #0
 800499c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800499e:	2301      	movs	r3, #1
 80049a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a2:	f107 031c 	add.w	r3, r7, #28
 80049a6:	4619      	mov	r1, r3
 80049a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049ac:	f000 ffb2 	bl	8005914 <HAL_GPIO_Init>
}
 80049b0:	bf00      	nop
 80049b2:	3730      	adds	r7, #48	@ 0x30
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40012c00 	.word	0x40012c00
 80049bc:	40021000 	.word	0x40021000
 80049c0:	48000800 	.word	0x48000800

080049c4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08c      	sub	sp, #48	@ 0x30
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049cc:	f107 031c 	add.w	r3, r7, #28
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	605a      	str	r2, [r3, #4]
 80049d6:	609a      	str	r2, [r3, #8]
 80049d8:	60da      	str	r2, [r3, #12]
 80049da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a37      	ldr	r2, [pc, #220]	@ (8004ac0 <HAL_TIM_Encoder_MspInit+0xfc>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d130      	bne.n	8004a48 <HAL_TIM_Encoder_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80049e6:	4b37      	ldr	r3, [pc, #220]	@ (8004ac4 <HAL_TIM_Encoder_MspInit+0x100>)
 80049e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ea:	4a36      	ldr	r2, [pc, #216]	@ (8004ac4 <HAL_TIM_Encoder_MspInit+0x100>)
 80049ec:	f043 0302 	orr.w	r3, r3, #2
 80049f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80049f2:	4b34      	ldr	r3, [pc, #208]	@ (8004ac4 <HAL_TIM_Encoder_MspInit+0x100>)
 80049f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049fe:	4b31      	ldr	r3, [pc, #196]	@ (8004ac4 <HAL_TIM_Encoder_MspInit+0x100>)
 8004a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a02:	4a30      	ldr	r2, [pc, #192]	@ (8004ac4 <HAL_TIM_Encoder_MspInit+0x100>)
 8004a04:	f043 0302 	orr.w	r3, r3, #2
 8004a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8004ac4 <HAL_TIM_Encoder_MspInit+0x100>)
 8004a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004a16:	2330      	movs	r3, #48	@ 0x30
 8004a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a22:	2300      	movs	r3, #0
 8004a24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004a26:	2302      	movs	r3, #2
 8004a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2a:	f107 031c 	add.w	r3, r7, #28
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4825      	ldr	r0, [pc, #148]	@ (8004ac8 <HAL_TIM_Encoder_MspInit+0x104>)
 8004a32:	f000 ff6f 	bl	8005914 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004a36:	2200      	movs	r2, #0
 8004a38:	2100      	movs	r1, #0
 8004a3a:	201d      	movs	r0, #29
 8004a3c:	f000 fc03 	bl	8005246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a40:	201d      	movs	r0, #29
 8004a42:	f000 fc1a 	bl	800527a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004a46:	e036      	b.n	8004ab6 <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM4)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004acc <HAL_TIM_Encoder_MspInit+0x108>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d131      	bne.n	8004ab6 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004a52:	4b1c      	ldr	r3, [pc, #112]	@ (8004ac4 <HAL_TIM_Encoder_MspInit+0x100>)
 8004a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a56:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac4 <HAL_TIM_Encoder_MspInit+0x100>)
 8004a58:	f043 0304 	orr.w	r3, r3, #4
 8004a5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a5e:	4b19      	ldr	r3, [pc, #100]	@ (8004ac4 <HAL_TIM_Encoder_MspInit+0x100>)
 8004a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a6a:	4b16      	ldr	r3, [pc, #88]	@ (8004ac4 <HAL_TIM_Encoder_MspInit+0x100>)
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a6e:	4a15      	ldr	r2, [pc, #84]	@ (8004ac4 <HAL_TIM_Encoder_MspInit+0x100>)
 8004a70:	f043 0301 	orr.w	r3, r3, #1
 8004a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a76:	4b13      	ldr	r3, [pc, #76]	@ (8004ac4 <HAL_TIM_Encoder_MspInit+0x100>)
 8004a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004a82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a90:	2300      	movs	r3, #0
 8004a92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004a94:	230a      	movs	r3, #10
 8004a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a98:	f107 031c 	add.w	r3, r7, #28
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004aa2:	f000 ff37 	bl	8005914 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	201e      	movs	r0, #30
 8004aac:	f000 fbcb 	bl	8005246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004ab0:	201e      	movs	r0, #30
 8004ab2:	f000 fbe2 	bl	800527a <HAL_NVIC_EnableIRQ>
}
 8004ab6:	bf00      	nop
 8004ab8:	3730      	adds	r7, #48	@ 0x30
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40000400 	.word	0x40000400
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	48000400 	.word	0x48000400
 8004acc:	40000800 	.word	0x40000800

08004ad0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a2c      	ldr	r2, [pc, #176]	@ (8004b90 <HAL_TIM_Base_MspInit+0xc0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d114      	bne.n	8004b0c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8004b94 <HAL_TIM_Base_MspInit+0xc4>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae6:	4a2b      	ldr	r2, [pc, #172]	@ (8004b94 <HAL_TIM_Base_MspInit+0xc4>)
 8004ae8:	f043 0308 	orr.w	r3, r3, #8
 8004aec:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aee:	4b29      	ldr	r3, [pc, #164]	@ (8004b94 <HAL_TIM_Base_MspInit+0xc4>)
 8004af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004afa:	2200      	movs	r2, #0
 8004afc:	2100      	movs	r1, #0
 8004afe:	2032      	movs	r0, #50	@ 0x32
 8004b00:	f000 fba1 	bl	8005246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004b04:	2032      	movs	r0, #50	@ 0x32
 8004b06:	f000 fbb8 	bl	800527a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004b0a:	e03c      	b.n	8004b86 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a21      	ldr	r2, [pc, #132]	@ (8004b98 <HAL_TIM_Base_MspInit+0xc8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d10c      	bne.n	8004b30 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004b16:	4b1f      	ldr	r3, [pc, #124]	@ (8004b94 <HAL_TIM_Base_MspInit+0xc4>)
 8004b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b94 <HAL_TIM_Base_MspInit+0xc4>)
 8004b1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004b20:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b22:	4b1c      	ldr	r3, [pc, #112]	@ (8004b94 <HAL_TIM_Base_MspInit+0xc4>)
 8004b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	693b      	ldr	r3, [r7, #16]
}
 8004b2e:	e02a      	b.n	8004b86 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM15)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a19      	ldr	r2, [pc, #100]	@ (8004b9c <HAL_TIM_Base_MspInit+0xcc>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d10c      	bne.n	8004b54 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004b3a:	4b16      	ldr	r3, [pc, #88]	@ (8004b94 <HAL_TIM_Base_MspInit+0xc4>)
 8004b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b3e:	4a15      	ldr	r2, [pc, #84]	@ (8004b94 <HAL_TIM_Base_MspInit+0xc4>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b44:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b46:	4b13      	ldr	r3, [pc, #76]	@ (8004b94 <HAL_TIM_Base_MspInit+0xc4>)
 8004b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
}
 8004b52:	e018      	b.n	8004b86 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a11      	ldr	r2, [pc, #68]	@ (8004ba0 <HAL_TIM_Base_MspInit+0xd0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d113      	bne.n	8004b86 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b94 <HAL_TIM_Base_MspInit+0xc4>)
 8004b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b62:	4a0c      	ldr	r2, [pc, #48]	@ (8004b94 <HAL_TIM_Base_MspInit+0xc4>)
 8004b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b68:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b94 <HAL_TIM_Base_MspInit+0xc4>)
 8004b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b72:	60bb      	str	r3, [r7, #8]
 8004b74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004b76:	2200      	movs	r2, #0
 8004b78:	2100      	movs	r1, #0
 8004b7a:	2019      	movs	r0, #25
 8004b7c:	f000 fb63 	bl	8005246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004b80:	2019      	movs	r0, #25
 8004b82:	f000 fb7a 	bl	800527a <HAL_NVIC_EnableIRQ>
}
 8004b86:	bf00      	nop
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40000c00 	.word	0x40000c00
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40013400 	.word	0x40013400
 8004b9c:	40014000 	.word	0x40014000
 8004ba0:	40014400 	.word	0x40014400

08004ba4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	@ 0x28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bac:	f107 0314 	add.w	r3, r7, #20
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	605a      	str	r2, [r3, #4]
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	60da      	str	r2, [r3, #12]
 8004bba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a23      	ldr	r2, [pc, #140]	@ (8004c50 <HAL_TIM_MspPostInit+0xac>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d11d      	bne.n	8004c02 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bc6:	4b23      	ldr	r3, [pc, #140]	@ (8004c54 <HAL_TIM_MspPostInit+0xb0>)
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bca:	4a22      	ldr	r2, [pc, #136]	@ (8004c54 <HAL_TIM_MspPostInit+0xb0>)
 8004bcc:	f043 0304 	orr.w	r3, r3, #4
 8004bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bd2:	4b20      	ldr	r3, [pc, #128]	@ (8004c54 <HAL_TIM_MspPostInit+0xb0>)
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004bde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be4:	2302      	movs	r3, #2
 8004be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bec:	2300      	movs	r3, #0
 8004bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bf4:	f107 0314 	add.w	r3, r7, #20
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4817      	ldr	r0, [pc, #92]	@ (8004c58 <HAL_TIM_MspPostInit+0xb4>)
 8004bfc:	f000 fe8a 	bl	8005914 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004c00:	e021      	b.n	8004c46 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a15      	ldr	r2, [pc, #84]	@ (8004c5c <HAL_TIM_MspPostInit+0xb8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d11c      	bne.n	8004c46 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c0c:	4b11      	ldr	r3, [pc, #68]	@ (8004c54 <HAL_TIM_MspPostInit+0xb0>)
 8004c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c10:	4a10      	ldr	r2, [pc, #64]	@ (8004c54 <HAL_TIM_MspPostInit+0xb0>)
 8004c12:	f043 0302 	orr.w	r3, r3, #2
 8004c16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c18:	4b0e      	ldr	r3, [pc, #56]	@ (8004c54 <HAL_TIM_MspPostInit+0xb0>)
 8004c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004c24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c32:	2300      	movs	r3, #0
 8004c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8004c36:	2301      	movs	r3, #1
 8004c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c3a:	f107 0314 	add.w	r3, r7, #20
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4807      	ldr	r0, [pc, #28]	@ (8004c60 <HAL_TIM_MspPostInit+0xbc>)
 8004c42:	f000 fe67 	bl	8005914 <HAL_GPIO_Init>
}
 8004c46:	bf00      	nop
 8004c48:	3728      	adds	r7, #40	@ 0x28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40013400 	.word	0x40013400
 8004c54:	40021000 	.word	0x40021000
 8004c58:	48000800 	.word	0x48000800
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	48000400 	.word	0x48000400

08004c64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b09e      	sub	sp, #120	@ 0x78
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c6c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	609a      	str	r2, [r3, #8]
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c7c:	f107 0310 	add.w	r3, r7, #16
 8004c80:	2254      	movs	r2, #84	@ 0x54
 8004c82:	2100      	movs	r1, #0
 8004c84:	4618      	mov	r0, r3
 8004c86:	f006 fbe7 	bl	800b458 <memset>
  if(huart->Instance==USART2)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a4d      	ldr	r2, [pc, #308]	@ (8004dc4 <HAL_UART_MspInit+0x160>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	f040 8092 	bne.w	8004dba <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004c96:	2302      	movs	r3, #2
 8004c98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c9e:	f107 0310 	add.w	r3, r7, #16
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 fde2 	bl	800686c <HAL_RCCEx_PeriphCLKConfig>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004cae:	f7ff fde5 	bl	800487c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004cb2:	4b45      	ldr	r3, [pc, #276]	@ (8004dc8 <HAL_UART_MspInit+0x164>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb6:	4a44      	ldr	r2, [pc, #272]	@ (8004dc8 <HAL_UART_MspInit+0x164>)
 8004cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cbe:	4b42      	ldr	r3, [pc, #264]	@ (8004dc8 <HAL_UART_MspInit+0x164>)
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cca:	4b3f      	ldr	r3, [pc, #252]	@ (8004dc8 <HAL_UART_MspInit+0x164>)
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cce:	4a3e      	ldr	r2, [pc, #248]	@ (8004dc8 <HAL_UART_MspInit+0x164>)
 8004cd0:	f043 0301 	orr.w	r3, r3, #1
 8004cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cd6:	4b3c      	ldr	r3, [pc, #240]	@ (8004dc8 <HAL_UART_MspInit+0x164>)
 8004cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	60bb      	str	r3, [r7, #8]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004ce2:	230c      	movs	r3, #12
 8004ce4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004cf2:	2307      	movs	r3, #7
 8004cf4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d00:	f000 fe08 	bl	8005914 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004d04:	4b31      	ldr	r3, [pc, #196]	@ (8004dcc <HAL_UART_MspInit+0x168>)
 8004d06:	4a32      	ldr	r2, [pc, #200]	@ (8004dd0 <HAL_UART_MspInit+0x16c>)
 8004d08:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004d0a:	4b30      	ldr	r3, [pc, #192]	@ (8004dcc <HAL_UART_MspInit+0x168>)
 8004d0c:	221a      	movs	r2, #26
 8004d0e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d10:	4b2e      	ldr	r3, [pc, #184]	@ (8004dcc <HAL_UART_MspInit+0x168>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d16:	4b2d      	ldr	r3, [pc, #180]	@ (8004dcc <HAL_UART_MspInit+0x168>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dcc <HAL_UART_MspInit+0x168>)
 8004d1e:	2280      	movs	r2, #128	@ 0x80
 8004d20:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d22:	4b2a      	ldr	r3, [pc, #168]	@ (8004dcc <HAL_UART_MspInit+0x168>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d28:	4b28      	ldr	r3, [pc, #160]	@ (8004dcc <HAL_UART_MspInit+0x168>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004d2e:	4b27      	ldr	r3, [pc, #156]	@ (8004dcc <HAL_UART_MspInit+0x168>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d34:	4b25      	ldr	r3, [pc, #148]	@ (8004dcc <HAL_UART_MspInit+0x168>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004d3a:	4824      	ldr	r0, [pc, #144]	@ (8004dcc <HAL_UART_MspInit+0x168>)
 8004d3c:	f000 fab8 	bl	80052b0 <HAL_DMA_Init>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004d46:	f7ff fd99 	bl	800487c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004dcc <HAL_UART_MspInit+0x168>)
 8004d4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004d52:	4a1e      	ldr	r2, [pc, #120]	@ (8004dcc <HAL_UART_MspInit+0x168>)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004d58:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd4 <HAL_UART_MspInit+0x170>)
 8004d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004dd8 <HAL_UART_MspInit+0x174>)
 8004d5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd4 <HAL_UART_MspInit+0x170>)
 8004d60:	221b      	movs	r2, #27
 8004d62:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d64:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd4 <HAL_UART_MspInit+0x170>)
 8004d66:	2210      	movs	r2, #16
 8004d68:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd4 <HAL_UART_MspInit+0x170>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d70:	4b18      	ldr	r3, [pc, #96]	@ (8004dd4 <HAL_UART_MspInit+0x170>)
 8004d72:	2280      	movs	r2, #128	@ 0x80
 8004d74:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d76:	4b17      	ldr	r3, [pc, #92]	@ (8004dd4 <HAL_UART_MspInit+0x170>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d7c:	4b15      	ldr	r3, [pc, #84]	@ (8004dd4 <HAL_UART_MspInit+0x170>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004d82:	4b14      	ldr	r3, [pc, #80]	@ (8004dd4 <HAL_UART_MspInit+0x170>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d88:	4b12      	ldr	r3, [pc, #72]	@ (8004dd4 <HAL_UART_MspInit+0x170>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004d8e:	4811      	ldr	r0, [pc, #68]	@ (8004dd4 <HAL_UART_MspInit+0x170>)
 8004d90:	f000 fa8e 	bl	80052b0 <HAL_DMA_Init>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8004d9a:	f7ff fd6f 	bl	800487c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd4 <HAL_UART_MspInit+0x170>)
 8004da2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004da4:	4a0b      	ldr	r2, [pc, #44]	@ (8004dd4 <HAL_UART_MspInit+0x170>)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004daa:	2200      	movs	r2, #0
 8004dac:	2100      	movs	r1, #0
 8004dae:	2026      	movs	r0, #38	@ 0x26
 8004db0:	f000 fa49 	bl	8005246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004db4:	2026      	movs	r0, #38	@ 0x26
 8004db6:	f000 fa60 	bl	800527a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8004dba:	bf00      	nop
 8004dbc:	3778      	adds	r7, #120	@ 0x78
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40004400 	.word	0x40004400
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	200007d4 	.word	0x200007d4
 8004dd0:	40020008 	.word	0x40020008
 8004dd4:	20000834 	.word	0x20000834
 8004dd8:	4002001c 	.word	0x4002001c

08004ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004de0:	bf00      	nop
 8004de2:	e7fd      	b.n	8004de0 <NMI_Handler+0x4>

08004de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004de8:	bf00      	nop
 8004dea:	e7fd      	b.n	8004de8 <HardFault_Handler+0x4>

08004dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004df0:	bf00      	nop
 8004df2:	e7fd      	b.n	8004df0 <MemManage_Handler+0x4>

08004df4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004df8:	bf00      	nop
 8004dfa:	e7fd      	b.n	8004df8 <BusFault_Handler+0x4>

08004dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e00:	bf00      	nop
 8004e02:	e7fd      	b.n	8004e00 <UsageFault_Handler+0x4>

08004e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e08:	bf00      	nop
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e12:	b480      	push	{r7}
 8004e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e16:	bf00      	nop
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e32:	f000 f90f 	bl	8005054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004e3e:	2001      	movs	r0, #1
 8004e40:	f000 ff1a 	bl	8005c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004e44:	bf00      	nop
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004e4c:	2004      	movs	r0, #4
 8004e4e:	f000 ff13 	bl	8005c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004e5a:	2008      	movs	r0, #8
 8004e5c:	f000 ff0c 	bl	8005c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004e60:	bf00      	nop
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004e68:	4802      	ldr	r0, [pc, #8]	@ (8004e74 <DMA1_Channel1_IRQHandler+0x10>)
 8004e6a:	f000 fc04 	bl	8005676 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	200007d4 	.word	0x200007d4

08004e78 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004e7c:	4802      	ldr	r0, [pc, #8]	@ (8004e88 <DMA1_Channel2_IRQHandler+0x10>)
 8004e7e:	f000 fbfa 	bl	8005676 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004e82:	bf00      	nop
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20000834 	.word	0x20000834

08004e8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004e90:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004e94:	f000 fef0 	bl	8005c78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004e98:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004e9c:	f000 feec 	bl	8005c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004ea0:	bf00      	nop
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ea8:	4803      	ldr	r0, [pc, #12]	@ (8004eb8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004eaa:	f002 fd99 	bl	80079e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004eae:	4803      	ldr	r0, [pc, #12]	@ (8004ebc <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004eb0:	f002 fd96 	bl	80079e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004eb4:	bf00      	nop
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	200000a8 	.word	0x200000a8
 8004ebc:	2000063c 	.word	0x2000063c

08004ec0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004ec4:	4802      	ldr	r0, [pc, #8]	@ (8004ed0 <TIM3_IRQHandler+0x10>)
 8004ec6:	f002 fd8b 	bl	80079e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004eca:	bf00      	nop
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000240 	.word	0x20000240

08004ed4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004ed8:	4802      	ldr	r0, [pc, #8]	@ (8004ee4 <TIM4_IRQHandler+0x10>)
 8004eda:	f002 fd81 	bl	80079e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004ede:	bf00      	nop
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	2000030c 	.word	0x2000030c

08004ee8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004eec:	4802      	ldr	r0, [pc, #8]	@ (8004ef8 <USART2_IRQHandler+0x10>)
 8004eee:	f004 fdb3 	bl	8009a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ef2:	bf00      	nop
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000708 	.word	0x20000708

08004efc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004f00:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004f04:	f000 feb8 	bl	8005c78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004f08:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004f0c:	f000 feb4 	bl	8005c78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004f10:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004f14:	f000 feb0 	bl	8005c78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004f18:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004f1c:	f000 feac 	bl	8005c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004f20:	bf00      	nop
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004f28:	4802      	ldr	r0, [pc, #8]	@ (8004f34 <TIM5_IRQHandler+0x10>)
 8004f2a:	f002 fd59 	bl	80079e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004f2e:	bf00      	nop
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	200003d8 	.word	0x200003d8

08004f38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004f3c:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <SystemInit+0x20>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f42:	4a05      	ldr	r2, [pc, #20]	@ (8004f58 <SystemInit+0x20>)
 8004f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f4c:	bf00      	nop
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	e000ed00 	.word	0xe000ed00

08004f5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004f5c:	480d      	ldr	r0, [pc, #52]	@ (8004f94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004f5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004f60:	f7ff ffea 	bl	8004f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f64:	480c      	ldr	r0, [pc, #48]	@ (8004f98 <LoopForever+0x6>)
  ldr r1, =_edata
 8004f66:	490d      	ldr	r1, [pc, #52]	@ (8004f9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004f68:	4a0d      	ldr	r2, [pc, #52]	@ (8004fa0 <LoopForever+0xe>)
  movs r3, #0
 8004f6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004f6c:	e002      	b.n	8004f74 <LoopCopyDataInit>

08004f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f72:	3304      	adds	r3, #4

08004f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f78:	d3f9      	bcc.n	8004f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004fa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8004fa8 <LoopForever+0x16>)
  movs r3, #0
 8004f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f80:	e001      	b.n	8004f86 <LoopFillZerobss>

08004f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f84:	3204      	adds	r2, #4

08004f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f88:	d3fb      	bcc.n	8004f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004f8a:	f006 fa73 	bl	800b474 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004f8e:	f7fc fb4f 	bl	8001630 <main>

08004f92 <LoopForever>:

LoopForever:
    b LoopForever
 8004f92:	e7fe      	b.n	8004f92 <LoopForever>
  ldr   r0, =_estack
 8004f94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f9c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8004fa0:	0800c420 	.word	0x0800c420
  ldr r2, =_sbss
 8004fa4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8004fa8:	2000124c 	.word	0x2000124c

08004fac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004fac:	e7fe      	b.n	8004fac <ADC1_2_IRQHandler>

08004fae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fb8:	2003      	movs	r0, #3
 8004fba:	f000 f939 	bl	8005230 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	f000 f80e 	bl	8004fe0 <HAL_InitTick>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	71fb      	strb	r3, [r7, #7]
 8004fce:	e001      	b.n	8004fd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004fd0:	f7ff fc5a 	bl	8004888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004fd4:	79fb      	ldrb	r3, [r7, #7]

}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004fec:	4b16      	ldr	r3, [pc, #88]	@ (8005048 <HAL_InitTick+0x68>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d022      	beq.n	800503a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004ff4:	4b15      	ldr	r3, [pc, #84]	@ (800504c <HAL_InitTick+0x6c>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b13      	ldr	r3, [pc, #76]	@ (8005048 <HAL_InitTick+0x68>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005000:	fbb1 f3f3 	udiv	r3, r1, r3
 8005004:	fbb2 f3f3 	udiv	r3, r2, r3
 8005008:	4618      	mov	r0, r3
 800500a:	f000 f944 	bl	8005296 <HAL_SYSTICK_Config>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10f      	bne.n	8005034 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b0f      	cmp	r3, #15
 8005018:	d809      	bhi.n	800502e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800501a:	2200      	movs	r2, #0
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	f04f 30ff 	mov.w	r0, #4294967295
 8005022:	f000 f910 	bl	8005246 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005026:	4a0a      	ldr	r2, [pc, #40]	@ (8005050 <HAL_InitTick+0x70>)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	e007      	b.n	800503e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	73fb      	strb	r3, [r7, #15]
 8005032:	e004      	b.n	800503e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	73fb      	strb	r3, [r7, #15]
 8005038:	e001      	b.n	800503e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800503e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20000030 	.word	0x20000030
 800504c:	20000028 	.word	0x20000028
 8005050:	2000002c 	.word	0x2000002c

08005054 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005058:	4b05      	ldr	r3, [pc, #20]	@ (8005070 <HAL_IncTick+0x1c>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	4b05      	ldr	r3, [pc, #20]	@ (8005074 <HAL_IncTick+0x20>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4413      	add	r3, r2
 8005062:	4a03      	ldr	r2, [pc, #12]	@ (8005070 <HAL_IncTick+0x1c>)
 8005064:	6013      	str	r3, [r2, #0]
}
 8005066:	bf00      	nop
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	20001110 	.word	0x20001110
 8005074:	20000030 	.word	0x20000030

08005078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  return uwTick;
 800507c:	4b03      	ldr	r3, [pc, #12]	@ (800508c <HAL_GetTick+0x14>)
 800507e:	681b      	ldr	r3, [r3, #0]
}
 8005080:	4618      	mov	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	20001110 	.word	0x20001110

08005090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050a0:	4b0c      	ldr	r3, [pc, #48]	@ (80050d4 <__NVIC_SetPriorityGrouping+0x44>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050ac:	4013      	ands	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050c2:	4a04      	ldr	r2, [pc, #16]	@ (80050d4 <__NVIC_SetPriorityGrouping+0x44>)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	60d3      	str	r3, [r2, #12]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	e000ed00 	.word	0xe000ed00

080050d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050dc:	4b04      	ldr	r3, [pc, #16]	@ (80050f0 <__NVIC_GetPriorityGrouping+0x18>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	0a1b      	lsrs	r3, r3, #8
 80050e2:	f003 0307 	and.w	r3, r3, #7
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	4603      	mov	r3, r0
 80050fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005102:	2b00      	cmp	r3, #0
 8005104:	db0b      	blt.n	800511e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	f003 021f 	and.w	r2, r3, #31
 800510c:	4907      	ldr	r1, [pc, #28]	@ (800512c <__NVIC_EnableIRQ+0x38>)
 800510e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	2001      	movs	r0, #1
 8005116:	fa00 f202 	lsl.w	r2, r0, r2
 800511a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	e000e100 	.word	0xe000e100

08005130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	6039      	str	r1, [r7, #0]
 800513a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800513c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005140:	2b00      	cmp	r3, #0
 8005142:	db0a      	blt.n	800515a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	b2da      	uxtb	r2, r3
 8005148:	490c      	ldr	r1, [pc, #48]	@ (800517c <__NVIC_SetPriority+0x4c>)
 800514a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514e:	0112      	lsls	r2, r2, #4
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	440b      	add	r3, r1
 8005154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005158:	e00a      	b.n	8005170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	b2da      	uxtb	r2, r3
 800515e:	4908      	ldr	r1, [pc, #32]	@ (8005180 <__NVIC_SetPriority+0x50>)
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	3b04      	subs	r3, #4
 8005168:	0112      	lsls	r2, r2, #4
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	440b      	add	r3, r1
 800516e:	761a      	strb	r2, [r3, #24]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	e000e100 	.word	0xe000e100
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005184:	b480      	push	{r7}
 8005186:	b089      	sub	sp, #36	@ 0x24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f1c3 0307 	rsb	r3, r3, #7
 800519e:	2b04      	cmp	r3, #4
 80051a0:	bf28      	it	cs
 80051a2:	2304      	movcs	r3, #4
 80051a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3304      	adds	r3, #4
 80051aa:	2b06      	cmp	r3, #6
 80051ac:	d902      	bls.n	80051b4 <NVIC_EncodePriority+0x30>
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3b03      	subs	r3, #3
 80051b2:	e000      	b.n	80051b6 <NVIC_EncodePriority+0x32>
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b8:	f04f 32ff 	mov.w	r2, #4294967295
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	43da      	mvns	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	401a      	ands	r2, r3
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051cc:	f04f 31ff 	mov.w	r1, #4294967295
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	43d9      	mvns	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051dc:	4313      	orrs	r3, r2
         );
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3724      	adds	r7, #36	@ 0x24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051fc:	d301      	bcc.n	8005202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051fe:	2301      	movs	r3, #1
 8005200:	e00f      	b.n	8005222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005202:	4a0a      	ldr	r2, [pc, #40]	@ (800522c <SysTick_Config+0x40>)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3b01      	subs	r3, #1
 8005208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800520a:	210f      	movs	r1, #15
 800520c:	f04f 30ff 	mov.w	r0, #4294967295
 8005210:	f7ff ff8e 	bl	8005130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005214:	4b05      	ldr	r3, [pc, #20]	@ (800522c <SysTick_Config+0x40>)
 8005216:	2200      	movs	r2, #0
 8005218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800521a:	4b04      	ldr	r3, [pc, #16]	@ (800522c <SysTick_Config+0x40>)
 800521c:	2207      	movs	r2, #7
 800521e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	e000e010 	.word	0xe000e010

08005230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff ff29 	bl	8005090 <__NVIC_SetPriorityGrouping>
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b086      	sub	sp, #24
 800524a:	af00      	add	r7, sp, #0
 800524c:	4603      	mov	r3, r0
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
 8005252:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005254:	f7ff ff40 	bl	80050d8 <__NVIC_GetPriorityGrouping>
 8005258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	6978      	ldr	r0, [r7, #20]
 8005260:	f7ff ff90 	bl	8005184 <NVIC_EncodePriority>
 8005264:	4602      	mov	r2, r0
 8005266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800526a:	4611      	mov	r1, r2
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff ff5f 	bl	8005130 <__NVIC_SetPriority>
}
 8005272:	bf00      	nop
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	4603      	mov	r3, r0
 8005282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff ff33 	bl	80050f4 <__NVIC_EnableIRQ>
}
 800528e:	bf00      	nop
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff ffa4 	bl	80051ec <SysTick_Config>
 80052a4:	4603      	mov	r3, r0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e08d      	b.n	80053de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	4b47      	ldr	r3, [pc, #284]	@ (80053e8 <HAL_DMA_Init+0x138>)
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d80f      	bhi.n	80052ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	4b45      	ldr	r3, [pc, #276]	@ (80053ec <HAL_DMA_Init+0x13c>)
 80052d6:	4413      	add	r3, r2
 80052d8:	4a45      	ldr	r2, [pc, #276]	@ (80053f0 <HAL_DMA_Init+0x140>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	091b      	lsrs	r3, r3, #4
 80052e0:	009a      	lsls	r2, r3, #2
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a42      	ldr	r2, [pc, #264]	@ (80053f4 <HAL_DMA_Init+0x144>)
 80052ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80052ec:	e00e      	b.n	800530c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	4b40      	ldr	r3, [pc, #256]	@ (80053f8 <HAL_DMA_Init+0x148>)
 80052f6:	4413      	add	r3, r2
 80052f8:	4a3d      	ldr	r2, [pc, #244]	@ (80053f0 <HAL_DMA_Init+0x140>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	091b      	lsrs	r3, r3, #4
 8005300:	009a      	lsls	r2, r3, #2
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a3c      	ldr	r2, [pc, #240]	@ (80053fc <HAL_DMA_Init+0x14c>)
 800530a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005326:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800533c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fa76 	bl	8005850 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800536c:	d102      	bne.n	8005374 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005388:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d010      	beq.n	80053b4 <HAL_DMA_Init+0x104>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b04      	cmp	r3, #4
 8005398:	d80c      	bhi.n	80053b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fa96 	bl	80058cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053b0:	605a      	str	r2, [r3, #4]
 80053b2:	e008      	b.n	80053c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40020407 	.word	0x40020407
 80053ec:	bffdfff8 	.word	0xbffdfff8
 80053f0:	cccccccd 	.word	0xcccccccd
 80053f4:	40020000 	.word	0x40020000
 80053f8:	bffdfbf8 	.word	0xbffdfbf8
 80053fc:	40020400 	.word	0x40020400

08005400 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_DMA_Start_IT+0x20>
 800541c:	2302      	movs	r3, #2
 800541e:	e066      	b.n	80054ee <HAL_DMA_Start_IT+0xee>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d155      	bne.n	80054e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0201 	bic.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f9bb 	bl	80057d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005462:	2b00      	cmp	r3, #0
 8005464:	d008      	beq.n	8005478 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 020e 	orr.w	r2, r2, #14
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	e00f      	b.n	8005498 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0204 	bic.w	r2, r2, #4
 8005486:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 020a 	orr.w	r2, r2, #10
 8005496:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d007      	beq.n	80054ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0201 	orr.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	e005      	b.n	80054ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
 80054ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b085      	sub	sp, #20
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d005      	beq.n	800551a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2204      	movs	r2, #4
 8005512:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
 8005518:	e037      	b.n	800558a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 020e 	bic.w	r2, r2, #14
 8005528:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005534:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005538:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0201 	bic.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554e:	f003 021f 	and.w	r2, r3, #31
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	2101      	movs	r1, #1
 8005558:	fa01 f202 	lsl.w	r2, r1, r2
 800555c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005566:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00c      	beq.n	800558a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800557e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005588:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800559a:	7bfb      	ldrb	r3, [r7, #15]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d00d      	beq.n	80055dc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2204      	movs	r2, #4
 80055c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
 80055da:	e047      	b.n	800566c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 020e 	bic.w	r2, r2, #14
 80055ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0201 	bic.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005606:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800560a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005610:	f003 021f 	and.w	r2, r3, #31
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005618:	2101      	movs	r1, #1
 800561a:	fa01 f202 	lsl.w	r2, r1, r2
 800561e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005628:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00c      	beq.n	800564c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005640:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800564a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	4798      	blx	r3
    }
  }
  return status;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	2204      	movs	r2, #4
 8005698:	409a      	lsls	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4013      	ands	r3, r2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d026      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x7a>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d021      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d107      	bne.n	80056ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0204 	bic.w	r2, r2, #4
 80056c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ce:	f003 021f 	and.w	r2, r3, #31
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d6:	2104      	movs	r1, #4
 80056d8:	fa01 f202 	lsl.w	r2, r1, r2
 80056dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d071      	beq.n	80057ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80056ee:	e06c      	b.n	80057ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f4:	f003 031f 	and.w	r3, r3, #31
 80056f8:	2202      	movs	r2, #2
 80056fa:	409a      	lsls	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4013      	ands	r3, r2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d02e      	beq.n	8005762 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d029      	beq.n	8005762 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 020a 	bic.w	r2, r2, #10
 800572a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005738:	f003 021f 	and.w	r2, r3, #31
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005740:	2102      	movs	r1, #2
 8005742:	fa01 f202 	lsl.w	r2, r1, r2
 8005746:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005754:	2b00      	cmp	r3, #0
 8005756:	d038      	beq.n	80057ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005760:	e033      	b.n	80057ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	2208      	movs	r2, #8
 800576c:	409a      	lsls	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4013      	ands	r3, r2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d02a      	beq.n	80057cc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d025      	beq.n	80057cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 020e 	bic.w	r2, r2, #14
 800578e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005794:	f003 021f 	and.w	r2, r3, #31
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579c:	2101      	movs	r1, #1
 800579e:	fa01 f202 	lsl.w	r2, r1, r2
 80057a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80057ca:	bf00      	nop
 80057cc:	bf00      	nop
}
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80057fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005802:	f003 021f 	and.w	r2, r3, #31
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	2101      	movs	r1, #1
 800580c:	fa01 f202 	lsl.w	r2, r1, r2
 8005810:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b10      	cmp	r3, #16
 8005820:	d108      	bne.n	8005834 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005832:	e007      	b.n	8005844 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	60da      	str	r2, [r3, #12]
}
 8005844:	bf00      	nop
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	4b16      	ldr	r3, [pc, #88]	@ (80058b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005860:	429a      	cmp	r2, r3
 8005862:	d802      	bhi.n	800586a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005864:	4b15      	ldr	r3, [pc, #84]	@ (80058bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	e001      	b.n	800586e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800586a:	4b15      	ldr	r3, [pc, #84]	@ (80058c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800586c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	b2db      	uxtb	r3, r3
 8005878:	3b08      	subs	r3, #8
 800587a:	4a12      	ldr	r2, [pc, #72]	@ (80058c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800587c:	fba2 2303 	umull	r2, r3, r2, r3
 8005880:	091b      	lsrs	r3, r3, #4
 8005882:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005888:	089b      	lsrs	r3, r3, #2
 800588a:	009a      	lsls	r2, r3, #2
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4413      	add	r3, r2
 8005890:	461a      	mov	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a0b      	ldr	r2, [pc, #44]	@ (80058c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800589a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 031f 	and.w	r3, r3, #31
 80058a2:	2201      	movs	r2, #1
 80058a4:	409a      	lsls	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80058aa:	bf00      	nop
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	40020407 	.word	0x40020407
 80058bc:	40020800 	.word	0x40020800
 80058c0:	40020820 	.word	0x40020820
 80058c4:	cccccccd 	.word	0xcccccccd
 80058c8:	40020880 	.word	0x40020880

080058cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4b0b      	ldr	r3, [pc, #44]	@ (800590c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	461a      	mov	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a08      	ldr	r2, [pc, #32]	@ (8005910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80058ee:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	2201      	movs	r2, #1
 80058fa:	409a      	lsls	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005900:	bf00      	nop
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	1000823f 	.word	0x1000823f
 8005910:	40020940 	.word	0x40020940

08005914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005922:	e15a      	b.n	8005bda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	2101      	movs	r1, #1
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	fa01 f303 	lsl.w	r3, r1, r3
 8005930:	4013      	ands	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 814c 	beq.w	8005bd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f003 0303 	and.w	r3, r3, #3
 8005944:	2b01      	cmp	r3, #1
 8005946:	d005      	beq.n	8005954 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005950:	2b02      	cmp	r3, #2
 8005952:	d130      	bne.n	80059b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	2203      	movs	r2, #3
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	43db      	mvns	r3, r3
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4013      	ands	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800598a:	2201      	movs	r2, #1
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	43db      	mvns	r3, r3
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4013      	ands	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	091b      	lsrs	r3, r3, #4
 80059a0:	f003 0201 	and.w	r2, r3, #1
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d017      	beq.n	80059f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	2203      	movs	r2, #3
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4013      	ands	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d123      	bne.n	8005a46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	08da      	lsrs	r2, r3, #3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3208      	adds	r2, #8
 8005a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	220f      	movs	r2, #15
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	08da      	lsrs	r2, r3, #3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3208      	adds	r2, #8
 8005a40:	6939      	ldr	r1, [r7, #16]
 8005a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	2203      	movs	r2, #3
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43db      	mvns	r3, r3
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f003 0203 	and.w	r2, r3, #3
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80a6 	beq.w	8005bd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a88:	4b5b      	ldr	r3, [pc, #364]	@ (8005bf8 <HAL_GPIO_Init+0x2e4>)
 8005a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a8c:	4a5a      	ldr	r2, [pc, #360]	@ (8005bf8 <HAL_GPIO_Init+0x2e4>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	6613      	str	r3, [r2, #96]	@ 0x60
 8005a94:	4b58      	ldr	r3, [pc, #352]	@ (8005bf8 <HAL_GPIO_Init+0x2e4>)
 8005a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005aa0:	4a56      	ldr	r2, [pc, #344]	@ (8005bfc <HAL_GPIO_Init+0x2e8>)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	089b      	lsrs	r3, r3, #2
 8005aa6:	3302      	adds	r3, #2
 8005aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f003 0303 	and.w	r3, r3, #3
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	220f      	movs	r2, #15
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	43db      	mvns	r3, r3
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005aca:	d01f      	beq.n	8005b0c <HAL_GPIO_Init+0x1f8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a4c      	ldr	r2, [pc, #304]	@ (8005c00 <HAL_GPIO_Init+0x2ec>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d019      	beq.n	8005b08 <HAL_GPIO_Init+0x1f4>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a4b      	ldr	r2, [pc, #300]	@ (8005c04 <HAL_GPIO_Init+0x2f0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d013      	beq.n	8005b04 <HAL_GPIO_Init+0x1f0>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a4a      	ldr	r2, [pc, #296]	@ (8005c08 <HAL_GPIO_Init+0x2f4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00d      	beq.n	8005b00 <HAL_GPIO_Init+0x1ec>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a49      	ldr	r2, [pc, #292]	@ (8005c0c <HAL_GPIO_Init+0x2f8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d007      	beq.n	8005afc <HAL_GPIO_Init+0x1e8>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a48      	ldr	r2, [pc, #288]	@ (8005c10 <HAL_GPIO_Init+0x2fc>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d101      	bne.n	8005af8 <HAL_GPIO_Init+0x1e4>
 8005af4:	2305      	movs	r3, #5
 8005af6:	e00a      	b.n	8005b0e <HAL_GPIO_Init+0x1fa>
 8005af8:	2306      	movs	r3, #6
 8005afa:	e008      	b.n	8005b0e <HAL_GPIO_Init+0x1fa>
 8005afc:	2304      	movs	r3, #4
 8005afe:	e006      	b.n	8005b0e <HAL_GPIO_Init+0x1fa>
 8005b00:	2303      	movs	r3, #3
 8005b02:	e004      	b.n	8005b0e <HAL_GPIO_Init+0x1fa>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e002      	b.n	8005b0e <HAL_GPIO_Init+0x1fa>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_GPIO_Init+0x1fa>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	f002 0203 	and.w	r2, r2, #3
 8005b14:	0092      	lsls	r2, r2, #2
 8005b16:	4093      	lsls	r3, r2
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b1e:	4937      	ldr	r1, [pc, #220]	@ (8005bfc <HAL_GPIO_Init+0x2e8>)
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	089b      	lsrs	r3, r3, #2
 8005b24:	3302      	adds	r3, #2
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b2c:	4b39      	ldr	r3, [pc, #228]	@ (8005c14 <HAL_GPIO_Init+0x300>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	43db      	mvns	r3, r3
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b50:	4a30      	ldr	r2, [pc, #192]	@ (8005c14 <HAL_GPIO_Init+0x300>)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b56:	4b2f      	ldr	r3, [pc, #188]	@ (8005c14 <HAL_GPIO_Init+0x300>)
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4013      	ands	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b7a:	4a26      	ldr	r2, [pc, #152]	@ (8005c14 <HAL_GPIO_Init+0x300>)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005b80:	4b24      	ldr	r3, [pc, #144]	@ (8005c14 <HAL_GPIO_Init+0x300>)
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c14 <HAL_GPIO_Init+0x300>)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005baa:	4b1a      	ldr	r3, [pc, #104]	@ (8005c14 <HAL_GPIO_Init+0x300>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005bce:	4a11      	ldr	r2, [pc, #68]	@ (8005c14 <HAL_GPIO_Init+0x300>)
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	fa22 f303 	lsr.w	r3, r2, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f47f ae9d 	bne.w	8005924 <HAL_GPIO_Init+0x10>
  }
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	371c      	adds	r7, #28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	48000400 	.word	0x48000400
 8005c04:	48000800 	.word	0x48000800
 8005c08:	48000c00 	.word	0x48000c00
 8005c0c:	48001000 	.word	0x48001000
 8005c10:	48001400 	.word	0x48001400
 8005c14:	40010400 	.word	0x40010400

08005c18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691a      	ldr	r2, [r3, #16]
 8005c28:	887b      	ldrh	r3, [r7, #2]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c30:	2301      	movs	r3, #1
 8005c32:	73fb      	strb	r3, [r7, #15]
 8005c34:	e001      	b.n	8005c3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c36:	2300      	movs	r3, #0
 8005c38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	807b      	strh	r3, [r7, #2]
 8005c54:	4613      	mov	r3, r2
 8005c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c58:	787b      	ldrb	r3, [r7, #1]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c5e:	887a      	ldrh	r2, [r7, #2]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c64:	e002      	b.n	8005c6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c66:	887a      	ldrh	r2, [r7, #2]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c82:	4b08      	ldr	r3, [pc, #32]	@ (8005ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c84:	695a      	ldr	r2, [r3, #20]
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d006      	beq.n	8005c9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c8e:	4a05      	ldr	r2, [pc, #20]	@ (8005ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c90:	88fb      	ldrh	r3, [r7, #6]
 8005c92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe f920 	bl	8003edc <HAL_GPIO_EXTI_Callback>
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40010400 	.word	0x40010400

08005ca8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d141      	bne.n	8005d3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cb6:	4b4b      	ldr	r3, [pc, #300]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cc2:	d131      	bne.n	8005d28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cc4:	4b47      	ldr	r3, [pc, #284]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cca:	4a46      	ldr	r2, [pc, #280]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ccc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cd4:	4b43      	ldr	r3, [pc, #268]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cdc:	4a41      	ldr	r2, [pc, #260]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ce2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ce4:	4b40      	ldr	r3, [pc, #256]	@ (8005de8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2232      	movs	r2, #50	@ 0x32
 8005cea:	fb02 f303 	mul.w	r3, r2, r3
 8005cee:	4a3f      	ldr	r2, [pc, #252]	@ (8005dec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	0c9b      	lsrs	r3, r3, #18
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cfa:	e002      	b.n	8005d02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d02:	4b38      	ldr	r3, [pc, #224]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d0e:	d102      	bne.n	8005d16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1f2      	bne.n	8005cfc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d16:	4b33      	ldr	r3, [pc, #204]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d22:	d158      	bne.n	8005dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e057      	b.n	8005dd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d28:	4b2e      	ldr	r3, [pc, #184]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d2e:	4a2d      	ldr	r2, [pc, #180]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005d38:	e04d      	b.n	8005dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d40:	d141      	bne.n	8005dc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d42:	4b28      	ldr	r3, [pc, #160]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d4e:	d131      	bne.n	8005db4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d50:	4b24      	ldr	r3, [pc, #144]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d56:	4a23      	ldr	r2, [pc, #140]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d60:	4b20      	ldr	r3, [pc, #128]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d68:	4a1e      	ldr	r2, [pc, #120]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d70:	4b1d      	ldr	r3, [pc, #116]	@ (8005de8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2232      	movs	r2, #50	@ 0x32
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
 8005d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d80:	0c9b      	lsrs	r3, r3, #18
 8005d82:	3301      	adds	r3, #1
 8005d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d86:	e002      	b.n	8005d8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d8e:	4b15      	ldr	r3, [pc, #84]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d9a:	d102      	bne.n	8005da2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1f2      	bne.n	8005d88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005da2:	4b10      	ldr	r3, [pc, #64]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dae:	d112      	bne.n	8005dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e011      	b.n	8005dd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005db4:	4b0b      	ldr	r3, [pc, #44]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dba:	4a0a      	ldr	r2, [pc, #40]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005dc4:	e007      	b.n	8005dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005dc6:	4b07      	ldr	r3, [pc, #28]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005dce:	4a05      	ldr	r2, [pc, #20]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005dd4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	40007000 	.word	0x40007000
 8005de8:	20000028 	.word	0x20000028
 8005dec:	431bde83 	.word	0x431bde83

08005df0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005df4:	4b05      	ldr	r3, [pc, #20]	@ (8005e0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	4a04      	ldr	r2, [pc, #16]	@ (8005e0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005dfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005dfe:	6093      	str	r3, [r2, #8]
}
 8005e00:	bf00      	nop
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40007000 	.word	0x40007000

08005e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e2fe      	b.n	8006420 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d075      	beq.n	8005f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e2e:	4b97      	ldr	r3, [pc, #604]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 030c 	and.w	r3, r3, #12
 8005e36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e38:	4b94      	ldr	r3, [pc, #592]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	2b0c      	cmp	r3, #12
 8005e46:	d102      	bne.n	8005e4e <HAL_RCC_OscConfig+0x3e>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d002      	beq.n	8005e54 <HAL_RCC_OscConfig+0x44>
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d10b      	bne.n	8005e6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e54:	4b8d      	ldr	r3, [pc, #564]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d05b      	beq.n	8005f18 <HAL_RCC_OscConfig+0x108>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d157      	bne.n	8005f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e2d9      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e74:	d106      	bne.n	8005e84 <HAL_RCC_OscConfig+0x74>
 8005e76:	4b85      	ldr	r3, [pc, #532]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a84      	ldr	r2, [pc, #528]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	e01d      	b.n	8005ec0 <HAL_RCC_OscConfig+0xb0>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e8c:	d10c      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x98>
 8005e8e:	4b7f      	ldr	r3, [pc, #508]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a7e      	ldr	r2, [pc, #504]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	4b7c      	ldr	r3, [pc, #496]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a7b      	ldr	r2, [pc, #492]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	e00b      	b.n	8005ec0 <HAL_RCC_OscConfig+0xb0>
 8005ea8:	4b78      	ldr	r3, [pc, #480]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a77      	ldr	r2, [pc, #476]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	4b75      	ldr	r3, [pc, #468]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a74      	ldr	r2, [pc, #464]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d013      	beq.n	8005ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec8:	f7ff f8d6 	bl	8005078 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ed0:	f7ff f8d2 	bl	8005078 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b64      	cmp	r3, #100	@ 0x64
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e29e      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCC_OscConfig+0xc0>
 8005eee:	e014      	b.n	8005f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef0:	f7ff f8c2 	bl	8005078 <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ef8:	f7ff f8be 	bl	8005078 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b64      	cmp	r3, #100	@ 0x64
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e28a      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f0a:	4b60      	ldr	r3, [pc, #384]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f0      	bne.n	8005ef8 <HAL_RCC_OscConfig+0xe8>
 8005f16:	e000      	b.n	8005f1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d075      	beq.n	8006012 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f26:	4b59      	ldr	r3, [pc, #356]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
 8005f2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f30:	4b56      	ldr	r3, [pc, #344]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0303 	and.w	r3, r3, #3
 8005f38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b0c      	cmp	r3, #12
 8005f3e:	d102      	bne.n	8005f46 <HAL_RCC_OscConfig+0x136>
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d002      	beq.n	8005f4c <HAL_RCC_OscConfig+0x13c>
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d11f      	bne.n	8005f8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f4c:	4b4f      	ldr	r3, [pc, #316]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <HAL_RCC_OscConfig+0x154>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e25d      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f64:	4b49      	ldr	r3, [pc, #292]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	061b      	lsls	r3, r3, #24
 8005f72:	4946      	ldr	r1, [pc, #280]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f78:	4b45      	ldr	r3, [pc, #276]	@ (8006090 <HAL_RCC_OscConfig+0x280>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff f82f 	bl	8004fe0 <HAL_InitTick>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d043      	beq.n	8006010 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e249      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d023      	beq.n	8005fdc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f94:	4b3d      	ldr	r3, [pc, #244]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a3c      	ldr	r2, [pc, #240]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa0:	f7ff f86a 	bl	8005078 <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fa8:	f7ff f866 	bl	8005078 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e232      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fba:	4b34      	ldr	r3, [pc, #208]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0f0      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc6:	4b31      	ldr	r3, [pc, #196]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	061b      	lsls	r3, r3, #24
 8005fd4:	492d      	ldr	r1, [pc, #180]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	604b      	str	r3, [r1, #4]
 8005fda:	e01a      	b.n	8006012 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8005fe2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe8:	f7ff f846 	bl	8005078 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ff0:	f7ff f842 	bl	8005078 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e20e      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006002:	4b22      	ldr	r3, [pc, #136]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x1e0>
 800600e:	e000      	b.n	8006012 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006010:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0308 	and.w	r3, r3, #8
 800601a:	2b00      	cmp	r3, #0
 800601c:	d041      	beq.n	80060a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d01c      	beq.n	8006060 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006026:	4b19      	ldr	r3, [pc, #100]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8006028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800602c:	4a17      	ldr	r2, [pc, #92]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 800602e:	f043 0301 	orr.w	r3, r3, #1
 8006032:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006036:	f7ff f81f 	bl	8005078 <HAL_GetTick>
 800603a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800603c:	e008      	b.n	8006050 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800603e:	f7ff f81b 	bl	8005078 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e1e7      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006050:	4b0e      	ldr	r3, [pc, #56]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8006052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0ef      	beq.n	800603e <HAL_RCC_OscConfig+0x22e>
 800605e:	e020      	b.n	80060a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006060:	4b0a      	ldr	r3, [pc, #40]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8006062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006066:	4a09      	ldr	r2, [pc, #36]	@ (800608c <HAL_RCC_OscConfig+0x27c>)
 8006068:	f023 0301 	bic.w	r3, r3, #1
 800606c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006070:	f7ff f802 	bl	8005078 <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006076:	e00d      	b.n	8006094 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006078:	f7fe fffe 	bl	8005078 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d906      	bls.n	8006094 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e1ca      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
 800608a:	bf00      	nop
 800608c:	40021000 	.word	0x40021000
 8006090:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006094:	4b8c      	ldr	r3, [pc, #560]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 8006096:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1ea      	bne.n	8006078 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0304 	and.w	r3, r3, #4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 80a6 	beq.w	80061fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060b0:	2300      	movs	r3, #0
 80060b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060b4:	4b84      	ldr	r3, [pc, #528]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 80060b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <HAL_RCC_OscConfig+0x2b4>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <HAL_RCC_OscConfig+0x2b6>
 80060c4:	2300      	movs	r3, #0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00d      	beq.n	80060e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060ca:	4b7f      	ldr	r3, [pc, #508]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 80060cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ce:	4a7e      	ldr	r2, [pc, #504]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 80060d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80060d6:	4b7c      	ldr	r3, [pc, #496]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 80060d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80060e2:	2301      	movs	r3, #1
 80060e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060e6:	4b79      	ldr	r3, [pc, #484]	@ (80062cc <HAL_RCC_OscConfig+0x4bc>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d118      	bne.n	8006124 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060f2:	4b76      	ldr	r3, [pc, #472]	@ (80062cc <HAL_RCC_OscConfig+0x4bc>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a75      	ldr	r2, [pc, #468]	@ (80062cc <HAL_RCC_OscConfig+0x4bc>)
 80060f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060fe:	f7fe ffbb 	bl	8005078 <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006104:	e008      	b.n	8006118 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006106:	f7fe ffb7 	bl	8005078 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e183      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006118:	4b6c      	ldr	r3, [pc, #432]	@ (80062cc <HAL_RCC_OscConfig+0x4bc>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0f0      	beq.n	8006106 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d108      	bne.n	800613e <HAL_RCC_OscConfig+0x32e>
 800612c:	4b66      	ldr	r3, [pc, #408]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 800612e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006132:	4a65      	ldr	r2, [pc, #404]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 8006134:	f043 0301 	orr.w	r3, r3, #1
 8006138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800613c:	e024      	b.n	8006188 <HAL_RCC_OscConfig+0x378>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	2b05      	cmp	r3, #5
 8006144:	d110      	bne.n	8006168 <HAL_RCC_OscConfig+0x358>
 8006146:	4b60      	ldr	r3, [pc, #384]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 8006148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800614c:	4a5e      	ldr	r2, [pc, #376]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 800614e:	f043 0304 	orr.w	r3, r3, #4
 8006152:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006156:	4b5c      	ldr	r3, [pc, #368]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 8006158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800615c:	4a5a      	ldr	r2, [pc, #360]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006166:	e00f      	b.n	8006188 <HAL_RCC_OscConfig+0x378>
 8006168:	4b57      	ldr	r3, [pc, #348]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 800616a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616e:	4a56      	ldr	r2, [pc, #344]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 8006170:	f023 0301 	bic.w	r3, r3, #1
 8006174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006178:	4b53      	ldr	r3, [pc, #332]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 800617a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800617e:	4a52      	ldr	r2, [pc, #328]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 8006180:	f023 0304 	bic.w	r3, r3, #4
 8006184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d016      	beq.n	80061be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006190:	f7fe ff72 	bl	8005078 <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006196:	e00a      	b.n	80061ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006198:	f7fe ff6e 	bl	8005078 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e138      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061ae:	4b46      	ldr	r3, [pc, #280]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 80061b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d0ed      	beq.n	8006198 <HAL_RCC_OscConfig+0x388>
 80061bc:	e015      	b.n	80061ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061be:	f7fe ff5b 	bl	8005078 <HAL_GetTick>
 80061c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061c4:	e00a      	b.n	80061dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c6:	f7fe ff57 	bl	8005078 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e121      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061dc:	4b3a      	ldr	r3, [pc, #232]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1ed      	bne.n	80061c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061ea:	7ffb      	ldrb	r3, [r7, #31]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d105      	bne.n	80061fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061f0:	4b35      	ldr	r3, [pc, #212]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 80061f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061f4:	4a34      	ldr	r2, [pc, #208]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 80061f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b00      	cmp	r3, #0
 8006206:	d03c      	beq.n	8006282 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01c      	beq.n	800624a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006210:	4b2d      	ldr	r3, [pc, #180]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 8006212:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006216:	4a2c      	ldr	r2, [pc, #176]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 8006218:	f043 0301 	orr.w	r3, r3, #1
 800621c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006220:	f7fe ff2a 	bl	8005078 <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006228:	f7fe ff26 	bl	8005078 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e0f2      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800623a:	4b23      	ldr	r3, [pc, #140]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 800623c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0ef      	beq.n	8006228 <HAL_RCC_OscConfig+0x418>
 8006248:	e01b      	b.n	8006282 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800624a:	4b1f      	ldr	r3, [pc, #124]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 800624c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006250:	4a1d      	ldr	r2, [pc, #116]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 8006252:	f023 0301 	bic.w	r3, r3, #1
 8006256:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800625a:	f7fe ff0d 	bl	8005078 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006262:	f7fe ff09 	bl	8005078 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e0d5      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006274:	4b14      	ldr	r3, [pc, #80]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 8006276:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1ef      	bne.n	8006262 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 80c9 	beq.w	800641e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800628c:	4b0e      	ldr	r3, [pc, #56]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 030c 	and.w	r3, r3, #12
 8006294:	2b0c      	cmp	r3, #12
 8006296:	f000 8083 	beq.w	80063a0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d15e      	bne.n	8006360 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062a2:	4b09      	ldr	r3, [pc, #36]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a08      	ldr	r2, [pc, #32]	@ (80062c8 <HAL_RCC_OscConfig+0x4b8>)
 80062a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ae:	f7fe fee3 	bl	8005078 <HAL_GetTick>
 80062b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062b4:	e00c      	b.n	80062d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b6:	f7fe fedf 	bl	8005078 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d905      	bls.n	80062d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e0ab      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
 80062c8:	40021000 	.word	0x40021000
 80062cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062d0:	4b55      	ldr	r3, [pc, #340]	@ (8006428 <HAL_RCC_OscConfig+0x618>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1ec      	bne.n	80062b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062dc:	4b52      	ldr	r3, [pc, #328]	@ (8006428 <HAL_RCC_OscConfig+0x618>)
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	4b52      	ldr	r3, [pc, #328]	@ (800642c <HAL_RCC_OscConfig+0x61c>)
 80062e2:	4013      	ands	r3, r2
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6a11      	ldr	r1, [r2, #32]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062ec:	3a01      	subs	r2, #1
 80062ee:	0112      	lsls	r2, r2, #4
 80062f0:	4311      	orrs	r1, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80062f6:	0212      	lsls	r2, r2, #8
 80062f8:	4311      	orrs	r1, r2
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80062fe:	0852      	lsrs	r2, r2, #1
 8006300:	3a01      	subs	r2, #1
 8006302:	0552      	lsls	r2, r2, #21
 8006304:	4311      	orrs	r1, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800630a:	0852      	lsrs	r2, r2, #1
 800630c:	3a01      	subs	r2, #1
 800630e:	0652      	lsls	r2, r2, #25
 8006310:	4311      	orrs	r1, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006316:	06d2      	lsls	r2, r2, #27
 8006318:	430a      	orrs	r2, r1
 800631a:	4943      	ldr	r1, [pc, #268]	@ (8006428 <HAL_RCC_OscConfig+0x618>)
 800631c:	4313      	orrs	r3, r2
 800631e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006320:	4b41      	ldr	r3, [pc, #260]	@ (8006428 <HAL_RCC_OscConfig+0x618>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a40      	ldr	r2, [pc, #256]	@ (8006428 <HAL_RCC_OscConfig+0x618>)
 8006326:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800632a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800632c:	4b3e      	ldr	r3, [pc, #248]	@ (8006428 <HAL_RCC_OscConfig+0x618>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	4a3d      	ldr	r2, [pc, #244]	@ (8006428 <HAL_RCC_OscConfig+0x618>)
 8006332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006336:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006338:	f7fe fe9e 	bl	8005078 <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006340:	f7fe fe9a 	bl	8005078 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e066      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006352:	4b35      	ldr	r3, [pc, #212]	@ (8006428 <HAL_RCC_OscConfig+0x618>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0f0      	beq.n	8006340 <HAL_RCC_OscConfig+0x530>
 800635e:	e05e      	b.n	800641e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006360:	4b31      	ldr	r3, [pc, #196]	@ (8006428 <HAL_RCC_OscConfig+0x618>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a30      	ldr	r2, [pc, #192]	@ (8006428 <HAL_RCC_OscConfig+0x618>)
 8006366:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800636a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636c:	f7fe fe84 	bl	8005078 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006374:	f7fe fe80 	bl	8005078 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e04c      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006386:	4b28      	ldr	r3, [pc, #160]	@ (8006428 <HAL_RCC_OscConfig+0x618>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006392:	4b25      	ldr	r3, [pc, #148]	@ (8006428 <HAL_RCC_OscConfig+0x618>)
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	4924      	ldr	r1, [pc, #144]	@ (8006428 <HAL_RCC_OscConfig+0x618>)
 8006398:	4b25      	ldr	r3, [pc, #148]	@ (8006430 <HAL_RCC_OscConfig+0x620>)
 800639a:	4013      	ands	r3, r2
 800639c:	60cb      	str	r3, [r1, #12]
 800639e:	e03e      	b.n	800641e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e039      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80063ac:	4b1e      	ldr	r3, [pc, #120]	@ (8006428 <HAL_RCC_OscConfig+0x618>)
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f003 0203 	and.w	r2, r3, #3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d12c      	bne.n	800641a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ca:	3b01      	subs	r3, #1
 80063cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d123      	bne.n	800641a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063de:	429a      	cmp	r2, r3
 80063e0:	d11b      	bne.n	800641a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d113      	bne.n	800641a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fc:	085b      	lsrs	r3, r3, #1
 80063fe:	3b01      	subs	r3, #1
 8006400:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006402:	429a      	cmp	r2, r3
 8006404:	d109      	bne.n	800641a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006410:	085b      	lsrs	r3, r3, #1
 8006412:	3b01      	subs	r3, #1
 8006414:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006416:	429a      	cmp	r2, r3
 8006418:	d001      	beq.n	800641e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3720      	adds	r7, #32
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	40021000 	.word	0x40021000
 800642c:	019f800c 	.word	0x019f800c
 8006430:	feeefffc 	.word	0xfeeefffc

08006434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800643e:	2300      	movs	r3, #0
 8006440:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e11e      	b.n	800668a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800644c:	4b91      	ldr	r3, [pc, #580]	@ (8006694 <HAL_RCC_ClockConfig+0x260>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 030f 	and.w	r3, r3, #15
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d910      	bls.n	800647c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800645a:	4b8e      	ldr	r3, [pc, #568]	@ (8006694 <HAL_RCC_ClockConfig+0x260>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f023 020f 	bic.w	r2, r3, #15
 8006462:	498c      	ldr	r1, [pc, #560]	@ (8006694 <HAL_RCC_ClockConfig+0x260>)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	4313      	orrs	r3, r2
 8006468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800646a:	4b8a      	ldr	r3, [pc, #552]	@ (8006694 <HAL_RCC_ClockConfig+0x260>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d001      	beq.n	800647c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e106      	b.n	800668a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	d073      	beq.n	8006570 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b03      	cmp	r3, #3
 800648e:	d129      	bne.n	80064e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006490:	4b81      	ldr	r3, [pc, #516]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e0f4      	b.n	800668a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80064a0:	f000 f99e 	bl	80067e0 <RCC_GetSysClockFreqFromPLLSource>
 80064a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	4a7c      	ldr	r2, [pc, #496]	@ (800669c <HAL_RCC_ClockConfig+0x268>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d93f      	bls.n	800652e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d033      	beq.n	800652e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d12f      	bne.n	800652e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064ce:	4b72      	ldr	r3, [pc, #456]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064d6:	4a70      	ldr	r2, [pc, #448]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 80064d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064de:	2380      	movs	r3, #128	@ 0x80
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	e024      	b.n	800652e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d107      	bne.n	80064fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064ec:	4b6a      	ldr	r3, [pc, #424]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d109      	bne.n	800650c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0c6      	b.n	800668a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064fc:	4b66      	ldr	r3, [pc, #408]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e0be      	b.n	800668a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800650c:	f000 f8ce 	bl	80066ac <HAL_RCC_GetSysClockFreq>
 8006510:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	4a61      	ldr	r2, [pc, #388]	@ (800669c <HAL_RCC_ClockConfig+0x268>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d909      	bls.n	800652e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800651a:	4b5f      	ldr	r3, [pc, #380]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006522:	4a5d      	ldr	r2, [pc, #372]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 8006524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006528:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800652a:	2380      	movs	r3, #128	@ 0x80
 800652c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800652e:	4b5a      	ldr	r3, [pc, #360]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f023 0203 	bic.w	r2, r3, #3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	4957      	ldr	r1, [pc, #348]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 800653c:	4313      	orrs	r3, r2
 800653e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006540:	f7fe fd9a 	bl	8005078 <HAL_GetTick>
 8006544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006546:	e00a      	b.n	800655e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006548:	f7fe fd96 	bl	8005078 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006556:	4293      	cmp	r3, r2
 8006558:	d901      	bls.n	800655e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e095      	b.n	800668a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655e:	4b4e      	ldr	r3, [pc, #312]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 020c 	and.w	r2, r3, #12
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	429a      	cmp	r2, r3
 800656e:	d1eb      	bne.n	8006548 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d023      	beq.n	80065c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006588:	4b43      	ldr	r3, [pc, #268]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	4a42      	ldr	r2, [pc, #264]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 800658e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006592:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b00      	cmp	r3, #0
 800659e:	d007      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80065a0:	4b3d      	ldr	r3, [pc, #244]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80065a8:	4a3b      	ldr	r2, [pc, #236]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 80065aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80065ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065b0:	4b39      	ldr	r3, [pc, #228]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	4936      	ldr	r1, [pc, #216]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	608b      	str	r3, [r1, #8]
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2b80      	cmp	r3, #128	@ 0x80
 80065c8:	d105      	bne.n	80065d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80065ca:	4b33      	ldr	r3, [pc, #204]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	4a32      	ldr	r2, [pc, #200]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 80065d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006694 <HAL_RCC_ClockConfig+0x260>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d21d      	bcs.n	8006620 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006694 <HAL_RCC_ClockConfig+0x260>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f023 020f 	bic.w	r2, r3, #15
 80065ec:	4929      	ldr	r1, [pc, #164]	@ (8006694 <HAL_RCC_ClockConfig+0x260>)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80065f4:	f7fe fd40 	bl	8005078 <HAL_GetTick>
 80065f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fa:	e00a      	b.n	8006612 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065fc:	f7fe fd3c 	bl	8005078 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800660a:	4293      	cmp	r3, r2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e03b      	b.n	800668a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006612:	4b20      	ldr	r3, [pc, #128]	@ (8006694 <HAL_RCC_ClockConfig+0x260>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	429a      	cmp	r2, r3
 800661e:	d1ed      	bne.n	80065fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800662c:	4b1a      	ldr	r3, [pc, #104]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4917      	ldr	r1, [pc, #92]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 800663a:	4313      	orrs	r3, r2
 800663c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d009      	beq.n	800665e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800664a:	4b13      	ldr	r3, [pc, #76]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	490f      	ldr	r1, [pc, #60]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 800665a:	4313      	orrs	r3, r2
 800665c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800665e:	f000 f825 	bl	80066ac <HAL_RCC_GetSysClockFreq>
 8006662:	4602      	mov	r2, r0
 8006664:	4b0c      	ldr	r3, [pc, #48]	@ (8006698 <HAL_RCC_ClockConfig+0x264>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	091b      	lsrs	r3, r3, #4
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	490c      	ldr	r1, [pc, #48]	@ (80066a0 <HAL_RCC_ClockConfig+0x26c>)
 8006670:	5ccb      	ldrb	r3, [r1, r3]
 8006672:	f003 031f 	and.w	r3, r3, #31
 8006676:	fa22 f303 	lsr.w	r3, r2, r3
 800667a:	4a0a      	ldr	r2, [pc, #40]	@ (80066a4 <HAL_RCC_ClockConfig+0x270>)
 800667c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800667e:	4b0a      	ldr	r3, [pc, #40]	@ (80066a8 <HAL_RCC_ClockConfig+0x274>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4618      	mov	r0, r3
 8006684:	f7fe fcac 	bl	8004fe0 <HAL_InitTick>
 8006688:	4603      	mov	r3, r0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	40022000 	.word	0x40022000
 8006698:	40021000 	.word	0x40021000
 800669c:	04c4b400 	.word	0x04c4b400
 80066a0:	0800c000 	.word	0x0800c000
 80066a4:	20000028 	.word	0x20000028
 80066a8:	2000002c 	.word	0x2000002c

080066ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80066b2:	4b2c      	ldr	r3, [pc, #176]	@ (8006764 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 030c 	and.w	r3, r3, #12
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d102      	bne.n	80066c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066be:	4b2a      	ldr	r3, [pc, #168]	@ (8006768 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	e047      	b.n	8006754 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80066c4:	4b27      	ldr	r3, [pc, #156]	@ (8006764 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f003 030c 	and.w	r3, r3, #12
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d102      	bne.n	80066d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066d0:	4b26      	ldr	r3, [pc, #152]	@ (800676c <HAL_RCC_GetSysClockFreq+0xc0>)
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	e03e      	b.n	8006754 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80066d6:	4b23      	ldr	r3, [pc, #140]	@ (8006764 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 030c 	and.w	r3, r3, #12
 80066de:	2b0c      	cmp	r3, #12
 80066e0:	d136      	bne.n	8006750 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066e2:	4b20      	ldr	r3, [pc, #128]	@ (8006764 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006764 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	091b      	lsrs	r3, r3, #4
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	3301      	adds	r3, #1
 80066f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d10c      	bne.n	800671a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006700:	4a1a      	ldr	r2, [pc, #104]	@ (800676c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	fbb2 f3f3 	udiv	r3, r2, r3
 8006708:	4a16      	ldr	r2, [pc, #88]	@ (8006764 <HAL_RCC_GetSysClockFreq+0xb8>)
 800670a:	68d2      	ldr	r2, [r2, #12]
 800670c:	0a12      	lsrs	r2, r2, #8
 800670e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006712:	fb02 f303 	mul.w	r3, r2, r3
 8006716:	617b      	str	r3, [r7, #20]
      break;
 8006718:	e00c      	b.n	8006734 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800671a:	4a13      	ldr	r2, [pc, #76]	@ (8006768 <HAL_RCC_GetSysClockFreq+0xbc>)
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006722:	4a10      	ldr	r2, [pc, #64]	@ (8006764 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006724:	68d2      	ldr	r2, [r2, #12]
 8006726:	0a12      	lsrs	r2, r2, #8
 8006728:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800672c:	fb02 f303 	mul.w	r3, r2, r3
 8006730:	617b      	str	r3, [r7, #20]
      break;
 8006732:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006734:	4b0b      	ldr	r3, [pc, #44]	@ (8006764 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	0e5b      	lsrs	r3, r3, #25
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	3301      	adds	r3, #1
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	fbb2 f3f3 	udiv	r3, r2, r3
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	e001      	b.n	8006754 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006754:	693b      	ldr	r3, [r7, #16]
}
 8006756:	4618      	mov	r0, r3
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	40021000 	.word	0x40021000
 8006768:	00f42400 	.word	0x00f42400
 800676c:	016e3600 	.word	0x016e3600

08006770 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006774:	4b03      	ldr	r3, [pc, #12]	@ (8006784 <HAL_RCC_GetHCLKFreq+0x14>)
 8006776:	681b      	ldr	r3, [r3, #0]
}
 8006778:	4618      	mov	r0, r3
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20000028 	.word	0x20000028

08006788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800678c:	f7ff fff0 	bl	8006770 <HAL_RCC_GetHCLKFreq>
 8006790:	4602      	mov	r2, r0
 8006792:	4b06      	ldr	r3, [pc, #24]	@ (80067ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	0a1b      	lsrs	r3, r3, #8
 8006798:	f003 0307 	and.w	r3, r3, #7
 800679c:	4904      	ldr	r1, [pc, #16]	@ (80067b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800679e:	5ccb      	ldrb	r3, [r1, r3]
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	40021000 	.word	0x40021000
 80067b0:	0800c010 	.word	0x0800c010

080067b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067b8:	f7ff ffda 	bl	8006770 <HAL_RCC_GetHCLKFreq>
 80067bc:	4602      	mov	r2, r0
 80067be:	4b06      	ldr	r3, [pc, #24]	@ (80067d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	0adb      	lsrs	r3, r3, #11
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	4904      	ldr	r1, [pc, #16]	@ (80067dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80067ca:	5ccb      	ldrb	r3, [r1, r3]
 80067cc:	f003 031f 	and.w	r3, r3, #31
 80067d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	40021000 	.word	0x40021000
 80067dc:	0800c010 	.word	0x0800c010

080067e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006860 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006860 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	091b      	lsrs	r3, r3, #4
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	2b03      	cmp	r3, #3
 8006802:	d10c      	bne.n	800681e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006804:	4a17      	ldr	r2, [pc, #92]	@ (8006864 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	4a14      	ldr	r2, [pc, #80]	@ (8006860 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800680e:	68d2      	ldr	r2, [r2, #12]
 8006810:	0a12      	lsrs	r2, r2, #8
 8006812:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006816:	fb02 f303 	mul.w	r3, r2, r3
 800681a:	617b      	str	r3, [r7, #20]
    break;
 800681c:	e00c      	b.n	8006838 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800681e:	4a12      	ldr	r2, [pc, #72]	@ (8006868 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	fbb2 f3f3 	udiv	r3, r2, r3
 8006826:	4a0e      	ldr	r2, [pc, #56]	@ (8006860 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006828:	68d2      	ldr	r2, [r2, #12]
 800682a:	0a12      	lsrs	r2, r2, #8
 800682c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006830:	fb02 f303 	mul.w	r3, r2, r3
 8006834:	617b      	str	r3, [r7, #20]
    break;
 8006836:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006838:	4b09      	ldr	r3, [pc, #36]	@ (8006860 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	0e5b      	lsrs	r3, r3, #25
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	3301      	adds	r3, #1
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006850:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006852:	687b      	ldr	r3, [r7, #4]
}
 8006854:	4618      	mov	r0, r3
 8006856:	371c      	adds	r7, #28
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	40021000 	.word	0x40021000
 8006864:	016e3600 	.word	0x016e3600
 8006868:	00f42400 	.word	0x00f42400

0800686c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006874:	2300      	movs	r3, #0
 8006876:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006878:	2300      	movs	r3, #0
 800687a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 8098 	beq.w	80069ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800688a:	2300      	movs	r3, #0
 800688c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800688e:	4b43      	ldr	r3, [pc, #268]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10d      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800689a:	4b40      	ldr	r3, [pc, #256]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800689c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800689e:	4a3f      	ldr	r2, [pc, #252]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80068a6:	4b3d      	ldr	r3, [pc, #244]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ae:	60bb      	str	r3, [r7, #8]
 80068b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068b2:	2301      	movs	r3, #1
 80068b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068b6:	4b3a      	ldr	r3, [pc, #232]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a39      	ldr	r2, [pc, #228]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068c2:	f7fe fbd9 	bl	8005078 <HAL_GetTick>
 80068c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068c8:	e009      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ca:	f7fe fbd5 	bl	8005078 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d902      	bls.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	74fb      	strb	r3, [r7, #19]
        break;
 80068dc:	e005      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068de:	4b30      	ldr	r3, [pc, #192]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d0ef      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80068ea:	7cfb      	ldrb	r3, [r7, #19]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d159      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068f0:	4b2a      	ldr	r3, [pc, #168]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d01e      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	429a      	cmp	r2, r3
 800690a:	d019      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800690c:	4b23      	ldr	r3, [pc, #140]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006912:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006916:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006918:	4b20      	ldr	r3, [pc, #128]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800691a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800691e:	4a1f      	ldr	r2, [pc, #124]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006928:	4b1c      	ldr	r3, [pc, #112]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800692a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692e:	4a1b      	ldr	r2, [pc, #108]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006938:	4a18      	ldr	r2, [pc, #96]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d016      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694a:	f7fe fb95 	bl	8005078 <HAL_GetTick>
 800694e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006950:	e00b      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006952:	f7fe fb91 	bl	8005078 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006960:	4293      	cmp	r3, r2
 8006962:	d902      	bls.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	74fb      	strb	r3, [r7, #19]
            break;
 8006968:	e006      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800696a:	4b0c      	ldr	r3, [pc, #48]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800696c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0ec      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006978:	7cfb      	ldrb	r3, [r7, #19]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10b      	bne.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800697e:	4b07      	ldr	r3, [pc, #28]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006984:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800698c:	4903      	ldr	r1, [pc, #12]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800698e:	4313      	orrs	r3, r2
 8006990:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006994:	e008      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006996:	7cfb      	ldrb	r3, [r7, #19]
 8006998:	74bb      	strb	r3, [r7, #18]
 800699a:	e005      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800699c:	40021000 	.word	0x40021000
 80069a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a4:	7cfb      	ldrb	r3, [r7, #19]
 80069a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069a8:	7c7b      	ldrb	r3, [r7, #17]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d105      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069ae:	4ba7      	ldr	r3, [pc, #668]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b2:	4aa6      	ldr	r2, [pc, #664]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069c6:	4ba1      	ldr	r3, [pc, #644]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069cc:	f023 0203 	bic.w	r2, r3, #3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	499d      	ldr	r1, [pc, #628]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069e8:	4b98      	ldr	r3, [pc, #608]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ee:	f023 020c 	bic.w	r2, r3, #12
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	4995      	ldr	r1, [pc, #596]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0304 	and.w	r3, r3, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a0a:	4b90      	ldr	r3, [pc, #576]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a10:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	498c      	ldr	r1, [pc, #560]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0308 	and.w	r3, r3, #8
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00a      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a2c:	4b87      	ldr	r3, [pc, #540]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	4984      	ldr	r1, [pc, #528]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0310 	and.w	r3, r3, #16
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a4e:	4b7f      	ldr	r3, [pc, #508]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	497b      	ldr	r1, [pc, #492]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a70:	4b76      	ldr	r3, [pc, #472]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	4973      	ldr	r1, [pc, #460]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a92:	4b6e      	ldr	r3, [pc, #440]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a98:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	496a      	ldr	r1, [pc, #424]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00a      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ab4:	4b65      	ldr	r3, [pc, #404]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	4962      	ldr	r1, [pc, #392]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ad6:	4b5d      	ldr	r3, [pc, #372]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006adc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae4:	4959      	ldr	r1, [pc, #356]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00a      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006af8:	4b54      	ldr	r3, [pc, #336]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006afa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006afe:	f023 0203 	bic.w	r2, r3, #3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b06:	4951      	ldr	r1, [pc, #324]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00a      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b1a:	4b4c      	ldr	r3, [pc, #304]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b28:	4948      	ldr	r1, [pc, #288]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d015      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b3c:	4b43      	ldr	r3, [pc, #268]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4a:	4940      	ldr	r1, [pc, #256]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b5a:	d105      	bne.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	4a3a      	ldr	r2, [pc, #232]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b66:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d015      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b74:	4b35      	ldr	r3, [pc, #212]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b82:	4932      	ldr	r1, [pc, #200]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b92:	d105      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b94:	4b2d      	ldr	r3, [pc, #180]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	4a2c      	ldr	r2, [pc, #176]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b9e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d015      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006bac:	4b27      	ldr	r3, [pc, #156]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bba:	4924      	ldr	r1, [pc, #144]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bca:	d105      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bd6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d015      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006be4:	4b19      	ldr	r3, [pc, #100]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf2:	4916      	ldr	r1, [pc, #88]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c02:	d105      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c04:	4b11      	ldr	r3, [pc, #68]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	4a10      	ldr	r2, [pc, #64]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c0e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d019      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2a:	4908      	ldr	r1, [pc, #32]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c3a:	d109      	bne.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c3c:	4b03      	ldr	r3, [pc, #12]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	4a02      	ldr	r2, [pc, #8]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c46:	60d3      	str	r3, [r2, #12]
 8006c48:	e002      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006c4a:	bf00      	nop
 8006c4c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d015      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c5c:	4b29      	ldr	r3, [pc, #164]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c62:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c6a:	4926      	ldr	r1, [pc, #152]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c7a:	d105      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c7c:	4b21      	ldr	r3, [pc, #132]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	4a20      	ldr	r2, [pc, #128]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c86:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d015      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006c94:	4b1b      	ldr	r3, [pc, #108]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c9a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ca2:	4918      	ldr	r1, [pc, #96]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cb2:	d105      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006cb4:	4b13      	ldr	r3, [pc, #76]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	4a12      	ldr	r2, [pc, #72]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cbe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d015      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cda:	490a      	ldr	r1, [pc, #40]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ce6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cea:	d105      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cec:	4b05      	ldr	r3, [pc, #20]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	4a04      	ldr	r2, [pc, #16]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cf6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006cf8:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40021000 	.word	0x40021000

08006d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e054      	b.n	8006dc4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d111      	bne.n	8006d4a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f002 fb3c 	bl	80093ac <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d102      	bne.n	8006d42 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a23      	ldr	r2, [pc, #140]	@ (8006dcc <HAL_TIM_Base_Init+0xc4>)
 8006d40:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	f001 fc7b 	bl	8008658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	08004ad1 	.word	0x08004ad1

08006dd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d001      	beq.n	8006de8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e04c      	b.n	8006e82 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a26      	ldr	r2, [pc, #152]	@ (8006e90 <HAL_TIM_Base_Start+0xc0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d022      	beq.n	8006e40 <HAL_TIM_Base_Start+0x70>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e02:	d01d      	beq.n	8006e40 <HAL_TIM_Base_Start+0x70>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a22      	ldr	r2, [pc, #136]	@ (8006e94 <HAL_TIM_Base_Start+0xc4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d018      	beq.n	8006e40 <HAL_TIM_Base_Start+0x70>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a21      	ldr	r2, [pc, #132]	@ (8006e98 <HAL_TIM_Base_Start+0xc8>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d013      	beq.n	8006e40 <HAL_TIM_Base_Start+0x70>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8006e9c <HAL_TIM_Base_Start+0xcc>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d00e      	beq.n	8006e40 <HAL_TIM_Base_Start+0x70>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a1e      	ldr	r2, [pc, #120]	@ (8006ea0 <HAL_TIM_Base_Start+0xd0>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d009      	beq.n	8006e40 <HAL_TIM_Base_Start+0x70>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1c      	ldr	r2, [pc, #112]	@ (8006ea4 <HAL_TIM_Base_Start+0xd4>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d004      	beq.n	8006e40 <HAL_TIM_Base_Start+0x70>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ea8 <HAL_TIM_Base_Start+0xd8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d115      	bne.n	8006e6c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	4b19      	ldr	r3, [pc, #100]	@ (8006eac <HAL_TIM_Base_Start+0xdc>)
 8006e48:	4013      	ands	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b06      	cmp	r3, #6
 8006e50:	d015      	beq.n	8006e7e <HAL_TIM_Base_Start+0xae>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e58:	d011      	beq.n	8006e7e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 0201 	orr.w	r2, r2, #1
 8006e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e6a:	e008      	b.n	8006e7e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f042 0201 	orr.w	r2, r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	e000      	b.n	8006e80 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40012c00 	.word	0x40012c00
 8006e94:	40000400 	.word	0x40000400
 8006e98:	40000800 	.word	0x40000800
 8006e9c:	40000c00 	.word	0x40000c00
 8006ea0:	40013400 	.word	0x40013400
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	40015000 	.word	0x40015000
 8006eac:	00010007 	.word	0x00010007

08006eb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d001      	beq.n	8006ec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e054      	b.n	8006f72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68da      	ldr	r2, [r3, #12]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f042 0201 	orr.w	r2, r2, #1
 8006ede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a26      	ldr	r2, [pc, #152]	@ (8006f80 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d022      	beq.n	8006f30 <HAL_TIM_Base_Start_IT+0x80>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ef2:	d01d      	beq.n	8006f30 <HAL_TIM_Base_Start_IT+0x80>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a22      	ldr	r2, [pc, #136]	@ (8006f84 <HAL_TIM_Base_Start_IT+0xd4>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d018      	beq.n	8006f30 <HAL_TIM_Base_Start_IT+0x80>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a21      	ldr	r2, [pc, #132]	@ (8006f88 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d013      	beq.n	8006f30 <HAL_TIM_Base_Start_IT+0x80>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8006f8c <HAL_TIM_Base_Start_IT+0xdc>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00e      	beq.n	8006f30 <HAL_TIM_Base_Start_IT+0x80>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a1e      	ldr	r2, [pc, #120]	@ (8006f90 <HAL_TIM_Base_Start_IT+0xe0>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d009      	beq.n	8006f30 <HAL_TIM_Base_Start_IT+0x80>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a1c      	ldr	r2, [pc, #112]	@ (8006f94 <HAL_TIM_Base_Start_IT+0xe4>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d004      	beq.n	8006f30 <HAL_TIM_Base_Start_IT+0x80>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8006f98 <HAL_TIM_Base_Start_IT+0xe8>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d115      	bne.n	8006f5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	4b19      	ldr	r3, [pc, #100]	@ (8006f9c <HAL_TIM_Base_Start_IT+0xec>)
 8006f38:	4013      	ands	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2b06      	cmp	r3, #6
 8006f40:	d015      	beq.n	8006f6e <HAL_TIM_Base_Start_IT+0xbe>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f48:	d011      	beq.n	8006f6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f042 0201 	orr.w	r2, r2, #1
 8006f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f5a:	e008      	b.n	8006f6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0201 	orr.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	e000      	b.n	8006f70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	40012c00 	.word	0x40012c00
 8006f84:	40000400 	.word	0x40000400
 8006f88:	40000800 	.word	0x40000800
 8006f8c:	40000c00 	.word	0x40000c00
 8006f90:	40013400 	.word	0x40013400
 8006f94:	40014000 	.word	0x40014000
 8006f98:	40015000 	.word	0x40015000
 8006f9c:	00010007 	.word	0x00010007

08006fa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e054      	b.n	800705c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d111      	bne.n	8006fe2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f002 f9f0 	bl	80093ac <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d102      	bne.n	8006fda <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a23      	ldr	r2, [pc, #140]	@ (8007064 <HAL_TIM_PWM_Init+0xc4>)
 8006fd8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	f001 fb2f 	bl	8008658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	08007069 	.word	0x08007069

08007068 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d109      	bne.n	80070a0 <HAL_TIM_PWM_Start+0x24>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b01      	cmp	r3, #1
 8007096:	bf14      	ite	ne
 8007098:	2301      	movne	r3, #1
 800709a:	2300      	moveq	r3, #0
 800709c:	b2db      	uxtb	r3, r3
 800709e:	e03c      	b.n	800711a <HAL_TIM_PWM_Start+0x9e>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2b04      	cmp	r3, #4
 80070a4:	d109      	bne.n	80070ba <HAL_TIM_PWM_Start+0x3e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	bf14      	ite	ne
 80070b2:	2301      	movne	r3, #1
 80070b4:	2300      	moveq	r3, #0
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	e02f      	b.n	800711a <HAL_TIM_PWM_Start+0x9e>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b08      	cmp	r3, #8
 80070be:	d109      	bne.n	80070d4 <HAL_TIM_PWM_Start+0x58>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	bf14      	ite	ne
 80070cc:	2301      	movne	r3, #1
 80070ce:	2300      	moveq	r3, #0
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	e022      	b.n	800711a <HAL_TIM_PWM_Start+0x9e>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2b0c      	cmp	r3, #12
 80070d8:	d109      	bne.n	80070ee <HAL_TIM_PWM_Start+0x72>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	bf14      	ite	ne
 80070e6:	2301      	movne	r3, #1
 80070e8:	2300      	moveq	r3, #0
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	e015      	b.n	800711a <HAL_TIM_PWM_Start+0x9e>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d109      	bne.n	8007108 <HAL_TIM_PWM_Start+0x8c>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	bf14      	ite	ne
 8007100:	2301      	movne	r3, #1
 8007102:	2300      	moveq	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	e008      	b.n	800711a <HAL_TIM_PWM_Start+0x9e>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b01      	cmp	r3, #1
 8007112:	bf14      	ite	ne
 8007114:	2301      	movne	r3, #1
 8007116:	2300      	moveq	r3, #0
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e0a6      	b.n	8007270 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d104      	bne.n	8007132 <HAL_TIM_PWM_Start+0xb6>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007130:	e023      	b.n	800717a <HAL_TIM_PWM_Start+0xfe>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b04      	cmp	r3, #4
 8007136:	d104      	bne.n	8007142 <HAL_TIM_PWM_Start+0xc6>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007140:	e01b      	b.n	800717a <HAL_TIM_PWM_Start+0xfe>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b08      	cmp	r3, #8
 8007146:	d104      	bne.n	8007152 <HAL_TIM_PWM_Start+0xd6>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007150:	e013      	b.n	800717a <HAL_TIM_PWM_Start+0xfe>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b0c      	cmp	r3, #12
 8007156:	d104      	bne.n	8007162 <HAL_TIM_PWM_Start+0xe6>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007160:	e00b      	b.n	800717a <HAL_TIM_PWM_Start+0xfe>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b10      	cmp	r3, #16
 8007166:	d104      	bne.n	8007172 <HAL_TIM_PWM_Start+0xf6>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007170:	e003      	b.n	800717a <HAL_TIM_PWM_Start+0xfe>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2202      	movs	r2, #2
 8007176:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2201      	movs	r2, #1
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	4618      	mov	r0, r3
 8007184:	f002 f8ec 	bl	8009360 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a3a      	ldr	r2, [pc, #232]	@ (8007278 <HAL_TIM_PWM_Start+0x1fc>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d018      	beq.n	80071c4 <HAL_TIM_PWM_Start+0x148>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a39      	ldr	r2, [pc, #228]	@ (800727c <HAL_TIM_PWM_Start+0x200>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d013      	beq.n	80071c4 <HAL_TIM_PWM_Start+0x148>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a37      	ldr	r2, [pc, #220]	@ (8007280 <HAL_TIM_PWM_Start+0x204>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d00e      	beq.n	80071c4 <HAL_TIM_PWM_Start+0x148>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a36      	ldr	r2, [pc, #216]	@ (8007284 <HAL_TIM_PWM_Start+0x208>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d009      	beq.n	80071c4 <HAL_TIM_PWM_Start+0x148>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a34      	ldr	r2, [pc, #208]	@ (8007288 <HAL_TIM_PWM_Start+0x20c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d004      	beq.n	80071c4 <HAL_TIM_PWM_Start+0x148>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a33      	ldr	r2, [pc, #204]	@ (800728c <HAL_TIM_PWM_Start+0x210>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d101      	bne.n	80071c8 <HAL_TIM_PWM_Start+0x14c>
 80071c4:	2301      	movs	r3, #1
 80071c6:	e000      	b.n	80071ca <HAL_TIM_PWM_Start+0x14e>
 80071c8:	2300      	movs	r3, #0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d007      	beq.n	80071de <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a25      	ldr	r2, [pc, #148]	@ (8007278 <HAL_TIM_PWM_Start+0x1fc>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d022      	beq.n	800722e <HAL_TIM_PWM_Start+0x1b2>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071f0:	d01d      	beq.n	800722e <HAL_TIM_PWM_Start+0x1b2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a26      	ldr	r2, [pc, #152]	@ (8007290 <HAL_TIM_PWM_Start+0x214>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d018      	beq.n	800722e <HAL_TIM_PWM_Start+0x1b2>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a24      	ldr	r2, [pc, #144]	@ (8007294 <HAL_TIM_PWM_Start+0x218>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d013      	beq.n	800722e <HAL_TIM_PWM_Start+0x1b2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a23      	ldr	r2, [pc, #140]	@ (8007298 <HAL_TIM_PWM_Start+0x21c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d00e      	beq.n	800722e <HAL_TIM_PWM_Start+0x1b2>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a19      	ldr	r2, [pc, #100]	@ (800727c <HAL_TIM_PWM_Start+0x200>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d009      	beq.n	800722e <HAL_TIM_PWM_Start+0x1b2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a18      	ldr	r2, [pc, #96]	@ (8007280 <HAL_TIM_PWM_Start+0x204>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d004      	beq.n	800722e <HAL_TIM_PWM_Start+0x1b2>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a18      	ldr	r2, [pc, #96]	@ (800728c <HAL_TIM_PWM_Start+0x210>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d115      	bne.n	800725a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	4b19      	ldr	r3, [pc, #100]	@ (800729c <HAL_TIM_PWM_Start+0x220>)
 8007236:	4013      	ands	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b06      	cmp	r3, #6
 800723e:	d015      	beq.n	800726c <HAL_TIM_PWM_Start+0x1f0>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007246:	d011      	beq.n	800726c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0201 	orr.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007258:	e008      	b.n	800726c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f042 0201 	orr.w	r2, r2, #1
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	e000      	b.n	800726e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	40012c00 	.word	0x40012c00
 800727c:	40013400 	.word	0x40013400
 8007280:	40014000 	.word	0x40014000
 8007284:	40014400 	.word	0x40014400
 8007288:	40014800 	.word	0x40014800
 800728c:	40015000 	.word	0x40015000
 8007290:	40000400 	.word	0x40000400
 8007294:	40000800 	.word	0x40000800
 8007298:	40000c00 	.word	0x40000c00
 800729c:	00010007 	.word	0x00010007

080072a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e054      	b.n	800735c <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d111      	bne.n	80072e2 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f002 f870 	bl	80093ac <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d102      	bne.n	80072da <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a23      	ldr	r2, [pc, #140]	@ (8007364 <HAL_TIM_IC_Init+0xc4>)
 80072d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2202      	movs	r2, #2
 80072e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3304      	adds	r3, #4
 80072f2:	4619      	mov	r1, r3
 80072f4:	4610      	mov	r0, r2
 80072f6:	f001 f9af 	bl	8008658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	080048d1 	.word	0x080048d1

08007368 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <HAL_TIM_IC_Start+0x1a>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800737e:	b2db      	uxtb	r3, r3
 8007380:	e023      	b.n	80073ca <HAL_TIM_IC_Start+0x62>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b04      	cmp	r3, #4
 8007386:	d104      	bne.n	8007392 <HAL_TIM_IC_Start+0x2a>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800738e:	b2db      	uxtb	r3, r3
 8007390:	e01b      	b.n	80073ca <HAL_TIM_IC_Start+0x62>
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b08      	cmp	r3, #8
 8007396:	d104      	bne.n	80073a2 <HAL_TIM_IC_Start+0x3a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	e013      	b.n	80073ca <HAL_TIM_IC_Start+0x62>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b0c      	cmp	r3, #12
 80073a6:	d104      	bne.n	80073b2 <HAL_TIM_IC_Start+0x4a>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	e00b      	b.n	80073ca <HAL_TIM_IC_Start+0x62>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b10      	cmp	r3, #16
 80073b6:	d104      	bne.n	80073c2 <HAL_TIM_IC_Start+0x5a>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	e003      	b.n	80073ca <HAL_TIM_IC_Start+0x62>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d104      	bne.n	80073dc <HAL_TIM_IC_Start+0x74>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	e013      	b.n	8007404 <HAL_TIM_IC_Start+0x9c>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2b04      	cmp	r3, #4
 80073e0:	d104      	bne.n	80073ec <HAL_TIM_IC_Start+0x84>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	e00b      	b.n	8007404 <HAL_TIM_IC_Start+0x9c>
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2b08      	cmp	r3, #8
 80073f0:	d104      	bne.n	80073fc <HAL_TIM_IC_Start+0x94>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	e003      	b.n	8007404 <HAL_TIM_IC_Start+0x9c>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007402:	b2db      	uxtb	r3, r3
 8007404:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d102      	bne.n	8007412 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800740c:	7bbb      	ldrb	r3, [r7, #14]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d001      	beq.n	8007416 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e097      	b.n	8007546 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d104      	bne.n	8007426 <HAL_TIM_IC_Start+0xbe>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007424:	e023      	b.n	800746e <HAL_TIM_IC_Start+0x106>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b04      	cmp	r3, #4
 800742a:	d104      	bne.n	8007436 <HAL_TIM_IC_Start+0xce>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007434:	e01b      	b.n	800746e <HAL_TIM_IC_Start+0x106>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b08      	cmp	r3, #8
 800743a:	d104      	bne.n	8007446 <HAL_TIM_IC_Start+0xde>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007444:	e013      	b.n	800746e <HAL_TIM_IC_Start+0x106>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b0c      	cmp	r3, #12
 800744a:	d104      	bne.n	8007456 <HAL_TIM_IC_Start+0xee>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007454:	e00b      	b.n	800746e <HAL_TIM_IC_Start+0x106>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b10      	cmp	r3, #16
 800745a:	d104      	bne.n	8007466 <HAL_TIM_IC_Start+0xfe>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007464:	e003      	b.n	800746e <HAL_TIM_IC_Start+0x106>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2202      	movs	r2, #2
 800746a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d104      	bne.n	800747e <HAL_TIM_IC_Start+0x116>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800747c:	e013      	b.n	80074a6 <HAL_TIM_IC_Start+0x13e>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b04      	cmp	r3, #4
 8007482:	d104      	bne.n	800748e <HAL_TIM_IC_Start+0x126>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800748c:	e00b      	b.n	80074a6 <HAL_TIM_IC_Start+0x13e>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b08      	cmp	r3, #8
 8007492:	d104      	bne.n	800749e <HAL_TIM_IC_Start+0x136>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800749c:	e003      	b.n	80074a6 <HAL_TIM_IC_Start+0x13e>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2202      	movs	r2, #2
 80074a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2201      	movs	r2, #1
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f001 ff56 	bl	8009360 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a25      	ldr	r2, [pc, #148]	@ (8007550 <HAL_TIM_IC_Start+0x1e8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d022      	beq.n	8007504 <HAL_TIM_IC_Start+0x19c>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074c6:	d01d      	beq.n	8007504 <HAL_TIM_IC_Start+0x19c>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a21      	ldr	r2, [pc, #132]	@ (8007554 <HAL_TIM_IC_Start+0x1ec>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d018      	beq.n	8007504 <HAL_TIM_IC_Start+0x19c>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a20      	ldr	r2, [pc, #128]	@ (8007558 <HAL_TIM_IC_Start+0x1f0>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d013      	beq.n	8007504 <HAL_TIM_IC_Start+0x19c>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a1e      	ldr	r2, [pc, #120]	@ (800755c <HAL_TIM_IC_Start+0x1f4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00e      	beq.n	8007504 <HAL_TIM_IC_Start+0x19c>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a1d      	ldr	r2, [pc, #116]	@ (8007560 <HAL_TIM_IC_Start+0x1f8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d009      	beq.n	8007504 <HAL_TIM_IC_Start+0x19c>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007564 <HAL_TIM_IC_Start+0x1fc>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d004      	beq.n	8007504 <HAL_TIM_IC_Start+0x19c>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a1a      	ldr	r2, [pc, #104]	@ (8007568 <HAL_TIM_IC_Start+0x200>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d115      	bne.n	8007530 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	4b18      	ldr	r3, [pc, #96]	@ (800756c <HAL_TIM_IC_Start+0x204>)
 800750c:	4013      	ands	r3, r2
 800750e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2b06      	cmp	r3, #6
 8007514:	d015      	beq.n	8007542 <HAL_TIM_IC_Start+0x1da>
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800751c:	d011      	beq.n	8007542 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f042 0201 	orr.w	r2, r2, #1
 800752c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800752e:	e008      	b.n	8007542 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0201 	orr.w	r2, r2, #1
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	e000      	b.n	8007544 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007542:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	40012c00 	.word	0x40012c00
 8007554:	40000400 	.word	0x40000400
 8007558:	40000800 	.word	0x40000800
 800755c:	40000c00 	.word	0x40000c00
 8007560:	40013400 	.word	0x40013400
 8007564:	40014000 	.word	0x40014000
 8007568:	40015000 	.word	0x40015000
 800756c:	00010007 	.word	0x00010007

08007570 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e04c      	b.n	800761e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	d111      	bne.n	80075b4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f001 ff07 	bl	80093ac <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d102      	bne.n	80075ac <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a1f      	ldr	r2, [pc, #124]	@ (8007628 <HAL_TIM_OnePulse_Init+0xb8>)
 80075aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4619      	mov	r1, r3
 80075c6:	4610      	mov	r0, r2
 80075c8:	f001 f846 	bl	8008658 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0208 	bic.w	r2, r2, #8
 80075da:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6819      	ldr	r1, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	0800762d 	.word	0x0800762d

0800762c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007650:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007658:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007660:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007668:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800766a:	7bfb      	ldrb	r3, [r7, #15]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d108      	bne.n	8007682 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d105      	bne.n	8007682 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007676:	7b7b      	ldrb	r3, [r7, #13]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d102      	bne.n	8007682 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800767c:	7b3b      	ldrb	r3, [r7, #12]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d001      	beq.n	8007686 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e059      	b.n	800773a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2202      	movs	r2, #2
 800768a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2202      	movs	r2, #2
 8007692:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2202      	movs	r2, #2
 800769a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2202      	movs	r2, #2
 80076a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68da      	ldr	r2, [r3, #12]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f042 0202 	orr.w	r2, r2, #2
 80076b4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f042 0204 	orr.w	r2, r2, #4
 80076c4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2201      	movs	r2, #1
 80076cc:	2100      	movs	r1, #0
 80076ce:	4618      	mov	r0, r3
 80076d0:	f001 fe46 	bl	8009360 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2201      	movs	r2, #1
 80076da:	2104      	movs	r1, #4
 80076dc:	4618      	mov	r0, r3
 80076de:	f001 fe3f 	bl	8009360 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a17      	ldr	r2, [pc, #92]	@ (8007744 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d018      	beq.n	800771e <HAL_TIM_OnePulse_Start_IT+0xde>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a15      	ldr	r2, [pc, #84]	@ (8007748 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d013      	beq.n	800771e <HAL_TIM_OnePulse_Start_IT+0xde>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a14      	ldr	r2, [pc, #80]	@ (800774c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d00e      	beq.n	800771e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a12      	ldr	r2, [pc, #72]	@ (8007750 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d009      	beq.n	800771e <HAL_TIM_OnePulse_Start_IT+0xde>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a11      	ldr	r2, [pc, #68]	@ (8007754 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d004      	beq.n	800771e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a0f      	ldr	r2, [pc, #60]	@ (8007758 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d101      	bne.n	8007722 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800771e:	2301      	movs	r3, #1
 8007720:	e000      	b.n	8007724 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007722:	2300      	movs	r3, #0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007736:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	40012c00 	.word	0x40012c00
 8007748:	40013400 	.word	0x40013400
 800774c:	40014000 	.word	0x40014000
 8007750:	40014400 	.word	0x40014400
 8007754:	40014800 	.word	0x40014800
 8007758:	40015000 	.word	0x40015000

0800775c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e0a2      	b.n	80078b6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	d111      	bne.n	80077a0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 fe11 	bl	80093ac <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800778e:	2b00      	cmp	r3, #0
 8007790:	d102      	bne.n	8007798 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a4a      	ldr	r2, [pc, #296]	@ (80078c0 <HAL_TIM_Encoder_Init+0x164>)
 8007796:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6812      	ldr	r2, [r2, #0]
 80077b2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80077b6:	f023 0307 	bic.w	r3, r3, #7
 80077ba:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4619      	mov	r1, r3
 80077c6:	4610      	mov	r0, r2
 80077c8:	f000 ff46 	bl	8008658 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077f4:	f023 0303 	bic.w	r3, r3, #3
 80077f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	021b      	lsls	r3, r3, #8
 8007804:	4313      	orrs	r3, r2
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	4313      	orrs	r3, r2
 800780a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007812:	f023 030c 	bic.w	r3, r3, #12
 8007816:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800781e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	021b      	lsls	r3, r3, #8
 800782e:	4313      	orrs	r3, r2
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	4313      	orrs	r3, r2
 8007834:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	011a      	lsls	r2, r3, #4
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	031b      	lsls	r3, r3, #12
 8007842:	4313      	orrs	r3, r2
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	4313      	orrs	r3, r2
 8007848:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007850:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007858:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	011b      	lsls	r3, r3, #4
 8007864:	4313      	orrs	r3, r2
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	4313      	orrs	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	080049c5 	.word	0x080049c5

080078c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d110      	bne.n	8007916 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d102      	bne.n	8007900 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80078fa:	7b7b      	ldrb	r3, [r7, #13]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d001      	beq.n	8007904 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e069      	b.n	80079d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007914:	e031      	b.n	800797a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b04      	cmp	r3, #4
 800791a:	d110      	bne.n	800793e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d102      	bne.n	8007928 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007922:	7b3b      	ldrb	r3, [r7, #12]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d001      	beq.n	800792c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e055      	b.n	80079d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2202      	movs	r2, #2
 8007938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800793c:	e01d      	b.n	800797a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800793e:	7bfb      	ldrb	r3, [r7, #15]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d108      	bne.n	8007956 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d105      	bne.n	8007956 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800794a:	7b7b      	ldrb	r3, [r7, #13]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d102      	bne.n	8007956 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007950:	7b3b      	ldrb	r3, [r7, #12]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d001      	beq.n	800795a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e03e      	b.n	80079d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2202      	movs	r2, #2
 800795e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2202      	movs	r2, #2
 8007966:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2202      	movs	r2, #2
 800796e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2202      	movs	r2, #2
 8007976:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d003      	beq.n	8007988 <HAL_TIM_Encoder_Start+0xc4>
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2b04      	cmp	r3, #4
 8007984:	d008      	beq.n	8007998 <HAL_TIM_Encoder_Start+0xd4>
 8007986:	e00f      	b.n	80079a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2201      	movs	r2, #1
 800798e:	2100      	movs	r1, #0
 8007990:	4618      	mov	r0, r3
 8007992:	f001 fce5 	bl	8009360 <TIM_CCxChannelCmd>
      break;
 8007996:	e016      	b.n	80079c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2201      	movs	r2, #1
 800799e:	2104      	movs	r1, #4
 80079a0:	4618      	mov	r0, r3
 80079a2:	f001 fcdd 	bl	8009360 <TIM_CCxChannelCmd>
      break;
 80079a6:	e00e      	b.n	80079c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2201      	movs	r2, #1
 80079ae:	2100      	movs	r1, #0
 80079b0:	4618      	mov	r0, r3
 80079b2:	f001 fcd5 	bl	8009360 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2201      	movs	r2, #1
 80079bc:	2104      	movs	r1, #4
 80079be:	4618      	mov	r0, r3
 80079c0:	f001 fcce 	bl	8009360 <TIM_CCxChannelCmd>
      break;
 80079c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f042 0201 	orr.w	r2, r2, #1
 80079d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d026      	beq.n	8007a50 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f003 0302 	and.w	r3, r3, #2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d021      	beq.n	8007a50 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f06f 0202 	mvn.w	r2, #2
 8007a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	f003 0303 	and.w	r3, r3, #3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d005      	beq.n	8007a36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	4798      	blx	r3
 8007a34:	e009      	b.n	8007a4a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d026      	beq.n	8007aa8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d021      	beq.n	8007aa8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f06f 0204 	mvn.w	r2, #4
 8007a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2202      	movs	r2, #2
 8007a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d005      	beq.n	8007a8e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	4798      	blx	r3
 8007a8c:	e009      	b.n	8007aa2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f003 0308 	and.w	r3, r3, #8
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d026      	beq.n	8007b00 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f003 0308 	and.w	r3, r3, #8
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d021      	beq.n	8007b00 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f06f 0208 	mvn.w	r2, #8
 8007ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2204      	movs	r2, #4
 8007aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d005      	beq.n	8007ae6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	4798      	blx	r3
 8007ae4:	e009      	b.n	8007afa <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f003 0310 	and.w	r3, r3, #16
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d026      	beq.n	8007b58 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f003 0310 	and.w	r3, r3, #16
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d021      	beq.n	8007b58 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f06f 0210 	mvn.w	r2, #16
 8007b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2208      	movs	r2, #8
 8007b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d005      	beq.n	8007b3e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	4798      	blx	r3
 8007b3c:	e009      	b.n	8007b52 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00e      	beq.n	8007b80 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d009      	beq.n	8007b80 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f06f 0201 	mvn.w	r2, #1
 8007b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d104      	bne.n	8007b94 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00e      	beq.n	8007bb2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d009      	beq.n	8007bb2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00e      	beq.n	8007bda <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d009      	beq.n	8007bda <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00e      	beq.n	8007c02 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d009      	beq.n	8007c02 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f003 0320 	and.w	r3, r3, #32
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00e      	beq.n	8007c2a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f003 0320 	and.w	r3, r3, #32
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d009      	beq.n	8007c2a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f06f 0220 	mvn.w	r2, #32
 8007c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00e      	beq.n	8007c52 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d009      	beq.n	8007c52 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00e      	beq.n	8007c7a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d009      	beq.n	8007c7a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00e      	beq.n	8007ca2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d009      	beq.n	8007ca2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00e      	beq.n	8007cca <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cca:	bf00      	nop
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b086      	sub	sp, #24
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d101      	bne.n	8007cf0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007cec:	2302      	movs	r3, #2
 8007cee:	e088      	b.n	8007e02 <HAL_TIM_IC_ConfigChannel+0x130>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d11b      	bne.n	8007d36 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007d0e:	f001 f961 	bl	8008fd4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	699a      	ldr	r2, [r3, #24]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f022 020c 	bic.w	r2, r2, #12
 8007d20:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6999      	ldr	r1, [r3, #24]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	619a      	str	r2, [r3, #24]
 8007d34:	e060      	b.n	8007df8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d11c      	bne.n	8007d76 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007d4c:	f001 f9e5 	bl	800911a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007d5e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6999      	ldr	r1, [r3, #24]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	021a      	lsls	r2, r3, #8
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	619a      	str	r2, [r3, #24]
 8007d74:	e040      	b.n	8007df8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	d11b      	bne.n	8007db4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007d8c:	f001 fa32 	bl	80091f4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	69da      	ldr	r2, [r3, #28]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 020c 	bic.w	r2, r2, #12
 8007d9e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	69d9      	ldr	r1, [r3, #28]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	689a      	ldr	r2, [r3, #8]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	61da      	str	r2, [r3, #28]
 8007db2:	e021      	b.n	8007df8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b0c      	cmp	r3, #12
 8007db8:	d11c      	bne.n	8007df4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007dca:	f001 fa4f 	bl	800926c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69da      	ldr	r2, [r3, #28]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007ddc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69d9      	ldr	r1, [r3, #28]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	021a      	lsls	r2, r3, #8
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	61da      	str	r2, [r3, #28]
 8007df2:	e001      	b.n	8007df8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d101      	bne.n	8007e2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e26:	2302      	movs	r3, #2
 8007e28:	e0ff      	b.n	800802a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b14      	cmp	r3, #20
 8007e36:	f200 80f0 	bhi.w	800801a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e40:	08007e95 	.word	0x08007e95
 8007e44:	0800801b 	.word	0x0800801b
 8007e48:	0800801b 	.word	0x0800801b
 8007e4c:	0800801b 	.word	0x0800801b
 8007e50:	08007ed5 	.word	0x08007ed5
 8007e54:	0800801b 	.word	0x0800801b
 8007e58:	0800801b 	.word	0x0800801b
 8007e5c:	0800801b 	.word	0x0800801b
 8007e60:	08007f17 	.word	0x08007f17
 8007e64:	0800801b 	.word	0x0800801b
 8007e68:	0800801b 	.word	0x0800801b
 8007e6c:	0800801b 	.word	0x0800801b
 8007e70:	08007f57 	.word	0x08007f57
 8007e74:	0800801b 	.word	0x0800801b
 8007e78:	0800801b 	.word	0x0800801b
 8007e7c:	0800801b 	.word	0x0800801b
 8007e80:	08007f99 	.word	0x08007f99
 8007e84:	0800801b 	.word	0x0800801b
 8007e88:	0800801b 	.word	0x0800801b
 8007e8c:	0800801b 	.word	0x0800801b
 8007e90:	08007fd9 	.word	0x08007fd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68b9      	ldr	r1, [r7, #8]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 fc90 	bl	80087c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	699a      	ldr	r2, [r3, #24]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f042 0208 	orr.w	r2, r2, #8
 8007eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	699a      	ldr	r2, [r3, #24]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 0204 	bic.w	r2, r2, #4
 8007ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6999      	ldr	r1, [r3, #24]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	691a      	ldr	r2, [r3, #16]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	619a      	str	r2, [r3, #24]
      break;
 8007ed2:	e0a5      	b.n	8008020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68b9      	ldr	r1, [r7, #8]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 fd0a 	bl	80088f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	699a      	ldr	r2, [r3, #24]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	699a      	ldr	r2, [r3, #24]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6999      	ldr	r1, [r3, #24]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	021a      	lsls	r2, r3, #8
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	619a      	str	r2, [r3, #24]
      break;
 8007f14:	e084      	b.n	8008020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68b9      	ldr	r1, [r7, #8]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 fd7d 	bl	8008a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69da      	ldr	r2, [r3, #28]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f042 0208 	orr.w	r2, r2, #8
 8007f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69da      	ldr	r2, [r3, #28]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0204 	bic.w	r2, r2, #4
 8007f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69d9      	ldr	r1, [r3, #28]
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	691a      	ldr	r2, [r3, #16]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	61da      	str	r2, [r3, #28]
      break;
 8007f54:	e064      	b.n	8008020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68b9      	ldr	r1, [r7, #8]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fdef 	bl	8008b40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	69da      	ldr	r2, [r3, #28]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	69da      	ldr	r2, [r3, #28]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	69d9      	ldr	r1, [r3, #28]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	021a      	lsls	r2, r3, #8
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	61da      	str	r2, [r3, #28]
      break;
 8007f96:	e043      	b.n	8008020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68b9      	ldr	r1, [r7, #8]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fe62 	bl	8008c68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0208 	orr.w	r2, r2, #8
 8007fb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0204 	bic.w	r2, r2, #4
 8007fc2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	691a      	ldr	r2, [r3, #16]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007fd6:	e023      	b.n	8008020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68b9      	ldr	r1, [r7, #8]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 feac 	bl	8008d3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ff2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008002:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	021a      	lsls	r2, r3, #8
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	430a      	orrs	r2, r1
 8008016:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008018:	e002      	b.n	8008020 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	75fb      	strb	r3, [r7, #23]
      break;
 800801e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008028:	7dfb      	ldrb	r3, [r7, #23]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop

08008034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008048:	2b01      	cmp	r3, #1
 800804a:	d101      	bne.n	8008050 <HAL_TIM_ConfigClockSource+0x1c>
 800804c:	2302      	movs	r3, #2
 800804e:	e0f6      	b.n	800823e <HAL_TIM_ConfigClockSource+0x20a>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800806e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800807a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a6f      	ldr	r2, [pc, #444]	@ (8008248 <HAL_TIM_ConfigClockSource+0x214>)
 800808a:	4293      	cmp	r3, r2
 800808c:	f000 80c1 	beq.w	8008212 <HAL_TIM_ConfigClockSource+0x1de>
 8008090:	4a6d      	ldr	r2, [pc, #436]	@ (8008248 <HAL_TIM_ConfigClockSource+0x214>)
 8008092:	4293      	cmp	r3, r2
 8008094:	f200 80c6 	bhi.w	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 8008098:	4a6c      	ldr	r2, [pc, #432]	@ (800824c <HAL_TIM_ConfigClockSource+0x218>)
 800809a:	4293      	cmp	r3, r2
 800809c:	f000 80b9 	beq.w	8008212 <HAL_TIM_ConfigClockSource+0x1de>
 80080a0:	4a6a      	ldr	r2, [pc, #424]	@ (800824c <HAL_TIM_ConfigClockSource+0x218>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	f200 80be 	bhi.w	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 80080a8:	4a69      	ldr	r2, [pc, #420]	@ (8008250 <HAL_TIM_ConfigClockSource+0x21c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	f000 80b1 	beq.w	8008212 <HAL_TIM_ConfigClockSource+0x1de>
 80080b0:	4a67      	ldr	r2, [pc, #412]	@ (8008250 <HAL_TIM_ConfigClockSource+0x21c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	f200 80b6 	bhi.w	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 80080b8:	4a66      	ldr	r2, [pc, #408]	@ (8008254 <HAL_TIM_ConfigClockSource+0x220>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	f000 80a9 	beq.w	8008212 <HAL_TIM_ConfigClockSource+0x1de>
 80080c0:	4a64      	ldr	r2, [pc, #400]	@ (8008254 <HAL_TIM_ConfigClockSource+0x220>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	f200 80ae 	bhi.w	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 80080c8:	4a63      	ldr	r2, [pc, #396]	@ (8008258 <HAL_TIM_ConfigClockSource+0x224>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	f000 80a1 	beq.w	8008212 <HAL_TIM_ConfigClockSource+0x1de>
 80080d0:	4a61      	ldr	r2, [pc, #388]	@ (8008258 <HAL_TIM_ConfigClockSource+0x224>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	f200 80a6 	bhi.w	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 80080d8:	4a60      	ldr	r2, [pc, #384]	@ (800825c <HAL_TIM_ConfigClockSource+0x228>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	f000 8099 	beq.w	8008212 <HAL_TIM_ConfigClockSource+0x1de>
 80080e0:	4a5e      	ldr	r2, [pc, #376]	@ (800825c <HAL_TIM_ConfigClockSource+0x228>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	f200 809e 	bhi.w	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 80080e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80080ec:	f000 8091 	beq.w	8008212 <HAL_TIM_ConfigClockSource+0x1de>
 80080f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80080f4:	f200 8096 	bhi.w	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 80080f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080fc:	f000 8089 	beq.w	8008212 <HAL_TIM_ConfigClockSource+0x1de>
 8008100:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008104:	f200 808e 	bhi.w	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 8008108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800810c:	d03e      	beq.n	800818c <HAL_TIM_ConfigClockSource+0x158>
 800810e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008112:	f200 8087 	bhi.w	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 8008116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800811a:	f000 8086 	beq.w	800822a <HAL_TIM_ConfigClockSource+0x1f6>
 800811e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008122:	d87f      	bhi.n	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 8008124:	2b70      	cmp	r3, #112	@ 0x70
 8008126:	d01a      	beq.n	800815e <HAL_TIM_ConfigClockSource+0x12a>
 8008128:	2b70      	cmp	r3, #112	@ 0x70
 800812a:	d87b      	bhi.n	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 800812c:	2b60      	cmp	r3, #96	@ 0x60
 800812e:	d050      	beq.n	80081d2 <HAL_TIM_ConfigClockSource+0x19e>
 8008130:	2b60      	cmp	r3, #96	@ 0x60
 8008132:	d877      	bhi.n	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 8008134:	2b50      	cmp	r3, #80	@ 0x50
 8008136:	d03c      	beq.n	80081b2 <HAL_TIM_ConfigClockSource+0x17e>
 8008138:	2b50      	cmp	r3, #80	@ 0x50
 800813a:	d873      	bhi.n	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 800813c:	2b40      	cmp	r3, #64	@ 0x40
 800813e:	d058      	beq.n	80081f2 <HAL_TIM_ConfigClockSource+0x1be>
 8008140:	2b40      	cmp	r3, #64	@ 0x40
 8008142:	d86f      	bhi.n	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 8008144:	2b30      	cmp	r3, #48	@ 0x30
 8008146:	d064      	beq.n	8008212 <HAL_TIM_ConfigClockSource+0x1de>
 8008148:	2b30      	cmp	r3, #48	@ 0x30
 800814a:	d86b      	bhi.n	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 800814c:	2b20      	cmp	r3, #32
 800814e:	d060      	beq.n	8008212 <HAL_TIM_ConfigClockSource+0x1de>
 8008150:	2b20      	cmp	r3, #32
 8008152:	d867      	bhi.n	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
 8008154:	2b00      	cmp	r3, #0
 8008156:	d05c      	beq.n	8008212 <HAL_TIM_ConfigClockSource+0x1de>
 8008158:	2b10      	cmp	r3, #16
 800815a:	d05a      	beq.n	8008212 <HAL_TIM_ConfigClockSource+0x1de>
 800815c:	e062      	b.n	8008224 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800816e:	f001 f8d7 	bl	8009320 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008180:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	609a      	str	r2, [r3, #8]
      break;
 800818a:	e04f      	b.n	800822c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800819c:	f001 f8c0 	bl	8009320 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689a      	ldr	r2, [r3, #8]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081ae:	609a      	str	r2, [r3, #8]
      break;
 80081b0:	e03c      	b.n	800822c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081be:	461a      	mov	r2, r3
 80081c0:	f000 ff7c 	bl	80090bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2150      	movs	r1, #80	@ 0x50
 80081ca:	4618      	mov	r0, r3
 80081cc:	f001 f88b 	bl	80092e6 <TIM_ITRx_SetConfig>
      break;
 80081d0:	e02c      	b.n	800822c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081de:	461a      	mov	r2, r3
 80081e0:	f000 ffd8 	bl	8009194 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2160      	movs	r1, #96	@ 0x60
 80081ea:	4618      	mov	r0, r3
 80081ec:	f001 f87b 	bl	80092e6 <TIM_ITRx_SetConfig>
      break;
 80081f0:	e01c      	b.n	800822c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081fe:	461a      	mov	r2, r3
 8008200:	f000 ff5c 	bl	80090bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2140      	movs	r1, #64	@ 0x40
 800820a:	4618      	mov	r0, r3
 800820c:	f001 f86b 	bl	80092e6 <TIM_ITRx_SetConfig>
      break;
 8008210:	e00c      	b.n	800822c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4619      	mov	r1, r3
 800821c:	4610      	mov	r0, r2
 800821e:	f001 f862 	bl	80092e6 <TIM_ITRx_SetConfig>
      break;
 8008222:	e003      	b.n	800822c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	73fb      	strb	r3, [r7, #15]
      break;
 8008228:	e000      	b.n	800822c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800822a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800823c:	7bfb      	ldrb	r3, [r7, #15]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	00100070 	.word	0x00100070
 800824c:	00100060 	.word	0x00100060
 8008250:	00100050 	.word	0x00100050
 8008254:	00100040 	.word	0x00100040
 8008258:	00100030 	.word	0x00100030
 800825c:	00100020 	.word	0x00100020

08008260 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008270:	2b01      	cmp	r3, #1
 8008272:	d101      	bne.n	8008278 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008274:	2302      	movs	r3, #2
 8008276:	e031      	b.n	80082dc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2202      	movs	r2, #2
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fdc2 	bl	8008e14 <TIM_SlaveTimer_SetConfig>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d009      	beq.n	80082aa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e018      	b.n	80082dc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68da      	ldr	r2, [r3, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082b8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68da      	ldr	r2, [r3, #12]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80082c8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80082ec:	bf00      	nop
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	460b      	mov	r3, r1
 80083a2:	607a      	str	r2, [r7, #4]
 80083a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e14a      	b.n	800864a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b01      	cmp	r3, #1
 80083be:	f040 80dd 	bne.w	800857c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80083c2:	7afb      	ldrb	r3, [r7, #11]
 80083c4:	2b1f      	cmp	r3, #31
 80083c6:	f200 80d6 	bhi.w	8008576 <HAL_TIM_RegisterCallback+0x1de>
 80083ca:	a201      	add	r2, pc, #4	@ (adr r2, 80083d0 <HAL_TIM_RegisterCallback+0x38>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	08008451 	.word	0x08008451
 80083d4:	08008459 	.word	0x08008459
 80083d8:	08008461 	.word	0x08008461
 80083dc:	08008469 	.word	0x08008469
 80083e0:	08008471 	.word	0x08008471
 80083e4:	08008479 	.word	0x08008479
 80083e8:	08008481 	.word	0x08008481
 80083ec:	08008489 	.word	0x08008489
 80083f0:	08008491 	.word	0x08008491
 80083f4:	08008499 	.word	0x08008499
 80083f8:	080084a1 	.word	0x080084a1
 80083fc:	080084a9 	.word	0x080084a9
 8008400:	080084b1 	.word	0x080084b1
 8008404:	080084b9 	.word	0x080084b9
 8008408:	080084c3 	.word	0x080084c3
 800840c:	080084cd 	.word	0x080084cd
 8008410:	080084d7 	.word	0x080084d7
 8008414:	080084e1 	.word	0x080084e1
 8008418:	080084eb 	.word	0x080084eb
 800841c:	080084f5 	.word	0x080084f5
 8008420:	080084ff 	.word	0x080084ff
 8008424:	08008509 	.word	0x08008509
 8008428:	08008513 	.word	0x08008513
 800842c:	0800851d 	.word	0x0800851d
 8008430:	08008527 	.word	0x08008527
 8008434:	08008531 	.word	0x08008531
 8008438:	0800853b 	.word	0x0800853b
 800843c:	08008545 	.word	0x08008545
 8008440:	0800854f 	.word	0x0800854f
 8008444:	08008559 	.word	0x08008559
 8008448:	08008563 	.word	0x08008563
 800844c:	0800856d 	.word	0x0800856d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008456:	e0f7      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800845e:	e0f3      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008466:	e0ef      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800846e:	e0eb      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008476:	e0e7      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800847e:	e0e3      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008486:	e0df      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800848e:	e0db      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008496:	e0d7      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800849e:	e0d3      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80084a6:	e0cf      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80084ae:	e0cb      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80084b6:	e0c7      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80084c0:	e0c2      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80084ca:	e0bd      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80084d4:	e0b8      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80084de:	e0b3      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80084e8:	e0ae      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80084f2:	e0a9      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80084fc:	e0a4      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008506:	e09f      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008510:	e09a      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800851a:	e095      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008524:	e090      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800852e:	e08b      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008538:	e086      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008542:	e081      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800854c:	e07c      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008556:	e077      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008560:	e072      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800856a:	e06d      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008574:	e068      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	75fb      	strb	r3, [r7, #23]
        break;
 800857a:	e065      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d15d      	bne.n	8008644 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008588:	7afb      	ldrb	r3, [r7, #11]
 800858a:	2b0d      	cmp	r3, #13
 800858c:	d857      	bhi.n	800863e <HAL_TIM_RegisterCallback+0x2a6>
 800858e:	a201      	add	r2, pc, #4	@ (adr r2, 8008594 <HAL_TIM_RegisterCallback+0x1fc>)
 8008590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008594:	080085cd 	.word	0x080085cd
 8008598:	080085d5 	.word	0x080085d5
 800859c:	080085dd 	.word	0x080085dd
 80085a0:	080085e5 	.word	0x080085e5
 80085a4:	080085ed 	.word	0x080085ed
 80085a8:	080085f5 	.word	0x080085f5
 80085ac:	080085fd 	.word	0x080085fd
 80085b0:	08008605 	.word	0x08008605
 80085b4:	0800860d 	.word	0x0800860d
 80085b8:	08008615 	.word	0x08008615
 80085bc:	0800861d 	.word	0x0800861d
 80085c0:	08008625 	.word	0x08008625
 80085c4:	0800862d 	.word	0x0800862d
 80085c8:	08008635 	.word	0x08008635
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80085d2:	e039      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80085da:	e035      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80085e2:	e031      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80085ea:	e02d      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80085f2:	e029      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80085fa:	e025      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008602:	e021      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800860a:	e01d      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008612:	e019      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800861a:	e015      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008622:	e011      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800862a:	e00d      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008632:	e009      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800863c:	e004      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	75fb      	strb	r3, [r7, #23]
        break;
 8008642:	e001      	b.n	8008648 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008648:	7dfb      	ldrb	r3, [r7, #23]
}
 800864a:	4618      	mov	r0, r3
 800864c:	371c      	adds	r7, #28
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop

08008658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a4c      	ldr	r2, [pc, #304]	@ (800879c <TIM_Base_SetConfig+0x144>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d017      	beq.n	80086a0 <TIM_Base_SetConfig+0x48>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008676:	d013      	beq.n	80086a0 <TIM_Base_SetConfig+0x48>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a49      	ldr	r2, [pc, #292]	@ (80087a0 <TIM_Base_SetConfig+0x148>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d00f      	beq.n	80086a0 <TIM_Base_SetConfig+0x48>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a48      	ldr	r2, [pc, #288]	@ (80087a4 <TIM_Base_SetConfig+0x14c>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d00b      	beq.n	80086a0 <TIM_Base_SetConfig+0x48>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a47      	ldr	r2, [pc, #284]	@ (80087a8 <TIM_Base_SetConfig+0x150>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d007      	beq.n	80086a0 <TIM_Base_SetConfig+0x48>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a46      	ldr	r2, [pc, #280]	@ (80087ac <TIM_Base_SetConfig+0x154>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d003      	beq.n	80086a0 <TIM_Base_SetConfig+0x48>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a45      	ldr	r2, [pc, #276]	@ (80087b0 <TIM_Base_SetConfig+0x158>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d108      	bne.n	80086b2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a39      	ldr	r2, [pc, #228]	@ (800879c <TIM_Base_SetConfig+0x144>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d023      	beq.n	8008702 <TIM_Base_SetConfig+0xaa>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086c0:	d01f      	beq.n	8008702 <TIM_Base_SetConfig+0xaa>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a36      	ldr	r2, [pc, #216]	@ (80087a0 <TIM_Base_SetConfig+0x148>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d01b      	beq.n	8008702 <TIM_Base_SetConfig+0xaa>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a35      	ldr	r2, [pc, #212]	@ (80087a4 <TIM_Base_SetConfig+0x14c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d017      	beq.n	8008702 <TIM_Base_SetConfig+0xaa>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a34      	ldr	r2, [pc, #208]	@ (80087a8 <TIM_Base_SetConfig+0x150>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d013      	beq.n	8008702 <TIM_Base_SetConfig+0xaa>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a33      	ldr	r2, [pc, #204]	@ (80087ac <TIM_Base_SetConfig+0x154>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d00f      	beq.n	8008702 <TIM_Base_SetConfig+0xaa>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a33      	ldr	r2, [pc, #204]	@ (80087b4 <TIM_Base_SetConfig+0x15c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d00b      	beq.n	8008702 <TIM_Base_SetConfig+0xaa>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a32      	ldr	r2, [pc, #200]	@ (80087b8 <TIM_Base_SetConfig+0x160>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d007      	beq.n	8008702 <TIM_Base_SetConfig+0xaa>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a31      	ldr	r2, [pc, #196]	@ (80087bc <TIM_Base_SetConfig+0x164>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d003      	beq.n	8008702 <TIM_Base_SetConfig+0xaa>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a2c      	ldr	r2, [pc, #176]	@ (80087b0 <TIM_Base_SetConfig+0x158>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d108      	bne.n	8008714 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	4313      	orrs	r3, r2
 8008712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	4313      	orrs	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	689a      	ldr	r2, [r3, #8]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a18      	ldr	r2, [pc, #96]	@ (800879c <TIM_Base_SetConfig+0x144>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d013      	beq.n	8008768 <TIM_Base_SetConfig+0x110>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a1a      	ldr	r2, [pc, #104]	@ (80087ac <TIM_Base_SetConfig+0x154>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00f      	beq.n	8008768 <TIM_Base_SetConfig+0x110>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a1a      	ldr	r2, [pc, #104]	@ (80087b4 <TIM_Base_SetConfig+0x15c>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d00b      	beq.n	8008768 <TIM_Base_SetConfig+0x110>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a19      	ldr	r2, [pc, #100]	@ (80087b8 <TIM_Base_SetConfig+0x160>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d007      	beq.n	8008768 <TIM_Base_SetConfig+0x110>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a18      	ldr	r2, [pc, #96]	@ (80087bc <TIM_Base_SetConfig+0x164>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d003      	beq.n	8008768 <TIM_Base_SetConfig+0x110>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a13      	ldr	r2, [pc, #76]	@ (80087b0 <TIM_Base_SetConfig+0x158>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d103      	bne.n	8008770 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b01      	cmp	r3, #1
 8008780:	d105      	bne.n	800878e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	f023 0201 	bic.w	r2, r3, #1
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	611a      	str	r2, [r3, #16]
  }
}
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	40012c00 	.word	0x40012c00
 80087a0:	40000400 	.word	0x40000400
 80087a4:	40000800 	.word	0x40000800
 80087a8:	40000c00 	.word	0x40000c00
 80087ac:	40013400 	.word	0x40013400
 80087b0:	40015000 	.word	0x40015000
 80087b4:	40014000 	.word	0x40014000
 80087b8:	40014400 	.word	0x40014400
 80087bc:	40014800 	.word	0x40014800

080087c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a1b      	ldr	r3, [r3, #32]
 80087d4:	f023 0201 	bic.w	r2, r3, #1
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0303 	bic.w	r3, r3, #3
 80087fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f023 0302 	bic.w	r3, r3, #2
 800880c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	4313      	orrs	r3, r2
 8008816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a30      	ldr	r2, [pc, #192]	@ (80088dc <TIM_OC1_SetConfig+0x11c>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d013      	beq.n	8008848 <TIM_OC1_SetConfig+0x88>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a2f      	ldr	r2, [pc, #188]	@ (80088e0 <TIM_OC1_SetConfig+0x120>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d00f      	beq.n	8008848 <TIM_OC1_SetConfig+0x88>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a2e      	ldr	r2, [pc, #184]	@ (80088e4 <TIM_OC1_SetConfig+0x124>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d00b      	beq.n	8008848 <TIM_OC1_SetConfig+0x88>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a2d      	ldr	r2, [pc, #180]	@ (80088e8 <TIM_OC1_SetConfig+0x128>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d007      	beq.n	8008848 <TIM_OC1_SetConfig+0x88>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a2c      	ldr	r2, [pc, #176]	@ (80088ec <TIM_OC1_SetConfig+0x12c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d003      	beq.n	8008848 <TIM_OC1_SetConfig+0x88>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a2b      	ldr	r2, [pc, #172]	@ (80088f0 <TIM_OC1_SetConfig+0x130>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d10c      	bne.n	8008862 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f023 0308 	bic.w	r3, r3, #8
 800884e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	4313      	orrs	r3, r2
 8008858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	f023 0304 	bic.w	r3, r3, #4
 8008860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a1d      	ldr	r2, [pc, #116]	@ (80088dc <TIM_OC1_SetConfig+0x11c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d013      	beq.n	8008892 <TIM_OC1_SetConfig+0xd2>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a1c      	ldr	r2, [pc, #112]	@ (80088e0 <TIM_OC1_SetConfig+0x120>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d00f      	beq.n	8008892 <TIM_OC1_SetConfig+0xd2>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a1b      	ldr	r2, [pc, #108]	@ (80088e4 <TIM_OC1_SetConfig+0x124>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00b      	beq.n	8008892 <TIM_OC1_SetConfig+0xd2>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a1a      	ldr	r2, [pc, #104]	@ (80088e8 <TIM_OC1_SetConfig+0x128>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d007      	beq.n	8008892 <TIM_OC1_SetConfig+0xd2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a19      	ldr	r2, [pc, #100]	@ (80088ec <TIM_OC1_SetConfig+0x12c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d003      	beq.n	8008892 <TIM_OC1_SetConfig+0xd2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a18      	ldr	r2, [pc, #96]	@ (80088f0 <TIM_OC1_SetConfig+0x130>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d111      	bne.n	80088b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80088a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	697a      	ldr	r2, [r7, #20]
 80088ce:	621a      	str	r2, [r3, #32]
}
 80088d0:	bf00      	nop
 80088d2:	371c      	adds	r7, #28
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	40012c00 	.word	0x40012c00
 80088e0:	40013400 	.word	0x40013400
 80088e4:	40014000 	.word	0x40014000
 80088e8:	40014400 	.word	0x40014400
 80088ec:	40014800 	.word	0x40014800
 80088f0:	40015000 	.word	0x40015000

080088f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b087      	sub	sp, #28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	f023 0210 	bic.w	r2, r3, #16
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008922:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800892e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	021b      	lsls	r3, r3, #8
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	4313      	orrs	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f023 0320 	bic.w	r3, r3, #32
 8008942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	4313      	orrs	r3, r2
 800894e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a2c      	ldr	r2, [pc, #176]	@ (8008a04 <TIM_OC2_SetConfig+0x110>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d007      	beq.n	8008968 <TIM_OC2_SetConfig+0x74>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a2b      	ldr	r2, [pc, #172]	@ (8008a08 <TIM_OC2_SetConfig+0x114>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d003      	beq.n	8008968 <TIM_OC2_SetConfig+0x74>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a2a      	ldr	r2, [pc, #168]	@ (8008a0c <TIM_OC2_SetConfig+0x118>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d10d      	bne.n	8008984 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800896e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	011b      	lsls	r3, r3, #4
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4313      	orrs	r3, r2
 800897a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008982:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a1f      	ldr	r2, [pc, #124]	@ (8008a04 <TIM_OC2_SetConfig+0x110>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d013      	beq.n	80089b4 <TIM_OC2_SetConfig+0xc0>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a1e      	ldr	r2, [pc, #120]	@ (8008a08 <TIM_OC2_SetConfig+0x114>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d00f      	beq.n	80089b4 <TIM_OC2_SetConfig+0xc0>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a1e      	ldr	r2, [pc, #120]	@ (8008a10 <TIM_OC2_SetConfig+0x11c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d00b      	beq.n	80089b4 <TIM_OC2_SetConfig+0xc0>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a1d      	ldr	r2, [pc, #116]	@ (8008a14 <TIM_OC2_SetConfig+0x120>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d007      	beq.n	80089b4 <TIM_OC2_SetConfig+0xc0>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008a18 <TIM_OC2_SetConfig+0x124>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d003      	beq.n	80089b4 <TIM_OC2_SetConfig+0xc0>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a17      	ldr	r2, [pc, #92]	@ (8008a0c <TIM_OC2_SetConfig+0x118>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d113      	bne.n	80089dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	4313      	orrs	r3, r2
 80089da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	621a      	str	r2, [r3, #32]
}
 80089f6:	bf00      	nop
 80089f8:	371c      	adds	r7, #28
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	40012c00 	.word	0x40012c00
 8008a08:	40013400 	.word	0x40013400
 8008a0c:	40015000 	.word	0x40015000
 8008a10:	40014000 	.word	0x40014000
 8008a14:	40014400 	.word	0x40014400
 8008a18:	40014800 	.word	0x40014800

08008a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	021b      	lsls	r3, r3, #8
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a2b      	ldr	r2, [pc, #172]	@ (8008b28 <TIM_OC3_SetConfig+0x10c>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d007      	beq.n	8008a8e <TIM_OC3_SetConfig+0x72>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a2a      	ldr	r2, [pc, #168]	@ (8008b2c <TIM_OC3_SetConfig+0x110>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d003      	beq.n	8008a8e <TIM_OC3_SetConfig+0x72>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a29      	ldr	r2, [pc, #164]	@ (8008b30 <TIM_OC3_SetConfig+0x114>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d10d      	bne.n	8008aaa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	021b      	lsls	r3, r3, #8
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a1e      	ldr	r2, [pc, #120]	@ (8008b28 <TIM_OC3_SetConfig+0x10c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d013      	beq.n	8008ada <TIM_OC3_SetConfig+0xbe>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b2c <TIM_OC3_SetConfig+0x110>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d00f      	beq.n	8008ada <TIM_OC3_SetConfig+0xbe>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a1d      	ldr	r2, [pc, #116]	@ (8008b34 <TIM_OC3_SetConfig+0x118>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d00b      	beq.n	8008ada <TIM_OC3_SetConfig+0xbe>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8008b38 <TIM_OC3_SetConfig+0x11c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d007      	beq.n	8008ada <TIM_OC3_SetConfig+0xbe>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a1b      	ldr	r2, [pc, #108]	@ (8008b3c <TIM_OC3_SetConfig+0x120>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d003      	beq.n	8008ada <TIM_OC3_SetConfig+0xbe>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a16      	ldr	r2, [pc, #88]	@ (8008b30 <TIM_OC3_SetConfig+0x114>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d113      	bne.n	8008b02 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	011b      	lsls	r3, r3, #4
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	621a      	str	r2, [r3, #32]
}
 8008b1c:	bf00      	nop
 8008b1e:	371c      	adds	r7, #28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	40012c00 	.word	0x40012c00
 8008b2c:	40013400 	.word	0x40013400
 8008b30:	40015000 	.word	0x40015000
 8008b34:	40014000 	.word	0x40014000
 8008b38:	40014400 	.word	0x40014400
 8008b3c:	40014800 	.word	0x40014800

08008b40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
 8008b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	69db      	ldr	r3, [r3, #28]
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	021b      	lsls	r3, r3, #8
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	031b      	lsls	r3, r3, #12
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8008c50 <TIM_OC4_SetConfig+0x110>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d007      	beq.n	8008bb4 <TIM_OC4_SetConfig+0x74>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8008c54 <TIM_OC4_SetConfig+0x114>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d003      	beq.n	8008bb4 <TIM_OC4_SetConfig+0x74>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a2a      	ldr	r2, [pc, #168]	@ (8008c58 <TIM_OC4_SetConfig+0x118>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d10d      	bne.n	8008bd0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	031b      	lsls	r3, r3, #12
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8008c50 <TIM_OC4_SetConfig+0x110>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d013      	beq.n	8008c00 <TIM_OC4_SetConfig+0xc0>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a1e      	ldr	r2, [pc, #120]	@ (8008c54 <TIM_OC4_SetConfig+0x114>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d00f      	beq.n	8008c00 <TIM_OC4_SetConfig+0xc0>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a1e      	ldr	r2, [pc, #120]	@ (8008c5c <TIM_OC4_SetConfig+0x11c>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d00b      	beq.n	8008c00 <TIM_OC4_SetConfig+0xc0>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a1d      	ldr	r2, [pc, #116]	@ (8008c60 <TIM_OC4_SetConfig+0x120>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d007      	beq.n	8008c00 <TIM_OC4_SetConfig+0xc0>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8008c64 <TIM_OC4_SetConfig+0x124>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d003      	beq.n	8008c00 <TIM_OC4_SetConfig+0xc0>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a17      	ldr	r2, [pc, #92]	@ (8008c58 <TIM_OC4_SetConfig+0x118>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d113      	bne.n	8008c28 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	695b      	ldr	r3, [r3, #20]
 8008c14:	019b      	lsls	r3, r3, #6
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	019b      	lsls	r3, r3, #6
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	621a      	str	r2, [r3, #32]
}
 8008c42:	bf00      	nop
 8008c44:	371c      	adds	r7, #28
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	40012c00 	.word	0x40012c00
 8008c54:	40013400 	.word	0x40013400
 8008c58:	40015000 	.word	0x40015000
 8008c5c:	40014000 	.word	0x40014000
 8008c60:	40014400 	.word	0x40014400
 8008c64:	40014800 	.word	0x40014800

08008c68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008cac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	041b      	lsls	r3, r3, #16
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a19      	ldr	r2, [pc, #100]	@ (8008d24 <TIM_OC5_SetConfig+0xbc>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d013      	beq.n	8008cea <TIM_OC5_SetConfig+0x82>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a18      	ldr	r2, [pc, #96]	@ (8008d28 <TIM_OC5_SetConfig+0xc0>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d00f      	beq.n	8008cea <TIM_OC5_SetConfig+0x82>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a17      	ldr	r2, [pc, #92]	@ (8008d2c <TIM_OC5_SetConfig+0xc4>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d00b      	beq.n	8008cea <TIM_OC5_SetConfig+0x82>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a16      	ldr	r2, [pc, #88]	@ (8008d30 <TIM_OC5_SetConfig+0xc8>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d007      	beq.n	8008cea <TIM_OC5_SetConfig+0x82>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a15      	ldr	r2, [pc, #84]	@ (8008d34 <TIM_OC5_SetConfig+0xcc>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d003      	beq.n	8008cea <TIM_OC5_SetConfig+0x82>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a14      	ldr	r2, [pc, #80]	@ (8008d38 <TIM_OC5_SetConfig+0xd0>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d109      	bne.n	8008cfe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	021b      	lsls	r3, r3, #8
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	621a      	str	r2, [r3, #32]
}
 8008d18:	bf00      	nop
 8008d1a:	371c      	adds	r7, #28
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	40012c00 	.word	0x40012c00
 8008d28:	40013400 	.word	0x40013400
 8008d2c:	40014000 	.word	0x40014000
 8008d30:	40014400 	.word	0x40014400
 8008d34:	40014800 	.word	0x40014800
 8008d38:	40015000 	.word	0x40015000

08008d3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a1b      	ldr	r3, [r3, #32]
 8008d50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	021b      	lsls	r3, r3, #8
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	051b      	lsls	r3, r3, #20
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a1a      	ldr	r2, [pc, #104]	@ (8008dfc <TIM_OC6_SetConfig+0xc0>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d013      	beq.n	8008dc0 <TIM_OC6_SetConfig+0x84>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a19      	ldr	r2, [pc, #100]	@ (8008e00 <TIM_OC6_SetConfig+0xc4>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00f      	beq.n	8008dc0 <TIM_OC6_SetConfig+0x84>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a18      	ldr	r2, [pc, #96]	@ (8008e04 <TIM_OC6_SetConfig+0xc8>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d00b      	beq.n	8008dc0 <TIM_OC6_SetConfig+0x84>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a17      	ldr	r2, [pc, #92]	@ (8008e08 <TIM_OC6_SetConfig+0xcc>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d007      	beq.n	8008dc0 <TIM_OC6_SetConfig+0x84>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a16      	ldr	r2, [pc, #88]	@ (8008e0c <TIM_OC6_SetConfig+0xd0>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d003      	beq.n	8008dc0 <TIM_OC6_SetConfig+0x84>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a15      	ldr	r2, [pc, #84]	@ (8008e10 <TIM_OC6_SetConfig+0xd4>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d109      	bne.n	8008dd4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	029b      	lsls	r3, r3, #10
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	621a      	str	r2, [r3, #32]
}
 8008dee:	bf00      	nop
 8008df0:	371c      	adds	r7, #28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	40012c00 	.word	0x40012c00
 8008e00:	40013400 	.word	0x40013400
 8008e04:	40014000 	.word	0x40014000
 8008e08:	40014400 	.word	0x40014400
 8008e0c:	40014800 	.word	0x40014800
 8008e10:	40015000 	.word	0x40015000

08008e14 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e34:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e46:	f023 0307 	bic.w	r3, r3, #7
 8008e4a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	4a56      	ldr	r2, [pc, #344]	@ (8008fbc <TIM_SlaveTimer_SetConfig+0x1a8>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	f000 80a2 	beq.w	8008fae <TIM_SlaveTimer_SetConfig+0x19a>
 8008e6a:	4a54      	ldr	r2, [pc, #336]	@ (8008fbc <TIM_SlaveTimer_SetConfig+0x1a8>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	f200 809b 	bhi.w	8008fa8 <TIM_SlaveTimer_SetConfig+0x194>
 8008e72:	4a53      	ldr	r2, [pc, #332]	@ (8008fc0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	f000 809a 	beq.w	8008fae <TIM_SlaveTimer_SetConfig+0x19a>
 8008e7a:	4a51      	ldr	r2, [pc, #324]	@ (8008fc0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	f200 8093 	bhi.w	8008fa8 <TIM_SlaveTimer_SetConfig+0x194>
 8008e82:	4a50      	ldr	r2, [pc, #320]	@ (8008fc4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	f000 8092 	beq.w	8008fae <TIM_SlaveTimer_SetConfig+0x19a>
 8008e8a:	4a4e      	ldr	r2, [pc, #312]	@ (8008fc4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	f200 808b 	bhi.w	8008fa8 <TIM_SlaveTimer_SetConfig+0x194>
 8008e92:	4a4d      	ldr	r2, [pc, #308]	@ (8008fc8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	f000 808a 	beq.w	8008fae <TIM_SlaveTimer_SetConfig+0x19a>
 8008e9a:	4a4b      	ldr	r2, [pc, #300]	@ (8008fc8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	f200 8083 	bhi.w	8008fa8 <TIM_SlaveTimer_SetConfig+0x194>
 8008ea2:	4a4a      	ldr	r2, [pc, #296]	@ (8008fcc <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	f000 8082 	beq.w	8008fae <TIM_SlaveTimer_SetConfig+0x19a>
 8008eaa:	4a48      	ldr	r2, [pc, #288]	@ (8008fcc <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d87b      	bhi.n	8008fa8 <TIM_SlaveTimer_SetConfig+0x194>
 8008eb0:	4a47      	ldr	r2, [pc, #284]	@ (8008fd0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d07b      	beq.n	8008fae <TIM_SlaveTimer_SetConfig+0x19a>
 8008eb6:	4a46      	ldr	r2, [pc, #280]	@ (8008fd0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d875      	bhi.n	8008fa8 <TIM_SlaveTimer_SetConfig+0x194>
 8008ebc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008ec0:	d075      	beq.n	8008fae <TIM_SlaveTimer_SetConfig+0x19a>
 8008ec2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008ec6:	d86f      	bhi.n	8008fa8 <TIM_SlaveTimer_SetConfig+0x194>
 8008ec8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ecc:	d06f      	beq.n	8008fae <TIM_SlaveTimer_SetConfig+0x19a>
 8008ece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ed2:	d869      	bhi.n	8008fa8 <TIM_SlaveTimer_SetConfig+0x194>
 8008ed4:	2b70      	cmp	r3, #112	@ 0x70
 8008ed6:	d01a      	beq.n	8008f0e <TIM_SlaveTimer_SetConfig+0xfa>
 8008ed8:	2b70      	cmp	r3, #112	@ 0x70
 8008eda:	d865      	bhi.n	8008fa8 <TIM_SlaveTimer_SetConfig+0x194>
 8008edc:	2b60      	cmp	r3, #96	@ 0x60
 8008ede:	d059      	beq.n	8008f94 <TIM_SlaveTimer_SetConfig+0x180>
 8008ee0:	2b60      	cmp	r3, #96	@ 0x60
 8008ee2:	d861      	bhi.n	8008fa8 <TIM_SlaveTimer_SetConfig+0x194>
 8008ee4:	2b50      	cmp	r3, #80	@ 0x50
 8008ee6:	d04b      	beq.n	8008f80 <TIM_SlaveTimer_SetConfig+0x16c>
 8008ee8:	2b50      	cmp	r3, #80	@ 0x50
 8008eea:	d85d      	bhi.n	8008fa8 <TIM_SlaveTimer_SetConfig+0x194>
 8008eec:	2b40      	cmp	r3, #64	@ 0x40
 8008eee:	d019      	beq.n	8008f24 <TIM_SlaveTimer_SetConfig+0x110>
 8008ef0:	2b40      	cmp	r3, #64	@ 0x40
 8008ef2:	d859      	bhi.n	8008fa8 <TIM_SlaveTimer_SetConfig+0x194>
 8008ef4:	2b30      	cmp	r3, #48	@ 0x30
 8008ef6:	d05a      	beq.n	8008fae <TIM_SlaveTimer_SetConfig+0x19a>
 8008ef8:	2b30      	cmp	r3, #48	@ 0x30
 8008efa:	d855      	bhi.n	8008fa8 <TIM_SlaveTimer_SetConfig+0x194>
 8008efc:	2b20      	cmp	r3, #32
 8008efe:	d056      	beq.n	8008fae <TIM_SlaveTimer_SetConfig+0x19a>
 8008f00:	2b20      	cmp	r3, #32
 8008f02:	d851      	bhi.n	8008fa8 <TIM_SlaveTimer_SetConfig+0x194>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d052      	beq.n	8008fae <TIM_SlaveTimer_SetConfig+0x19a>
 8008f08:	2b10      	cmp	r3, #16
 8008f0a:	d050      	beq.n	8008fae <TIM_SlaveTimer_SetConfig+0x19a>
 8008f0c:	e04c      	b.n	8008fa8 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008f1e:	f000 f9ff 	bl	8009320 <TIM_ETR_SetConfig>
      break;
 8008f22:	e045      	b.n	8008fb0 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b05      	cmp	r3, #5
 8008f2a:	d004      	beq.n	8008f36 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008f30:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8008f34:	d101      	bne.n	8008f3a <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e03b      	b.n	8008fb2 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6a1b      	ldr	r3, [r3, #32]
 8008f40:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	6a1a      	ldr	r2, [r3, #32]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0201 	bic.w	r2, r2, #1
 8008f50:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f60:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	011b      	lsls	r3, r3, #4
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	621a      	str	r2, [r3, #32]
      break;
 8008f7e:	e017      	b.n	8008fb0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	f000 f895 	bl	80090bc <TIM_TI1_ConfigInputStage>
      break;
 8008f92:	e00d      	b.n	8008fb0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	f000 f8f7 	bl	8009194 <TIM_TI2_ConfigInputStage>
      break;
 8008fa6:	e003      	b.n	8008fb0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	75fb      	strb	r3, [r7, #23]
      break;
 8008fac:	e000      	b.n	8008fb0 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8008fae:	bf00      	nop
  }

  return status;
 8008fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	00100070 	.word	0x00100070
 8008fc0:	00100060 	.word	0x00100060
 8008fc4:	00100050 	.word	0x00100050
 8008fc8:	00100040 	.word	0x00100040
 8008fcc:	00100030 	.word	0x00100030
 8008fd0:	00100020 	.word	0x00100020

08008fd4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
 8008fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	f023 0201 	bic.w	r2, r3, #1
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4a28      	ldr	r2, [pc, #160]	@ (80090a0 <TIM_TI1_SetConfig+0xcc>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d01b      	beq.n	800903a <TIM_TI1_SetConfig+0x66>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009008:	d017      	beq.n	800903a <TIM_TI1_SetConfig+0x66>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	4a25      	ldr	r2, [pc, #148]	@ (80090a4 <TIM_TI1_SetConfig+0xd0>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d013      	beq.n	800903a <TIM_TI1_SetConfig+0x66>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	4a24      	ldr	r2, [pc, #144]	@ (80090a8 <TIM_TI1_SetConfig+0xd4>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d00f      	beq.n	800903a <TIM_TI1_SetConfig+0x66>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4a23      	ldr	r2, [pc, #140]	@ (80090ac <TIM_TI1_SetConfig+0xd8>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d00b      	beq.n	800903a <TIM_TI1_SetConfig+0x66>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	4a22      	ldr	r2, [pc, #136]	@ (80090b0 <TIM_TI1_SetConfig+0xdc>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d007      	beq.n	800903a <TIM_TI1_SetConfig+0x66>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	4a21      	ldr	r2, [pc, #132]	@ (80090b4 <TIM_TI1_SetConfig+0xe0>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d003      	beq.n	800903a <TIM_TI1_SetConfig+0x66>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	4a20      	ldr	r2, [pc, #128]	@ (80090b8 <TIM_TI1_SetConfig+0xe4>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d101      	bne.n	800903e <TIM_TI1_SetConfig+0x6a>
 800903a:	2301      	movs	r3, #1
 800903c:	e000      	b.n	8009040 <TIM_TI1_SetConfig+0x6c>
 800903e:	2300      	movs	r3, #0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d008      	beq.n	8009056 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f023 0303 	bic.w	r3, r3, #3
 800904a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4313      	orrs	r3, r2
 8009052:	617b      	str	r3, [r7, #20]
 8009054:	e003      	b.n	800905e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f043 0301 	orr.w	r3, r3, #1
 800905c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009064:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	011b      	lsls	r3, r3, #4
 800906a:	b2db      	uxtb	r3, r3
 800906c:	697a      	ldr	r2, [r7, #20]
 800906e:	4313      	orrs	r3, r2
 8009070:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	f023 030a 	bic.w	r3, r3, #10
 8009078:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	f003 030a 	and.w	r3, r3, #10
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	4313      	orrs	r3, r2
 8009084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	621a      	str	r2, [r3, #32]
}
 8009092:	bf00      	nop
 8009094:	371c      	adds	r7, #28
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	40012c00 	.word	0x40012c00
 80090a4:	40000400 	.word	0x40000400
 80090a8:	40000800 	.word	0x40000800
 80090ac:	40000c00 	.word	0x40000c00
 80090b0:	40013400 	.word	0x40013400
 80090b4:	40014000 	.word	0x40014000
 80090b8:	40015000 	.word	0x40015000

080090bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a1b      	ldr	r3, [r3, #32]
 80090cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	f023 0201 	bic.w	r2, r3, #1
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	011b      	lsls	r3, r3, #4
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f023 030a 	bic.w	r3, r3, #10
 80090f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	4313      	orrs	r3, r2
 8009100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	621a      	str	r2, [r3, #32]
}
 800910e:	bf00      	nop
 8009110:	371c      	adds	r7, #28
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800911a:	b480      	push	{r7}
 800911c:	b087      	sub	sp, #28
 800911e:	af00      	add	r7, sp, #0
 8009120:	60f8      	str	r0, [r7, #12]
 8009122:	60b9      	str	r1, [r7, #8]
 8009124:	607a      	str	r2, [r7, #4]
 8009126:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6a1b      	ldr	r3, [r3, #32]
 800912c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	f023 0210 	bic.w	r2, r3, #16
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	021b      	lsls	r3, r3, #8
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	4313      	orrs	r3, r2
 8009150:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009158:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	031b      	lsls	r3, r3, #12
 800915e:	b29b      	uxth	r3, r3
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	4313      	orrs	r3, r2
 8009164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800916c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	011b      	lsls	r3, r3, #4
 8009172:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	4313      	orrs	r3, r2
 800917a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	621a      	str	r2, [r3, #32]
}
 8009188:	bf00      	nop
 800918a:	371c      	adds	r7, #28
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009194:	b480      	push	{r7}
 8009196:	b087      	sub	sp, #28
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6a1b      	ldr	r3, [r3, #32]
 80091a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	f023 0210 	bic.w	r2, r3, #16
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80091be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	031b      	lsls	r3, r3, #12
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80091d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	011b      	lsls	r3, r3, #4
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4313      	orrs	r3, r2
 80091da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	621a      	str	r2, [r3, #32]
}
 80091e8:	bf00      	nop
 80091ea:	371c      	adds	r7, #28
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6a1b      	ldr	r3, [r3, #32]
 800920c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	69db      	ldr	r3, [r3, #28]
 8009218:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	f023 0303 	bic.w	r3, r3, #3
 8009220:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4313      	orrs	r3, r2
 8009228:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009230:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	011b      	lsls	r3, r3, #4
 8009236:	b2db      	uxtb	r3, r3
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	4313      	orrs	r3, r2
 800923c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009244:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	021b      	lsls	r3, r3, #8
 800924a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	4313      	orrs	r3, r2
 8009252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	621a      	str	r2, [r3, #32]
}
 8009260:	bf00      	nop
 8009262:	371c      	adds	r7, #28
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800926c:	b480      	push	{r7}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009298:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	031b      	lsls	r3, r3, #12
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80092be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	031b      	lsls	r3, r3, #12
 80092c4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	621a      	str	r2, [r3, #32]
}
 80092da:	bf00      	nop
 80092dc:	371c      	adds	r7, #28
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092e6:	b480      	push	{r7}
 80092e8:	b085      	sub	sp, #20
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80092fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009300:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4313      	orrs	r3, r2
 8009308:	f043 0307 	orr.w	r3, r3, #7
 800930c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	609a      	str	r2, [r3, #8]
}
 8009314:	bf00      	nop
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009320:	b480      	push	{r7}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
 800932c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800933a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	021a      	lsls	r2, r3, #8
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	431a      	orrs	r2, r3
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	4313      	orrs	r3, r2
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	4313      	orrs	r3, r2
 800934c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	609a      	str	r2, [r3, #8]
}
 8009354:	bf00      	nop
 8009356:	371c      	adds	r7, #28
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009360:	b480      	push	{r7}
 8009362:	b087      	sub	sp, #28
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f003 031f 	and.w	r3, r3, #31
 8009372:	2201      	movs	r2, #1
 8009374:	fa02 f303 	lsl.w	r3, r2, r3
 8009378:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6a1a      	ldr	r2, [r3, #32]
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	43db      	mvns	r3, r3
 8009382:	401a      	ands	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6a1a      	ldr	r2, [r3, #32]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f003 031f 	and.w	r3, r3, #31
 8009392:	6879      	ldr	r1, [r7, #4]
 8009394:	fa01 f303 	lsl.w	r3, r1, r3
 8009398:	431a      	orrs	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	621a      	str	r2, [r3, #32]
}
 800939e:	bf00      	nop
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
	...

080093ac <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a26      	ldr	r2, [pc, #152]	@ (8009450 <TIM_ResetCallback+0xa4>)
 80093b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a25      	ldr	r2, [pc, #148]	@ (8009454 <TIM_ResetCallback+0xa8>)
 80093c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a24      	ldr	r2, [pc, #144]	@ (8009458 <TIM_ResetCallback+0xac>)
 80093c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a23      	ldr	r2, [pc, #140]	@ (800945c <TIM_ResetCallback+0xb0>)
 80093d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a22      	ldr	r2, [pc, #136]	@ (8009460 <TIM_ResetCallback+0xb4>)
 80093d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a21      	ldr	r2, [pc, #132]	@ (8009464 <TIM_ResetCallback+0xb8>)
 80093e0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a20      	ldr	r2, [pc, #128]	@ (8009468 <TIM_ResetCallback+0xbc>)
 80093e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a1f      	ldr	r2, [pc, #124]	@ (800946c <TIM_ResetCallback+0xc0>)
 80093f0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009470 <TIM_ResetCallback+0xc4>)
 80093f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a1d      	ldr	r2, [pc, #116]	@ (8009474 <TIM_ResetCallback+0xc8>)
 8009400:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a1c      	ldr	r2, [pc, #112]	@ (8009478 <TIM_ResetCallback+0xcc>)
 8009408:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a1b      	ldr	r2, [pc, #108]	@ (800947c <TIM_ResetCallback+0xd0>)
 8009410:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a1a      	ldr	r2, [pc, #104]	@ (8009480 <TIM_ResetCallback+0xd4>)
 8009418:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a19      	ldr	r2, [pc, #100]	@ (8009484 <TIM_ResetCallback+0xd8>)
 8009420:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a18      	ldr	r2, [pc, #96]	@ (8009488 <TIM_ResetCallback+0xdc>)
 8009428:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a17      	ldr	r2, [pc, #92]	@ (800948c <TIM_ResetCallback+0xe0>)
 8009430:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a16      	ldr	r2, [pc, #88]	@ (8009490 <TIM_ResetCallback+0xe4>)
 8009438:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a15      	ldr	r2, [pc, #84]	@ (8009494 <TIM_ResetCallback+0xe8>)
 8009440:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	08004065 	.word	0x08004065
 8009454:	080082e5 	.word	0x080082e5
 8009458:	0800835d 	.word	0x0800835d
 800945c:	08008371 	.word	0x08008371
 8009460:	0800830d 	.word	0x0800830d
 8009464:	08008321 	.word	0x08008321
 8009468:	080082f9 	.word	0x080082f9
 800946c:	08008335 	.word	0x08008335
 8009470:	08008349 	.word	0x08008349
 8009474:	08008385 	.word	0x08008385
 8009478:	080096ed 	.word	0x080096ed
 800947c:	08009701 	.word	0x08009701
 8009480:	08009715 	.word	0x08009715
 8009484:	08009729 	.word	0x08009729
 8009488:	0800973d 	.word	0x0800973d
 800948c:	08009751 	.word	0x08009751
 8009490:	08009765 	.word	0x08009765
 8009494:	08009779 	.word	0x08009779

08009498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094ac:	2302      	movs	r3, #2
 80094ae:	e074      	b.n	800959a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a34      	ldr	r2, [pc, #208]	@ (80095a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d009      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a33      	ldr	r2, [pc, #204]	@ (80095ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d004      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a31      	ldr	r2, [pc, #196]	@ (80095b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d108      	bne.n	8009500 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80094f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800950a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	4313      	orrs	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a21      	ldr	r2, [pc, #132]	@ (80095a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d022      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009530:	d01d      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a1f      	ldr	r2, [pc, #124]	@ (80095b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d018      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a1d      	ldr	r2, [pc, #116]	@ (80095b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d013      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a1c      	ldr	r2, [pc, #112]	@ (80095bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d00e      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a15      	ldr	r2, [pc, #84]	@ (80095ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d009      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a18      	ldr	r2, [pc, #96]	@ (80095c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d004      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a11      	ldr	r2, [pc, #68]	@ (80095b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d10c      	bne.n	8009588 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	4313      	orrs	r3, r2
 800957e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	40012c00 	.word	0x40012c00
 80095ac:	40013400 	.word	0x40013400
 80095b0:	40015000 	.word	0x40015000
 80095b4:	40000400 	.word	0x40000400
 80095b8:	40000800 	.word	0x40000800
 80095bc:	40000c00 	.word	0x40000c00
 80095c0:	40014000 	.word	0x40014000

080095c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d101      	bne.n	80095e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80095dc:	2302      	movs	r3, #2
 80095de:	e078      	b.n	80096d2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	4313      	orrs	r3, r2
 8009602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	4313      	orrs	r3, r2
 8009610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4313      	orrs	r3, r2
 800961e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	4313      	orrs	r3, r2
 800962c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	695b      	ldr	r3, [r3, #20]
 8009638:	4313      	orrs	r3, r2
 800963a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009646:	4313      	orrs	r3, r2
 8009648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	041b      	lsls	r3, r3, #16
 8009656:	4313      	orrs	r3, r2
 8009658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	4313      	orrs	r3, r2
 8009666:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a1c      	ldr	r2, [pc, #112]	@ (80096e0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d009      	beq.n	8009686 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a1b      	ldr	r2, [pc, #108]	@ (80096e4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d004      	beq.n	8009686 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a19      	ldr	r2, [pc, #100]	@ (80096e8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d11c      	bne.n	80096c0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009690:	051b      	lsls	r3, r3, #20
 8009692:	4313      	orrs	r3, r2
 8009694:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ae:	4313      	orrs	r3, r2
 80096b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096bc:	4313      	orrs	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3714      	adds	r7, #20
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	40012c00 	.word	0x40012c00
 80096e4:	40013400 	.word	0x40013400
 80096e8:	40015000 	.word	0x40015000

080096ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e050      	b.n	8009840 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d114      	bne.n	80097d2 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fd65 	bl	800a280 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d103      	bne.n	80097c8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a21      	ldr	r2, [pc, #132]	@ (8009848 <HAL_UART_Init+0xbc>)
 80097c4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2224      	movs	r2, #36	@ 0x24
 80097d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f022 0201 	bic.w	r2, r2, #1
 80097e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f001 f892 	bl	800a91c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fd93 	bl	800a324 <UART_SetConfig>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b01      	cmp	r3, #1
 8009802:	d101      	bne.n	8009808 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e01b      	b.n	8009840 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009816:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	689a      	ldr	r2, [r3, #8]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009826:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f042 0201 	orr.w	r2, r2, #1
 8009836:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f001 f911 	bl	800aa60 <UART_CheckIdleState>
 800983e:	4603      	mov	r3, r0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	08004c65 	.word	0x08004c65

0800984c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	460b      	mov	r3, r1
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d109      	bne.n	8009878 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800986a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e09c      	b.n	80099b2 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800987e:	2b20      	cmp	r3, #32
 8009880:	d16c      	bne.n	800995c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009882:	7afb      	ldrb	r3, [r7, #11]
 8009884:	2b0c      	cmp	r3, #12
 8009886:	d85e      	bhi.n	8009946 <HAL_UART_RegisterCallback+0xfa>
 8009888:	a201      	add	r2, pc, #4	@ (adr r2, 8009890 <HAL_UART_RegisterCallback+0x44>)
 800988a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988e:	bf00      	nop
 8009890:	080098c5 	.word	0x080098c5
 8009894:	080098cf 	.word	0x080098cf
 8009898:	080098d9 	.word	0x080098d9
 800989c:	080098e3 	.word	0x080098e3
 80098a0:	080098ed 	.word	0x080098ed
 80098a4:	080098f7 	.word	0x080098f7
 80098a8:	08009901 	.word	0x08009901
 80098ac:	0800990b 	.word	0x0800990b
 80098b0:	08009915 	.word	0x08009915
 80098b4:	0800991f 	.word	0x0800991f
 80098b8:	08009929 	.word	0x08009929
 80098bc:	08009933 	.word	0x08009933
 80098c0:	0800993d 	.word	0x0800993d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80098cc:	e070      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80098d6:	e06b      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80098e0:	e066      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80098ea:	e061      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80098f4:	e05c      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80098fe:	e057      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009908:	e052      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009912:	e04d      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800991c:	e048      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009926:	e043      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009930:	e03e      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800993a:	e039      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009944:	e034      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800994c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	75fb      	strb	r3, [r7, #23]
        break;
 800995a:	e029      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009962:	2b00      	cmp	r3, #0
 8009964:	d11a      	bne.n	800999c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009966:	7afb      	ldrb	r3, [r7, #11]
 8009968:	2b0b      	cmp	r3, #11
 800996a:	d002      	beq.n	8009972 <HAL_UART_RegisterCallback+0x126>
 800996c:	2b0c      	cmp	r3, #12
 800996e:	d005      	beq.n	800997c <HAL_UART_RegisterCallback+0x130>
 8009970:	e009      	b.n	8009986 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800997a:	e019      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009984:	e014      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800998c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	75fb      	strb	r3, [r7, #23]
        break;
 800999a:	e009      	b.n	80099b0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80099b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	371c      	adds	r7, #28
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop

080099c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08a      	sub	sp, #40	@ 0x28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	4613      	mov	r3, r2
 80099cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099d4:	2b20      	cmp	r3, #32
 80099d6:	d137      	bne.n	8009a48 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <HAL_UART_Receive_DMA+0x24>
 80099de:	88fb      	ldrh	r3, [r7, #6]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e030      	b.n	8009a4a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a18      	ldr	r2, [pc, #96]	@ (8009a54 <HAL_UART_Receive_DMA+0x94>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d01f      	beq.n	8009a38 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d018      	beq.n	8009a38 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	e853 3f00 	ldrex	r3, [r3]
 8009a12:	613b      	str	r3, [r7, #16]
   return(result);
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	461a      	mov	r2, r3
 8009a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a24:	623b      	str	r3, [r7, #32]
 8009a26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a28:	69f9      	ldr	r1, [r7, #28]
 8009a2a:	6a3a      	ldr	r2, [r7, #32]
 8009a2c:	e841 2300 	strex	r3, r2, [r1]
 8009a30:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1e6      	bne.n	8009a06 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009a38:	88fb      	ldrh	r3, [r7, #6]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	68b9      	ldr	r1, [r7, #8]
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f001 f926 	bl	800ac90 <UART_Start_Receive_DMA>
 8009a44:	4603      	mov	r3, r0
 8009a46:	e000      	b.n	8009a4a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009a48:	2302      	movs	r3, #2
  }
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3728      	adds	r7, #40	@ 0x28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	40008000 	.word	0x40008000

08009a58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b0ba      	sub	sp, #232	@ 0xe8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009a82:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009a86:	4013      	ands	r3, r2
 8009a88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009a8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d11b      	bne.n	8009acc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a98:	f003 0320 	and.w	r3, r3, #32
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d015      	beq.n	8009acc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aa4:	f003 0320 	and.w	r3, r3, #32
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d105      	bne.n	8009ab8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d009      	beq.n	8009acc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 8312 	beq.w	800a0e6 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	4798      	blx	r3
      }
      return;
 8009aca:	e30c      	b.n	800a0e6 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009acc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 8129 	beq.w	8009d28 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009ad6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009ada:	4b90      	ldr	r3, [pc, #576]	@ (8009d1c <HAL_UART_IRQHandler+0x2c4>)
 8009adc:	4013      	ands	r3, r2
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009ae2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009ae6:	4b8e      	ldr	r3, [pc, #568]	@ (8009d20 <HAL_UART_IRQHandler+0x2c8>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 811c 	beq.w	8009d28 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d011      	beq.n	8009b20 <HAL_UART_IRQHandler+0xc8>
 8009afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00b      	beq.n	8009b20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b16:	f043 0201 	orr.w	r2, r3, #1
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b24:	f003 0302 	and.w	r3, r3, #2
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d011      	beq.n	8009b50 <HAL_UART_IRQHandler+0xf8>
 8009b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00b      	beq.n	8009b50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b46:	f043 0204 	orr.w	r2, r3, #4
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b54:	f003 0304 	and.w	r3, r3, #4
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d011      	beq.n	8009b80 <HAL_UART_IRQHandler+0x128>
 8009b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00b      	beq.n	8009b80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2204      	movs	r2, #4
 8009b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b76:	f043 0202 	orr.w	r2, r3, #2
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b84:	f003 0308 	and.w	r3, r3, #8
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d017      	beq.n	8009bbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b90:	f003 0320 	and.w	r3, r3, #32
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d105      	bne.n	8009ba4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b9c:	4b5f      	ldr	r3, [pc, #380]	@ (8009d1c <HAL_UART_IRQHandler+0x2c4>)
 8009b9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00b      	beq.n	8009bbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2208      	movs	r2, #8
 8009baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bb2:	f043 0208 	orr.w	r2, r3, #8
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d012      	beq.n	8009bee <HAL_UART_IRQHandler+0x196>
 8009bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00c      	beq.n	8009bee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009bdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009be4:	f043 0220 	orr.w	r2, r3, #32
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f000 8278 	beq.w	800a0ea <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bfe:	f003 0320 	and.w	r3, r3, #32
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d013      	beq.n	8009c2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c0a:	f003 0320 	and.w	r3, r3, #32
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d105      	bne.n	8009c1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d007      	beq.n	8009c2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c42:	2b40      	cmp	r3, #64	@ 0x40
 8009c44:	d005      	beq.n	8009c52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d058      	beq.n	8009d04 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f001 f903 	bl	800ae5e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c62:	2b40      	cmp	r3, #64	@ 0x40
 8009c64:	d148      	bne.n	8009cf8 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c74:	e853 3f00 	ldrex	r3, [r3]
 8009c78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	3308      	adds	r3, #8
 8009c8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009c92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009c96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009c9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009ca2:	e841 2300 	strex	r3, r2, [r1]
 8009ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1d9      	bne.n	8009c66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d017      	beq.n	8009cec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cc2:	4a18      	ldr	r2, [pc, #96]	@ (8009d24 <HAL_UART_IRQHandler+0x2cc>)
 8009cc4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fb fc6b 	bl	80055a8 <HAL_DMA_Abort_IT>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d01f      	beq.n	8009d18 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cea:	e015      	b.n	8009d18 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cf6:	e00f      	b.n	8009d18 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d02:	e009      	b.n	8009d18 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009d16:	e1e8      	b.n	800a0ea <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d18:	bf00      	nop
    return;
 8009d1a:	e1e6      	b.n	800a0ea <HAL_UART_IRQHandler+0x692>
 8009d1c:	10000001 	.word	0x10000001
 8009d20:	04000120 	.word	0x04000120
 8009d24:	0800b129 	.word	0x0800b129

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	f040 8176 	bne.w	800a01e <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d36:	f003 0310 	and.w	r3, r3, #16
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 816f 	beq.w	800a01e <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d44:	f003 0310 	and.w	r3, r3, #16
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f000 8168 	beq.w	800a01e <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2210      	movs	r2, #16
 8009d54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d60:	2b40      	cmp	r3, #64	@ 0x40
 8009d62:	f040 80dc 	bne.w	8009f1e <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 80b1 	beq.w	8009ee0 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	f080 80a9 	bcs.w	8009ee0 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 0320 	and.w	r3, r3, #32
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f040 8087 	bne.w	8009eba <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009db8:	e853 3f00 	ldrex	r3, [r3]
 8009dbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009dd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009dda:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009de2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009de6:	e841 2300 	strex	r3, r2, [r1]
 8009dea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1da      	bne.n	8009dac <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009e06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e08:	f023 0301 	bic.w	r3, r3, #1
 8009e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3308      	adds	r3, #8
 8009e16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009e1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009e1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009e22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e26:	e841 2300 	strex	r3, r2, [r1]
 8009e2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1e1      	bne.n	8009df6 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3308      	adds	r3, #8
 8009e38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e3c:	e853 3f00 	ldrex	r3, [r3]
 8009e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3308      	adds	r3, #8
 8009e52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009e56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e5e:	e841 2300 	strex	r3, r2, [r1]
 8009e62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1e3      	bne.n	8009e32 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e80:	e853 3f00 	ldrex	r3, [r3]
 8009e84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e88:	f023 0310 	bic.w	r3, r3, #16
 8009e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	461a      	mov	r2, r3
 8009e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ea0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ea2:	e841 2300 	strex	r3, r2, [r1]
 8009ea6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1e4      	bne.n	8009e78 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fb fb1e 	bl	80054f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009ed2:	b292      	uxth	r2, r2
 8009ed4:	1a8a      	subs	r2, r1, r2
 8009ed6:	b292      	uxth	r2, r2
 8009ed8:	4611      	mov	r1, r2
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009ede:	e106      	b.n	800a0ee <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009eea:	429a      	cmp	r2, r3
 8009eec:	f040 80ff 	bne.w	800a0ee <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0320 	and.w	r3, r3, #32
 8009efe:	2b20      	cmp	r3, #32
 8009f00:	f040 80f5 	bne.w	800a0ee <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2202      	movs	r2, #2
 8009f08:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009f16:	4611      	mov	r1, r2
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	4798      	blx	r3
      return;
 8009f1c:	e0e7      	b.n	800a0ee <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f000 80d9 	beq.w	800a0f2 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8009f40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 80d4 	beq.w	800a0f2 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f52:	e853 3f00 	ldrex	r3, [r3]
 8009f56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	461a      	mov	r2, r3
 8009f68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f74:	e841 2300 	strex	r3, r2, [r1]
 8009f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d1e4      	bne.n	8009f4a <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3308      	adds	r3, #8
 8009f86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8a:	e853 3f00 	ldrex	r3, [r3]
 8009f8e:	623b      	str	r3, [r7, #32]
   return(result);
 8009f90:	6a3b      	ldr	r3, [r7, #32]
 8009f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f96:	f023 0301 	bic.w	r3, r3, #1
 8009f9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	3308      	adds	r3, #8
 8009fa4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009fa8:	633a      	str	r2, [r7, #48]	@ 0x30
 8009faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fb0:	e841 2300 	strex	r3, r2, [r1]
 8009fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d1e1      	bne.n	8009f80 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2220      	movs	r2, #32
 8009fc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	e853 3f00 	ldrex	r3, [r3]
 8009fdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f023 0310 	bic.w	r3, r3, #16
 8009fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	461a      	mov	r2, r3
 8009fee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009ff2:	61fb      	str	r3, [r7, #28]
 8009ff4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff6:	69b9      	ldr	r1, [r7, #24]
 8009ff8:	69fa      	ldr	r2, [r7, #28]
 8009ffa:	e841 2300 	strex	r3, r2, [r1]
 8009ffe:	617b      	str	r3, [r7, #20]
   return(result);
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1e4      	bne.n	8009fd0 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2202      	movs	r2, #2
 800a00a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a012:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a016:	4611      	mov	r1, r2
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a01c:	e069      	b.n	800a0f2 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a01e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a026:	2b00      	cmp	r3, #0
 800a028:	d010      	beq.n	800a04c <HAL_UART_IRQHandler+0x5f4>
 800a02a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a02e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00a      	beq.n	800a04c <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a03e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a04a:	e055      	b.n	800a0f8 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a054:	2b00      	cmp	r3, #0
 800a056:	d014      	beq.n	800a082 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a05c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a060:	2b00      	cmp	r3, #0
 800a062:	d105      	bne.n	800a070 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a068:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d008      	beq.n	800a082 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a074:	2b00      	cmp	r3, #0
 800a076:	d03e      	beq.n	800a0f6 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	4798      	blx	r3
    }
    return;
 800a080:	e039      	b.n	800a0f6 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d009      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x64a>
 800a08e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f001 f858 	bl	800b150 <UART_EndTransmit_IT>
    return;
 800a0a0:	e02a      	b.n	800a0f8 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a0a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00b      	beq.n	800a0c6 <HAL_UART_IRQHandler+0x66e>
 800a0ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0b2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d005      	beq.n	800a0c6 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0c4:	e018      	b.n	800a0f8 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d012      	beq.n	800a0f8 <HAL_UART_IRQHandler+0x6a0>
 800a0d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	da0e      	bge.n	800a0f8 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0e4:	e008      	b.n	800a0f8 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a0e6:	bf00      	nop
 800a0e8:	e006      	b.n	800a0f8 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a0ea:	bf00      	nop
 800a0ec:	e004      	b.n	800a0f8 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a0ee:	bf00      	nop
 800a0f0:	e002      	b.n	800a0f8 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a0f2:	bf00      	nop
 800a0f4:	e000      	b.n	800a0f8 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a0f6:	bf00      	nop
  }
}
 800a0f8:	37e8      	adds	r7, #232	@ 0xe8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop

0800a100 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a180:	bf00      	nop
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a09      	ldr	r2, [pc, #36]	@ (800a1ec <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d009      	beq.n	800a1e0 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	695b      	ldr	r3, [r3, #20]
 800a1d2:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	430a      	orrs	r2, r1
 800a1de:	615a      	str	r2, [r3, #20]
  }
}
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	40008000 	.word	0x40008000

0800a1f0 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a18      	ldr	r2, [pc, #96]	@ (800a260 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d027      	beq.n	800a252 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a208:	2b20      	cmp	r3, #32
 800a20a:	d120      	bne.n	800a24e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a212:	2b01      	cmp	r3, #1
 800a214:	d101      	bne.n	800a21a <HAL_UART_EnableReceiverTimeout+0x2a>
 800a216:	2302      	movs	r3, #2
 800a218:	e01c      	b.n	800a254 <HAL_UART_EnableReceiverTimeout+0x64>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2224      	movs	r2, #36	@ 0x24
 800a226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	685a      	ldr	r2, [r3, #4]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a238:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2220      	movs	r2, #32
 800a23e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	e002      	b.n	800a254 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a24e:	2302      	movs	r3, #2
 800a250:	e000      	b.n	800a254 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
  }
}
 800a254:	4618      	mov	r0, r3
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr
 800a260:	40008000 	.word	0x40008000

0800a264 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a272:	4618      	mov	r0, r3
 800a274:	370c      	adds	r7, #12
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
	...

0800a280 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a1a      	ldr	r2, [pc, #104]	@ (800a2f4 <UART_InitCallbacksToDefault+0x74>)
 800a28c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a19      	ldr	r2, [pc, #100]	@ (800a2f8 <UART_InitCallbacksToDefault+0x78>)
 800a294:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a18      	ldr	r2, [pc, #96]	@ (800a2fc <UART_InitCallbacksToDefault+0x7c>)
 800a29c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a17      	ldr	r2, [pc, #92]	@ (800a300 <UART_InitCallbacksToDefault+0x80>)
 800a2a4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a16      	ldr	r2, [pc, #88]	@ (800a304 <UART_InitCallbacksToDefault+0x84>)
 800a2ac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a15      	ldr	r2, [pc, #84]	@ (800a308 <UART_InitCallbacksToDefault+0x88>)
 800a2b4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a14      	ldr	r2, [pc, #80]	@ (800a30c <UART_InitCallbacksToDefault+0x8c>)
 800a2bc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a13      	ldr	r2, [pc, #76]	@ (800a310 <UART_InitCallbacksToDefault+0x90>)
 800a2c4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a12      	ldr	r2, [pc, #72]	@ (800a314 <UART_InitCallbacksToDefault+0x94>)
 800a2cc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a11      	ldr	r2, [pc, #68]	@ (800a318 <UART_InitCallbacksToDefault+0x98>)
 800a2d4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a10      	ldr	r2, [pc, #64]	@ (800a31c <UART_InitCallbacksToDefault+0x9c>)
 800a2dc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a0f      	ldr	r2, [pc, #60]	@ (800a320 <UART_InitCallbacksToDefault+0xa0>)
 800a2e4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	0800a115 	.word	0x0800a115
 800a2f8:	0800a101 	.word	0x0800a101
 800a2fc:	0800a13d 	.word	0x0800a13d
 800a300:	0800a129 	.word	0x0800a129
 800a304:	0800a151 	.word	0x0800a151
 800a308:	0800a165 	.word	0x0800a165
 800a30c:	0800a179 	.word	0x0800a179
 800a310:	0800a18d 	.word	0x0800a18d
 800a314:	0800b1ab 	.word	0x0800b1ab
 800a318:	0800b1bf 	.word	0x0800b1bf
 800a31c:	0800b1d3 	.word	0x0800b1d3
 800a320:	0800a1a1 	.word	0x0800a1a1

0800a324 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a328:	b08c      	sub	sp, #48	@ 0x30
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	689a      	ldr	r2, [r3, #8]
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	431a      	orrs	r2, r3
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	695b      	ldr	r3, [r3, #20]
 800a342:	431a      	orrs	r2, r3
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	69db      	ldr	r3, [r3, #28]
 800a348:	4313      	orrs	r3, r2
 800a34a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	4baa      	ldr	r3, [pc, #680]	@ (800a5fc <UART_SetConfig+0x2d8>)
 800a354:	4013      	ands	r3, r2
 800a356:	697a      	ldr	r2, [r7, #20]
 800a358:	6812      	ldr	r2, [r2, #0]
 800a35a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a35c:	430b      	orrs	r3, r1
 800a35e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	68da      	ldr	r2, [r3, #12]
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	430a      	orrs	r2, r1
 800a374:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a9f      	ldr	r2, [pc, #636]	@ (800a600 <UART_SetConfig+0x2dc>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d004      	beq.n	800a390 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a38c:	4313      	orrs	r3, r2
 800a38e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a39a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	6812      	ldr	r2, [r2, #0]
 800a3a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3a4:	430b      	orrs	r3, r1
 800a3a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ae:	f023 010f 	bic.w	r1, r3, #15
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a90      	ldr	r2, [pc, #576]	@ (800a604 <UART_SetConfig+0x2e0>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d125      	bne.n	800a414 <UART_SetConfig+0xf0>
 800a3c8:	4b8f      	ldr	r3, [pc, #572]	@ (800a608 <UART_SetConfig+0x2e4>)
 800a3ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3ce:	f003 0303 	and.w	r3, r3, #3
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d81a      	bhi.n	800a40c <UART_SetConfig+0xe8>
 800a3d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3dc <UART_SetConfig+0xb8>)
 800a3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3dc:	0800a3ed 	.word	0x0800a3ed
 800a3e0:	0800a3fd 	.word	0x0800a3fd
 800a3e4:	0800a3f5 	.word	0x0800a3f5
 800a3e8:	0800a405 	.word	0x0800a405
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3f2:	e116      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3fa:	e112      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a3fc:	2304      	movs	r3, #4
 800a3fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a402:	e10e      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a404:	2308      	movs	r3, #8
 800a406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a40a:	e10a      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a40c:	2310      	movs	r3, #16
 800a40e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a412:	e106      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a7c      	ldr	r2, [pc, #496]	@ (800a60c <UART_SetConfig+0x2e8>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d138      	bne.n	800a490 <UART_SetConfig+0x16c>
 800a41e:	4b7a      	ldr	r3, [pc, #488]	@ (800a608 <UART_SetConfig+0x2e4>)
 800a420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a424:	f003 030c 	and.w	r3, r3, #12
 800a428:	2b0c      	cmp	r3, #12
 800a42a:	d82d      	bhi.n	800a488 <UART_SetConfig+0x164>
 800a42c:	a201      	add	r2, pc, #4	@ (adr r2, 800a434 <UART_SetConfig+0x110>)
 800a42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a432:	bf00      	nop
 800a434:	0800a469 	.word	0x0800a469
 800a438:	0800a489 	.word	0x0800a489
 800a43c:	0800a489 	.word	0x0800a489
 800a440:	0800a489 	.word	0x0800a489
 800a444:	0800a479 	.word	0x0800a479
 800a448:	0800a489 	.word	0x0800a489
 800a44c:	0800a489 	.word	0x0800a489
 800a450:	0800a489 	.word	0x0800a489
 800a454:	0800a471 	.word	0x0800a471
 800a458:	0800a489 	.word	0x0800a489
 800a45c:	0800a489 	.word	0x0800a489
 800a460:	0800a489 	.word	0x0800a489
 800a464:	0800a481 	.word	0x0800a481
 800a468:	2300      	movs	r3, #0
 800a46a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a46e:	e0d8      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a470:	2302      	movs	r3, #2
 800a472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a476:	e0d4      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a478:	2304      	movs	r3, #4
 800a47a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a47e:	e0d0      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a480:	2308      	movs	r3, #8
 800a482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a486:	e0cc      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a488:	2310      	movs	r3, #16
 800a48a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a48e:	e0c8      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a5e      	ldr	r2, [pc, #376]	@ (800a610 <UART_SetConfig+0x2ec>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d125      	bne.n	800a4e6 <UART_SetConfig+0x1c2>
 800a49a:	4b5b      	ldr	r3, [pc, #364]	@ (800a608 <UART_SetConfig+0x2e4>)
 800a49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a4a4:	2b30      	cmp	r3, #48	@ 0x30
 800a4a6:	d016      	beq.n	800a4d6 <UART_SetConfig+0x1b2>
 800a4a8:	2b30      	cmp	r3, #48	@ 0x30
 800a4aa:	d818      	bhi.n	800a4de <UART_SetConfig+0x1ba>
 800a4ac:	2b20      	cmp	r3, #32
 800a4ae:	d00a      	beq.n	800a4c6 <UART_SetConfig+0x1a2>
 800a4b0:	2b20      	cmp	r3, #32
 800a4b2:	d814      	bhi.n	800a4de <UART_SetConfig+0x1ba>
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d002      	beq.n	800a4be <UART_SetConfig+0x19a>
 800a4b8:	2b10      	cmp	r3, #16
 800a4ba:	d008      	beq.n	800a4ce <UART_SetConfig+0x1aa>
 800a4bc:	e00f      	b.n	800a4de <UART_SetConfig+0x1ba>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4c4:	e0ad      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4cc:	e0a9      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a4ce:	2304      	movs	r3, #4
 800a4d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4d4:	e0a5      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a4d6:	2308      	movs	r3, #8
 800a4d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4dc:	e0a1      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a4de:	2310      	movs	r3, #16
 800a4e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4e4:	e09d      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a4a      	ldr	r2, [pc, #296]	@ (800a614 <UART_SetConfig+0x2f0>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d125      	bne.n	800a53c <UART_SetConfig+0x218>
 800a4f0:	4b45      	ldr	r3, [pc, #276]	@ (800a608 <UART_SetConfig+0x2e4>)
 800a4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a4fa:	2bc0      	cmp	r3, #192	@ 0xc0
 800a4fc:	d016      	beq.n	800a52c <UART_SetConfig+0x208>
 800a4fe:	2bc0      	cmp	r3, #192	@ 0xc0
 800a500:	d818      	bhi.n	800a534 <UART_SetConfig+0x210>
 800a502:	2b80      	cmp	r3, #128	@ 0x80
 800a504:	d00a      	beq.n	800a51c <UART_SetConfig+0x1f8>
 800a506:	2b80      	cmp	r3, #128	@ 0x80
 800a508:	d814      	bhi.n	800a534 <UART_SetConfig+0x210>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d002      	beq.n	800a514 <UART_SetConfig+0x1f0>
 800a50e:	2b40      	cmp	r3, #64	@ 0x40
 800a510:	d008      	beq.n	800a524 <UART_SetConfig+0x200>
 800a512:	e00f      	b.n	800a534 <UART_SetConfig+0x210>
 800a514:	2300      	movs	r3, #0
 800a516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a51a:	e082      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a51c:	2302      	movs	r3, #2
 800a51e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a522:	e07e      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a524:	2304      	movs	r3, #4
 800a526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a52a:	e07a      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a52c:	2308      	movs	r3, #8
 800a52e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a532:	e076      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a534:	2310      	movs	r3, #16
 800a536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a53a:	e072      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a35      	ldr	r2, [pc, #212]	@ (800a618 <UART_SetConfig+0x2f4>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d12a      	bne.n	800a59c <UART_SetConfig+0x278>
 800a546:	4b30      	ldr	r3, [pc, #192]	@ (800a608 <UART_SetConfig+0x2e4>)
 800a548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a54c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a550:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a554:	d01a      	beq.n	800a58c <UART_SetConfig+0x268>
 800a556:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a55a:	d81b      	bhi.n	800a594 <UART_SetConfig+0x270>
 800a55c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a560:	d00c      	beq.n	800a57c <UART_SetConfig+0x258>
 800a562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a566:	d815      	bhi.n	800a594 <UART_SetConfig+0x270>
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d003      	beq.n	800a574 <UART_SetConfig+0x250>
 800a56c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a570:	d008      	beq.n	800a584 <UART_SetConfig+0x260>
 800a572:	e00f      	b.n	800a594 <UART_SetConfig+0x270>
 800a574:	2300      	movs	r3, #0
 800a576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a57a:	e052      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a57c:	2302      	movs	r3, #2
 800a57e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a582:	e04e      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a584:	2304      	movs	r3, #4
 800a586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a58a:	e04a      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a58c:	2308      	movs	r3, #8
 800a58e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a592:	e046      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a594:	2310      	movs	r3, #16
 800a596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a59a:	e042      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a17      	ldr	r2, [pc, #92]	@ (800a600 <UART_SetConfig+0x2dc>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d13a      	bne.n	800a61c <UART_SetConfig+0x2f8>
 800a5a6:	4b18      	ldr	r3, [pc, #96]	@ (800a608 <UART_SetConfig+0x2e4>)
 800a5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a5b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a5b4:	d01a      	beq.n	800a5ec <UART_SetConfig+0x2c8>
 800a5b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a5ba:	d81b      	bhi.n	800a5f4 <UART_SetConfig+0x2d0>
 800a5bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a5c0:	d00c      	beq.n	800a5dc <UART_SetConfig+0x2b8>
 800a5c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a5c6:	d815      	bhi.n	800a5f4 <UART_SetConfig+0x2d0>
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <UART_SetConfig+0x2b0>
 800a5cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5d0:	d008      	beq.n	800a5e4 <UART_SetConfig+0x2c0>
 800a5d2:	e00f      	b.n	800a5f4 <UART_SetConfig+0x2d0>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5da:	e022      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a5dc:	2302      	movs	r3, #2
 800a5de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5e2:	e01e      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a5e4:	2304      	movs	r3, #4
 800a5e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ea:	e01a      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a5ec:	2308      	movs	r3, #8
 800a5ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5f2:	e016      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a5f4:	2310      	movs	r3, #16
 800a5f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5fa:	e012      	b.n	800a622 <UART_SetConfig+0x2fe>
 800a5fc:	cfff69f3 	.word	0xcfff69f3
 800a600:	40008000 	.word	0x40008000
 800a604:	40013800 	.word	0x40013800
 800a608:	40021000 	.word	0x40021000
 800a60c:	40004400 	.word	0x40004400
 800a610:	40004800 	.word	0x40004800
 800a614:	40004c00 	.word	0x40004c00
 800a618:	40005000 	.word	0x40005000
 800a61c:	2310      	movs	r3, #16
 800a61e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4aae      	ldr	r2, [pc, #696]	@ (800a8e0 <UART_SetConfig+0x5bc>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	f040 8097 	bne.w	800a75c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a62e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a632:	2b08      	cmp	r3, #8
 800a634:	d823      	bhi.n	800a67e <UART_SetConfig+0x35a>
 800a636:	a201      	add	r2, pc, #4	@ (adr r2, 800a63c <UART_SetConfig+0x318>)
 800a638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a63c:	0800a661 	.word	0x0800a661
 800a640:	0800a67f 	.word	0x0800a67f
 800a644:	0800a669 	.word	0x0800a669
 800a648:	0800a67f 	.word	0x0800a67f
 800a64c:	0800a66f 	.word	0x0800a66f
 800a650:	0800a67f 	.word	0x0800a67f
 800a654:	0800a67f 	.word	0x0800a67f
 800a658:	0800a67f 	.word	0x0800a67f
 800a65c:	0800a677 	.word	0x0800a677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a660:	f7fc f892 	bl	8006788 <HAL_RCC_GetPCLK1Freq>
 800a664:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a666:	e010      	b.n	800a68a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a668:	4b9e      	ldr	r3, [pc, #632]	@ (800a8e4 <UART_SetConfig+0x5c0>)
 800a66a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a66c:	e00d      	b.n	800a68a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a66e:	f7fc f81d 	bl	80066ac <HAL_RCC_GetSysClockFreq>
 800a672:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a674:	e009      	b.n	800a68a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a67a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a67c:	e005      	b.n	800a68a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a67e:	2300      	movs	r3, #0
 800a680:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a688:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 8130 	beq.w	800a8f2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a696:	4a94      	ldr	r2, [pc, #592]	@ (800a8e8 <UART_SetConfig+0x5c4>)
 800a698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a69c:	461a      	mov	r2, r3
 800a69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	685a      	ldr	r2, [r3, #4]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	005b      	lsls	r3, r3, #1
 800a6ae:	4413      	add	r3, r2
 800a6b0:	69ba      	ldr	r2, [r7, #24]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d305      	bcc.n	800a6c2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6bc:	69ba      	ldr	r2, [r7, #24]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d903      	bls.n	800a6ca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a6c8:	e113      	b.n	800a8f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	60bb      	str	r3, [r7, #8]
 800a6d0:	60fa      	str	r2, [r7, #12]
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d6:	4a84      	ldr	r2, [pc, #528]	@ (800a8e8 <UART_SetConfig+0x5c4>)
 800a6d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	2200      	movs	r2, #0
 800a6e0:	603b      	str	r3, [r7, #0]
 800a6e2:	607a      	str	r2, [r7, #4]
 800a6e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a6ec:	f7f6 fb68 	bl	8000dc0 <__aeabi_uldivmod>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	f04f 0200 	mov.w	r2, #0
 800a6fc:	f04f 0300 	mov.w	r3, #0
 800a700:	020b      	lsls	r3, r1, #8
 800a702:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a706:	0202      	lsls	r2, r0, #8
 800a708:	6979      	ldr	r1, [r7, #20]
 800a70a:	6849      	ldr	r1, [r1, #4]
 800a70c:	0849      	lsrs	r1, r1, #1
 800a70e:	2000      	movs	r0, #0
 800a710:	460c      	mov	r4, r1
 800a712:	4605      	mov	r5, r0
 800a714:	eb12 0804 	adds.w	r8, r2, r4
 800a718:	eb43 0905 	adc.w	r9, r3, r5
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	469a      	mov	sl, r3
 800a724:	4693      	mov	fp, r2
 800a726:	4652      	mov	r2, sl
 800a728:	465b      	mov	r3, fp
 800a72a:	4640      	mov	r0, r8
 800a72c:	4649      	mov	r1, r9
 800a72e:	f7f6 fb47 	bl	8000dc0 <__aeabi_uldivmod>
 800a732:	4602      	mov	r2, r0
 800a734:	460b      	mov	r3, r1
 800a736:	4613      	mov	r3, r2
 800a738:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a73a:	6a3b      	ldr	r3, [r7, #32]
 800a73c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a740:	d308      	bcc.n	800a754 <UART_SetConfig+0x430>
 800a742:	6a3b      	ldr	r3, [r7, #32]
 800a744:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a748:	d204      	bcs.n	800a754 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	6a3a      	ldr	r2, [r7, #32]
 800a750:	60da      	str	r2, [r3, #12]
 800a752:	e0ce      	b.n	800a8f2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a754:	2301      	movs	r3, #1
 800a756:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a75a:	e0ca      	b.n	800a8f2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a764:	d166      	bne.n	800a834 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a766:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a76a:	2b08      	cmp	r3, #8
 800a76c:	d827      	bhi.n	800a7be <UART_SetConfig+0x49a>
 800a76e:	a201      	add	r2, pc, #4	@ (adr r2, 800a774 <UART_SetConfig+0x450>)
 800a770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a774:	0800a799 	.word	0x0800a799
 800a778:	0800a7a1 	.word	0x0800a7a1
 800a77c:	0800a7a9 	.word	0x0800a7a9
 800a780:	0800a7bf 	.word	0x0800a7bf
 800a784:	0800a7af 	.word	0x0800a7af
 800a788:	0800a7bf 	.word	0x0800a7bf
 800a78c:	0800a7bf 	.word	0x0800a7bf
 800a790:	0800a7bf 	.word	0x0800a7bf
 800a794:	0800a7b7 	.word	0x0800a7b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a798:	f7fb fff6 	bl	8006788 <HAL_RCC_GetPCLK1Freq>
 800a79c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a79e:	e014      	b.n	800a7ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7a0:	f7fc f808 	bl	80067b4 <HAL_RCC_GetPCLK2Freq>
 800a7a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7a6:	e010      	b.n	800a7ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7a8:	4b4e      	ldr	r3, [pc, #312]	@ (800a8e4 <UART_SetConfig+0x5c0>)
 800a7aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a7ac:	e00d      	b.n	800a7ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7ae:	f7fb ff7d 	bl	80066ac <HAL_RCC_GetSysClockFreq>
 800a7b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7b4:	e009      	b.n	800a7ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a7bc:	e005      	b.n	800a7ca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a7c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f000 8090 	beq.w	800a8f2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d6:	4a44      	ldr	r2, [pc, #272]	@ (800a8e8 <UART_SetConfig+0x5c4>)
 800a7d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7e4:	005a      	lsls	r2, r3, #1
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	085b      	lsrs	r3, r3, #1
 800a7ec:	441a      	add	r2, r3
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7f8:	6a3b      	ldr	r3, [r7, #32]
 800a7fa:	2b0f      	cmp	r3, #15
 800a7fc:	d916      	bls.n	800a82c <UART_SetConfig+0x508>
 800a7fe:	6a3b      	ldr	r3, [r7, #32]
 800a800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a804:	d212      	bcs.n	800a82c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a806:	6a3b      	ldr	r3, [r7, #32]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	f023 030f 	bic.w	r3, r3, #15
 800a80e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a810:	6a3b      	ldr	r3, [r7, #32]
 800a812:	085b      	lsrs	r3, r3, #1
 800a814:	b29b      	uxth	r3, r3
 800a816:	f003 0307 	and.w	r3, r3, #7
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	8bfb      	ldrh	r3, [r7, #30]
 800a81e:	4313      	orrs	r3, r2
 800a820:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	8bfa      	ldrh	r2, [r7, #30]
 800a828:	60da      	str	r2, [r3, #12]
 800a82a:	e062      	b.n	800a8f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a832:	e05e      	b.n	800a8f2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a834:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a838:	2b08      	cmp	r3, #8
 800a83a:	d828      	bhi.n	800a88e <UART_SetConfig+0x56a>
 800a83c:	a201      	add	r2, pc, #4	@ (adr r2, 800a844 <UART_SetConfig+0x520>)
 800a83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a842:	bf00      	nop
 800a844:	0800a869 	.word	0x0800a869
 800a848:	0800a871 	.word	0x0800a871
 800a84c:	0800a879 	.word	0x0800a879
 800a850:	0800a88f 	.word	0x0800a88f
 800a854:	0800a87f 	.word	0x0800a87f
 800a858:	0800a88f 	.word	0x0800a88f
 800a85c:	0800a88f 	.word	0x0800a88f
 800a860:	0800a88f 	.word	0x0800a88f
 800a864:	0800a887 	.word	0x0800a887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a868:	f7fb ff8e 	bl	8006788 <HAL_RCC_GetPCLK1Freq>
 800a86c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a86e:	e014      	b.n	800a89a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a870:	f7fb ffa0 	bl	80067b4 <HAL_RCC_GetPCLK2Freq>
 800a874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a876:	e010      	b.n	800a89a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a878:	4b1a      	ldr	r3, [pc, #104]	@ (800a8e4 <UART_SetConfig+0x5c0>)
 800a87a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a87c:	e00d      	b.n	800a89a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a87e:	f7fb ff15 	bl	80066ac <HAL_RCC_GetSysClockFreq>
 800a882:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a884:	e009      	b.n	800a89a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a88a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a88c:	e005      	b.n	800a89a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a88e:	2300      	movs	r3, #0
 800a890:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a898:	bf00      	nop
    }

    if (pclk != 0U)
 800a89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d028      	beq.n	800a8f2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a4:	4a10      	ldr	r2, [pc, #64]	@ (800a8e8 <UART_SetConfig+0x5c4>)
 800a8a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ae:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	085b      	lsrs	r3, r3, #1
 800a8b8:	441a      	add	r2, r3
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8c4:	6a3b      	ldr	r3, [r7, #32]
 800a8c6:	2b0f      	cmp	r3, #15
 800a8c8:	d910      	bls.n	800a8ec <UART_SetConfig+0x5c8>
 800a8ca:	6a3b      	ldr	r3, [r7, #32]
 800a8cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8d0:	d20c      	bcs.n	800a8ec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a8d2:	6a3b      	ldr	r3, [r7, #32]
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	60da      	str	r2, [r3, #12]
 800a8dc:	e009      	b.n	800a8f2 <UART_SetConfig+0x5ce>
 800a8de:	bf00      	nop
 800a8e0:	40008000 	.word	0x40008000
 800a8e4:	00f42400 	.word	0x00f42400
 800a8e8:	0800c018 	.word	0x0800c018
      }
      else
      {
        ret = HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	2200      	movs	r2, #0
 800a906:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	2200      	movs	r2, #0
 800a90c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a90e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a912:	4618      	mov	r0, r3
 800a914:	3730      	adds	r7, #48	@ 0x30
 800a916:	46bd      	mov	sp, r7
 800a918:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a91c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a928:	f003 0308 	and.w	r3, r3, #8
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d00a      	beq.n	800a946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	430a      	orrs	r2, r1
 800a944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a94a:	f003 0301 	and.w	r3, r3, #1
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00a      	beq.n	800a968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	430a      	orrs	r2, r1
 800a966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a96c:	f003 0302 	and.w	r3, r3, #2
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00a      	beq.n	800a98a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	430a      	orrs	r2, r1
 800a988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a98e:	f003 0304 	and.w	r3, r3, #4
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00a      	beq.n	800a9ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	430a      	orrs	r2, r1
 800a9aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b0:	f003 0310 	and.w	r3, r3, #16
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00a      	beq.n	800a9ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9d2:	f003 0320 	and.w	r3, r3, #32
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00a      	beq.n	800a9f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	430a      	orrs	r2, r1
 800a9ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d01a      	beq.n	800aa32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa1a:	d10a      	bne.n	800aa32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00a      	beq.n	800aa54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	430a      	orrs	r2, r1
 800aa52:	605a      	str	r2, [r3, #4]
  }
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b098      	sub	sp, #96	@ 0x60
 800aa64:	af02      	add	r7, sp, #8
 800aa66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa70:	f7fa fb02 	bl	8005078 <HAL_GetTick>
 800aa74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0308 	and.w	r3, r3, #8
 800aa80:	2b08      	cmp	r3, #8
 800aa82:	d12f      	bne.n	800aae4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f88e 	bl	800abb4 <UART_WaitOnFlagUntilTimeout>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d022      	beq.n	800aae4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa6:	e853 3f00 	ldrex	r3, [r3]
 800aaaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aaac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aab2:	653b      	str	r3, [r7, #80]	@ 0x50
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	461a      	mov	r2, r3
 800aaba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aabc:	647b      	str	r3, [r7, #68]	@ 0x44
 800aabe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aac4:	e841 2300 	strex	r3, r2, [r1]
 800aac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aaca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d1e6      	bne.n	800aa9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2220      	movs	r2, #32
 800aad4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aae0:	2303      	movs	r3, #3
 800aae2:	e063      	b.n	800abac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 0304 	and.w	r3, r3, #4
 800aaee:	2b04      	cmp	r3, #4
 800aaf0:	d149      	bne.n	800ab86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaf2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aafa:	2200      	movs	r2, #0
 800aafc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f857 	bl	800abb4 <UART_WaitOnFlagUntilTimeout>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d03c      	beq.n	800ab86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab14:	e853 3f00 	ldrex	r3, [r3]
 800ab18:	623b      	str	r3, [r7, #32]
   return(result);
 800ab1a:	6a3b      	ldr	r3, [r7, #32]
 800ab1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab32:	e841 2300 	strex	r3, r2, [r1]
 800ab36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1e6      	bne.n	800ab0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	3308      	adds	r3, #8
 800ab44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	e853 3f00 	ldrex	r3, [r3]
 800ab4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f023 0301 	bic.w	r3, r3, #1
 800ab54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3308      	adds	r3, #8
 800ab5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab5e:	61fa      	str	r2, [r7, #28]
 800ab60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab62:	69b9      	ldr	r1, [r7, #24]
 800ab64:	69fa      	ldr	r2, [r7, #28]
 800ab66:	e841 2300 	strex	r3, r2, [r1]
 800ab6a:	617b      	str	r3, [r7, #20]
   return(result);
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1e5      	bne.n	800ab3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2220      	movs	r2, #32
 800ab76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab82:	2303      	movs	r3, #3
 800ab84:	e012      	b.n	800abac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2220      	movs	r2, #32
 800ab8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2220      	movs	r2, #32
 800ab92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3758      	adds	r7, #88	@ 0x58
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	603b      	str	r3, [r7, #0]
 800abc0:	4613      	mov	r3, r2
 800abc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abc4:	e04f      	b.n	800ac66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abcc:	d04b      	beq.n	800ac66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abce:	f7fa fa53 	bl	8005078 <HAL_GetTick>
 800abd2:	4602      	mov	r2, r0
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	69ba      	ldr	r2, [r7, #24]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d302      	bcc.n	800abe4 <UART_WaitOnFlagUntilTimeout+0x30>
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d101      	bne.n	800abe8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800abe4:	2303      	movs	r3, #3
 800abe6:	e04e      	b.n	800ac86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f003 0304 	and.w	r3, r3, #4
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d037      	beq.n	800ac66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2b80      	cmp	r3, #128	@ 0x80
 800abfa:	d034      	beq.n	800ac66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2b40      	cmp	r3, #64	@ 0x40
 800ac00:	d031      	beq.n	800ac66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	69db      	ldr	r3, [r3, #28]
 800ac08:	f003 0308 	and.w	r3, r3, #8
 800ac0c:	2b08      	cmp	r3, #8
 800ac0e:	d110      	bne.n	800ac32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2208      	movs	r2, #8
 800ac16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 f920 	bl	800ae5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2208      	movs	r2, #8
 800ac22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e029      	b.n	800ac86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	69db      	ldr	r3, [r3, #28]
 800ac38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac40:	d111      	bne.n	800ac66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 f906 	bl	800ae5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2220      	movs	r2, #32
 800ac56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e00f      	b.n	800ac86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	69da      	ldr	r2, [r3, #28]
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	4013      	ands	r3, r2
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	bf0c      	ite	eq
 800ac76:	2301      	moveq	r3, #1
 800ac78:	2300      	movne	r3, #0
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	79fb      	ldrb	r3, [r7, #7]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d0a0      	beq.n	800abc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
	...

0800ac90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b096      	sub	sp, #88	@ 0x58
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	88fa      	ldrh	r2, [r7, #6]
 800aca8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2222      	movs	r2, #34	@ 0x22
 800acb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d02d      	beq.n	800ad22 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800accc:	4a40      	ldr	r2, [pc, #256]	@ (800add0 <UART_Start_Receive_DMA+0x140>)
 800acce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acd6:	4a3f      	ldr	r2, [pc, #252]	@ (800add4 <UART_Start_Receive_DMA+0x144>)
 800acd8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ace0:	4a3d      	ldr	r2, [pc, #244]	@ (800add8 <UART_Start_Receive_DMA+0x148>)
 800ace2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acea:	2200      	movs	r2, #0
 800acec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	3324      	adds	r3, #36	@ 0x24
 800acfa:	4619      	mov	r1, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad00:	461a      	mov	r2, r3
 800ad02:	88fb      	ldrh	r3, [r7, #6]
 800ad04:	f7fa fb7c 	bl	8005400 <HAL_DMA_Start_IT>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d009      	beq.n	800ad22 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2210      	movs	r2, #16
 800ad12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2220      	movs	r2, #32
 800ad1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e051      	b.n	800adc6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d018      	beq.n	800ad5c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad32:	e853 3f00 	ldrex	r3, [r3]
 800ad36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad3e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	461a      	mov	r2, r3
 800ad46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad48:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad4a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ad4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad50:	e841 2300 	strex	r3, r2, [r1]
 800ad54:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ad56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1e6      	bne.n	800ad2a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3308      	adds	r3, #8
 800ad62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad66:	e853 3f00 	ldrex	r3, [r3]
 800ad6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad6e:	f043 0301 	orr.w	r3, r3, #1
 800ad72:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	3308      	adds	r3, #8
 800ad7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ad7c:	637a      	str	r2, [r7, #52]	@ 0x34
 800ad7e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad84:	e841 2300 	strex	r3, r2, [r1]
 800ad88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ad8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1e5      	bne.n	800ad5c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3308      	adds	r3, #8
 800ad96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	e853 3f00 	ldrex	r3, [r3]
 800ad9e:	613b      	str	r3, [r7, #16]
   return(result);
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ada6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3308      	adds	r3, #8
 800adae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800adb0:	623a      	str	r2, [r7, #32]
 800adb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb4:	69f9      	ldr	r1, [r7, #28]
 800adb6:	6a3a      	ldr	r2, [r7, #32]
 800adb8:	e841 2300 	strex	r3, r2, [r1]
 800adbc:	61bb      	str	r3, [r7, #24]
   return(result);
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1e5      	bne.n	800ad90 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3758      	adds	r7, #88	@ 0x58
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	0800af2b 	.word	0x0800af2b
 800add4:	0800b05f 	.word	0x0800b05f
 800add8:	0800b0a5 	.word	0x0800b0a5

0800addc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800addc:	b480      	push	{r7}
 800adde:	b08f      	sub	sp, #60	@ 0x3c
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adea:	6a3b      	ldr	r3, [r7, #32]
 800adec:	e853 3f00 	ldrex	r3, [r3]
 800adf0:	61fb      	str	r3, [r7, #28]
   return(result);
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800adf8:	637b      	str	r3, [r7, #52]	@ 0x34
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	461a      	mov	r2, r3
 800ae00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae04:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae0a:	e841 2300 	strex	r3, r2, [r1]
 800ae0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1e6      	bne.n	800ade4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3308      	adds	r3, #8
 800ae1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	e853 3f00 	ldrex	r3, [r3]
 800ae24:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ae2c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	3308      	adds	r3, #8
 800ae34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae36:	61ba      	str	r2, [r7, #24]
 800ae38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3a:	6979      	ldr	r1, [r7, #20]
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	e841 2300 	strex	r3, r2, [r1]
 800ae42:	613b      	str	r3, [r7, #16]
   return(result);
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1e5      	bne.n	800ae16 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2220      	movs	r2, #32
 800ae4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ae52:	bf00      	nop
 800ae54:	373c      	adds	r7, #60	@ 0x3c
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr

0800ae5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae5e:	b480      	push	{r7}
 800ae60:	b095      	sub	sp, #84	@ 0x54
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae6e:	e853 3f00 	ldrex	r3, [r3]
 800ae72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	461a      	mov	r2, r3
 800ae82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae84:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae8c:	e841 2300 	strex	r3, r2, [r1]
 800ae90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1e6      	bne.n	800ae66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3308      	adds	r3, #8
 800ae9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	e853 3f00 	ldrex	r3, [r3]
 800aea6:	61fb      	str	r3, [r7, #28]
   return(result);
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aeae:	f023 0301 	bic.w	r3, r3, #1
 800aeb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	3308      	adds	r3, #8
 800aeba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aebc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aec4:	e841 2300 	strex	r3, r2, [r1]
 800aec8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aeca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1e3      	bne.n	800ae98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d118      	bne.n	800af0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	e853 3f00 	ldrex	r3, [r3]
 800aee4:	60bb      	str	r3, [r7, #8]
   return(result);
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	f023 0310 	bic.w	r3, r3, #16
 800aeec:	647b      	str	r3, [r7, #68]	@ 0x44
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	461a      	mov	r2, r3
 800aef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aef6:	61bb      	str	r3, [r7, #24]
 800aef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefa:	6979      	ldr	r1, [r7, #20]
 800aefc:	69ba      	ldr	r2, [r7, #24]
 800aefe:	e841 2300 	strex	r3, r2, [r1]
 800af02:	613b      	str	r3, [r7, #16]
   return(result);
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d1e6      	bne.n	800aed8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2220      	movs	r2, #32
 800af0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800af1e:	bf00      	nop
 800af20:	3754      	adds	r7, #84	@ 0x54
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr

0800af2a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b09c      	sub	sp, #112	@ 0x70
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af36:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 0320 	and.w	r3, r3, #32
 800af42:	2b00      	cmp	r3, #0
 800af44:	d171      	bne.n	800b02a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800af46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af48:	2200      	movs	r2, #0
 800af4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af56:	e853 3f00 	ldrex	r3, [r3]
 800af5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af62:	66bb      	str	r3, [r7, #104]	@ 0x68
 800af64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	461a      	mov	r2, r3
 800af6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af6e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af74:	e841 2300 	strex	r3, r2, [r1]
 800af78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1e6      	bne.n	800af4e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	3308      	adds	r3, #8
 800af86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af8a:	e853 3f00 	ldrex	r3, [r3]
 800af8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af92:	f023 0301 	bic.w	r3, r3, #1
 800af96:	667b      	str	r3, [r7, #100]	@ 0x64
 800af98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	3308      	adds	r3, #8
 800af9e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800afa0:	647a      	str	r2, [r7, #68]	@ 0x44
 800afa2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800afa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800afa8:	e841 2300 	strex	r3, r2, [r1]
 800afac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800afae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1e5      	bne.n	800af80 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	3308      	adds	r3, #8
 800afba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afbe:	e853 3f00 	ldrex	r3, [r3]
 800afc2:	623b      	str	r3, [r7, #32]
   return(result);
 800afc4:	6a3b      	ldr	r3, [r7, #32]
 800afc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afca:	663b      	str	r3, [r7, #96]	@ 0x60
 800afcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	3308      	adds	r3, #8
 800afd2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800afd4:	633a      	str	r2, [r7, #48]	@ 0x30
 800afd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afdc:	e841 2300 	strex	r3, r2, [r1]
 800afe0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1e5      	bne.n	800afb4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800afe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afea:	2220      	movs	r2, #32
 800afec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aff0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d118      	bne.n	800b02a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	e853 3f00 	ldrex	r3, [r3]
 800b004:	60fb      	str	r3, [r7, #12]
   return(result);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f023 0310 	bic.w	r3, r3, #16
 800b00c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b00e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	461a      	mov	r2, r3
 800b014:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b016:	61fb      	str	r3, [r7, #28]
 800b018:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01a:	69b9      	ldr	r1, [r7, #24]
 800b01c:	69fa      	ldr	r2, [r7, #28]
 800b01e:	e841 2300 	strex	r3, r2, [r1]
 800b022:	617b      	str	r3, [r7, #20]
   return(result);
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1e6      	bne.n	800aff8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b02a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b02c:	2200      	movs	r2, #0
 800b02e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b030:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b034:	2b01      	cmp	r3, #1
 800b036:	d109      	bne.n	800b04c <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b03a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b03e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b040:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b044:	4611      	mov	r1, r2
 800b046:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b048:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b04a:	e004      	b.n	800b056 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b04c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b04e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b052:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b054:	4798      	blx	r3
}
 800b056:	bf00      	nop
 800b058:	3770      	adds	r7, #112	@ 0x70
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b084      	sub	sp, #16
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b06a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2201      	movs	r2, #1
 800b070:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b076:	2b01      	cmp	r3, #1
 800b078:	d10b      	bne.n	800b092 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b086:	0852      	lsrs	r2, r2, #1
 800b088:	b292      	uxth	r2, r2
 800b08a:	4611      	mov	r1, r2
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b090:	e004      	b.n	800b09c <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	4798      	blx	r3
}
 800b09c:	bf00      	nop
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0b8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0c0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0cc:	2b80      	cmp	r3, #128	@ 0x80
 800b0ce:	d109      	bne.n	800b0e4 <UART_DMAError+0x40>
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	2b21      	cmp	r3, #33	@ 0x21
 800b0d4:	d106      	bne.n	800b0e4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b0de:	6978      	ldr	r0, [r7, #20]
 800b0e0:	f7ff fe7c 	bl	800addc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0ee:	2b40      	cmp	r3, #64	@ 0x40
 800b0f0:	d109      	bne.n	800b106 <UART_DMAError+0x62>
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2b22      	cmp	r3, #34	@ 0x22
 800b0f6:	d106      	bne.n	800b106 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b100:	6978      	ldr	r0, [r7, #20]
 800b102:	f7ff feac 	bl	800ae5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b10c:	f043 0210 	orr.w	r2, r3, #16
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b11c:	6978      	ldr	r0, [r7, #20]
 800b11e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b120:	bf00      	nop
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b134:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b148:	bf00      	nop
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b088      	sub	sp, #32
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	e853 3f00 	ldrex	r3, [r3]
 800b164:	60bb      	str	r3, [r7, #8]
   return(result);
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b16c:	61fb      	str	r3, [r7, #28]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	461a      	mov	r2, r3
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	61bb      	str	r3, [r7, #24]
 800b178:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17a:	6979      	ldr	r1, [r7, #20]
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	e841 2300 	strex	r3, r2, [r1]
 800b182:	613b      	str	r3, [r7, #16]
   return(result);
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1e6      	bne.n	800b158 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2220      	movs	r2, #32
 800b18e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1a2:	bf00      	nop
 800b1a4:	3720      	adds	r7, #32
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	b083      	sub	sp, #12
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1b2:	bf00      	nop
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr

0800b1be <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b1be:	b480      	push	{r7}
 800b1c0:	b083      	sub	sp, #12
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b1c6:	bf00      	nop
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b1d2:	b480      	push	{r7}
 800b1d4:	b083      	sub	sp, #12
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b1da:	bf00      	nop
 800b1dc:	370c      	adds	r7, #12
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b085      	sub	sp, #20
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d101      	bne.n	800b1fc <HAL_UARTEx_DisableFifoMode+0x16>
 800b1f8:	2302      	movs	r3, #2
 800b1fa:	e027      	b.n	800b24c <HAL_UARTEx_DisableFifoMode+0x66>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2224      	movs	r2, #36	@ 0x24
 800b208:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f022 0201 	bic.w	r2, r2, #1
 800b222:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b22a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2220      	movs	r2, #32
 800b23e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3714      	adds	r7, #20
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d101      	bne.n	800b270 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b26c:	2302      	movs	r3, #2
 800b26e:	e02d      	b.n	800b2cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2224      	movs	r2, #36	@ 0x24
 800b27c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f022 0201 	bic.w	r2, r2, #1
 800b296:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	430a      	orrs	r2, r1
 800b2aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f84f 	bl	800b350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2220      	movs	r2, #32
 800b2be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d101      	bne.n	800b2ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2e8:	2302      	movs	r3, #2
 800b2ea:	e02d      	b.n	800b348 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2224      	movs	r2, #36	@ 0x24
 800b2f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f022 0201 	bic.w	r2, r2, #1
 800b312:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	430a      	orrs	r2, r1
 800b326:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f811 	bl	800b350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2220      	movs	r2, #32
 800b33a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d108      	bne.n	800b372 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b370:	e031      	b.n	800b3d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b372:	2308      	movs	r3, #8
 800b374:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b376:	2308      	movs	r3, #8
 800b378:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	0e5b      	lsrs	r3, r3, #25
 800b382:	b2db      	uxtb	r3, r3
 800b384:	f003 0307 	and.w	r3, r3, #7
 800b388:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	0f5b      	lsrs	r3, r3, #29
 800b392:	b2db      	uxtb	r3, r3
 800b394:	f003 0307 	and.w	r3, r3, #7
 800b398:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b39a:	7bbb      	ldrb	r3, [r7, #14]
 800b39c:	7b3a      	ldrb	r2, [r7, #12]
 800b39e:	4911      	ldr	r1, [pc, #68]	@ (800b3e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b3a0:	5c8a      	ldrb	r2, [r1, r2]
 800b3a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3a6:	7b3a      	ldrb	r2, [r7, #12]
 800b3a8:	490f      	ldr	r1, [pc, #60]	@ (800b3e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b3aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3b8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ba:	7b7a      	ldrb	r2, [r7, #13]
 800b3bc:	4909      	ldr	r1, [pc, #36]	@ (800b3e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b3be:	5c8a      	ldrb	r2, [r1, r2]
 800b3c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3c4:	7b7a      	ldrb	r2, [r7, #13]
 800b3c6:	4908      	ldr	r1, [pc, #32]	@ (800b3e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b3c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b3d6:	bf00      	nop
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	0800c030 	.word	0x0800c030
 800b3e8:	0800c038 	.word	0x0800c038

0800b3ec <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	ed93 7a06 	vldr	s14, [r3, #24]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	edd3 7a07 	vldr	s15, [r3, #28]
 800b402:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	edd3 7a08 	vldr	s15, [r3, #32]
 800b40c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	edd3 7a06 	vldr	s15, [r3, #24]
 800b41c:	eeb1 7a67 	vneg.f32	s14, s15
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	edd3 7a08 	vldr	s15, [r3, #32]
 800b426:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b42a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6a1a      	ldr	r2, [r3, #32]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d006      	beq.n	800b450 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	330c      	adds	r3, #12
 800b446:	220c      	movs	r2, #12
 800b448:	2100      	movs	r1, #0
 800b44a:	4618      	mov	r0, r3
 800b44c:	f000 f804 	bl	800b458 <memset>
  }

}
 800b450:	bf00      	nop
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <memset>:
 800b458:	4402      	add	r2, r0
 800b45a:	4603      	mov	r3, r0
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d100      	bne.n	800b462 <memset+0xa>
 800b460:	4770      	bx	lr
 800b462:	f803 1b01 	strb.w	r1, [r3], #1
 800b466:	e7f9      	b.n	800b45c <memset+0x4>

0800b468 <__errno>:
 800b468:	4b01      	ldr	r3, [pc, #4]	@ (800b470 <__errno+0x8>)
 800b46a:	6818      	ldr	r0, [r3, #0]
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	20000034 	.word	0x20000034

0800b474 <__libc_init_array>:
 800b474:	b570      	push	{r4, r5, r6, lr}
 800b476:	4d0d      	ldr	r5, [pc, #52]	@ (800b4ac <__libc_init_array+0x38>)
 800b478:	4c0d      	ldr	r4, [pc, #52]	@ (800b4b0 <__libc_init_array+0x3c>)
 800b47a:	1b64      	subs	r4, r4, r5
 800b47c:	10a4      	asrs	r4, r4, #2
 800b47e:	2600      	movs	r6, #0
 800b480:	42a6      	cmp	r6, r4
 800b482:	d109      	bne.n	800b498 <__libc_init_array+0x24>
 800b484:	4d0b      	ldr	r5, [pc, #44]	@ (800b4b4 <__libc_init_array+0x40>)
 800b486:	4c0c      	ldr	r4, [pc, #48]	@ (800b4b8 <__libc_init_array+0x44>)
 800b488:	f000 fdae 	bl	800bfe8 <_init>
 800b48c:	1b64      	subs	r4, r4, r5
 800b48e:	10a4      	asrs	r4, r4, #2
 800b490:	2600      	movs	r6, #0
 800b492:	42a6      	cmp	r6, r4
 800b494:	d105      	bne.n	800b4a2 <__libc_init_array+0x2e>
 800b496:	bd70      	pop	{r4, r5, r6, pc}
 800b498:	f855 3b04 	ldr.w	r3, [r5], #4
 800b49c:	4798      	blx	r3
 800b49e:	3601      	adds	r6, #1
 800b4a0:	e7ee      	b.n	800b480 <__libc_init_array+0xc>
 800b4a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4a6:	4798      	blx	r3
 800b4a8:	3601      	adds	r6, #1
 800b4aa:	e7f2      	b.n	800b492 <__libc_init_array+0x1e>
 800b4ac:	0800c418 	.word	0x0800c418
 800b4b0:	0800c418 	.word	0x0800c418
 800b4b4:	0800c418 	.word	0x0800c418
 800b4b8:	0800c41c 	.word	0x0800c41c

0800b4bc <sqrtf>:
 800b4bc:	b508      	push	{r3, lr}
 800b4be:	ed2d 8b02 	vpush	{d8}
 800b4c2:	eeb0 8a40 	vmov.f32	s16, s0
 800b4c6:	f000 f8a1 	bl	800b60c <__ieee754_sqrtf>
 800b4ca:	eeb4 8a48 	vcmp.f32	s16, s16
 800b4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d2:	d60c      	bvs.n	800b4ee <sqrtf+0x32>
 800b4d4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b4f4 <sqrtf+0x38>
 800b4d8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b4dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4e0:	d505      	bpl.n	800b4ee <sqrtf+0x32>
 800b4e2:	f7ff ffc1 	bl	800b468 <__errno>
 800b4e6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b4ea:	2321      	movs	r3, #33	@ 0x21
 800b4ec:	6003      	str	r3, [r0, #0]
 800b4ee:	ecbd 8b02 	vpop	{d8}
 800b4f2:	bd08      	pop	{r3, pc}
 800b4f4:	00000000 	.word	0x00000000

0800b4f8 <cosf>:
 800b4f8:	ee10 3a10 	vmov	r3, s0
 800b4fc:	b507      	push	{r0, r1, r2, lr}
 800b4fe:	4a1e      	ldr	r2, [pc, #120]	@ (800b578 <cosf+0x80>)
 800b500:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b504:	4293      	cmp	r3, r2
 800b506:	d806      	bhi.n	800b516 <cosf+0x1e>
 800b508:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b57c <cosf+0x84>
 800b50c:	b003      	add	sp, #12
 800b50e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b512:	f000 b87f 	b.w	800b614 <__kernel_cosf>
 800b516:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b51a:	d304      	bcc.n	800b526 <cosf+0x2e>
 800b51c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b520:	b003      	add	sp, #12
 800b522:	f85d fb04 	ldr.w	pc, [sp], #4
 800b526:	4668      	mov	r0, sp
 800b528:	f000 f914 	bl	800b754 <__ieee754_rem_pio2f>
 800b52c:	f000 0003 	and.w	r0, r0, #3
 800b530:	2801      	cmp	r0, #1
 800b532:	d009      	beq.n	800b548 <cosf+0x50>
 800b534:	2802      	cmp	r0, #2
 800b536:	d010      	beq.n	800b55a <cosf+0x62>
 800b538:	b9b0      	cbnz	r0, 800b568 <cosf+0x70>
 800b53a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b53e:	ed9d 0a00 	vldr	s0, [sp]
 800b542:	f000 f867 	bl	800b614 <__kernel_cosf>
 800b546:	e7eb      	b.n	800b520 <cosf+0x28>
 800b548:	eddd 0a01 	vldr	s1, [sp, #4]
 800b54c:	ed9d 0a00 	vldr	s0, [sp]
 800b550:	f000 f8b8 	bl	800b6c4 <__kernel_sinf>
 800b554:	eeb1 0a40 	vneg.f32	s0, s0
 800b558:	e7e2      	b.n	800b520 <cosf+0x28>
 800b55a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b55e:	ed9d 0a00 	vldr	s0, [sp]
 800b562:	f000 f857 	bl	800b614 <__kernel_cosf>
 800b566:	e7f5      	b.n	800b554 <cosf+0x5c>
 800b568:	eddd 0a01 	vldr	s1, [sp, #4]
 800b56c:	ed9d 0a00 	vldr	s0, [sp]
 800b570:	2001      	movs	r0, #1
 800b572:	f000 f8a7 	bl	800b6c4 <__kernel_sinf>
 800b576:	e7d3      	b.n	800b520 <cosf+0x28>
 800b578:	3f490fd8 	.word	0x3f490fd8
 800b57c:	00000000 	.word	0x00000000

0800b580 <sinf>:
 800b580:	ee10 3a10 	vmov	r3, s0
 800b584:	b507      	push	{r0, r1, r2, lr}
 800b586:	4a1f      	ldr	r2, [pc, #124]	@ (800b604 <sinf+0x84>)
 800b588:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d807      	bhi.n	800b5a0 <sinf+0x20>
 800b590:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b608 <sinf+0x88>
 800b594:	2000      	movs	r0, #0
 800b596:	b003      	add	sp, #12
 800b598:	f85d eb04 	ldr.w	lr, [sp], #4
 800b59c:	f000 b892 	b.w	800b6c4 <__kernel_sinf>
 800b5a0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b5a4:	d304      	bcc.n	800b5b0 <sinf+0x30>
 800b5a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b5aa:	b003      	add	sp, #12
 800b5ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5b0:	4668      	mov	r0, sp
 800b5b2:	f000 f8cf 	bl	800b754 <__ieee754_rem_pio2f>
 800b5b6:	f000 0003 	and.w	r0, r0, #3
 800b5ba:	2801      	cmp	r0, #1
 800b5bc:	d00a      	beq.n	800b5d4 <sinf+0x54>
 800b5be:	2802      	cmp	r0, #2
 800b5c0:	d00f      	beq.n	800b5e2 <sinf+0x62>
 800b5c2:	b9c0      	cbnz	r0, 800b5f6 <sinf+0x76>
 800b5c4:	eddd 0a01 	vldr	s1, [sp, #4]
 800b5c8:	ed9d 0a00 	vldr	s0, [sp]
 800b5cc:	2001      	movs	r0, #1
 800b5ce:	f000 f879 	bl	800b6c4 <__kernel_sinf>
 800b5d2:	e7ea      	b.n	800b5aa <sinf+0x2a>
 800b5d4:	eddd 0a01 	vldr	s1, [sp, #4]
 800b5d8:	ed9d 0a00 	vldr	s0, [sp]
 800b5dc:	f000 f81a 	bl	800b614 <__kernel_cosf>
 800b5e0:	e7e3      	b.n	800b5aa <sinf+0x2a>
 800b5e2:	eddd 0a01 	vldr	s1, [sp, #4]
 800b5e6:	ed9d 0a00 	vldr	s0, [sp]
 800b5ea:	2001      	movs	r0, #1
 800b5ec:	f000 f86a 	bl	800b6c4 <__kernel_sinf>
 800b5f0:	eeb1 0a40 	vneg.f32	s0, s0
 800b5f4:	e7d9      	b.n	800b5aa <sinf+0x2a>
 800b5f6:	eddd 0a01 	vldr	s1, [sp, #4]
 800b5fa:	ed9d 0a00 	vldr	s0, [sp]
 800b5fe:	f000 f809 	bl	800b614 <__kernel_cosf>
 800b602:	e7f5      	b.n	800b5f0 <sinf+0x70>
 800b604:	3f490fd8 	.word	0x3f490fd8
 800b608:	00000000 	.word	0x00000000

0800b60c <__ieee754_sqrtf>:
 800b60c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b610:	4770      	bx	lr
	...

0800b614 <__kernel_cosf>:
 800b614:	ee10 3a10 	vmov	r3, s0
 800b618:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b61c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b620:	eef0 6a40 	vmov.f32	s13, s0
 800b624:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b628:	d204      	bcs.n	800b634 <__kernel_cosf+0x20>
 800b62a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b62e:	ee17 2a90 	vmov	r2, s15
 800b632:	b342      	cbz	r2, 800b686 <__kernel_cosf+0x72>
 800b634:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b638:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b6a4 <__kernel_cosf+0x90>
 800b63c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b6a8 <__kernel_cosf+0x94>
 800b640:	4a1a      	ldr	r2, [pc, #104]	@ (800b6ac <__kernel_cosf+0x98>)
 800b642:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b646:	4293      	cmp	r3, r2
 800b648:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b6b0 <__kernel_cosf+0x9c>
 800b64c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b650:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b6b4 <__kernel_cosf+0xa0>
 800b654:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b658:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b6b8 <__kernel_cosf+0xa4>
 800b65c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b660:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b6bc <__kernel_cosf+0xa8>
 800b664:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b668:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b66c:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b670:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b674:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b67c:	d804      	bhi.n	800b688 <__kernel_cosf+0x74>
 800b67e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b682:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b686:	4770      	bx	lr
 800b688:	4a0d      	ldr	r2, [pc, #52]	@ (800b6c0 <__kernel_cosf+0xac>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	bf9a      	itte	ls
 800b68e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b692:	ee07 3a10 	vmovls	s14, r3
 800b696:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b69a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b69e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b6a2:	e7ec      	b.n	800b67e <__kernel_cosf+0x6a>
 800b6a4:	ad47d74e 	.word	0xad47d74e
 800b6a8:	310f74f6 	.word	0x310f74f6
 800b6ac:	3e999999 	.word	0x3e999999
 800b6b0:	b493f27c 	.word	0xb493f27c
 800b6b4:	37d00d01 	.word	0x37d00d01
 800b6b8:	bab60b61 	.word	0xbab60b61
 800b6bc:	3d2aaaab 	.word	0x3d2aaaab
 800b6c0:	3f480000 	.word	0x3f480000

0800b6c4 <__kernel_sinf>:
 800b6c4:	ee10 3a10 	vmov	r3, s0
 800b6c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b6cc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b6d0:	d204      	bcs.n	800b6dc <__kernel_sinf+0x18>
 800b6d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b6d6:	ee17 3a90 	vmov	r3, s15
 800b6da:	b35b      	cbz	r3, 800b734 <__kernel_sinf+0x70>
 800b6dc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b6e0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b738 <__kernel_sinf+0x74>
 800b6e4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b73c <__kernel_sinf+0x78>
 800b6e8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b6ec:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b740 <__kernel_sinf+0x7c>
 800b6f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b6f4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b744 <__kernel_sinf+0x80>
 800b6f8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b6fc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b748 <__kernel_sinf+0x84>
 800b700:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b704:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b708:	b930      	cbnz	r0, 800b718 <__kernel_sinf+0x54>
 800b70a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b74c <__kernel_sinf+0x88>
 800b70e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b712:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b716:	4770      	bx	lr
 800b718:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b71c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b720:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b724:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b728:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b750 <__kernel_sinf+0x8c>
 800b72c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b730:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	2f2ec9d3 	.word	0x2f2ec9d3
 800b73c:	b2d72f34 	.word	0xb2d72f34
 800b740:	3638ef1b 	.word	0x3638ef1b
 800b744:	b9500d01 	.word	0xb9500d01
 800b748:	3c088889 	.word	0x3c088889
 800b74c:	be2aaaab 	.word	0xbe2aaaab
 800b750:	3e2aaaab 	.word	0x3e2aaaab

0800b754 <__ieee754_rem_pio2f>:
 800b754:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b756:	ee10 6a10 	vmov	r6, s0
 800b75a:	4b88      	ldr	r3, [pc, #544]	@ (800b97c <__ieee754_rem_pio2f+0x228>)
 800b75c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b760:	429d      	cmp	r5, r3
 800b762:	b087      	sub	sp, #28
 800b764:	4604      	mov	r4, r0
 800b766:	d805      	bhi.n	800b774 <__ieee754_rem_pio2f+0x20>
 800b768:	2300      	movs	r3, #0
 800b76a:	ed80 0a00 	vstr	s0, [r0]
 800b76e:	6043      	str	r3, [r0, #4]
 800b770:	2000      	movs	r0, #0
 800b772:	e022      	b.n	800b7ba <__ieee754_rem_pio2f+0x66>
 800b774:	4b82      	ldr	r3, [pc, #520]	@ (800b980 <__ieee754_rem_pio2f+0x22c>)
 800b776:	429d      	cmp	r5, r3
 800b778:	d83a      	bhi.n	800b7f0 <__ieee754_rem_pio2f+0x9c>
 800b77a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b77e:	2e00      	cmp	r6, #0
 800b780:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b984 <__ieee754_rem_pio2f+0x230>
 800b784:	4a80      	ldr	r2, [pc, #512]	@ (800b988 <__ieee754_rem_pio2f+0x234>)
 800b786:	f023 030f 	bic.w	r3, r3, #15
 800b78a:	dd18      	ble.n	800b7be <__ieee754_rem_pio2f+0x6a>
 800b78c:	4293      	cmp	r3, r2
 800b78e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b792:	bf09      	itett	eq
 800b794:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b98c <__ieee754_rem_pio2f+0x238>
 800b798:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b990 <__ieee754_rem_pio2f+0x23c>
 800b79c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b994 <__ieee754_rem_pio2f+0x240>
 800b7a0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b7a4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b7a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7ac:	ed80 7a00 	vstr	s14, [r0]
 800b7b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b7b4:	edc0 7a01 	vstr	s15, [r0, #4]
 800b7b8:	2001      	movs	r0, #1
 800b7ba:	b007      	add	sp, #28
 800b7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b7c4:	bf09      	itett	eq
 800b7c6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b98c <__ieee754_rem_pio2f+0x238>
 800b7ca:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b990 <__ieee754_rem_pio2f+0x23c>
 800b7ce:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b994 <__ieee754_rem_pio2f+0x240>
 800b7d2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b7d6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b7da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7de:	ed80 7a00 	vstr	s14, [r0]
 800b7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7e6:	edc0 7a01 	vstr	s15, [r0, #4]
 800b7ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ee:	e7e4      	b.n	800b7ba <__ieee754_rem_pio2f+0x66>
 800b7f0:	4b69      	ldr	r3, [pc, #420]	@ (800b998 <__ieee754_rem_pio2f+0x244>)
 800b7f2:	429d      	cmp	r5, r3
 800b7f4:	d873      	bhi.n	800b8de <__ieee754_rem_pio2f+0x18a>
 800b7f6:	f000 f8dd 	bl	800b9b4 <fabsf>
 800b7fa:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b99c <__ieee754_rem_pio2f+0x248>
 800b7fe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b802:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b80a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b80e:	ee17 0a90 	vmov	r0, s15
 800b812:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b984 <__ieee754_rem_pio2f+0x230>
 800b816:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b81a:	281f      	cmp	r0, #31
 800b81c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b990 <__ieee754_rem_pio2f+0x23c>
 800b820:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b824:	eeb1 6a47 	vneg.f32	s12, s14
 800b828:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b82c:	ee16 1a90 	vmov	r1, s13
 800b830:	dc09      	bgt.n	800b846 <__ieee754_rem_pio2f+0xf2>
 800b832:	4a5b      	ldr	r2, [pc, #364]	@ (800b9a0 <__ieee754_rem_pio2f+0x24c>)
 800b834:	1e47      	subs	r7, r0, #1
 800b836:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b83a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b83e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b842:	4293      	cmp	r3, r2
 800b844:	d107      	bne.n	800b856 <__ieee754_rem_pio2f+0x102>
 800b846:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b84a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b84e:	2a08      	cmp	r2, #8
 800b850:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b854:	dc14      	bgt.n	800b880 <__ieee754_rem_pio2f+0x12c>
 800b856:	6021      	str	r1, [r4, #0]
 800b858:	ed94 7a00 	vldr	s14, [r4]
 800b85c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b860:	2e00      	cmp	r6, #0
 800b862:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b866:	ed84 0a01 	vstr	s0, [r4, #4]
 800b86a:	daa6      	bge.n	800b7ba <__ieee754_rem_pio2f+0x66>
 800b86c:	eeb1 7a47 	vneg.f32	s14, s14
 800b870:	eeb1 0a40 	vneg.f32	s0, s0
 800b874:	ed84 7a00 	vstr	s14, [r4]
 800b878:	ed84 0a01 	vstr	s0, [r4, #4]
 800b87c:	4240      	negs	r0, r0
 800b87e:	e79c      	b.n	800b7ba <__ieee754_rem_pio2f+0x66>
 800b880:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b98c <__ieee754_rem_pio2f+0x238>
 800b884:	eef0 6a40 	vmov.f32	s13, s0
 800b888:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b88c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b890:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b894:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b994 <__ieee754_rem_pio2f+0x240>
 800b898:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b89c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b8a0:	ee15 2a90 	vmov	r2, s11
 800b8a4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b8a8:	1a5b      	subs	r3, r3, r1
 800b8aa:	2b19      	cmp	r3, #25
 800b8ac:	dc04      	bgt.n	800b8b8 <__ieee754_rem_pio2f+0x164>
 800b8ae:	edc4 5a00 	vstr	s11, [r4]
 800b8b2:	eeb0 0a66 	vmov.f32	s0, s13
 800b8b6:	e7cf      	b.n	800b858 <__ieee754_rem_pio2f+0x104>
 800b8b8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b9a4 <__ieee754_rem_pio2f+0x250>
 800b8bc:	eeb0 0a66 	vmov.f32	s0, s13
 800b8c0:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b8c4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b8c8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b9a8 <__ieee754_rem_pio2f+0x254>
 800b8cc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b8d0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b8d4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b8d8:	ed84 7a00 	vstr	s14, [r4]
 800b8dc:	e7bc      	b.n	800b858 <__ieee754_rem_pio2f+0x104>
 800b8de:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b8e2:	d306      	bcc.n	800b8f2 <__ieee754_rem_pio2f+0x19e>
 800b8e4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b8e8:	edc0 7a01 	vstr	s15, [r0, #4]
 800b8ec:	edc0 7a00 	vstr	s15, [r0]
 800b8f0:	e73e      	b.n	800b770 <__ieee754_rem_pio2f+0x1c>
 800b8f2:	15ea      	asrs	r2, r5, #23
 800b8f4:	3a86      	subs	r2, #134	@ 0x86
 800b8f6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b8fa:	ee07 3a90 	vmov	s15, r3
 800b8fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b902:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b9ac <__ieee754_rem_pio2f+0x258>
 800b906:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b90a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b90e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b912:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b916:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b91a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b91e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b922:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b926:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b92a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b932:	edcd 7a05 	vstr	s15, [sp, #20]
 800b936:	d11e      	bne.n	800b976 <__ieee754_rem_pio2f+0x222>
 800b938:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b940:	bf0c      	ite	eq
 800b942:	2301      	moveq	r3, #1
 800b944:	2302      	movne	r3, #2
 800b946:	491a      	ldr	r1, [pc, #104]	@ (800b9b0 <__ieee754_rem_pio2f+0x25c>)
 800b948:	9101      	str	r1, [sp, #4]
 800b94a:	2102      	movs	r1, #2
 800b94c:	9100      	str	r1, [sp, #0]
 800b94e:	a803      	add	r0, sp, #12
 800b950:	4621      	mov	r1, r4
 800b952:	f000 f89d 	bl	800ba90 <__kernel_rem_pio2f>
 800b956:	2e00      	cmp	r6, #0
 800b958:	f6bf af2f 	bge.w	800b7ba <__ieee754_rem_pio2f+0x66>
 800b95c:	edd4 7a00 	vldr	s15, [r4]
 800b960:	eef1 7a67 	vneg.f32	s15, s15
 800b964:	edc4 7a00 	vstr	s15, [r4]
 800b968:	edd4 7a01 	vldr	s15, [r4, #4]
 800b96c:	eef1 7a67 	vneg.f32	s15, s15
 800b970:	edc4 7a01 	vstr	s15, [r4, #4]
 800b974:	e782      	b.n	800b87c <__ieee754_rem_pio2f+0x128>
 800b976:	2303      	movs	r3, #3
 800b978:	e7e5      	b.n	800b946 <__ieee754_rem_pio2f+0x1f2>
 800b97a:	bf00      	nop
 800b97c:	3f490fd8 	.word	0x3f490fd8
 800b980:	4016cbe3 	.word	0x4016cbe3
 800b984:	3fc90f80 	.word	0x3fc90f80
 800b988:	3fc90fd0 	.word	0x3fc90fd0
 800b98c:	37354400 	.word	0x37354400
 800b990:	37354443 	.word	0x37354443
 800b994:	2e85a308 	.word	0x2e85a308
 800b998:	43490f80 	.word	0x43490f80
 800b99c:	3f22f984 	.word	0x3f22f984
 800b9a0:	0800c040 	.word	0x0800c040
 800b9a4:	2e85a300 	.word	0x2e85a300
 800b9a8:	248d3132 	.word	0x248d3132
 800b9ac:	43800000 	.word	0x43800000
 800b9b0:	0800c0c0 	.word	0x0800c0c0

0800b9b4 <fabsf>:
 800b9b4:	ee10 3a10 	vmov	r3, s0
 800b9b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9bc:	ee00 3a10 	vmov	s0, r3
 800b9c0:	4770      	bx	lr
	...

0800b9c4 <scalbnf>:
 800b9c4:	ee10 3a10 	vmov	r3, s0
 800b9c8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b9cc:	d02b      	beq.n	800ba26 <scalbnf+0x62>
 800b9ce:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b9d2:	d302      	bcc.n	800b9da <scalbnf+0x16>
 800b9d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b9d8:	4770      	bx	lr
 800b9da:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b9de:	d123      	bne.n	800ba28 <scalbnf+0x64>
 800b9e0:	4b24      	ldr	r3, [pc, #144]	@ (800ba74 <scalbnf+0xb0>)
 800b9e2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800ba78 <scalbnf+0xb4>
 800b9e6:	4298      	cmp	r0, r3
 800b9e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b9ec:	db17      	blt.n	800ba1e <scalbnf+0x5a>
 800b9ee:	ee10 3a10 	vmov	r3, s0
 800b9f2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b9f6:	3a19      	subs	r2, #25
 800b9f8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b9fc:	4288      	cmp	r0, r1
 800b9fe:	dd15      	ble.n	800ba2c <scalbnf+0x68>
 800ba00:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800ba7c <scalbnf+0xb8>
 800ba04:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800ba80 <scalbnf+0xbc>
 800ba08:	ee10 3a10 	vmov	r3, s0
 800ba0c:	eeb0 7a67 	vmov.f32	s14, s15
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	bfb8      	it	lt
 800ba14:	eef0 7a66 	vmovlt.f32	s15, s13
 800ba18:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ba1c:	4770      	bx	lr
 800ba1e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ba84 <scalbnf+0xc0>
 800ba22:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ba26:	4770      	bx	lr
 800ba28:	0dd2      	lsrs	r2, r2, #23
 800ba2a:	e7e5      	b.n	800b9f8 <scalbnf+0x34>
 800ba2c:	4410      	add	r0, r2
 800ba2e:	28fe      	cmp	r0, #254	@ 0xfe
 800ba30:	dce6      	bgt.n	800ba00 <scalbnf+0x3c>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	dd06      	ble.n	800ba44 <scalbnf+0x80>
 800ba36:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ba3a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ba3e:	ee00 3a10 	vmov	s0, r3
 800ba42:	4770      	bx	lr
 800ba44:	f110 0f16 	cmn.w	r0, #22
 800ba48:	da09      	bge.n	800ba5e <scalbnf+0x9a>
 800ba4a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800ba84 <scalbnf+0xc0>
 800ba4e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800ba88 <scalbnf+0xc4>
 800ba52:	ee10 3a10 	vmov	r3, s0
 800ba56:	eeb0 7a67 	vmov.f32	s14, s15
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	e7d9      	b.n	800ba12 <scalbnf+0x4e>
 800ba5e:	3019      	adds	r0, #25
 800ba60:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ba64:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ba68:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800ba8c <scalbnf+0xc8>
 800ba6c:	ee07 3a90 	vmov	s15, r3
 800ba70:	e7d7      	b.n	800ba22 <scalbnf+0x5e>
 800ba72:	bf00      	nop
 800ba74:	ffff3cb0 	.word	0xffff3cb0
 800ba78:	4c000000 	.word	0x4c000000
 800ba7c:	7149f2ca 	.word	0x7149f2ca
 800ba80:	f149f2ca 	.word	0xf149f2ca
 800ba84:	0da24260 	.word	0x0da24260
 800ba88:	8da24260 	.word	0x8da24260
 800ba8c:	33000000 	.word	0x33000000

0800ba90 <__kernel_rem_pio2f>:
 800ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba94:	ed2d 8b04 	vpush	{d8-d9}
 800ba98:	b0d9      	sub	sp, #356	@ 0x164
 800ba9a:	4690      	mov	r8, r2
 800ba9c:	9001      	str	r0, [sp, #4]
 800ba9e:	4ab6      	ldr	r2, [pc, #728]	@ (800bd78 <__kernel_rem_pio2f+0x2e8>)
 800baa0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800baa2:	f118 0f04 	cmn.w	r8, #4
 800baa6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800baaa:	460f      	mov	r7, r1
 800baac:	f103 3bff 	add.w	fp, r3, #4294967295
 800bab0:	db26      	blt.n	800bb00 <__kernel_rem_pio2f+0x70>
 800bab2:	f1b8 0203 	subs.w	r2, r8, #3
 800bab6:	bf48      	it	mi
 800bab8:	f108 0204 	addmi.w	r2, r8, #4
 800babc:	10d2      	asrs	r2, r2, #3
 800babe:	1c55      	adds	r5, r2, #1
 800bac0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bac2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800bd88 <__kernel_rem_pio2f+0x2f8>
 800bac6:	00e8      	lsls	r0, r5, #3
 800bac8:	eba2 060b 	sub.w	r6, r2, fp
 800bacc:	9002      	str	r0, [sp, #8]
 800bace:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800bad2:	eb0a 0c0b 	add.w	ip, sl, fp
 800bad6:	ac1c      	add	r4, sp, #112	@ 0x70
 800bad8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800badc:	2000      	movs	r0, #0
 800bade:	4560      	cmp	r0, ip
 800bae0:	dd10      	ble.n	800bb04 <__kernel_rem_pio2f+0x74>
 800bae2:	a91c      	add	r1, sp, #112	@ 0x70
 800bae4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800bae8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800baec:	2600      	movs	r6, #0
 800baee:	4556      	cmp	r6, sl
 800baf0:	dc24      	bgt.n	800bb3c <__kernel_rem_pio2f+0xac>
 800baf2:	f8dd e004 	ldr.w	lr, [sp, #4]
 800baf6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800bd88 <__kernel_rem_pio2f+0x2f8>
 800bafa:	4684      	mov	ip, r0
 800bafc:	2400      	movs	r4, #0
 800bafe:	e016      	b.n	800bb2e <__kernel_rem_pio2f+0x9e>
 800bb00:	2200      	movs	r2, #0
 800bb02:	e7dc      	b.n	800babe <__kernel_rem_pio2f+0x2e>
 800bb04:	42c6      	cmn	r6, r0
 800bb06:	bf5d      	ittte	pl
 800bb08:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800bb0c:	ee07 1a90 	vmovpl	s15, r1
 800bb10:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bb14:	eef0 7a47 	vmovmi.f32	s15, s14
 800bb18:	ece4 7a01 	vstmia	r4!, {s15}
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	e7de      	b.n	800bade <__kernel_rem_pio2f+0x4e>
 800bb20:	ecfe 6a01 	vldmia	lr!, {s13}
 800bb24:	ed3c 7a01 	vldmdb	ip!, {s14}
 800bb28:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bb2c:	3401      	adds	r4, #1
 800bb2e:	455c      	cmp	r4, fp
 800bb30:	ddf6      	ble.n	800bb20 <__kernel_rem_pio2f+0x90>
 800bb32:	ece9 7a01 	vstmia	r9!, {s15}
 800bb36:	3601      	adds	r6, #1
 800bb38:	3004      	adds	r0, #4
 800bb3a:	e7d8      	b.n	800baee <__kernel_rem_pio2f+0x5e>
 800bb3c:	a908      	add	r1, sp, #32
 800bb3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb42:	9104      	str	r1, [sp, #16]
 800bb44:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bb46:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800bd84 <__kernel_rem_pio2f+0x2f4>
 800bb4a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800bd80 <__kernel_rem_pio2f+0x2f0>
 800bb4e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800bb52:	9203      	str	r2, [sp, #12]
 800bb54:	4654      	mov	r4, sl
 800bb56:	00a2      	lsls	r2, r4, #2
 800bb58:	9205      	str	r2, [sp, #20]
 800bb5a:	aa58      	add	r2, sp, #352	@ 0x160
 800bb5c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800bb60:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800bb64:	a944      	add	r1, sp, #272	@ 0x110
 800bb66:	aa08      	add	r2, sp, #32
 800bb68:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800bb6c:	4694      	mov	ip, r2
 800bb6e:	4626      	mov	r6, r4
 800bb70:	2e00      	cmp	r6, #0
 800bb72:	dc4c      	bgt.n	800bc0e <__kernel_rem_pio2f+0x17e>
 800bb74:	4628      	mov	r0, r5
 800bb76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bb7a:	f7ff ff23 	bl	800b9c4 <scalbnf>
 800bb7e:	eeb0 8a40 	vmov.f32	s16, s0
 800bb82:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800bb86:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bb8a:	f000 f9e9 	bl	800bf60 <floorf>
 800bb8e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800bb92:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bb96:	2d00      	cmp	r5, #0
 800bb98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb9c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bba0:	ee17 9a90 	vmov	r9, s15
 800bba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bba8:	ee38 8a67 	vsub.f32	s16, s16, s15
 800bbac:	dd41      	ble.n	800bc32 <__kernel_rem_pio2f+0x1a2>
 800bbae:	f104 3cff 	add.w	ip, r4, #4294967295
 800bbb2:	a908      	add	r1, sp, #32
 800bbb4:	f1c5 0e08 	rsb	lr, r5, #8
 800bbb8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800bbbc:	fa46 f00e 	asr.w	r0, r6, lr
 800bbc0:	4481      	add	r9, r0
 800bbc2:	fa00 f00e 	lsl.w	r0, r0, lr
 800bbc6:	1a36      	subs	r6, r6, r0
 800bbc8:	f1c5 0007 	rsb	r0, r5, #7
 800bbcc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800bbd0:	4106      	asrs	r6, r0
 800bbd2:	2e00      	cmp	r6, #0
 800bbd4:	dd3c      	ble.n	800bc50 <__kernel_rem_pio2f+0x1c0>
 800bbd6:	f04f 0e00 	mov.w	lr, #0
 800bbda:	f109 0901 	add.w	r9, r9, #1
 800bbde:	4670      	mov	r0, lr
 800bbe0:	4574      	cmp	r4, lr
 800bbe2:	dc68      	bgt.n	800bcb6 <__kernel_rem_pio2f+0x226>
 800bbe4:	2d00      	cmp	r5, #0
 800bbe6:	dd03      	ble.n	800bbf0 <__kernel_rem_pio2f+0x160>
 800bbe8:	2d01      	cmp	r5, #1
 800bbea:	d074      	beq.n	800bcd6 <__kernel_rem_pio2f+0x246>
 800bbec:	2d02      	cmp	r5, #2
 800bbee:	d07d      	beq.n	800bcec <__kernel_rem_pio2f+0x25c>
 800bbf0:	2e02      	cmp	r6, #2
 800bbf2:	d12d      	bne.n	800bc50 <__kernel_rem_pio2f+0x1c0>
 800bbf4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bbf8:	ee30 8a48 	vsub.f32	s16, s0, s16
 800bbfc:	b340      	cbz	r0, 800bc50 <__kernel_rem_pio2f+0x1c0>
 800bbfe:	4628      	mov	r0, r5
 800bc00:	9306      	str	r3, [sp, #24]
 800bc02:	f7ff fedf 	bl	800b9c4 <scalbnf>
 800bc06:	9b06      	ldr	r3, [sp, #24]
 800bc08:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bc0c:	e020      	b.n	800bc50 <__kernel_rem_pio2f+0x1c0>
 800bc0e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800bc12:	3e01      	subs	r6, #1
 800bc14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc1c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800bc20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bc24:	ecac 0a01 	vstmia	ip!, {s0}
 800bc28:	ed30 0a01 	vldmdb	r0!, {s0}
 800bc2c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bc30:	e79e      	b.n	800bb70 <__kernel_rem_pio2f+0xe0>
 800bc32:	d105      	bne.n	800bc40 <__kernel_rem_pio2f+0x1b0>
 800bc34:	1e60      	subs	r0, r4, #1
 800bc36:	a908      	add	r1, sp, #32
 800bc38:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800bc3c:	11f6      	asrs	r6, r6, #7
 800bc3e:	e7c8      	b.n	800bbd2 <__kernel_rem_pio2f+0x142>
 800bc40:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bc44:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc4c:	da31      	bge.n	800bcb2 <__kernel_rem_pio2f+0x222>
 800bc4e:	2600      	movs	r6, #0
 800bc50:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc58:	f040 8098 	bne.w	800bd8c <__kernel_rem_pio2f+0x2fc>
 800bc5c:	1e60      	subs	r0, r4, #1
 800bc5e:	2200      	movs	r2, #0
 800bc60:	4550      	cmp	r0, sl
 800bc62:	da4b      	bge.n	800bcfc <__kernel_rem_pio2f+0x26c>
 800bc64:	2a00      	cmp	r2, #0
 800bc66:	d065      	beq.n	800bd34 <__kernel_rem_pio2f+0x2a4>
 800bc68:	3c01      	subs	r4, #1
 800bc6a:	ab08      	add	r3, sp, #32
 800bc6c:	3d08      	subs	r5, #8
 800bc6e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d0f8      	beq.n	800bc68 <__kernel_rem_pio2f+0x1d8>
 800bc76:	4628      	mov	r0, r5
 800bc78:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bc7c:	f7ff fea2 	bl	800b9c4 <scalbnf>
 800bc80:	1c63      	adds	r3, r4, #1
 800bc82:	aa44      	add	r2, sp, #272	@ 0x110
 800bc84:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800bd84 <__kernel_rem_pio2f+0x2f4>
 800bc88:	0099      	lsls	r1, r3, #2
 800bc8a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bc8e:	4623      	mov	r3, r4
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f280 80a9 	bge.w	800bde8 <__kernel_rem_pio2f+0x358>
 800bc96:	4623      	mov	r3, r4
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	f2c0 80c7 	blt.w	800be2c <__kernel_rem_pio2f+0x39c>
 800bc9e:	aa44      	add	r2, sp, #272	@ 0x110
 800bca0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800bca4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800bd7c <__kernel_rem_pio2f+0x2ec>
 800bca8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800bd88 <__kernel_rem_pio2f+0x2f8>
 800bcac:	2000      	movs	r0, #0
 800bcae:	1ae2      	subs	r2, r4, r3
 800bcb0:	e0b1      	b.n	800be16 <__kernel_rem_pio2f+0x386>
 800bcb2:	2602      	movs	r6, #2
 800bcb4:	e78f      	b.n	800bbd6 <__kernel_rem_pio2f+0x146>
 800bcb6:	f852 1b04 	ldr.w	r1, [r2], #4
 800bcba:	b948      	cbnz	r0, 800bcd0 <__kernel_rem_pio2f+0x240>
 800bcbc:	b121      	cbz	r1, 800bcc8 <__kernel_rem_pio2f+0x238>
 800bcbe:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800bcc2:	f842 1c04 	str.w	r1, [r2, #-4]
 800bcc6:	2101      	movs	r1, #1
 800bcc8:	f10e 0e01 	add.w	lr, lr, #1
 800bccc:	4608      	mov	r0, r1
 800bcce:	e787      	b.n	800bbe0 <__kernel_rem_pio2f+0x150>
 800bcd0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800bcd4:	e7f5      	b.n	800bcc2 <__kernel_rem_pio2f+0x232>
 800bcd6:	f104 3cff 	add.w	ip, r4, #4294967295
 800bcda:	aa08      	add	r2, sp, #32
 800bcdc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bce0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bce4:	a908      	add	r1, sp, #32
 800bce6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800bcea:	e781      	b.n	800bbf0 <__kernel_rem_pio2f+0x160>
 800bcec:	f104 3cff 	add.w	ip, r4, #4294967295
 800bcf0:	aa08      	add	r2, sp, #32
 800bcf2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bcf6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800bcfa:	e7f3      	b.n	800bce4 <__kernel_rem_pio2f+0x254>
 800bcfc:	a908      	add	r1, sp, #32
 800bcfe:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800bd02:	3801      	subs	r0, #1
 800bd04:	430a      	orrs	r2, r1
 800bd06:	e7ab      	b.n	800bc60 <__kernel_rem_pio2f+0x1d0>
 800bd08:	3201      	adds	r2, #1
 800bd0a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800bd0e:	2e00      	cmp	r6, #0
 800bd10:	d0fa      	beq.n	800bd08 <__kernel_rem_pio2f+0x278>
 800bd12:	9905      	ldr	r1, [sp, #20]
 800bd14:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800bd18:	eb0d 0001 	add.w	r0, sp, r1
 800bd1c:	18e6      	adds	r6, r4, r3
 800bd1e:	a91c      	add	r1, sp, #112	@ 0x70
 800bd20:	f104 0c01 	add.w	ip, r4, #1
 800bd24:	384c      	subs	r0, #76	@ 0x4c
 800bd26:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800bd2a:	4422      	add	r2, r4
 800bd2c:	4562      	cmp	r2, ip
 800bd2e:	da04      	bge.n	800bd3a <__kernel_rem_pio2f+0x2aa>
 800bd30:	4614      	mov	r4, r2
 800bd32:	e710      	b.n	800bb56 <__kernel_rem_pio2f+0xc6>
 800bd34:	9804      	ldr	r0, [sp, #16]
 800bd36:	2201      	movs	r2, #1
 800bd38:	e7e7      	b.n	800bd0a <__kernel_rem_pio2f+0x27a>
 800bd3a:	9903      	ldr	r1, [sp, #12]
 800bd3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bd40:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800bd44:	9105      	str	r1, [sp, #20]
 800bd46:	ee07 1a90 	vmov	s15, r1
 800bd4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd4e:	2400      	movs	r4, #0
 800bd50:	ece6 7a01 	vstmia	r6!, {s15}
 800bd54:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800bd88 <__kernel_rem_pio2f+0x2f8>
 800bd58:	46b1      	mov	r9, r6
 800bd5a:	455c      	cmp	r4, fp
 800bd5c:	dd04      	ble.n	800bd68 <__kernel_rem_pio2f+0x2d8>
 800bd5e:	ece0 7a01 	vstmia	r0!, {s15}
 800bd62:	f10c 0c01 	add.w	ip, ip, #1
 800bd66:	e7e1      	b.n	800bd2c <__kernel_rem_pio2f+0x29c>
 800bd68:	ecfe 6a01 	vldmia	lr!, {s13}
 800bd6c:	ed39 7a01 	vldmdb	r9!, {s14}
 800bd70:	3401      	adds	r4, #1
 800bd72:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bd76:	e7f0      	b.n	800bd5a <__kernel_rem_pio2f+0x2ca>
 800bd78:	0800c404 	.word	0x0800c404
 800bd7c:	0800c3d8 	.word	0x0800c3d8
 800bd80:	43800000 	.word	0x43800000
 800bd84:	3b800000 	.word	0x3b800000
 800bd88:	00000000 	.word	0x00000000
 800bd8c:	9b02      	ldr	r3, [sp, #8]
 800bd8e:	eeb0 0a48 	vmov.f32	s0, s16
 800bd92:	eba3 0008 	sub.w	r0, r3, r8
 800bd96:	f7ff fe15 	bl	800b9c4 <scalbnf>
 800bd9a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800bd80 <__kernel_rem_pio2f+0x2f0>
 800bd9e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda6:	db19      	blt.n	800bddc <__kernel_rem_pio2f+0x34c>
 800bda8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800bd84 <__kernel_rem_pio2f+0x2f4>
 800bdac:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bdb0:	aa08      	add	r2, sp, #32
 800bdb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdb6:	3508      	adds	r5, #8
 800bdb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdbc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bdc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdc4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bdc8:	ee10 3a10 	vmov	r3, s0
 800bdcc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bdd0:	ee17 3a90 	vmov	r3, s15
 800bdd4:	3401      	adds	r4, #1
 800bdd6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bdda:	e74c      	b.n	800bc76 <__kernel_rem_pio2f+0x1e6>
 800bddc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bde0:	aa08      	add	r2, sp, #32
 800bde2:	ee10 3a10 	vmov	r3, s0
 800bde6:	e7f6      	b.n	800bdd6 <__kernel_rem_pio2f+0x346>
 800bde8:	a808      	add	r0, sp, #32
 800bdea:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800bdee:	9001      	str	r0, [sp, #4]
 800bdf0:	ee07 0a90 	vmov	s15, r0
 800bdf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bdfe:	ee20 0a07 	vmul.f32	s0, s0, s14
 800be02:	ed62 7a01 	vstmdb	r2!, {s15}
 800be06:	e743      	b.n	800bc90 <__kernel_rem_pio2f+0x200>
 800be08:	ecfc 6a01 	vldmia	ip!, {s13}
 800be0c:	ecb5 7a01 	vldmia	r5!, {s14}
 800be10:	eee6 7a87 	vfma.f32	s15, s13, s14
 800be14:	3001      	adds	r0, #1
 800be16:	4550      	cmp	r0, sl
 800be18:	dc01      	bgt.n	800be1e <__kernel_rem_pio2f+0x38e>
 800be1a:	4290      	cmp	r0, r2
 800be1c:	ddf4      	ble.n	800be08 <__kernel_rem_pio2f+0x378>
 800be1e:	a858      	add	r0, sp, #352	@ 0x160
 800be20:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800be24:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800be28:	3b01      	subs	r3, #1
 800be2a:	e735      	b.n	800bc98 <__kernel_rem_pio2f+0x208>
 800be2c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800be2e:	2b02      	cmp	r3, #2
 800be30:	dc09      	bgt.n	800be46 <__kernel_rem_pio2f+0x3b6>
 800be32:	2b00      	cmp	r3, #0
 800be34:	dc27      	bgt.n	800be86 <__kernel_rem_pio2f+0x3f6>
 800be36:	d040      	beq.n	800beba <__kernel_rem_pio2f+0x42a>
 800be38:	f009 0007 	and.w	r0, r9, #7
 800be3c:	b059      	add	sp, #356	@ 0x164
 800be3e:	ecbd 8b04 	vpop	{d8-d9}
 800be42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be46:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800be48:	2b03      	cmp	r3, #3
 800be4a:	d1f5      	bne.n	800be38 <__kernel_rem_pio2f+0x3a8>
 800be4c:	aa30      	add	r2, sp, #192	@ 0xc0
 800be4e:	1f0b      	subs	r3, r1, #4
 800be50:	4413      	add	r3, r2
 800be52:	461a      	mov	r2, r3
 800be54:	4620      	mov	r0, r4
 800be56:	2800      	cmp	r0, #0
 800be58:	dc50      	bgt.n	800befc <__kernel_rem_pio2f+0x46c>
 800be5a:	4622      	mov	r2, r4
 800be5c:	2a01      	cmp	r2, #1
 800be5e:	dc5d      	bgt.n	800bf1c <__kernel_rem_pio2f+0x48c>
 800be60:	ab30      	add	r3, sp, #192	@ 0xc0
 800be62:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800bd88 <__kernel_rem_pio2f+0x2f8>
 800be66:	440b      	add	r3, r1
 800be68:	2c01      	cmp	r4, #1
 800be6a:	dc67      	bgt.n	800bf3c <__kernel_rem_pio2f+0x4ac>
 800be6c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800be70:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800be74:	2e00      	cmp	r6, #0
 800be76:	d167      	bne.n	800bf48 <__kernel_rem_pio2f+0x4b8>
 800be78:	edc7 6a00 	vstr	s13, [r7]
 800be7c:	ed87 7a01 	vstr	s14, [r7, #4]
 800be80:	edc7 7a02 	vstr	s15, [r7, #8]
 800be84:	e7d8      	b.n	800be38 <__kernel_rem_pio2f+0x3a8>
 800be86:	ab30      	add	r3, sp, #192	@ 0xc0
 800be88:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800bd88 <__kernel_rem_pio2f+0x2f8>
 800be8c:	440b      	add	r3, r1
 800be8e:	4622      	mov	r2, r4
 800be90:	2a00      	cmp	r2, #0
 800be92:	da24      	bge.n	800bede <__kernel_rem_pio2f+0x44e>
 800be94:	b34e      	cbz	r6, 800beea <__kernel_rem_pio2f+0x45a>
 800be96:	eef1 7a47 	vneg.f32	s15, s14
 800be9a:	edc7 7a00 	vstr	s15, [r7]
 800be9e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800bea2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bea6:	aa31      	add	r2, sp, #196	@ 0xc4
 800bea8:	2301      	movs	r3, #1
 800beaa:	429c      	cmp	r4, r3
 800beac:	da20      	bge.n	800bef0 <__kernel_rem_pio2f+0x460>
 800beae:	b10e      	cbz	r6, 800beb4 <__kernel_rem_pio2f+0x424>
 800beb0:	eef1 7a67 	vneg.f32	s15, s15
 800beb4:	edc7 7a01 	vstr	s15, [r7, #4]
 800beb8:	e7be      	b.n	800be38 <__kernel_rem_pio2f+0x3a8>
 800beba:	ab30      	add	r3, sp, #192	@ 0xc0
 800bebc:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800bd88 <__kernel_rem_pio2f+0x2f8>
 800bec0:	440b      	add	r3, r1
 800bec2:	2c00      	cmp	r4, #0
 800bec4:	da05      	bge.n	800bed2 <__kernel_rem_pio2f+0x442>
 800bec6:	b10e      	cbz	r6, 800becc <__kernel_rem_pio2f+0x43c>
 800bec8:	eef1 7a67 	vneg.f32	s15, s15
 800becc:	edc7 7a00 	vstr	s15, [r7]
 800bed0:	e7b2      	b.n	800be38 <__kernel_rem_pio2f+0x3a8>
 800bed2:	ed33 7a01 	vldmdb	r3!, {s14}
 800bed6:	3c01      	subs	r4, #1
 800bed8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bedc:	e7f1      	b.n	800bec2 <__kernel_rem_pio2f+0x432>
 800bede:	ed73 7a01 	vldmdb	r3!, {s15}
 800bee2:	3a01      	subs	r2, #1
 800bee4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bee8:	e7d2      	b.n	800be90 <__kernel_rem_pio2f+0x400>
 800beea:	eef0 7a47 	vmov.f32	s15, s14
 800beee:	e7d4      	b.n	800be9a <__kernel_rem_pio2f+0x40a>
 800bef0:	ecb2 7a01 	vldmia	r2!, {s14}
 800bef4:	3301      	adds	r3, #1
 800bef6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800befa:	e7d6      	b.n	800beaa <__kernel_rem_pio2f+0x41a>
 800befc:	ed72 7a01 	vldmdb	r2!, {s15}
 800bf00:	edd2 6a01 	vldr	s13, [r2, #4]
 800bf04:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bf08:	3801      	subs	r0, #1
 800bf0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf0e:	ed82 7a00 	vstr	s14, [r2]
 800bf12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf16:	edc2 7a01 	vstr	s15, [r2, #4]
 800bf1a:	e79c      	b.n	800be56 <__kernel_rem_pio2f+0x3c6>
 800bf1c:	ed73 7a01 	vldmdb	r3!, {s15}
 800bf20:	edd3 6a01 	vldr	s13, [r3, #4]
 800bf24:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bf28:	3a01      	subs	r2, #1
 800bf2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf2e:	ed83 7a00 	vstr	s14, [r3]
 800bf32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf36:	edc3 7a01 	vstr	s15, [r3, #4]
 800bf3a:	e78f      	b.n	800be5c <__kernel_rem_pio2f+0x3cc>
 800bf3c:	ed33 7a01 	vldmdb	r3!, {s14}
 800bf40:	3c01      	subs	r4, #1
 800bf42:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf46:	e78f      	b.n	800be68 <__kernel_rem_pio2f+0x3d8>
 800bf48:	eef1 6a66 	vneg.f32	s13, s13
 800bf4c:	eeb1 7a47 	vneg.f32	s14, s14
 800bf50:	edc7 6a00 	vstr	s13, [r7]
 800bf54:	ed87 7a01 	vstr	s14, [r7, #4]
 800bf58:	eef1 7a67 	vneg.f32	s15, s15
 800bf5c:	e790      	b.n	800be80 <__kernel_rem_pio2f+0x3f0>
 800bf5e:	bf00      	nop

0800bf60 <floorf>:
 800bf60:	ee10 3a10 	vmov	r3, s0
 800bf64:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bf68:	3a7f      	subs	r2, #127	@ 0x7f
 800bf6a:	2a16      	cmp	r2, #22
 800bf6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bf70:	dc2b      	bgt.n	800bfca <floorf+0x6a>
 800bf72:	2a00      	cmp	r2, #0
 800bf74:	da12      	bge.n	800bf9c <floorf+0x3c>
 800bf76:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bfdc <floorf+0x7c>
 800bf7a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bf7e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bf82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf86:	dd06      	ble.n	800bf96 <floorf+0x36>
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	da24      	bge.n	800bfd6 <floorf+0x76>
 800bf8c:	2900      	cmp	r1, #0
 800bf8e:	4b14      	ldr	r3, [pc, #80]	@ (800bfe0 <floorf+0x80>)
 800bf90:	bf08      	it	eq
 800bf92:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bf96:	ee00 3a10 	vmov	s0, r3
 800bf9a:	4770      	bx	lr
 800bf9c:	4911      	ldr	r1, [pc, #68]	@ (800bfe4 <floorf+0x84>)
 800bf9e:	4111      	asrs	r1, r2
 800bfa0:	420b      	tst	r3, r1
 800bfa2:	d0fa      	beq.n	800bf9a <floorf+0x3a>
 800bfa4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bfdc <floorf+0x7c>
 800bfa8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bfac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bfb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfb4:	ddef      	ble.n	800bf96 <floorf+0x36>
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	bfbe      	ittt	lt
 800bfba:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bfbe:	fa40 f202 	asrlt.w	r2, r0, r2
 800bfc2:	189b      	addlt	r3, r3, r2
 800bfc4:	ea23 0301 	bic.w	r3, r3, r1
 800bfc8:	e7e5      	b.n	800bf96 <floorf+0x36>
 800bfca:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bfce:	d3e4      	bcc.n	800bf9a <floorf+0x3a>
 800bfd0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bfd4:	4770      	bx	lr
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	e7dd      	b.n	800bf96 <floorf+0x36>
 800bfda:	bf00      	nop
 800bfdc:	7149f2ca 	.word	0x7149f2ca
 800bfe0:	bf800000 	.word	0xbf800000
 800bfe4:	007fffff 	.word	0x007fffff

0800bfe8 <_init>:
 800bfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfea:	bf00      	nop
 800bfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfee:	bc08      	pop	{r3}
 800bff0:	469e      	mov	lr, r3
 800bff2:	4770      	bx	lr

0800bff4 <_fini>:
 800bff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff6:	bf00      	nop
 800bff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bffa:	bc08      	pop	{r3}
 800bffc:	469e      	mov	lr, r3
 800bffe:	4770      	bx	lr
