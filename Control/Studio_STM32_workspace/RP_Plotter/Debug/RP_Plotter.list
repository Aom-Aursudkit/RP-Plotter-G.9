
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bad0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800bca8  0800bca8  0000cca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0b8  0800c0b8  0000e20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c0b8  0800c0b8  0000d0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0c0  0800c0c0  0000e20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0c0  0800c0c0  0000d0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c0c4  0800c0c4  0000d0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800c0c8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000103c  20000210  0800c2d4  0000e210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000124c  0800c2d4  0000e24c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174c2  00000000  00000000  0000e23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf5  00000000  00000000  000256fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  000282f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e7b  00000000  00000000  00029558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271fa  00000000  00000000  0002a3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fd6  00000000  00000000  000515cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffc03  00000000  00000000  000675a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001671a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005270  00000000  00000000  001671ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0016c45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000210 	.word	0x20000210
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bc90 	.word	0x0800bc90

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000214 	.word	0x20000214
 8000214:	0800bc90 	.word	0x0800bc90

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_frsub>:
 8000bb4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	e002      	b.n	8000bc0 <__addsf3>
 8000bba:	bf00      	nop

08000bbc <__aeabi_fsub>:
 8000bbc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bc0 <__addsf3>:
 8000bc0:	0042      	lsls	r2, r0, #1
 8000bc2:	bf1f      	itttt	ne
 8000bc4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc8:	ea92 0f03 	teqne	r2, r3
 8000bcc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bd0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd4:	d06a      	beq.n	8000cac <__addsf3+0xec>
 8000bd6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bda:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bde:	bfc1      	itttt	gt
 8000be0:	18d2      	addgt	r2, r2, r3
 8000be2:	4041      	eorgt	r1, r0
 8000be4:	4048      	eorgt	r0, r1
 8000be6:	4041      	eorgt	r1, r0
 8000be8:	bfb8      	it	lt
 8000bea:	425b      	neglt	r3, r3
 8000bec:	2b19      	cmp	r3, #25
 8000bee:	bf88      	it	hi
 8000bf0:	4770      	bxhi	lr
 8000bf2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bf6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4240      	negne	r0, r0
 8000c02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c06:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c0a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4249      	negne	r1, r1
 8000c12:	ea92 0f03 	teq	r2, r3
 8000c16:	d03f      	beq.n	8000c98 <__addsf3+0xd8>
 8000c18:	f1a2 0201 	sub.w	r2, r2, #1
 8000c1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c20:	eb10 000c 	adds.w	r0, r0, ip
 8000c24:	f1c3 0320 	rsb	r3, r3, #32
 8000c28:	fa01 f103 	lsl.w	r1, r1, r3
 8000c2c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c30:	d502      	bpl.n	8000c38 <__addsf3+0x78>
 8000c32:	4249      	negs	r1, r1
 8000c34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c38:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c3c:	d313      	bcc.n	8000c66 <__addsf3+0xa6>
 8000c3e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c42:	d306      	bcc.n	8000c52 <__addsf3+0x92>
 8000c44:	0840      	lsrs	r0, r0, #1
 8000c46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c4a:	f102 0201 	add.w	r2, r2, #1
 8000c4e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c50:	d251      	bcs.n	8000cf6 <__addsf3+0x136>
 8000c52:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c5a:	bf08      	it	eq
 8000c5c:	f020 0001 	biceq.w	r0, r0, #1
 8000c60:	ea40 0003 	orr.w	r0, r0, r3
 8000c64:	4770      	bx	lr
 8000c66:	0049      	lsls	r1, r1, #1
 8000c68:	eb40 0000 	adc.w	r0, r0, r0
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c74:	d2ed      	bcs.n	8000c52 <__addsf3+0x92>
 8000c76:	fab0 fc80 	clz	ip, r0
 8000c7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c86:	bfaa      	itet	ge
 8000c88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c8c:	4252      	neglt	r2, r2
 8000c8e:	4318      	orrge	r0, r3
 8000c90:	bfbc      	itt	lt
 8000c92:	40d0      	lsrlt	r0, r2
 8000c94:	4318      	orrlt	r0, r3
 8000c96:	4770      	bx	lr
 8000c98:	f092 0f00 	teq	r2, #0
 8000c9c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ca0:	bf06      	itte	eq
 8000ca2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ca6:	3201      	addeq	r2, #1
 8000ca8:	3b01      	subne	r3, #1
 8000caa:	e7b5      	b.n	8000c18 <__addsf3+0x58>
 8000cac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb4:	bf18      	it	ne
 8000cb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cba:	d021      	beq.n	8000d00 <__addsf3+0x140>
 8000cbc:	ea92 0f03 	teq	r2, r3
 8000cc0:	d004      	beq.n	8000ccc <__addsf3+0x10c>
 8000cc2:	f092 0f00 	teq	r2, #0
 8000cc6:	bf08      	it	eq
 8000cc8:	4608      	moveq	r0, r1
 8000cca:	4770      	bx	lr
 8000ccc:	ea90 0f01 	teq	r0, r1
 8000cd0:	bf1c      	itt	ne
 8000cd2:	2000      	movne	r0, #0
 8000cd4:	4770      	bxne	lr
 8000cd6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cda:	d104      	bne.n	8000ce6 <__addsf3+0x126>
 8000cdc:	0040      	lsls	r0, r0, #1
 8000cde:	bf28      	it	cs
 8000ce0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ce4:	4770      	bx	lr
 8000ce6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cea:	bf3c      	itt	cc
 8000cec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cf0:	4770      	bxcc	lr
 8000cf2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cf6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cfe:	4770      	bx	lr
 8000d00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d04:	bf16      	itet	ne
 8000d06:	4608      	movne	r0, r1
 8000d08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d0c:	4601      	movne	r1, r0
 8000d0e:	0242      	lsls	r2, r0, #9
 8000d10:	bf06      	itte	eq
 8000d12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d16:	ea90 0f01 	teqeq	r0, r1
 8000d1a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_ui2f>:
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e004      	b.n	8000d30 <__aeabi_i2f+0x8>
 8000d26:	bf00      	nop

08000d28 <__aeabi_i2f>:
 8000d28:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d2c:	bf48      	it	mi
 8000d2e:	4240      	negmi	r0, r0
 8000d30:	ea5f 0c00 	movs.w	ip, r0
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d3c:	4601      	mov	r1, r0
 8000d3e:	f04f 0000 	mov.w	r0, #0
 8000d42:	e01c      	b.n	8000d7e <__aeabi_l2f+0x2a>

08000d44 <__aeabi_ul2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e00a      	b.n	8000d68 <__aeabi_l2f+0x14>
 8000d52:	bf00      	nop

08000d54 <__aeabi_l2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d60:	d502      	bpl.n	8000d68 <__aeabi_l2f+0x14>
 8000d62:	4240      	negs	r0, r0
 8000d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d68:	ea5f 0c01 	movs.w	ip, r1
 8000d6c:	bf02      	ittt	eq
 8000d6e:	4684      	moveq	ip, r0
 8000d70:	4601      	moveq	r1, r0
 8000d72:	2000      	moveq	r0, #0
 8000d74:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d78:	bf08      	it	eq
 8000d7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d82:	fabc f28c 	clz	r2, ip
 8000d86:	3a08      	subs	r2, #8
 8000d88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d8c:	db10      	blt.n	8000db0 <__aeabi_l2f+0x5c>
 8000d8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d92:	4463      	add	r3, ip
 8000d94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d98:	f1c2 0220 	rsb	r2, r2, #32
 8000d9c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000da0:	fa20 f202 	lsr.w	r2, r0, r2
 8000da4:	eb43 0002 	adc.w	r0, r3, r2
 8000da8:	bf08      	it	eq
 8000daa:	f020 0001 	biceq.w	r0, r0, #1
 8000dae:	4770      	bx	lr
 8000db0:	f102 0220 	add.w	r2, r2, #32
 8000db4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db8:	f1c2 0220 	rsb	r2, r2, #32
 8000dbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc4:	eb43 0002 	adc.w	r0, r3, r2
 8000dc8:	bf08      	it	eq
 8000dca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_uldivmod>:
 8000dd0:	b953      	cbnz	r3, 8000de8 <__aeabi_uldivmod+0x18>
 8000dd2:	b94a      	cbnz	r2, 8000de8 <__aeabi_uldivmod+0x18>
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	bf08      	it	eq
 8000dd8:	2800      	cmpeq	r0, #0
 8000dda:	bf1c      	itt	ne
 8000ddc:	f04f 31ff 	movne.w	r1, #4294967295
 8000de0:	f04f 30ff 	movne.w	r0, #4294967295
 8000de4:	f000 b988 	b.w	80010f8 <__aeabi_idiv0>
 8000de8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000df0:	f000 f806 	bl	8000e00 <__udivmoddi4>
 8000df4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dfc:	b004      	add	sp, #16
 8000dfe:	4770      	bx	lr

08000e00 <__udivmoddi4>:
 8000e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e04:	9d08      	ldr	r5, [sp, #32]
 8000e06:	468e      	mov	lr, r1
 8000e08:	4604      	mov	r4, r0
 8000e0a:	4688      	mov	r8, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14a      	bne.n	8000ea6 <__udivmoddi4+0xa6>
 8000e10:	428a      	cmp	r2, r1
 8000e12:	4617      	mov	r7, r2
 8000e14:	d962      	bls.n	8000edc <__udivmoddi4+0xdc>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	b14e      	cbz	r6, 8000e30 <__udivmoddi4+0x30>
 8000e1c:	f1c6 0320 	rsb	r3, r6, #32
 8000e20:	fa01 f806 	lsl.w	r8, r1, r6
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	40b7      	lsls	r7, r6
 8000e2a:	ea43 0808 	orr.w	r8, r3, r8
 8000e2e:	40b4      	lsls	r4, r6
 8000e30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e34:	fa1f fc87 	uxth.w	ip, r7
 8000e38:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e3c:	0c23      	lsrs	r3, r4, #16
 8000e3e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e42:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e46:	fb01 f20c 	mul.w	r2, r1, ip
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x62>
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e54:	f080 80ea 	bcs.w	800102c <__udivmoddi4+0x22c>
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f240 80e7 	bls.w	800102c <__udivmoddi4+0x22c>
 8000e5e:	3902      	subs	r1, #2
 8000e60:	443b      	add	r3, r7
 8000e62:	1a9a      	subs	r2, r3, r2
 8000e64:	b2a3      	uxth	r3, r4
 8000e66:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e6a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e72:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e76:	459c      	cmp	ip, r3
 8000e78:	d909      	bls.n	8000e8e <__udivmoddi4+0x8e>
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e80:	f080 80d6 	bcs.w	8001030 <__udivmoddi4+0x230>
 8000e84:	459c      	cmp	ip, r3
 8000e86:	f240 80d3 	bls.w	8001030 <__udivmoddi4+0x230>
 8000e8a:	443b      	add	r3, r7
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e92:	eba3 030c 	sub.w	r3, r3, ip
 8000e96:	2100      	movs	r1, #0
 8000e98:	b11d      	cbz	r5, 8000ea2 <__udivmoddi4+0xa2>
 8000e9a:	40f3      	lsrs	r3, r6
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d905      	bls.n	8000eb6 <__udivmoddi4+0xb6>
 8000eaa:	b10d      	cbz	r5, 8000eb0 <__udivmoddi4+0xb0>
 8000eac:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4608      	mov	r0, r1
 8000eb4:	e7f5      	b.n	8000ea2 <__udivmoddi4+0xa2>
 8000eb6:	fab3 f183 	clz	r1, r3
 8000eba:	2900      	cmp	r1, #0
 8000ebc:	d146      	bne.n	8000f4c <__udivmoddi4+0x14c>
 8000ebe:	4573      	cmp	r3, lr
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xc8>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 8105 	bhi.w	80010d2 <__udivmoddi4+0x2d2>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	4690      	mov	r8, r2
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e5      	beq.n	8000ea2 <__udivmoddi4+0xa2>
 8000ed6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eda:	e7e2      	b.n	8000ea2 <__udivmoddi4+0xa2>
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	f000 8090 	beq.w	8001002 <__udivmoddi4+0x202>
 8000ee2:	fab2 f682 	clz	r6, r2
 8000ee6:	2e00      	cmp	r6, #0
 8000ee8:	f040 80a4 	bne.w	8001034 <__udivmoddi4+0x234>
 8000eec:	1a8a      	subs	r2, r1, r2
 8000eee:	0c03      	lsrs	r3, r0, #16
 8000ef0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef4:	b280      	uxth	r0, r0
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	2101      	movs	r1, #1
 8000efa:	fbb2 fcfe 	udiv	ip, r2, lr
 8000efe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f06:	fb04 f20c 	mul.w	r2, r4, ip
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x11e>
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f14:	d202      	bcs.n	8000f1c <__udivmoddi4+0x11c>
 8000f16:	429a      	cmp	r2, r3
 8000f18:	f200 80e0 	bhi.w	80010dc <__udivmoddi4+0x2dc>
 8000f1c:	46c4      	mov	ip, r8
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f24:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f28:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f2c:	fb02 f404 	mul.w	r4, r2, r4
 8000f30:	429c      	cmp	r4, r3
 8000f32:	d907      	bls.n	8000f44 <__udivmoddi4+0x144>
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f3a:	d202      	bcs.n	8000f42 <__udivmoddi4+0x142>
 8000f3c:	429c      	cmp	r4, r3
 8000f3e:	f200 80ca 	bhi.w	80010d6 <__udivmoddi4+0x2d6>
 8000f42:	4602      	mov	r2, r0
 8000f44:	1b1b      	subs	r3, r3, r4
 8000f46:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f4a:	e7a5      	b.n	8000e98 <__udivmoddi4+0x98>
 8000f4c:	f1c1 0620 	rsb	r6, r1, #32
 8000f50:	408b      	lsls	r3, r1
 8000f52:	fa22 f706 	lsr.w	r7, r2, r6
 8000f56:	431f      	orrs	r7, r3
 8000f58:	fa0e f401 	lsl.w	r4, lr, r1
 8000f5c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f60:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f64:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f68:	4323      	orrs	r3, r4
 8000f6a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f6e:	fa1f fc87 	uxth.w	ip, r7
 8000f72:	fbbe f0f9 	udiv	r0, lr, r9
 8000f76:	0c1c      	lsrs	r4, r3, #16
 8000f78:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f7c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f80:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f84:	45a6      	cmp	lr, r4
 8000f86:	fa02 f201 	lsl.w	r2, r2, r1
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x1a0>
 8000f8c:	193c      	adds	r4, r7, r4
 8000f8e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f92:	f080 809c 	bcs.w	80010ce <__udivmoddi4+0x2ce>
 8000f96:	45a6      	cmp	lr, r4
 8000f98:	f240 8099 	bls.w	80010ce <__udivmoddi4+0x2ce>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	443c      	add	r4, r7
 8000fa0:	eba4 040e 	sub.w	r4, r4, lr
 8000fa4:	fa1f fe83 	uxth.w	lr, r3
 8000fa8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fac:	fb09 4413 	mls	r4, r9, r3, r4
 8000fb0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fb4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fb8:	45a4      	cmp	ip, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1ce>
 8000fbc:	193c      	adds	r4, r7, r4
 8000fbe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fc2:	f080 8082 	bcs.w	80010ca <__udivmoddi4+0x2ca>
 8000fc6:	45a4      	cmp	ip, r4
 8000fc8:	d97f      	bls.n	80010ca <__udivmoddi4+0x2ca>
 8000fca:	3b02      	subs	r3, #2
 8000fcc:	443c      	add	r4, r7
 8000fce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fd2:	eba4 040c 	sub.w	r4, r4, ip
 8000fd6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fda:	4564      	cmp	r4, ip
 8000fdc:	4673      	mov	r3, lr
 8000fde:	46e1      	mov	r9, ip
 8000fe0:	d362      	bcc.n	80010a8 <__udivmoddi4+0x2a8>
 8000fe2:	d05f      	beq.n	80010a4 <__udivmoddi4+0x2a4>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x1fe>
 8000fe6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fea:	eb64 0409 	sbc.w	r4, r4, r9
 8000fee:	fa04 f606 	lsl.w	r6, r4, r6
 8000ff2:	fa22 f301 	lsr.w	r3, r2, r1
 8000ff6:	431e      	orrs	r6, r3
 8000ff8:	40cc      	lsrs	r4, r1
 8000ffa:	e9c5 6400 	strd	r6, r4, [r5]
 8000ffe:	2100      	movs	r1, #0
 8001000:	e74f      	b.n	8000ea2 <__udivmoddi4+0xa2>
 8001002:	fbb1 fcf2 	udiv	ip, r1, r2
 8001006:	0c01      	lsrs	r1, r0, #16
 8001008:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800100c:	b280      	uxth	r0, r0
 800100e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001012:	463b      	mov	r3, r7
 8001014:	4638      	mov	r0, r7
 8001016:	463c      	mov	r4, r7
 8001018:	46b8      	mov	r8, r7
 800101a:	46be      	mov	lr, r7
 800101c:	2620      	movs	r6, #32
 800101e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001022:	eba2 0208 	sub.w	r2, r2, r8
 8001026:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800102a:	e766      	b.n	8000efa <__udivmoddi4+0xfa>
 800102c:	4601      	mov	r1, r0
 800102e:	e718      	b.n	8000e62 <__udivmoddi4+0x62>
 8001030:	4610      	mov	r0, r2
 8001032:	e72c      	b.n	8000e8e <__udivmoddi4+0x8e>
 8001034:	f1c6 0220 	rsb	r2, r6, #32
 8001038:	fa2e f302 	lsr.w	r3, lr, r2
 800103c:	40b7      	lsls	r7, r6
 800103e:	40b1      	lsls	r1, r6
 8001040:	fa20 f202 	lsr.w	r2, r0, r2
 8001044:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001048:	430a      	orrs	r2, r1
 800104a:	fbb3 f8fe 	udiv	r8, r3, lr
 800104e:	b2bc      	uxth	r4, r7
 8001050:	fb0e 3318 	mls	r3, lr, r8, r3
 8001054:	0c11      	lsrs	r1, r2, #16
 8001056:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800105a:	fb08 f904 	mul.w	r9, r8, r4
 800105e:	40b0      	lsls	r0, r6
 8001060:	4589      	cmp	r9, r1
 8001062:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001066:	b280      	uxth	r0, r0
 8001068:	d93e      	bls.n	80010e8 <__udivmoddi4+0x2e8>
 800106a:	1879      	adds	r1, r7, r1
 800106c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001070:	d201      	bcs.n	8001076 <__udivmoddi4+0x276>
 8001072:	4589      	cmp	r9, r1
 8001074:	d81f      	bhi.n	80010b6 <__udivmoddi4+0x2b6>
 8001076:	eba1 0109 	sub.w	r1, r1, r9
 800107a:	fbb1 f9fe 	udiv	r9, r1, lr
 800107e:	fb09 f804 	mul.w	r8, r9, r4
 8001082:	fb0e 1119 	mls	r1, lr, r9, r1
 8001086:	b292      	uxth	r2, r2
 8001088:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800108c:	4542      	cmp	r2, r8
 800108e:	d229      	bcs.n	80010e4 <__udivmoddi4+0x2e4>
 8001090:	18ba      	adds	r2, r7, r2
 8001092:	f109 31ff 	add.w	r1, r9, #4294967295
 8001096:	d2c4      	bcs.n	8001022 <__udivmoddi4+0x222>
 8001098:	4542      	cmp	r2, r8
 800109a:	d2c2      	bcs.n	8001022 <__udivmoddi4+0x222>
 800109c:	f1a9 0102 	sub.w	r1, r9, #2
 80010a0:	443a      	add	r2, r7
 80010a2:	e7be      	b.n	8001022 <__udivmoddi4+0x222>
 80010a4:	45f0      	cmp	r8, lr
 80010a6:	d29d      	bcs.n	8000fe4 <__udivmoddi4+0x1e4>
 80010a8:	ebbe 0302 	subs.w	r3, lr, r2
 80010ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010b0:	3801      	subs	r0, #1
 80010b2:	46e1      	mov	r9, ip
 80010b4:	e796      	b.n	8000fe4 <__udivmoddi4+0x1e4>
 80010b6:	eba7 0909 	sub.w	r9, r7, r9
 80010ba:	4449      	add	r1, r9
 80010bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80010c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010c4:	fb09 f804 	mul.w	r8, r9, r4
 80010c8:	e7db      	b.n	8001082 <__udivmoddi4+0x282>
 80010ca:	4673      	mov	r3, lr
 80010cc:	e77f      	b.n	8000fce <__udivmoddi4+0x1ce>
 80010ce:	4650      	mov	r0, sl
 80010d0:	e766      	b.n	8000fa0 <__udivmoddi4+0x1a0>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e6fd      	b.n	8000ed2 <__udivmoddi4+0xd2>
 80010d6:	443b      	add	r3, r7
 80010d8:	3a02      	subs	r2, #2
 80010da:	e733      	b.n	8000f44 <__udivmoddi4+0x144>
 80010dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010e0:	443b      	add	r3, r7
 80010e2:	e71c      	b.n	8000f1e <__udivmoddi4+0x11e>
 80010e4:	4649      	mov	r1, r9
 80010e6:	e79c      	b.n	8001022 <__udivmoddi4+0x222>
 80010e8:	eba1 0109 	sub.w	r1, r1, r9
 80010ec:	46c4      	mov	ip, r8
 80010ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80010f2:	fb09 f804 	mul.w	r8, r9, r4
 80010f6:	e7c4      	b.n	8001082 <__udivmoddi4+0x282>

080010f8 <__aeabi_idiv0>:
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef *huart);

// function for interrupt
void modbus_1t5_Timeout() {
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001100:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <modbus_1t5_Timeout+0x3c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2201      	movs	r2, #1
 8001106:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <modbus_1t5_Timeout+0x3c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2200      	movs	r2, #0
 8001112:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <modbus_1t5_Timeout+0x3c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <modbus_1t5_Timeout+0x3c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0201 	orr.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2000022c 	.word	0x2000022c

0800113c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <modbus_3t5_Timeout+0x1c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2201      	movs	r2, #1
 800114a:	755a      	strb	r2, [r3, #21]

}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	2000022c 	.word	0x2000022c

0800115c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef *huart) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(huart) == HAL_UART_ERROR_RTO) {
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f008 fe8b 	bl	8009e80 <HAL_UART_GetError>
 800116a:	4603      	mov	r3, r0
 800116c:	2b20      	cmp	r3, #32
 800116e:	d101      	bne.n	8001174 <modbus_ErrorTimeout+0x18>
		modbus_1t5_Timeout();
 8001170:	f7ff ffc4 	bl	80010fc <modbus_1t5_Timeout>

	}
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001186:	4a25      	ldr	r2, [pc, #148]	@ (800121c <Modbus_init+0xa0>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800118c:	4b23      	ldr	r3, [pc, #140]	@ (800121c <Modbus_init+0xa0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	4a21      	ldr	r2, [pc, #132]	@ (8001220 <Modbus_init+0xa4>)
 800119a:	210e      	movs	r1, #14
 800119c:	4618      	mov	r0, r3
 800119e:	f006 fe89 	bl	8007eb4 <HAL_TIM_RegisterCallback>
			(void*) modbus_3t5_Timeout);

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2110      	movs	r1, #16
 80011a8:	4618      	mov	r0, r3
 80011aa:	f008 fe13 	bl	8009dd4 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f008 fe2a 	bl	8009e0c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	4a19      	ldr	r2, [pc, #100]	@ (8001224 <Modbus_init+0xa8>)
 80011be:	2104      	movs	r1, #4
 80011c0:	4618      	mov	r0, r3
 80011c2:	f008 f8d1 	bl	8009368 <HAL_UART_RegisterCallback>
			(void*) modbus_ErrorTimeout);
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
	HAL_UART_Receive_DMA(hModbus->huart,
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <Modbus_init+0xa0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68d8      	ldr	r0, [r3, #12]
			&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011cc:	4b13      	ldr	r3, [pc, #76]	@ (800121c <Modbus_init+0xa0>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <Modbus_init+0xa0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
	HAL_UART_Receive_DMA(hModbus->huart,
 80011d8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011dc:	4413      	add	r3, r2
 80011de:	3302      	adds	r3, #2
 80011e0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011e4:	4619      	mov	r1, r3
 80011e6:	f008 f9f9 	bl	80095dc <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE);

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <Modbus_init+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d10c      	bne.n	8001214 <Modbus_init+0x98>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <Modbus_init+0xa0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	4618      	mov	r0, r3
 8001202:	f005 fbe3 	bl	80069cc <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001206:	4b05      	ldr	r3, [pc, #20]	@ (800121c <Modbus_init+0xa0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f005 ffa4 	bl	800715c <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000022c 	.word	0x2000022c
 8001220:	0800113d 	.word	0x0800113d
 8001224:	0800115d 	.word	0x0800115d

08001228 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8001234:	23ff      	movs	r3, #255	@ 0xff
 8001236:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8001238:	23ff      	movs	r3, #255	@ 0xff
 800123a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800123c:	e013      	b.n	8001266 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	4053      	eors	r3, r2
 800124a:	b2db      	uxtb	r3, r3
 800124c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800124e:	4a10      	ldr	r2, [pc, #64]	@ (8001290 <CRC16+0x68>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4413      	add	r3, r2
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	4053      	eors	r3, r2
 800125a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <CRC16+0x6c>)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	4413      	add	r3, r2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001266:	883b      	ldrh	r3, [r7, #0]
 8001268:	1e5a      	subs	r2, r3, #1
 800126a:	803a      	strh	r2, [r7, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1e6      	bne.n	800123e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	b21b      	sxth	r3, r3
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	b21a      	sxth	r2, r3
 8001278:	7bbb      	ldrb	r3, [r7, #14]
 800127a:	b21b      	sxth	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b21b      	sxth	r3, r3
 8001280:	b29b      	uxth	r3, r3
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000100 	.word	0x20000100
 8001294:	20000000 	.word	0x20000000

08001298 <ResetAllTargets>:

void ResetAllTargets(void) {
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	e020      	b.n	80012e6 <ResetAllTargets+0x4e>
		SET_TARGET(i, 0, 0);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	dc03      	bgt.n	80012b2 <ResetAllTargets+0x1a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3310      	adds	r3, #16
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	e002      	b.n	80012b8 <ResetAllTargets+0x20>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3313      	adds	r3, #19
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4a10      	ldr	r2, [pc, #64]	@ (80012fc <ResetAllTargets+0x64>)
 80012ba:	2100      	movs	r1, #0
 80012bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	dc04      	bgt.n	80012d0 <ResetAllTargets+0x38>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3310      	adds	r3, #16
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	3301      	adds	r3, #1
 80012ce:	e003      	b.n	80012d8 <ResetAllTargets+0x40>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3313      	adds	r3, #19
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a08      	ldr	r2, [pc, #32]	@ (80012fc <ResetAllTargets+0x64>)
 80012da:	2100      	movs	r1, #0
 80012dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 10; i++) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3301      	adds	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b09      	cmp	r3, #9
 80012ea:	dddb      	ble.n	80012a4 <ResetAllTargets+0xc>
	}
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20001080 	.word	0x20001080

08001300 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b08d      	sub	sp, #52	@ 0x34
 8001304:	af02      	add	r7, sp, #8
//	//-- value

	REG16(HEART_BEAT) = 22881;
 8001306:	4bb8      	ldr	r3, [pc, #736]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 8001308:	f645 1261 	movw	r2, #22881	@ 0x5961
 800130c:	801a      	strh	r2, [r3, #0]
	REG16(REG_SERVO_LIMIT_SWITCH) = Pen_Status ? 2 : 1;
 800130e:	4bb7      	ldr	r3, [pc, #732]	@ (80015ec <Modbus_Protocal_Worker+0x2ec>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <Modbus_Protocal_Worker+0x1a>
 8001316:	2202      	movs	r2, #2
 8001318:	e000      	b.n	800131c <Modbus_Protocal_Worker+0x1c>
 800131a:	2201      	movs	r2, #1
 800131c:	4bb2      	ldr	r3, [pc, #712]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 800131e:	80da      	strh	r2, [r3, #6]
	Pen_BaseSystem = REG16(REG_SERVO_CMD_DOWN) ? 1 : 0;
 8001320:	4bb1      	ldr	r3, [pc, #708]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 8001322:	895b      	ldrh	r3, [r3, #10]
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf14      	ite	ne
 8001328:	2301      	movne	r3, #1
 800132a:	2300      	moveq	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	4baf      	ldr	r3, [pc, #700]	@ (80015f0 <Modbus_Protocal_Worker+0x2f0>)
 8001332:	701a      	strb	r2, [r3, #0]
	TargetR_BaseSystem = REG16(REG_TARGET_GOAL_R) * 0.1f;
 8001334:	4bac      	ldr	r3, [pc, #688]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 8001336:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 80015f4 <Modbus_Protocal_Worker+0x2f4>
 8001346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134a:	4bab      	ldr	r3, [pc, #684]	@ (80015f8 <Modbus_Protocal_Worker+0x2f8>)
 800134c:	edc3 7a00 	vstr	s15, [r3]
	TargetP_BaseSystem = REG16(REG_TARGET_GOAL_THETA) * 0.1f;
 8001350:	4ba5      	ldr	r3, [pc, #660]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 8001352:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135e:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 80015f4 <Modbus_Protocal_Worker+0x2f4>
 8001362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001366:	4ba5      	ldr	r3, [pc, #660]	@ (80015fc <Modbus_Protocal_Worker+0x2fc>)
 8001368:	edc3 7a00 	vstr	s15, [r3]

	uint16_t base_status = REG16(REG_BASE_STATUS);
 800136c:	4b9e      	ldr	r3, [pc, #632]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 800136e:	885b      	ldrh	r3, [r3, #2]
 8001370:	84fb      	strh	r3, [r7, #38]	@ 0x26
	REG16(REG_MOTION_STATUS) = base_status;
 8001372:	4a9d      	ldr	r2, [pc, #628]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 8001374:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001376:	8413      	strh	r3, [r2, #32]

	static int currentSlot = 0;
	switch (base_status) {
 8001378:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800137a:	2b08      	cmp	r3, #8
 800137c:	d01d      	beq.n	80013ba <Modbus_Protocal_Worker+0xba>
 800137e:	2b08      	cmp	r3, #8
 8001380:	dc55      	bgt.n	800142e <Modbus_Protocal_Worker+0x12e>
 8001382:	2b01      	cmp	r3, #1
 8001384:	d002      	beq.n	800138c <Modbus_Protocal_Worker+0x8c>
 8001386:	2b02      	cmp	r3, #2
 8001388:	d013      	beq.n	80013b2 <Modbus_Protocal_Worker+0xb2>
 800138a:	e050      	b.n	800142e <Modbus_Protocal_Worker+0x12e>
	case 1:  // Home
		State_BaseSystem = 3;
 800138c:	4b9c      	ldr	r3, [pc, #624]	@ (8001600 <Modbus_Protocal_Worker+0x300>)
 800138e:	2203      	movs	r2, #3
 8001390:	701a      	strb	r2, [r3, #0]
		// if either of the first two target registers is non-zero
		if (REG16(REG_TARGET_BASE_ADDR) || REG16(REG_TARGET_BASE_ADDR + 1)) {
 8001392:	4b95      	ldr	r3, [pc, #596]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 8001394:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001398:	2b00      	cmp	r3, #0
 800139a:	d104      	bne.n	80013a6 <Modbus_Protocal_Worker+0xa6>
 800139c:	4b92      	ldr	r3, [pc, #584]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 800139e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d047      	beq.n	8001436 <Modbus_Protocal_Worker+0x136>
			ResetAllTargets();
 80013a6:	f7ff ff77 	bl	8001298 <ResetAllTargets>
			currentSlot = 0;
 80013aa:	4b96      	ldr	r3, [pc, #600]	@ (8001604 <Modbus_Protocal_Worker+0x304>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
		}
		break;
 80013b0:	e041      	b.n	8001436 <Modbus_Protocal_Worker+0x136>

	case 2:  // Run Jog Mode
		State_BaseSystem = 1;
 80013b2:	4b93      	ldr	r3, [pc, #588]	@ (8001600 <Modbus_Protocal_Worker+0x300>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
		break;
 80013b8:	e040      	b.n	800143c <Modbus_Protocal_Worker+0x13c>

	case 8:  // Go To Target
		State_BaseSystem = 2;
 80013ba:	4b91      	ldr	r3, [pc, #580]	@ (8001600 <Modbus_Protocal_Worker+0x300>)
 80013bc:	2202      	movs	r2, #2
 80013be:	701a      	strb	r2, [r3, #0]
		// enqueue the next target
		SET_TARGET(currentSlot, REG16(REG_TARGET_GOAL_R),
 80013c0:	4b90      	ldr	r3, [pc, #576]	@ (8001604 <Modbus_Protocal_Worker+0x304>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	dc04      	bgt.n	80013d2 <Modbus_Protocal_Worker+0xd2>
 80013c8:	4b8e      	ldr	r3, [pc, #568]	@ (8001604 <Modbus_Protocal_Worker+0x304>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3310      	adds	r3, #16
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	e003      	b.n	80013da <Modbus_Protocal_Worker+0xda>
 80013d2:	4b8c      	ldr	r3, [pc, #560]	@ (8001604 <Modbus_Protocal_Worker+0x304>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3313      	adds	r3, #19
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4a83      	ldr	r2, [pc, #524]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 80013dc:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 80013e0:	4a81      	ldr	r2, [pc, #516]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 80013e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80013e6:	4b87      	ldr	r3, [pc, #540]	@ (8001604 <Modbus_Protocal_Worker+0x304>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	dc05      	bgt.n	80013fa <Modbus_Protocal_Worker+0xfa>
 80013ee:	4b85      	ldr	r3, [pc, #532]	@ (8001604 <Modbus_Protocal_Worker+0x304>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3310      	adds	r3, #16
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	3301      	adds	r3, #1
 80013f8:	e004      	b.n	8001404 <Modbus_Protocal_Worker+0x104>
 80013fa:	4b82      	ldr	r3, [pc, #520]	@ (8001604 <Modbus_Protocal_Worker+0x304>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	3313      	adds	r3, #19
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	3301      	adds	r3, #1
 8001404:	4a78      	ldr	r2, [pc, #480]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 8001406:	f8b2 1082 	ldrh.w	r1, [r2, #130]	@ 0x82
 800140a:	4a77      	ldr	r2, [pc, #476]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 800140c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				REG16(REG_TARGET_GOAL_THETA));

		// increment _and_ wrap+reset in one go
		if (++currentSlot >= 10) {
 8001410:	4b7c      	ldr	r3, [pc, #496]	@ (8001604 <Modbus_Protocal_Worker+0x304>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	4a7b      	ldr	r2, [pc, #492]	@ (8001604 <Modbus_Protocal_Worker+0x304>)
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b7a      	ldr	r3, [pc, #488]	@ (8001604 <Modbus_Protocal_Worker+0x304>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b09      	cmp	r3, #9
 8001420:	dd0b      	ble.n	800143a <Modbus_Protocal_Worker+0x13a>
			currentSlot = 0;
 8001422:	4b78      	ldr	r3, [pc, #480]	@ (8001604 <Modbus_Protocal_Worker+0x304>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
			ResetAllTargets();
 8001428:	f7ff ff36 	bl	8001298 <ResetAllTargets>
		}
		break;
 800142c:	e005      	b.n	800143a <Modbus_Protocal_Worker+0x13a>

	default: // Run Point Mode
		State_BaseSystem = 0;
 800142e:	4b74      	ldr	r3, [pc, #464]	@ (8001600 <Modbus_Protocal_Worker+0x300>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
		break;
 8001434:	e002      	b.n	800143c <Modbus_Protocal_Worker+0x13c>
		break;
 8001436:	bf00      	nop
 8001438:	e000      	b.n	800143c <Modbus_Protocal_Worker+0x13c>
		break;
 800143a:	bf00      	nop
//		REG16(REG_POSITION_R) = 100;
//		REG16(REG_SPEED_THETA) = 100;
//		REG16(REG_POSITION_THETA) = 100;
	float Velocity_mm, Acceleration_mm, mmPosition, AngularVelocity_rad,
			AngularAcceleration_rad, RadPosition;
	Get_QRIdata(&Velocity_mm, &Acceleration_mm, &mmPosition,
 800143c:	f107 0410 	add.w	r4, r7, #16
 8001440:	f107 0214 	add.w	r2, r7, #20
 8001444:	f107 0118 	add.w	r1, r7, #24
 8001448:	f107 001c 	add.w	r0, r7, #28
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	4623      	mov	r3, r4
 800145a:	f002 ff73 	bl	8004344 <Get_QRIdata>
			&AngularVelocity_rad, &AngularAcceleration_rad, &RadPosition);
#define RAD_TO_DEG(x) ((x) * (180.0f / M_PI))

// Position remap: [-π/2, 3π/2] → [0, 360]
float mappedDeg = RAD_TO_DEG(RadPosition + (M_PI / 2.0f));
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f83d 	bl	80004e0 <__aeabi_f2d>
 8001466:	a35c      	add	r3, pc, #368	@ (adr r3, 80015d8 <Modbus_Protocal_Worker+0x2d8>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7fe feda 	bl	8000224 <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	a359      	add	r3, pc, #356	@ (adr r3, 80015e0 <Modbus_Protocal_Worker+0x2e0>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff f887 	bl	8000590 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f7ff fb43 	bl	8000b14 <__aeabi_d2f>
 800148e:	4603      	mov	r3, r0
 8001490:	623b      	str	r3, [r7, #32]
REG16(REG_POSITION_THETA) = (int16_t)(mappedDeg * 10.0f);
 8001492:	edd7 7a08 	vldr	s15, [r7, #32]
 8001496:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800149a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a2:	ee17 3a90 	vmov	r3, s15
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b4f      	ldr	r3, [pc, #316]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 80014ac:	849a      	strh	r2, [r3, #36]	@ 0x24

// Speed and acceleration: normal conversion
REG16(REG_SPEED_THETA) = (int16_t)(RAD_TO_DEG(AngularVelocity_rad) * 10.0f);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f815 	bl	80004e0 <__aeabi_f2d>
 80014b6:	a34a      	add	r3, pc, #296	@ (adr r3, 80015e0 <Modbus_Protocal_Worker+0x2e0>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff f868 	bl	8000590 <__aeabi_dmul>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001608 <Modbus_Protocal_Worker+0x308>)
 80014ce:	f7ff f85f 	bl	8000590 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff faf3 	bl	8000ac4 <__aeabi_d2iz>
 80014de:	4603      	mov	r3, r0
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b40      	ldr	r3, [pc, #256]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 80014e6:	851a      	strh	r2, [r3, #40]	@ 0x28
REG16(REG_ACCELERATION_THETA) = (int16_t)(RAD_TO_DEG(AngularAcceleration_rad) * 10.0f);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7fe fff8 	bl	80004e0 <__aeabi_f2d>
 80014f0:	a33b      	add	r3, pc, #236	@ (adr r3, 80015e0 <Modbus_Protocal_Worker+0x2e0>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f84b 	bl	8000590 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b40      	ldr	r3, [pc, #256]	@ (8001608 <Modbus_Protocal_Worker+0x308>)
 8001508:	f7ff f842 	bl	8000590 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fad6 	bl	8000ac4 <__aeabi_d2iz>
 8001518:	4603      	mov	r3, r0
 800151a:	b21b      	sxth	r3, r3
 800151c:	b29a      	uxth	r2, r3
 800151e:	4b32      	ldr	r3, [pc, #200]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 8001520:	859a      	strh	r2, [r3, #44]	@ 0x2c



	REG16(REG_SPEED_R) = (int16_t) Velocity_mm * 10.0f;
 8001522:	edd7 7a07 	vldr	s15, [r7, #28]
 8001526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800152a:	ee17 3a90 	vmov	r3, s15
 800152e:	b21b      	sxth	r3, r3
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001538:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800153c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001544:	ee17 3a90 	vmov	r3, s15
 8001548:	b29a      	uxth	r2, r3
 800154a:	4b27      	ldr	r3, [pc, #156]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 800154c:	84da      	strh	r2, [r3, #38]	@ 0x26
	REG16(REG_ACCELERATION_R) = (int16_t) Acceleration_mm * 10.0f;
 800154e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001556:	ee17 3a90 	vmov	r3, s15
 800155a:	b21b      	sxth	r3, r3
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001564:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001570:	ee17 3a90 	vmov	r3, s15
 8001574:	b29a      	uxth	r2, r3
 8001576:	4b1c      	ldr	r3, [pc, #112]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 8001578:	855a      	strh	r2, [r3, #42]	@ 0x2a
	REG16(REG_POSITION_R) = (int16_t) mmPosition * 10.0f;
 800157a:	edd7 7a05 	vldr	s15, [r7, #20]
 800157e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001582:	ee17 3a90 	vmov	r3, s15
 8001586:	b21b      	sxth	r3, r3
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001590:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800159c:	ee17 3a90 	vmov	r3, s15
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <Modbus_Protocal_Worker+0x2e8>)
 80015a4:	845a      	strh	r2, [r3, #34]	@ 0x22
// Revolute_QEIdata.AngularVelocity_rad
//Revolute_QEIdata.AngularAcceleration_rad
//Revolute_QEIdata.RadPosition

	//--Modbus
	switch (hModbus->Mstatus) {
 80015a6:	4b19      	ldr	r3, [pc, #100]	@ (800160c <Modbus_Protocal_Worker+0x30c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	7ddb      	ldrb	r3, [r3, #23]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d80a      	bhi.n	80015c8 <Modbus_Protocal_Worker+0x2c8>
 80015b2:	a201      	add	r2, pc, #4	@ (adr r2, 80015b8 <Modbus_Protocal_Worker+0x2b8>)
 80015b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b8:	08001611 	.word	0x08001611
 80015bc:	080017a5 	.word	0x080017a5
 80015c0:	0800169d 	.word	0x0800169d
 80015c4:	080016e1 	.word	0x080016e1
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <Modbus_Protocal_Worker+0x30c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2201      	movs	r2, #1
 80015ce:	75da      	strb	r2, [r3, #23]
		break;
 80015d0:	e100      	b.n	80017d4 <Modbus_Protocal_Worker+0x4d4>
 80015d2:	bf00      	nop
 80015d4:	f3af 8000 	nop.w
 80015d8:	54442d18 	.word	0x54442d18
 80015dc:	3ff921fb 	.word	0x3ff921fb
 80015e0:	1a63c1f8 	.word	0x1a63c1f8
 80015e4:	404ca5dc 	.word	0x404ca5dc
 80015e8:	20001080 	.word	0x20001080
 80015ec:	20000b2b 	.word	0x20000b2b
 80015f0:	20000ba5 	.word	0x20000ba5
 80015f4:	3dcccccd 	.word	0x3dcccccd
 80015f8:	20000b9c 	.word	0x20000b9c
 80015fc:	20000ba0 	.word	0x20000ba0
 8001600:	20000ba4 	.word	0x20000ba4
 8001604:	20000230 	.word	0x20000230
 8001608:	40240000 	.word	0x40240000
 800160c:	2000022c 	.word	0x2000022c
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 8001610:	4b72      	ldr	r3, [pc, #456]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <Modbus_Protocal_Worker+0x32a>
			/*set state*/
			hModbus->Mstatus = Modbus_state_Emission;
 800161c:	4b6f      	ldr	r3, [pc, #444]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2202      	movs	r2, #2
 8001622:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001624:	f000 f9cc 	bl	80019c0 <Modbus_Emission>
 8001628:	e018      	b.n	800165c <Modbus_Protocal_Worker+0x35c>
		}

		// Received character
		else if (hModbus->huart->RxXferSize != hModbus->huart->RxXferCount) {
 800162a:	4b6c      	ldr	r3, [pc, #432]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001634:	4b69      	ldr	r3, [pc, #420]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800163e:	b29b      	uxth	r3, r3
 8001640:	429a      	cmp	r2, r3
 8001642:	d00b      	beq.n	800165c <Modbus_Protocal_Worker+0x35c>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001644:	4b65      	ldr	r3, [pc, #404]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2200      	movs	r2, #0
 800164a:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800164c:	4b63      	ldr	r3, [pc, #396]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 8001654:	4b61      	ldr	r3, [pc, #388]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2203      	movs	r2, #3
 800165a:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 800165c:	4b5f      	ldr	r3, [pc, #380]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001666:	2b20      	cmp	r3, #32
 8001668:	f040 80ad 	bne.w	80017c6 <Modbus_Protocal_Worker+0x4c6>
			hModbus->modbusUartStructure.RxTail = 0;
 800166c:	4b5b      	ldr	r3, [pc, #364]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2200      	movs	r2, #0
 8001672:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001676:	4b59      	ldr	r3, [pc, #356]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68d8      	ldr	r0, [r3, #12]
					&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800167c:	4b57      	ldr	r3, [pc, #348]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b56      	ldr	r3, [pc, #344]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001688:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800168c:	4413      	add	r3, r2
 800168e:	3302      	adds	r3, #2
 8001690:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001694:	4619      	mov	r1, r3
 8001696:	f007 ffa1 	bl	80095dc <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE);

		}
		break;
 800169a:	e094      	b.n	80017c6 <Modbus_Protocal_Worker+0x4c6>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 800169c:	4b4f      	ldr	r3, [pc, #316]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	7d1b      	ldrb	r3, [r3, #20]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 8091 	beq.w	80017ca <Modbus_Protocal_Worker+0x4ca>
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80016a8:	4b4c      	ldr	r3, [pc, #304]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	22fe      	movs	r2, #254	@ 0xfe
 80016ae:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80016b0:	4b4a      	ldr	r3, [pc, #296]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 80016ba:	4b48      	ldr	r3, [pc, #288]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80016ca:	4b44      	ldr	r3, [pc, #272]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 80016ce:	1a8a      	subs	r2, r1, r2
 80016d0:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80016d2:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80016d6:	4b41      	ldr	r3, [pc, #260]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2204      	movs	r2, #4
 80016dc:	75da      	strb	r2, [r3, #23]
		}
		break;
 80016de:	e074      	b.n	80017ca <Modbus_Protocal_Worker+0x4ca>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 80016e0:	4b3e      	ldr	r3, [pc, #248]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80016e8:	f113 0f02 	cmn.w	r3, #2
 80016ec:	d150      	bne.n	8001790 <Modbus_Protocal_Worker+0x490>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80016ee:	4b3b      	ldr	r3, [pc, #236]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(
					hModbus->modbusUartStructure.MessageBufferRx,
 80016f6:	4b39      	ldr	r3, [pc, #228]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f203 2272 	addw	r2, r3, #626	@ 0x272
					hModbus->modbusUartStructure.RxTail - 2);
 80016fe:	4b37      	ldr	r3, [pc, #220]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			CalculateCRC.U16 = CRC16(
 8001706:	3b02      	subs	r3, #2
 8001708:	4619      	mov	r1, r3
 800170a:	4610      	mov	r0, r2
 800170c:	f7ff fd8c 	bl	8001228 <CRC16>
 8001710:	4603      	mov	r3, r0
 8001712:	80bb      	strh	r3, [r7, #4]

			if (!(CalculateCRC.U8[0]
 8001714:	793a      	ldrb	r2, [r7, #4]
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001716:	4b31      	ldr	r3, [pc, #196]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 8001718:	6819      	ldr	r1, [r3, #0]
 800171a:	4b30      	ldr	r3, [pc, #192]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
							- 2]
 8001722:	3b02      	subs	r3, #2
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001724:	440b      	add	r3, r1
 8001726:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d10c      	bne.n	8001748 <Modbus_Protocal_Worker+0x448>
					&& CalculateCRC.U8[1]
 800172e:	797a      	ldrb	r2, [r7, #5]
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001730:	4b2a      	ldr	r3, [pc, #168]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 8001732:	6819      	ldr	r1, [r3, #0]
 8001734:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
									- 1])) {
 800173c:	3b01      	subs	r3, #1
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800173e:	440b      	add	r3, r1
 8001740:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d004      	beq.n	8001752 <Modbus_Protocal_Worker+0x452>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001748:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	22ff      	movs	r2, #255	@ 0xff
 800174e:	759a      	strb	r2, [r3, #22]
				break;
 8001750:	e040      	b.n	80017d4 <Modbus_Protocal_Worker+0x4d4>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 8001752:	4b22      	ldr	r3, [pc, #136]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
					!= hModbus->slaveAddress)
 800175a:	4b20      	ldr	r3, [pc, #128]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	781b      	ldrb	r3, [r3, #0]
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d113      	bne.n	800178c <Modbus_Protocal_Worker+0x48c>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001764:	4b1d      	ldr	r3, [pc, #116]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx + 1,
 800176c:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001774:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail - 3);
 8001776:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800177e:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001780:	461a      	mov	r2, r3
 8001782:	f009 fd03 	bl	800b18c <memcpy>

			//execute command
			Modbus_frame_response();
 8001786:	f000 f903 	bl	8001990 <Modbus_frame_response>
 800178a:	e001      	b.n	8001790 <Modbus_Protocal_Worker+0x490>
				break;
 800178c:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 800178e:	e021      	b.n	80017d4 <Modbus_Protocal_Worker+0x4d4>
		if (hModbus->Flag_T35TimeOut) {
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	7d5b      	ldrb	r3, [r3, #21]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d019      	beq.n	80017ce <Modbus_Protocal_Worker+0x4ce>
			hModbus->Mstatus = Modbus_state_Idle;
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	75da      	strb	r2, [r3, #23]
		break;
 80017a2:	e014      	b.n	80017ce <Modbus_Protocal_Worker+0x4ce>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80017a4:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ae:	2b20      	cmp	r3, #32
 80017b0:	d10f      	bne.n	80017d2 <Modbus_Protocal_Worker+0x4d2>
			hModbus->TxCount = 0;
 80017b2:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80017bc:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <Modbus_Protocal_Worker+0x4dc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2201      	movs	r2, #1
 80017c2:	75da      	strb	r2, [r3, #23]
		break;
 80017c4:	e005      	b.n	80017d2 <Modbus_Protocal_Worker+0x4d2>
		break;
 80017c6:	bf00      	nop
 80017c8:	e004      	b.n	80017d4 <Modbus_Protocal_Worker+0x4d4>
		break;
 80017ca:	bf00      	nop
 80017cc:	e002      	b.n	80017d4 <Modbus_Protocal_Worker+0x4d4>
		break;
 80017ce:	bf00      	nop
 80017d0:	e000      	b.n	80017d4 <Modbus_Protocal_Worker+0x4d4>
		break;
 80017d2:	bf00      	nop
}
 80017d4:	bf00      	nop
 80017d6:	372c      	adds	r7, #44	@ 0x2c
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd90      	pop	{r4, r7, pc}
 80017dc:	2000022c 	.word	0x2000022c

080017e0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <modbusWrite1Register+0x7c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	7e5b      	ldrb	r3, [r3, #25]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4a1a      	ldr	r2, [pc, #104]	@ (800185c <modbusWrite1Register+0x7c>)
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	7e92      	ldrb	r2, [r2, #26]
 80017f6:	4413      	add	r3, r2
 80017f8:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 80017fa:	88fa      	ldrh	r2, [r7, #6]
 80017fc:	4b17      	ldr	r3, [pc, #92]	@ (800185c <modbusWrite1Register+0x7c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	429a      	cmp	r2, r3
 8001804:	d903      	bls.n	800180e <modbusWrite1Register+0x2e>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001806:	2002      	movs	r0, #2
 8001808:	f000 f8a0 	bl	800194c <ModbusErrorReply>
		return;
 800180c:	e023      	b.n	8001856 <modbusWrite1Register+0x76>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800180e:	4b13      	ldr	r3, [pc, #76]	@ (800185c <modbusWrite1Register+0x7c>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b12      	ldr	r3, [pc, #72]	@ (800185c <modbusWrite1Register+0x7c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6859      	ldr	r1, [r3, #4]
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	440b      	add	r3, r1
 800181e:	7ed2      	ldrb	r2, [r2, #27]
 8001820:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <modbusWrite1Register+0x7c>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <modbusWrite1Register+0x7c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	440b      	add	r3, r1
 8001832:	7f12      	ldrb	r2, [r2, #28]
 8001834:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <modbusWrite1Register+0x7c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <modbusWrite1Register+0x7c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3318      	adds	r3, #24
 8001844:	2208      	movs	r2, #8
 8001846:	4619      	mov	r1, r3
 8001848:	f009 fca0 	bl	800b18c <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 800184c:	4b03      	ldr	r3, [pc, #12]	@ (800185c <modbusWrite1Register+0x7c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2205      	movs	r2, #5
 8001852:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000022c 	.word	0x2000022c

08001860 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 8001866:	4b38      	ldr	r3, [pc, #224]	@ (8001948 <modbusRead1Register+0xe8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	7edb      	ldrb	r3, [r3, #27]
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b29b      	uxth	r3, r3
			+ (hModbus->Rxframe[4]));
 8001870:	4a35      	ldr	r2, [pc, #212]	@ (8001948 <modbusRead1Register+0xe8>)
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	7f12      	ldrb	r2, [r2, #28]
	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 8001876:	4413      	add	r3, r2
 8001878:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 800187a:	4b33      	ldr	r3, [pc, #204]	@ (8001948 <modbusRead1Register+0xe8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	7e5b      	ldrb	r3, [r3, #25]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	b29b      	uxth	r3, r3
 8001884:	4a30      	ldr	r2, [pc, #192]	@ (8001948 <modbusRead1Register+0xe8>)
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	7e92      	ldrb	r2, [r2, #26]
 800188a:	4413      	add	r3, r2
 800188c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <modbusRead1Register+0x3a>
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	2b7d      	cmp	r3, #125	@ 0x7d
 8001898:	d903      	bls.n	80018a2 <modbusRead1Register+0x42>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800189a:	2003      	movs	r0, #3
 800189c:	f000 f856 	bl	800194c <ModbusErrorReply>
		return;
 80018a0:	e04e      	b.n	8001940 <modbusRead1Register+0xe0>
	}

	if (startAddress > hModbus->RegisterSize
 80018a2:	88ba      	ldrh	r2, [r7, #4]
 80018a4:	4b28      	ldr	r3, [pc, #160]	@ (8001948 <modbusRead1Register+0xe8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d808      	bhi.n	80018c0 <modbusRead1Register+0x60>
			|| (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 80018ae:	88ba      	ldrh	r2, [r7, #4]
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	4413      	add	r3, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <modbusRead1Register+0xe8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d903      	bls.n	80018c8 <modbusRead1Register+0x68>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80018c0:	2002      	movs	r0, #2
 80018c2:	f000 f843 	bl	800194c <ModbusErrorReply>
		return;
 80018c6:	e03b      	b.n	8001940 <modbusRead1Register+0xe0>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80018c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001948 <modbusRead1Register+0xe8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2203      	movs	r2, #3
 80018ce:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <modbusRead1Register+0xe8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	0052      	lsls	r2, r2, #1
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 80018e2:	2400      	movs	r4, #0
 80018e4:	e020      	b.n	8001928 <modbusRead1Register+0xc8>
		hModbus->Txframe[2 * i + 2] =
				hModbus->RegisterAddress[startAddress + i].U8[1];
 80018e6:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <modbusRead1Register+0xe8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	88bb      	ldrh	r3, [r7, #4]
 80018ee:	4423      	add	r3, r4
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 2] =
 80018f4:	4b14      	ldr	r3, [pc, #80]	@ (8001948 <modbusRead1Register+0xe8>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	1c63      	adds	r3, r4, #1
 80018fa:	005b      	lsls	r3, r3, #1
				hModbus->RegisterAddress[startAddress + i].U8[1];
 80018fc:	7849      	ldrb	r1, [r1, #1]
		hModbus->Txframe[2 * i + 2] =
 80018fe:	4413      	add	r3, r2
 8001900:	460a      	mov	r2, r1
 8001902:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2 * i + 3] =
				hModbus->RegisterAddress[startAddress + i].U8[0];
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <modbusRead1Register+0xe8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	88bb      	ldrh	r3, [r7, #4]
 800190e:	4423      	add	r3, r4
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 3] =
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <modbusRead1Register+0xe8>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	0063      	lsls	r3, r4, #1
 800191a:	3303      	adds	r3, #3
				hModbus->RegisterAddress[startAddress + i].U8[0];
 800191c:	7809      	ldrb	r1, [r1, #0]
		hModbus->Txframe[2 * i + 3] =
 800191e:	4413      	add	r3, r2
 8001920:	460a      	mov	r2, r1
 8001922:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for (i = 0; i < numberOfDataToRead; i++) {
 8001926:	3401      	adds	r4, #1
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	429c      	cmp	r4, r3
 800192c:	dbdb      	blt.n	80018e6 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	3301      	adds	r3, #1
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b04      	ldr	r3, [pc, #16]	@ (8001948 <modbusRead1Register+0xe8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0052      	lsls	r2, r2, #1
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	2000022c 	.word	0x2000022c

0800194c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001956:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <ModbusErrorReply+0x40>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	7e1a      	ldrb	r2, [r3, #24]
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <ModbusErrorReply+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800196a:	4b08      	ldr	r3, [pc, #32]	@ (800198c <ModbusErrorReply+0x40>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	79fa      	ldrb	r2, [r7, #7]
 8001970:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001974:	4b05      	ldr	r3, [pc, #20]	@ (800198c <ModbusErrorReply+0x40>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2202      	movs	r2, #2
 800197a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	2000022c 	.word	0x2000022c

08001990 <Modbus_frame_response>:

void Modbus_frame_response() {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 8001994:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <Modbus_frame_response+0x2c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	7e1b      	ldrb	r3, [r3, #24]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d004      	beq.n	80019a8 <Modbus_frame_response+0x18>
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d105      	bne.n	80019ae <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80019a2:	f7ff ff1d 	bl	80017e0 <modbusWrite1Register>
		break;
 80019a6:	e006      	b.n	80019b6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80019a8:	f7ff ff5a 	bl	8001860 <modbusRead1Register>
		break;
 80019ac:	e003      	b.n	80019b6 <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f7ff ffcc 	bl	800194c <ModbusErrorReply>
		break;
 80019b4:	bf00      	nop

	}
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2000022c 	.word	0x2000022c

080019c0 <Modbus_Emission>:

void Modbus_Emission() {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80019c6:	4b38      	ldr	r3, [pc, #224]	@ (8001aa8 <Modbus_Emission+0xe8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	d15d      	bne.n	8001a90 <Modbus_Emission+0xd0>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80019d4:	4b34      	ldr	r3, [pc, #208]	@ (8001aa8 <Modbus_Emission+0xe8>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b33      	ldr	r3, [pc, #204]	@ (8001aa8 <Modbus_Emission+0xe8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	7812      	ldrb	r2, [r2, #0]
 80019de:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 80019e2:	4b31      	ldr	r3, [pc, #196]	@ (8001aa8 <Modbus_Emission+0xe8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 80019ea:	1c58      	adds	r0, r3, #1
				hModbus->Txframe, hModbus->TxCount);
 80019ec:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa8 <Modbus_Emission+0xe8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
 80019f4:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <Modbus_Emission+0xe8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 80019fc:	461a      	mov	r2, r3
 80019fe:	f009 fbc5 	bl	800b18c <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 8001a02:	4b29      	ldr	r3, [pc, #164]	@ (8001aa8 <Modbus_Emission+0xe8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b26      	ldr	r3, [pc, #152]	@ (8001aa8 <Modbus_Emission+0xe8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3203      	adds	r2, #3
 8001a12:	b292      	uxth	r2, r2
 8001a14:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001a18:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <Modbus_Emission+0xe8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001a20:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <Modbus_Emission+0xe8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001a28:	3b02      	subs	r3, #2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	f7ff fbfb 	bl	8001228 <CRC16>
 8001a32:	4603      	mov	r3, r0
 8001a34:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 8001a36:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <Modbus_Emission+0xe8>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <Modbus_Emission+0xe8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 2] = CalculateCRC.U8[0];
 8001a42:	3b02      	subs	r3, #2
 8001a44:	7939      	ldrb	r1, [r7, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	460a      	mov	r2, r1
 8001a4a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 8001a4e:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <Modbus_Emission+0xe8>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <Modbus_Emission+0xe8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 1] = CalculateCRC.U8[1];
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	7979      	ldrb	r1, [r7, #5]
 8001a5e:	4413      	add	r3, r2
 8001a60:	460a      	mov	r2, r1
 8001a62:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		//sent modbus

		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <Modbus_Emission+0xe8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	d10d      	bne.n	8001a90 <Modbus_Emission+0xd0>
			HAL_UART_Transmit_DMA(hModbus->huart,
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <Modbus_Emission+0xe8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68d8      	ldr	r0, [r3, #12]
					hModbus->modbusUartStructure.MessageBufferTx,
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <Modbus_Emission+0xe8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					hModbus->modbusUartStructure.TxTail);
 8001a82:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <Modbus_Emission+0xe8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart,
 8001a86:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f007 fd26 	bl	80094dc <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <Modbus_Emission+0xe8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2200      	movs	r2, #0
 8001a96:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <Modbus_Emission+0xe8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	755a      	strb	r2, [r3, #21]

}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000022c 	.word	0x2000022c
 8001aac:	00000000 	.word	0x00000000

08001ab0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ab4:	ed2d 8b02 	vpush	{d8}
 8001ab8:	b0a7      	sub	sp, #156	@ 0x9c
 8001aba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001abc:	f003 f805 	bl	8004aca <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ac0:	f001 fac6 	bl	8003050 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ac4:	f001 ff20 	bl	8003908 <MX_GPIO_Init>
	MX_DMA_Init();
 8001ac8:	f001 feec 	bl	80038a4 <MX_DMA_Init>
	MX_TIM4_Init();
 8001acc:	f001 fc68 	bl	80033a0 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001ad0:	f001 fcbc 	bl	800344c <MX_TIM5_Init>
	MX_TIM3_Init();
 8001ad4:	f001 fc0e 	bl	80032f4 <MX_TIM3_Init>
	MX_TIM8_Init();
 8001ad8:	f001 fd06 	bl	80034e8 <MX_TIM8_Init>
	MX_TIM15_Init();
 8001adc:	f001 fdc0 	bl	8003660 <MX_TIM15_Init>
	MX_TIM1_Init();
 8001ae0:	f001 fb02 	bl	80030e8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001ae4:	f001 fb86 	bl	80031f4 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 8001ae8:	f001 fe8e 	bl	8003808 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8001aec:	f001 fe5c 	bl	80037a8 <MX_TIM16_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001af0:	48b9      	ldr	r0, [pc, #740]	@ (8001dd8 <main+0x328>)
 8001af2:	f004 fefb 	bl	80068ec <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001af6:	2100      	movs	r1, #0
 8001af8:	48b7      	ldr	r0, [pc, #732]	@ (8001dd8 <main+0x328>)
 8001afa:	f005 f9c3 	bl	8006e84 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001afe:	2104      	movs	r1, #4
 8001b00:	48b5      	ldr	r0, [pc, #724]	@ (8001dd8 <main+0x328>)
 8001b02:	f005 f9bf 	bl	8006e84 <HAL_TIM_IC_Start>
	HAL_TIM_Base_Start(&htim2);
 8001b06:	48b5      	ldr	r0, [pc, #724]	@ (8001ddc <main+0x32c>)
 8001b08:	f004 fef0 	bl	80068ec <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	48b3      	ldr	r0, [pc, #716]	@ (8001ddc <main+0x32c>)
 8001b10:	f005 f9b8 	bl	8006e84 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001b14:	2104      	movs	r1, #4
 8001b16:	48b1      	ldr	r0, [pc, #708]	@ (8001ddc <main+0x32c>)
 8001b18:	f005 f9b4 	bl	8006e84 <HAL_TIM_IC_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b1c:	213c      	movs	r1, #60	@ 0x3c
 8001b1e:	48b0      	ldr	r0, [pc, #704]	@ (8001de0 <main+0x330>)
 8001b20:	f005 fc5e 	bl	80073e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001b24:	213c      	movs	r1, #60	@ 0x3c
 8001b26:	48af      	ldr	r0, [pc, #700]	@ (8001de4 <main+0x334>)
 8001b28:	f005 fc5a 	bl	80073e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001b2c:	48ae      	ldr	r0, [pc, #696]	@ (8001de8 <main+0x338>)
 8001b2e:	f004 ff4d 	bl	80069cc <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8);
 8001b32:	48ae      	ldr	r0, [pc, #696]	@ (8001dec <main+0x33c>)
 8001b34:	f004 feda 	bl	80068ec <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001b38:	2108      	movs	r1, #8
 8001b3a:	48ac      	ldr	r0, [pc, #688]	@ (8001dec <main+0x33c>)
 8001b3c:	f005 f82c 	bl	8006b98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001b40:	210c      	movs	r1, #12
 8001b42:	48aa      	ldr	r0, [pc, #680]	@ (8001dec <main+0x33c>)
 8001b44:	f005 f828 	bl	8006b98 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim15);
 8001b48:	48a9      	ldr	r0, [pc, #676]	@ (8001df0 <main+0x340>)
 8001b4a:	f004 fecf 	bl	80068ec <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001b4e:	2100      	movs	r1, #0
 8001b50:	48a7      	ldr	r0, [pc, #668]	@ (8001df0 <main+0x340>)
 8001b52:	f005 f821 	bl	8006b98 <HAL_TIM_PWM_Start>
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
	DWT_Init();
 8001b56:	f001 ffef 	bl	8003b38 <DWT_Init>

	PID.Kp = 0.1;
 8001b5a:	4aa6      	ldr	r2, [pc, #664]	@ (8001df4 <main+0x344>)
 8001b5c:	4ba6      	ldr	r3, [pc, #664]	@ (8001df8 <main+0x348>)
 8001b5e:	6193      	str	r3, [r2, #24]
	PID.Ki = 0.00001;
 8001b60:	4aa4      	ldr	r2, [pc, #656]	@ (8001df4 <main+0x344>)
 8001b62:	4ba6      	ldr	r3, [pc, #664]	@ (8001dfc <main+0x34c>)
 8001b64:	61d3      	str	r3, [r2, #28]
	PID.Kd = 0.1;
 8001b66:	4aa3      	ldr	r2, [pc, #652]	@ (8001df4 <main+0x344>)
 8001b68:	4ba3      	ldr	r3, [pc, #652]	@ (8001df8 <main+0x348>)
 8001b6a:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	48a1      	ldr	r0, [pc, #644]	@ (8001df4 <main+0x344>)
 8001b70:	f009 faaa 	bl	800b0c8 <arm_pid_init_f32>

	Reset_R();
 8001b74:	f002 fbc4 	bl	8004300 <Reset_R>
	Reset_P();
 8001b78:	f002 fbd2 	bl	8004320 <Reset_P>
	calibState = CALIB_IDLE;
 8001b7c:	4aa0      	ldr	r2, [pc, #640]	@ (8001e00 <main+0x350>)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	7013      	strb	r3, [r2, #0]

	Set_Servo(0);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f002 fb92 	bl	80042ac <Set_Servo>

	//BaseSystem//////////
	hmodbus.huart = &huart2;
 8001b88:	4a9e      	ldr	r2, [pc, #632]	@ (8001e04 <main+0x354>)
 8001b8a:	4b9f      	ldr	r3, [pc, #636]	@ (8001e08 <main+0x358>)
 8001b8c:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim16;
 8001b8e:	4a9d      	ldr	r2, [pc, #628]	@ (8001e04 <main+0x354>)
 8001b90:	4b9e      	ldr	r3, [pc, #632]	@ (8001e0c <main+0x35c>)
 8001b92:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8001b94:	4a9b      	ldr	r2, [pc, #620]	@ (8001e04 <main+0x354>)
 8001b96:	2315      	movs	r3, #21
 8001b98:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8001b9a:	4a9a      	ldr	r2, [pc, #616]	@ (8001e04 <main+0x354>)
 8001b9c:	23c8      	movs	r3, #200	@ 0xc8
 8001b9e:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001ba0:	499b      	ldr	r1, [pc, #620]	@ (8001e10 <main+0x360>)
 8001ba2:	4898      	ldr	r0, [pc, #608]	@ (8001e04 <main+0x354>)
 8001ba4:	f7ff faea 	bl	800117c <Modbus_init>
//		REG16(REG_ACCELERATION_R) = accel_theta;
//		REG16(REG_POSITION_R) = pos_theta;
//		REG16(REG_SPEED_THETA) = speed_r;
//		REG16(REG_ACCELERATION_THETA) = accel_r;
//		REG16(REG_POSITION_THETA) = pos_r;
		Modbus_Protocal_Worker();
 8001ba8:	f7ff fbaa 	bl	8001300 <Modbus_Protocal_Worker>
		//////////////////////

		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8001bac:	4b8d      	ldr	r3, [pc, #564]	@ (8001de4 <main+0x334>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bb2:	4b98      	ldr	r3, [pc, #608]	@ (8001e14 <main+0x364>)
 8001bb4:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8001bb6:	4b8a      	ldr	r3, [pc, #552]	@ (8001de0 <main+0x330>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bbc:	4b96      	ldr	r3, [pc, #600]	@ (8001e18 <main+0x368>)
 8001bbe:	601a      	str	r2, [r3, #0]
		//Call every 0.01 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 8001bc0:	f002 f89a 	bl	8003cf8 <micros>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
		if (currentTime > timestamp) {
 8001bcc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001bd0:	4b92      	ldr	r3, [pc, #584]	@ (8001e1c <main+0x36c>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	4282      	cmp	r2, r0
 8001bd8:	418b      	sbcs	r3, r1
 8001bda:	d211      	bcs.n	8001c00 <main+0x150>
			timestamp = currentTime + 10000;  //us
 8001bdc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001be0:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001be4:	1851      	adds	r1, r2, r1
 8001be6:	6639      	str	r1, [r7, #96]	@ 0x60
 8001be8:	f143 0300 	adc.w	r3, r3, #0
 8001bec:	667b      	str	r3, [r7, #100]	@ 0x64
 8001bee:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001bf2:	4b8a      	ldr	r3, [pc, #552]	@ (8001e1c <main+0x36c>)
 8001bf4:	e9c3 0100 	strd	r0, r1, [r3]
			Prismatic_PosVel_Update();
 8001bf8:	f002 fa30 	bl	800405c <Prismatic_PosVel_Update>
			Revolute_PosVel_Update();
 8001bfc:	f002 f960 	bl	8003ec0 <Revolute_PosVel_Update>
		}
		//Call every 0.1 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 8001c00:	f002 f87a 	bl	8003cf8 <micros>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		if (currentTime1 > timestamp1) {
 8001c0c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001c10:	4b83      	ldr	r3, [pc, #524]	@ (8001e20 <main+0x370>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	4282      	cmp	r2, r0
 8001c18:	418b      	sbcs	r3, r1
 8001c1a:	d20c      	bcs.n	8001c36 <main+0x186>
			timestamp1 = currentTime1 + 100000;  //us
 8001c1c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001c20:	4980      	ldr	r1, [pc, #512]	@ (8001e24 <main+0x374>)
 8001c22:	1851      	adds	r1, r2, r1
 8001c24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001c26:	f143 0300 	adc.w	r3, r3, #0
 8001c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c2c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001c30:	4b7b      	ldr	r3, [pc, #492]	@ (8001e20 <main+0x370>)
 8001c32:	e9c3 0100 	strd	r0, r1, [r3]

		}
		End_x = Prismatic_QEIdata.mmPosition
 8001c36:	4b7c      	ldr	r3, [pc, #496]	@ (8001e28 <main+0x378>)
 8001c38:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
				* cosf(Revolute_QEIdata.RadPosition * -1);
 8001c3c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e2c <main+0x37c>)
 8001c3e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001c42:	eef1 7a67 	vneg.f32	s15, s15
 8001c46:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4a:	f009 faad 	bl	800b1a8 <cosf>
 8001c4e:	eef0 7a40 	vmov.f32	s15, s0
 8001c52:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_x = Prismatic_QEIdata.mmPosition
 8001c56:	4b76      	ldr	r3, [pc, #472]	@ (8001e30 <main+0x380>)
 8001c58:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition
 8001c5c:	4b72      	ldr	r3, [pc, #456]	@ (8001e28 <main+0x378>)
 8001c5e:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
				* sinf(Revolute_QEIdata.RadPosition);
 8001c62:	4b72      	ldr	r3, [pc, #456]	@ (8001e2c <main+0x37c>)
 8001c64:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001c68:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6c:	f009 fae0 	bl	800b230 <sinf>
 8001c70:	eef0 7a40 	vmov.f32	s15, s0
 8001c74:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_y = Prismatic_QEIdata.mmPosition
 8001c78:	4b6e      	ldr	r3, [pc, #440]	@ (8001e34 <main+0x384>)
 8001c7a:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<RECEIVER>> ////////////////////////
		Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8001c7e:	4b57      	ldr	r3, [pc, #348]	@ (8001ddc <main+0x32c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b6c      	ldr	r3, [pc, #432]	@ (8001e38 <main+0x388>)
 8001c88:	601a      	str	r2, [r3, #0]
		Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8001c8a:	4b53      	ldr	r3, [pc, #332]	@ (8001dd8 <main+0x328>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b69      	ldr	r3, [pc, #420]	@ (8001e38 <main+0x388>)
 8001c94:	605a      	str	r2, [r3, #4]
		float RX_temp = map(
		__HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_2) - 1500.00, -500.00, 500.00,
 8001c96:	4b51      	ldr	r3, [pc, #324]	@ (8001ddc <main+0x32c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fbfd 	bl	800049c <__aeabi_ui2d>
 8001ca2:	a349      	add	r3, pc, #292	@ (adr r3, 8001dc8 <main+0x318>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe faba 	bl	8000220 <__aeabi_dsub>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
		float RX_temp = map(
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f7fe ff2e 	bl	8000b14 <__aeabi_d2f>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	ed9f 2a60 	vldr	s4, [pc, #384]	@ 8001e3c <main+0x38c>
 8001cbe:	eddf 1a65 	vldr	s3, [pc, #404]	@ 8001e54 <main+0x3a4>
 8001cc2:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 8001e40 <main+0x390>
 8001cc6:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001e44 <main+0x394>
 8001cca:	ee00 3a10 	vmov	s0, r3
 8001cce:	f001 ff05 	bl	8003adc <map>
 8001cd2:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
				-100.00, 100.00);
		float RY_temp = map(
		__HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1) - 18530.00, -500.00, 500.00,
 8001cd6:	4b40      	ldr	r3, [pc, #256]	@ (8001dd8 <main+0x328>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fbdd 	bl	800049c <__aeabi_ui2d>
 8001ce2:	a33b      	add	r3, pc, #236	@ (adr r3, 8001dd0 <main+0x320>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe fa9a 	bl	8000220 <__aeabi_dsub>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
		float RY_temp = map(
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe ff0e 	bl	8000b14 <__aeabi_d2f>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 8001e3c <main+0x38c>
 8001cfe:	eddf 1a55 	vldr	s3, [pc, #340]	@ 8001e54 <main+0x3a4>
 8001d02:	ed9f 1a4f 	vldr	s2, [pc, #316]	@ 8001e40 <main+0x390>
 8001d06:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 8001e44 <main+0x394>
 8001d0a:	ee00 3a10 	vmov	s0, r3
 8001d0e:	f001 fee5 	bl	8003adc <map>
 8001d12:	ed87 0a20 	vstr	s0, [r7, #128]	@ 0x80
				-100.00, 100.00);

		if (RX_temp >= -4 && RX_temp <= 4)
 8001d16:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001d1a:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8001d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d26:	db0d      	blt.n	8001d44 <main+0x294>
 8001d28:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001d2c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d38:	d804      	bhi.n	8001d44 <main+0x294>
			Receiver[0] = 0.00;
 8001d3a:	4a43      	ldr	r2, [pc, #268]	@ (8001e48 <main+0x398>)
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e01d      	b.n	8001d80 <main+0x2d0>
		else if (RX_temp > 100)
 8001d44:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001d48:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001e3c <main+0x38c>
 8001d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d54:	dd03      	ble.n	8001d5e <main+0x2ae>
			Receiver[0] = 100.00;
 8001d56:	4a3c      	ldr	r2, [pc, #240]	@ (8001e48 <main+0x398>)
 8001d58:	4b3c      	ldr	r3, [pc, #240]	@ (8001e4c <main+0x39c>)
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	e010      	b.n	8001d80 <main+0x2d0>
		else if (RX_temp < -100)
 8001d5e:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001d62:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001e54 <main+0x3a4>
 8001d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6e:	d503      	bpl.n	8001d78 <main+0x2c8>
			Receiver[0] = -100.00;
 8001d70:	4a35      	ldr	r2, [pc, #212]	@ (8001e48 <main+0x398>)
 8001d72:	4b37      	ldr	r3, [pc, #220]	@ (8001e50 <main+0x3a0>)
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e003      	b.n	8001d80 <main+0x2d0>
		else
			Receiver[0] = RX_temp;
 8001d78:	4a33      	ldr	r2, [pc, #204]	@ (8001e48 <main+0x398>)
 8001d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d7e:	6013      	str	r3, [r2, #0]
		if (RY_temp >= -4 && RY_temp <= 4)
 8001d80:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001d84:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8001d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d90:	db0d      	blt.n	8001dae <main+0x2fe>
 8001d92:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001d96:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	d804      	bhi.n	8001dae <main+0x2fe>
			Receiver[1] = 0.00;
 8001da4:	4a28      	ldr	r2, [pc, #160]	@ (8001e48 <main+0x398>)
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	6053      	str	r3, [r2, #4]
 8001dac:	e065      	b.n	8001e7a <main+0x3ca>
		else if (RY_temp > 100)
 8001dae:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001db2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001e3c <main+0x38c>
 8001db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	dd4b      	ble.n	8001e58 <main+0x3a8>
			Receiver[1] = 100.00;
 8001dc0:	4a21      	ldr	r2, [pc, #132]	@ (8001e48 <main+0x398>)
 8001dc2:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <main+0x39c>)
 8001dc4:	6053      	str	r3, [r2, #4]
 8001dc6:	e058      	b.n	8001e7a <main+0x3ca>
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	40977000 	.word	0x40977000
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	40d21880 	.word	0x40d21880
 8001dd8:	20000234 	.word	0x20000234
 8001ddc:	20000300 	.word	0x20000300
 8001de0:	200003cc 	.word	0x200003cc
 8001de4:	20000498 	.word	0x20000498
 8001de8:	20000564 	.word	0x20000564
 8001dec:	20000630 	.word	0x20000630
 8001df0:	200006fc 	.word	0x200006fc
 8001df4:	20000b38 	.word	0x20000b38
 8001df8:	3dcccccd 	.word	0x3dcccccd
 8001dfc:	3727c5ac 	.word	0x3727c5ac
 8001e00:	20000b7c 	.word	0x20000b7c
 8001e04:	20000ba8 	.word	0x20000ba8
 8001e08:	20000894 	.word	0x20000894
 8001e0c:	200007c8 	.word	0x200007c8
 8001e10:	20001080 	.word	0x20001080
 8001e14:	20000a68 	.word	0x20000a68
 8001e18:	20000a6c 	.word	0x20000a6c
 8001e1c:	20001210 	.word	0x20001210
 8001e20:	20001218 	.word	0x20001218
 8001e24:	000186a0 	.word	0x000186a0
 8001e28:	20000ab0 	.word	0x20000ab0
 8001e2c:	20000a70 	.word	0x20000a70
 8001e30:	20000af0 	.word	0x20000af0
 8001e34:	20000af4 	.word	0x20000af4
 8001e38:	20000a3c 	.word	0x20000a3c
 8001e3c:	42c80000 	.word	0x42c80000
 8001e40:	43fa0000 	.word	0x43fa0000
 8001e44:	c3fa0000 	.word	0xc3fa0000
 8001e48:	20000a28 	.word	0x20000a28
 8001e4c:	42c80000 	.word	0x42c80000
 8001e50:	c2c80000 	.word	0xc2c80000
 8001e54:	c2c80000 	.word	0xc2c80000
		else if (RY_temp < -100)
 8001e58:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001e5c:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8001e54 <main+0x3a4>
 8001e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e68:	d503      	bpl.n	8001e72 <main+0x3c2>
			Receiver[1] = -100.00;
 8001e6a:	4ab7      	ldr	r2, [pc, #732]	@ (8002148 <main+0x698>)
 8001e6c:	4bb7      	ldr	r3, [pc, #732]	@ (800214c <main+0x69c>)
 8001e6e:	6053      	str	r3, [r2, #4]
 8001e70:	e003      	b.n	8001e7a <main+0x3ca>
		else
			Receiver[1] = RY_temp;
 8001e72:	4ab5      	ldr	r2, [pc, #724]	@ (8002148 <main+0x698>)
 8001e74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e78:	6053      	str	r3, [r2, #4]

		Receiver[2] = map((float) pulse_width_us[0] - 1500.00, -500.00, 500.00,
 8001e7a:	4bb5      	ldr	r3, [pc, #724]	@ (8002150 <main+0x6a0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e86:	ee17 0a90 	vmov	r0, s15
 8001e8a:	f7fe fb29 	bl	80004e0 <__aeabi_f2d>
 8001e8e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8002140 <main+0x690>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	f7fe f9c4 	bl	8000220 <__aeabi_dsub>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f7fe fe38 	bl	8000b14 <__aeabi_d2f>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	ed9f 2aab 	vldr	s4, [pc, #684]	@ 8002154 <main+0x6a4>
 8001eaa:	eddf 1aab 	vldr	s3, [pc, #684]	@ 8002158 <main+0x6a8>
 8001eae:	ed9f 1aab 	vldr	s2, [pc, #684]	@ 800215c <main+0x6ac>
 8001eb2:	eddf 0aab 	vldr	s1, [pc, #684]	@ 8002160 <main+0x6b0>
 8001eb6:	ee00 3a10 	vmov	s0, r3
 8001eba:	f001 fe0f 	bl	8003adc <map>
 8001ebe:	eef0 7a40 	vmov.f32	s15, s0
 8001ec2:	4ba1      	ldr	r3, [pc, #644]	@ (8002148 <main+0x698>)
 8001ec4:	edc3 7a02 	vstr	s15, [r3, #8]
				-100.00, 100.00);
		Receiver[3] = map((float) pulse_width_us[1] - 1500.00, -500.00, 500.00,
 8001ec8:	4ba1      	ldr	r3, [pc, #644]	@ (8002150 <main+0x6a0>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	ee07 3a90 	vmov	s15, r3
 8001ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed4:	ee17 0a90 	vmov	r0, s15
 8001ed8:	f7fe fb02 	bl	80004e0 <__aeabi_f2d>
 8001edc:	a398      	add	r3, pc, #608	@ (adr r3, 8002140 <main+0x690>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe f99d 	bl	8000220 <__aeabi_dsub>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f7fe fe11 	bl	8000b14 <__aeabi_d2f>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	ed9f 2a97 	vldr	s4, [pc, #604]	@ 8002154 <main+0x6a4>
 8001ef8:	eddf 1a97 	vldr	s3, [pc, #604]	@ 8002158 <main+0x6a8>
 8001efc:	ed9f 1a97 	vldr	s2, [pc, #604]	@ 800215c <main+0x6ac>
 8001f00:	eddf 0a97 	vldr	s1, [pc, #604]	@ 8002160 <main+0x6b0>
 8001f04:	ee00 3a10 	vmov	s0, r3
 8001f08:	f001 fde8 	bl	8003adc <map>
 8001f0c:	eef0 7a40 	vmov.f32	s15, s0
 8001f10:	4b8d      	ldr	r3, [pc, #564]	@ (8002148 <main+0x698>)
 8001f12:	edc3 7a03 	vstr	s15, [r3, #12]
				-100.00, 100.00);
		Receiver[4] = map((float) pulse_width_us[2] - 1500.00, -500.00, 500.00,
 8001f16:	4b8e      	ldr	r3, [pc, #568]	@ (8002150 <main+0x6a0>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f22:	ee17 0a90 	vmov	r0, s15
 8001f26:	f7fe fadb 	bl	80004e0 <__aeabi_f2d>
 8001f2a:	a385      	add	r3, pc, #532	@ (adr r3, 8002140 <main+0x690>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	f7fe f976 	bl	8000220 <__aeabi_dsub>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f7fe fdea 	bl	8000b14 <__aeabi_d2f>
 8001f40:	4603      	mov	r3, r0
 8001f42:	ed9f 2a84 	vldr	s4, [pc, #528]	@ 8002154 <main+0x6a4>
 8001f46:	eddf 1a84 	vldr	s3, [pc, #528]	@ 8002158 <main+0x6a8>
 8001f4a:	ed9f 1a84 	vldr	s2, [pc, #528]	@ 800215c <main+0x6ac>
 8001f4e:	eddf 0a84 	vldr	s1, [pc, #528]	@ 8002160 <main+0x6b0>
 8001f52:	ee00 3a10 	vmov	s0, r3
 8001f56:	f001 fdc1 	bl	8003adc <map>
 8001f5a:	eef0 7a40 	vmov.f32	s15, s0
 8001f5e:	4b7a      	ldr	r3, [pc, #488]	@ (8002148 <main+0x698>)
 8001f60:	edc3 7a04 	vstr	s15, [r3, #16]
				-100.00, 100.00);

		//Adjust as needed
		vx = map((float) Receiver[0], -100.00, 100.00, -300.00, 300.00);
 8001f64:	4b78      	ldr	r3, [pc, #480]	@ (8002148 <main+0x698>)
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	ed9f 2a7e 	vldr	s4, [pc, #504]	@ 8002164 <main+0x6b4>
 8001f6e:	eddf 1a7e 	vldr	s3, [pc, #504]	@ 8002168 <main+0x6b8>
 8001f72:	ed9f 1a78 	vldr	s2, [pc, #480]	@ 8002154 <main+0x6a4>
 8001f76:	eddf 0a78 	vldr	s1, [pc, #480]	@ 8002158 <main+0x6a8>
 8001f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7e:	f001 fdad 	bl	8003adc <map>
 8001f82:	eef0 7a40 	vmov.f32	s15, s0
 8001f86:	4b79      	ldr	r3, [pc, #484]	@ (800216c <main+0x6bc>)
 8001f88:	edc3 7a00 	vstr	s15, [r3]
		vy = map((float) Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8001f8c:	4b6e      	ldr	r3, [pc, #440]	@ (8002148 <main+0x698>)
 8001f8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f92:	ed9f 2a74 	vldr	s4, [pc, #464]	@ 8002164 <main+0x6b4>
 8001f96:	eddf 1a74 	vldr	s3, [pc, #464]	@ 8002168 <main+0x6b8>
 8001f9a:	ed9f 1a6e 	vldr	s2, [pc, #440]	@ 8002154 <main+0x6a4>
 8001f9e:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8002158 <main+0x6a8>
 8001fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa6:	f001 fd99 	bl	8003adc <map>
 8001faa:	eef0 7a40 	vmov.f32	s15, s0
 8001fae:	4b70      	ldr	r3, [pc, #448]	@ (8002170 <main+0x6c0>)
 8001fb0:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8001fb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fb8:	486e      	ldr	r0, [pc, #440]	@ (8002174 <main+0x6c4>)
 8001fba:	f003 fbbb 	bl	8005734 <HAL_GPIO_ReadPin>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d10e      	bne.n	8001fe2 <main+0x532>
			Mode = 0;
 8001fc4:	4a6c      	ldr	r2, [pc, #432]	@ (8002178 <main+0x6c8>)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 8001fca:	4a6c      	ldr	r2, [pc, #432]	@ (800217c <main+0x6cc>)
 8001fcc:	2301      	movs	r3, #1
 8001fce:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f002 f96b 	bl	80042ac <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fdc:	4865      	ldr	r0, [pc, #404]	@ (8002174 <main+0x6c4>)
 8001fde:	f003 fbc1 	bl	8005764 <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1) {
 8001fe2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fe6:	4866      	ldr	r0, [pc, #408]	@ (8002180 <main+0x6d0>)
 8001fe8:	f003 fba4 	bl	8005734 <HAL_GPIO_ReadPin>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d108      	bne.n	8002004 <main+0x554>
			EmergencyState = 0;
 8001ff2:	4a62      	ldr	r2, [pc, #392]	@ (800217c <main+0x6cc>)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ffe:	485d      	ldr	r0, [pc, #372]	@ (8002174 <main+0x6c4>)
 8002000:	f003 fbb0 	bl	8005764 <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 8002004:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002008:	485d      	ldr	r0, [pc, #372]	@ (8002180 <main+0x6d0>)
 800200a:	f003 fb93 	bl	8005734 <HAL_GPIO_ReadPin>
 800200e:	4603      	mov	r3, r0
 8002010:	2b01      	cmp	r3, #1
 8002012:	d102      	bne.n	800201a <main+0x56a>
			Pen_Status = 0;
 8002014:	4a5b      	ldr	r2, [pc, #364]	@ (8002184 <main+0x6d4>)
 8002016:	2300      	movs	r3, #0
 8002018:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1) {
 800201a:	2104      	movs	r1, #4
 800201c:	4858      	ldr	r0, [pc, #352]	@ (8002180 <main+0x6d0>)
 800201e:	f003 fb89 	bl	8005734 <HAL_GPIO_ReadPin>
 8002022:	4603      	mov	r3, r0
 8002024:	2b01      	cmp	r3, #1
 8002026:	d102      	bne.n	800202e <main+0x57e>
			Pen_Status = 1;
 8002028:	4a56      	ldr	r2, [pc, #344]	@ (8002184 <main+0x6d4>)
 800202a:	2301      	movs	r3, #1
 800202c:	7013      	strb	r3, [r2, #0]
		}

		if (EmergencyState == 1) {
 800202e:	4b53      	ldr	r3, [pc, #332]	@ (800217c <main+0x6cc>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d103      	bne.n	800203e <main+0x58e>
			Mode = 0;
 8002036:	4a50      	ldr	r2, [pc, #320]	@ (8002178 <main+0x6c8>)
 8002038:	2300      	movs	r3, #0
 800203a:	7013      	strb	r3, [r2, #0]
 800203c:	e197      	b.n	800236e <main+0x8be>
		} else if (Receiver[2] < -30 && Receiver[4] < -30) {
 800203e:	4b42      	ldr	r3, [pc, #264]	@ (8002148 <main+0x698>)
 8002040:	edd3 7a02 	vldr	s15, [r3, #8]
 8002044:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002050:	d513      	bpl.n	800207a <main+0x5ca>
 8002052:	4b3d      	ldr	r3, [pc, #244]	@ (8002148 <main+0x698>)
 8002054:	edd3 7a04 	vldr	s15, [r3, #16]
 8002058:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800205c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002064:	d509      	bpl.n	800207a <main+0x5ca>
			Mode = 0;
 8002066:	4a44      	ldr	r2, [pc, #272]	@ (8002178 <main+0x6c8>)
 8002068:	2300      	movs	r3, #0
 800206a:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002072:	4840      	ldr	r0, [pc, #256]	@ (8002174 <main+0x6c4>)
 8002074:	f003 fb76 	bl	8005764 <HAL_GPIO_WritePin>
 8002078:	e179      	b.n	800236e <main+0x8be>
		} else if (Receiver[3] > 0 && IsPress == 0) {
 800207a:	4b33      	ldr	r3, [pc, #204]	@ (8002148 <main+0x698>)
 800207c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002080:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002088:	f340 816e 	ble.w	8002368 <main+0x8b8>
 800208c:	4b3e      	ldr	r3, [pc, #248]	@ (8002188 <main+0x6d8>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f040 8169 	bne.w	8002368 <main+0x8b8>
			IsPress = 1;
 8002096:	4a3c      	ldr	r2, [pc, #240]	@ (8002188 <main+0x6d8>)
 8002098:	2301      	movs	r3, #1
 800209a:	7013      	strb	r3, [r2, #0]
			calibState = CALIB_IDLE;
 800209c:	4a3b      	ldr	r2, [pc, #236]	@ (800218c <main+0x6dc>)
 800209e:	2300      	movs	r3, #0
 80020a0:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 80020a2:	4b29      	ldr	r3, [pc, #164]	@ (8002148 <main+0x698>)
 80020a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80020a8:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80020ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b4:	dd2c      	ble.n	8002110 <main+0x660>
 80020b6:	4b24      	ldr	r3, [pc, #144]	@ (8002148 <main+0x698>)
 80020b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80020bc:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80020c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c8:	d522      	bpl.n	8002110 <main+0x660>
 80020ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002148 <main+0x698>)
 80020cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80020d0:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80020d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020dc:	d518      	bpl.n	8002110 <main+0x660>
				if (Mode != 1) {
 80020de:	4b26      	ldr	r3, [pc, #152]	@ (8002178 <main+0x6c8>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d003      	beq.n	80020ee <main+0x63e>
					Mode = 1;
 80020e6:	4a24      	ldr	r2, [pc, #144]	@ (8002178 <main+0x6c8>)
 80020e8:	2301      	movs	r3, #1
 80020ea:	7013      	strb	r3, [r2, #0]
				if (Mode != 1) {
 80020ec:	e12d      	b.n	800234a <main+0x89a>
				} else {
					TargetX = End_x;
 80020ee:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <main+0x6e0>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <main+0x6e4>)
 80020f4:	601a      	str	r2, [r3, #0]
					TargetY = End_y;
 80020f6:	4b28      	ldr	r3, [pc, #160]	@ (8002198 <main+0x6e8>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4b28      	ldr	r3, [pc, #160]	@ (800219c <main+0x6ec>)
 80020fc:	601a      	str	r2, [r3, #0]
					TargetR = Revolute_QEIdata.RadPosition;
 80020fe:	4b28      	ldr	r3, [pc, #160]	@ (80021a0 <main+0x6f0>)
 8002100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002102:	4b28      	ldr	r3, [pc, #160]	@ (80021a4 <main+0x6f4>)
 8002104:	601a      	str	r2, [r3, #0]
					TargetP = Prismatic_QEIdata.mmPosition;
 8002106:	4b28      	ldr	r3, [pc, #160]	@ (80021a8 <main+0x6f8>)
 8002108:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800210a:	4b28      	ldr	r3, [pc, #160]	@ (80021ac <main+0x6fc>)
 800210c:	601a      	str	r2, [r3, #0]
				if (Mode != 1) {
 800210e:	e11c      	b.n	800234a <main+0x89a>
				}
			} else if (Receiver[2] > 30 && Receiver[4] < -30) {
 8002110:	4b0d      	ldr	r3, [pc, #52]	@ (8002148 <main+0x698>)
 8002112:	edd3 7a02 	vldr	s15, [r3, #8]
 8002116:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800211a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002122:	dd45      	ble.n	80021b0 <main+0x700>
 8002124:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <main+0x698>)
 8002126:	edd3 7a04 	vldr	s15, [r3, #16]
 800212a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800212e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002136:	d53b      	bpl.n	80021b0 <main+0x700>
				Mode = 2;
 8002138:	4a0f      	ldr	r2, [pc, #60]	@ (8002178 <main+0x6c8>)
 800213a:	2302      	movs	r3, #2
 800213c:	7013      	strb	r3, [r2, #0]
 800213e:	e104      	b.n	800234a <main+0x89a>
 8002140:	00000000 	.word	0x00000000
 8002144:	40977000 	.word	0x40977000
 8002148:	20000a28 	.word	0x20000a28
 800214c:	c2c80000 	.word	0xc2c80000
 8002150:	20000a5c 	.word	0x20000a5c
 8002154:	42c80000 	.word	0x42c80000
 8002158:	c2c80000 	.word	0xc2c80000
 800215c:	43fa0000 	.word	0x43fa0000
 8002160:	c3fa0000 	.word	0xc3fa0000
 8002164:	43960000 	.word	0x43960000
 8002168:	c3960000 	.word	0xc3960000
 800216c:	20000ae8 	.word	0x20000ae8
 8002170:	20000aec 	.word	0x20000aec
 8002174:	48000800 	.word	0x48000800
 8002178:	20000b28 	.word	0x20000b28
 800217c:	20000b29 	.word	0x20000b29
 8002180:	48000400 	.word	0x48000400
 8002184:	20000b2b 	.word	0x20000b2b
 8002188:	20000b2a 	.word	0x20000b2a
 800218c:	20000b7c 	.word	0x20000b7c
 8002190:	20000af0 	.word	0x20000af0
 8002194:	20000af8 	.word	0x20000af8
 8002198:	20000af4 	.word	0x20000af4
 800219c:	20000afc 	.word	0x20000afc
 80021a0:	20000a70 	.word	0x20000a70
 80021a4:	20000b00 	.word	0x20000b00
 80021a8:	20000ab0 	.word	0x20000ab0
 80021ac:	20000b04 	.word	0x20000b04
			} else if (Receiver[2] < -30 && Receiver[4] > -30
 80021b0:	4b66      	ldr	r3, [pc, #408]	@ (800234c <main+0x89c>)
 80021b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80021b6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80021ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c2:	d517      	bpl.n	80021f4 <main+0x744>
 80021c4:	4b61      	ldr	r3, [pc, #388]	@ (800234c <main+0x89c>)
 80021c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80021ca:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80021ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d6:	dd0d      	ble.n	80021f4 <main+0x744>
					&& Receiver[4] < 30) {
 80021d8:	4b5c      	ldr	r3, [pc, #368]	@ (800234c <main+0x89c>)
 80021da:	edd3 7a04 	vldr	s15, [r3, #16]
 80021de:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80021e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ea:	d503      	bpl.n	80021f4 <main+0x744>
				Mode = 3;
 80021ec:	4a58      	ldr	r2, [pc, #352]	@ (8002350 <main+0x8a0>)
 80021ee:	2303      	movs	r3, #3
 80021f0:	7013      	strb	r3, [r2, #0]
 80021f2:	e0aa      	b.n	800234a <main+0x89a>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 80021f4:	4b55      	ldr	r3, [pc, #340]	@ (800234c <main+0x89c>)
 80021f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80021fa:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80021fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002206:	dd21      	ble.n	800224c <main+0x79c>
 8002208:	4b50      	ldr	r3, [pc, #320]	@ (800234c <main+0x89c>)
 800220a:	edd3 7a02 	vldr	s15, [r3, #8]
 800220e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221a:	d517      	bpl.n	800224c <main+0x79c>
					&& Receiver[4] > -30 && Receiver[4] < 30) {
 800221c:	4b4b      	ldr	r3, [pc, #300]	@ (800234c <main+0x89c>)
 800221e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002222:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800222a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222e:	dd0d      	ble.n	800224c <main+0x79c>
 8002230:	4b46      	ldr	r3, [pc, #280]	@ (800234c <main+0x89c>)
 8002232:	edd3 7a04 	vldr	s15, [r3, #16]
 8002236:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800223a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800223e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002242:	d503      	bpl.n	800224c <main+0x79c>
				Mode = 4;
 8002244:	4a42      	ldr	r2, [pc, #264]	@ (8002350 <main+0x8a0>)
 8002246:	2304      	movs	r3, #4
 8002248:	7013      	strb	r3, [r2, #0]
 800224a:	e07e      	b.n	800234a <main+0x89a>
			} else if (Receiver[2] > 30 && Receiver[4] > -30
 800224c:	4b3f      	ldr	r3, [pc, #252]	@ (800234c <main+0x89c>)
 800224e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002252:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800225a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225e:	dd17      	ble.n	8002290 <main+0x7e0>
 8002260:	4b3a      	ldr	r3, [pc, #232]	@ (800234c <main+0x89c>)
 8002262:	edd3 7a04 	vldr	s15, [r3, #16]
 8002266:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800226a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002272:	dd0d      	ble.n	8002290 <main+0x7e0>
					&& Receiver[4] < 30) {
 8002274:	4b35      	ldr	r3, [pc, #212]	@ (800234c <main+0x89c>)
 8002276:	edd3 7a04 	vldr	s15, [r3, #16]
 800227a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800227e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002286:	d503      	bpl.n	8002290 <main+0x7e0>
				Mode = 5;
 8002288:	4a31      	ldr	r2, [pc, #196]	@ (8002350 <main+0x8a0>)
 800228a:	2305      	movs	r3, #5
 800228c:	7013      	strb	r3, [r2, #0]
 800228e:	e05c      	b.n	800234a <main+0x89a>
			} else if (Receiver[2] < -30 && Receiver[4] > 30) {
 8002290:	4b2e      	ldr	r3, [pc, #184]	@ (800234c <main+0x89c>)
 8002292:	edd3 7a02 	vldr	s15, [r3, #8]
 8002296:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800229a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	d50d      	bpl.n	80022c0 <main+0x810>
 80022a4:	4b29      	ldr	r3, [pc, #164]	@ (800234c <main+0x89c>)
 80022a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80022aa:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80022ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b6:	dd03      	ble.n	80022c0 <main+0x810>
				Mode = 6;
 80022b8:	4a25      	ldr	r2, [pc, #148]	@ (8002350 <main+0x8a0>)
 80022ba:	2306      	movs	r3, #6
 80022bc:	7013      	strb	r3, [r2, #0]
 80022be:	e044      	b.n	800234a <main+0x89a>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 80022c0:	4b22      	ldr	r3, [pc, #136]	@ (800234c <main+0x89c>)
 80022c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80022c6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80022ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d2:	dd17      	ble.n	8002304 <main+0x854>
 80022d4:	4b1d      	ldr	r3, [pc, #116]	@ (800234c <main+0x89c>)
 80022d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80022da:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80022de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e6:	d50d      	bpl.n	8002304 <main+0x854>
					&& Receiver[4] > 30) {
 80022e8:	4b18      	ldr	r3, [pc, #96]	@ (800234c <main+0x89c>)
 80022ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80022ee:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80022f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	dd03      	ble.n	8002304 <main+0x854>
				Mode = 7;
 80022fc:	4a14      	ldr	r2, [pc, #80]	@ (8002350 <main+0x8a0>)
 80022fe:	2307      	movs	r3, #7
 8002300:	7013      	strb	r3, [r2, #0]
 8002302:	e022      	b.n	800234a <main+0x89a>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8002304:	4b11      	ldr	r3, [pc, #68]	@ (800234c <main+0x89c>)
 8002306:	edd3 7a02 	vldr	s15, [r3, #8]
 800230a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800230e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002316:	dc00      	bgt.n	800231a <main+0x86a>
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 8002318:	e029      	b.n	800236e <main+0x8be>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 800231a:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <main+0x89c>)
 800231c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002320:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232c:	dc00      	bgt.n	8002330 <main+0x880>
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 800232e:	e01e      	b.n	800236e <main+0x8be>
				loop_counter = 0;
 8002330:	4a08      	ldr	r2, [pc, #32]	@ (8002354 <main+0x8a4>)
 8002332:	2300      	movs	r3, #0
 8002334:	6013      	str	r3, [r2, #0]
				TargetR = 4.18879;
 8002336:	4a08      	ldr	r2, [pc, #32]	@ (8002358 <main+0x8a8>)
 8002338:	4b08      	ldr	r3, [pc, #32]	@ (800235c <main+0x8ac>)
 800233a:	6013      	str	r3, [r2, #0]
				TargetP = 50;
 800233c:	4a08      	ldr	r2, [pc, #32]	@ (8002360 <main+0x8b0>)
 800233e:	4b09      	ldr	r3, [pc, #36]	@ (8002364 <main+0x8b4>)
 8002340:	6013      	str	r3, [r2, #0]
				Mode = 8;
 8002342:	4a03      	ldr	r2, [pc, #12]	@ (8002350 <main+0x8a0>)
 8002344:	2308      	movs	r3, #8
 8002346:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 8002348:	e011      	b.n	800236e <main+0x8be>
 800234a:	e010      	b.n	800236e <main+0x8be>
 800234c:	20000a28 	.word	0x20000a28
 8002350:	20000b28 	.word	0x20000b28
 8002354:	20000b98 	.word	0x20000b98
 8002358:	20000b00 	.word	0x20000b00
 800235c:	40860a91 	.word	0x40860a91
 8002360:	20000b04 	.word	0x20000b04
 8002364:	42480000 	.word	0x42480000
			}
		} else {
			IsPress = 0;
 8002368:	4acd      	ldr	r2, [pc, #820]	@ (80026a0 <main+0xbf0>)
 800236a:	2300      	movs	r3, #0
 800236c:	7013      	strb	r3, [r2, #0]
//			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
//		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<STOP>> ////////////////////////////
		if (Mode == 0) {
 800236e:	4bcd      	ldr	r3, [pc, #820]	@ (80026a4 <main+0xbf4>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10c      	bne.n	8002390 <main+0x8e0>
			Set_Motor(0, 0);
 8002376:	ed9f 0acc 	vldr	s0, [pc, #816]	@ 80026a8 <main+0xbf8>
 800237a:	2000      	movs	r0, #0
 800237c:	f001 ff18 	bl	80041b0 <Set_Motor>
			Set_Motor(1, 0);
 8002380:	ed9f 0ac9 	vldr	s0, [pc, #804]	@ 80026a8 <main+0xbf8>
 8002384:	2001      	movs	r0, #1
 8002386:	f001 ff13 	bl	80041b0 <Set_Motor>
			Set_Servo(0);
 800238a:	2000      	movs	r0, #0
 800238c:	f001 ff8e 	bl	80042ac <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MANUAL>> //////////////////////////
		if (Mode == 1) {
 8002390:	4bc4      	ldr	r3, [pc, #784]	@ (80026a4 <main+0xbf4>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b01      	cmp	r3, #1
 8002396:	f040 8102 	bne.w	800259e <main+0xaee>
			//////////////////////// <<CONTROL>> /////////////////////////
//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
			TargetRVel =
					(map((float) Receiver[0], -100.00, 100.00, -1.00, 1.00))
 800239a:	4bc4      	ldr	r3, [pc, #784]	@ (80026ac <main+0xbfc>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 80023a4:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 80023a8:	ed9f 1ac1 	vldr	s2, [pc, #772]	@ 80026b0 <main+0xc00>
 80023ac:	eddf 0ac1 	vldr	s1, [pc, #772]	@ 80026b4 <main+0xc04>
 80023b0:	eeb0 0a67 	vmov.f32	s0, s15
 80023b4:	f001 fb92 	bl	8003adc <map>
 80023b8:	eef0 7a40 	vmov.f32	s15, s0
							* -1;
 80023bc:	eef1 7a67 	vneg.f32	s15, s15
			TargetRVel =
 80023c0:	4bbd      	ldr	r3, [pc, #756]	@ (80026b8 <main+0xc08>)
 80023c2:	edc3 7a00 	vstr	s15, [r3]
			TargetPVel = map((float) Receiver[1], -100.00, 100.00, -500.00,
 80023c6:	4bb9      	ldr	r3, [pc, #740]	@ (80026ac <main+0xbfc>)
 80023c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80023cc:	ed9f 2abb 	vldr	s4, [pc, #748]	@ 80026bc <main+0xc0c>
 80023d0:	eddf 1abb 	vldr	s3, [pc, #748]	@ 80026c0 <main+0xc10>
 80023d4:	ed9f 1ab6 	vldr	s2, [pc, #728]	@ 80026b0 <main+0xc00>
 80023d8:	eddf 0ab6 	vldr	s1, [pc, #728]	@ 80026b4 <main+0xc04>
 80023dc:	eeb0 0a67 	vmov.f32	s0, s15
 80023e0:	f001 fb7c 	bl	8003adc <map>
 80023e4:	eef0 7a40 	vmov.f32	s15, s0
 80023e8:	4bb6      	ldr	r3, [pc, #728]	@ (80026c4 <main+0xc14>)
 80023ea:	edc3 7a00 	vstr	s15, [r3]
					500.00);
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MOTOR>> ///////////////////////////
			R_Velo_Error = (TargetRVel - Revolute_QEIdata.AngularVelocity_rad)
 80023ee:	4bb2      	ldr	r3, [pc, #712]	@ (80026b8 <main+0xc08>)
 80023f0:	ed93 7a00 	vldr	s14, [r3]
 80023f4:	4bb4      	ldr	r3, [pc, #720]	@ (80026c8 <main+0xc18>)
 80023f6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80023fa:	ee77 7a67 	vsub.f32	s15, s14, s15
					* -1;
 80023fe:	eef1 7a67 	vneg.f32	s15, s15
			R_Velo_Error = (TargetRVel - Revolute_QEIdata.AngularVelocity_rad)
 8002402:	4bb2      	ldr	r3, [pc, #712]	@ (80026cc <main+0xc1c>)
 8002404:	edc3 7a00 	vstr	s15, [r3]
			P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity_mm;
 8002408:	4bae      	ldr	r3, [pc, #696]	@ (80026c4 <main+0xc14>)
 800240a:	ed93 7a00 	vldr	s14, [r3]
 800240e:	4bb0      	ldr	r3, [pc, #704]	@ (80026d0 <main+0xc20>)
 8002410:	edd3 7a08 	vldr	s15, [r3, #32]
 8002414:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002418:	4bae      	ldr	r3, [pc, #696]	@ (80026d4 <main+0xc24>)
 800241a:	edc3 7a00 	vstr	s15, [r3]
//			PID.Kd = 0.0;
//			arm_pid_init_f32(&PID, 1);
//			P_Speed = arm_pid_f32(&PID, P_Velo_Error);

			static uint64_t timestampState1 = 0;
			int64_t currentTimeState1 = micros();
 800241e:	f001 fc6b 	bl	8003cf8 <micros>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
			if (currentTimeState1 > timestampState1) {
 800242a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800242e:	4baa      	ldr	r3, [pc, #680]	@ (80026d8 <main+0xc28>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	4282      	cmp	r2, r0
 8002436:	418b      	sbcs	r3, r1
 8002438:	d23f      	bcs.n	80024ba <main+0xa0a>
				timestampState1 = currentTimeState1 + 10000;		//us
 800243a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800243e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002442:	1851      	adds	r1, r2, r1
 8002444:	6539      	str	r1, [r7, #80]	@ 0x50
 8002446:	f143 0300 	adc.w	r3, r3, #0
 800244a:	657b      	str	r3, [r7, #84]	@ 0x54
 800244c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002450:	4ba1      	ldr	r3, [pc, #644]	@ (80026d8 <main+0xc28>)
 8002452:	e9c3 0100 	strd	r0, r1, [r3]
				R_Speed = PID_Update(R_Velo_Error, 100.00f, 0.10f, 0.00f, 0.01f,
 8002456:	4b9d      	ldr	r3, [pc, #628]	@ (80026cc <main+0xc1c>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	489f      	ldr	r0, [pc, #636]	@ (80026dc <main+0xc2c>)
 800245e:	ed9f 3a94 	vldr	s6, [pc, #592]	@ 80026b0 <main+0xc00>
 8002462:	eddf 2a94 	vldr	s5, [pc, #592]	@ 80026b4 <main+0xc04>
 8002466:	ed9f 2a9e 	vldr	s4, [pc, #632]	@ 80026e0 <main+0xc30>
 800246a:	eddf 1a8f 	vldr	s3, [pc, #572]	@ 80026a8 <main+0xbf8>
 800246e:	ed9f 1a9d 	vldr	s2, [pc, #628]	@ 80026e4 <main+0xc34>
 8002472:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 80026b0 <main+0xc00>
 8002476:	eeb0 0a67 	vmov.f32	s0, s15
 800247a:	f001 fc57 	bl	8003d2c <PID_Update>
 800247e:	eef0 7a40 	vmov.f32	s15, s0
 8002482:	4b99      	ldr	r3, [pc, #612]	@ (80026e8 <main+0xc38>)
 8002484:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_r_v);
				P_Speed = PID_Update(P_Velo_Error, 0.2f, 1.5f, 0.00f, 0.01f,
 8002488:	4b92      	ldr	r3, [pc, #584]	@ (80026d4 <main+0xc24>)
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	4897      	ldr	r0, [pc, #604]	@ (80026ec <main+0xc3c>)
 8002490:	ed9f 3a87 	vldr	s6, [pc, #540]	@ 80026b0 <main+0xc00>
 8002494:	eddf 2a87 	vldr	s5, [pc, #540]	@ 80026b4 <main+0xc04>
 8002498:	ed9f 2a91 	vldr	s4, [pc, #580]	@ 80026e0 <main+0xc30>
 800249c:	eddf 1a82 	vldr	s3, [pc, #520]	@ 80026a8 <main+0xbf8>
 80024a0:	eeb7 1a08 	vmov.f32	s2, #120	@ 0x3fc00000  1.5
 80024a4:	eddf 0a92 	vldr	s1, [pc, #584]	@ 80026f0 <main+0xc40>
 80024a8:	eeb0 0a67 	vmov.f32	s0, s15
 80024ac:	f001 fc3e 	bl	8003d2c <PID_Update>
 80024b0:	eef0 7a40 	vmov.f32	s15, s0
 80024b4:	4b8f      	ldr	r3, [pc, #572]	@ (80026f4 <main+0xc44>)
 80024b6:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_p_v);
			}

			R_Speed = Receiver[0];
 80024ba:	4b7c      	ldr	r3, [pc, #496]	@ (80026ac <main+0xbfc>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4b8a      	ldr	r3, [pc, #552]	@ (80026e8 <main+0xc38>)
 80024c0:	601a      	str	r2, [r3, #0]
//			P_Speed = Receiver[1];

			if (Revolute_QEIdata.RadPosition < -1.91986 && R_Speed > 0) {
 80024c2:	4b81      	ldr	r3, [pc, #516]	@ (80026c8 <main+0xc18>)
 80024c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe f80a 	bl	80004e0 <__aeabi_f2d>
 80024cc:	a370      	add	r3, pc, #448	@ (adr r3, 8002690 <main+0xbe0>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	f7fe facf 	bl	8000a74 <__aeabi_dcmplt>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00b      	beq.n	80024f4 <main+0xa44>
 80024dc:	4b82      	ldr	r3, [pc, #520]	@ (80026e8 <main+0xc38>)
 80024de:	edd3 7a00 	vldr	s15, [r3]
 80024e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ea:	dd03      	ble.n	80024f4 <main+0xa44>
				R_Speed = 0;
 80024ec:	4a7e      	ldr	r2, [pc, #504]	@ (80026e8 <main+0xc38>)
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	6013      	str	r3, [r2, #0]
			}
			if (Revolute_QEIdata.RadPosition > 5.06145 && R_Speed < 0) {
 80024f4:	4b74      	ldr	r3, [pc, #464]	@ (80026c8 <main+0xc18>)
 80024f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fd fff1 	bl	80004e0 <__aeabi_f2d>
 80024fe:	a366      	add	r3, pc, #408	@ (adr r3, 8002698 <main+0xbe8>)
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	f7fe fad4 	bl	8000ab0 <__aeabi_dcmpgt>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <main+0xa76>
 800250e:	4b76      	ldr	r3, [pc, #472]	@ (80026e8 <main+0xc38>)
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251c:	d503      	bpl.n	8002526 <main+0xa76>
				R_Speed = 0;
 800251e:	4a72      	ldr	r2, [pc, #456]	@ (80026e8 <main+0xc38>)
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition > 305 && P_Speed > 0) {
 8002526:	4b6a      	ldr	r3, [pc, #424]	@ (80026d0 <main+0xc20>)
 8002528:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800252c:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 80026f8 <main+0xc48>
 8002530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002538:	dd0b      	ble.n	8002552 <main+0xaa2>
 800253a:	4b6e      	ldr	r3, [pc, #440]	@ (80026f4 <main+0xc44>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002548:	dd03      	ble.n	8002552 <main+0xaa2>
				P_Speed = 0;
 800254a:	4a6a      	ldr	r2, [pc, #424]	@ (80026f4 <main+0xc44>)
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition < -1 && P_Speed < 0) {
 8002552:	4b5f      	ldr	r3, [pc, #380]	@ (80026d0 <main+0xc20>)
 8002554:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002558:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800255c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002564:	d50b      	bpl.n	800257e <main+0xace>
 8002566:	4b63      	ldr	r3, [pc, #396]	@ (80026f4 <main+0xc44>)
 8002568:	edd3 7a00 	vldr	s15, [r3]
 800256c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	d503      	bpl.n	800257e <main+0xace>
				P_Speed = 0;
 8002576:	4a5f      	ldr	r2, [pc, #380]	@ (80026f4 <main+0xc44>)
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	6013      	str	r3, [r2, #0]
			}

			Set_Motor(0, R_Speed);
 800257e:	4b5a      	ldr	r3, [pc, #360]	@ (80026e8 <main+0xc38>)
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	eeb0 0a67 	vmov.f32	s0, s15
 8002588:	2000      	movs	r0, #0
 800258a:	f001 fe11 	bl	80041b0 <Set_Motor>
			Set_Motor(1, P_Speed);
 800258e:	4b59      	ldr	r3, [pc, #356]	@ (80026f4 <main+0xc44>)
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	eeb0 0a67 	vmov.f32	s0, s15
 8002598:	2001      	movs	r0, #1
 800259a:	f001 fe09 	bl	80041b0 <Set_Motor>
			//////////////////////////////////////////////////////////////
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<GOTO>> ////////////////////////////
		if (Mode == 2) {
 800259e:	4b41      	ldr	r3, [pc, #260]	@ (80026a4 <main+0xbf4>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	f040 8105 	bne.w	80027b2 <main+0xd02>
			R_Pos_Error = (TargetR - Revolute_QEIdata.RadPosition) * -1;
 80025a8:	4b54      	ldr	r3, [pc, #336]	@ (80026fc <main+0xc4c>)
 80025aa:	ed93 7a00 	vldr	s14, [r3]
 80025ae:	4b46      	ldr	r3, [pc, #280]	@ (80026c8 <main+0xc18>)
 80025b0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80025b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b8:	eef1 7a67 	vneg.f32	s15, s15
 80025bc:	4b50      	ldr	r3, [pc, #320]	@ (8002700 <main+0xc50>)
 80025be:	edc3 7a00 	vstr	s15, [r3]
//			PID.Ki = 10;
//			PID.Kd = 0.1;
//			arm_pid_init_f32(&PID, 1);
//			R_Speed = arm_pid_f32(&PID, R_Pos_Error);
//
			P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 80025c2:	4b50      	ldr	r3, [pc, #320]	@ (8002704 <main+0xc54>)
 80025c4:	ed93 7a00 	vldr	s14, [r3]
 80025c8:	4b41      	ldr	r3, [pc, #260]	@ (80026d0 <main+0xc20>)
 80025ca:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80025ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002708 <main+0xc58>)
 80025d4:	edc3 7a00 	vstr	s15, [r3]
//			PID.Kd = 0.25;
//			arm_pid_init_f32(&PID, 1);
//			P_Speed = arm_pid_f32(&PID, P_Pos_Error);

			static uint64_t timestampState2 = 0;
			int64_t currentTimeState2 = micros();
 80025d8:	f001 fb8e 	bl	8003cf8 <micros>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
			if (currentTimeState2 > timestampState2) {
 80025e4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80025e8:	4b48      	ldr	r3, [pc, #288]	@ (800270c <main+0xc5c>)
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	4282      	cmp	r2, r0
 80025f0:	418b      	sbcs	r3, r1
 80025f2:	d23f      	bcs.n	8002674 <main+0xbc4>
				timestampState2 = currentTimeState2 + 10000;		//us
 80025f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80025f8:	f242 7110 	movw	r1, #10000	@ 0x2710
 80025fc:	1851      	adds	r1, r2, r1
 80025fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002600:	f143 0300 	adc.w	r3, r3, #0
 8002604:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002606:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800260a:	4b40      	ldr	r3, [pc, #256]	@ (800270c <main+0xc5c>)
 800260c:	e9c3 0100 	strd	r0, r1, [r3]
				R_Speed = PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f, 0.01f,
 8002610:	4b3b      	ldr	r3, [pc, #236]	@ (8002700 <main+0xc50>)
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	483e      	ldr	r0, [pc, #248]	@ (8002710 <main+0xc60>)
 8002618:	ed9f 3a25 	vldr	s6, [pc, #148]	@ 80026b0 <main+0xc00>
 800261c:	eddf 2a25 	vldr	s5, [pc, #148]	@ 80026b4 <main+0xc04>
 8002620:	ed9f 2a2f 	vldr	s4, [pc, #188]	@ 80026e0 <main+0xc30>
 8002624:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 8002628:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 800262c:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 8002630:	eeb0 0a67 	vmov.f32	s0, s15
 8002634:	f001 fb7a 	bl	8003d2c <PID_Update>
 8002638:	eef0 7a40 	vmov.f32	s15, s0
 800263c:	4b2a      	ldr	r3, [pc, #168]	@ (80026e8 <main+0xc38>)
 800263e:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_r);
				P_Speed = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f,
 8002642:	4b31      	ldr	r3, [pc, #196]	@ (8002708 <main+0xc58>)
 8002644:	edd3 7a00 	vldr	s15, [r3]
 8002648:	4832      	ldr	r0, [pc, #200]	@ (8002714 <main+0xc64>)
 800264a:	ed9f 3a19 	vldr	s6, [pc, #100]	@ 80026b0 <main+0xc00>
 800264e:	eddf 2a19 	vldr	s5, [pc, #100]	@ 80026b4 <main+0xc04>
 8002652:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 80026e0 <main+0xc30>
 8002656:	eddf 1a30 	vldr	s3, [pc, #192]	@ 8002718 <main+0xc68>
 800265a:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 800271c <main+0xc6c>
 800265e:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8002720 <main+0xc70>
 8002662:	eeb0 0a67 	vmov.f32	s0, s15
 8002666:	f001 fb61 	bl	8003d2c <PID_Update>
 800266a:	eef0 7a40 	vmov.f32	s15, s0
 800266e:	4b21      	ldr	r3, [pc, #132]	@ (80026f4 <main+0xc44>)
 8002670:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_p);
			}

			Set_Motor(0, R_Speed);
 8002674:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <main+0xc38>)
 8002676:	edd3 7a00 	vldr	s15, [r3]
 800267a:	eeb0 0a67 	vmov.f32	s0, s15
 800267e:	2000      	movs	r0, #0
 8002680:	f001 fd96 	bl	80041b0 <Set_Motor>
			Set_Motor(1, P_Speed);
 8002684:	4b1b      	ldr	r3, [pc, #108]	@ (80026f4 <main+0xc44>)
 8002686:	edd3 7a00 	vldr	s15, [r3]
 800268a:	e04b      	b.n	8002724 <main+0xc74>
 800268c:	f3af 8000 	nop.w
 8002690:	1e8e6080 	.word	0x1e8e6080
 8002694:	bffeb7bf 	.word	0xbffeb7bf
 8002698:	bfb15b57 	.word	0xbfb15b57
 800269c:	40143eec 	.word	0x40143eec
 80026a0:	20000b2a 	.word	0x20000b2a
 80026a4:	20000b28 	.word	0x20000b28
 80026a8:	00000000 	.word	0x00000000
 80026ac:	20000a28 	.word	0x20000a28
 80026b0:	42c80000 	.word	0x42c80000
 80026b4:	c2c80000 	.word	0xc2c80000
 80026b8:	20000b08 	.word	0x20000b08
 80026bc:	43fa0000 	.word	0x43fa0000
 80026c0:	c3fa0000 	.word	0xc3fa0000
 80026c4:	20000b0c 	.word	0x20000b0c
 80026c8:	20000a70 	.word	0x20000a70
 80026cc:	20000b18 	.word	0x20000b18
 80026d0:	20000ab0 	.word	0x20000ab0
 80026d4:	20000b1c 	.word	0x20000b1c
 80026d8:	20001220 	.word	0x20001220
 80026dc:	20000b6c 	.word	0x20000b6c
 80026e0:	3c23d70a 	.word	0x3c23d70a
 80026e4:	3dcccccd 	.word	0x3dcccccd
 80026e8:	20000b20 	.word	0x20000b20
 80026ec:	20000b74 	.word	0x20000b74
 80026f0:	3e4ccccd 	.word	0x3e4ccccd
 80026f4:	20000b24 	.word	0x20000b24
 80026f8:	43988000 	.word	0x43988000
 80026fc:	20000b00 	.word	0x20000b00
 8002700:	20000b10 	.word	0x20000b10
 8002704:	20000b04 	.word	0x20000b04
 8002708:	20000b14 	.word	0x20000b14
 800270c:	20001228 	.word	0x20001228
 8002710:	20000b5c 	.word	0x20000b5c
 8002714:	20000b64 	.word	0x20000b64
 8002718:	3e19999a 	.word	0x3e19999a
 800271c:	3f99999a 	.word	0x3f99999a
 8002720:	3eaa7efa 	.word	0x3eaa7efa
 8002724:	eeb0 0a67 	vmov.f32	s0, s15
 8002728:	2001      	movs	r0, #1
 800272a:	f001 fd41 	bl	80041b0 <Set_Motor>
			if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 800272e:	4bb7      	ldr	r3, [pc, #732]	@ (8002a0c <main+0xf5c>)
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	eef0 7ae7 	vabs.f32	s15, s15
 8002738:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 8002a10 <main+0xf60>
 800273c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002744:	d52c      	bpl.n	80027a0 <main+0xcf0>
					&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 8002746:	4bb3      	ldr	r3, [pc, #716]	@ (8002a14 <main+0xf64>)
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	eef0 7ae7 	vabs.f32	s15, s15
 8002750:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002a18 <main+0xf68>
 8002754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275c:	d520      	bpl.n	80027a0 <main+0xcf0>
				/* within window —— start or continue timer */
				if (lock_timer_us == 0)
 800275e:	4baf      	ldr	r3, [pc, #700]	@ (8002a1c <main+0xf6c>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	4313      	orrs	r3, r2
 8002766:	d107      	bne.n	8002778 <main+0xcc8>
					lock_timer_us = micros(); /* start timing */
 8002768:	f001 fac6 	bl	8003cf8 <micros>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	49aa      	ldr	r1, [pc, #680]	@ (8002a1c <main+0xf6c>)
 8002772:	e9c1 2300 	strd	r2, r3, [r1]
				if (lock_timer_us == 0)
 8002776:	e01b      	b.n	80027b0 <main+0xd00>

				else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8002778:	f001 fabe 	bl	8003cf8 <micros>
 800277c:	4ba7      	ldr	r3, [pc, #668]	@ (8002a1c <main+0xf6c>)
 800277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002782:	1a84      	subs	r4, r0, r2
 8002784:	eb61 0503 	sbc.w	r5, r1, r3
 8002788:	4ba5      	ldr	r3, [pc, #660]	@ (8002a20 <main+0xf70>)
 800278a:	429c      	cmp	r4, r3
 800278c:	f175 0300 	sbcs.w	r3, r5, #0
 8002790:	d30e      	bcc.n	80027b0 <main+0xd00>
					Set_Servo(1);
 8002792:	2001      	movs	r0, #1
 8002794:	f001 fd8a 	bl	80042ac <Set_Servo>
					Mode = 1;
 8002798:	4aa2      	ldr	r2, [pc, #648]	@ (8002a24 <main+0xf74>)
 800279a:	2301      	movs	r3, #1
 800279c:	7013      	strb	r3, [r2, #0]
				if (lock_timer_us == 0)
 800279e:	e007      	b.n	80027b0 <main+0xd00>
				}
			} else {
				lock_timer_us = 0;
 80027a0:	499e      	ldr	r1, [pc, #632]	@ (8002a1c <main+0xf6c>)
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	e9c1 2300 	strd	r2, r3, [r1]
 80027ae:	e000      	b.n	80027b2 <main+0xd02>
				if (lock_timer_us == 0)
 80027b0:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<CALIBRATING>> /////////////////////
		if (Mode == 3) {
 80027b2:	4b9c      	ldr	r3, [pc, #624]	@ (8002a24 <main+0xf74>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	f040 825c 	bne.w	8002c74 <main+0x11c4>
			switch (calibState) {
 80027bc:	4b9a      	ldr	r3, [pc, #616]	@ (8002a28 <main+0xf78>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b0c      	cmp	r3, #12
 80027c2:	f200 8257 	bhi.w	8002c74 <main+0x11c4>
 80027c6:	a201      	add	r2, pc, #4	@ (adr r2, 80027cc <main+0xd1c>)
 80027c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027cc:	08002801 	.word	0x08002801
 80027d0:	08002837 	.word	0x08002837
 80027d4:	0800287d 	.word	0x0800287d
 80027d8:	080028c7 	.word	0x080028c7
 80027dc:	08002911 	.word	0x08002911
 80027e0:	0800295f 	.word	0x0800295f
 80027e4:	080029b7 	.word	0x080029b7
 80027e8:	080029f7 	.word	0x080029f7
 80027ec:	08002a9f 	.word	0x08002a9f
 80027f0:	08002b0b 	.word	0x08002b0b
 80027f4:	08002b77 	.word	0x08002b77
 80027f8:	08002be1 	.word	0x08002be1
 80027fc:	08002c33 	.word	0x08002c33
			case CALIB_IDLE:
				Set_Motor(0, 0);
 8002800:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8002a2c <main+0xf7c>
 8002804:	2000      	movs	r0, #0
 8002806:	f001 fcd3 	bl	80041b0 <Set_Motor>
				Set_Motor(1, 0);
 800280a:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 8002a2c <main+0xf7c>
 800280e:	2001      	movs	r0, #1
 8002810:	f001 fcce 	bl	80041b0 <Set_Motor>
				P_Limit = 0;
 8002814:	4a86      	ldr	r2, [pc, #536]	@ (8002a30 <main+0xf80>)
 8002816:	2300      	movs	r3, #0
 8002818:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 800281a:	4a86      	ldr	r2, [pc, #536]	@ (8002a34 <main+0xf84>)
 800281c:	2300      	movs	r3, #0
 800281e:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 8002820:	4a81      	ldr	r2, [pc, #516]	@ (8002a28 <main+0xf78>)
 8002822:	2301      	movs	r3, #1
 8002824:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 8002826:	f001 fa67 	bl	8003cf8 <micros>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4982      	ldr	r1, [pc, #520]	@ (8002a38 <main+0xf88>)
 8002830:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8002834:	e21e      	b.n	8002c74 <main+0x11c4>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80) {
 8002836:	4b81      	ldr	r3, [pc, #516]	@ (8002a3c <main+0xf8c>)
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002a40 <main+0xf90>
 8002840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002848:	dd06      	ble.n	8002858 <main+0xda8>
					Cal_Side = 1;
 800284a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a44 <main+0xf94>)
 800284c:	2301      	movs	r3, #1
 800284e:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002850:	4a75      	ldr	r2, [pc, #468]	@ (8002a28 <main+0xf78>)
 8002852:	2302      	movs	r3, #2
 8002854:	7013      	strb	r3, [r2, #0]
				} else if (Receiver[0] < -80) {
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 8002856:	e20d      	b.n	8002c74 <main+0x11c4>
				} else if (Receiver[0] < -80) {
 8002858:	4b78      	ldr	r3, [pc, #480]	@ (8002a3c <main+0xf8c>)
 800285a:	edd3 7a00 	vldr	s15, [r3]
 800285e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002a48 <main+0xf98>
 8002862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286a:	d400      	bmi.n	800286e <main+0xdbe>
				break;
 800286c:	e202      	b.n	8002c74 <main+0x11c4>
					Cal_Side = 2;
 800286e:	4a75      	ldr	r2, [pc, #468]	@ (8002a44 <main+0xf94>)
 8002870:	2302      	movs	r3, #2
 8002872:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002874:	4a6c      	ldr	r2, [pc, #432]	@ (8002a28 <main+0xf78>)
 8002876:	2302      	movs	r3, #2
 8002878:	7013      	strb	r3, [r2, #0]
				break;
 800287a:	e1fb      	b.n	8002c74 <main+0x11c4>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -15);
 800287c:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8002880:	2001      	movs	r0, #1
 8002882:	f001 fc95 	bl	80041b0 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8002886:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800288a:	4870      	ldr	r0, [pc, #448]	@ (8002a4c <main+0xf9c>)
 800288c:	f002 ff52 	bl	8005734 <HAL_GPIO_ReadPin>
 8002890:	4603      	mov	r3, r0
 8002892:	2b01      	cmp	r3, #1
 8002894:	d004      	beq.n	80028a0 <main+0xdf0>
 8002896:	4b66      	ldr	r3, [pc, #408]	@ (8002a30 <main+0xf80>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 81d9 	beq.w	8002c52 <main+0x11a2>
					Set_Motor(1, 0);
 80028a0:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 8002a2c <main+0xf7c>
 80028a4:	2001      	movs	r0, #1
 80028a6:	f001 fc83 	bl	80041b0 <Set_Motor>
					calib_timer = micros();
 80028aa:	f001 fa25 	bl	8003cf8 <micros>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4961      	ldr	r1, [pc, #388]	@ (8002a38 <main+0xf88>)
 80028b4:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80028b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002a30 <main+0xf80>)
 80028ba:	2300      	movs	r3, #0
 80028bc:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 80028be:	4a5a      	ldr	r2, [pc, #360]	@ (8002a28 <main+0xf78>)
 80028c0:	2303      	movs	r3, #3
 80028c2:	7013      	strb	r3, [r2, #0]
				}
				break;
 80028c4:	e1c5      	b.n	8002c52 <main+0x11a2>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 80028c6:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8002a2c <main+0xf7c>
 80028ca:	2001      	movs	r0, #1
 80028cc:	f001 fc70 	bl	80041b0 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 80028d0:	f001 fa12 	bl	8003cf8 <micros>
 80028d4:	4b58      	ldr	r3, [pc, #352]	@ (8002a38 <main+0xf88>)
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	ebb0 0802 	subs.w	r8, r0, r2
 80028de:	eb61 0903 	sbc.w	r9, r1, r3
 80028e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a50 <main+0xfa0>)
 80028e4:	4598      	cmp	r8, r3
 80028e6:	f179 0300 	sbcs.w	r3, r9, #0
 80028ea:	d311      	bcc.n	8002910 <main+0xe60>
					Set_Motor(1, 15);
 80028ec:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 80028f0:	2001      	movs	r0, #1
 80028f2:	f001 fc5d 	bl	80041b0 <Set_Motor>
					calib_timer = micros();
 80028f6:	f001 f9ff 	bl	8003cf8 <micros>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	494e      	ldr	r1, [pc, #312]	@ (8002a38 <main+0xf88>)
 8002900:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002904:	4a4a      	ldr	r2, [pc, #296]	@ (8002a30 <main+0xf80>)
 8002906:	2300      	movs	r3, #0
 8002908:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 800290a:	4a47      	ldr	r2, [pc, #284]	@ (8002a28 <main+0xf78>)
 800290c:	2304      	movs	r3, #4
 800290e:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 15);
 8002910:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002914:	2001      	movs	r0, #1
 8002916:	f001 fc4b 	bl	80041b0 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 800291a:	f001 f9ed 	bl	8003cf8 <micros>
 800291e:	4b46      	ldr	r3, [pc, #280]	@ (8002a38 <main+0xf88>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	ebb0 0a02 	subs.w	sl, r0, r2
 8002928:	eb61 0b03 	sbc.w	fp, r1, r3
 800292c:	4b48      	ldr	r3, [pc, #288]	@ (8002a50 <main+0xfa0>)
 800292e:	459a      	cmp	sl, r3
 8002930:	f17b 0300 	sbcs.w	r3, fp, #0
 8002934:	f0c0 818f 	bcc.w	8002c56 <main+0x11a6>
					Set_Motor(1, 0);
 8002938:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8002a2c <main+0xf7c>
 800293c:	2001      	movs	r0, #1
 800293e:	f001 fc37 	bl	80041b0 <Set_Motor>
					calib_timer = micros();
 8002942:	f001 f9d9 	bl	8003cf8 <micros>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	493b      	ldr	r1, [pc, #236]	@ (8002a38 <main+0xf88>)
 800294c:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002950:	4a37      	ldr	r2, [pc, #220]	@ (8002a30 <main+0xf80>)
 8002952:	2300      	movs	r3, #0
 8002954:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 8002956:	4a34      	ldr	r2, [pc, #208]	@ (8002a28 <main+0xf78>)
 8002958:	2305      	movs	r3, #5
 800295a:	7013      	strb	r3, [r2, #0]
				}
				break;
 800295c:	e17b      	b.n	8002c56 <main+0x11a6>

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 800295e:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8002a2c <main+0xf7c>
 8002962:	2001      	movs	r0, #1
 8002964:	f001 fc24 	bl	80041b0 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002968:	f001 f9c6 	bl	8003cf8 <micros>
 800296c:	4b32      	ldr	r3, [pc, #200]	@ (8002a38 <main+0xf88>)
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	1a86      	subs	r6, r0, r2
 8002974:	643e      	str	r6, [r7, #64]	@ 0x40
 8002976:	eb61 0303 	sbc.w	r3, r1, r3
 800297a:	647b      	str	r3, [r7, #68]	@ 0x44
 800297c:	4b34      	ldr	r3, [pc, #208]	@ (8002a50 <main+0xfa0>)
 800297e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002982:	4602      	mov	r2, r0
 8002984:	429a      	cmp	r2, r3
 8002986:	460b      	mov	r3, r1
 8002988:	f173 0300 	sbcs.w	r3, r3, #0
 800298c:	f0c0 8165 	bcc.w	8002c5a <main+0x11aa>
					Set_Motor(1, -5);
 8002990:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8002994:	2001      	movs	r0, #1
 8002996:	f001 fc0b 	bl	80041b0 <Set_Motor>
					calib_timer = micros();
 800299a:	f001 f9ad 	bl	8003cf8 <micros>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4925      	ldr	r1, [pc, #148]	@ (8002a38 <main+0xf88>)
 80029a4:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80029a8:	4a21      	ldr	r2, [pc, #132]	@ (8002a30 <main+0xf80>)
 80029aa:	2300      	movs	r3, #0
 80029ac:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 80029ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002a28 <main+0xf78>)
 80029b0:	2306      	movs	r3, #6
 80029b2:	7013      	strb	r3, [r2, #0]
				}
				break;
 80029b4:	e151      	b.n	8002c5a <main+0x11aa>

			case CALIB_RETOUCH_P:
				Set_Motor(1, -5);
 80029b6:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 80029ba:	2001      	movs	r0, #1
 80029bc:	f001 fbf8 	bl	80041b0 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 80029c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029c4:	4821      	ldr	r0, [pc, #132]	@ (8002a4c <main+0xf9c>)
 80029c6:	f002 feb5 	bl	8005734 <HAL_GPIO_ReadPin>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d004      	beq.n	80029da <main+0xf2a>
 80029d0:	4b17      	ldr	r3, [pc, #92]	@ (8002a30 <main+0xf80>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8142 	beq.w	8002c5e <main+0x11ae>
					Set_Motor(1, 0);
 80029da:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002a2c <main+0xf7c>
 80029de:	2001      	movs	r0, #1
 80029e0:	f001 fbe6 	bl	80041b0 <Set_Motor>
					Reset_P();
 80029e4:	f001 fc9c 	bl	8004320 <Reset_P>
					P_Limit = 0;
 80029e8:	4a11      	ldr	r2, [pc, #68]	@ (8002a30 <main+0xf80>)
 80029ea:	2300      	movs	r3, #0
 80029ec:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 80029ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002a28 <main+0xf78>)
 80029f0:	2307      	movs	r3, #7
 80029f2:	7013      	strb	r3, [r2, #0]
				}
				break;
 80029f4:	e133      	b.n	8002c5e <main+0x11ae>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 80029f6:	4b13      	ldr	r3, [pc, #76]	@ (8002a44 <main+0xf94>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d12a      	bne.n	8002a54 <main+0xfa4>
					Set_Motor(0, 30);
 80029fe:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002a02:	2000      	movs	r0, #0
 8002a04:	f001 fbd4 	bl	80041b0 <Set_Motor>
 8002a08:	e029      	b.n	8002a5e <main+0xfae>
 8002a0a:	bf00      	nop
 8002a0c:	20000b10 	.word	0x20000b10
 8002a10:	3d0b4396 	.word	0x3d0b4396
 8002a14:	20000b14 	.word	0x20000b14
 8002a18:	3dcccccd 	.word	0x3dcccccd
 8002a1c:	20000b30 	.word	0x20000b30
 8002a20:	000f4240 	.word	0x000f4240
 8002a24:	20000b28 	.word	0x20000b28
 8002a28:	20000b7c 	.word	0x20000b7c
 8002a2c:	00000000 	.word	0x00000000
 8002a30:	20000b2d 	.word	0x20000b2d
 8002a34:	20000b2e 	.word	0x20000b2e
 8002a38:	20000b80 	.word	0x20000b80
 8002a3c:	20000a28 	.word	0x20000a28
 8002a40:	42a00000 	.word	0x42a00000
 8002a44:	20000b88 	.word	0x20000b88
 8002a48:	c2a00000 	.word	0xc2a00000
 8002a4c:	48000400 	.word	0x48000400
 8002a50:	000186a1 	.word	0x000186a1
				else
					Set_Motor(0, -30);
 8002a54:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f001 fba9 	bl	80041b0 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8002a5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a62:	48ae      	ldr	r0, [pc, #696]	@ (8002d1c <main+0x126c>)
 8002a64:	f002 fe66 	bl	8005734 <HAL_GPIO_ReadPin>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d004      	beq.n	8002a78 <main+0xfc8>
 8002a6e:	4bac      	ldr	r3, [pc, #688]	@ (8002d20 <main+0x1270>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80f5 	beq.w	8002c62 <main+0x11b2>
					Set_Motor(0, 0);
 8002a78:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 8002d24 <main+0x1274>
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f001 fb97 	bl	80041b0 <Set_Motor>
					calib_timer = micros();
 8002a82:	f001 f939 	bl	8003cf8 <micros>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	49a7      	ldr	r1, [pc, #668]	@ (8002d28 <main+0x1278>)
 8002a8c:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002a90:	4aa3      	ldr	r2, [pc, #652]	@ (8002d20 <main+0x1270>)
 8002a92:	2300      	movs	r3, #0
 8002a94:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 8002a96:	4aa5      	ldr	r2, [pc, #660]	@ (8002d2c <main+0x127c>)
 8002a98:	2308      	movs	r3, #8
 8002a9a:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002a9c:	e0e1      	b.n	8002c62 <main+0x11b2>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 8002a9e:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8002d24 <main+0x1274>
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f001 fb84 	bl	80041b0 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002aa8:	f001 f926 	bl	8003cf8 <micros>
 8002aac:	4b9e      	ldr	r3, [pc, #632]	@ (8002d28 <main+0x1278>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	1a86      	subs	r6, r0, r2
 8002ab4:	63be      	str	r6, [r7, #56]	@ 0x38
 8002ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8002aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002abc:	4b9c      	ldr	r3, [pc, #624]	@ (8002d30 <main+0x1280>)
 8002abe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	f173 0300 	sbcs.w	r3, r3, #0
 8002acc:	f0c0 80cb 	bcc.w	8002c66 <main+0x11b6>
					if (Cal_Side == 1)
 8002ad0:	4b98      	ldr	r3, [pc, #608]	@ (8002d34 <main+0x1284>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d105      	bne.n	8002ae4 <main+0x1034>
						Set_Motor(0, -30);
 8002ad8:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002adc:	2000      	movs	r0, #0
 8002ade:	f001 fb67 	bl	80041b0 <Set_Motor>
 8002ae2:	e004      	b.n	8002aee <main+0x103e>
					else
						Set_Motor(0, 30);
 8002ae4:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f001 fb61 	bl	80041b0 <Set_Motor>
					calib_timer = micros();
 8002aee:	f001 f903 	bl	8003cf8 <micros>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	498c      	ldr	r1, [pc, #560]	@ (8002d28 <main+0x1278>)
 8002af8:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002afc:	4a88      	ldr	r2, [pc, #544]	@ (8002d20 <main+0x1270>)
 8002afe:	2300      	movs	r3, #0
 8002b00:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 8002b02:	4a8a      	ldr	r2, [pc, #552]	@ (8002d2c <main+0x127c>)
 8002b04:	2309      	movs	r3, #9
 8002b06:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002b08:	e0ad      	b.n	8002c66 <main+0x11b6>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 8002b0a:	4b8a      	ldr	r3, [pc, #552]	@ (8002d34 <main+0x1284>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d105      	bne.n	8002b1e <main+0x106e>
					Set_Motor(0, -30);
 8002b12:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002b16:	2000      	movs	r0, #0
 8002b18:	f001 fb4a 	bl	80041b0 <Set_Motor>
 8002b1c:	e004      	b.n	8002b28 <main+0x1078>
				else
					Set_Motor(0, 30);
 8002b1e:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002b22:	2000      	movs	r0, #0
 8002b24:	f001 fb44 	bl	80041b0 <Set_Motor>

				if (micros() - calib_timer > 200000) {
 8002b28:	f001 f8e6 	bl	8003cf8 <micros>
 8002b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d28 <main+0x1278>)
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	1a86      	subs	r6, r0, r2
 8002b34:	633e      	str	r6, [r7, #48]	@ 0x30
 8002b36:	eb61 0303 	sbc.w	r3, r1, r3
 8002b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d38 <main+0x1288>)
 8002b3e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b42:	4602      	mov	r2, r0
 8002b44:	429a      	cmp	r2, r3
 8002b46:	460b      	mov	r3, r1
 8002b48:	f173 0300 	sbcs.w	r3, r3, #0
 8002b4c:	f0c0 808d 	bcc.w	8002c6a <main+0x11ba>
					Set_Motor(0, 0);
 8002b50:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8002d24 <main+0x1274>
 8002b54:	2000      	movs	r0, #0
 8002b56:	f001 fb2b 	bl	80041b0 <Set_Motor>
					calib_timer = micros();
 8002b5a:	f001 f8cd 	bl	8003cf8 <micros>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4971      	ldr	r1, [pc, #452]	@ (8002d28 <main+0x1278>)
 8002b64:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002b68:	4a6d      	ldr	r2, [pc, #436]	@ (8002d20 <main+0x1270>)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 8002b6e:	4a6f      	ldr	r2, [pc, #444]	@ (8002d2c <main+0x127c>)
 8002b70:	230a      	movs	r3, #10
 8002b72:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002b74:	e079      	b.n	8002c6a <main+0x11ba>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 8002b76:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8002d24 <main+0x1274>
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f001 fb18 	bl	80041b0 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002b80:	f001 f8ba 	bl	8003cf8 <micros>
 8002b84:	4b68      	ldr	r3, [pc, #416]	@ (8002d28 <main+0x1278>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	1a86      	subs	r6, r0, r2
 8002b8c:	62be      	str	r6, [r7, #40]	@ 0x28
 8002b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8002b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b94:	4b66      	ldr	r3, [pc, #408]	@ (8002d30 <main+0x1280>)
 8002b96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	f173 0300 	sbcs.w	r3, r3, #0
 8002ba4:	d363      	bcc.n	8002c6e <main+0x11be>
					if (Cal_Side == 1)
 8002ba6:	4b63      	ldr	r3, [pc, #396]	@ (8002d34 <main+0x1284>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d105      	bne.n	8002bba <main+0x110a>
						Set_Motor(0, 15);
 8002bae:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f001 fafc 	bl	80041b0 <Set_Motor>
 8002bb8:	e004      	b.n	8002bc4 <main+0x1114>
					else
						Set_Motor(0, -15);
 8002bba:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f001 faf6 	bl	80041b0 <Set_Motor>
					calib_timer = micros();
 8002bc4:	f001 f898 	bl	8003cf8 <micros>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4956      	ldr	r1, [pc, #344]	@ (8002d28 <main+0x1278>)
 8002bce:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002bd2:	4a53      	ldr	r2, [pc, #332]	@ (8002d20 <main+0x1270>)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 8002bd8:	4a54      	ldr	r2, [pc, #336]	@ (8002d2c <main+0x127c>)
 8002bda:	230b      	movs	r3, #11
 8002bdc:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002bde:	e046      	b.n	8002c6e <main+0x11be>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 8002be0:	4b54      	ldr	r3, [pc, #336]	@ (8002d34 <main+0x1284>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d105      	bne.n	8002bf4 <main+0x1144>
					Set_Motor(0, 15);
 8002be8:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002bec:	2000      	movs	r0, #0
 8002bee:	f001 fadf 	bl	80041b0 <Set_Motor>
 8002bf2:	e004      	b.n	8002bfe <main+0x114e>
				else
					Set_Motor(0, -15);
 8002bf4:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f001 fad9 	bl	80041b0 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8002bfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c02:	4846      	ldr	r0, [pc, #280]	@ (8002d1c <main+0x126c>)
 8002c04:	f002 fd96 	bl	8005734 <HAL_GPIO_ReadPin>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d003      	beq.n	8002c16 <main+0x1166>
 8002c0e:	4b44      	ldr	r3, [pc, #272]	@ (8002d20 <main+0x1270>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d02d      	beq.n	8002c72 <main+0x11c2>
					Set_Motor(0, 0);
 8002c16:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8002d24 <main+0x1274>
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f001 fac8 	bl	80041b0 <Set_Motor>
					Reset_R();
 8002c20:	f001 fb6e 	bl	8004300 <Reset_R>
					R_Limit = 0;
 8002c24:	4a3e      	ldr	r2, [pc, #248]	@ (8002d20 <main+0x1270>)
 8002c26:	2300      	movs	r3, #0
 8002c28:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 8002c2a:	4a40      	ldr	r2, [pc, #256]	@ (8002d2c <main+0x127c>)
 8002c2c:	230c      	movs	r3, #12
 8002c2e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002c30:	e01f      	b.n	8002c72 <main+0x11c2>

			case CALIB_DONE:
				Cal_Side = 0;
 8002c32:	4a40      	ldr	r2, [pc, #256]	@ (8002d34 <main+0x1284>)
 8002c34:	2300      	movs	r3, #0
 8002c36:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 8002c38:	4a40      	ldr	r2, [pc, #256]	@ (8002d3c <main+0x128c>)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 8002c3e:	4a40      	ldr	r2, [pc, #256]	@ (8002d40 <main+0x1290>)
 8002c40:	2300      	movs	r3, #0
 8002c42:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8002c44:	4a36      	ldr	r2, [pc, #216]	@ (8002d20 <main+0x1270>)
 8002c46:	2300      	movs	r3, #0
 8002c48:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002c4a:	4a38      	ldr	r2, [pc, #224]	@ (8002d2c <main+0x127c>)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	7013      	strb	r3, [r2, #0]
				break;
 8002c50:	e010      	b.n	8002c74 <main+0x11c4>
				break;
 8002c52:	bf00      	nop
 8002c54:	e00e      	b.n	8002c74 <main+0x11c4>
				break;
 8002c56:	bf00      	nop
 8002c58:	e00c      	b.n	8002c74 <main+0x11c4>
				break;
 8002c5a:	bf00      	nop
 8002c5c:	e00a      	b.n	8002c74 <main+0x11c4>
				break;
 8002c5e:	bf00      	nop
 8002c60:	e008      	b.n	8002c74 <main+0x11c4>
				break;
 8002c62:	bf00      	nop
 8002c64:	e006      	b.n	8002c74 <main+0x11c4>
				break;
 8002c66:	bf00      	nop
 8002c68:	e004      	b.n	8002c74 <main+0x11c4>
				break;
 8002c6a:	bf00      	nop
 8002c6c:	e002      	b.n	8002c74 <main+0x11c4>
				break;
 8002c6e:	bf00      	nop
 8002c70:	e000      	b.n	8002c74 <main+0x11c4>
				break;
 8002c72:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 6) {
 8002c74:	4b31      	ldr	r3, [pc, #196]	@ (8002d3c <main+0x128c>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b06      	cmp	r3, #6
 8002c7a:	d102      	bne.n	8002c82 <main+0x11d2>
			Set_Servo(0);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f001 fb15 	bl	80042ac <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 7) {
 8002c82:	4b2e      	ldr	r3, [pc, #184]	@ (8002d3c <main+0x128c>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b07      	cmp	r3, #7
 8002c88:	d102      	bne.n	8002c90 <main+0x11e0>
			Set_Servo(1);
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	f001 fb0e 	bl	80042ac <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 8) {
 8002c90:	4b2a      	ldr	r3, [pc, #168]	@ (8002d3c <main+0x128c>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	f47e af87 	bne.w	8001ba8 <main+0xf8>
			static uint64_t pen_delay_timer;
			if (loop_counter == 1 && micros() - pen_delay_timer < 300000) {
 8002c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d44 <main+0x1294>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d120      	bne.n	8002ce4 <main+0x1234>
 8002ca2:	f001 f829 	bl	8003cf8 <micros>
 8002ca6:	4b28      	ldr	r3, [pc, #160]	@ (8002d48 <main+0x1298>)
 8002ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cac:	1a86      	subs	r6, r0, r2
 8002cae:	623e      	str	r6, [r7, #32]
 8002cb0:	eb61 0303 	sbc.w	r3, r1, r3
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb6:	4b25      	ldr	r3, [pc, #148]	@ (8002d4c <main+0x129c>)
 8002cb8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	f173 0300 	sbcs.w	r3, r3, #0
 8002cc6:	d20d      	bcs.n	8002ce4 <main+0x1234>
				Set_Motor(0, 0);
 8002cc8:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8002d24 <main+0x1274>
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f001 fa6f 	bl	80041b0 <Set_Motor>
				Set_Motor(1, 0);
 8002cd2:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002d24 <main+0x1274>
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	f001 fa6a 	bl	80041b0 <Set_Motor>
				Set_Servo(1);
 8002cdc:	2001      	movs	r0, #1
 8002cde:	f001 fae5 	bl	80042ac <Set_Servo>
 8002ce2:	e175      	b.n	8002fd0 <main+0x1520>
			} else if (loop_counter == 1
 8002ce4:	4b17      	ldr	r3, [pc, #92]	@ (8002d44 <main+0x1294>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d133      	bne.n	8002d54 <main+0x12a4>
					&& micros() - pen_delay_timer < 500000) {
 8002cec:	f001 f804 	bl	8003cf8 <micros>
 8002cf0:	4b15      	ldr	r3, [pc, #84]	@ (8002d48 <main+0x1298>)
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	1a86      	subs	r6, r0, r2
 8002cf8:	61be      	str	r6, [r7, #24]
 8002cfa:	eb61 0303 	sbc.w	r3, r1, r3
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	4b13      	ldr	r3, [pc, #76]	@ (8002d50 <main+0x12a0>)
 8002d02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d06:	4602      	mov	r2, r0
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	f173 0300 	sbcs.w	r3, r3, #0
 8002d10:	d220      	bcs.n	8002d54 <main+0x12a4>
				Set_Servo(0);
 8002d12:	2000      	movs	r0, #0
 8002d14:	f001 faca 	bl	80042ac <Set_Servo>
 8002d18:	e15a      	b.n	8002fd0 <main+0x1520>
 8002d1a:	bf00      	nop
 8002d1c:	48000400 	.word	0x48000400
 8002d20:	20000b2e 	.word	0x20000b2e
 8002d24:	00000000 	.word	0x00000000
 8002d28:	20000b80 	.word	0x20000b80
 8002d2c:	20000b7c 	.word	0x20000b7c
 8002d30:	000186a1 	.word	0x000186a1
 8002d34:	20000b88 	.word	0x20000b88
 8002d38:	00030d41 	.word	0x00030d41
 8002d3c:	20000b28 	.word	0x20000b28
 8002d40:	20000b2d 	.word	0x20000b2d
 8002d44:	20000b98 	.word	0x20000b98
 8002d48:	20001230 	.word	0x20001230
 8002d4c:	000493e0 	.word	0x000493e0
 8002d50:	0007a120 	.word	0x0007a120
			} else if (loop_counter < 100) {
 8002d54:	4b9f      	ldr	r3, [pc, #636]	@ (8002fd4 <main+0x1524>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b63      	cmp	r3, #99	@ 0x63
 8002d5a:	f300 810e 	bgt.w	8002f7a <main+0x14ca>
				static uint16_t loop_temp = 0;
				Set_Servo(0);
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f001 faa4 	bl	80042ac <Set_Servo>

				R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8002d64:	4b9c      	ldr	r3, [pc, #624]	@ (8002fd8 <main+0x1528>)
 8002d66:	ed93 7a00 	vldr	s14, [r3]
 8002d6a:	4b9c      	ldr	r3, [pc, #624]	@ (8002fdc <main+0x152c>)
 8002d6c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d74:	4b9a      	ldr	r3, [pc, #616]	@ (8002fe0 <main+0x1530>)
 8002d76:	edc3 7a00 	vstr	s15, [r3]
				P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8002d7a:	4b9a      	ldr	r3, [pc, #616]	@ (8002fe4 <main+0x1534>)
 8002d7c:	ed93 7a00 	vldr	s14, [r3]
 8002d80:	4b99      	ldr	r3, [pc, #612]	@ (8002fe8 <main+0x1538>)
 8002d82:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d8a:	4b98      	ldr	r3, [pc, #608]	@ (8002fec <main+0x153c>)
 8002d8c:	edc3 7a00 	vstr	s15, [r3]

				static uint64_t timestampState8 = 0;
				int64_t currentTimeState8 = micros();
 8002d90:	f000 ffb2 	bl	8003cf8 <micros>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
				if (currentTimeState8 > timestampState8) {
 8002d9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002da0:	4b93      	ldr	r3, [pc, #588]	@ (8002ff0 <main+0x1540>)
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	4282      	cmp	r2, r0
 8002da8:	418b      	sbcs	r3, r1
 8002daa:	d241      	bcs.n	8002e30 <main+0x1380>
					timestampState8 = currentTimeState8 + 10000;		//us
 8002dac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002db0:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002db4:	1851      	adds	r1, r2, r1
 8002db6:	6139      	str	r1, [r7, #16]
 8002db8:	f143 0300 	adc.w	r3, r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dc2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ff0 <main+0x1540>)
 8002dc4:	e9c3 0100 	strd	r0, r1, [r3]
					R_Speed = -1
							* (PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f,
 8002dc8:	4b85      	ldr	r3, [pc, #532]	@ (8002fe0 <main+0x1530>)
 8002dca:	edd3 7a00 	vldr	s15, [r3]
 8002dce:	4889      	ldr	r0, [pc, #548]	@ (8002ff4 <main+0x1544>)
 8002dd0:	ed9f 3a89 	vldr	s6, [pc, #548]	@ 8002ff8 <main+0x1548>
 8002dd4:	eddf 2a89 	vldr	s5, [pc, #548]	@ 8002ffc <main+0x154c>
 8002dd8:	ed9f 2a89 	vldr	s4, [pc, #548]	@ 8003000 <main+0x1550>
 8002ddc:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 8002de0:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8002de4:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 8002de8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dec:	f000 ff9e 	bl	8003d2c <PID_Update>
 8002df0:	eef0 7a40 	vmov.f32	s15, s0
 8002df4:	eef1 7a67 	vneg.f32	s15, s15
					R_Speed = -1
 8002df8:	4b82      	ldr	r3, [pc, #520]	@ (8003004 <main+0x1554>)
 8002dfa:	edc3 7a00 	vstr	s15, [r3]
									0.01f, -100.0f, 100.0f, &pid_r));
					P_Speed = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f,
 8002dfe:	4b7b      	ldr	r3, [pc, #492]	@ (8002fec <main+0x153c>)
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	4880      	ldr	r0, [pc, #512]	@ (8003008 <main+0x1558>)
 8002e06:	ed9f 3a7c 	vldr	s6, [pc, #496]	@ 8002ff8 <main+0x1548>
 8002e0a:	eddf 2a7c 	vldr	s5, [pc, #496]	@ 8002ffc <main+0x154c>
 8002e0e:	ed9f 2a7c 	vldr	s4, [pc, #496]	@ 8003000 <main+0x1550>
 8002e12:	eddf 1a7e 	vldr	s3, [pc, #504]	@ 800300c <main+0x155c>
 8002e16:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 8003010 <main+0x1560>
 8002e1a:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8003014 <main+0x1564>
 8002e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e22:	f000 ff83 	bl	8003d2c <PID_Update>
 8002e26:	eef0 7a40 	vmov.f32	s15, s0
 8002e2a:	4b7b      	ldr	r3, [pc, #492]	@ (8003018 <main+0x1568>)
 8002e2c:	edc3 7a00 	vstr	s15, [r3]
							0.01f, -100.0f, 100.0f, &pid_p);
				}

				Set_Motor(0, R_Speed);
 8002e30:	4b74      	ldr	r3, [pc, #464]	@ (8003004 <main+0x1554>)
 8002e32:	edd3 7a00 	vldr	s15, [r3]
 8002e36:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f001 f9b8 	bl	80041b0 <Set_Motor>
				Set_Motor(1, P_Speed);
 8002e40:	4b75      	ldr	r3, [pc, #468]	@ (8003018 <main+0x1568>)
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	eeb0 0a67 	vmov.f32	s0, s15
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f001 f9b0 	bl	80041b0 <Set_Motor>
				if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 8002e50:	4b63      	ldr	r3, [pc, #396]	@ (8002fe0 <main+0x1530>)
 8002e52:	edd3 7a00 	vldr	s15, [r3]
 8002e56:	eef0 7ae7 	vabs.f32	s15, s15
 8002e5a:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 800301c <main+0x156c>
 8002e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e66:	d57f      	bpl.n	8002f68 <main+0x14b8>
						&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 8002e68:	4b60      	ldr	r3, [pc, #384]	@ (8002fec <main+0x153c>)
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	eef0 7ae7 	vabs.f32	s15, s15
 8002e72:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8003020 <main+0x1570>
 8002e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7e:	d573      	bpl.n	8002f68 <main+0x14b8>
					/* within window —— start or continue timer */
					if (lock_timer_us == 0)
 8002e80:	4b68      	ldr	r3, [pc, #416]	@ (8003024 <main+0x1574>)
 8002e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	d107      	bne.n	8002e9a <main+0x13ea>
						lock_timer_us = micros(); /* start timing */
 8002e8a:	f000 ff35 	bl	8003cf8 <micros>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4964      	ldr	r1, [pc, #400]	@ (8003024 <main+0x1574>)
 8002e94:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 8002e98:	e099      	b.n	8002fce <main+0x151e>

					else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8002e9a:	f000 ff2d 	bl	8003cf8 <micros>
 8002e9e:	4b61      	ldr	r3, [pc, #388]	@ (8003024 <main+0x1574>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	1a86      	subs	r6, r0, r2
 8002ea6:	60be      	str	r6, [r7, #8]
 8002ea8:	eb61 0303 	sbc.w	r3, r1, r3
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b5e      	ldr	r3, [pc, #376]	@ (8003028 <main+0x1578>)
 8002eb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	460b      	mov	r3, r1
 8002eba:	f173 0300 	sbcs.w	r3, r3, #0
 8002ebe:	f0c0 8086 	bcc.w	8002fce <main+0x151e>
						if (loop_temp == 0) {
 8002ec2:	4b5a      	ldr	r3, [pc, #360]	@ (800302c <main+0x157c>)
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d119      	bne.n	8002efe <main+0x144e>
							pid_r.integ = 0;
 8002eca:	4a4a      	ldr	r2, [pc, #296]	@ (8002ff4 <main+0x1544>)
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 8002ed2:	4a48      	ldr	r2, [pc, #288]	@ (8002ff4 <main+0x1544>)
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 8002eda:	4a4b      	ldr	r2, [pc, #300]	@ (8003008 <main+0x1558>)
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 8002ee2:	4a49      	ldr	r2, [pc, #292]	@ (8003008 <main+0x1558>)
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	6053      	str	r3, [r2, #4]
							TargetR = -1.0472;
 8002eea:	4a3b      	ldr	r2, [pc, #236]	@ (8002fd8 <main+0x1528>)
 8002eec:	4b50      	ldr	r3, [pc, #320]	@ (8003030 <main+0x1580>)
 8002eee:	6013      	str	r3, [r2, #0]
							TargetP = 250;
 8002ef0:	4a3c      	ldr	r2, [pc, #240]	@ (8002fe4 <main+0x1534>)
 8002ef2:	4b50      	ldr	r3, [pc, #320]	@ (8003034 <main+0x1584>)
 8002ef4:	6013      	str	r3, [r2, #0]
							loop_temp = 1;
 8002ef6:	4a4d      	ldr	r2, [pc, #308]	@ (800302c <main+0x157c>)
 8002ef8:	2301      	movs	r3, #1
 8002efa:	8013      	strh	r3, [r2, #0]
					if (lock_timer_us == 0)
 8002efc:	e067      	b.n	8002fce <main+0x151e>
						} else {
							pid_r.integ = 0;
 8002efe:	4a3d      	ldr	r2, [pc, #244]	@ (8002ff4 <main+0x1544>)
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 8002f06:	4a3b      	ldr	r2, [pc, #236]	@ (8002ff4 <main+0x1544>)
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 8002f0e:	4a3e      	ldr	r2, [pc, #248]	@ (8003008 <main+0x1558>)
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 8002f16:	4a3c      	ldr	r2, [pc, #240]	@ (8003008 <main+0x1558>)
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	6053      	str	r3, [r2, #4]
							TargetR = 4.18879;
 8002f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8002fd8 <main+0x1528>)
 8002f20:	4b45      	ldr	r3, [pc, #276]	@ (8003038 <main+0x1588>)
 8002f22:	6013      	str	r3, [r2, #0]
							TargetP = 50;
 8002f24:	4a2f      	ldr	r2, [pc, #188]	@ (8002fe4 <main+0x1534>)
 8002f26:	4b45      	ldr	r3, [pc, #276]	@ (800303c <main+0x158c>)
 8002f28:	6013      	str	r3, [r2, #0]
							loop_temp = 0;
 8002f2a:	4a40      	ldr	r2, [pc, #256]	@ (800302c <main+0x157c>)
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	8013      	strh	r3, [r2, #0]
							loop_counter++;
 8002f30:	4b28      	ldr	r3, [pc, #160]	@ (8002fd4 <main+0x1524>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	4b27      	ldr	r3, [pc, #156]	@ (8002fd4 <main+0x1524>)
 8002f38:	601a      	str	r2, [r3, #0]
							if (loop_counter == 1) {
 8002f3a:	4b26      	ldr	r3, [pc, #152]	@ (8002fd4 <main+0x1524>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d106      	bne.n	8002f50 <main+0x14a0>
								pen_delay_timer = micros();
 8002f42:	f000 fed9 	bl	8003cf8 <micros>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	493d      	ldr	r1, [pc, #244]	@ (8003040 <main+0x1590>)
 8002f4c:	e9c1 2300 	strd	r2, r3, [r1]
							}
							if (loop_counter == 100) {
 8002f50:	4b20      	ldr	r3, [pc, #128]	@ (8002fd4 <main+0x1524>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b64      	cmp	r3, #100	@ 0x64
 8002f56:	d13a      	bne.n	8002fce <main+0x151e>
								pen_delay_timer = micros();
 8002f58:	f000 fece 	bl	8003cf8 <micros>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4937      	ldr	r1, [pc, #220]	@ (8003040 <main+0x1590>)
 8002f62:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 8002f66:	e032      	b.n	8002fce <main+0x151e>
							}
						}
					}
				} else {
					lock_timer_us = 0;
 8002f68:	492e      	ldr	r1, [pc, #184]	@ (8003024 <main+0x1574>)
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	e9c1 2300 	strd	r2, r3, [r1]
 8002f76:	f7fe be17 	b.w	8001ba8 <main+0xf8>
				}
			} else {
				if (micros() - pen_delay_timer < 500000) {
 8002f7a:	f000 febd 	bl	8003cf8 <micros>
 8002f7e:	4b30      	ldr	r3, [pc, #192]	@ (8003040 <main+0x1590>)
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f84:	1a86      	subs	r6, r0, r2
 8002f86:	603e      	str	r6, [r7, #0]
 8002f88:	eb61 0303 	sbc.w	r3, r1, r3
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003044 <main+0x1594>)
 8002f90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f94:	4602      	mov	r2, r0
 8002f96:	429a      	cmp	r2, r3
 8002f98:	460b      	mov	r3, r1
 8002f9a:	f173 0300 	sbcs.w	r3, r3, #0
 8002f9e:	d20e      	bcs.n	8002fbe <main+0x150e>
					Set_Motor(0, 0);
 8002fa0:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8003048 <main+0x1598>
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f001 f903 	bl	80041b0 <Set_Motor>
					Set_Motor(1, 0);
 8002faa:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8003048 <main+0x1598>
 8002fae:	2001      	movs	r0, #1
 8002fb0:	f001 f8fe 	bl	80041b0 <Set_Motor>
					Set_Servo(1);
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f001 f979 	bl	80042ac <Set_Servo>
 8002fba:	f7fe bdf5 	b.w	8001ba8 <main+0xf8>
				} else {
					Set_Servo(0);
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f001 f974 	bl	80042ac <Set_Servo>
					Mode = 0;
 8002fc4:	4a21      	ldr	r2, [pc, #132]	@ (800304c <main+0x159c>)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	7013      	strb	r3, [r2, #0]
 8002fca:	f7fe bded 	b.w	8001ba8 <main+0xf8>
					if (lock_timer_us == 0)
 8002fce:	bf00      	nop
	while (1) {
 8002fd0:	f7fe bdea 	b.w	8001ba8 <main+0xf8>
 8002fd4:	20000b98 	.word	0x20000b98
 8002fd8:	20000b00 	.word	0x20000b00
 8002fdc:	20000a70 	.word	0x20000a70
 8002fe0:	20000b10 	.word	0x20000b10
 8002fe4:	20000b04 	.word	0x20000b04
 8002fe8:	20000ab0 	.word	0x20000ab0
 8002fec:	20000b14 	.word	0x20000b14
 8002ff0:	20001238 	.word	0x20001238
 8002ff4:	20000b5c 	.word	0x20000b5c
 8002ff8:	42c80000 	.word	0x42c80000
 8002ffc:	c2c80000 	.word	0xc2c80000
 8003000:	3c23d70a 	.word	0x3c23d70a
 8003004:	20000b20 	.word	0x20000b20
 8003008:	20000b64 	.word	0x20000b64
 800300c:	3e19999a 	.word	0x3e19999a
 8003010:	3f99999a 	.word	0x3f99999a
 8003014:	3eaa7efa 	.word	0x3eaa7efa
 8003018:	20000b24 	.word	0x20000b24
 800301c:	3d0b4396 	.word	0x3d0b4396
 8003020:	3dcccccd 	.word	0x3dcccccd
 8003024:	20000b30 	.word	0x20000b30
 8003028:	000f4240 	.word	0x000f4240
 800302c:	20001240 	.word	0x20001240
 8003030:	bf860aa6 	.word	0xbf860aa6
 8003034:	437a0000 	.word	0x437a0000
 8003038:	40860a91 	.word	0x40860a91
 800303c:	42480000 	.word	0x42480000
 8003040:	20001230 	.word	0x20001230
 8003044:	0007a120 	.word	0x0007a120
 8003048:	00000000 	.word	0x00000000
 800304c:	20000b28 	.word	0x20000b28

08003050 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b094      	sub	sp, #80	@ 0x50
 8003054:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003056:	f107 0318 	add.w	r3, r7, #24
 800305a:	2238      	movs	r2, #56	@ 0x38
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f008 f868 	bl	800b134 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	60da      	str	r2, [r3, #12]
 8003070:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003072:	2000      	movs	r0, #0
 8003074:	f002 fba6 	bl	80057c4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003078:	2302      	movs	r3, #2
 800307a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800307c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003082:	2340      	movs	r3, #64	@ 0x40
 8003084:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003086:	2302      	movs	r3, #2
 8003088:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800308a:	2302      	movs	r3, #2
 800308c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800308e:	2304      	movs	r3, #4
 8003090:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003092:	2355      	movs	r3, #85	@ 0x55
 8003094:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003096:	2302      	movs	r3, #2
 8003098:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800309a:	2302      	movs	r3, #2
 800309c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800309e:	2302      	movs	r3, #2
 80030a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80030a2:	f107 0318 	add.w	r3, r7, #24
 80030a6:	4618      	mov	r0, r3
 80030a8:	f002 fc40 	bl	800592c <HAL_RCC_OscConfig>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <SystemClock_Config+0x66>
		Error_Handler();
 80030b2:	f001 f983 	bl	80043bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80030b6:	230f      	movs	r3, #15
 80030b8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ba:	2303      	movs	r3, #3
 80030bc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	2104      	movs	r1, #4
 80030ce:	4618      	mov	r0, r3
 80030d0:	f002 ff3e 	bl	8005f50 <HAL_RCC_ClockConfig>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <SystemClock_Config+0x8e>
		Error_Handler();
 80030da:	f001 f96f 	bl	80043bc <Error_Handler>
	}
}
 80030de:	bf00      	nop
 80030e0:	3750      	adds	r7, #80	@ 0x50
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08c      	sub	sp, #48	@ 0x30
 80030ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80030ee:	f107 031c 	add.w	r3, r7, #28
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80030fe:	f107 030c 	add.w	r3, r7, #12
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800310c:	463b      	mov	r3, r7
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003116:	4b35      	ldr	r3, [pc, #212]	@ (80031ec <MX_TIM1_Init+0x104>)
 8003118:	4a35      	ldr	r2, [pc, #212]	@ (80031f0 <MX_TIM1_Init+0x108>)
 800311a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 800311c:	4b33      	ldr	r3, [pc, #204]	@ (80031ec <MX_TIM1_Init+0x104>)
 800311e:	22a9      	movs	r2, #169	@ 0xa9
 8003120:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003122:	4b32      	ldr	r3, [pc, #200]	@ (80031ec <MX_TIM1_Init+0x104>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003128:	4b30      	ldr	r3, [pc, #192]	@ (80031ec <MX_TIM1_Init+0x104>)
 800312a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800312e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003130:	4b2e      	ldr	r3, [pc, #184]	@ (80031ec <MX_TIM1_Init+0x104>)
 8003132:	2200      	movs	r2, #0
 8003134:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003136:	4b2d      	ldr	r3, [pc, #180]	@ (80031ec <MX_TIM1_Init+0x104>)
 8003138:	2200      	movs	r2, #0
 800313a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800313c:	4b2b      	ldr	r3, [pc, #172]	@ (80031ec <MX_TIM1_Init+0x104>)
 800313e:	2200      	movs	r2, #0
 8003140:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8003142:	482a      	ldr	r0, [pc, #168]	@ (80031ec <MX_TIM1_Init+0x104>)
 8003144:	f003 fe3a 	bl	8006dbc <HAL_TIM_IC_Init>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_TIM1_Init+0x6a>
		Error_Handler();
 800314e:	f001 f935 	bl	80043bc <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003152:	2304      	movs	r3, #4
 8003154:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003156:	2360      	movs	r3, #96	@ 0x60
 8003158:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800315a:	2302      	movs	r3, #2
 800315c:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800315e:	2300      	movs	r3, #0
 8003160:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8003166:	f107 031c 	add.w	r3, r7, #28
 800316a:	4619      	mov	r1, r3
 800316c:	481f      	ldr	r0, [pc, #124]	@ (80031ec <MX_TIM1_Init+0x104>)
 800316e:	f004 fe05 	bl	8007d7c <HAL_TIM_SlaveConfigSynchro>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_TIM1_Init+0x94>
		Error_Handler();
 8003178:	f001 f920 	bl	80043bc <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003180:	2302      	movs	r3, #2
 8003182:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800318c:	f107 030c 	add.w	r3, r7, #12
 8003190:	2200      	movs	r2, #0
 8003192:	4619      	mov	r1, r3
 8003194:	4815      	ldr	r0, [pc, #84]	@ (80031ec <MX_TIM1_Init+0x104>)
 8003196:	f004 fb2a 	bl	80077ee <HAL_TIM_IC_ConfigChannel>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_TIM1_Init+0xbc>
		Error_Handler();
 80031a0:	f001 f90c 	bl	80043bc <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80031a4:	2302      	movs	r3, #2
 80031a6:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80031a8:	2301      	movs	r3, #1
 80031aa:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 80031ac:	f107 030c 	add.w	r3, r7, #12
 80031b0:	2204      	movs	r2, #4
 80031b2:	4619      	mov	r1, r3
 80031b4:	480d      	ldr	r0, [pc, #52]	@ (80031ec <MX_TIM1_Init+0x104>)
 80031b6:	f004 fb1a 	bl	80077ee <HAL_TIM_IC_ConfigChannel>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <MX_TIM1_Init+0xdc>
		Error_Handler();
 80031c0:	f001 f8fc 	bl	80043bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031c4:	2300      	movs	r3, #0
 80031c6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80031c8:	2300      	movs	r3, #0
 80031ca:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80031d0:	463b      	mov	r3, r7
 80031d2:	4619      	mov	r1, r3
 80031d4:	4805      	ldr	r0, [pc, #20]	@ (80031ec <MX_TIM1_Init+0x104>)
 80031d6:	f005 feed 	bl	8008fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 80031e0:	f001 f8ec 	bl	80043bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80031e4:	bf00      	nop
 80031e6:	3730      	adds	r7, #48	@ 0x30
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20000234 	.word	0x20000234
 80031f0:	40012c00 	.word	0x40012c00

080031f4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08c      	sub	sp, #48	@ 0x30
 80031f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80031fa:	f107 031c 	add.w	r3, r7, #28
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	60da      	str	r2, [r3, #12]
 8003208:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800320a:	f107 030c 	add.w	r3, r7, #12
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	605a      	str	r2, [r3, #4]
 8003214:	609a      	str	r2, [r3, #8]
 8003216:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003218:	463b      	mov	r3, r7
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	605a      	str	r2, [r3, #4]
 8003220:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003222:	4b33      	ldr	r3, [pc, #204]	@ (80032f0 <MX_TIM2_Init+0xfc>)
 8003224:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003228:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 800322a:	4b31      	ldr	r3, [pc, #196]	@ (80032f0 <MX_TIM2_Init+0xfc>)
 800322c:	22a9      	movs	r2, #169	@ 0xa9
 800322e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003230:	4b2f      	ldr	r3, [pc, #188]	@ (80032f0 <MX_TIM2_Init+0xfc>)
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003236:	4b2e      	ldr	r3, [pc, #184]	@ (80032f0 <MX_TIM2_Init+0xfc>)
 8003238:	f04f 32ff 	mov.w	r2, #4294967295
 800323c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800323e:	4b2c      	ldr	r3, [pc, #176]	@ (80032f0 <MX_TIM2_Init+0xfc>)
 8003240:	2200      	movs	r2, #0
 8003242:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003244:	4b2a      	ldr	r3, [pc, #168]	@ (80032f0 <MX_TIM2_Init+0xfc>)
 8003246:	2200      	movs	r2, #0
 8003248:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800324a:	4829      	ldr	r0, [pc, #164]	@ (80032f0 <MX_TIM2_Init+0xfc>)
 800324c:	f003 fdb6 	bl	8006dbc <HAL_TIM_IC_Init>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <MX_TIM2_Init+0x66>
		Error_Handler();
 8003256:	f001 f8b1 	bl	80043bc <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800325a:	2304      	movs	r3, #4
 800325c:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800325e:	2350      	movs	r3, #80	@ 0x50
 8003260:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003262:	2300      	movs	r3, #0
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003266:	2300      	movs	r3, #0
 8003268:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 800326e:	f107 031c 	add.w	r3, r7, #28
 8003272:	4619      	mov	r1, r3
 8003274:	481e      	ldr	r0, [pc, #120]	@ (80032f0 <MX_TIM2_Init+0xfc>)
 8003276:	f004 fd81 	bl	8007d7c <HAL_TIM_SlaveConfigSynchro>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <MX_TIM2_Init+0x90>
		Error_Handler();
 8003280:	f001 f89c 	bl	80043bc <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003288:	2301      	movs	r3, #1
 800328a:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003294:	f107 030c 	add.w	r3, r7, #12
 8003298:	2200      	movs	r2, #0
 800329a:	4619      	mov	r1, r3
 800329c:	4814      	ldr	r0, [pc, #80]	@ (80032f0 <MX_TIM2_Init+0xfc>)
 800329e:	f004 faa6 	bl	80077ee <HAL_TIM_IC_ConfigChannel>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <MX_TIM2_Init+0xb8>
		Error_Handler();
 80032a8:	f001 f888 	bl	80043bc <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80032ac:	2302      	movs	r3, #2
 80032ae:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80032b0:	2302      	movs	r3, #2
 80032b2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 80032b4:	f107 030c 	add.w	r3, r7, #12
 80032b8:	2204      	movs	r2, #4
 80032ba:	4619      	mov	r1, r3
 80032bc:	480c      	ldr	r0, [pc, #48]	@ (80032f0 <MX_TIM2_Init+0xfc>)
 80032be:	f004 fa96 	bl	80077ee <HAL_TIM_IC_ConfigChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_TIM2_Init+0xd8>
		Error_Handler();
 80032c8:	f001 f878 	bl	80043bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032cc:	2300      	movs	r3, #0
 80032ce:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80032d4:	463b      	mov	r3, r7
 80032d6:	4619      	mov	r1, r3
 80032d8:	4805      	ldr	r0, [pc, #20]	@ (80032f0 <MX_TIM2_Init+0xfc>)
 80032da:	f005 fe6b 	bl	8008fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <MX_TIM2_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 80032e4:	f001 f86a 	bl	80043bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80032e8:	bf00      	nop
 80032ea:	3730      	adds	r7, #48	@ 0x30
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000300 	.word	0x20000300

080032f4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08c      	sub	sp, #48	@ 0x30
 80032f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80032fa:	f107 030c 	add.w	r3, r7, #12
 80032fe:	2224      	movs	r2, #36	@ 0x24
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f007 ff16 	bl	800b134 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003308:	463b      	mov	r3, r7
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003312:	4b21      	ldr	r3, [pc, #132]	@ (8003398 <MX_TIM3_Init+0xa4>)
 8003314:	4a21      	ldr	r2, [pc, #132]	@ (800339c <MX_TIM3_Init+0xa8>)
 8003316:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003318:	4b1f      	ldr	r3, [pc, #124]	@ (8003398 <MX_TIM3_Init+0xa4>)
 800331a:	2200      	movs	r2, #0
 800331c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800331e:	4b1e      	ldr	r3, [pc, #120]	@ (8003398 <MX_TIM3_Init+0xa4>)
 8003320:	2200      	movs	r2, #0
 8003322:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003324:	4b1c      	ldr	r3, [pc, #112]	@ (8003398 <MX_TIM3_Init+0xa4>)
 8003326:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800332a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800332c:	4b1a      	ldr	r3, [pc, #104]	@ (8003398 <MX_TIM3_Init+0xa4>)
 800332e:	2200      	movs	r2, #0
 8003330:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003332:	4b19      	ldr	r3, [pc, #100]	@ (8003398 <MX_TIM3_Init+0xa4>)
 8003334:	2200      	movs	r2, #0
 8003336:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003338:	2303      	movs	r3, #3
 800333a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003340:	2301      	movs	r3, #1
 8003342:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003344:	2300      	movs	r3, #0
 8003346:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800334c:	2300      	movs	r3, #0
 800334e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003350:	2301      	movs	r3, #1
 8003352:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003354:	2300      	movs	r3, #0
 8003356:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 800335c:	f107 030c 	add.w	r3, r7, #12
 8003360:	4619      	mov	r1, r3
 8003362:	480d      	ldr	r0, [pc, #52]	@ (8003398 <MX_TIM3_Init+0xa4>)
 8003364:	f003 ff88 	bl	8007278 <HAL_TIM_Encoder_Init>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <MX_TIM3_Init+0x7e>
		Error_Handler();
 800336e:	f001 f825 	bl	80043bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800337a:	463b      	mov	r3, r7
 800337c:	4619      	mov	r1, r3
 800337e:	4806      	ldr	r0, [pc, #24]	@ (8003398 <MX_TIM3_Init+0xa4>)
 8003380:	f005 fe18 	bl	8008fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800338a:	f001 f817 	bl	80043bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800338e:	bf00      	nop
 8003390:	3730      	adds	r7, #48	@ 0x30
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	200003cc 	.word	0x200003cc
 800339c:	40000400 	.word	0x40000400

080033a0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08c      	sub	sp, #48	@ 0x30
 80033a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80033a6:	f107 030c 	add.w	r3, r7, #12
 80033aa:	2224      	movs	r2, #36	@ 0x24
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f007 fec0 	bl	800b134 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80033b4:	463b      	mov	r3, r7
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80033be:	4b21      	ldr	r3, [pc, #132]	@ (8003444 <MX_TIM4_Init+0xa4>)
 80033c0:	4a21      	ldr	r2, [pc, #132]	@ (8003448 <MX_TIM4_Init+0xa8>)
 80033c2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80033c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003444 <MX_TIM4_Init+0xa4>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003444 <MX_TIM4_Init+0xa4>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80033d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003444 <MX_TIM4_Init+0xa4>)
 80033d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033d6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003444 <MX_TIM4_Init+0xa4>)
 80033da:	2200      	movs	r2, #0
 80033dc:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033de:	4b19      	ldr	r3, [pc, #100]	@ (8003444 <MX_TIM4_Init+0xa4>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80033e4:	2303      	movs	r3, #3
 80033e6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033ec:	2301      	movs	r3, #1
 80033ee:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033f8:	2300      	movs	r3, #0
 80033fa:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033fc:	2301      	movs	r3, #1
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003400:	2300      	movs	r3, #0
 8003402:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003408:	f107 030c 	add.w	r3, r7, #12
 800340c:	4619      	mov	r1, r3
 800340e:	480d      	ldr	r0, [pc, #52]	@ (8003444 <MX_TIM4_Init+0xa4>)
 8003410:	f003 ff32 	bl	8007278 <HAL_TIM_Encoder_Init>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <MX_TIM4_Init+0x7e>
		Error_Handler();
 800341a:	f000 ffcf 	bl	80043bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800341e:	2300      	movs	r3, #0
 8003420:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003426:	463b      	mov	r3, r7
 8003428:	4619      	mov	r1, r3
 800342a:	4806      	ldr	r0, [pc, #24]	@ (8003444 <MX_TIM4_Init+0xa4>)
 800342c:	f005 fdc2 	bl	8008fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003436:	f000 ffc1 	bl	80043bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800343a:	bf00      	nop
 800343c:	3730      	adds	r7, #48	@ 0x30
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000498 	.word	0x20000498
 8003448:	40000800 	.word	0x40000800

0800344c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003452:	f107 0310 	add.w	r3, r7, #16
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003460:	1d3b      	adds	r3, r7, #4
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800346a:	4b1d      	ldr	r3, [pc, #116]	@ (80034e0 <MX_TIM5_Init+0x94>)
 800346c:	4a1d      	ldr	r2, [pc, #116]	@ (80034e4 <MX_TIM5_Init+0x98>)
 800346e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 8003470:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <MX_TIM5_Init+0x94>)
 8003472:	22a9      	movs	r2, #169	@ 0xa9
 8003474:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003476:	4b1a      	ldr	r3, [pc, #104]	@ (80034e0 <MX_TIM5_Init+0x94>)
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 800347c:	4b18      	ldr	r3, [pc, #96]	@ (80034e0 <MX_TIM5_Init+0x94>)
 800347e:	f04f 32ff 	mov.w	r2, #4294967295
 8003482:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003484:	4b16      	ldr	r3, [pc, #88]	@ (80034e0 <MX_TIM5_Init+0x94>)
 8003486:	2200      	movs	r2, #0
 8003488:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800348a:	4b15      	ldr	r3, [pc, #84]	@ (80034e0 <MX_TIM5_Init+0x94>)
 800348c:	2200      	movs	r2, #0
 800348e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003490:	4813      	ldr	r0, [pc, #76]	@ (80034e0 <MX_TIM5_Init+0x94>)
 8003492:	f003 f9c7 	bl	8006824 <HAL_TIM_Base_Init>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_TIM5_Init+0x54>
		Error_Handler();
 800349c:	f000 ff8e 	bl	80043bc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034a4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80034a6:	f107 0310 	add.w	r3, r7, #16
 80034aa:	4619      	mov	r1, r3
 80034ac:	480c      	ldr	r0, [pc, #48]	@ (80034e0 <MX_TIM5_Init+0x94>)
 80034ae:	f004 fb4f 	bl	8007b50 <HAL_TIM_ConfigClockSource>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <MX_TIM5_Init+0x70>
		Error_Handler();
 80034b8:	f000 ff80 	bl	80043bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034bc:	2300      	movs	r3, #0
 80034be:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80034c4:	1d3b      	adds	r3, r7, #4
 80034c6:	4619      	mov	r1, r3
 80034c8:	4805      	ldr	r0, [pc, #20]	@ (80034e0 <MX_TIM5_Init+0x94>)
 80034ca:	f005 fd73 	bl	8008fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80034d4:	f000 ff72 	bl	80043bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80034d8:	bf00      	nop
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000564 	.word	0x20000564
 80034e4:	40000c00 	.word	0x40000c00

080034e8 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b09c      	sub	sp, #112	@ 0x70
 80034ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80034ee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	609a      	str	r2, [r3, #8]
 80034fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80034fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003508:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	611a      	str	r2, [r3, #16]
 8003518:	615a      	str	r2, [r3, #20]
 800351a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800351c:	1d3b      	adds	r3, r7, #4
 800351e:	2234      	movs	r2, #52	@ 0x34
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f007 fe06 	bl	800b134 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003528:	4b4b      	ldr	r3, [pc, #300]	@ (8003658 <MX_TIM8_Init+0x170>)
 800352a:	4a4c      	ldr	r2, [pc, #304]	@ (800365c <MX_TIM8_Init+0x174>)
 800352c:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 800352e:	4b4a      	ldr	r3, [pc, #296]	@ (8003658 <MX_TIM8_Init+0x170>)
 8003530:	22a9      	movs	r2, #169	@ 0xa9
 8003532:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003534:	4b48      	ldr	r3, [pc, #288]	@ (8003658 <MX_TIM8_Init+0x170>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 100;
 800353a:	4b47      	ldr	r3, [pc, #284]	@ (8003658 <MX_TIM8_Init+0x170>)
 800353c:	2264      	movs	r2, #100	@ 0x64
 800353e:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003540:	4b45      	ldr	r3, [pc, #276]	@ (8003658 <MX_TIM8_Init+0x170>)
 8003542:	2200      	movs	r2, #0
 8003544:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8003546:	4b44      	ldr	r3, [pc, #272]	@ (8003658 <MX_TIM8_Init+0x170>)
 8003548:	2200      	movs	r2, #0
 800354a:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800354c:	4b42      	ldr	r3, [pc, #264]	@ (8003658 <MX_TIM8_Init+0x170>)
 800354e:	2200      	movs	r2, #0
 8003550:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8003552:	4841      	ldr	r0, [pc, #260]	@ (8003658 <MX_TIM8_Init+0x170>)
 8003554:	f003 f966 	bl	8006824 <HAL_TIM_Base_Init>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_TIM8_Init+0x7a>
		Error_Handler();
 800355e:	f000 ff2d 	bl	80043bc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003562:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003566:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8003568:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800356c:	4619      	mov	r1, r3
 800356e:	483a      	ldr	r0, [pc, #232]	@ (8003658 <MX_TIM8_Init+0x170>)
 8003570:	f004 faee 	bl	8007b50 <HAL_TIM_ConfigClockSource>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <MX_TIM8_Init+0x96>
		Error_Handler();
 800357a:	f000 ff1f 	bl	80043bc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 800357e:	4836      	ldr	r0, [pc, #216]	@ (8003658 <MX_TIM8_Init+0x170>)
 8003580:	f003 fa9c 	bl	8006abc <HAL_TIM_PWM_Init>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_TIM8_Init+0xa6>
		Error_Handler();
 800358a:	f000 ff17 	bl	80043bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003592:	2300      	movs	r3, #0
 8003594:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003596:	2300      	movs	r3, #0
 8003598:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800359a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800359e:	4619      	mov	r1, r3
 80035a0:	482d      	ldr	r0, [pc, #180]	@ (8003658 <MX_TIM8_Init+0x170>)
 80035a2:	f005 fd07 	bl	8008fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM8_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 80035ac:	f000 ff06 	bl	80043bc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035b0:	2360      	movs	r3, #96	@ 0x60
 80035b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 100;
 80035b4:	2364      	movs	r3, #100	@ 0x64
 80035b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035b8:	2300      	movs	r3, #0
 80035ba:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035bc:	2300      	movs	r3, #0
 80035be:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035c4:	2300      	movs	r3, #0
 80035c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035c8:	2300      	movs	r3, #0
 80035ca:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 80035cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80035d0:	2208      	movs	r2, #8
 80035d2:	4619      	mov	r1, r3
 80035d4:	4820      	ldr	r0, [pc, #128]	@ (8003658 <MX_TIM8_Init+0x170>)
 80035d6:	f004 f9a7 	bl	8007928 <HAL_TIM_PWM_ConfigChannel>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_TIM8_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 80035e0:	f000 feec 	bl	80043bc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 80035e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80035e8:	220c      	movs	r2, #12
 80035ea:	4619      	mov	r1, r3
 80035ec:	481a      	ldr	r0, [pc, #104]	@ (8003658 <MX_TIM8_Init+0x170>)
 80035ee:	f004 f99b 	bl	8007928 <HAL_TIM_PWM_ConfigChannel>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <MX_TIM8_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 80035f8:	f000 fee0 	bl	80043bc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003600:	2300      	movs	r3, #0
 8003602:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003610:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003614:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800361a:	2300      	movs	r3, #0
 800361c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800361e:	2300      	movs	r3, #0
 8003620:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003622:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003626:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800362c:	2300      	movs	r3, #0
 800362e:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	4619      	mov	r1, r3
 8003638:	4807      	ldr	r0, [pc, #28]	@ (8003658 <MX_TIM8_Init+0x170>)
 800363a:	f005 fd51 	bl	80090e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_TIM8_Init+0x160>
			!= HAL_OK) {
		Error_Handler();
 8003644:	f000 feba 	bl	80043bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8003648:	4803      	ldr	r0, [pc, #12]	@ (8003658 <MX_TIM8_Init+0x170>)
 800364a:	f001 f843 	bl	80046d4 <HAL_TIM_MspPostInit>

}
 800364e:	bf00      	nop
 8003650:	3770      	adds	r7, #112	@ 0x70
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000630 	.word	0x20000630
 800365c:	40013400 	.word	0x40013400

08003660 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8003660:	b580      	push	{r7, lr}
 8003662:	b09c      	sub	sp, #112	@ 0x70
 8003664:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003666:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003674:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003680:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	611a      	str	r2, [r3, #16]
 8003690:	615a      	str	r2, [r3, #20]
 8003692:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003694:	1d3b      	adds	r3, r7, #4
 8003696:	2234      	movs	r2, #52	@ 0x34
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f007 fd4a 	bl	800b134 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 80036a0:	4b3f      	ldr	r3, [pc, #252]	@ (80037a0 <MX_TIM15_Init+0x140>)
 80036a2:	4a40      	ldr	r2, [pc, #256]	@ (80037a4 <MX_TIM15_Init+0x144>)
 80036a4:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 169;
 80036a6:	4b3e      	ldr	r3, [pc, #248]	@ (80037a0 <MX_TIM15_Init+0x140>)
 80036a8:	22a9      	movs	r2, #169	@ 0xa9
 80036aa:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ac:	4b3c      	ldr	r3, [pc, #240]	@ (80037a0 <MX_TIM15_Init+0x140>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 20000;
 80036b2:	4b3b      	ldr	r3, [pc, #236]	@ (80037a0 <MX_TIM15_Init+0x140>)
 80036b4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80036b8:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ba:	4b39      	ldr	r3, [pc, #228]	@ (80037a0 <MX_TIM15_Init+0x140>)
 80036bc:	2200      	movs	r2, #0
 80036be:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 80036c0:	4b37      	ldr	r3, [pc, #220]	@ (80037a0 <MX_TIM15_Init+0x140>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c6:	4b36      	ldr	r3, [pc, #216]	@ (80037a0 <MX_TIM15_Init+0x140>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 80036cc:	4834      	ldr	r0, [pc, #208]	@ (80037a0 <MX_TIM15_Init+0x140>)
 80036ce:	f003 f8a9 	bl	8006824 <HAL_TIM_Base_Init>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_TIM15_Init+0x7c>
		Error_Handler();
 80036d8:	f000 fe70 	bl	80043bc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036e0:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 80036e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80036e6:	4619      	mov	r1, r3
 80036e8:	482d      	ldr	r0, [pc, #180]	@ (80037a0 <MX_TIM15_Init+0x140>)
 80036ea:	f004 fa31 	bl	8007b50 <HAL_TIM_ConfigClockSource>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_TIM15_Init+0x98>
		Error_Handler();
 80036f4:	f000 fe62 	bl	80043bc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 80036f8:	4829      	ldr	r0, [pc, #164]	@ (80037a0 <MX_TIM15_Init+0x140>)
 80036fa:	f003 f9df 	bl	8006abc <HAL_TIM_PWM_Init>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_TIM15_Init+0xa8>
		Error_Handler();
 8003704:	f000 fe5a 	bl	80043bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003708:	2300      	movs	r3, #0
 800370a:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800370c:	2300      	movs	r3, #0
 800370e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8003710:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003714:	4619      	mov	r1, r3
 8003716:	4822      	ldr	r0, [pc, #136]	@ (80037a0 <MX_TIM15_Init+0x140>)
 8003718:	f005 fc4c 	bl	8008fb4 <HAL_TIMEx_MasterConfigSynchronization>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <MX_TIM15_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8003722:	f000 fe4b 	bl	80043bc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003726:	2360      	movs	r3, #96	@ 0x60
 8003728:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800372e:	2300      	movs	r3, #0
 8003730:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003732:	2300      	movs	r3, #0
 8003734:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003736:	2300      	movs	r3, #0
 8003738:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800373a:	2300      	movs	r3, #0
 800373c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 8003742:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003746:	2200      	movs	r2, #0
 8003748:	4619      	mov	r1, r3
 800374a:	4815      	ldr	r0, [pc, #84]	@ (80037a0 <MX_TIM15_Init+0x140>)
 800374c:	f004 f8ec 	bl	8007928 <HAL_TIM_PWM_ConfigChannel>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_TIM15_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8003756:	f000 fe31 	bl	80043bc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800375e:	2300      	movs	r3, #0
 8003760:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800376e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003772:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003778:	2300      	movs	r3, #0
 800377a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 800377c:	1d3b      	adds	r3, r7, #4
 800377e:	4619      	mov	r1, r3
 8003780:	4807      	ldr	r0, [pc, #28]	@ (80037a0 <MX_TIM15_Init+0x140>)
 8003782:	f005 fcad 	bl	80090e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_TIM15_Init+0x130>
			!= HAL_OK) {
		Error_Handler();
 800378c:	f000 fe16 	bl	80043bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8003790:	4803      	ldr	r0, [pc, #12]	@ (80037a0 <MX_TIM15_Init+0x140>)
 8003792:	f000 ff9f 	bl	80046d4 <HAL_TIM_MspPostInit>

}
 8003796:	bf00      	nop
 8003798:	3770      	adds	r7, #112	@ 0x70
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	200006fc 	.word	0x200006fc
 80037a4:	40014000 	.word	0x40014000

080037a8 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 80037ac:	4b14      	ldr	r3, [pc, #80]	@ (8003800 <MX_TIM16_Init+0x58>)
 80037ae:	4a15      	ldr	r2, [pc, #84]	@ (8003804 <MX_TIM16_Init+0x5c>)
 80037b0:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 80037b2:	4b13      	ldr	r3, [pc, #76]	@ (8003800 <MX_TIM16_Init+0x58>)
 80037b4:	22a9      	movs	r2, #169	@ 0xa9
 80037b6:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b8:	4b11      	ldr	r3, [pc, #68]	@ (8003800 <MX_TIM16_Init+0x58>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 80037be:	4b10      	ldr	r3, [pc, #64]	@ (8003800 <MX_TIM16_Init+0x58>)
 80037c0:	f240 4279 	movw	r2, #1145	@ 0x479
 80037c4:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003800 <MX_TIM16_Init+0x58>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 80037cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <MX_TIM16_Init+0x58>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <MX_TIM16_Init+0x58>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 80037d8:	4809      	ldr	r0, [pc, #36]	@ (8003800 <MX_TIM16_Init+0x58>)
 80037da:	f003 f823 	bl	8006824 <HAL_TIM_Base_Init>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <MX_TIM16_Init+0x40>
		Error_Handler();
 80037e4:	f000 fdea 	bl	80043bc <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 80037e8:	2108      	movs	r1, #8
 80037ea:	4805      	ldr	r0, [pc, #20]	@ (8003800 <MX_TIM16_Init+0x58>)
 80037ec:	f003 fc4e 	bl	800708c <HAL_TIM_OnePulse_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_TIM16_Init+0x52>
		Error_Handler();
 80037f6:	f000 fde1 	bl	80043bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200007c8 	.word	0x200007c8
 8003804:	40014400 	.word	0x40014400

08003808 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800380c:	4b23      	ldr	r3, [pc, #140]	@ (800389c <MX_USART2_UART_Init+0x94>)
 800380e:	4a24      	ldr	r2, [pc, #144]	@ (80038a0 <MX_USART2_UART_Init+0x98>)
 8003810:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 8003812:	4b22      	ldr	r3, [pc, #136]	@ (800389c <MX_USART2_UART_Init+0x94>)
 8003814:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003818:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800381a:	4b20      	ldr	r3, [pc, #128]	@ (800389c <MX_USART2_UART_Init+0x94>)
 800381c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003820:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003822:	4b1e      	ldr	r3, [pc, #120]	@ (800389c <MX_USART2_UART_Init+0x94>)
 8003824:	2200      	movs	r2, #0
 8003826:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8003828:	4b1c      	ldr	r3, [pc, #112]	@ (800389c <MX_USART2_UART_Init+0x94>)
 800382a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800382e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003830:	4b1a      	ldr	r3, [pc, #104]	@ (800389c <MX_USART2_UART_Init+0x94>)
 8003832:	220c      	movs	r2, #12
 8003834:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003836:	4b19      	ldr	r3, [pc, #100]	@ (800389c <MX_USART2_UART_Init+0x94>)
 8003838:	2200      	movs	r2, #0
 800383a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800383c:	4b17      	ldr	r3, [pc, #92]	@ (800389c <MX_USART2_UART_Init+0x94>)
 800383e:	2200      	movs	r2, #0
 8003840:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003842:	4b16      	ldr	r3, [pc, #88]	@ (800389c <MX_USART2_UART_Init+0x94>)
 8003844:	2200      	movs	r2, #0
 8003846:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003848:	4b14      	ldr	r3, [pc, #80]	@ (800389c <MX_USART2_UART_Init+0x94>)
 800384a:	2200      	movs	r2, #0
 800384c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800384e:	4b13      	ldr	r3, [pc, #76]	@ (800389c <MX_USART2_UART_Init+0x94>)
 8003850:	2200      	movs	r2, #0
 8003852:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003854:	4811      	ldr	r0, [pc, #68]	@ (800389c <MX_USART2_UART_Init+0x94>)
 8003856:	f005 fd27 	bl	80092a8 <HAL_UART_Init>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 8003860:	f000 fdac 	bl	80043bc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8003864:	2100      	movs	r1, #0
 8003866:	480d      	ldr	r0, [pc, #52]	@ (800389c <MX_USART2_UART_Init+0x94>)
 8003868:	f007 fb63 	bl	800af32 <HAL_UARTEx_SetTxFifoThreshold>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 8003872:	f000 fda3 	bl	80043bc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8003876:	2100      	movs	r1, #0
 8003878:	4808      	ldr	r0, [pc, #32]	@ (800389c <MX_USART2_UART_Init+0x94>)
 800387a:	f007 fb98 	bl	800afae <HAL_UARTEx_SetRxFifoThreshold>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 8003884:	f000 fd9a 	bl	80043bc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8003888:	4804      	ldr	r0, [pc, #16]	@ (800389c <MX_USART2_UART_Init+0x94>)
 800388a:	f007 fb19 	bl	800aec0 <HAL_UARTEx_DisableFifoMode>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_USART2_UART_Init+0x90>
		Error_Handler();
 8003894:	f000 fd92 	bl	80043bc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003898:	bf00      	nop
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000894 	.word	0x20000894
 80038a0:	40004400 	.word	0x40004400

080038a4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80038aa:	4b16      	ldr	r3, [pc, #88]	@ (8003904 <MX_DMA_Init+0x60>)
 80038ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ae:	4a15      	ldr	r2, [pc, #84]	@ (8003904 <MX_DMA_Init+0x60>)
 80038b0:	f043 0304 	orr.w	r3, r3, #4
 80038b4:	6493      	str	r3, [r2, #72]	@ 0x48
 80038b6:	4b13      	ldr	r3, [pc, #76]	@ (8003904 <MX_DMA_Init+0x60>)
 80038b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80038c2:	4b10      	ldr	r3, [pc, #64]	@ (8003904 <MX_DMA_Init+0x60>)
 80038c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c6:	4a0f      	ldr	r2, [pc, #60]	@ (8003904 <MX_DMA_Init+0x60>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80038ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003904 <MX_DMA_Init+0x60>)
 80038d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80038da:	2200      	movs	r2, #0
 80038dc:	2100      	movs	r1, #0
 80038de:	200b      	movs	r0, #11
 80038e0:	f001 fa3f 	bl	8004d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80038e4:	200b      	movs	r0, #11
 80038e6:	f001 fa56 	bl	8004d96 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80038ea:	2200      	movs	r2, #0
 80038ec:	2100      	movs	r1, #0
 80038ee:	200c      	movs	r0, #12
 80038f0:	f001 fa37 	bl	8004d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80038f4:	200c      	movs	r0, #12
 80038f6:	f001 fa4e 	bl	8004d96 <HAL_NVIC_EnableIRQ>

}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000

08003908 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	@ 0x28
 800390c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800390e:	f107 0314 	add.w	r3, r7, #20
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	605a      	str	r2, [r3, #4]
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	60da      	str	r2, [r3, #12]
 800391c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800391e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ad0 <MX_GPIO_Init+0x1c8>)
 8003920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003922:	4a6b      	ldr	r2, [pc, #428]	@ (8003ad0 <MX_GPIO_Init+0x1c8>)
 8003924:	f043 0304 	orr.w	r3, r3, #4
 8003928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800392a:	4b69      	ldr	r3, [pc, #420]	@ (8003ad0 <MX_GPIO_Init+0x1c8>)
 800392c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003936:	4b66      	ldr	r3, [pc, #408]	@ (8003ad0 <MX_GPIO_Init+0x1c8>)
 8003938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393a:	4a65      	ldr	r2, [pc, #404]	@ (8003ad0 <MX_GPIO_Init+0x1c8>)
 800393c:	f043 0320 	orr.w	r3, r3, #32
 8003940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003942:	4b63      	ldr	r3, [pc, #396]	@ (8003ad0 <MX_GPIO_Init+0x1c8>)
 8003944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800394e:	4b60      	ldr	r3, [pc, #384]	@ (8003ad0 <MX_GPIO_Init+0x1c8>)
 8003950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003952:	4a5f      	ldr	r2, [pc, #380]	@ (8003ad0 <MX_GPIO_Init+0x1c8>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800395a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad0 <MX_GPIO_Init+0x1c8>)
 800395c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003966:	4b5a      	ldr	r3, [pc, #360]	@ (8003ad0 <MX_GPIO_Init+0x1c8>)
 8003968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800396a:	4a59      	ldr	r2, [pc, #356]	@ (8003ad0 <MX_GPIO_Init+0x1c8>)
 800396c:	f043 0302 	orr.w	r3, r3, #2
 8003970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003972:	4b57      	ldr	r3, [pc, #348]	@ (8003ad0 <MX_GPIO_Init+0x1c8>)
 8003974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	607b      	str	r3, [r7, #4]
 800397c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800397e:	2200      	movs	r2, #0
 8003980:	2120      	movs	r1, #32
 8003982:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003986:	f001 feed 	bl	8005764 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12,
 800398a:	2200      	movs	r2, #0
 800398c:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8003990:	4850      	ldr	r0, [pc, #320]	@ (8003ad4 <MX_GPIO_Init+0x1cc>)
 8003992:	f001 fee7 	bl	8005764 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC0 PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 8003996:	230d      	movs	r3, #13
 8003998:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800399a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800399e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	4619      	mov	r1, r3
 80039aa:	484a      	ldr	r0, [pc, #296]	@ (8003ad4 <MX_GPIO_Init+0x1cc>)
 80039ac:	f001 fd40 	bl	8005430 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80039b0:	2320      	movs	r3, #32
 80039b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039b4:	2301      	movs	r3, #1
 80039b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039bc:	2300      	movs	r3, #0
 80039be:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80039c0:	f107 0314 	add.w	r3, r7, #20
 80039c4:	4619      	mov	r1, r3
 80039c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039ca:	f001 fd31 	bl	8005430 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12;
 80039ce:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 80039d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d4:	2301      	movs	r3, #1
 80039d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039dc:	2300      	movs	r3, #0
 80039de:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e0:	f107 0314 	add.w	r3, r7, #20
 80039e4:	4619      	mov	r1, r3
 80039e6:	483b      	ldr	r0, [pc, #236]	@ (8003ad4 <MX_GPIO_Init+0x1cc>)
 80039e8:	f001 fd22 	bl	8005430 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11;
 80039ec:	f640 0304 	movw	r3, #2052	@ 0x804
 80039f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fa:	f107 0314 	add.w	r3, r7, #20
 80039fe:	4619      	mov	r1, r3
 8003a00:	4835      	ldr	r0, [pc, #212]	@ (8003ad8 <MX_GPIO_Init+0x1d0>)
 8003a02:	f001 fd15 	bl	8005430 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8003a06:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003a0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003a0c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003a10:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a12:	2302      	movs	r3, #2
 8003a14:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a16:	f107 0314 	add.w	r3, r7, #20
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	482e      	ldr	r0, [pc, #184]	@ (8003ad8 <MX_GPIO_Init+0x1d0>)
 8003a1e:	f001 fd07 	bl	8005430 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a26:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a28:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a2c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a32:	f107 0314 	add.w	r3, r7, #20
 8003a36:	4619      	mov	r1, r3
 8003a38:	4827      	ldr	r0, [pc, #156]	@ (8003ad8 <MX_GPIO_Init+0x1d0>)
 8003a3a:	f001 fcf9 	bl	8005430 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003a3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003a42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a44:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a48:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4e:	f107 0314 	add.w	r3, r7, #20
 8003a52:	4619      	mov	r1, r3
 8003a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a58:	f001 fcea 	bl	8005430 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a60:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a62:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a66:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a6c:	f107 0314 	add.w	r3, r7, #20
 8003a70:	4619      	mov	r1, r3
 8003a72:	4818      	ldr	r0, [pc, #96]	@ (8003ad4 <MX_GPIO_Init+0x1cc>)
 8003a74:	f001 fcdc 	bl	8005430 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	2006      	movs	r0, #6
 8003a7e:	f001 f970 	bl	8004d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003a82:	2006      	movs	r0, #6
 8003a84:	f001 f987 	bl	8004d96 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	2008      	movs	r0, #8
 8003a8e:	f001 f968 	bl	8004d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003a92:	2008      	movs	r0, #8
 8003a94:	f001 f97f 	bl	8004d96 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	2009      	movs	r0, #9
 8003a9e:	f001 f960 	bl	8004d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003aa2:	2009      	movs	r0, #9
 8003aa4:	f001 f977 	bl	8004d96 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2100      	movs	r1, #0
 8003aac:	2017      	movs	r0, #23
 8003aae:	f001 f958 	bl	8004d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003ab2:	2017      	movs	r0, #23
 8003ab4:	f001 f96f 	bl	8004d96 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2100      	movs	r1, #0
 8003abc:	2028      	movs	r0, #40	@ 0x28
 8003abe:	f001 f950 	bl	8004d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ac2:	2028      	movs	r0, #40	@ 0x28
 8003ac4:	f001 f967 	bl	8004d96 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003ac8:	bf00      	nop
 8003aca:	3728      	adds	r7, #40	@ 0x28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	48000800 	.word	0x48000800
 8003ad8:	48000400 	.word	0x48000400

08003adc <map>:

/* USER CODE BEGIN 4 */
float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	ed87 0a05 	vstr	s0, [r7, #20]
 8003ae6:	edc7 0a04 	vstr	s1, [r7, #16]
 8003aea:	ed87 1a03 	vstr	s2, [r7, #12]
 8003aee:	edc7 1a02 	vstr	s3, [r7, #8]
 8003af2:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003af6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003afa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003afe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b02:	edd7 6a01 	vldr	s13, [r7, #4]
 8003b06:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b0a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b0e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003b12:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b16:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b22:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b26:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <DWT_Init>:

void DWT_Init(void) {
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003b3c:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <DWT_Init+0x28>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a07      	ldr	r2, [pc, #28]	@ (8003b60 <DWT_Init+0x28>)
 8003b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b46:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003b48:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <DWT_Init+0x2c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a05      	ldr	r2, [pc, #20]	@ (8003b64 <DWT_Init+0x2c>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	6013      	str	r3, [r2, #0]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	e000edf0 	.word	0xe000edf0
 8003b64:	e0001000 	.word	0xe0001000

08003b68 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10) {
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b78:	d10d      	bne.n	8003b96 <HAL_GPIO_EXTI_Callback+0x2e>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8003b7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b7e:	4845      	ldr	r0, [pc, #276]	@ (8003c94 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003b80:	f001 fdd8 	bl	8005734 <HAL_GPIO_ReadPin>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d105      	bne.n	8003b96 <HAL_GPIO_EXTI_Callback+0x2e>
			Mode = 0;
 8003b8a:	4b43      	ldr	r3, [pc, #268]	@ (8003c98 <HAL_GPIO_EXTI_Callback+0x130>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 8003b90:	4b42      	ldr	r3, [pc, #264]	@ (8003c9c <HAL_GPIO_EXTI_Callback+0x134>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b9c:	d10e      	bne.n	8003bbc <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 8003b9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ba2:	483f      	ldr	r0, [pc, #252]	@ (8003ca0 <HAL_GPIO_EXTI_Callback+0x138>)
 8003ba4:	f001 fdc6 	bl	8005734 <HAL_GPIO_ReadPin>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d103      	bne.n	8003bb6 <HAL_GPIO_EXTI_Callback+0x4e>
			P_Limit = 1;
 8003bae:	4b3d      	ldr	r3, [pc, #244]	@ (8003ca4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e002      	b.n	8003bbc <HAL_GPIO_EXTI_Callback+0x54>
		} else {
			P_Limit = 0;
 8003bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ca4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 8003bbc:	88fb      	ldrh	r3, [r7, #6]
 8003bbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bc2:	d10e      	bne.n	8003be2 <HAL_GPIO_EXTI_Callback+0x7a>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1) {
 8003bc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003bc8:	4835      	ldr	r0, [pc, #212]	@ (8003ca0 <HAL_GPIO_EXTI_Callback+0x138>)
 8003bca:	f001 fdb3 	bl	8005734 <HAL_GPIO_ReadPin>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d103      	bne.n	8003bdc <HAL_GPIO_EXTI_Callback+0x74>
			R_Limit = 1;
 8003bd4:	4b34      	ldr	r3, [pc, #208]	@ (8003ca8 <HAL_GPIO_EXTI_Callback+0x140>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	e002      	b.n	8003be2 <HAL_GPIO_EXTI_Callback+0x7a>
		} else {
			R_Limit = 0;
 8003bdc:	4b32      	ldr	r3, [pc, #200]	@ (8003ca8 <HAL_GPIO_EXTI_Callback+0x140>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15) {
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003be8:	d102      	bne.n	8003bf0 <HAL_GPIO_EXTI_Callback+0x88>
		EmergencyState = 0;
 8003bea:	4b2c      	ldr	r3, [pc, #176]	@ (8003c9c <HAL_GPIO_EXTI_Callback+0x134>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t state[3] = { 0 }; // 0 = waiting for rise, 1 = waiting for fall

	uint32_t now = DWT->CYCCNT;
 8003bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8003cac <HAL_GPIO_EXTI_Callback+0x144>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]
	uint32_t idx;

	if (GPIO_Pin == GPIO_PIN_0)
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d102      	bne.n	8003c02 <HAL_GPIO_EXTI_Callback+0x9a>
		idx = 0;      // PC0
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	e00a      	b.n	8003c18 <HAL_GPIO_EXTI_Callback+0xb0>
	else if (GPIO_Pin == GPIO_PIN_2)
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d102      	bne.n	8003c0e <HAL_GPIO_EXTI_Callback+0xa6>
		idx = 1; // PC2
 8003c08:	2301      	movs	r3, #1
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e004      	b.n	8003c18 <HAL_GPIO_EXTI_Callback+0xb0>
	else if (GPIO_Pin == GPIO_PIN_3)
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d13b      	bne.n	8003c8c <HAL_GPIO_EXTI_Callback+0x124>
		idx = 2; // PC3
 8003c14:	2302      	movs	r3, #2
 8003c16:	617b      	str	r3, [r7, #20]
	else
		return;

	if (state[idx] == 0) {
 8003c18:	4a25      	ldr	r2, [pc, #148]	@ (8003cb0 <HAL_GPIO_EXTI_Callback+0x148>)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <HAL_GPIO_EXTI_Callback+0xd2>
		rise_time[idx] = now;
 8003c24:	4923      	ldr	r1, [pc, #140]	@ (8003cb4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 1;
 8003c2e:	4a20      	ldr	r2, [pc, #128]	@ (8003cb0 <HAL_GPIO_EXTI_Callback+0x148>)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	4413      	add	r3, r2
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	e029      	b.n	8003c8e <HAL_GPIO_EXTI_Callback+0x126>
	} else {
		uint32_t delta =
				(now >= rise_time[idx]) ?
 8003c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						(now - rise_time[idx]) :
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d306      	bcc.n	8003c56 <HAL_GPIO_EXTI_Callback+0xee>
 8003c48:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	e006      	b.n	8003c64 <HAL_GPIO_EXTI_Callback+0xfc>
						(0xFFFFFFFF - rise_time[idx] + now);
 8003c56:	4a17      	ldr	r2, [pc, #92]	@ (8003cb4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
						(now - rise_time[idx]) :
 8003c62:	3b01      	subs	r3, #1
		uint32_t delta =
 8003c64:	60fb      	str	r3, [r7, #12]
		pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 8003c66:	4b14      	ldr	r3, [pc, #80]	@ (8003cb8 <HAL_GPIO_EXTI_Callback+0x150>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a14      	ldr	r2, [pc, #80]	@ (8003cbc <HAL_GPIO_EXTI_Callback+0x154>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	0c9b      	lsrs	r3, r3, #18
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c78:	4911      	ldr	r1, [pc, #68]	@ (8003cc0 <HAL_GPIO_EXTI_Callback+0x158>)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 0;
 8003c80:	4a0b      	ldr	r2, [pc, #44]	@ (8003cb0 <HAL_GPIO_EXTI_Callback+0x148>)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4413      	add	r3, r2
 8003c86:	2200      	movs	r2, #0
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e000      	b.n	8003c8e <HAL_GPIO_EXTI_Callback+0x126>
		return;
 8003c8c:	bf00      	nop
	}
}
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	48000800 	.word	0x48000800
 8003c98:	20000b28 	.word	0x20000b28
 8003c9c:	20000b29 	.word	0x20000b29
 8003ca0:	48000400 	.word	0x48000400
 8003ca4:	20000b2d 	.word	0x20000b2d
 8003ca8:	20000b2e 	.word	0x20000b2e
 8003cac:	e0001000 	.word	0xe0001000
 8003cb0:	20001244 	.word	0x20001244
 8003cb4:	20000a50 	.word	0x20000a50
 8003cb8:	20000200 	.word	0x20000200
 8003cbc:	431bde83 	.word	0x431bde83
 8003cc0:	20000a5c 	.word	0x20000a5c

08003cc4 <HAL_TIM_PeriodElapsedCallback>:

//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003cc4:	b4b0      	push	{r4, r5, r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a08      	ldr	r2, [pc, #32]	@ (8003cf0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d108      	bne.n	8003ce6 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8003cd4:	4b07      	ldr	r3, [pc, #28]	@ (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	1e54      	subs	r4, r2, #1
 8003cdc:	f143 0500 	adc.w	r5, r3, #0
 8003ce0:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003ce2:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bcb0      	pop	{r4, r5, r7}
 8003cee:	4770      	bx	lr
 8003cf0:	20000564 	.word	0x20000564
 8003cf4:	20000a20 	.word	0x20000a20

08003cf8 <micros>:
uint64_t micros() {
 8003cf8:	b4b0      	push	{r4, r5, r7}
 8003cfa:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8003cfc:	4b09      	ldr	r3, [pc, #36]	@ (8003d24 <micros+0x2c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	2200      	movs	r2, #0
 8003d04:	4618      	mov	r0, r3
 8003d06:	4611      	mov	r1, r2
 8003d08:	4b07      	ldr	r3, [pc, #28]	@ (8003d28 <micros+0x30>)
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	1884      	adds	r4, r0, r2
 8003d10:	eb41 0503 	adc.w	r5, r1, r3
 8003d14:	4622      	mov	r2, r4
 8003d16:	462b      	mov	r3, r5
}
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bcb0      	pop	{r4, r5, r7}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000564 	.word	0x20000564
 8003d28:	20000a20 	.word	0x20000a20

08003d2c <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
		float outMin, float outMax, PID_State *state) {
 8003d2c:	b480      	push	{r7}
 8003d2e:	b08f      	sub	sp, #60	@ 0x3c
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	ed87 0a07 	vstr	s0, [r7, #28]
 8003d36:	edc7 0a06 	vstr	s1, [r7, #24]
 8003d3a:	ed87 1a05 	vstr	s2, [r7, #20]
 8003d3e:	edc7 1a04 	vstr	s3, [r7, #16]
 8003d42:	ed87 2a03 	vstr	s4, [r7, #12]
 8003d46:	edc7 2a02 	vstr	s5, [r7, #8]
 8003d4a:	ed87 3a01 	vstr	s6, [r7, #4]
 8003d4e:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 8003d50:	ed97 7a06 	vldr	s14, [r7, #24]
 8003d54:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	ed93 7a00 	vldr	s14, [r3]
 8003d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	ed93 7a00 	vldr	s14, [r3]
 8003d82:	ed97 6a01 	vldr	s12, [r7, #4]
 8003d86:	edd7 6a05 	vldr	s13, [r7, #20]
 8003d8a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d96:	dd08      	ble.n	8003daa <PID_Update+0x7e>
		state->integ = outMax / kI;
 8003d98:	edd7 6a01 	vldr	s13, [r7, #4]
 8003d9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	ed93 7a00 	vldr	s14, [r3]
 8003db0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003db4:	edd7 6a05 	vldr	s13, [r7, #20]
 8003db8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc4:	d508      	bpl.n	8003dd8 <PID_Update+0xac>
		state->integ = outMin / kI;
 8003dc6:	edd7 6a02 	vldr	s13, [r7, #8]
 8003dca:	ed97 7a05 	vldr	s14, [r7, #20]
 8003dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 8003dd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ddc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de4:	dd0b      	ble.n	8003dfe <PID_Update+0xd2>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	edd3 7a00 	vldr	s15, [r3]
 8003dec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df4:	d503      	bpl.n	8003dfe <PID_Update+0xd2>
		state->integ = 0;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 8003dfe:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0a:	d50b      	bpl.n	8003e24 <PID_Update+0xf8>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	edd3 7a00 	vldr	s15, [r3]
 8003e12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1a:	dd03      	ble.n	8003e24 <PID_Update+0xf8>
		state->integ = 0;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	edd3 7a00 	vldr	s15, [r3]
 8003e2a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e32:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e40:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003e44:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e4c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 8003e50:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e54:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 8003e66:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003e6a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e72:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e7a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 8003e7e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e82:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e8e:	dd01      	ble.n	8003e94 <PID_Update+0x168>
		out = outMax;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 8003e94:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e98:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea4:	d501      	bpl.n	8003eaa <PID_Update+0x17e>
		out = outMin;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 8003eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eac:	ee07 3a90 	vmov	s15, r3
}
 8003eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb4:	373c      	adds	r7, #60	@ 0x3c
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update() {
 8003ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
	// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 8003ec8:	f7ff ff16 	bl	8003cf8 <micros>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	495f      	ldr	r1, [pc, #380]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003ed2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 8003ed6:	4b5f      	ldr	r3, [pc, #380]	@ (8004054 <Revolute_PosVel_Update+0x194>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	4a5c      	ldr	r2, [pc, #368]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003ede:	6013      	str	r3, [r2, #0]

	// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8003ee0:	4b5b      	ldr	r3, [pc, #364]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003ee8:	ee07 3a90 	vmov	s15, r3
 8003eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef0:	4b57      	ldr	r3, [pc, #348]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003ef2:	edc3 7a06 	vstr	s15, [r3, #24]

	// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8003ef6:	4b56      	ldr	r3, [pc, #344]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
			- Revolute_QEIdata.Position[OLD];
 8003efa:	4b55      	ldr	r3, [pc, #340]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8003f00:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f08:	dd04      	ble.n	8003f14 <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	e007      	b.n	8003f24 <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8003f1a:	da03      	bge.n	8003f24 <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003f22:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8003f24:	4b4a      	ldr	r3, [pc, #296]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003f26:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8003f2a:	4b49      	ldr	r3, [pc, #292]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003f2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003f30:	ebb0 0a02 	subs.w	sl, r0, r2
 8003f34:	eb61 0b03 	sbc.w	fp, r1, r3
 8003f38:	4650      	mov	r0, sl
 8003f3a:	4659      	mov	r1, fp
 8003f3c:	f7fc ff02 	bl	8000d44 <__aeabi_ul2f>
 8003f40:	ee07 0a10 	vmov	s14, r0
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8003f44:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8004058 <Revolute_PosVel_Update+0x198>
 8003f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4c:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 8003f50:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f54:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5c:	d06d      	beq.n	800403a <Revolute_PosVel_Update+0x17a>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_r = (float) diffPosition_r / diffTime_r;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	ee07 3a90 	vmov	s15, r3
 8003f64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f68:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f70:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAngularAcceleration = (Vel_counts_r
			- Revolute_QEIdata.QEIAngularVelocity) / diffTime_r;
 8003f74:	4b36      	ldr	r3, [pc, #216]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003f76:	edd3 7a07 	vldr	s15, [r3, #28]
 8003f7a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f7e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003f82:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Revolute_QEIdata.QEIAngularAcceleration = (Vel_counts_r
 8003f8a:	4b31      	ldr	r3, [pc, #196]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003f8c:	edc3 7a08 	vstr	s15, [r3, #32]

	// Store raw velocity
	Revolute_QEIdata.QEIAngularVelocity = Vel_counts_r;
 8003f90:	4a2f      	ldr	r2, [pc, #188]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	61d3      	str	r3, [r2, #28]

	// Angular velocity in rad/s
	Revolute_QEIdata.AngularVelocity_rad = Vel_counts_r
			* (2.0f * M_PI / 16384.0f);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fc faa2 	bl	80004e0 <__aeabi_f2d>
 8003f9c:	a32a      	add	r3, pc, #168	@ (adr r3, 8004048 <Revolute_PosVel_Update+0x188>)
 8003f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa2:	f7fc faf5 	bl	8000590 <__aeabi_dmul>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4610      	mov	r0, r2
 8003fac:	4619      	mov	r1, r3
 8003fae:	f7fc fdb1 	bl	8000b14 <__aeabi_d2f>
 8003fb2:	4603      	mov	r3, r0
	Revolute_QEIdata.AngularVelocity_rad = Vel_counts_r
 8003fb4:	4a26      	ldr	r2, [pc, #152]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003fb6:	6253      	str	r3, [r2, #36]	@ 0x24

	// Angular acceleration in rad/s²
	Revolute_QEIdata.AngularAcceleration_rad =
			Revolute_QEIdata.QEIAngularAcceleration * (2.0f * M_PI / 16384.0f);
 8003fb8:	4b25      	ldr	r3, [pc, #148]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fc fa8f 	bl	80004e0 <__aeabi_f2d>
 8003fc2:	a321      	add	r3, pc, #132	@ (adr r3, 8004048 <Revolute_PosVel_Update+0x188>)
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f7fc fae2 	bl	8000590 <__aeabi_dmul>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	f7fc fd9e 	bl	8000b14 <__aeabi_d2f>
 8003fd8:	4603      	mov	r3, r0
	Revolute_QEIdata.AngularAcceleration_rad =
 8003fda:	4a1d      	ldr	r2, [pc, #116]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003fdc:	6293      	str	r3, [r2, #40]	@ 0x28

	// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 8003fde:	4b1c      	ldr	r3, [pc, #112]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003fe0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003fe4:	68f9      	ldr	r1, [r7, #12]
 8003fe6:	17c8      	asrs	r0, r1, #31
 8003fe8:	460c      	mov	r4, r1
 8003fea:	4605      	mov	r5, r0
 8003fec:	eb12 0804 	adds.w	r8, r2, r4
 8003ff0:	eb43 0905 	adc.w	r9, r3, r5
 8003ff4:	4b16      	ldr	r3, [pc, #88]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003ff6:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8003ffa:	4b15      	ldr	r3, [pc, #84]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8003ffc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (2.0f * M_PI / 16384.0f);
 8004000:	4610      	mov	r0, r2
 8004002:	4619      	mov	r1, r3
 8004004:	f7fc fa96 	bl	8000534 <__aeabi_l2d>
 8004008:	a30f      	add	r3, pc, #60	@ (adr r3, 8004048 <Revolute_PosVel_Update+0x188>)
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f7fc fabf 	bl	8000590 <__aeabi_dmul>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4610      	mov	r0, r2
 8004018:	4619      	mov	r1, r3
 800401a:	f7fc fd7b 	bl	8000b14 <__aeabi_d2f>
 800401e:	4603      	mov	r3, r0
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8004020:	4a0b      	ldr	r2, [pc, #44]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8004022:	6393      	str	r3, [r2, #56]	@ 0x38

	// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 8004024:	4b0a      	ldr	r3, [pc, #40]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a09      	ldr	r2, [pc, #36]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 800402a:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 800402c:	4b08      	ldr	r3, [pc, #32]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 800402e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004032:	4907      	ldr	r1, [pc, #28]	@ (8004050 <Revolute_PosVel_Update+0x190>)
 8004034:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004038:	e000      	b.n	800403c <Revolute_PosVel_Update+0x17c>
		return;
 800403a:	bf00      	nop
}
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004044:	f3af 8000 	nop.w
 8004048:	54442d18 	.word	0x54442d18
 800404c:	3f3921fb 	.word	0x3f3921fb
 8004050:	20000a70 	.word	0x20000a70
 8004054:	20000498 	.word	0x20000498
 8004058:	358637bd 	.word	0x358637bd

0800405c <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update() {
 800405c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
	// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 8004064:	f7ff fe48 	bl	8003cf8 <micros>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	494c      	ldr	r1, [pc, #304]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 800406e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8004072:	4b4c      	ldr	r3, [pc, #304]	@ (80041a4 <Prismatic_PosVel_Update+0x148>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	4a49      	ldr	r2, [pc, #292]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 800407a:	6013      	str	r3, [r2, #0]

	// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 800407c:	4b48      	ldr	r3, [pc, #288]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 800407e:	681a      	ldr	r2, [r3, #0]
			- Prismatic_QEIdata.Position[OLD];
 8004080:	4b47      	ldr	r3, [pc, #284]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004086:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800408e:	dd04      	ble.n	800409a <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	e007      	b.n	80040aa <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80040a0:	da03      	bge.n	80040aa <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80040a8:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 80040aa:	4b3d      	ldr	r3, [pc, #244]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 80040ac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 80040b0:	4b3b      	ldr	r3, [pc, #236]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 80040b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80040b6:	ebb0 0a02 	subs.w	sl, r0, r2
 80040ba:	eb61 0b03 	sbc.w	fp, r1, r3
 80040be:	4650      	mov	r0, sl
 80040c0:	4659      	mov	r1, fp
 80040c2:	f7fc fe3f 	bl	8000d44 <__aeabi_ul2f>
 80040c6:	ee07 0a10 	vmov	s14, r0
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 80040ca:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80041a8 <Prismatic_PosVel_Update+0x14c>
 80040ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d2:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 80040d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80040da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80040de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e2:	d057      	beq.n	8004194 <Prismatic_PosVel_Update+0x138>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_p = (float) diffPosition_p / diffTime_p;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80040ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80040f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040f6:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
			- Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 80040fa:	4b29      	ldr	r3, [pc, #164]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 80040fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8004100:	ed97 7a01 	vldr	s14, [r7, #4]
 8004104:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004108:	ed97 7a02 	vldr	s14, [r7, #8]
 800410c:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
 8004110:	4b23      	ldr	r3, [pc, #140]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 8004112:	edc3 7a07 	vstr	s15, [r3, #28]

	// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 8004116:	4a22      	ldr	r2, [pc, #136]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6193      	str	r3, [r2, #24]

	// Velocity in mm/s
	Prismatic_QEIdata.Velocity_mm = Vel_counts_p * (10.0f / 8192.0f);
 800411c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004120:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80041ac <Prismatic_PosVel_Update+0x150>
 8004124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004128:	4b1d      	ldr	r3, [pc, #116]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 800412a:	edc3 7a08 	vstr	s15, [r3, #32]

	// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration_mm = Prismatic_QEIdata.QEIAcceleration
 800412e:	4b1c      	ldr	r3, [pc, #112]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 8004130:	edd3 7a07 	vldr	s15, [r3, #28]
			* (10.0f / 8192.0f);
 8004134:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80041ac <Prismatic_PosVel_Update+0x150>
 8004138:	ee67 7a87 	vmul.f32	s15, s15, s14
	Prismatic_QEIdata.Acceleration_mm = Prismatic_QEIdata.QEIAcceleration
 800413c:	4b18      	ldr	r3, [pc, #96]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 800413e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 8004142:	4b17      	ldr	r3, [pc, #92]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 8004144:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004148:	68f9      	ldr	r1, [r7, #12]
 800414a:	17c8      	asrs	r0, r1, #31
 800414c:	460c      	mov	r4, r1
 800414e:	4605      	mov	r5, r0
 8004150:	eb12 0804 	adds.w	r8, r2, r4
 8004154:	eb43 0905 	adc.w	r9, r3, r5
 8004158:	4b11      	ldr	r3, [pc, #68]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 800415a:	e9c3 890a 	strd	r8, r9, [r3, #40]	@ 0x28

	// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 800415e:	4b10      	ldr	r3, [pc, #64]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 8004160:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
			* (10.0f / 8192.0f);
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	f7fc fdf4 	bl	8000d54 <__aeabi_l2f>
 800416c:	ee07 0a10 	vmov	s14, r0
 8004170:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80041ac <Prismatic_PosVel_Update+0x150>
 8004174:	ee67 7a27 	vmul.f32	s15, s14, s15
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004178:	4b09      	ldr	r3, [pc, #36]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 800417a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 800417e:	4b08      	ldr	r3, [pc, #32]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a07      	ldr	r2, [pc, #28]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 8004184:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 8004186:	4b06      	ldr	r3, [pc, #24]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 8004188:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800418c:	4904      	ldr	r1, [pc, #16]	@ (80041a0 <Prismatic_PosVel_Update+0x144>)
 800418e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004192:	e000      	b.n	8004196 <Prismatic_PosVel_Update+0x13a>
		return;
 8004194:	bf00      	nop
}
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800419e:	bf00      	nop
 80041a0:	20000ab0 	.word	0x20000ab0
 80041a4:	200003cc 	.word	0x200003cc
 80041a8:	358637bd 	.word	0x358637bd
 80041ac:	3aa00000 	.word	0x3aa00000

080041b0 <Set_Motor>:

void Set_Motor(int motor_num, float speed) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)
 80041bc:	edd7 7a00 	vldr	s15, [r7]
 80041c0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004294 <Set_Motor+0xe4>
 80041c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041cc:	dd01      	ble.n	80041d2 <Set_Motor+0x22>
		speed = 100.0f;
 80041ce:	4b32      	ldr	r3, [pc, #200]	@ (8004298 <Set_Motor+0xe8>)
 80041d0:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f)
 80041d2:	edd7 7a00 	vldr	s15, [r7]
 80041d6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800429c <Set_Motor+0xec>
 80041da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e2:	d501      	bpl.n	80041e8 <Set_Motor+0x38>
		speed = -100.0f;
 80041e4:	4b2e      	ldr	r3, [pc, #184]	@ (80042a0 <Set_Motor+0xf0>)
 80041e6:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t) ((fabsf(speed) * 100) / 100);
 80041e8:	edd7 7a00 	vldr	s15, [r7]
 80041ec:	eef0 7ae7 	vabs.f32	s15, s15
 80041f0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004294 <Set_Motor+0xe4>
 80041f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041f8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004294 <Set_Motor+0xe4>
 80041fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004204:	ee17 3a90 	vmov	r3, s15
 8004208:	60fb      	str	r3, [r7, #12]
	if (motor_num == 0) {
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d11d      	bne.n	800424c <Set_Motor+0x9c>
		if (speed > 0) {
 8004210:	edd7 7a00 	vldr	s15, [r7]
 8004214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421c:	dd05      	ble.n	800422a <Set_Motor+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800421e:	2201      	movs	r2, #1
 8004220:	2120      	movs	r1, #32
 8004222:	4820      	ldr	r0, [pc, #128]	@ (80042a4 <Set_Motor+0xf4>)
 8004224:	f001 fa9e 	bl	8005764 <HAL_GPIO_WritePin>
 8004228:	e00b      	b.n	8004242 <Set_Motor+0x92>
		} else if (speed < 0) {
 800422a:	edd7 7a00 	vldr	s15, [r7]
 800422e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004236:	d504      	bpl.n	8004242 <Set_Motor+0x92>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004238:	2200      	movs	r2, #0
 800423a:	2120      	movs	r1, #32
 800423c:	4819      	ldr	r0, [pc, #100]	@ (80042a4 <Set_Motor+0xf4>)
 800423e:	f001 fa91 	bl	8005764 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 8004242:	4b19      	ldr	r3, [pc, #100]	@ (80042a8 <Set_Motor+0xf8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	63da      	str	r2, [r3, #60]	@ 0x3c
		} else if (speed < 0) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 800424a:	e01f      	b.n	800428c <Set_Motor+0xdc>
	} else if (motor_num == 1) {
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d11c      	bne.n	800428c <Set_Motor+0xdc>
		if (speed > 0) {
 8004252:	edd7 7a00 	vldr	s15, [r7]
 8004256:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425e:	dd05      	ble.n	800426c <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004260:	2200      	movs	r2, #0
 8004262:	2140      	movs	r1, #64	@ 0x40
 8004264:	480f      	ldr	r0, [pc, #60]	@ (80042a4 <Set_Motor+0xf4>)
 8004266:	f001 fa7d 	bl	8005764 <HAL_GPIO_WritePin>
 800426a:	e00b      	b.n	8004284 <Set_Motor+0xd4>
		} else if (speed < 0) {
 800426c:	edd7 7a00 	vldr	s15, [r7]
 8004270:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004278:	d504      	bpl.n	8004284 <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800427a:	2201      	movs	r2, #1
 800427c:	2140      	movs	r1, #64	@ 0x40
 800427e:	4809      	ldr	r0, [pc, #36]	@ (80042a4 <Set_Motor+0xf4>)
 8004280:	f001 fa70 	bl	8005764 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 8004284:	4b08      	ldr	r3, [pc, #32]	@ (80042a8 <Set_Motor+0xf8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	42c80000 	.word	0x42c80000
 8004298:	42c80000 	.word	0x42c80000
 800429c:	c2c80000 	.word	0xc2c80000
 80042a0:	c2c80000 	.word	0xc2c80000
 80042a4:	48000800 	.word	0x48000800
 80042a8:	20000630 	.word	0x20000630

080042ac <Set_Servo>:

void Set_Servo(int Pen_Pos) {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0) {
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10f      	bne.n	80042da <Set_Servo+0x2e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 80042ba:	4b0e      	ldr	r3, [pc, #56]	@ (80042f4 <Set_Servo+0x48>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80042c2:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 80042c4:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <Set_Servo+0x4c>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 80042ca:	f7ff fd15 	bl	8003cf8 <micros>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	490a      	ldr	r1, [pc, #40]	@ (80042fc <Set_Servo+0x50>)
 80042d4:	e9c1 2300 	strd	r2, r3, [r1]
	} else {
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 80042d8:	e007      	b.n	80042ea <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 80042da:	4b06      	ldr	r3, [pc, #24]	@ (80042f4 <Set_Servo+0x48>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042e2:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 80042e4:	4b04      	ldr	r3, [pc, #16]	@ (80042f8 <Set_Servo+0x4c>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200006fc 	.word	0x200006fc
 80042f8:	20000b2c 	.word	0x20000b2c
 80042fc:	20000b90 	.word	0x20000b90

08004300 <Reset_R>:

void Reset_R() {
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 8004304:	4905      	ldr	r1, [pc, #20]	@ (800431c <Reset_R+0x1c>)
 8004306:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 8004312:	bf00      	nop
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	20000a70 	.word	0x20000a70

08004320 <Reset_P>:
void Reset_P() {
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 8004324:	4905      	ldr	r1, [pc, #20]	@ (800433c <Reset_P+0x1c>)
 8004326:	4a06      	ldr	r2, [pc, #24]	@ (8004340 <Reset_P+0x20>)
 8004328:	f04f 33ff 	mov.w	r3, #4294967295
 800432c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//	Prismatic_QEIdata.mmPosition = 0;
}
 8004330:	bf00      	nop
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000ab0 	.word	0x20000ab0
 8004340:	fffff99a 	.word	0xfffff99a

08004344 <Get_QRIdata>:

void Get_QRIdata(float *prism_vel_mm, float *prism_acc_mm, float *prism_mm_pos,
		float *rev_ang_vel_rad, float *rev_ang_acc_rad, float *rev_rad_pos) {
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	603b      	str	r3, [r7, #0]
    if (prism_vel_mm)   *prism_vel_mm   = Prismatic_QEIdata.Velocity_mm;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <Get_QRIdata+0x1c>
 8004358:	4b16      	ldr	r3, [pc, #88]	@ (80043b4 <Get_QRIdata+0x70>)
 800435a:	6a1a      	ldr	r2, [r3, #32]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	601a      	str	r2, [r3, #0]
    if (prism_acc_mm)   *prism_acc_mm   = Prismatic_QEIdata.Acceleration_mm;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <Get_QRIdata+0x2a>
 8004366:	4b13      	ldr	r3, [pc, #76]	@ (80043b4 <Get_QRIdata+0x70>)
 8004368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	601a      	str	r2, [r3, #0]
    if (prism_mm_pos)   *prism_mm_pos   = Prismatic_QEIdata.mmPosition;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <Get_QRIdata+0x38>
 8004374:	4b0f      	ldr	r3, [pc, #60]	@ (80043b4 <Get_QRIdata+0x70>)
 8004376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	601a      	str	r2, [r3, #0]
    if (rev_ang_vel_rad)*rev_ang_vel_rad= Revolute_QEIdata.AngularVelocity_rad;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <Get_QRIdata+0x46>
 8004382:	4b0d      	ldr	r3, [pc, #52]	@ (80043b8 <Get_QRIdata+0x74>)
 8004384:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	601a      	str	r2, [r3, #0]
    if (rev_ang_acc_rad)*rev_ang_acc_rad= Revolute_QEIdata.AngularAcceleration_rad;
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <Get_QRIdata+0x54>
 8004390:	4b09      	ldr	r3, [pc, #36]	@ (80043b8 <Get_QRIdata+0x74>)
 8004392:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	601a      	str	r2, [r3, #0]
    if (rev_rad_pos)    *rev_rad_pos    = Revolute_QEIdata.RadPosition;
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <Get_QRIdata+0x62>
 800439e:	4b06      	ldr	r3, [pc, #24]	@ (80043b8 <Get_QRIdata+0x74>)
 80043a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	601a      	str	r2, [r3, #0]
}
 80043a6:	bf00      	nop
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20000ab0 	.word	0x20000ab0
 80043b8:	20000a70 	.word	0x20000a70

080043bc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043c0:	b672      	cpsid	i
}
 80043c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80043c4:	bf00      	nop
 80043c6:	e7fd      	b.n	80043c4 <Error_Handler+0x8>

080043c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ce:	4b0f      	ldr	r3, [pc, #60]	@ (800440c <HAL_MspInit+0x44>)
 80043d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d2:	4a0e      	ldr	r2, [pc, #56]	@ (800440c <HAL_MspInit+0x44>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80043da:	4b0c      	ldr	r3, [pc, #48]	@ (800440c <HAL_MspInit+0x44>)
 80043dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043e6:	4b09      	ldr	r3, [pc, #36]	@ (800440c <HAL_MspInit+0x44>)
 80043e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ea:	4a08      	ldr	r2, [pc, #32]	@ (800440c <HAL_MspInit+0x44>)
 80043ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80043f2:	4b06      	ldr	r3, [pc, #24]	@ (800440c <HAL_MspInit+0x44>)
 80043f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80043fe:	f001 fa85 	bl	800590c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000

08004410 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08c      	sub	sp, #48	@ 0x30
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004418:	f107 031c 	add.w	r3, r7, #28
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	60da      	str	r2, [r3, #12]
 8004426:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a32      	ldr	r2, [pc, #200]	@ (80044f8 <HAL_TIM_IC_MspInit+0xe8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d130      	bne.n	8004494 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004432:	4b32      	ldr	r3, [pc, #200]	@ (80044fc <HAL_TIM_IC_MspInit+0xec>)
 8004434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004436:	4a31      	ldr	r2, [pc, #196]	@ (80044fc <HAL_TIM_IC_MspInit+0xec>)
 8004438:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800443c:	6613      	str	r3, [r2, #96]	@ 0x60
 800443e:	4b2f      	ldr	r3, [pc, #188]	@ (80044fc <HAL_TIM_IC_MspInit+0xec>)
 8004440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004442:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800444a:	4b2c      	ldr	r3, [pc, #176]	@ (80044fc <HAL_TIM_IC_MspInit+0xec>)
 800444c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800444e:	4a2b      	ldr	r2, [pc, #172]	@ (80044fc <HAL_TIM_IC_MspInit+0xec>)
 8004450:	f043 0304 	orr.w	r3, r3, #4
 8004454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004456:	4b29      	ldr	r3, [pc, #164]	@ (80044fc <HAL_TIM_IC_MspInit+0xec>)
 8004458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004462:	2302      	movs	r3, #2
 8004464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004466:	2302      	movs	r3, #2
 8004468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446a:	2300      	movs	r3, #0
 800446c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446e:	2300      	movs	r3, #0
 8004470:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004472:	2302      	movs	r3, #2
 8004474:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004476:	f107 031c 	add.w	r3, r7, #28
 800447a:	4619      	mov	r1, r3
 800447c:	4820      	ldr	r0, [pc, #128]	@ (8004500 <HAL_TIM_IC_MspInit+0xf0>)
 800447e:	f000 ffd7 	bl	8005430 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004482:	2200      	movs	r2, #0
 8004484:	2100      	movs	r1, #0
 8004486:	2019      	movs	r0, #25
 8004488:	f000 fc6b 	bl	8004d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800448c:	2019      	movs	r0, #25
 800448e:	f000 fc82 	bl	8004d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004492:	e02d      	b.n	80044f0 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449c:	d128      	bne.n	80044f0 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800449e:	4b17      	ldr	r3, [pc, #92]	@ (80044fc <HAL_TIM_IC_MspInit+0xec>)
 80044a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a2:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <HAL_TIM_IC_MspInit+0xec>)
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80044aa:	4b14      	ldr	r3, [pc, #80]	@ (80044fc <HAL_TIM_IC_MspInit+0xec>)
 80044ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b6:	4b11      	ldr	r3, [pc, #68]	@ (80044fc <HAL_TIM_IC_MspInit+0xec>)
 80044b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ba:	4a10      	ldr	r2, [pc, #64]	@ (80044fc <HAL_TIM_IC_MspInit+0xec>)
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044c2:	4b0e      	ldr	r3, [pc, #56]	@ (80044fc <HAL_TIM_IC_MspInit+0xec>)
 80044c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80044ce:	2301      	movs	r3, #1
 80044d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d2:	2302      	movs	r3, #2
 80044d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044da:	2300      	movs	r3, #0
 80044dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044de:	2301      	movs	r3, #1
 80044e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e2:	f107 031c 	add.w	r3, r7, #28
 80044e6:	4619      	mov	r1, r3
 80044e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044ec:	f000 ffa0 	bl	8005430 <HAL_GPIO_Init>
}
 80044f0:	bf00      	nop
 80044f2:	3730      	adds	r7, #48	@ 0x30
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40012c00 	.word	0x40012c00
 80044fc:	40021000 	.word	0x40021000
 8004500:	48000800 	.word	0x48000800

08004504 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08c      	sub	sp, #48	@ 0x30
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800450c:	f107 031c 	add.w	r3, r7, #28
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a33      	ldr	r2, [pc, #204]	@ (80045f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d128      	bne.n	8004578 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004526:	4b33      	ldr	r3, [pc, #204]	@ (80045f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452a:	4a32      	ldr	r2, [pc, #200]	@ (80045f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800452c:	f043 0302 	orr.w	r3, r3, #2
 8004530:	6593      	str	r3, [r2, #88]	@ 0x58
 8004532:	4b30      	ldr	r3, [pc, #192]	@ (80045f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800453e:	4b2d      	ldr	r3, [pc, #180]	@ (80045f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004542:	4a2c      	ldr	r2, [pc, #176]	@ (80045f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004544:	f043 0302 	orr.w	r3, r3, #2
 8004548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800454a:	4b2a      	ldr	r3, [pc, #168]	@ (80045f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800454c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004556:	2330      	movs	r3, #48	@ 0x30
 8004558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455a:	2302      	movs	r3, #2
 800455c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004562:	2300      	movs	r3, #0
 8004564:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004566:	2302      	movs	r3, #2
 8004568:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800456a:	f107 031c 	add.w	r3, r7, #28
 800456e:	4619      	mov	r1, r3
 8004570:	4821      	ldr	r0, [pc, #132]	@ (80045f8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004572:	f000 ff5d 	bl	8005430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004576:	e036      	b.n	80045e6 <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1f      	ldr	r2, [pc, #124]	@ (80045fc <HAL_TIM_Encoder_MspInit+0xf8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d131      	bne.n	80045e6 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004582:	4b1c      	ldr	r3, [pc, #112]	@ (80045f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004586:	4a1b      	ldr	r2, [pc, #108]	@ (80045f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004588:	f043 0304 	orr.w	r3, r3, #4
 800458c:	6593      	str	r3, [r2, #88]	@ 0x58
 800458e:	4b19      	ldr	r3, [pc, #100]	@ (80045f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459a:	4b16      	ldr	r3, [pc, #88]	@ (80045f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800459c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800459e:	4a15      	ldr	r2, [pc, #84]	@ (80045f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045a6:	4b13      	ldr	r3, [pc, #76]	@ (80045f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 80045a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80045b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80045b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b8:	2302      	movs	r3, #2
 80045ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c0:	2300      	movs	r3, #0
 80045c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80045c4:	230a      	movs	r3, #10
 80045c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c8:	f107 031c 	add.w	r3, r7, #28
 80045cc:	4619      	mov	r1, r3
 80045ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045d2:	f000 ff2d 	bl	8005430 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80045d6:	2200      	movs	r2, #0
 80045d8:	2100      	movs	r1, #0
 80045da:	201e      	movs	r0, #30
 80045dc:	f000 fbc1 	bl	8004d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80045e0:	201e      	movs	r0, #30
 80045e2:	f000 fbd8 	bl	8004d96 <HAL_NVIC_EnableIRQ>
}
 80045e6:	bf00      	nop
 80045e8:	3730      	adds	r7, #48	@ 0x30
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40021000 	.word	0x40021000
 80045f8:	48000400 	.word	0x48000400
 80045fc:	40000800 	.word	0x40000800

08004600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a2c      	ldr	r2, [pc, #176]	@ (80046c0 <HAL_TIM_Base_MspInit+0xc0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d114      	bne.n	800463c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004612:	4b2c      	ldr	r3, [pc, #176]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004616:	4a2b      	ldr	r2, [pc, #172]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004618:	f043 0308 	orr.w	r3, r3, #8
 800461c:	6593      	str	r3, [r2, #88]	@ 0x58
 800461e:	4b29      	ldr	r3, [pc, #164]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800462a:	2200      	movs	r2, #0
 800462c:	2100      	movs	r1, #0
 800462e:	2032      	movs	r0, #50	@ 0x32
 8004630:	f000 fb97 	bl	8004d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004634:	2032      	movs	r0, #50	@ 0x32
 8004636:	f000 fbae 	bl	8004d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800463a:	e03c      	b.n	80046b6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a21      	ldr	r2, [pc, #132]	@ (80046c8 <HAL_TIM_Base_MspInit+0xc8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d10c      	bne.n	8004660 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004646:	4b1f      	ldr	r3, [pc, #124]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800464a:	4a1e      	ldr	r2, [pc, #120]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 800464c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004650:	6613      	str	r3, [r2, #96]	@ 0x60
 8004652:	4b1c      	ldr	r3, [pc, #112]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
}
 800465e:	e02a      	b.n	80046b6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM15)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a19      	ldr	r2, [pc, #100]	@ (80046cc <HAL_TIM_Base_MspInit+0xcc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d10c      	bne.n	8004684 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800466a:	4b16      	ldr	r3, [pc, #88]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 800466c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800466e:	4a15      	ldr	r2, [pc, #84]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004674:	6613      	str	r3, [r2, #96]	@ 0x60
 8004676:	4b13      	ldr	r3, [pc, #76]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800467a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
}
 8004682:	e018      	b.n	80046b6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a11      	ldr	r2, [pc, #68]	@ (80046d0 <HAL_TIM_Base_MspInit+0xd0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d113      	bne.n	80046b6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800468e:	4b0d      	ldr	r3, [pc, #52]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004692:	4a0c      	ldr	r2, [pc, #48]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004698:	6613      	str	r3, [r2, #96]	@ 0x60
 800469a:	4b0a      	ldr	r3, [pc, #40]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 800469c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80046a6:	2200      	movs	r2, #0
 80046a8:	2100      	movs	r1, #0
 80046aa:	2019      	movs	r0, #25
 80046ac:	f000 fb59 	bl	8004d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80046b0:	2019      	movs	r0, #25
 80046b2:	f000 fb70 	bl	8004d96 <HAL_NVIC_EnableIRQ>
}
 80046b6:	bf00      	nop
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40000c00 	.word	0x40000c00
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40013400 	.word	0x40013400
 80046cc:	40014000 	.word	0x40014000
 80046d0:	40014400 	.word	0x40014400

080046d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08a      	sub	sp, #40	@ 0x28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046dc:	f107 0314 	add.w	r3, r7, #20
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a23      	ldr	r2, [pc, #140]	@ (8004780 <HAL_TIM_MspPostInit+0xac>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d11d      	bne.n	8004732 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046f6:	4b23      	ldr	r3, [pc, #140]	@ (8004784 <HAL_TIM_MspPostInit+0xb0>)
 80046f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046fa:	4a22      	ldr	r2, [pc, #136]	@ (8004784 <HAL_TIM_MspPostInit+0xb0>)
 80046fc:	f043 0304 	orr.w	r3, r3, #4
 8004700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004702:	4b20      	ldr	r3, [pc, #128]	@ (8004784 <HAL_TIM_MspPostInit+0xb0>)
 8004704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800470e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004714:	2302      	movs	r3, #2
 8004716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004718:	2300      	movs	r3, #0
 800471a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800471c:	2300      	movs	r3, #0
 800471e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004720:	2304      	movs	r3, #4
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004724:	f107 0314 	add.w	r3, r7, #20
 8004728:	4619      	mov	r1, r3
 800472a:	4817      	ldr	r0, [pc, #92]	@ (8004788 <HAL_TIM_MspPostInit+0xb4>)
 800472c:	f000 fe80 	bl	8005430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004730:	e021      	b.n	8004776 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a15      	ldr	r2, [pc, #84]	@ (800478c <HAL_TIM_MspPostInit+0xb8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d11c      	bne.n	8004776 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800473c:	4b11      	ldr	r3, [pc, #68]	@ (8004784 <HAL_TIM_MspPostInit+0xb0>)
 800473e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004740:	4a10      	ldr	r2, [pc, #64]	@ (8004784 <HAL_TIM_MspPostInit+0xb0>)
 8004742:	f043 0302 	orr.w	r3, r3, #2
 8004746:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004748:	4b0e      	ldr	r3, [pc, #56]	@ (8004784 <HAL_TIM_MspPostInit+0xb0>)
 800474a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004754:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475a:	2302      	movs	r3, #2
 800475c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004762:	2300      	movs	r3, #0
 8004764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8004766:	2301      	movs	r3, #1
 8004768:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800476a:	f107 0314 	add.w	r3, r7, #20
 800476e:	4619      	mov	r1, r3
 8004770:	4807      	ldr	r0, [pc, #28]	@ (8004790 <HAL_TIM_MspPostInit+0xbc>)
 8004772:	f000 fe5d 	bl	8005430 <HAL_GPIO_Init>
}
 8004776:	bf00      	nop
 8004778:	3728      	adds	r7, #40	@ 0x28
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40013400 	.word	0x40013400
 8004784:	40021000 	.word	0x40021000
 8004788:	48000800 	.word	0x48000800
 800478c:	40014000 	.word	0x40014000
 8004790:	48000400 	.word	0x48000400

08004794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b09e      	sub	sp, #120	@ 0x78
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800479c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	60da      	str	r2, [r3, #12]
 80047aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047ac:	f107 0310 	add.w	r3, r7, #16
 80047b0:	2254      	movs	r2, #84	@ 0x54
 80047b2:	2100      	movs	r1, #0
 80047b4:	4618      	mov	r0, r3
 80047b6:	f006 fcbd 	bl	800b134 <memset>
  if(huart->Instance==USART2)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a4d      	ldr	r2, [pc, #308]	@ (80048f4 <HAL_UART_MspInit+0x160>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	f040 8092 	bne.w	80048ea <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80047c6:	2302      	movs	r3, #2
 80047c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047ce:	f107 0310 	add.w	r3, r7, #16
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 fdd8 	bl	8006388 <HAL_RCCEx_PeriphCLKConfig>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80047de:	f7ff fded 	bl	80043bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80047e2:	4b45      	ldr	r3, [pc, #276]	@ (80048f8 <HAL_UART_MspInit+0x164>)
 80047e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e6:	4a44      	ldr	r2, [pc, #272]	@ (80048f8 <HAL_UART_MspInit+0x164>)
 80047e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80047ee:	4b42      	ldr	r3, [pc, #264]	@ (80048f8 <HAL_UART_MspInit+0x164>)
 80047f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047fa:	4b3f      	ldr	r3, [pc, #252]	@ (80048f8 <HAL_UART_MspInit+0x164>)
 80047fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047fe:	4a3e      	ldr	r2, [pc, #248]	@ (80048f8 <HAL_UART_MspInit+0x164>)
 8004800:	f043 0301 	orr.w	r3, r3, #1
 8004804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004806:	4b3c      	ldr	r3, [pc, #240]	@ (80048f8 <HAL_UART_MspInit+0x164>)
 8004808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004812:	230c      	movs	r3, #12
 8004814:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004816:	2302      	movs	r3, #2
 8004818:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481a:	2300      	movs	r3, #0
 800481c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800481e:	2300      	movs	r3, #0
 8004820:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004822:	2307      	movs	r3, #7
 8004824:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004826:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800482a:	4619      	mov	r1, r3
 800482c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004830:	f000 fdfe 	bl	8005430 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004834:	4b31      	ldr	r3, [pc, #196]	@ (80048fc <HAL_UART_MspInit+0x168>)
 8004836:	4a32      	ldr	r2, [pc, #200]	@ (8004900 <HAL_UART_MspInit+0x16c>)
 8004838:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800483a:	4b30      	ldr	r3, [pc, #192]	@ (80048fc <HAL_UART_MspInit+0x168>)
 800483c:	221a      	movs	r2, #26
 800483e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004840:	4b2e      	ldr	r3, [pc, #184]	@ (80048fc <HAL_UART_MspInit+0x168>)
 8004842:	2200      	movs	r2, #0
 8004844:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004846:	4b2d      	ldr	r3, [pc, #180]	@ (80048fc <HAL_UART_MspInit+0x168>)
 8004848:	2200      	movs	r2, #0
 800484a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800484c:	4b2b      	ldr	r3, [pc, #172]	@ (80048fc <HAL_UART_MspInit+0x168>)
 800484e:	2280      	movs	r2, #128	@ 0x80
 8004850:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004852:	4b2a      	ldr	r3, [pc, #168]	@ (80048fc <HAL_UART_MspInit+0x168>)
 8004854:	2200      	movs	r2, #0
 8004856:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004858:	4b28      	ldr	r3, [pc, #160]	@ (80048fc <HAL_UART_MspInit+0x168>)
 800485a:	2200      	movs	r2, #0
 800485c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800485e:	4b27      	ldr	r3, [pc, #156]	@ (80048fc <HAL_UART_MspInit+0x168>)
 8004860:	2200      	movs	r2, #0
 8004862:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004864:	4b25      	ldr	r3, [pc, #148]	@ (80048fc <HAL_UART_MspInit+0x168>)
 8004866:	2200      	movs	r2, #0
 8004868:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800486a:	4824      	ldr	r0, [pc, #144]	@ (80048fc <HAL_UART_MspInit+0x168>)
 800486c:	f000 faae 	bl	8004dcc <HAL_DMA_Init>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004876:	f7ff fda1 	bl	80043bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a1f      	ldr	r2, [pc, #124]	@ (80048fc <HAL_UART_MspInit+0x168>)
 800487e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004882:	4a1e      	ldr	r2, [pc, #120]	@ (80048fc <HAL_UART_MspInit+0x168>)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004888:	4b1e      	ldr	r3, [pc, #120]	@ (8004904 <HAL_UART_MspInit+0x170>)
 800488a:	4a1f      	ldr	r2, [pc, #124]	@ (8004908 <HAL_UART_MspInit+0x174>)
 800488c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800488e:	4b1d      	ldr	r3, [pc, #116]	@ (8004904 <HAL_UART_MspInit+0x170>)
 8004890:	221b      	movs	r2, #27
 8004892:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004894:	4b1b      	ldr	r3, [pc, #108]	@ (8004904 <HAL_UART_MspInit+0x170>)
 8004896:	2210      	movs	r2, #16
 8004898:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800489a:	4b1a      	ldr	r3, [pc, #104]	@ (8004904 <HAL_UART_MspInit+0x170>)
 800489c:	2200      	movs	r2, #0
 800489e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048a0:	4b18      	ldr	r3, [pc, #96]	@ (8004904 <HAL_UART_MspInit+0x170>)
 80048a2:	2280      	movs	r2, #128	@ 0x80
 80048a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048a6:	4b17      	ldr	r3, [pc, #92]	@ (8004904 <HAL_UART_MspInit+0x170>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048ac:	4b15      	ldr	r3, [pc, #84]	@ (8004904 <HAL_UART_MspInit+0x170>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80048b2:	4b14      	ldr	r3, [pc, #80]	@ (8004904 <HAL_UART_MspInit+0x170>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80048b8:	4b12      	ldr	r3, [pc, #72]	@ (8004904 <HAL_UART_MspInit+0x170>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80048be:	4811      	ldr	r0, [pc, #68]	@ (8004904 <HAL_UART_MspInit+0x170>)
 80048c0:	f000 fa84 	bl	8004dcc <HAL_DMA_Init>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80048ca:	f7ff fd77 	bl	80043bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a0c      	ldr	r2, [pc, #48]	@ (8004904 <HAL_UART_MspInit+0x170>)
 80048d2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80048d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004904 <HAL_UART_MspInit+0x170>)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80048da:	2200      	movs	r2, #0
 80048dc:	2100      	movs	r1, #0
 80048de:	2026      	movs	r0, #38	@ 0x26
 80048e0:	f000 fa3f 	bl	8004d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80048e4:	2026      	movs	r0, #38	@ 0x26
 80048e6:	f000 fa56 	bl	8004d96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80048ea:	bf00      	nop
 80048ec:	3778      	adds	r7, #120	@ 0x78
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40004400 	.word	0x40004400
 80048f8:	40021000 	.word	0x40021000
 80048fc:	20000960 	.word	0x20000960
 8004900:	40020008 	.word	0x40020008
 8004904:	200009c0 	.word	0x200009c0
 8004908:	4002001c 	.word	0x4002001c

0800490c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004910:	bf00      	nop
 8004912:	e7fd      	b.n	8004910 <NMI_Handler+0x4>

08004914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004918:	bf00      	nop
 800491a:	e7fd      	b.n	8004918 <HardFault_Handler+0x4>

0800491c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004920:	bf00      	nop
 8004922:	e7fd      	b.n	8004920 <MemManage_Handler+0x4>

08004924 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004928:	bf00      	nop
 800492a:	e7fd      	b.n	8004928 <BusFault_Handler+0x4>

0800492c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004930:	bf00      	nop
 8004932:	e7fd      	b.n	8004930 <UsageFault_Handler+0x4>

08004934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004942:	b480      	push	{r7}
 8004944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004946:	bf00      	nop
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004962:	f000 f905 	bl	8004b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004966:	bf00      	nop
 8004968:	bd80      	pop	{r7, pc}

0800496a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800496e:	2001      	movs	r0, #1
 8004970:	f000 ff10 	bl	8005794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004974:	bf00      	nop
 8004976:	bd80      	pop	{r7, pc}

08004978 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800497c:	2004      	movs	r0, #4
 800497e:	f000 ff09 	bl	8005794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004982:	bf00      	nop
 8004984:	bd80      	pop	{r7, pc}

08004986 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800498a:	2008      	movs	r0, #8
 800498c:	f000 ff02 	bl	8005794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004990:	bf00      	nop
 8004992:	bd80      	pop	{r7, pc}

08004994 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004998:	4802      	ldr	r0, [pc, #8]	@ (80049a4 <DMA1_Channel1_IRQHandler+0x10>)
 800499a:	f000 fbfa 	bl	8005192 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800499e:	bf00      	nop
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000960 	.word	0x20000960

080049a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80049ac:	4802      	ldr	r0, [pc, #8]	@ (80049b8 <DMA1_Channel2_IRQHandler+0x10>)
 80049ae:	f000 fbf0 	bl	8005192 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	200009c0 	.word	0x200009c0

080049bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80049c0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80049c4:	f000 fee6 	bl	8005794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80049c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80049cc:	f000 fee2 	bl	8005794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80049d0:	bf00      	nop
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049d8:	4803      	ldr	r0, [pc, #12]	@ (80049e8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80049da:	f002 fd8f 	bl	80074fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80049de:	4803      	ldr	r0, [pc, #12]	@ (80049ec <TIM1_UP_TIM16_IRQHandler+0x18>)
 80049e0:	f002 fd8c 	bl	80074fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80049e4:	bf00      	nop
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000234 	.word	0x20000234
 80049ec:	200007c8 	.word	0x200007c8

080049f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80049f4:	4802      	ldr	r0, [pc, #8]	@ (8004a00 <TIM4_IRQHandler+0x10>)
 80049f6:	f002 fd81 	bl	80074fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80049fa:	bf00      	nop
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000498 	.word	0x20000498

08004a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a08:	4802      	ldr	r0, [pc, #8]	@ (8004a14 <USART2_IRQHandler+0x10>)
 8004a0a:	f004 fe33 	bl	8009674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000894 	.word	0x20000894

08004a18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004a1c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004a20:	f000 feb8 	bl	8005794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004a24:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004a28:	f000 feb4 	bl	8005794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004a2c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004a30:	f000 feb0 	bl	8005794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004a34:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004a38:	f000 feac 	bl	8005794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a3c:	bf00      	nop
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004a44:	4802      	ldr	r0, [pc, #8]	@ (8004a50 <TIM5_IRQHandler+0x10>)
 8004a46:	f002 fd59 	bl	80074fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000564 	.word	0x20000564

08004a54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004a58:	4b06      	ldr	r3, [pc, #24]	@ (8004a74 <SystemInit+0x20>)
 8004a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5e:	4a05      	ldr	r2, [pc, #20]	@ (8004a74 <SystemInit+0x20>)
 8004a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a68:	bf00      	nop
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	e000ed00 	.word	0xe000ed00

08004a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004a78:	480d      	ldr	r0, [pc, #52]	@ (8004ab0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004a7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a7c:	f7ff ffea 	bl	8004a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a80:	480c      	ldr	r0, [pc, #48]	@ (8004ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004a82:	490d      	ldr	r1, [pc, #52]	@ (8004ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a84:	4a0d      	ldr	r2, [pc, #52]	@ (8004abc <LoopForever+0xe>)
  movs r3, #0
 8004a86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004a88:	e002      	b.n	8004a90 <LoopCopyDataInit>

08004a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a8e:	3304      	adds	r3, #4

08004a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a94:	d3f9      	bcc.n	8004a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a96:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a98:	4c0a      	ldr	r4, [pc, #40]	@ (8004ac4 <LoopForever+0x16>)
  movs r3, #0
 8004a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a9c:	e001      	b.n	8004aa2 <LoopFillZerobss>

08004a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004aa0:	3204      	adds	r2, #4

08004aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004aa4:	d3fb      	bcc.n	8004a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004aa6:	f006 fb4d 	bl	800b144 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004aaa:	f7fd f801 	bl	8001ab0 <main>

08004aae <LoopForever>:

LoopForever:
    b LoopForever
 8004aae:	e7fe      	b.n	8004aae <LoopForever>
  ldr   r0, =_estack
 8004ab0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ab8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8004abc:	0800c0c8 	.word	0x0800c0c8
  ldr r2, =_sbss
 8004ac0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004ac4:	2000124c 	.word	0x2000124c

08004ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ac8:	e7fe      	b.n	8004ac8 <ADC1_2_IRQHandler>

08004aca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b082      	sub	sp, #8
 8004ace:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ad4:	2003      	movs	r0, #3
 8004ad6:	f000 f939 	bl	8004d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ada:	2000      	movs	r0, #0
 8004adc:	f000 f80e 	bl	8004afc <HAL_InitTick>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	71fb      	strb	r3, [r7, #7]
 8004aea:	e001      	b.n	8004af0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004aec:	f7ff fc6c 	bl	80043c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004af0:	79fb      	ldrb	r3, [r7, #7]

}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004b08:	4b16      	ldr	r3, [pc, #88]	@ (8004b64 <HAL_InitTick+0x68>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d022      	beq.n	8004b56 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004b10:	4b15      	ldr	r3, [pc, #84]	@ (8004b68 <HAL_InitTick+0x6c>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4b13      	ldr	r3, [pc, #76]	@ (8004b64 <HAL_InitTick+0x68>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004b1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 f944 	bl	8004db2 <HAL_SYSTICK_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10f      	bne.n	8004b50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b0f      	cmp	r3, #15
 8004b34:	d809      	bhi.n	8004b4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b36:	2200      	movs	r2, #0
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3e:	f000 f910 	bl	8004d62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b42:	4a0a      	ldr	r2, [pc, #40]	@ (8004b6c <HAL_InitTick+0x70>)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	e007      	b.n	8004b5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73fb      	strb	r3, [r7, #15]
 8004b4e:	e004      	b.n	8004b5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
 8004b54:	e001      	b.n	8004b5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000208 	.word	0x20000208
 8004b68:	20000200 	.word	0x20000200
 8004b6c:	20000204 	.word	0x20000204

08004b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b74:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <HAL_IncTick+0x1c>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <HAL_IncTick+0x20>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	4a03      	ldr	r2, [pc, #12]	@ (8004b8c <HAL_IncTick+0x1c>)
 8004b80:	6013      	str	r3, [r2, #0]
}
 8004b82:	bf00      	nop
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	20001248 	.word	0x20001248
 8004b90:	20000208 	.word	0x20000208

08004b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return uwTick;
 8004b98:	4b03      	ldr	r3, [pc, #12]	@ (8004ba8 <HAL_GetTick+0x14>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20001248 	.word	0x20001248

08004bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bc8:	4013      	ands	r3, r2
 8004bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bde:	4a04      	ldr	r2, [pc, #16]	@ (8004bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	60d3      	str	r3, [r2, #12]
}
 8004be4:	bf00      	nop
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	e000ed00 	.word	0xe000ed00

08004bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bf8:	4b04      	ldr	r3, [pc, #16]	@ (8004c0c <__NVIC_GetPriorityGrouping+0x18>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	0a1b      	lsrs	r3, r3, #8
 8004bfe:	f003 0307 	and.w	r3, r3, #7
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	e000ed00 	.word	0xe000ed00

08004c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	db0b      	blt.n	8004c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	f003 021f 	and.w	r2, r3, #31
 8004c28:	4907      	ldr	r1, [pc, #28]	@ (8004c48 <__NVIC_EnableIRQ+0x38>)
 8004c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	2001      	movs	r0, #1
 8004c32:	fa00 f202 	lsl.w	r2, r0, r2
 8004c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	e000e100 	.word	0xe000e100

08004c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	6039      	str	r1, [r7, #0]
 8004c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	db0a      	blt.n	8004c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	490c      	ldr	r1, [pc, #48]	@ (8004c98 <__NVIC_SetPriority+0x4c>)
 8004c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6a:	0112      	lsls	r2, r2, #4
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	440b      	add	r3, r1
 8004c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c74:	e00a      	b.n	8004c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	4908      	ldr	r1, [pc, #32]	@ (8004c9c <__NVIC_SetPriority+0x50>)
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	3b04      	subs	r3, #4
 8004c84:	0112      	lsls	r2, r2, #4
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	440b      	add	r3, r1
 8004c8a:	761a      	strb	r2, [r3, #24]
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	e000e100 	.word	0xe000e100
 8004c9c:	e000ed00 	.word	0xe000ed00

08004ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b089      	sub	sp, #36	@ 0x24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f1c3 0307 	rsb	r3, r3, #7
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	bf28      	it	cs
 8004cbe:	2304      	movcs	r3, #4
 8004cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	2b06      	cmp	r3, #6
 8004cc8:	d902      	bls.n	8004cd0 <NVIC_EncodePriority+0x30>
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	3b03      	subs	r3, #3
 8004cce:	e000      	b.n	8004cd2 <NVIC_EncodePriority+0x32>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43da      	mvns	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	401a      	ands	r2, r3
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf2:	43d9      	mvns	r1, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf8:	4313      	orrs	r3, r2
         );
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3724      	adds	r7, #36	@ 0x24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d18:	d301      	bcc.n	8004d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e00f      	b.n	8004d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d48 <SysTick_Config+0x40>)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d26:	210f      	movs	r1, #15
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2c:	f7ff ff8e 	bl	8004c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d30:	4b05      	ldr	r3, [pc, #20]	@ (8004d48 <SysTick_Config+0x40>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d36:	4b04      	ldr	r3, [pc, #16]	@ (8004d48 <SysTick_Config+0x40>)
 8004d38:	2207      	movs	r2, #7
 8004d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	e000e010 	.word	0xe000e010

08004d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ff29 	bl	8004bac <__NVIC_SetPriorityGrouping>
}
 8004d5a:	bf00      	nop
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b086      	sub	sp, #24
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	4603      	mov	r3, r0
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	607a      	str	r2, [r7, #4]
 8004d6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d70:	f7ff ff40 	bl	8004bf4 <__NVIC_GetPriorityGrouping>
 8004d74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	6978      	ldr	r0, [r7, #20]
 8004d7c:	f7ff ff90 	bl	8004ca0 <NVIC_EncodePriority>
 8004d80:	4602      	mov	r2, r0
 8004d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d86:	4611      	mov	r1, r2
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff ff5f 	bl	8004c4c <__NVIC_SetPriority>
}
 8004d8e:	bf00      	nop
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff ff33 	bl	8004c10 <__NVIC_EnableIRQ>
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff ffa4 	bl	8004d08 <SysTick_Config>
 8004dc0:	4603      	mov	r3, r0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e08d      	b.n	8004efa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	4b47      	ldr	r3, [pc, #284]	@ (8004f04 <HAL_DMA_Init+0x138>)
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d80f      	bhi.n	8004e0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	4b45      	ldr	r3, [pc, #276]	@ (8004f08 <HAL_DMA_Init+0x13c>)
 8004df2:	4413      	add	r3, r2
 8004df4:	4a45      	ldr	r2, [pc, #276]	@ (8004f0c <HAL_DMA_Init+0x140>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	091b      	lsrs	r3, r3, #4
 8004dfc:	009a      	lsls	r2, r3, #2
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a42      	ldr	r2, [pc, #264]	@ (8004f10 <HAL_DMA_Init+0x144>)
 8004e06:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e08:	e00e      	b.n	8004e28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	4b40      	ldr	r3, [pc, #256]	@ (8004f14 <HAL_DMA_Init+0x148>)
 8004e12:	4413      	add	r3, r2
 8004e14:	4a3d      	ldr	r2, [pc, #244]	@ (8004f0c <HAL_DMA_Init+0x140>)
 8004e16:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	009a      	lsls	r2, r3, #2
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a3c      	ldr	r2, [pc, #240]	@ (8004f18 <HAL_DMA_Init+0x14c>)
 8004e26:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fa76 	bl	800536c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e88:	d102      	bne.n	8004e90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ea4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d010      	beq.n	8004ed0 <HAL_DMA_Init+0x104>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d80c      	bhi.n	8004ed0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa96 	bl	80053e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	e008      	b.n	8004ee2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40020407 	.word	0x40020407
 8004f08:	bffdfff8 	.word	0xbffdfff8
 8004f0c:	cccccccd 	.word	0xcccccccd
 8004f10:	40020000 	.word	0x40020000
 8004f14:	bffdfbf8 	.word	0xbffdfbf8
 8004f18:	40020400 	.word	0x40020400

08004f1c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_DMA_Start_IT+0x20>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e066      	b.n	800500a <HAL_DMA_Start_IT+0xee>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d155      	bne.n	8004ffc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	68b9      	ldr	r1, [r7, #8]
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f9bb 	bl	80052f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d008      	beq.n	8004f94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 020e 	orr.w	r2, r2, #14
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e00f      	b.n	8004fb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0204 	bic.w	r2, r2, #4
 8004fa2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 020a 	orr.w	r2, r2, #10
 8004fb2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d007      	beq.n	8004fd2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fd0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d007      	beq.n	8004fea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fe8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0201 	orr.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	e005      	b.n	8005008 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005004:	2302      	movs	r3, #2
 8005006:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005008:	7dfb      	ldrb	r3, [r7, #23]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d005      	beq.n	8005036 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2204      	movs	r2, #4
 800502e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
 8005034:	e037      	b.n	80050a6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 020e 	bic.w	r2, r2, #14
 8005044:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005050:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005054:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506a:	f003 021f 	and.w	r2, r3, #31
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	2101      	movs	r1, #1
 8005074:	fa01 f202 	lsl.w	r2, r1, r2
 8005078:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005082:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00c      	beq.n	80050a6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005096:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800509a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80050a4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d00d      	beq.n	80050f8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2204      	movs	r2, #4
 80050e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]
 80050f6:	e047      	b.n	8005188 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 020e 	bic.w	r2, r2, #14
 8005106:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0201 	bic.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005122:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005126:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512c:	f003 021f 	and.w	r2, r3, #31
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005134:	2101      	movs	r1, #1
 8005136:	fa01 f202 	lsl.w	r2, r1, r2
 800513a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005144:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00c      	beq.n	8005168 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005158:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800515c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005166:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	4798      	blx	r3
    }
  }
  return status;
 8005188:	7bfb      	ldrb	r3, [r7, #15]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ae:	f003 031f 	and.w	r3, r3, #31
 80051b2:	2204      	movs	r2, #4
 80051b4:	409a      	lsls	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d026      	beq.n	800520c <HAL_DMA_IRQHandler+0x7a>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d021      	beq.n	800520c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d107      	bne.n	80051e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0204 	bic.w	r2, r2, #4
 80051e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ea:	f003 021f 	and.w	r2, r3, #31
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	2104      	movs	r1, #4
 80051f4:	fa01 f202 	lsl.w	r2, r1, r2
 80051f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d071      	beq.n	80052e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800520a:	e06c      	b.n	80052e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	2202      	movs	r2, #2
 8005216:	409a      	lsls	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4013      	ands	r3, r2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d02e      	beq.n	800527e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d029      	beq.n	800527e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10b      	bne.n	8005250 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 020a 	bic.w	r2, r2, #10
 8005246:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005254:	f003 021f 	and.w	r2, r3, #31
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525c:	2102      	movs	r1, #2
 800525e:	fa01 f202 	lsl.w	r2, r1, r2
 8005262:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005270:	2b00      	cmp	r3, #0
 8005272:	d038      	beq.n	80052e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800527c:	e033      	b.n	80052e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	2208      	movs	r2, #8
 8005288:	409a      	lsls	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4013      	ands	r3, r2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d02a      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d025      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 020e 	bic.w	r2, r2, #14
 80052aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b0:	f003 021f 	and.w	r2, r3, #31
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	2101      	movs	r1, #1
 80052ba:	fa01 f202 	lsl.w	r2, r1, r2
 80052be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80052e6:	bf00      	nop
 80052e8:	bf00      	nop
}
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005306:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530c:	2b00      	cmp	r3, #0
 800530e:	d004      	beq.n	800531a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005318:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531e:	f003 021f 	and.w	r2, r3, #31
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	2101      	movs	r1, #1
 8005328:	fa01 f202 	lsl.w	r2, r1, r2
 800532c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b10      	cmp	r3, #16
 800533c:	d108      	bne.n	8005350 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800534e:	e007      	b.n	8005360 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	60da      	str	r2, [r3, #12]
}
 8005360:	bf00      	nop
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	4b16      	ldr	r3, [pc, #88]	@ (80053d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800537c:	429a      	cmp	r2, r3
 800537e:	d802      	bhi.n	8005386 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005380:	4b15      	ldr	r3, [pc, #84]	@ (80053d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	e001      	b.n	800538a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005386:	4b15      	ldr	r3, [pc, #84]	@ (80053dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005388:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	3b08      	subs	r3, #8
 8005396:	4a12      	ldr	r2, [pc, #72]	@ (80053e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005398:	fba2 2303 	umull	r2, r3, r2, r3
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a4:	089b      	lsrs	r3, r3, #2
 80053a6:	009a      	lsls	r2, r3, #2
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	4413      	add	r3, r2
 80053ac:	461a      	mov	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a0b      	ldr	r2, [pc, #44]	@ (80053e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80053b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	2201      	movs	r2, #1
 80053c0:	409a      	lsls	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80053c6:	bf00      	nop
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40020407 	.word	0x40020407
 80053d8:	40020800 	.word	0x40020800
 80053dc:	40020820 	.word	0x40020820
 80053e0:	cccccccd 	.word	0xcccccccd
 80053e4:	40020880 	.word	0x40020880

080053e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	461a      	mov	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a08      	ldr	r2, [pc, #32]	@ (800542c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800540a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3b01      	subs	r3, #1
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	2201      	movs	r2, #1
 8005416:	409a      	lsls	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800541c:	bf00      	nop
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	1000823f 	.word	0x1000823f
 800542c:	40020940 	.word	0x40020940

08005430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800543e:	e15a      	b.n	80056f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	2101      	movs	r1, #1
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	fa01 f303 	lsl.w	r3, r1, r3
 800544c:	4013      	ands	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 814c 	beq.w	80056f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	2b01      	cmp	r3, #1
 8005462:	d005      	beq.n	8005470 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800546c:	2b02      	cmp	r3, #2
 800546e:	d130      	bne.n	80054d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	2203      	movs	r2, #3
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	43db      	mvns	r3, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4013      	ands	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054a6:	2201      	movs	r2, #1
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43db      	mvns	r3, r3
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4013      	ands	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	091b      	lsrs	r3, r3, #4
 80054bc:	f003 0201 	and.w	r2, r3, #1
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d017      	beq.n	800550e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	2203      	movs	r2, #3
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43db      	mvns	r3, r3
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4013      	ands	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d123      	bne.n	8005562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	08da      	lsrs	r2, r3, #3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3208      	adds	r2, #8
 8005522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005526:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	220f      	movs	r2, #15
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43db      	mvns	r3, r3
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4013      	ands	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	08da      	lsrs	r2, r3, #3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3208      	adds	r2, #8
 800555c:	6939      	ldr	r1, [r7, #16]
 800555e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	2203      	movs	r2, #3
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	43db      	mvns	r3, r3
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4013      	ands	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f003 0203 	and.w	r2, r3, #3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 80a6 	beq.w	80056f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055a4:	4b5b      	ldr	r3, [pc, #364]	@ (8005714 <HAL_GPIO_Init+0x2e4>)
 80055a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a8:	4a5a      	ldr	r2, [pc, #360]	@ (8005714 <HAL_GPIO_Init+0x2e4>)
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80055b0:	4b58      	ldr	r3, [pc, #352]	@ (8005714 <HAL_GPIO_Init+0x2e4>)
 80055b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055bc:	4a56      	ldr	r2, [pc, #344]	@ (8005718 <HAL_GPIO_Init+0x2e8>)
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	089b      	lsrs	r3, r3, #2
 80055c2:	3302      	adds	r3, #2
 80055c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	220f      	movs	r2, #15
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4013      	ands	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80055e6:	d01f      	beq.n	8005628 <HAL_GPIO_Init+0x1f8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a4c      	ldr	r2, [pc, #304]	@ (800571c <HAL_GPIO_Init+0x2ec>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d019      	beq.n	8005624 <HAL_GPIO_Init+0x1f4>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a4b      	ldr	r2, [pc, #300]	@ (8005720 <HAL_GPIO_Init+0x2f0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d013      	beq.n	8005620 <HAL_GPIO_Init+0x1f0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a4a      	ldr	r2, [pc, #296]	@ (8005724 <HAL_GPIO_Init+0x2f4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00d      	beq.n	800561c <HAL_GPIO_Init+0x1ec>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a49      	ldr	r2, [pc, #292]	@ (8005728 <HAL_GPIO_Init+0x2f8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d007      	beq.n	8005618 <HAL_GPIO_Init+0x1e8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a48      	ldr	r2, [pc, #288]	@ (800572c <HAL_GPIO_Init+0x2fc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d101      	bne.n	8005614 <HAL_GPIO_Init+0x1e4>
 8005610:	2305      	movs	r3, #5
 8005612:	e00a      	b.n	800562a <HAL_GPIO_Init+0x1fa>
 8005614:	2306      	movs	r3, #6
 8005616:	e008      	b.n	800562a <HAL_GPIO_Init+0x1fa>
 8005618:	2304      	movs	r3, #4
 800561a:	e006      	b.n	800562a <HAL_GPIO_Init+0x1fa>
 800561c:	2303      	movs	r3, #3
 800561e:	e004      	b.n	800562a <HAL_GPIO_Init+0x1fa>
 8005620:	2302      	movs	r3, #2
 8005622:	e002      	b.n	800562a <HAL_GPIO_Init+0x1fa>
 8005624:	2301      	movs	r3, #1
 8005626:	e000      	b.n	800562a <HAL_GPIO_Init+0x1fa>
 8005628:	2300      	movs	r3, #0
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	f002 0203 	and.w	r2, r2, #3
 8005630:	0092      	lsls	r2, r2, #2
 8005632:	4093      	lsls	r3, r2
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800563a:	4937      	ldr	r1, [pc, #220]	@ (8005718 <HAL_GPIO_Init+0x2e8>)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	089b      	lsrs	r3, r3, #2
 8005640:	3302      	adds	r3, #2
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005648:	4b39      	ldr	r3, [pc, #228]	@ (8005730 <HAL_GPIO_Init+0x300>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	43db      	mvns	r3, r3
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4013      	ands	r3, r2
 8005656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800566c:	4a30      	ldr	r2, [pc, #192]	@ (8005730 <HAL_GPIO_Init+0x300>)
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005672:	4b2f      	ldr	r3, [pc, #188]	@ (8005730 <HAL_GPIO_Init+0x300>)
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	43db      	mvns	r3, r3
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4013      	ands	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005696:	4a26      	ldr	r2, [pc, #152]	@ (8005730 <HAL_GPIO_Init+0x300>)
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800569c:	4b24      	ldr	r3, [pc, #144]	@ (8005730 <HAL_GPIO_Init+0x300>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	43db      	mvns	r3, r3
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4013      	ands	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005730 <HAL_GPIO_Init+0x300>)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80056c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005730 <HAL_GPIO_Init+0x300>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	43db      	mvns	r3, r3
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4013      	ands	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056ea:	4a11      	ldr	r2, [pc, #68]	@ (8005730 <HAL_GPIO_Init+0x300>)
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	3301      	adds	r3, #1
 80056f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	f47f ae9d 	bne.w	8005440 <HAL_GPIO_Init+0x10>
  }
}
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	40021000 	.word	0x40021000
 8005718:	40010000 	.word	0x40010000
 800571c:	48000400 	.word	0x48000400
 8005720:	48000800 	.word	0x48000800
 8005724:	48000c00 	.word	0x48000c00
 8005728:	48001000 	.word	0x48001000
 800572c:	48001400 	.word	0x48001400
 8005730:	40010400 	.word	0x40010400

08005734 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	887b      	ldrh	r3, [r7, #2]
 8005746:	4013      	ands	r3, r2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800574c:	2301      	movs	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
 8005750:	e001      	b.n	8005756 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005752:	2300      	movs	r3, #0
 8005754:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005756:	7bfb      	ldrb	r3, [r7, #15]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	807b      	strh	r3, [r7, #2]
 8005770:	4613      	mov	r3, r2
 8005772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005774:	787b      	ldrb	r3, [r7, #1]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800577a:	887a      	ldrh	r2, [r7, #2]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005780:	e002      	b.n	8005788 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005782:	887a      	ldrh	r2, [r7, #2]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	4603      	mov	r3, r0
 800579c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800579e:	4b08      	ldr	r3, [pc, #32]	@ (80057c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057a0:	695a      	ldr	r2, [r3, #20]
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	4013      	ands	r3, r2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d006      	beq.n	80057b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057aa:	4a05      	ldr	r2, [pc, #20]	@ (80057c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057b0:	88fb      	ldrh	r3, [r7, #6]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe f9d8 	bl	8003b68 <HAL_GPIO_EXTI_Callback>
  }
}
 80057b8:	bf00      	nop
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40010400 	.word	0x40010400

080057c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d141      	bne.n	8005856 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057d2:	4b4b      	ldr	r3, [pc, #300]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80057da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057de:	d131      	bne.n	8005844 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057e0:	4b47      	ldr	r3, [pc, #284]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057e6:	4a46      	ldr	r2, [pc, #280]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057f0:	4b43      	ldr	r3, [pc, #268]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057f8:	4a41      	ldr	r2, [pc, #260]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005800:	4b40      	ldr	r3, [pc, #256]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2232      	movs	r2, #50	@ 0x32
 8005806:	fb02 f303 	mul.w	r3, r2, r3
 800580a:	4a3f      	ldr	r2, [pc, #252]	@ (8005908 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800580c:	fba2 2303 	umull	r2, r3, r2, r3
 8005810:	0c9b      	lsrs	r3, r3, #18
 8005812:	3301      	adds	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005816:	e002      	b.n	800581e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3b01      	subs	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800581e:	4b38      	ldr	r3, [pc, #224]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800582a:	d102      	bne.n	8005832 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f2      	bne.n	8005818 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005832:	4b33      	ldr	r3, [pc, #204]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800583a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800583e:	d158      	bne.n	80058f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e057      	b.n	80058f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005844:	4b2e      	ldr	r3, [pc, #184]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800584a:	4a2d      	ldr	r2, [pc, #180]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800584c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005850:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005854:	e04d      	b.n	80058f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800585c:	d141      	bne.n	80058e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800585e:	4b28      	ldr	r3, [pc, #160]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800586a:	d131      	bne.n	80058d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800586c:	4b24      	ldr	r3, [pc, #144]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800586e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005872:	4a23      	ldr	r2, [pc, #140]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005878:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800587c:	4b20      	ldr	r3, [pc, #128]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005884:	4a1e      	ldr	r2, [pc, #120]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005886:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800588a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800588c:	4b1d      	ldr	r3, [pc, #116]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2232      	movs	r2, #50	@ 0x32
 8005892:	fb02 f303 	mul.w	r3, r2, r3
 8005896:	4a1c      	ldr	r2, [pc, #112]	@ (8005908 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005898:	fba2 2303 	umull	r2, r3, r2, r3
 800589c:	0c9b      	lsrs	r3, r3, #18
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058a2:	e002      	b.n	80058aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3b01      	subs	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058aa:	4b15      	ldr	r3, [pc, #84]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b6:	d102      	bne.n	80058be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f2      	bne.n	80058a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058be:	4b10      	ldr	r3, [pc, #64]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ca:	d112      	bne.n	80058f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e011      	b.n	80058f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058e0:	e007      	b.n	80058f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058e2:	4b07      	ldr	r3, [pc, #28]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058ea:	4a05      	ldr	r2, [pc, #20]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	40007000 	.word	0x40007000
 8005904:	20000200 	.word	0x20000200
 8005908:	431bde83 	.word	0x431bde83

0800590c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005910:	4b05      	ldr	r3, [pc, #20]	@ (8005928 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	4a04      	ldr	r2, [pc, #16]	@ (8005928 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005916:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800591a:	6093      	str	r3, [r2, #8]
}
 800591c:	bf00      	nop
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40007000 	.word	0x40007000

0800592c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e2fe      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d075      	beq.n	8005a36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800594a:	4b97      	ldr	r3, [pc, #604]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 030c 	and.w	r3, r3, #12
 8005952:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005954:	4b94      	ldr	r3, [pc, #592]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	2b0c      	cmp	r3, #12
 8005962:	d102      	bne.n	800596a <HAL_RCC_OscConfig+0x3e>
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b03      	cmp	r3, #3
 8005968:	d002      	beq.n	8005970 <HAL_RCC_OscConfig+0x44>
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b08      	cmp	r3, #8
 800596e:	d10b      	bne.n	8005988 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005970:	4b8d      	ldr	r3, [pc, #564]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d05b      	beq.n	8005a34 <HAL_RCC_OscConfig+0x108>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d157      	bne.n	8005a34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e2d9      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005990:	d106      	bne.n	80059a0 <HAL_RCC_OscConfig+0x74>
 8005992:	4b85      	ldr	r3, [pc, #532]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a84      	ldr	r2, [pc, #528]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e01d      	b.n	80059dc <HAL_RCC_OscConfig+0xb0>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059a8:	d10c      	bne.n	80059c4 <HAL_RCC_OscConfig+0x98>
 80059aa:	4b7f      	ldr	r3, [pc, #508]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a7e      	ldr	r2, [pc, #504]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 80059b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	4b7c      	ldr	r3, [pc, #496]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a7b      	ldr	r2, [pc, #492]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 80059bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	e00b      	b.n	80059dc <HAL_RCC_OscConfig+0xb0>
 80059c4:	4b78      	ldr	r3, [pc, #480]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a77      	ldr	r2, [pc, #476]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 80059ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4b75      	ldr	r3, [pc, #468]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a74      	ldr	r2, [pc, #464]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 80059d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d013      	beq.n	8005a0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e4:	f7ff f8d6 	bl	8004b94 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ec:	f7ff f8d2 	bl	8004b94 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b64      	cmp	r3, #100	@ 0x64
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e29e      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059fe:	4b6a      	ldr	r3, [pc, #424]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0xc0>
 8005a0a:	e014      	b.n	8005a36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0c:	f7ff f8c2 	bl	8004b94 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a14:	f7ff f8be 	bl	8004b94 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	@ 0x64
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e28a      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a26:	4b60      	ldr	r3, [pc, #384]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0xe8>
 8005a32:	e000      	b.n	8005a36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d075      	beq.n	8005b2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a42:	4b59      	ldr	r3, [pc, #356]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a4c:	4b56      	ldr	r3, [pc, #344]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	2b0c      	cmp	r3, #12
 8005a5a:	d102      	bne.n	8005a62 <HAL_RCC_OscConfig+0x136>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d002      	beq.n	8005a68 <HAL_RCC_OscConfig+0x13c>
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d11f      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a68:	4b4f      	ldr	r3, [pc, #316]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_OscConfig+0x154>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e25d      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a80:	4b49      	ldr	r3, [pc, #292]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	061b      	lsls	r3, r3, #24
 8005a8e:	4946      	ldr	r1, [pc, #280]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a94:	4b45      	ldr	r3, [pc, #276]	@ (8005bac <HAL_RCC_OscConfig+0x280>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff f82f 	bl	8004afc <HAL_InitTick>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d043      	beq.n	8005b2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e249      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d023      	beq.n	8005af8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ab0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7ff f86a 	bl	8004b94 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ac4:	f7ff f866 	bl	8004b94 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e232      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ad6:	4b34      	ldr	r3, [pc, #208]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae2:	4b31      	ldr	r3, [pc, #196]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	061b      	lsls	r3, r3, #24
 8005af0:	492d      	ldr	r1, [pc, #180]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	604b      	str	r3, [r1, #4]
 8005af6:	e01a      	b.n	8005b2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005af8:	4b2b      	ldr	r3, [pc, #172]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a2a      	ldr	r2, [pc, #168]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005afe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b04:	f7ff f846 	bl	8004b94 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b0c:	f7ff f842 	bl	8004b94 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e20e      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b1e:	4b22      	ldr	r3, [pc, #136]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f0      	bne.n	8005b0c <HAL_RCC_OscConfig+0x1e0>
 8005b2a:	e000      	b.n	8005b2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d041      	beq.n	8005bbe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01c      	beq.n	8005b7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b42:	4b19      	ldr	r3, [pc, #100]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b48:	4a17      	ldr	r2, [pc, #92]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b52:	f7ff f81f 	bl	8004b94 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b5a:	f7ff f81b 	bl	8004b94 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e1e7      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0ef      	beq.n	8005b5a <HAL_RCC_OscConfig+0x22e>
 8005b7a:	e020      	b.n	8005bbe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b82:	4a09      	ldr	r2, [pc, #36]	@ (8005ba8 <HAL_RCC_OscConfig+0x27c>)
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8c:	f7ff f802 	bl	8004b94 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b92:	e00d      	b.n	8005bb0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b94:	f7fe fffe 	bl	8004b94 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d906      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e1ca      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
 8005ba6:	bf00      	nop
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bb0:	4b8c      	ldr	r3, [pc, #560]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1ea      	bne.n	8005b94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0304 	and.w	r3, r3, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 80a6 	beq.w	8005d18 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bd0:	4b84      	ldr	r3, [pc, #528]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_RCC_OscConfig+0x2b4>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <HAL_RCC_OscConfig+0x2b6>
 8005be0:	2300      	movs	r3, #0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00d      	beq.n	8005c02 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005be6:	4b7f      	ldr	r3, [pc, #508]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bea:	4a7e      	ldr	r2, [pc, #504]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bf2:	4b7c      	ldr	r3, [pc, #496]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c02:	4b79      	ldr	r3, [pc, #484]	@ (8005de8 <HAL_RCC_OscConfig+0x4bc>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d118      	bne.n	8005c40 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c0e:	4b76      	ldr	r3, [pc, #472]	@ (8005de8 <HAL_RCC_OscConfig+0x4bc>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a75      	ldr	r2, [pc, #468]	@ (8005de8 <HAL_RCC_OscConfig+0x4bc>)
 8005c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c1a:	f7fe ffbb 	bl	8004b94 <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c20:	e008      	b.n	8005c34 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c22:	f7fe ffb7 	bl	8004b94 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e183      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c34:	4b6c      	ldr	r3, [pc, #432]	@ (8005de8 <HAL_RCC_OscConfig+0x4bc>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0f0      	beq.n	8005c22 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d108      	bne.n	8005c5a <HAL_RCC_OscConfig+0x32e>
 8005c48:	4b66      	ldr	r3, [pc, #408]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4e:	4a65      	ldr	r2, [pc, #404]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005c50:	f043 0301 	orr.w	r3, r3, #1
 8005c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c58:	e024      	b.n	8005ca4 <HAL_RCC_OscConfig+0x378>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2b05      	cmp	r3, #5
 8005c60:	d110      	bne.n	8005c84 <HAL_RCC_OscConfig+0x358>
 8005c62:	4b60      	ldr	r3, [pc, #384]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c68:	4a5e      	ldr	r2, [pc, #376]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005c6a:	f043 0304 	orr.w	r3, r3, #4
 8005c6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c72:	4b5c      	ldr	r3, [pc, #368]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c78:	4a5a      	ldr	r2, [pc, #360]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c82:	e00f      	b.n	8005ca4 <HAL_RCC_OscConfig+0x378>
 8005c84:	4b57      	ldr	r3, [pc, #348]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c8a:	4a56      	ldr	r2, [pc, #344]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005c8c:	f023 0301 	bic.w	r3, r3, #1
 8005c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c94:	4b53      	ldr	r3, [pc, #332]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c9a:	4a52      	ldr	r2, [pc, #328]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005c9c:	f023 0304 	bic.w	r3, r3, #4
 8005ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d016      	beq.n	8005cda <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cac:	f7fe ff72 	bl	8004b94 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb2:	e00a      	b.n	8005cca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb4:	f7fe ff6e 	bl	8004b94 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e138      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cca:	4b46      	ldr	r3, [pc, #280]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0ed      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x388>
 8005cd8:	e015      	b.n	8005d06 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cda:	f7fe ff5b 	bl	8004b94 <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ce0:	e00a      	b.n	8005cf8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce2:	f7fe ff57 	bl	8004b94 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e121      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1ed      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d06:	7ffb      	ldrb	r3, [r7, #31]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d105      	bne.n	8005d18 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d0c:	4b35      	ldr	r3, [pc, #212]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d10:	4a34      	ldr	r2, [pc, #208]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d16:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d03c      	beq.n	8005d9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01c      	beq.n	8005d66 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d32:	4a2c      	ldr	r2, [pc, #176]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005d34:	f043 0301 	orr.w	r3, r3, #1
 8005d38:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3c:	f7fe ff2a 	bl	8004b94 <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d44:	f7fe ff26 	bl	8004b94 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e0f2      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d56:	4b23      	ldr	r3, [pc, #140]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0ef      	beq.n	8005d44 <HAL_RCC_OscConfig+0x418>
 8005d64:	e01b      	b.n	8005d9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d66:	4b1f      	ldr	r3, [pc, #124]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005d6e:	f023 0301 	bic.w	r3, r3, #1
 8005d72:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d76:	f7fe ff0d 	bl	8004b94 <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d7c:	e008      	b.n	8005d90 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d7e:	f7fe ff09 	bl	8004b94 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e0d5      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d90:	4b14      	ldr	r3, [pc, #80]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1ef      	bne.n	8005d7e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 80c9 	beq.w	8005f3a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005da8:	4b0e      	ldr	r3, [pc, #56]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 030c 	and.w	r3, r3, #12
 8005db0:	2b0c      	cmp	r3, #12
 8005db2:	f000 8083 	beq.w	8005ebc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d15e      	bne.n	8005e7c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dbe:	4b09      	ldr	r3, [pc, #36]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a08      	ldr	r2, [pc, #32]	@ (8005de4 <HAL_RCC_OscConfig+0x4b8>)
 8005dc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dca:	f7fe fee3 	bl	8004b94 <HAL_GetTick>
 8005dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dd0:	e00c      	b.n	8005dec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd2:	f7fe fedf 	bl	8004b94 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d905      	bls.n	8005dec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e0ab      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
 8005de4:	40021000 	.word	0x40021000
 8005de8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dec:	4b55      	ldr	r3, [pc, #340]	@ (8005f44 <HAL_RCC_OscConfig+0x618>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1ec      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005df8:	4b52      	ldr	r3, [pc, #328]	@ (8005f44 <HAL_RCC_OscConfig+0x618>)
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	4b52      	ldr	r3, [pc, #328]	@ (8005f48 <HAL_RCC_OscConfig+0x61c>)
 8005dfe:	4013      	ands	r3, r2
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6a11      	ldr	r1, [r2, #32]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e08:	3a01      	subs	r2, #1
 8005e0a:	0112      	lsls	r2, r2, #4
 8005e0c:	4311      	orrs	r1, r2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005e12:	0212      	lsls	r2, r2, #8
 8005e14:	4311      	orrs	r1, r2
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e1a:	0852      	lsrs	r2, r2, #1
 8005e1c:	3a01      	subs	r2, #1
 8005e1e:	0552      	lsls	r2, r2, #21
 8005e20:	4311      	orrs	r1, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e26:	0852      	lsrs	r2, r2, #1
 8005e28:	3a01      	subs	r2, #1
 8005e2a:	0652      	lsls	r2, r2, #25
 8005e2c:	4311      	orrs	r1, r2
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e32:	06d2      	lsls	r2, r2, #27
 8005e34:	430a      	orrs	r2, r1
 8005e36:	4943      	ldr	r1, [pc, #268]	@ (8005f44 <HAL_RCC_OscConfig+0x618>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e3c:	4b41      	ldr	r3, [pc, #260]	@ (8005f44 <HAL_RCC_OscConfig+0x618>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a40      	ldr	r2, [pc, #256]	@ (8005f44 <HAL_RCC_OscConfig+0x618>)
 8005e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e46:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e48:	4b3e      	ldr	r3, [pc, #248]	@ (8005f44 <HAL_RCC_OscConfig+0x618>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	4a3d      	ldr	r2, [pc, #244]	@ (8005f44 <HAL_RCC_OscConfig+0x618>)
 8005e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e54:	f7fe fe9e 	bl	8004b94 <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e5c:	f7fe fe9a 	bl	8004b94 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e066      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e6e:	4b35      	ldr	r3, [pc, #212]	@ (8005f44 <HAL_RCC_OscConfig+0x618>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d0f0      	beq.n	8005e5c <HAL_RCC_OscConfig+0x530>
 8005e7a:	e05e      	b.n	8005f3a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e7c:	4b31      	ldr	r3, [pc, #196]	@ (8005f44 <HAL_RCC_OscConfig+0x618>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a30      	ldr	r2, [pc, #192]	@ (8005f44 <HAL_RCC_OscConfig+0x618>)
 8005e82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fe fe84 	bl	8004b94 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e90:	f7fe fe80 	bl	8004b94 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e04c      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ea2:	4b28      	ldr	r3, [pc, #160]	@ (8005f44 <HAL_RCC_OscConfig+0x618>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f0      	bne.n	8005e90 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005eae:	4b25      	ldr	r3, [pc, #148]	@ (8005f44 <HAL_RCC_OscConfig+0x618>)
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	4924      	ldr	r1, [pc, #144]	@ (8005f44 <HAL_RCC_OscConfig+0x618>)
 8005eb4:	4b25      	ldr	r3, [pc, #148]	@ (8005f4c <HAL_RCC_OscConfig+0x620>)
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	60cb      	str	r3, [r1, #12]
 8005eba:	e03e      	b.n	8005f3a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e039      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8005f44 <HAL_RCC_OscConfig+0x618>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f003 0203 	and.w	r2, r3, #3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d12c      	bne.n	8005f36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d123      	bne.n	8005f36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d11b      	bne.n	8005f36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f08:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d113      	bne.n	8005f36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f18:	085b      	lsrs	r3, r3, #1
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d109      	bne.n	8005f36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2c:	085b      	lsrs	r3, r3, #1
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d001      	beq.n	8005f3a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3720      	adds	r7, #32
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40021000 	.word	0x40021000
 8005f48:	019f800c 	.word	0x019f800c
 8005f4c:	feeefffc 	.word	0xfeeefffc

08005f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e11e      	b.n	80061a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f68:	4b91      	ldr	r3, [pc, #580]	@ (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d910      	bls.n	8005f98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f76:	4b8e      	ldr	r3, [pc, #568]	@ (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f023 020f 	bic.w	r2, r3, #15
 8005f7e:	498c      	ldr	r1, [pc, #560]	@ (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f86:	4b8a      	ldr	r3, [pc, #552]	@ (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 030f 	and.w	r3, r3, #15
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d001      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e106      	b.n	80061a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d073      	beq.n	800608c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d129      	bne.n	8006000 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fac:	4b81      	ldr	r3, [pc, #516]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e0f4      	b.n	80061a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005fbc:	f000 f99e 	bl	80062fc <RCC_GetSysClockFreqFromPLLSource>
 8005fc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4a7c      	ldr	r2, [pc, #496]	@ (80061b8 <HAL_RCC_ClockConfig+0x268>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d93f      	bls.n	800604a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fca:	4b7a      	ldr	r3, [pc, #488]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d033      	beq.n	800604a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d12f      	bne.n	800604a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fea:	4b72      	ldr	r3, [pc, #456]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ff2:	4a70      	ldr	r2, [pc, #448]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8005ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ff8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ffa:	2380      	movs	r3, #128	@ 0x80
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	e024      	b.n	800604a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d107      	bne.n	8006018 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006008:	4b6a      	ldr	r3, [pc, #424]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d109      	bne.n	8006028 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0c6      	b.n	80061a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006018:	4b66      	ldr	r3, [pc, #408]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e0be      	b.n	80061a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006028:	f000 f8ce 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 800602c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	4a61      	ldr	r2, [pc, #388]	@ (80061b8 <HAL_RCC_ClockConfig+0x268>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d909      	bls.n	800604a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006036:	4b5f      	ldr	r3, [pc, #380]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800603e:	4a5d      	ldr	r2, [pc, #372]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8006040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006044:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006046:	2380      	movs	r3, #128	@ 0x80
 8006048:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800604a:	4b5a      	ldr	r3, [pc, #360]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f023 0203 	bic.w	r2, r3, #3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4957      	ldr	r1, [pc, #348]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8006058:	4313      	orrs	r3, r2
 800605a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800605c:	f7fe fd9a 	bl	8004b94 <HAL_GetTick>
 8006060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006062:	e00a      	b.n	800607a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006064:	f7fe fd96 	bl	8004b94 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006072:	4293      	cmp	r3, r2
 8006074:	d901      	bls.n	800607a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e095      	b.n	80061a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800607a:	4b4e      	ldr	r3, [pc, #312]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 020c 	and.w	r2, r3, #12
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	429a      	cmp	r2, r3
 800608a:	d1eb      	bne.n	8006064 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d023      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0304 	and.w	r3, r3, #4
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d005      	beq.n	80060b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060a4:	4b43      	ldr	r3, [pc, #268]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	4a42      	ldr	r2, [pc, #264]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80060ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d007      	beq.n	80060cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80060bc:	4b3d      	ldr	r3, [pc, #244]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80060c4:	4a3b      	ldr	r2, [pc, #236]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80060ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060cc:	4b39      	ldr	r3, [pc, #228]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	4936      	ldr	r1, [pc, #216]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	608b      	str	r3, [r1, #8]
 80060de:	e008      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2b80      	cmp	r3, #128	@ 0x80
 80060e4:	d105      	bne.n	80060f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060e6:	4b33      	ldr	r3, [pc, #204]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	4a32      	ldr	r2, [pc, #200]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060f2:	4b2f      	ldr	r3, [pc, #188]	@ (80061b0 <HAL_RCC_ClockConfig+0x260>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d21d      	bcs.n	800613c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006100:	4b2b      	ldr	r3, [pc, #172]	@ (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f023 020f 	bic.w	r2, r3, #15
 8006108:	4929      	ldr	r1, [pc, #164]	@ (80061b0 <HAL_RCC_ClockConfig+0x260>)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	4313      	orrs	r3, r2
 800610e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006110:	f7fe fd40 	bl	8004b94 <HAL_GetTick>
 8006114:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006116:	e00a      	b.n	800612e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006118:	f7fe fd3c 	bl	8004b94 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006126:	4293      	cmp	r3, r2
 8006128:	d901      	bls.n	800612e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e03b      	b.n	80061a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800612e:	4b20      	ldr	r3, [pc, #128]	@ (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	429a      	cmp	r2, r3
 800613a:	d1ed      	bne.n	8006118 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d008      	beq.n	800615a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006148:	4b1a      	ldr	r3, [pc, #104]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	4917      	ldr	r1, [pc, #92]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8006156:	4313      	orrs	r3, r2
 8006158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0308 	and.w	r3, r3, #8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006166:	4b13      	ldr	r3, [pc, #76]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	490f      	ldr	r1, [pc, #60]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8006176:	4313      	orrs	r3, r2
 8006178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800617a:	f000 f825 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 800617e:	4602      	mov	r2, r0
 8006180:	4b0c      	ldr	r3, [pc, #48]	@ (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	091b      	lsrs	r3, r3, #4
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	490c      	ldr	r1, [pc, #48]	@ (80061bc <HAL_RCC_ClockConfig+0x26c>)
 800618c:	5ccb      	ldrb	r3, [r1, r3]
 800618e:	f003 031f 	and.w	r3, r3, #31
 8006192:	fa22 f303 	lsr.w	r3, r2, r3
 8006196:	4a0a      	ldr	r2, [pc, #40]	@ (80061c0 <HAL_RCC_ClockConfig+0x270>)
 8006198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800619a:	4b0a      	ldr	r3, [pc, #40]	@ (80061c4 <HAL_RCC_ClockConfig+0x274>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fcac 	bl	8004afc <HAL_InitTick>
 80061a4:	4603      	mov	r3, r0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40022000 	.word	0x40022000
 80061b4:	40021000 	.word	0x40021000
 80061b8:	04c4b400 	.word	0x04c4b400
 80061bc:	0800bca8 	.word	0x0800bca8
 80061c0:	20000200 	.word	0x20000200
 80061c4:	20000204 	.word	0x20000204

080061c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80061ce:	4b2c      	ldr	r3, [pc, #176]	@ (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 030c 	and.w	r3, r3, #12
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d102      	bne.n	80061e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061da:	4b2a      	ldr	r3, [pc, #168]	@ (8006284 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	e047      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80061e0:	4b27      	ldr	r3, [pc, #156]	@ (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f003 030c 	and.w	r3, r3, #12
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d102      	bne.n	80061f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061ec:	4b26      	ldr	r3, [pc, #152]	@ (8006288 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	e03e      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80061f2:	4b23      	ldr	r3, [pc, #140]	@ (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 030c 	and.w	r3, r3, #12
 80061fa:	2b0c      	cmp	r3, #12
 80061fc:	d136      	bne.n	800626c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061fe:	4b20      	ldr	r3, [pc, #128]	@ (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006208:	4b1d      	ldr	r3, [pc, #116]	@ (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	091b      	lsrs	r3, r3, #4
 800620e:	f003 030f 	and.w	r3, r3, #15
 8006212:	3301      	adds	r3, #1
 8006214:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b03      	cmp	r3, #3
 800621a:	d10c      	bne.n	8006236 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800621c:	4a1a      	ldr	r2, [pc, #104]	@ (8006288 <HAL_RCC_GetSysClockFreq+0xc0>)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	fbb2 f3f3 	udiv	r3, r2, r3
 8006224:	4a16      	ldr	r2, [pc, #88]	@ (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006226:	68d2      	ldr	r2, [r2, #12]
 8006228:	0a12      	lsrs	r2, r2, #8
 800622a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800622e:	fb02 f303 	mul.w	r3, r2, r3
 8006232:	617b      	str	r3, [r7, #20]
      break;
 8006234:	e00c      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006236:	4a13      	ldr	r2, [pc, #76]	@ (8006284 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	fbb2 f3f3 	udiv	r3, r2, r3
 800623e:	4a10      	ldr	r2, [pc, #64]	@ (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006240:	68d2      	ldr	r2, [r2, #12]
 8006242:	0a12      	lsrs	r2, r2, #8
 8006244:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006248:	fb02 f303 	mul.w	r3, r2, r3
 800624c:	617b      	str	r3, [r7, #20]
      break;
 800624e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006250:	4b0b      	ldr	r3, [pc, #44]	@ (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	0e5b      	lsrs	r3, r3, #25
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	3301      	adds	r3, #1
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	fbb2 f3f3 	udiv	r3, r2, r3
 8006268:	613b      	str	r3, [r7, #16]
 800626a:	e001      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006270:	693b      	ldr	r3, [r7, #16]
}
 8006272:	4618      	mov	r0, r3
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40021000 	.word	0x40021000
 8006284:	00f42400 	.word	0x00f42400
 8006288:	016e3600 	.word	0x016e3600

0800628c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006290:	4b03      	ldr	r3, [pc, #12]	@ (80062a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006292:	681b      	ldr	r3, [r3, #0]
}
 8006294:	4618      	mov	r0, r3
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20000200 	.word	0x20000200

080062a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062a8:	f7ff fff0 	bl	800628c <HAL_RCC_GetHCLKFreq>
 80062ac:	4602      	mov	r2, r0
 80062ae:	4b06      	ldr	r3, [pc, #24]	@ (80062c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	0a1b      	lsrs	r3, r3, #8
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	4904      	ldr	r1, [pc, #16]	@ (80062cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80062ba:	5ccb      	ldrb	r3, [r1, r3]
 80062bc:	f003 031f 	and.w	r3, r3, #31
 80062c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40021000 	.word	0x40021000
 80062cc:	0800bcb8 	.word	0x0800bcb8

080062d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062d4:	f7ff ffda 	bl	800628c <HAL_RCC_GetHCLKFreq>
 80062d8:	4602      	mov	r2, r0
 80062da:	4b06      	ldr	r3, [pc, #24]	@ (80062f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	0adb      	lsrs	r3, r3, #11
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	4904      	ldr	r1, [pc, #16]	@ (80062f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062e6:	5ccb      	ldrb	r3, [r1, r3]
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40021000 	.word	0x40021000
 80062f8:	0800bcb8 	.word	0x0800bcb8

080062fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006302:	4b1e      	ldr	r3, [pc, #120]	@ (800637c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800630c:	4b1b      	ldr	r3, [pc, #108]	@ (800637c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	091b      	lsrs	r3, r3, #4
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	3301      	adds	r3, #1
 8006318:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b03      	cmp	r3, #3
 800631e:	d10c      	bne.n	800633a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006320:	4a17      	ldr	r2, [pc, #92]	@ (8006380 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	fbb2 f3f3 	udiv	r3, r2, r3
 8006328:	4a14      	ldr	r2, [pc, #80]	@ (800637c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800632a:	68d2      	ldr	r2, [r2, #12]
 800632c:	0a12      	lsrs	r2, r2, #8
 800632e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006332:	fb02 f303 	mul.w	r3, r2, r3
 8006336:	617b      	str	r3, [r7, #20]
    break;
 8006338:	e00c      	b.n	8006354 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800633a:	4a12      	ldr	r2, [pc, #72]	@ (8006384 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006342:	4a0e      	ldr	r2, [pc, #56]	@ (800637c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006344:	68d2      	ldr	r2, [r2, #12]
 8006346:	0a12      	lsrs	r2, r2, #8
 8006348:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800634c:	fb02 f303 	mul.w	r3, r2, r3
 8006350:	617b      	str	r3, [r7, #20]
    break;
 8006352:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006354:	4b09      	ldr	r3, [pc, #36]	@ (800637c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	0e5b      	lsrs	r3, r3, #25
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	3301      	adds	r3, #1
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	fbb2 f3f3 	udiv	r3, r2, r3
 800636c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800636e:	687b      	ldr	r3, [r7, #4]
}
 8006370:	4618      	mov	r0, r3
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	40021000 	.word	0x40021000
 8006380:	016e3600 	.word	0x016e3600
 8006384:	00f42400 	.word	0x00f42400

08006388 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006390:	2300      	movs	r3, #0
 8006392:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006394:	2300      	movs	r3, #0
 8006396:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 8098 	beq.w	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063a6:	2300      	movs	r3, #0
 80063a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063aa:	4b43      	ldr	r3, [pc, #268]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10d      	bne.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063b6:	4b40      	ldr	r3, [pc, #256]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ba:	4a3f      	ldr	r2, [pc, #252]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80063c2:	4b3d      	ldr	r3, [pc, #244]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ca:	60bb      	str	r3, [r7, #8]
 80063cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063ce:	2301      	movs	r3, #1
 80063d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063d2:	4b3a      	ldr	r3, [pc, #232]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a39      	ldr	r2, [pc, #228]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063de:	f7fe fbd9 	bl	8004b94 <HAL_GetTick>
 80063e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063e4:	e009      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063e6:	f7fe fbd5 	bl	8004b94 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d902      	bls.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	74fb      	strb	r3, [r7, #19]
        break;
 80063f8:	e005      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063fa:	4b30      	ldr	r3, [pc, #192]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0ef      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006406:	7cfb      	ldrb	r3, [r7, #19]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d159      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800640c:	4b2a      	ldr	r3, [pc, #168]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006416:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01e      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	429a      	cmp	r2, r3
 8006426:	d019      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006428:	4b23      	ldr	r3, [pc, #140]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800642a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800642e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006432:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006434:	4b20      	ldr	r3, [pc, #128]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643a:	4a1f      	ldr	r2, [pc, #124]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800643c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006444:	4b1c      	ldr	r3, [pc, #112]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800644a:	4a1b      	ldr	r2, [pc, #108]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800644c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006454:	4a18      	ldr	r2, [pc, #96]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d016      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006466:	f7fe fb95 	bl	8004b94 <HAL_GetTick>
 800646a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800646c:	e00b      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800646e:	f7fe fb91 	bl	8004b94 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800647c:	4293      	cmp	r3, r2
 800647e:	d902      	bls.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	74fb      	strb	r3, [r7, #19]
            break;
 8006484:	e006      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006486:	4b0c      	ldr	r3, [pc, #48]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d0ec      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006494:	7cfb      	ldrb	r3, [r7, #19]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800649a:	4b07      	ldr	r3, [pc, #28]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800649c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a8:	4903      	ldr	r1, [pc, #12]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80064b0:	e008      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064b2:	7cfb      	ldrb	r3, [r7, #19]
 80064b4:	74bb      	strb	r3, [r7, #18]
 80064b6:	e005      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80064b8:	40021000 	.word	0x40021000
 80064bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c0:	7cfb      	ldrb	r3, [r7, #19]
 80064c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064c4:	7c7b      	ldrb	r3, [r7, #17]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d105      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ca:	4ba7      	ldr	r3, [pc, #668]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ce:	4aa6      	ldr	r2, [pc, #664]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064e2:	4ba1      	ldr	r3, [pc, #644]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e8:	f023 0203 	bic.w	r2, r3, #3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	499d      	ldr	r1, [pc, #628]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006504:	4b98      	ldr	r3, [pc, #608]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650a:	f023 020c 	bic.w	r2, r3, #12
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	4995      	ldr	r1, [pc, #596]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0304 	and.w	r3, r3, #4
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006526:	4b90      	ldr	r3, [pc, #576]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800652c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	498c      	ldr	r1, [pc, #560]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006548:	4b87      	ldr	r3, [pc, #540]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	4984      	ldr	r1, [pc, #528]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0310 	and.w	r3, r3, #16
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800656a:	4b7f      	ldr	r3, [pc, #508]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006570:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	497b      	ldr	r1, [pc, #492]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0320 	and.w	r3, r3, #32
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800658c:	4b76      	ldr	r3, [pc, #472]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006592:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	4973      	ldr	r1, [pc, #460]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065ae:	4b6e      	ldr	r3, [pc, #440]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	496a      	ldr	r1, [pc, #424]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065d0:	4b65      	ldr	r3, [pc, #404]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	4962      	ldr	r1, [pc, #392]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065f2:	4b5d      	ldr	r3, [pc, #372]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006600:	4959      	ldr	r1, [pc, #356]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006602:	4313      	orrs	r3, r2
 8006604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006614:	4b54      	ldr	r3, [pc, #336]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006616:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800661a:	f023 0203 	bic.w	r2, r3, #3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006622:	4951      	ldr	r1, [pc, #324]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006624:	4313      	orrs	r3, r2
 8006626:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006636:	4b4c      	ldr	r3, [pc, #304]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800663c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006644:	4948      	ldr	r1, [pc, #288]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006646:	4313      	orrs	r3, r2
 8006648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006654:	2b00      	cmp	r3, #0
 8006656:	d015      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006658:	4b43      	ldr	r3, [pc, #268]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800665e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006666:	4940      	ldr	r1, [pc, #256]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006668:	4313      	orrs	r3, r2
 800666a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006676:	d105      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006678:	4b3b      	ldr	r3, [pc, #236]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	4a3a      	ldr	r2, [pc, #232]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006682:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800668c:	2b00      	cmp	r3, #0
 800668e:	d015      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006690:	4b35      	ldr	r3, [pc, #212]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006696:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800669e:	4932      	ldr	r1, [pc, #200]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066ae:	d105      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066b0:	4b2d      	ldr	r3, [pc, #180]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ba:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d015      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066c8:	4b27      	ldr	r3, [pc, #156]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d6:	4924      	ldr	r1, [pc, #144]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066e6:	d105      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066e8:	4b1f      	ldr	r3, [pc, #124]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d015      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006700:	4b19      	ldr	r3, [pc, #100]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006706:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800670e:	4916      	ldr	r1, [pc, #88]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800671a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800671e:	d105      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006720:	4b11      	ldr	r3, [pc, #68]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	4a10      	ldr	r2, [pc, #64]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800672a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d019      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006738:	4b0b      	ldr	r3, [pc, #44]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800673a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800673e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006746:	4908      	ldr	r1, [pc, #32]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006748:	4313      	orrs	r3, r2
 800674a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006756:	d109      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006758:	4b03      	ldr	r3, [pc, #12]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	4a02      	ldr	r2, [pc, #8]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800675e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006762:	60d3      	str	r3, [r2, #12]
 8006764:	e002      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006766:	bf00      	nop
 8006768:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d015      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006778:	4b29      	ldr	r3, [pc, #164]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800677a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800677e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006786:	4926      	ldr	r1, [pc, #152]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006788:	4313      	orrs	r3, r2
 800678a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006792:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006796:	d105      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006798:	4b21      	ldr	r3, [pc, #132]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	4a20      	ldr	r2, [pc, #128]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800679e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d015      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80067b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067be:	4918      	ldr	r1, [pc, #96]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ce:	d105      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80067d0:	4b13      	ldr	r3, [pc, #76]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	4a12      	ldr	r2, [pc, #72]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d015      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f6:	490a      	ldr	r1, [pc, #40]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006802:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006806:	d105      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006808:	4b05      	ldr	r3, [pc, #20]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	4a04      	ldr	r2, [pc, #16]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800680e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006812:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006814:	7cbb      	ldrb	r3, [r7, #18]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	40021000 	.word	0x40021000

08006824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e054      	b.n	80068e0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d111      	bne.n	8006866 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f002 fb3c 	bl	8008ec8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d102      	bne.n	800685e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a23      	ldr	r2, [pc, #140]	@ (80068e8 <HAL_TIM_Base_Init+0xc4>)
 800685c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2202      	movs	r2, #2
 800686a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3304      	adds	r3, #4
 8006876:	4619      	mov	r1, r3
 8006878:	4610      	mov	r0, r2
 800687a:	f001 fc7b 	bl	8008174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	08004601 	.word	0x08004601

080068ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d001      	beq.n	8006904 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e04c      	b.n	800699e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a26      	ldr	r2, [pc, #152]	@ (80069ac <HAL_TIM_Base_Start+0xc0>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d022      	beq.n	800695c <HAL_TIM_Base_Start+0x70>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800691e:	d01d      	beq.n	800695c <HAL_TIM_Base_Start+0x70>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a22      	ldr	r2, [pc, #136]	@ (80069b0 <HAL_TIM_Base_Start+0xc4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d018      	beq.n	800695c <HAL_TIM_Base_Start+0x70>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a21      	ldr	r2, [pc, #132]	@ (80069b4 <HAL_TIM_Base_Start+0xc8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d013      	beq.n	800695c <HAL_TIM_Base_Start+0x70>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1f      	ldr	r2, [pc, #124]	@ (80069b8 <HAL_TIM_Base_Start+0xcc>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00e      	beq.n	800695c <HAL_TIM_Base_Start+0x70>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1e      	ldr	r2, [pc, #120]	@ (80069bc <HAL_TIM_Base_Start+0xd0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d009      	beq.n	800695c <HAL_TIM_Base_Start+0x70>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1c      	ldr	r2, [pc, #112]	@ (80069c0 <HAL_TIM_Base_Start+0xd4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d004      	beq.n	800695c <HAL_TIM_Base_Start+0x70>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1b      	ldr	r2, [pc, #108]	@ (80069c4 <HAL_TIM_Base_Start+0xd8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d115      	bne.n	8006988 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	4b19      	ldr	r3, [pc, #100]	@ (80069c8 <HAL_TIM_Base_Start+0xdc>)
 8006964:	4013      	ands	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b06      	cmp	r3, #6
 800696c:	d015      	beq.n	800699a <HAL_TIM_Base_Start+0xae>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006974:	d011      	beq.n	800699a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f042 0201 	orr.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006986:	e008      	b.n	800699a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	e000      	b.n	800699c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800699a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	40012c00 	.word	0x40012c00
 80069b0:	40000400 	.word	0x40000400
 80069b4:	40000800 	.word	0x40000800
 80069b8:	40000c00 	.word	0x40000c00
 80069bc:	40013400 	.word	0x40013400
 80069c0:	40014000 	.word	0x40014000
 80069c4:	40015000 	.word	0x40015000
 80069c8:	00010007 	.word	0x00010007

080069cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d001      	beq.n	80069e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e054      	b.n	8006a8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a26      	ldr	r2, [pc, #152]	@ (8006a9c <HAL_TIM_Base_Start_IT+0xd0>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d022      	beq.n	8006a4c <HAL_TIM_Base_Start_IT+0x80>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a0e:	d01d      	beq.n	8006a4c <HAL_TIM_Base_Start_IT+0x80>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a22      	ldr	r2, [pc, #136]	@ (8006aa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d018      	beq.n	8006a4c <HAL_TIM_Base_Start_IT+0x80>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a21      	ldr	r2, [pc, #132]	@ (8006aa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <HAL_TIM_Base_Start_IT+0x80>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1f      	ldr	r2, [pc, #124]	@ (8006aa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00e      	beq.n	8006a4c <HAL_TIM_Base_Start_IT+0x80>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1e      	ldr	r2, [pc, #120]	@ (8006aac <HAL_TIM_Base_Start_IT+0xe0>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d009      	beq.n	8006a4c <HAL_TIM_Base_Start_IT+0x80>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ab0 <HAL_TIM_Base_Start_IT+0xe4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d004      	beq.n	8006a4c <HAL_TIM_Base_Start_IT+0x80>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d115      	bne.n	8006a78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689a      	ldr	r2, [r3, #8]
 8006a52:	4b19      	ldr	r3, [pc, #100]	@ (8006ab8 <HAL_TIM_Base_Start_IT+0xec>)
 8006a54:	4013      	ands	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b06      	cmp	r3, #6
 8006a5c:	d015      	beq.n	8006a8a <HAL_TIM_Base_Start_IT+0xbe>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a64:	d011      	beq.n	8006a8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0201 	orr.w	r2, r2, #1
 8006a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a76:	e008      	b.n	8006a8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f042 0201 	orr.w	r2, r2, #1
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	e000      	b.n	8006a8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40012c00 	.word	0x40012c00
 8006aa0:	40000400 	.word	0x40000400
 8006aa4:	40000800 	.word	0x40000800
 8006aa8:	40000c00 	.word	0x40000c00
 8006aac:	40013400 	.word	0x40013400
 8006ab0:	40014000 	.word	0x40014000
 8006ab4:	40015000 	.word	0x40015000
 8006ab8:	00010007 	.word	0x00010007

08006abc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e054      	b.n	8006b78 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d111      	bne.n	8006afe <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f002 f9f0 	bl	8008ec8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a23      	ldr	r2, [pc, #140]	@ (8006b80 <HAL_TIM_PWM_Init+0xc4>)
 8006af4:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2202      	movs	r2, #2
 8006b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4610      	mov	r0, r2
 8006b12:	f001 fb2f 	bl	8008174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	08006b85 	.word	0x08006b85

08006b84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d109      	bne.n	8006bbc <HAL_TIM_PWM_Start+0x24>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	bf14      	ite	ne
 8006bb4:	2301      	movne	r3, #1
 8006bb6:	2300      	moveq	r3, #0
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	e03c      	b.n	8006c36 <HAL_TIM_PWM_Start+0x9e>
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d109      	bne.n	8006bd6 <HAL_TIM_PWM_Start+0x3e>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	bf14      	ite	ne
 8006bce:	2301      	movne	r3, #1
 8006bd0:	2300      	moveq	r3, #0
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	e02f      	b.n	8006c36 <HAL_TIM_PWM_Start+0x9e>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b08      	cmp	r3, #8
 8006bda:	d109      	bne.n	8006bf0 <HAL_TIM_PWM_Start+0x58>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	bf14      	ite	ne
 8006be8:	2301      	movne	r3, #1
 8006bea:	2300      	moveq	r3, #0
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	e022      	b.n	8006c36 <HAL_TIM_PWM_Start+0x9e>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b0c      	cmp	r3, #12
 8006bf4:	d109      	bne.n	8006c0a <HAL_TIM_PWM_Start+0x72>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	bf14      	ite	ne
 8006c02:	2301      	movne	r3, #1
 8006c04:	2300      	moveq	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	e015      	b.n	8006c36 <HAL_TIM_PWM_Start+0x9e>
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b10      	cmp	r3, #16
 8006c0e:	d109      	bne.n	8006c24 <HAL_TIM_PWM_Start+0x8c>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	bf14      	ite	ne
 8006c1c:	2301      	movne	r3, #1
 8006c1e:	2300      	moveq	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	e008      	b.n	8006c36 <HAL_TIM_PWM_Start+0x9e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	bf14      	ite	ne
 8006c30:	2301      	movne	r3, #1
 8006c32:	2300      	moveq	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e0a6      	b.n	8006d8c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d104      	bne.n	8006c4e <HAL_TIM_PWM_Start+0xb6>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c4c:	e023      	b.n	8006c96 <HAL_TIM_PWM_Start+0xfe>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d104      	bne.n	8006c5e <HAL_TIM_PWM_Start+0xc6>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c5c:	e01b      	b.n	8006c96 <HAL_TIM_PWM_Start+0xfe>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d104      	bne.n	8006c6e <HAL_TIM_PWM_Start+0xd6>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c6c:	e013      	b.n	8006c96 <HAL_TIM_PWM_Start+0xfe>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b0c      	cmp	r3, #12
 8006c72:	d104      	bne.n	8006c7e <HAL_TIM_PWM_Start+0xe6>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c7c:	e00b      	b.n	8006c96 <HAL_TIM_PWM_Start+0xfe>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b10      	cmp	r3, #16
 8006c82:	d104      	bne.n	8006c8e <HAL_TIM_PWM_Start+0xf6>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c8c:	e003      	b.n	8006c96 <HAL_TIM_PWM_Start+0xfe>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2202      	movs	r2, #2
 8006c92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f002 f8ec 	bl	8008e7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a3a      	ldr	r2, [pc, #232]	@ (8006d94 <HAL_TIM_PWM_Start+0x1fc>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d018      	beq.n	8006ce0 <HAL_TIM_PWM_Start+0x148>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a39      	ldr	r2, [pc, #228]	@ (8006d98 <HAL_TIM_PWM_Start+0x200>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d013      	beq.n	8006ce0 <HAL_TIM_PWM_Start+0x148>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a37      	ldr	r2, [pc, #220]	@ (8006d9c <HAL_TIM_PWM_Start+0x204>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00e      	beq.n	8006ce0 <HAL_TIM_PWM_Start+0x148>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a36      	ldr	r2, [pc, #216]	@ (8006da0 <HAL_TIM_PWM_Start+0x208>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d009      	beq.n	8006ce0 <HAL_TIM_PWM_Start+0x148>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a34      	ldr	r2, [pc, #208]	@ (8006da4 <HAL_TIM_PWM_Start+0x20c>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d004      	beq.n	8006ce0 <HAL_TIM_PWM_Start+0x148>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a33      	ldr	r2, [pc, #204]	@ (8006da8 <HAL_TIM_PWM_Start+0x210>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d101      	bne.n	8006ce4 <HAL_TIM_PWM_Start+0x14c>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e000      	b.n	8006ce6 <HAL_TIM_PWM_Start+0x14e>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d007      	beq.n	8006cfa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cf8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a25      	ldr	r2, [pc, #148]	@ (8006d94 <HAL_TIM_PWM_Start+0x1fc>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d022      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x1b2>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d0c:	d01d      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x1b2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a26      	ldr	r2, [pc, #152]	@ (8006dac <HAL_TIM_PWM_Start+0x214>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d018      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x1b2>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a24      	ldr	r2, [pc, #144]	@ (8006db0 <HAL_TIM_PWM_Start+0x218>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d013      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x1b2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a23      	ldr	r2, [pc, #140]	@ (8006db4 <HAL_TIM_PWM_Start+0x21c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00e      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x1b2>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a19      	ldr	r2, [pc, #100]	@ (8006d98 <HAL_TIM_PWM_Start+0x200>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d009      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x1b2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a18      	ldr	r2, [pc, #96]	@ (8006d9c <HAL_TIM_PWM_Start+0x204>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d004      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x1b2>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a18      	ldr	r2, [pc, #96]	@ (8006da8 <HAL_TIM_PWM_Start+0x210>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d115      	bne.n	8006d76 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	4b19      	ldr	r3, [pc, #100]	@ (8006db8 <HAL_TIM_PWM_Start+0x220>)
 8006d52:	4013      	ands	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b06      	cmp	r3, #6
 8006d5a:	d015      	beq.n	8006d88 <HAL_TIM_PWM_Start+0x1f0>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d62:	d011      	beq.n	8006d88 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d74:	e008      	b.n	8006d88 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0201 	orr.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	e000      	b.n	8006d8a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40012c00 	.word	0x40012c00
 8006d98:	40013400 	.word	0x40013400
 8006d9c:	40014000 	.word	0x40014000
 8006da0:	40014400 	.word	0x40014400
 8006da4:	40014800 	.word	0x40014800
 8006da8:	40015000 	.word	0x40015000
 8006dac:	40000400 	.word	0x40000400
 8006db0:	40000800 	.word	0x40000800
 8006db4:	40000c00 	.word	0x40000c00
 8006db8:	00010007 	.word	0x00010007

08006dbc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e054      	b.n	8006e78 <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d111      	bne.n	8006dfe <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f002 f870 	bl	8008ec8 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d102      	bne.n	8006df6 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a23      	ldr	r2, [pc, #140]	@ (8006e80 <HAL_TIM_IC_Init+0xc4>)
 8006df4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2202      	movs	r2, #2
 8006e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4610      	mov	r0, r2
 8006e12:	f001 f9af 	bl	8008174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	08004411 	.word	0x08004411

08006e84 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d104      	bne.n	8006e9e <HAL_TIM_IC_Start+0x1a>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	e023      	b.n	8006ee6 <HAL_TIM_IC_Start+0x62>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d104      	bne.n	8006eae <HAL_TIM_IC_Start+0x2a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	e01b      	b.n	8006ee6 <HAL_TIM_IC_Start+0x62>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d104      	bne.n	8006ebe <HAL_TIM_IC_Start+0x3a>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	e013      	b.n	8006ee6 <HAL_TIM_IC_Start+0x62>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b0c      	cmp	r3, #12
 8006ec2:	d104      	bne.n	8006ece <HAL_TIM_IC_Start+0x4a>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	e00b      	b.n	8006ee6 <HAL_TIM_IC_Start+0x62>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b10      	cmp	r3, #16
 8006ed2:	d104      	bne.n	8006ede <HAL_TIM_IC_Start+0x5a>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	e003      	b.n	8006ee6 <HAL_TIM_IC_Start+0x62>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d104      	bne.n	8006ef8 <HAL_TIM_IC_Start+0x74>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	e013      	b.n	8006f20 <HAL_TIM_IC_Start+0x9c>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d104      	bne.n	8006f08 <HAL_TIM_IC_Start+0x84>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	e00b      	b.n	8006f20 <HAL_TIM_IC_Start+0x9c>
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2b08      	cmp	r3, #8
 8006f0c:	d104      	bne.n	8006f18 <HAL_TIM_IC_Start+0x94>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	e003      	b.n	8006f20 <HAL_TIM_IC_Start+0x9c>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d102      	bne.n	8006f2e <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f28:	7bbb      	ldrb	r3, [r7, #14]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d001      	beq.n	8006f32 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e097      	b.n	8007062 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_IC_Start+0xbe>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f40:	e023      	b.n	8006f8a <HAL_TIM_IC_Start+0x106>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d104      	bne.n	8006f52 <HAL_TIM_IC_Start+0xce>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f50:	e01b      	b.n	8006f8a <HAL_TIM_IC_Start+0x106>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d104      	bne.n	8006f62 <HAL_TIM_IC_Start+0xde>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f60:	e013      	b.n	8006f8a <HAL_TIM_IC_Start+0x106>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b0c      	cmp	r3, #12
 8006f66:	d104      	bne.n	8006f72 <HAL_TIM_IC_Start+0xee>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f70:	e00b      	b.n	8006f8a <HAL_TIM_IC_Start+0x106>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b10      	cmp	r3, #16
 8006f76:	d104      	bne.n	8006f82 <HAL_TIM_IC_Start+0xfe>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f80:	e003      	b.n	8006f8a <HAL_TIM_IC_Start+0x106>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2202      	movs	r2, #2
 8006f86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d104      	bne.n	8006f9a <HAL_TIM_IC_Start+0x116>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f98:	e013      	b.n	8006fc2 <HAL_TIM_IC_Start+0x13e>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d104      	bne.n	8006faa <HAL_TIM_IC_Start+0x126>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fa8:	e00b      	b.n	8006fc2 <HAL_TIM_IC_Start+0x13e>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d104      	bne.n	8006fba <HAL_TIM_IC_Start+0x136>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006fb8:	e003      	b.n	8006fc2 <HAL_TIM_IC_Start+0x13e>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 ff56 	bl	8008e7c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a25      	ldr	r2, [pc, #148]	@ (800706c <HAL_TIM_IC_Start+0x1e8>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d022      	beq.n	8007020 <HAL_TIM_IC_Start+0x19c>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe2:	d01d      	beq.n	8007020 <HAL_TIM_IC_Start+0x19c>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a21      	ldr	r2, [pc, #132]	@ (8007070 <HAL_TIM_IC_Start+0x1ec>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d018      	beq.n	8007020 <HAL_TIM_IC_Start+0x19c>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a20      	ldr	r2, [pc, #128]	@ (8007074 <HAL_TIM_IC_Start+0x1f0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d013      	beq.n	8007020 <HAL_TIM_IC_Start+0x19c>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8007078 <HAL_TIM_IC_Start+0x1f4>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00e      	beq.n	8007020 <HAL_TIM_IC_Start+0x19c>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1d      	ldr	r2, [pc, #116]	@ (800707c <HAL_TIM_IC_Start+0x1f8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d009      	beq.n	8007020 <HAL_TIM_IC_Start+0x19c>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1b      	ldr	r2, [pc, #108]	@ (8007080 <HAL_TIM_IC_Start+0x1fc>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d004      	beq.n	8007020 <HAL_TIM_IC_Start+0x19c>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1a      	ldr	r2, [pc, #104]	@ (8007084 <HAL_TIM_IC_Start+0x200>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d115      	bne.n	800704c <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689a      	ldr	r2, [r3, #8]
 8007026:	4b18      	ldr	r3, [pc, #96]	@ (8007088 <HAL_TIM_IC_Start+0x204>)
 8007028:	4013      	ands	r3, r2
 800702a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b06      	cmp	r3, #6
 8007030:	d015      	beq.n	800705e <HAL_TIM_IC_Start+0x1da>
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007038:	d011      	beq.n	800705e <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0201 	orr.w	r2, r2, #1
 8007048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704a:	e008      	b.n	800705e <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	e000      	b.n	8007060 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	40012c00 	.word	0x40012c00
 8007070:	40000400 	.word	0x40000400
 8007074:	40000800 	.word	0x40000800
 8007078:	40000c00 	.word	0x40000c00
 800707c:	40013400 	.word	0x40013400
 8007080:	40014000 	.word	0x40014000
 8007084:	40015000 	.word	0x40015000
 8007088:	00010007 	.word	0x00010007

0800708c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e04c      	b.n	800713a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d111      	bne.n	80070d0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 ff07 	bl	8008ec8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d102      	bne.n	80070c8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a1f      	ldr	r2, [pc, #124]	@ (8007144 <HAL_TIM_OnePulse_Init+0xb8>)
 80070c6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3304      	adds	r3, #4
 80070e0:	4619      	mov	r1, r3
 80070e2:	4610      	mov	r0, r2
 80070e4:	f001 f846 	bl	8008174 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0208 	bic.w	r2, r2, #8
 80070f6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6819      	ldr	r1, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	08007149 	.word	0x08007149

08007148 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800716c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007174:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800717c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007184:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d108      	bne.n	800719e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d105      	bne.n	800719e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007192:	7b7b      	ldrb	r3, [r7, #13]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d102      	bne.n	800719e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007198:	7b3b      	ldrb	r3, [r7, #12]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d001      	beq.n	80071a2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e059      	b.n	8007256 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2202      	movs	r2, #2
 80071a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2202      	movs	r2, #2
 80071ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2202      	movs	r2, #2
 80071b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2202      	movs	r2, #2
 80071be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f042 0202 	orr.w	r2, r2, #2
 80071d0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0204 	orr.w	r2, r2, #4
 80071e0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2201      	movs	r2, #1
 80071e8:	2100      	movs	r1, #0
 80071ea:	4618      	mov	r0, r3
 80071ec:	f001 fe46 	bl	8008e7c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2201      	movs	r2, #1
 80071f6:	2104      	movs	r1, #4
 80071f8:	4618      	mov	r0, r3
 80071fa:	f001 fe3f 	bl	8008e7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a17      	ldr	r2, [pc, #92]	@ (8007260 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d018      	beq.n	800723a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a15      	ldr	r2, [pc, #84]	@ (8007264 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d013      	beq.n	800723a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a14      	ldr	r2, [pc, #80]	@ (8007268 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d00e      	beq.n	800723a <HAL_TIM_OnePulse_Start_IT+0xde>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a12      	ldr	r2, [pc, #72]	@ (800726c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d009      	beq.n	800723a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a11      	ldr	r2, [pc, #68]	@ (8007270 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d004      	beq.n	800723a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a0f      	ldr	r2, [pc, #60]	@ (8007274 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d101      	bne.n	800723e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800723a:	2301      	movs	r3, #1
 800723c:	e000      	b.n	8007240 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800723e:	2300      	movs	r3, #0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d007      	beq.n	8007254 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007252:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	40012c00 	.word	0x40012c00
 8007264:	40013400 	.word	0x40013400
 8007268:	40014000 	.word	0x40014000
 800726c:	40014400 	.word	0x40014400
 8007270:	40014800 	.word	0x40014800
 8007274:	40015000 	.word	0x40015000

08007278 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e0a2      	b.n	80073d2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d111      	bne.n	80072bc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 fe11 	bl	8008ec8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d102      	bne.n	80072b4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a4a      	ldr	r2, [pc, #296]	@ (80073dc <HAL_TIM_Encoder_Init+0x164>)
 80072b2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	6812      	ldr	r2, [r2, #0]
 80072ce:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80072d2:	f023 0307 	bic.w	r3, r3, #7
 80072d6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3304      	adds	r3, #4
 80072e0:	4619      	mov	r1, r3
 80072e2:	4610      	mov	r0, r2
 80072e4:	f000 ff46 	bl	8008174 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007310:	f023 0303 	bic.w	r3, r3, #3
 8007314:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	021b      	lsls	r3, r3, #8
 8007320:	4313      	orrs	r3, r2
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800732e:	f023 030c 	bic.w	r3, r3, #12
 8007332:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800733a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800733e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	021b      	lsls	r3, r3, #8
 800734a:	4313      	orrs	r3, r2
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	4313      	orrs	r3, r2
 8007350:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	011a      	lsls	r2, r3, #4
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	031b      	lsls	r3, r3, #12
 800735e:	4313      	orrs	r3, r2
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	4313      	orrs	r3, r2
 8007364:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800736c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007374:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	011b      	lsls	r3, r3, #4
 8007380:	4313      	orrs	r3, r2
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	4313      	orrs	r3, r2
 8007386:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	08004505 	.word	0x08004505

080073e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007400:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007408:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d110      	bne.n	8007432 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d102      	bne.n	800741c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007416:	7b7b      	ldrb	r3, [r7, #13]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d001      	beq.n	8007420 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e069      	b.n	80074f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2202      	movs	r2, #2
 800742c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007430:	e031      	b.n	8007496 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b04      	cmp	r3, #4
 8007436:	d110      	bne.n	800745a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d102      	bne.n	8007444 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800743e:	7b3b      	ldrb	r3, [r7, #12]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d001      	beq.n	8007448 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e055      	b.n	80074f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007458:	e01d      	b.n	8007496 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d108      	bne.n	8007472 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007460:	7bbb      	ldrb	r3, [r7, #14]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d105      	bne.n	8007472 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007466:	7b7b      	ldrb	r3, [r7, #13]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d102      	bne.n	8007472 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800746c:	7b3b      	ldrb	r3, [r7, #12]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d001      	beq.n	8007476 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e03e      	b.n	80074f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2202      	movs	r2, #2
 800747a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2202      	movs	r2, #2
 8007482:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2202      	movs	r2, #2
 800748a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <HAL_TIM_Encoder_Start+0xc4>
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2b04      	cmp	r3, #4
 80074a0:	d008      	beq.n	80074b4 <HAL_TIM_Encoder_Start+0xd4>
 80074a2:	e00f      	b.n	80074c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2201      	movs	r2, #1
 80074aa:	2100      	movs	r1, #0
 80074ac:	4618      	mov	r0, r3
 80074ae:	f001 fce5 	bl	8008e7c <TIM_CCxChannelCmd>
      break;
 80074b2:	e016      	b.n	80074e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2201      	movs	r2, #1
 80074ba:	2104      	movs	r1, #4
 80074bc:	4618      	mov	r0, r3
 80074be:	f001 fcdd 	bl	8008e7c <TIM_CCxChannelCmd>
      break;
 80074c2:	e00e      	b.n	80074e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2201      	movs	r2, #1
 80074ca:	2100      	movs	r1, #0
 80074cc:	4618      	mov	r0, r3
 80074ce:	f001 fcd5 	bl	8008e7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2201      	movs	r2, #1
 80074d8:	2104      	movs	r1, #4
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 fcce 	bl	8008e7c <TIM_CCxChannelCmd>
      break;
 80074e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f042 0201 	orr.w	r2, r2, #1
 80074f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d026      	beq.n	800756c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d021      	beq.n	800756c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f06f 0202 	mvn.w	r2, #2
 8007530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d005      	beq.n	8007552 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	4798      	blx	r3
 8007550:	e009      	b.n	8007566 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	2b00      	cmp	r3, #0
 8007574:	d026      	beq.n	80075c4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d021      	beq.n	80075c4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f06f 0204 	mvn.w	r2, #4
 8007588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2202      	movs	r2, #2
 800758e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800759a:	2b00      	cmp	r3, #0
 800759c:	d005      	beq.n	80075aa <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	4798      	blx	r3
 80075a8:	e009      	b.n	80075be <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f003 0308 	and.w	r3, r3, #8
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d026      	beq.n	800761c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d021      	beq.n	800761c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f06f 0208 	mvn.w	r2, #8
 80075e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2204      	movs	r2, #4
 80075e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	f003 0303 	and.w	r3, r3, #3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d005      	beq.n	8007602 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	4798      	blx	r3
 8007600:	e009      	b.n	8007616 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f003 0310 	and.w	r3, r3, #16
 8007622:	2b00      	cmp	r3, #0
 8007624:	d026      	beq.n	8007674 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f003 0310 	and.w	r3, r3, #16
 800762c:	2b00      	cmp	r3, #0
 800762e:	d021      	beq.n	8007674 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f06f 0210 	mvn.w	r2, #16
 8007638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2208      	movs	r2, #8
 800763e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3
 8007658:	e009      	b.n	800766e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00e      	beq.n	800769c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b00      	cmp	r3, #0
 8007686:	d009      	beq.n	800769c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f06f 0201 	mvn.w	r2, #1
 8007690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d104      	bne.n	80076b0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00e      	beq.n	80076ce <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d009      	beq.n	80076ce <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80076c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00e      	beq.n	80076f6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80076ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00e      	beq.n	800771e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f003 0320 	and.w	r3, r3, #32
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00e      	beq.n	8007746 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f003 0320 	and.w	r3, r3, #32
 800772e:	2b00      	cmp	r3, #0
 8007730:	d009      	beq.n	8007746 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f06f 0220 	mvn.w	r2, #32
 800773a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00e      	beq.n	800776e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d009      	beq.n	800776e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00e      	beq.n	8007796 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d009      	beq.n	8007796 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800778a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00e      	beq.n	80077be <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80077b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00e      	beq.n	80077e6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d009      	beq.n	80077e6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80077da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077e6:	bf00      	nop
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b086      	sub	sp, #24
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	60f8      	str	r0, [r7, #12]
 80077f6:	60b9      	str	r1, [r7, #8]
 80077f8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007804:	2b01      	cmp	r3, #1
 8007806:	d101      	bne.n	800780c <HAL_TIM_IC_ConfigChannel+0x1e>
 8007808:	2302      	movs	r3, #2
 800780a:	e088      	b.n	800791e <HAL_TIM_IC_ConfigChannel+0x130>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d11b      	bne.n	8007852 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800782a:	f001 f961 	bl	8008af0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	699a      	ldr	r2, [r3, #24]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 020c 	bic.w	r2, r2, #12
 800783c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6999      	ldr	r1, [r3, #24]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	619a      	str	r2, [r3, #24]
 8007850:	e060      	b.n	8007914 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b04      	cmp	r3, #4
 8007856:	d11c      	bne.n	8007892 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007868:	f001 f9e5 	bl	8008c36 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800787a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6999      	ldr	r1, [r3, #24]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	021a      	lsls	r2, r3, #8
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	430a      	orrs	r2, r1
 800788e:	619a      	str	r2, [r3, #24]
 8007890:	e040      	b.n	8007914 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b08      	cmp	r3, #8
 8007896:	d11b      	bne.n	80078d0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80078a8:	f001 fa32 	bl	8008d10 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	69da      	ldr	r2, [r3, #28]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f022 020c 	bic.w	r2, r2, #12
 80078ba:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69d9      	ldr	r1, [r3, #28]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	689a      	ldr	r2, [r3, #8]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	61da      	str	r2, [r3, #28]
 80078ce:	e021      	b.n	8007914 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b0c      	cmp	r3, #12
 80078d4:	d11c      	bne.n	8007910 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80078e6:	f001 fa4f 	bl	8008d88 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	69da      	ldr	r2, [r3, #28]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80078f8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69d9      	ldr	r1, [r3, #28]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	021a      	lsls	r2, r3, #8
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	61da      	str	r2, [r3, #28]
 800790e:	e001      	b.n	8007914 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800791c:	7dfb      	ldrb	r3, [r7, #23]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800793e:	2b01      	cmp	r3, #1
 8007940:	d101      	bne.n	8007946 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007942:	2302      	movs	r3, #2
 8007944:	e0ff      	b.n	8007b46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2b14      	cmp	r3, #20
 8007952:	f200 80f0 	bhi.w	8007b36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007956:	a201      	add	r2, pc, #4	@ (adr r2, 800795c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	080079b1 	.word	0x080079b1
 8007960:	08007b37 	.word	0x08007b37
 8007964:	08007b37 	.word	0x08007b37
 8007968:	08007b37 	.word	0x08007b37
 800796c:	080079f1 	.word	0x080079f1
 8007970:	08007b37 	.word	0x08007b37
 8007974:	08007b37 	.word	0x08007b37
 8007978:	08007b37 	.word	0x08007b37
 800797c:	08007a33 	.word	0x08007a33
 8007980:	08007b37 	.word	0x08007b37
 8007984:	08007b37 	.word	0x08007b37
 8007988:	08007b37 	.word	0x08007b37
 800798c:	08007a73 	.word	0x08007a73
 8007990:	08007b37 	.word	0x08007b37
 8007994:	08007b37 	.word	0x08007b37
 8007998:	08007b37 	.word	0x08007b37
 800799c:	08007ab5 	.word	0x08007ab5
 80079a0:	08007b37 	.word	0x08007b37
 80079a4:	08007b37 	.word	0x08007b37
 80079a8:	08007b37 	.word	0x08007b37
 80079ac:	08007af5 	.word	0x08007af5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68b9      	ldr	r1, [r7, #8]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fc90 	bl	80082dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699a      	ldr	r2, [r3, #24]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0208 	orr.w	r2, r2, #8
 80079ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699a      	ldr	r2, [r3, #24]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0204 	bic.w	r2, r2, #4
 80079da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6999      	ldr	r1, [r3, #24]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	691a      	ldr	r2, [r3, #16]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	619a      	str	r2, [r3, #24]
      break;
 80079ee:	e0a5      	b.n	8007b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68b9      	ldr	r1, [r7, #8]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 fd0a 	bl	8008410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699a      	ldr	r2, [r3, #24]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	699a      	ldr	r2, [r3, #24]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6999      	ldr	r1, [r3, #24]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	021a      	lsls	r2, r3, #8
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	619a      	str	r2, [r3, #24]
      break;
 8007a30:	e084      	b.n	8007b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68b9      	ldr	r1, [r7, #8]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 fd7d 	bl	8008538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69da      	ldr	r2, [r3, #28]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f042 0208 	orr.w	r2, r2, #8
 8007a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69da      	ldr	r2, [r3, #28]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0204 	bic.w	r2, r2, #4
 8007a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69d9      	ldr	r1, [r3, #28]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	691a      	ldr	r2, [r3, #16]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	61da      	str	r2, [r3, #28]
      break;
 8007a70:	e064      	b.n	8007b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68b9      	ldr	r1, [r7, #8]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 fdef 	bl	800865c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69da      	ldr	r2, [r3, #28]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69da      	ldr	r2, [r3, #28]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	69d9      	ldr	r1, [r3, #28]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	021a      	lsls	r2, r3, #8
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	61da      	str	r2, [r3, #28]
      break;
 8007ab2:	e043      	b.n	8007b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68b9      	ldr	r1, [r7, #8]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fe62 	bl	8008784 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f042 0208 	orr.w	r2, r2, #8
 8007ace:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 0204 	bic.w	r2, r2, #4
 8007ade:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	691a      	ldr	r2, [r3, #16]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007af2:	e023      	b.n	8007b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68b9      	ldr	r1, [r7, #8]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 feac 	bl	8008858 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b1e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	021a      	lsls	r2, r3, #8
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007b34:	e002      	b.n	8007b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	75fb      	strb	r3, [r7, #23]
      break;
 8007b3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop

08007b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d101      	bne.n	8007b6c <HAL_TIM_ConfigClockSource+0x1c>
 8007b68:	2302      	movs	r3, #2
 8007b6a:	e0f6      	b.n	8007d5a <HAL_TIM_ConfigClockSource+0x20a>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007b8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a6f      	ldr	r2, [pc, #444]	@ (8007d64 <HAL_TIM_ConfigClockSource+0x214>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	f000 80c1 	beq.w	8007d2e <HAL_TIM_ConfigClockSource+0x1de>
 8007bac:	4a6d      	ldr	r2, [pc, #436]	@ (8007d64 <HAL_TIM_ConfigClockSource+0x214>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	f200 80c6 	bhi.w	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bb4:	4a6c      	ldr	r2, [pc, #432]	@ (8007d68 <HAL_TIM_ConfigClockSource+0x218>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	f000 80b9 	beq.w	8007d2e <HAL_TIM_ConfigClockSource+0x1de>
 8007bbc:	4a6a      	ldr	r2, [pc, #424]	@ (8007d68 <HAL_TIM_ConfigClockSource+0x218>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	f200 80be 	bhi.w	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bc4:	4a69      	ldr	r2, [pc, #420]	@ (8007d6c <HAL_TIM_ConfigClockSource+0x21c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	f000 80b1 	beq.w	8007d2e <HAL_TIM_ConfigClockSource+0x1de>
 8007bcc:	4a67      	ldr	r2, [pc, #412]	@ (8007d6c <HAL_TIM_ConfigClockSource+0x21c>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	f200 80b6 	bhi.w	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bd4:	4a66      	ldr	r2, [pc, #408]	@ (8007d70 <HAL_TIM_ConfigClockSource+0x220>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	f000 80a9 	beq.w	8007d2e <HAL_TIM_ConfigClockSource+0x1de>
 8007bdc:	4a64      	ldr	r2, [pc, #400]	@ (8007d70 <HAL_TIM_ConfigClockSource+0x220>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	f200 80ae 	bhi.w	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007be4:	4a63      	ldr	r2, [pc, #396]	@ (8007d74 <HAL_TIM_ConfigClockSource+0x224>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	f000 80a1 	beq.w	8007d2e <HAL_TIM_ConfigClockSource+0x1de>
 8007bec:	4a61      	ldr	r2, [pc, #388]	@ (8007d74 <HAL_TIM_ConfigClockSource+0x224>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	f200 80a6 	bhi.w	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bf4:	4a60      	ldr	r2, [pc, #384]	@ (8007d78 <HAL_TIM_ConfigClockSource+0x228>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	f000 8099 	beq.w	8007d2e <HAL_TIM_ConfigClockSource+0x1de>
 8007bfc:	4a5e      	ldr	r2, [pc, #376]	@ (8007d78 <HAL_TIM_ConfigClockSource+0x228>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	f200 809e 	bhi.w	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007c08:	f000 8091 	beq.w	8007d2e <HAL_TIM_ConfigClockSource+0x1de>
 8007c0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007c10:	f200 8096 	bhi.w	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c18:	f000 8089 	beq.w	8007d2e <HAL_TIM_ConfigClockSource+0x1de>
 8007c1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c20:	f200 808e 	bhi.w	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c28:	d03e      	beq.n	8007ca8 <HAL_TIM_ConfigClockSource+0x158>
 8007c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c2e:	f200 8087 	bhi.w	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c36:	f000 8086 	beq.w	8007d46 <HAL_TIM_ConfigClockSource+0x1f6>
 8007c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c3e:	d87f      	bhi.n	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c40:	2b70      	cmp	r3, #112	@ 0x70
 8007c42:	d01a      	beq.n	8007c7a <HAL_TIM_ConfigClockSource+0x12a>
 8007c44:	2b70      	cmp	r3, #112	@ 0x70
 8007c46:	d87b      	bhi.n	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c48:	2b60      	cmp	r3, #96	@ 0x60
 8007c4a:	d050      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x19e>
 8007c4c:	2b60      	cmp	r3, #96	@ 0x60
 8007c4e:	d877      	bhi.n	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c50:	2b50      	cmp	r3, #80	@ 0x50
 8007c52:	d03c      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0x17e>
 8007c54:	2b50      	cmp	r3, #80	@ 0x50
 8007c56:	d873      	bhi.n	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c58:	2b40      	cmp	r3, #64	@ 0x40
 8007c5a:	d058      	beq.n	8007d0e <HAL_TIM_ConfigClockSource+0x1be>
 8007c5c:	2b40      	cmp	r3, #64	@ 0x40
 8007c5e:	d86f      	bhi.n	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c60:	2b30      	cmp	r3, #48	@ 0x30
 8007c62:	d064      	beq.n	8007d2e <HAL_TIM_ConfigClockSource+0x1de>
 8007c64:	2b30      	cmp	r3, #48	@ 0x30
 8007c66:	d86b      	bhi.n	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	d060      	beq.n	8007d2e <HAL_TIM_ConfigClockSource+0x1de>
 8007c6c:	2b20      	cmp	r3, #32
 8007c6e:	d867      	bhi.n	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d05c      	beq.n	8007d2e <HAL_TIM_ConfigClockSource+0x1de>
 8007c74:	2b10      	cmp	r3, #16
 8007c76:	d05a      	beq.n	8007d2e <HAL_TIM_ConfigClockSource+0x1de>
 8007c78:	e062      	b.n	8007d40 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c8a:	f001 f8d7 	bl	8008e3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	609a      	str	r2, [r3, #8]
      break;
 8007ca6:	e04f      	b.n	8007d48 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007cb8:	f001 f8c0 	bl	8008e3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cca:	609a      	str	r2, [r3, #8]
      break;
 8007ccc:	e03c      	b.n	8007d48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f000 ff7c 	bl	8008bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2150      	movs	r1, #80	@ 0x50
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f001 f88b 	bl	8008e02 <TIM_ITRx_SetConfig>
      break;
 8007cec:	e02c      	b.n	8007d48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	f000 ffd8 	bl	8008cb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2160      	movs	r1, #96	@ 0x60
 8007d06:	4618      	mov	r0, r3
 8007d08:	f001 f87b 	bl	8008e02 <TIM_ITRx_SetConfig>
      break;
 8007d0c:	e01c      	b.n	8007d48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f000 ff5c 	bl	8008bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2140      	movs	r1, #64	@ 0x40
 8007d26:	4618      	mov	r0, r3
 8007d28:	f001 f86b 	bl	8008e02 <TIM_ITRx_SetConfig>
      break;
 8007d2c:	e00c      	b.n	8007d48 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4619      	mov	r1, r3
 8007d38:	4610      	mov	r0, r2
 8007d3a:	f001 f862 	bl	8008e02 <TIM_ITRx_SetConfig>
      break;
 8007d3e:	e003      	b.n	8007d48 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	73fb      	strb	r3, [r7, #15]
      break;
 8007d44:	e000      	b.n	8007d48 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	00100070 	.word	0x00100070
 8007d68:	00100060 	.word	0x00100060
 8007d6c:	00100050 	.word	0x00100050
 8007d70:	00100040 	.word	0x00100040
 8007d74:	00100030 	.word	0x00100030
 8007d78:	00100020 	.word	0x00100020

08007d7c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d101      	bne.n	8007d94 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007d90:	2302      	movs	r3, #2
 8007d92:	e031      	b.n	8007df8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fdc2 	bl	8008930 <TIM_SlaveTimer_SetConfig>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d009      	beq.n	8007dc6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e018      	b.n	8007df8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007dd4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007de4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e14a      	b.n	8008166 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	f040 80dd 	bne.w	8008098 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007ede:	7afb      	ldrb	r3, [r7, #11]
 8007ee0:	2b1f      	cmp	r3, #31
 8007ee2:	f200 80d6 	bhi.w	8008092 <HAL_TIM_RegisterCallback+0x1de>
 8007ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8007eec <HAL_TIM_RegisterCallback+0x38>)
 8007ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eec:	08007f6d 	.word	0x08007f6d
 8007ef0:	08007f75 	.word	0x08007f75
 8007ef4:	08007f7d 	.word	0x08007f7d
 8007ef8:	08007f85 	.word	0x08007f85
 8007efc:	08007f8d 	.word	0x08007f8d
 8007f00:	08007f95 	.word	0x08007f95
 8007f04:	08007f9d 	.word	0x08007f9d
 8007f08:	08007fa5 	.word	0x08007fa5
 8007f0c:	08007fad 	.word	0x08007fad
 8007f10:	08007fb5 	.word	0x08007fb5
 8007f14:	08007fbd 	.word	0x08007fbd
 8007f18:	08007fc5 	.word	0x08007fc5
 8007f1c:	08007fcd 	.word	0x08007fcd
 8007f20:	08007fd5 	.word	0x08007fd5
 8007f24:	08007fdf 	.word	0x08007fdf
 8007f28:	08007fe9 	.word	0x08007fe9
 8007f2c:	08007ff3 	.word	0x08007ff3
 8007f30:	08007ffd 	.word	0x08007ffd
 8007f34:	08008007 	.word	0x08008007
 8007f38:	08008011 	.word	0x08008011
 8007f3c:	0800801b 	.word	0x0800801b
 8007f40:	08008025 	.word	0x08008025
 8007f44:	0800802f 	.word	0x0800802f
 8007f48:	08008039 	.word	0x08008039
 8007f4c:	08008043 	.word	0x08008043
 8007f50:	0800804d 	.word	0x0800804d
 8007f54:	08008057 	.word	0x08008057
 8007f58:	08008061 	.word	0x08008061
 8007f5c:	0800806b 	.word	0x0800806b
 8007f60:	08008075 	.word	0x08008075
 8007f64:	0800807f 	.word	0x0800807f
 8007f68:	08008089 	.word	0x08008089
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007f72:	e0f7      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007f7a:	e0f3      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007f82:	e0ef      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007f8a:	e0eb      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007f92:	e0e7      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007f9a:	e0e3      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007fa2:	e0df      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007faa:	e0db      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007fb2:	e0d7      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007fba:	e0d3      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007fc2:	e0cf      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007fca:	e0cb      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007fd2:	e0c7      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007fdc:	e0c2      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007fe6:	e0bd      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007ff0:	e0b8      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007ffa:	e0b3      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008004:	e0ae      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800800e:	e0a9      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008018:	e0a4      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008022:	e09f      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800802c:	e09a      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008036:	e095      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008040:	e090      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800804a:	e08b      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008054:	e086      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800805e:	e081      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008068:	e07c      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008072:	e077      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800807c:	e072      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008086:	e06d      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008090:	e068      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	75fb      	strb	r3, [r7, #23]
        break;
 8008096:	e065      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d15d      	bne.n	8008160 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80080a4:	7afb      	ldrb	r3, [r7, #11]
 80080a6:	2b0d      	cmp	r3, #13
 80080a8:	d857      	bhi.n	800815a <HAL_TIM_RegisterCallback+0x2a6>
 80080aa:	a201      	add	r2, pc, #4	@ (adr r2, 80080b0 <HAL_TIM_RegisterCallback+0x1fc>)
 80080ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b0:	080080e9 	.word	0x080080e9
 80080b4:	080080f1 	.word	0x080080f1
 80080b8:	080080f9 	.word	0x080080f9
 80080bc:	08008101 	.word	0x08008101
 80080c0:	08008109 	.word	0x08008109
 80080c4:	08008111 	.word	0x08008111
 80080c8:	08008119 	.word	0x08008119
 80080cc:	08008121 	.word	0x08008121
 80080d0:	08008129 	.word	0x08008129
 80080d4:	08008131 	.word	0x08008131
 80080d8:	08008139 	.word	0x08008139
 80080dc:	08008141 	.word	0x08008141
 80080e0:	08008149 	.word	0x08008149
 80080e4:	08008151 	.word	0x08008151
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80080ee:	e039      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80080f6:	e035      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80080fe:	e031      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008106:	e02d      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800810e:	e029      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008116:	e025      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800811e:	e021      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008126:	e01d      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800812e:	e019      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008136:	e015      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800813e:	e011      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008146:	e00d      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800814e:	e009      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008158:	e004      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	75fb      	strb	r3, [r7, #23]
        break;
 800815e:	e001      	b.n	8008164 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008164:	7dfb      	ldrb	r3, [r7, #23]
}
 8008166:	4618      	mov	r0, r3
 8008168:	371c      	adds	r7, #28
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop

08008174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a4c      	ldr	r2, [pc, #304]	@ (80082b8 <TIM_Base_SetConfig+0x144>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d017      	beq.n	80081bc <TIM_Base_SetConfig+0x48>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008192:	d013      	beq.n	80081bc <TIM_Base_SetConfig+0x48>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a49      	ldr	r2, [pc, #292]	@ (80082bc <TIM_Base_SetConfig+0x148>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d00f      	beq.n	80081bc <TIM_Base_SetConfig+0x48>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a48      	ldr	r2, [pc, #288]	@ (80082c0 <TIM_Base_SetConfig+0x14c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00b      	beq.n	80081bc <TIM_Base_SetConfig+0x48>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a47      	ldr	r2, [pc, #284]	@ (80082c4 <TIM_Base_SetConfig+0x150>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d007      	beq.n	80081bc <TIM_Base_SetConfig+0x48>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a46      	ldr	r2, [pc, #280]	@ (80082c8 <TIM_Base_SetConfig+0x154>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d003      	beq.n	80081bc <TIM_Base_SetConfig+0x48>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a45      	ldr	r2, [pc, #276]	@ (80082cc <TIM_Base_SetConfig+0x158>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d108      	bne.n	80081ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a39      	ldr	r2, [pc, #228]	@ (80082b8 <TIM_Base_SetConfig+0x144>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d023      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081dc:	d01f      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a36      	ldr	r2, [pc, #216]	@ (80082bc <TIM_Base_SetConfig+0x148>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d01b      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a35      	ldr	r2, [pc, #212]	@ (80082c0 <TIM_Base_SetConfig+0x14c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d017      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a34      	ldr	r2, [pc, #208]	@ (80082c4 <TIM_Base_SetConfig+0x150>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d013      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a33      	ldr	r2, [pc, #204]	@ (80082c8 <TIM_Base_SetConfig+0x154>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00f      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a33      	ldr	r2, [pc, #204]	@ (80082d0 <TIM_Base_SetConfig+0x15c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00b      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a32      	ldr	r2, [pc, #200]	@ (80082d4 <TIM_Base_SetConfig+0x160>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d007      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a31      	ldr	r2, [pc, #196]	@ (80082d8 <TIM_Base_SetConfig+0x164>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d003      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a2c      	ldr	r2, [pc, #176]	@ (80082cc <TIM_Base_SetConfig+0x158>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d108      	bne.n	8008230 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a18      	ldr	r2, [pc, #96]	@ (80082b8 <TIM_Base_SetConfig+0x144>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d013      	beq.n	8008284 <TIM_Base_SetConfig+0x110>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a1a      	ldr	r2, [pc, #104]	@ (80082c8 <TIM_Base_SetConfig+0x154>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d00f      	beq.n	8008284 <TIM_Base_SetConfig+0x110>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a1a      	ldr	r2, [pc, #104]	@ (80082d0 <TIM_Base_SetConfig+0x15c>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d00b      	beq.n	8008284 <TIM_Base_SetConfig+0x110>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a19      	ldr	r2, [pc, #100]	@ (80082d4 <TIM_Base_SetConfig+0x160>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d007      	beq.n	8008284 <TIM_Base_SetConfig+0x110>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a18      	ldr	r2, [pc, #96]	@ (80082d8 <TIM_Base_SetConfig+0x164>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d003      	beq.n	8008284 <TIM_Base_SetConfig+0x110>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a13      	ldr	r2, [pc, #76]	@ (80082cc <TIM_Base_SetConfig+0x158>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d103      	bne.n	800828c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	691a      	ldr	r2, [r3, #16]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b01      	cmp	r3, #1
 800829c:	d105      	bne.n	80082aa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	f023 0201 	bic.w	r2, r3, #1
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	611a      	str	r2, [r3, #16]
  }
}
 80082aa:	bf00      	nop
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	40012c00 	.word	0x40012c00
 80082bc:	40000400 	.word	0x40000400
 80082c0:	40000800 	.word	0x40000800
 80082c4:	40000c00 	.word	0x40000c00
 80082c8:	40013400 	.word	0x40013400
 80082cc:	40015000 	.word	0x40015000
 80082d0:	40014000 	.word	0x40014000
 80082d4:	40014400 	.word	0x40014400
 80082d8:	40014800 	.word	0x40014800

080082dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a1b      	ldr	r3, [r3, #32]
 80082f0:	f023 0201 	bic.w	r2, r3, #1
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800830a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800830e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 0303 	bic.w	r3, r3, #3
 8008316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4313      	orrs	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f023 0302 	bic.w	r3, r3, #2
 8008328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	4313      	orrs	r3, r2
 8008332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a30      	ldr	r2, [pc, #192]	@ (80083f8 <TIM_OC1_SetConfig+0x11c>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d013      	beq.n	8008364 <TIM_OC1_SetConfig+0x88>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a2f      	ldr	r2, [pc, #188]	@ (80083fc <TIM_OC1_SetConfig+0x120>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d00f      	beq.n	8008364 <TIM_OC1_SetConfig+0x88>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a2e      	ldr	r2, [pc, #184]	@ (8008400 <TIM_OC1_SetConfig+0x124>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d00b      	beq.n	8008364 <TIM_OC1_SetConfig+0x88>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a2d      	ldr	r2, [pc, #180]	@ (8008404 <TIM_OC1_SetConfig+0x128>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d007      	beq.n	8008364 <TIM_OC1_SetConfig+0x88>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a2c      	ldr	r2, [pc, #176]	@ (8008408 <TIM_OC1_SetConfig+0x12c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d003      	beq.n	8008364 <TIM_OC1_SetConfig+0x88>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a2b      	ldr	r2, [pc, #172]	@ (800840c <TIM_OC1_SetConfig+0x130>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d10c      	bne.n	800837e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f023 0308 	bic.w	r3, r3, #8
 800836a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	4313      	orrs	r3, r2
 8008374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f023 0304 	bic.w	r3, r3, #4
 800837c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a1d      	ldr	r2, [pc, #116]	@ (80083f8 <TIM_OC1_SetConfig+0x11c>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d013      	beq.n	80083ae <TIM_OC1_SetConfig+0xd2>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a1c      	ldr	r2, [pc, #112]	@ (80083fc <TIM_OC1_SetConfig+0x120>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d00f      	beq.n	80083ae <TIM_OC1_SetConfig+0xd2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a1b      	ldr	r2, [pc, #108]	@ (8008400 <TIM_OC1_SetConfig+0x124>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d00b      	beq.n	80083ae <TIM_OC1_SetConfig+0xd2>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a1a      	ldr	r2, [pc, #104]	@ (8008404 <TIM_OC1_SetConfig+0x128>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d007      	beq.n	80083ae <TIM_OC1_SetConfig+0xd2>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a19      	ldr	r2, [pc, #100]	@ (8008408 <TIM_OC1_SetConfig+0x12c>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d003      	beq.n	80083ae <TIM_OC1_SetConfig+0xd2>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a18      	ldr	r2, [pc, #96]	@ (800840c <TIM_OC1_SetConfig+0x130>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d111      	bne.n	80083d2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	697a      	ldr	r2, [r7, #20]
 80083ea:	621a      	str	r2, [r3, #32]
}
 80083ec:	bf00      	nop
 80083ee:	371c      	adds	r7, #28
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	40012c00 	.word	0x40012c00
 80083fc:	40013400 	.word	0x40013400
 8008400:	40014000 	.word	0x40014000
 8008404:	40014400 	.word	0x40014400
 8008408:	40014800 	.word	0x40014800
 800840c:	40015000 	.word	0x40015000

08008410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008410:	b480      	push	{r7}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	f023 0210 	bic.w	r2, r3, #16
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800843e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800844a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	021b      	lsls	r3, r3, #8
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	4313      	orrs	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f023 0320 	bic.w	r3, r3, #32
 800845e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	011b      	lsls	r3, r3, #4
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	4313      	orrs	r3, r2
 800846a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a2c      	ldr	r2, [pc, #176]	@ (8008520 <TIM_OC2_SetConfig+0x110>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d007      	beq.n	8008484 <TIM_OC2_SetConfig+0x74>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a2b      	ldr	r2, [pc, #172]	@ (8008524 <TIM_OC2_SetConfig+0x114>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d003      	beq.n	8008484 <TIM_OC2_SetConfig+0x74>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a2a      	ldr	r2, [pc, #168]	@ (8008528 <TIM_OC2_SetConfig+0x118>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d10d      	bne.n	80084a0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800848a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	4313      	orrs	r3, r2
 8008496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800849e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008520 <TIM_OC2_SetConfig+0x110>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d013      	beq.n	80084d0 <TIM_OC2_SetConfig+0xc0>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008524 <TIM_OC2_SetConfig+0x114>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d00f      	beq.n	80084d0 <TIM_OC2_SetConfig+0xc0>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a1e      	ldr	r2, [pc, #120]	@ (800852c <TIM_OC2_SetConfig+0x11c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d00b      	beq.n	80084d0 <TIM_OC2_SetConfig+0xc0>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a1d      	ldr	r2, [pc, #116]	@ (8008530 <TIM_OC2_SetConfig+0x120>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d007      	beq.n	80084d0 <TIM_OC2_SetConfig+0xc0>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a1c      	ldr	r2, [pc, #112]	@ (8008534 <TIM_OC2_SetConfig+0x124>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d003      	beq.n	80084d0 <TIM_OC2_SetConfig+0xc0>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a17      	ldr	r2, [pc, #92]	@ (8008528 <TIM_OC2_SetConfig+0x118>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d113      	bne.n	80084f8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	621a      	str	r2, [r3, #32]
}
 8008512:	bf00      	nop
 8008514:	371c      	adds	r7, #28
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	40012c00 	.word	0x40012c00
 8008524:	40013400 	.word	0x40013400
 8008528:	40015000 	.word	0x40015000
 800852c:	40014000 	.word	0x40014000
 8008530:	40014400 	.word	0x40014400
 8008534:	40014800 	.word	0x40014800

08008538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800856a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f023 0303 	bic.w	r3, r3, #3
 8008572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4313      	orrs	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	021b      	lsls	r3, r3, #8
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	4313      	orrs	r3, r2
 8008590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a2b      	ldr	r2, [pc, #172]	@ (8008644 <TIM_OC3_SetConfig+0x10c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d007      	beq.n	80085aa <TIM_OC3_SetConfig+0x72>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a2a      	ldr	r2, [pc, #168]	@ (8008648 <TIM_OC3_SetConfig+0x110>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d003      	beq.n	80085aa <TIM_OC3_SetConfig+0x72>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a29      	ldr	r2, [pc, #164]	@ (800864c <TIM_OC3_SetConfig+0x114>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d10d      	bne.n	80085c6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80085b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	021b      	lsls	r3, r3, #8
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a1e      	ldr	r2, [pc, #120]	@ (8008644 <TIM_OC3_SetConfig+0x10c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d013      	beq.n	80085f6 <TIM_OC3_SetConfig+0xbe>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008648 <TIM_OC3_SetConfig+0x110>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d00f      	beq.n	80085f6 <TIM_OC3_SetConfig+0xbe>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008650 <TIM_OC3_SetConfig+0x118>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d00b      	beq.n	80085f6 <TIM_OC3_SetConfig+0xbe>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008654 <TIM_OC3_SetConfig+0x11c>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d007      	beq.n	80085f6 <TIM_OC3_SetConfig+0xbe>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008658 <TIM_OC3_SetConfig+0x120>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d003      	beq.n	80085f6 <TIM_OC3_SetConfig+0xbe>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a16      	ldr	r2, [pc, #88]	@ (800864c <TIM_OC3_SetConfig+0x114>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d113      	bne.n	800861e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	011b      	lsls	r3, r3, #4
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	4313      	orrs	r3, r2
 8008610:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	011b      	lsls	r3, r3, #4
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	4313      	orrs	r3, r2
 800861c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	621a      	str	r2, [r3, #32]
}
 8008638:	bf00      	nop
 800863a:	371c      	adds	r7, #28
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	40012c00 	.word	0x40012c00
 8008648:	40013400 	.word	0x40013400
 800864c:	40015000 	.word	0x40015000
 8008650:	40014000 	.word	0x40014000
 8008654:	40014400 	.word	0x40014400
 8008658:	40014800 	.word	0x40014800

0800865c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800868a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800868e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	021b      	lsls	r3, r3, #8
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80086aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	031b      	lsls	r3, r3, #12
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a2c      	ldr	r2, [pc, #176]	@ (800876c <TIM_OC4_SetConfig+0x110>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d007      	beq.n	80086d0 <TIM_OC4_SetConfig+0x74>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a2b      	ldr	r2, [pc, #172]	@ (8008770 <TIM_OC4_SetConfig+0x114>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d003      	beq.n	80086d0 <TIM_OC4_SetConfig+0x74>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008774 <TIM_OC4_SetConfig+0x118>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d10d      	bne.n	80086ec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	031b      	lsls	r3, r3, #12
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a1f      	ldr	r2, [pc, #124]	@ (800876c <TIM_OC4_SetConfig+0x110>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d013      	beq.n	800871c <TIM_OC4_SetConfig+0xc0>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008770 <TIM_OC4_SetConfig+0x114>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00f      	beq.n	800871c <TIM_OC4_SetConfig+0xc0>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008778 <TIM_OC4_SetConfig+0x11c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d00b      	beq.n	800871c <TIM_OC4_SetConfig+0xc0>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a1d      	ldr	r2, [pc, #116]	@ (800877c <TIM_OC4_SetConfig+0x120>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d007      	beq.n	800871c <TIM_OC4_SetConfig+0xc0>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a1c      	ldr	r2, [pc, #112]	@ (8008780 <TIM_OC4_SetConfig+0x124>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d003      	beq.n	800871c <TIM_OC4_SetConfig+0xc0>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a17      	ldr	r2, [pc, #92]	@ (8008774 <TIM_OC4_SetConfig+0x118>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d113      	bne.n	8008744 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008722:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800872a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	019b      	lsls	r3, r3, #6
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	4313      	orrs	r3, r2
 8008736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	019b      	lsls	r3, r3, #6
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	4313      	orrs	r3, r2
 8008742:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	621a      	str	r2, [r3, #32]
}
 800875e:	bf00      	nop
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	40012c00 	.word	0x40012c00
 8008770:	40013400 	.word	0x40013400
 8008774:	40015000 	.word	0x40015000
 8008778:	40014000 	.word	0x40014000
 800877c:	40014400 	.word	0x40014400
 8008780:	40014800 	.word	0x40014800

08008784 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a1b      	ldr	r3, [r3, #32]
 8008798:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	4313      	orrs	r3, r2
 80087c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80087c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	041b      	lsls	r3, r3, #16
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a19      	ldr	r2, [pc, #100]	@ (8008840 <TIM_OC5_SetConfig+0xbc>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d013      	beq.n	8008806 <TIM_OC5_SetConfig+0x82>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a18      	ldr	r2, [pc, #96]	@ (8008844 <TIM_OC5_SetConfig+0xc0>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d00f      	beq.n	8008806 <TIM_OC5_SetConfig+0x82>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a17      	ldr	r2, [pc, #92]	@ (8008848 <TIM_OC5_SetConfig+0xc4>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d00b      	beq.n	8008806 <TIM_OC5_SetConfig+0x82>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a16      	ldr	r2, [pc, #88]	@ (800884c <TIM_OC5_SetConfig+0xc8>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d007      	beq.n	8008806 <TIM_OC5_SetConfig+0x82>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a15      	ldr	r2, [pc, #84]	@ (8008850 <TIM_OC5_SetConfig+0xcc>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d003      	beq.n	8008806 <TIM_OC5_SetConfig+0x82>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a14      	ldr	r2, [pc, #80]	@ (8008854 <TIM_OC5_SetConfig+0xd0>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d109      	bne.n	800881a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800880c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	021b      	lsls	r3, r3, #8
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	4313      	orrs	r3, r2
 8008818:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	621a      	str	r2, [r3, #32]
}
 8008834:	bf00      	nop
 8008836:	371c      	adds	r7, #28
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	40012c00 	.word	0x40012c00
 8008844:	40013400 	.word	0x40013400
 8008848:	40014000 	.word	0x40014000
 800884c:	40014400 	.word	0x40014400
 8008850:	40014800 	.word	0x40014800
 8008854:	40015000 	.word	0x40015000

08008858 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008858:	b480      	push	{r7}
 800885a:	b087      	sub	sp, #28
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800887e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800888a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	021b      	lsls	r3, r3, #8
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	4313      	orrs	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800889e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	051b      	lsls	r3, r3, #20
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008918 <TIM_OC6_SetConfig+0xc0>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d013      	beq.n	80088dc <TIM_OC6_SetConfig+0x84>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a19      	ldr	r2, [pc, #100]	@ (800891c <TIM_OC6_SetConfig+0xc4>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d00f      	beq.n	80088dc <TIM_OC6_SetConfig+0x84>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a18      	ldr	r2, [pc, #96]	@ (8008920 <TIM_OC6_SetConfig+0xc8>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00b      	beq.n	80088dc <TIM_OC6_SetConfig+0x84>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a17      	ldr	r2, [pc, #92]	@ (8008924 <TIM_OC6_SetConfig+0xcc>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d007      	beq.n	80088dc <TIM_OC6_SetConfig+0x84>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a16      	ldr	r2, [pc, #88]	@ (8008928 <TIM_OC6_SetConfig+0xd0>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d003      	beq.n	80088dc <TIM_OC6_SetConfig+0x84>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a15      	ldr	r2, [pc, #84]	@ (800892c <TIM_OC6_SetConfig+0xd4>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d109      	bne.n	80088f0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80088e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	029b      	lsls	r3, r3, #10
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	621a      	str	r2, [r3, #32]
}
 800890a:	bf00      	nop
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	40012c00 	.word	0x40012c00
 800891c:	40013400 	.word	0x40013400
 8008920:	40014000 	.word	0x40014000
 8008924:	40014400 	.word	0x40014400
 8008928:	40014800 	.word	0x40014800
 800892c:	40015000 	.word	0x40015000

08008930 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800893a:	2300      	movs	r3, #0
 800893c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800894c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008950:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	4313      	orrs	r3, r2
 800895a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008962:	f023 0307 	bic.w	r3, r3, #7
 8008966:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	4313      	orrs	r3, r2
 8008970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	4a56      	ldr	r2, [pc, #344]	@ (8008ad8 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8008980:	4293      	cmp	r3, r2
 8008982:	f000 80a2 	beq.w	8008aca <TIM_SlaveTimer_SetConfig+0x19a>
 8008986:	4a54      	ldr	r2, [pc, #336]	@ (8008ad8 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8008988:	4293      	cmp	r3, r2
 800898a:	f200 809b 	bhi.w	8008ac4 <TIM_SlaveTimer_SetConfig+0x194>
 800898e:	4a53      	ldr	r2, [pc, #332]	@ (8008adc <TIM_SlaveTimer_SetConfig+0x1ac>)
 8008990:	4293      	cmp	r3, r2
 8008992:	f000 809a 	beq.w	8008aca <TIM_SlaveTimer_SetConfig+0x19a>
 8008996:	4a51      	ldr	r2, [pc, #324]	@ (8008adc <TIM_SlaveTimer_SetConfig+0x1ac>)
 8008998:	4293      	cmp	r3, r2
 800899a:	f200 8093 	bhi.w	8008ac4 <TIM_SlaveTimer_SetConfig+0x194>
 800899e:	4a50      	ldr	r2, [pc, #320]	@ (8008ae0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	f000 8092 	beq.w	8008aca <TIM_SlaveTimer_SetConfig+0x19a>
 80089a6:	4a4e      	ldr	r2, [pc, #312]	@ (8008ae0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	f200 808b 	bhi.w	8008ac4 <TIM_SlaveTimer_SetConfig+0x194>
 80089ae:	4a4d      	ldr	r2, [pc, #308]	@ (8008ae4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	f000 808a 	beq.w	8008aca <TIM_SlaveTimer_SetConfig+0x19a>
 80089b6:	4a4b      	ldr	r2, [pc, #300]	@ (8008ae4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	f200 8083 	bhi.w	8008ac4 <TIM_SlaveTimer_SetConfig+0x194>
 80089be:	4a4a      	ldr	r2, [pc, #296]	@ (8008ae8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	f000 8082 	beq.w	8008aca <TIM_SlaveTimer_SetConfig+0x19a>
 80089c6:	4a48      	ldr	r2, [pc, #288]	@ (8008ae8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d87b      	bhi.n	8008ac4 <TIM_SlaveTimer_SetConfig+0x194>
 80089cc:	4a47      	ldr	r2, [pc, #284]	@ (8008aec <TIM_SlaveTimer_SetConfig+0x1bc>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d07b      	beq.n	8008aca <TIM_SlaveTimer_SetConfig+0x19a>
 80089d2:	4a46      	ldr	r2, [pc, #280]	@ (8008aec <TIM_SlaveTimer_SetConfig+0x1bc>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d875      	bhi.n	8008ac4 <TIM_SlaveTimer_SetConfig+0x194>
 80089d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80089dc:	d075      	beq.n	8008aca <TIM_SlaveTimer_SetConfig+0x19a>
 80089de:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80089e2:	d86f      	bhi.n	8008ac4 <TIM_SlaveTimer_SetConfig+0x194>
 80089e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089e8:	d06f      	beq.n	8008aca <TIM_SlaveTimer_SetConfig+0x19a>
 80089ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089ee:	d869      	bhi.n	8008ac4 <TIM_SlaveTimer_SetConfig+0x194>
 80089f0:	2b70      	cmp	r3, #112	@ 0x70
 80089f2:	d01a      	beq.n	8008a2a <TIM_SlaveTimer_SetConfig+0xfa>
 80089f4:	2b70      	cmp	r3, #112	@ 0x70
 80089f6:	d865      	bhi.n	8008ac4 <TIM_SlaveTimer_SetConfig+0x194>
 80089f8:	2b60      	cmp	r3, #96	@ 0x60
 80089fa:	d059      	beq.n	8008ab0 <TIM_SlaveTimer_SetConfig+0x180>
 80089fc:	2b60      	cmp	r3, #96	@ 0x60
 80089fe:	d861      	bhi.n	8008ac4 <TIM_SlaveTimer_SetConfig+0x194>
 8008a00:	2b50      	cmp	r3, #80	@ 0x50
 8008a02:	d04b      	beq.n	8008a9c <TIM_SlaveTimer_SetConfig+0x16c>
 8008a04:	2b50      	cmp	r3, #80	@ 0x50
 8008a06:	d85d      	bhi.n	8008ac4 <TIM_SlaveTimer_SetConfig+0x194>
 8008a08:	2b40      	cmp	r3, #64	@ 0x40
 8008a0a:	d019      	beq.n	8008a40 <TIM_SlaveTimer_SetConfig+0x110>
 8008a0c:	2b40      	cmp	r3, #64	@ 0x40
 8008a0e:	d859      	bhi.n	8008ac4 <TIM_SlaveTimer_SetConfig+0x194>
 8008a10:	2b30      	cmp	r3, #48	@ 0x30
 8008a12:	d05a      	beq.n	8008aca <TIM_SlaveTimer_SetConfig+0x19a>
 8008a14:	2b30      	cmp	r3, #48	@ 0x30
 8008a16:	d855      	bhi.n	8008ac4 <TIM_SlaveTimer_SetConfig+0x194>
 8008a18:	2b20      	cmp	r3, #32
 8008a1a:	d056      	beq.n	8008aca <TIM_SlaveTimer_SetConfig+0x19a>
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	d851      	bhi.n	8008ac4 <TIM_SlaveTimer_SetConfig+0x194>
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d052      	beq.n	8008aca <TIM_SlaveTimer_SetConfig+0x19a>
 8008a24:	2b10      	cmp	r3, #16
 8008a26:	d050      	beq.n	8008aca <TIM_SlaveTimer_SetConfig+0x19a>
 8008a28:	e04c      	b.n	8008ac4 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008a3a:	f000 f9ff 	bl	8008e3c <TIM_ETR_SetConfig>
      break;
 8008a3e:	e045      	b.n	8008acc <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b05      	cmp	r3, #5
 8008a46:	d004      	beq.n	8008a52 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008a4c:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8008a50:	d101      	bne.n	8008a56 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e03b      	b.n	8008ace <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6a1a      	ldr	r2, [r3, #32]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f022 0201 	bic.w	r2, r2, #1
 8008a6c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a7c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	621a      	str	r2, [r3, #32]
      break;
 8008a9a:	e017      	b.n	8008acc <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	f000 f895 	bl	8008bd8 <TIM_TI1_ConfigInputStage>
      break;
 8008aae:	e00d      	b.n	8008acc <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008abc:	461a      	mov	r2, r3
 8008abe:	f000 f8f7 	bl	8008cb0 <TIM_TI2_ConfigInputStage>
      break;
 8008ac2:	e003      	b.n	8008acc <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ac8:	e000      	b.n	8008acc <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8008aca:	bf00      	nop
  }

  return status;
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	00100070 	.word	0x00100070
 8008adc:	00100060 	.word	0x00100060
 8008ae0:	00100050 	.word	0x00100050
 8008ae4:	00100040 	.word	0x00100040
 8008ae8:	00100030 	.word	0x00100030
 8008aec:	00100020 	.word	0x00100020

08008af0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6a1b      	ldr	r3, [r3, #32]
 8008b08:	f023 0201 	bic.w	r2, r3, #1
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	4a28      	ldr	r2, [pc, #160]	@ (8008bbc <TIM_TI1_SetConfig+0xcc>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d01b      	beq.n	8008b56 <TIM_TI1_SetConfig+0x66>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b24:	d017      	beq.n	8008b56 <TIM_TI1_SetConfig+0x66>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	4a25      	ldr	r2, [pc, #148]	@ (8008bc0 <TIM_TI1_SetConfig+0xd0>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d013      	beq.n	8008b56 <TIM_TI1_SetConfig+0x66>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	4a24      	ldr	r2, [pc, #144]	@ (8008bc4 <TIM_TI1_SetConfig+0xd4>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d00f      	beq.n	8008b56 <TIM_TI1_SetConfig+0x66>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	4a23      	ldr	r2, [pc, #140]	@ (8008bc8 <TIM_TI1_SetConfig+0xd8>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d00b      	beq.n	8008b56 <TIM_TI1_SetConfig+0x66>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	4a22      	ldr	r2, [pc, #136]	@ (8008bcc <TIM_TI1_SetConfig+0xdc>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d007      	beq.n	8008b56 <TIM_TI1_SetConfig+0x66>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	4a21      	ldr	r2, [pc, #132]	@ (8008bd0 <TIM_TI1_SetConfig+0xe0>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d003      	beq.n	8008b56 <TIM_TI1_SetConfig+0x66>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	4a20      	ldr	r2, [pc, #128]	@ (8008bd4 <TIM_TI1_SetConfig+0xe4>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d101      	bne.n	8008b5a <TIM_TI1_SetConfig+0x6a>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e000      	b.n	8008b5c <TIM_TI1_SetConfig+0x6c>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d008      	beq.n	8008b72 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f023 0303 	bic.w	r3, r3, #3
 8008b66:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	e003      	b.n	8008b7a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	f043 0301 	orr.w	r3, r3, #1
 8008b78:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	011b      	lsls	r3, r3, #4
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	f023 030a 	bic.w	r3, r3, #10
 8008b94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f003 030a 	and.w	r3, r3, #10
 8008b9c:	693a      	ldr	r2, [r7, #16]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	621a      	str	r2, [r3, #32]
}
 8008bae:	bf00      	nop
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	40012c00 	.word	0x40012c00
 8008bc0:	40000400 	.word	0x40000400
 8008bc4:	40000800 	.word	0x40000800
 8008bc8:	40000c00 	.word	0x40000c00
 8008bcc:	40013400 	.word	0x40013400
 8008bd0:	40014000 	.word	0x40014000
 8008bd4:	40015000 	.word	0x40015000

08008bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6a1b      	ldr	r3, [r3, #32]
 8008be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	f023 0201 	bic.w	r2, r3, #1
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	011b      	lsls	r3, r3, #4
 8008c08:	693a      	ldr	r2, [r7, #16]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f023 030a 	bic.w	r3, r3, #10
 8008c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	621a      	str	r2, [r3, #32]
}
 8008c2a:	bf00      	nop
 8008c2c:	371c      	adds	r7, #28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b087      	sub	sp, #28
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	607a      	str	r2, [r7, #4]
 8008c42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	f023 0210 	bic.w	r2, r3, #16
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	021b      	lsls	r3, r3, #8
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	031b      	lsls	r3, r3, #12
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c88:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	011b      	lsls	r3, r3, #4
 8008c8e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	621a      	str	r2, [r3, #32]
}
 8008ca4:	bf00      	nop
 8008ca6:	371c      	adds	r7, #28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6a1b      	ldr	r3, [r3, #32]
 8008cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	f023 0210 	bic.w	r2, r3, #16
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	031b      	lsls	r3, r3, #12
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008cec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	011b      	lsls	r3, r3, #4
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	621a      	str	r2, [r3, #32]
}
 8008d04:	bf00      	nop
 8008d06:	371c      	adds	r7, #28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
 8008d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6a1b      	ldr	r3, [r3, #32]
 8008d28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f023 0303 	bic.w	r3, r3, #3
 8008d3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	011b      	lsls	r3, r3, #4
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008d60:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	021b      	lsls	r3, r3, #8
 8008d66:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	621a      	str	r2, [r3, #32]
}
 8008d7c:	bf00      	nop
 8008d7e:	371c      	adds	r7, #28
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
 8008d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6a1b      	ldr	r3, [r3, #32]
 8008da0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	69db      	ldr	r3, [r3, #28]
 8008dac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008db4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	021b      	lsls	r3, r3, #8
 8008dba:	693a      	ldr	r2, [r7, #16]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008dc6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	031b      	lsls	r3, r3, #12
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008dda:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	031b      	lsls	r3, r3, #12
 8008de0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008de4:	697a      	ldr	r2, [r7, #20]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	621a      	str	r2, [r3, #32]
}
 8008df6:	bf00      	nop
 8008df8:	371c      	adds	r7, #28
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b085      	sub	sp, #20
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	f043 0307 	orr.w	r3, r3, #7
 8008e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	609a      	str	r2, [r3, #8]
}
 8008e30:	bf00      	nop
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
 8008e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	021a      	lsls	r2, r3, #8
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	431a      	orrs	r2, r3
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	609a      	str	r2, [r3, #8]
}
 8008e70:	bf00      	nop
 8008e72:	371c      	adds	r7, #28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f003 031f 	and.w	r3, r3, #31
 8008e8e:	2201      	movs	r2, #1
 8008e90:	fa02 f303 	lsl.w	r3, r2, r3
 8008e94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6a1a      	ldr	r2, [r3, #32]
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	43db      	mvns	r3, r3
 8008e9e:	401a      	ands	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6a1a      	ldr	r2, [r3, #32]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	f003 031f 	and.w	r3, r3, #31
 8008eae:	6879      	ldr	r1, [r7, #4]
 8008eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb4:	431a      	orrs	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	621a      	str	r2, [r3, #32]
}
 8008eba:	bf00      	nop
 8008ebc:	371c      	adds	r7, #28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
	...

08008ec8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a26      	ldr	r2, [pc, #152]	@ (8008f6c <TIM_ResetCallback+0xa4>)
 8008ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a25      	ldr	r2, [pc, #148]	@ (8008f70 <TIM_ResetCallback+0xa8>)
 8008edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a24      	ldr	r2, [pc, #144]	@ (8008f74 <TIM_ResetCallback+0xac>)
 8008ee4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a23      	ldr	r2, [pc, #140]	@ (8008f78 <TIM_ResetCallback+0xb0>)
 8008eec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a22      	ldr	r2, [pc, #136]	@ (8008f7c <TIM_ResetCallback+0xb4>)
 8008ef4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a21      	ldr	r2, [pc, #132]	@ (8008f80 <TIM_ResetCallback+0xb8>)
 8008efc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a20      	ldr	r2, [pc, #128]	@ (8008f84 <TIM_ResetCallback+0xbc>)
 8008f04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8008f88 <TIM_ResetCallback+0xc0>)
 8008f0c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a1e      	ldr	r2, [pc, #120]	@ (8008f8c <TIM_ResetCallback+0xc4>)
 8008f14:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8008f90 <TIM_ResetCallback+0xc8>)
 8008f1c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a1c      	ldr	r2, [pc, #112]	@ (8008f94 <TIM_ResetCallback+0xcc>)
 8008f24:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8008f98 <TIM_ResetCallback+0xd0>)
 8008f2c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a1a      	ldr	r2, [pc, #104]	@ (8008f9c <TIM_ResetCallback+0xd4>)
 8008f34:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a19      	ldr	r2, [pc, #100]	@ (8008fa0 <TIM_ResetCallback+0xd8>)
 8008f3c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a18      	ldr	r2, [pc, #96]	@ (8008fa4 <TIM_ResetCallback+0xdc>)
 8008f44:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a17      	ldr	r2, [pc, #92]	@ (8008fa8 <TIM_ResetCallback+0xe0>)
 8008f4c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a16      	ldr	r2, [pc, #88]	@ (8008fac <TIM_ResetCallback+0xe4>)
 8008f54:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a15      	ldr	r2, [pc, #84]	@ (8008fb0 <TIM_ResetCallback+0xe8>)
 8008f5c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	08003cc5 	.word	0x08003cc5
 8008f70:	08007e01 	.word	0x08007e01
 8008f74:	08007e79 	.word	0x08007e79
 8008f78:	08007e8d 	.word	0x08007e8d
 8008f7c:	08007e29 	.word	0x08007e29
 8008f80:	08007e3d 	.word	0x08007e3d
 8008f84:	08007e15 	.word	0x08007e15
 8008f88:	08007e51 	.word	0x08007e51
 8008f8c:	08007e65 	.word	0x08007e65
 8008f90:	08007ea1 	.word	0x08007ea1
 8008f94:	08009209 	.word	0x08009209
 8008f98:	0800921d 	.word	0x0800921d
 8008f9c:	08009231 	.word	0x08009231
 8008fa0:	08009245 	.word	0x08009245
 8008fa4:	08009259 	.word	0x08009259
 8008fa8:	0800926d 	.word	0x0800926d
 8008fac:	08009281 	.word	0x08009281
 8008fb0:	08009295 	.word	0x08009295

08008fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d101      	bne.n	8008fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	e074      	b.n	80090b6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a34      	ldr	r2, [pc, #208]	@ (80090c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d009      	beq.n	800900a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a33      	ldr	r2, [pc, #204]	@ (80090c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d004      	beq.n	800900a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a31      	ldr	r2, [pc, #196]	@ (80090cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d108      	bne.n	800901c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009010:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	4313      	orrs	r3, r2
 800901a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	4313      	orrs	r3, r2
 8009030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a21      	ldr	r2, [pc, #132]	@ (80090c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d022      	beq.n	800908a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800904c:	d01d      	beq.n	800908a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a1f      	ldr	r2, [pc, #124]	@ (80090d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d018      	beq.n	800908a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a1d      	ldr	r2, [pc, #116]	@ (80090d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d013      	beq.n	800908a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a1c      	ldr	r2, [pc, #112]	@ (80090d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d00e      	beq.n	800908a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a15      	ldr	r2, [pc, #84]	@ (80090c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d009      	beq.n	800908a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a18      	ldr	r2, [pc, #96]	@ (80090dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d004      	beq.n	800908a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a11      	ldr	r2, [pc, #68]	@ (80090cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d10c      	bne.n	80090a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	4313      	orrs	r3, r2
 800909a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	40012c00 	.word	0x40012c00
 80090c8:	40013400 	.word	0x40013400
 80090cc:	40015000 	.word	0x40015000
 80090d0:	40000400 	.word	0x40000400
 80090d4:	40000800 	.word	0x40000800
 80090d8:	40000c00 	.word	0x40000c00
 80090dc:	40014000 	.word	0x40014000

080090e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090ea:	2300      	movs	r3, #0
 80090ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d101      	bne.n	80090fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090f8:	2302      	movs	r3, #2
 80090fa:	e078      	b.n	80091ee <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	4313      	orrs	r3, r2
 8009110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	4313      	orrs	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4313      	orrs	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	695b      	ldr	r3, [r3, #20]
 8009154:	4313      	orrs	r3, r2
 8009156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009162:	4313      	orrs	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	041b      	lsls	r3, r3, #16
 8009172:	4313      	orrs	r3, r2
 8009174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	4313      	orrs	r3, r2
 8009182:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a1c      	ldr	r2, [pc, #112]	@ (80091fc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d009      	beq.n	80091a2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a1b      	ldr	r2, [pc, #108]	@ (8009200 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d004      	beq.n	80091a2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a19      	ldr	r2, [pc, #100]	@ (8009204 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d11c      	bne.n	80091dc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ac:	051b      	lsls	r3, r3, #20
 80091ae:	4313      	orrs	r3, r2
 80091b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	4313      	orrs	r3, r2
 80091be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ca:	4313      	orrs	r3, r2
 80091cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d8:	4313      	orrs	r3, r2
 80091da:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3714      	adds	r7, #20
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	40012c00 	.word	0x40012c00
 8009200:	40013400 	.word	0x40013400
 8009204:	40015000 	.word	0x40015000

08009208 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d101      	bne.n	80092ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e050      	b.n	800935c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d114      	bne.n	80092ee <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fde5 	bl	8009e9c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d103      	bne.n	80092e4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a21      	ldr	r2, [pc, #132]	@ (8009364 <HAL_UART_Init+0xbc>)
 80092e0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2224      	movs	r2, #36	@ 0x24
 80092f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f022 0201 	bic.w	r2, r2, #1
 8009304:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800930a:	2b00      	cmp	r3, #0
 800930c:	d002      	beq.n	8009314 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 f912 	bl	800a538 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fe13 	bl	8009f40 <UART_SetConfig>
 800931a:	4603      	mov	r3, r0
 800931c:	2b01      	cmp	r3, #1
 800931e:	d101      	bne.n	8009324 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e01b      	b.n	800935c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	689a      	ldr	r2, [r3, #8]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009342:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f042 0201 	orr.w	r2, r2, #1
 8009352:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 f991 	bl	800a67c <UART_CheckIdleState>
 800935a:	4603      	mov	r3, r0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	08004795 	.word	0x08004795

08009368 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009368:	b480      	push	{r7}
 800936a:	b087      	sub	sp, #28
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	460b      	mov	r3, r1
 8009372:	607a      	str	r2, [r7, #4]
 8009374:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d109      	bne.n	8009394 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009386:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e09c      	b.n	80094ce <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800939a:	2b20      	cmp	r3, #32
 800939c:	d16c      	bne.n	8009478 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800939e:	7afb      	ldrb	r3, [r7, #11]
 80093a0:	2b0c      	cmp	r3, #12
 80093a2:	d85e      	bhi.n	8009462 <HAL_UART_RegisterCallback+0xfa>
 80093a4:	a201      	add	r2, pc, #4	@ (adr r2, 80093ac <HAL_UART_RegisterCallback+0x44>)
 80093a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093aa:	bf00      	nop
 80093ac:	080093e1 	.word	0x080093e1
 80093b0:	080093eb 	.word	0x080093eb
 80093b4:	080093f5 	.word	0x080093f5
 80093b8:	080093ff 	.word	0x080093ff
 80093bc:	08009409 	.word	0x08009409
 80093c0:	08009413 	.word	0x08009413
 80093c4:	0800941d 	.word	0x0800941d
 80093c8:	08009427 	.word	0x08009427
 80093cc:	08009431 	.word	0x08009431
 80093d0:	0800943b 	.word	0x0800943b
 80093d4:	08009445 	.word	0x08009445
 80093d8:	0800944f 	.word	0x0800944f
 80093dc:	08009459 	.word	0x08009459
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80093e8:	e070      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80093f2:	e06b      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80093fc:	e066      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009406:	e061      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009410:	e05c      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800941a:	e057      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009424:	e052      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800942e:	e04d      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009438:	e048      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009442:	e043      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800944c:	e03e      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009456:	e039      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009460:	e034      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009468:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	75fb      	strb	r3, [r7, #23]
        break;
 8009476:	e029      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800947e:	2b00      	cmp	r3, #0
 8009480:	d11a      	bne.n	80094b8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009482:	7afb      	ldrb	r3, [r7, #11]
 8009484:	2b0b      	cmp	r3, #11
 8009486:	d002      	beq.n	800948e <HAL_UART_RegisterCallback+0x126>
 8009488:	2b0c      	cmp	r3, #12
 800948a:	d005      	beq.n	8009498 <HAL_UART_RegisterCallback+0x130>
 800948c:	e009      	b.n	80094a2 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009496:	e019      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80094a0:	e014      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	75fb      	strb	r3, [r7, #23]
        break;
 80094b6:	e009      	b.n	80094cc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	371c      	adds	r7, #28
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop

080094dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08a      	sub	sp, #40	@ 0x28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	4613      	mov	r3, r2
 80094e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094f0:	2b20      	cmp	r3, #32
 80094f2:	d167      	bne.n	80095c4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d002      	beq.n	8009500 <HAL_UART_Transmit_DMA+0x24>
 80094fa:	88fb      	ldrh	r3, [r7, #6]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d101      	bne.n	8009504 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e060      	b.n	80095c6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	88fa      	ldrh	r2, [r7, #6]
 800950e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	88fa      	ldrh	r2, [r7, #6]
 8009516:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2221      	movs	r2, #33	@ 0x21
 8009526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800952e:	2b00      	cmp	r3, #0
 8009530:	d028      	beq.n	8009584 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009536:	4a26      	ldr	r2, [pc, #152]	@ (80095d0 <HAL_UART_Transmit_DMA+0xf4>)
 8009538:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800953e:	4a25      	ldr	r2, [pc, #148]	@ (80095d4 <HAL_UART_Transmit_DMA+0xf8>)
 8009540:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009546:	4a24      	ldr	r2, [pc, #144]	@ (80095d8 <HAL_UART_Transmit_DMA+0xfc>)
 8009548:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800954e:	2200      	movs	r2, #0
 8009550:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800955a:	4619      	mov	r1, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3328      	adds	r3, #40	@ 0x28
 8009562:	461a      	mov	r2, r3
 8009564:	88fb      	ldrh	r3, [r7, #6]
 8009566:	f7fb fcd9 	bl	8004f1c <HAL_DMA_Start_IT>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d009      	beq.n	8009584 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2210      	movs	r2, #16
 8009574:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2220      	movs	r2, #32
 800957c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e020      	b.n	80095c6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2240      	movs	r2, #64	@ 0x40
 800958a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3308      	adds	r3, #8
 8009592:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	e853 3f00 	ldrex	r3, [r3]
 800959a:	613b      	str	r3, [r7, #16]
   return(result);
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3308      	adds	r3, #8
 80095aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095ac:	623a      	str	r2, [r7, #32]
 80095ae:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b0:	69f9      	ldr	r1, [r7, #28]
 80095b2:	6a3a      	ldr	r2, [r7, #32]
 80095b4:	e841 2300 	strex	r3, r2, [r1]
 80095b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1e5      	bne.n	800958c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	e000      	b.n	80095c6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80095c4:	2302      	movs	r3, #2
  }
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3728      	adds	r7, #40	@ 0x28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	0800ab47 	.word	0x0800ab47
 80095d4:	0800abe5 	.word	0x0800abe5
 80095d8:	0800ad7f 	.word	0x0800ad7f

080095dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08a      	sub	sp, #40	@ 0x28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	4613      	mov	r3, r2
 80095e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095f0:	2b20      	cmp	r3, #32
 80095f2:	d137      	bne.n	8009664 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d002      	beq.n	8009600 <HAL_UART_Receive_DMA+0x24>
 80095fa:	88fb      	ldrh	r3, [r7, #6]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d101      	bne.n	8009604 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e030      	b.n	8009666 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a18      	ldr	r2, [pc, #96]	@ (8009670 <HAL_UART_Receive_DMA+0x94>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d01f      	beq.n	8009654 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d018      	beq.n	8009654 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	e853 3f00 	ldrex	r3, [r3]
 800962e:	613b      	str	r3, [r7, #16]
   return(result);
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009636:	627b      	str	r3, [r7, #36]	@ 0x24
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	461a      	mov	r2, r3
 800963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009640:	623b      	str	r3, [r7, #32]
 8009642:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	69f9      	ldr	r1, [r7, #28]
 8009646:	6a3a      	ldr	r2, [r7, #32]
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	61bb      	str	r3, [r7, #24]
   return(result);
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e6      	bne.n	8009622 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009654:	88fb      	ldrh	r3, [r7, #6]
 8009656:	461a      	mov	r2, r3
 8009658:	68b9      	ldr	r1, [r7, #8]
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f001 f926 	bl	800a8ac <UART_Start_Receive_DMA>
 8009660:	4603      	mov	r3, r0
 8009662:	e000      	b.n	8009666 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009664:	2302      	movs	r3, #2
  }
}
 8009666:	4618      	mov	r0, r3
 8009668:	3728      	adds	r7, #40	@ 0x28
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	40008000 	.word	0x40008000

08009674 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b0ba      	sub	sp, #232	@ 0xe8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800969a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800969e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80096a2:	4013      	ands	r3, r2
 80096a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80096a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d11b      	bne.n	80096e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096b4:	f003 0320 	and.w	r3, r3, #32
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d015      	beq.n	80096e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096c0:	f003 0320 	and.w	r3, r3, #32
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d105      	bne.n	80096d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d009      	beq.n	80096e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 8312 	beq.w	8009d02 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	4798      	blx	r3
      }
      return;
 80096e6:	e30c      	b.n	8009d02 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80096e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 8129 	beq.w	8009944 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80096f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80096f6:	4b90      	ldr	r3, [pc, #576]	@ (8009938 <HAL_UART_IRQHandler+0x2c4>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d106      	bne.n	800970c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80096fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009702:	4b8e      	ldr	r3, [pc, #568]	@ (800993c <HAL_UART_IRQHandler+0x2c8>)
 8009704:	4013      	ands	r3, r2
 8009706:	2b00      	cmp	r3, #0
 8009708:	f000 811c 	beq.w	8009944 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800970c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009710:	f003 0301 	and.w	r3, r3, #1
 8009714:	2b00      	cmp	r3, #0
 8009716:	d011      	beq.n	800973c <HAL_UART_IRQHandler+0xc8>
 8009718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800971c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00b      	beq.n	800973c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2201      	movs	r2, #1
 800972a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009732:	f043 0201 	orr.w	r2, r3, #1
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800973c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009740:	f003 0302 	and.w	r3, r3, #2
 8009744:	2b00      	cmp	r3, #0
 8009746:	d011      	beq.n	800976c <HAL_UART_IRQHandler+0xf8>
 8009748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00b      	beq.n	800976c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2202      	movs	r2, #2
 800975a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009762:	f043 0204 	orr.w	r2, r3, #4
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800976c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009770:	f003 0304 	and.w	r3, r3, #4
 8009774:	2b00      	cmp	r3, #0
 8009776:	d011      	beq.n	800979c <HAL_UART_IRQHandler+0x128>
 8009778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800977c:	f003 0301 	and.w	r3, r3, #1
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00b      	beq.n	800979c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2204      	movs	r2, #4
 800978a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009792:	f043 0202 	orr.w	r2, r3, #2
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800979c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097a0:	f003 0308 	and.w	r3, r3, #8
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d017      	beq.n	80097d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097ac:	f003 0320 	and.w	r3, r3, #32
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d105      	bne.n	80097c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80097b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80097b8:	4b5f      	ldr	r3, [pc, #380]	@ (8009938 <HAL_UART_IRQHandler+0x2c4>)
 80097ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00b      	beq.n	80097d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2208      	movs	r2, #8
 80097c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097ce:	f043 0208 	orr.w	r2, r3, #8
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80097d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d012      	beq.n	800980a <HAL_UART_IRQHandler+0x196>
 80097e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00c      	beq.n	800980a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009800:	f043 0220 	orr.w	r2, r3, #32
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 8278 	beq.w	8009d06 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b00      	cmp	r3, #0
 8009820:	d013      	beq.n	800984a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009826:	f003 0320 	and.w	r3, r3, #32
 800982a:	2b00      	cmp	r3, #0
 800982c:	d105      	bne.n	800983a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800982e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d007      	beq.n	800984a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800983e:	2b00      	cmp	r3, #0
 8009840:	d003      	beq.n	800984a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009850:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800985e:	2b40      	cmp	r3, #64	@ 0x40
 8009860:	d005      	beq.n	800986e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009866:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800986a:	2b00      	cmp	r3, #0
 800986c:	d058      	beq.n	8009920 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f001 f903 	bl	800aa7a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800987e:	2b40      	cmp	r3, #64	@ 0x40
 8009880:	d148      	bne.n	8009914 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3308      	adds	r3, #8
 8009888:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009890:	e853 3f00 	ldrex	r3, [r3]
 8009894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009898:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800989c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3308      	adds	r3, #8
 80098aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80098ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80098b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80098ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80098be:	e841 2300 	strex	r3, r2, [r1]
 80098c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80098c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1d9      	bne.n	8009882 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d017      	beq.n	8009908 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098de:	4a18      	ldr	r2, [pc, #96]	@ (8009940 <HAL_UART_IRQHandler+0x2cc>)
 80098e0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fb fbeb 	bl	80050c4 <HAL_DMA_Abort_IT>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d01f      	beq.n	8009934 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009902:	4610      	mov	r0, r2
 8009904:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009906:	e015      	b.n	8009934 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009912:	e00f      	b.n	8009934 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800991e:	e009      	b.n	8009934 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009932:	e1e8      	b.n	8009d06 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009934:	bf00      	nop
    return;
 8009936:	e1e6      	b.n	8009d06 <HAL_UART_IRQHandler+0x692>
 8009938:	10000001 	.word	0x10000001
 800993c:	04000120 	.word	0x04000120
 8009940:	0800ae03 	.word	0x0800ae03

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009948:	2b01      	cmp	r3, #1
 800994a:	f040 8176 	bne.w	8009c3a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800994e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009952:	f003 0310 	and.w	r3, r3, #16
 8009956:	2b00      	cmp	r3, #0
 8009958:	f000 816f 	beq.w	8009c3a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800995c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009960:	f003 0310 	and.w	r3, r3, #16
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 8168 	beq.w	8009c3a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2210      	movs	r2, #16
 8009970:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800997c:	2b40      	cmp	r3, #64	@ 0x40
 800997e:	f040 80dc 	bne.w	8009b3a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009990:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 80b1 	beq.w	8009afc <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099a4:	429a      	cmp	r2, r3
 80099a6:	f080 80a9 	bcs.w	8009afc <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 0320 	and.w	r3, r3, #32
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f040 8087 	bne.w	8009ad6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80099d4:	e853 3f00 	ldrex	r3, [r3]
 80099d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80099dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	461a      	mov	r2, r3
 80099ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80099fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009a02:	e841 2300 	strex	r3, r2, [r1]
 8009a06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009a0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1da      	bne.n	80099c8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3308      	adds	r3, #8
 8009a18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a1c:	e853 3f00 	ldrex	r3, [r3]
 8009a20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009a22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a24:	f023 0301 	bic.w	r3, r3, #1
 8009a28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	3308      	adds	r3, #8
 8009a32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009a36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009a3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a42:	e841 2300 	strex	r3, r2, [r1]
 8009a46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1e1      	bne.n	8009a12 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	3308      	adds	r3, #8
 8009a54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a58:	e853 3f00 	ldrex	r3, [r3]
 8009a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	3308      	adds	r3, #8
 8009a6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a7a:	e841 2300 	strex	r3, r2, [r1]
 8009a7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1e3      	bne.n	8009a4e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2220      	movs	r2, #32
 8009a8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009aa4:	f023 0310 	bic.w	r3, r3, #16
 8009aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ab6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ab8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009abc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009abe:	e841 2300 	strex	r3, r2, [r1]
 8009ac2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1e4      	bne.n	8009a94 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fb fa9e 	bl	8005012 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2202      	movs	r2, #2
 8009ada:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009aee:	b292      	uxth	r2, r2
 8009af0:	1a8a      	subs	r2, r1, r2
 8009af2:	b292      	uxth	r2, r2
 8009af4:	4611      	mov	r1, r2
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009afa:	e106      	b.n	8009d0a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b06:	429a      	cmp	r2, r3
 8009b08:	f040 80ff 	bne.w	8009d0a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 0320 	and.w	r3, r3, #32
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	f040 80f5 	bne.w	8009d0a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2202      	movs	r2, #2
 8009b24:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009b32:	4611      	mov	r1, r2
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	4798      	blx	r3
      return;
 8009b38:	e0e7      	b.n	8009d0a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f000 80d9 	beq.w	8009d0e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8009b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 80d4 	beq.w	8009d0e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6e:	e853 3f00 	ldrex	r3, [r3]
 8009b72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b90:	e841 2300 	strex	r3, r2, [r1]
 8009b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1e4      	bne.n	8009b66 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3308      	adds	r3, #8
 8009ba2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba6:	e853 3f00 	ldrex	r3, [r3]
 8009baa:	623b      	str	r3, [r7, #32]
   return(result);
 8009bac:	6a3b      	ldr	r3, [r7, #32]
 8009bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009bb2:	f023 0301 	bic.w	r3, r3, #1
 8009bb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	3308      	adds	r3, #8
 8009bc0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009bc4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bcc:	e841 2300 	strex	r3, r2, [r1]
 8009bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1e1      	bne.n	8009b9c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2220      	movs	r2, #32
 8009bdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	e853 3f00 	ldrex	r3, [r3]
 8009bf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f023 0310 	bic.w	r3, r3, #16
 8009c00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009c0e:	61fb      	str	r3, [r7, #28]
 8009c10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c12:	69b9      	ldr	r1, [r7, #24]
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	e841 2300 	strex	r3, r2, [r1]
 8009c1a:	617b      	str	r3, [r7, #20]
   return(result);
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1e4      	bne.n	8009bec <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2202      	movs	r2, #2
 8009c26:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009c2e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009c32:	4611      	mov	r1, r2
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c38:	e069      	b.n	8009d0e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d010      	beq.n	8009c68 <HAL_UART_IRQHandler+0x5f4>
 8009c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00a      	beq.n	8009c68 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009c5a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c66:	e055      	b.n	8009d14 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d014      	beq.n	8009c9e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d105      	bne.n	8009c8c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d008      	beq.n	8009c9e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d03e      	beq.n	8009d12 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	4798      	blx	r3
    }
    return;
 8009c9c:	e039      	b.n	8009d12 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d009      	beq.n	8009cbe <HAL_UART_IRQHandler+0x64a>
 8009caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d003      	beq.n	8009cbe <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f001 f8b7 	bl	800ae2a <UART_EndTransmit_IT>
    return;
 8009cbc:	e02a      	b.n	8009d14 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00b      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x66e>
 8009cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d005      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ce0:	e018      	b.n	8009d14 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ce6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d012      	beq.n	8009d14 <HAL_UART_IRQHandler+0x6a0>
 8009cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	da0e      	bge.n	8009d14 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d00:	e008      	b.n	8009d14 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009d02:	bf00      	nop
 8009d04:	e006      	b.n	8009d14 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009d06:	bf00      	nop
 8009d08:	e004      	b.n	8009d14 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009d0a:	bf00      	nop
 8009d0c:	e002      	b.n	8009d14 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009d0e:	bf00      	nop
 8009d10:	e000      	b.n	8009d14 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009d12:	bf00      	nop
  }
}
 8009d14:	37e8      	adds	r7, #232	@ 0xe8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop

08009d1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009d88:	bf00      	nop
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009db0:	bf00      	nop
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a09      	ldr	r2, [pc, #36]	@ (8009e08 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d009      	beq.n	8009dfc <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	615a      	str	r2, [r3, #20]
  }
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	40008000 	.word	0x40008000

08009e0c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a18      	ldr	r2, [pc, #96]	@ (8009e7c <HAL_UART_EnableReceiverTimeout+0x70>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d027      	beq.n	8009e6e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e24:	2b20      	cmp	r3, #32
 8009e26:	d120      	bne.n	8009e6a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d101      	bne.n	8009e36 <HAL_UART_EnableReceiverTimeout+0x2a>
 8009e32:	2302      	movs	r3, #2
 8009e34:	e01c      	b.n	8009e70 <HAL_UART_EnableReceiverTimeout+0x64>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2224      	movs	r2, #36	@ 0x24
 8009e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009e54:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2220      	movs	r2, #32
 8009e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	e002      	b.n	8009e70 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009e6a:	2302      	movs	r3, #2
 8009e6c:	e000      	b.n	8009e70 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
  }
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	40008000 	.word	0x40008000

08009e80 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr
	...

08009e9c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8009f10 <UART_InitCallbacksToDefault+0x74>)
 8009ea8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a19      	ldr	r2, [pc, #100]	@ (8009f14 <UART_InitCallbacksToDefault+0x78>)
 8009eb0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a18      	ldr	r2, [pc, #96]	@ (8009f18 <UART_InitCallbacksToDefault+0x7c>)
 8009eb8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a17      	ldr	r2, [pc, #92]	@ (8009f1c <UART_InitCallbacksToDefault+0x80>)
 8009ec0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a16      	ldr	r2, [pc, #88]	@ (8009f20 <UART_InitCallbacksToDefault+0x84>)
 8009ec8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a15      	ldr	r2, [pc, #84]	@ (8009f24 <UART_InitCallbacksToDefault+0x88>)
 8009ed0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a14      	ldr	r2, [pc, #80]	@ (8009f28 <UART_InitCallbacksToDefault+0x8c>)
 8009ed8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a13      	ldr	r2, [pc, #76]	@ (8009f2c <UART_InitCallbacksToDefault+0x90>)
 8009ee0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a12      	ldr	r2, [pc, #72]	@ (8009f30 <UART_InitCallbacksToDefault+0x94>)
 8009ee8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a11      	ldr	r2, [pc, #68]	@ (8009f34 <UART_InitCallbacksToDefault+0x98>)
 8009ef0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a10      	ldr	r2, [pc, #64]	@ (8009f38 <UART_InitCallbacksToDefault+0x9c>)
 8009ef8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a0f      	ldr	r2, [pc, #60]	@ (8009f3c <UART_InitCallbacksToDefault+0xa0>)
 8009f00:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	08009d31 	.word	0x08009d31
 8009f14:	08009d1d 	.word	0x08009d1d
 8009f18:	08009d59 	.word	0x08009d59
 8009f1c:	08009d45 	.word	0x08009d45
 8009f20:	08009d6d 	.word	0x08009d6d
 8009f24:	08009d81 	.word	0x08009d81
 8009f28:	08009d95 	.word	0x08009d95
 8009f2c:	08009da9 	.word	0x08009da9
 8009f30:	0800ae85 	.word	0x0800ae85
 8009f34:	0800ae99 	.word	0x0800ae99
 8009f38:	0800aead 	.word	0x0800aead
 8009f3c:	08009dbd 	.word	0x08009dbd

08009f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f44:	b08c      	sub	sp, #48	@ 0x30
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	689a      	ldr	r2, [r3, #8]
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	431a      	orrs	r2, r3
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	695b      	ldr	r3, [r3, #20]
 8009f5e:	431a      	orrs	r2, r3
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	69db      	ldr	r3, [r3, #28]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	4baa      	ldr	r3, [pc, #680]	@ (800a218 <UART_SetConfig+0x2d8>)
 8009f70:	4013      	ands	r3, r2
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	6812      	ldr	r2, [r2, #0]
 8009f76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f78:	430b      	orrs	r3, r1
 8009f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	68da      	ldr	r2, [r3, #12]
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	430a      	orrs	r2, r1
 8009f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a9f      	ldr	r2, [pc, #636]	@ (800a21c <UART_SetConfig+0x2dc>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d004      	beq.n	8009fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009fb6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	6812      	ldr	r2, [r2, #0]
 8009fbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fc0:	430b      	orrs	r3, r1
 8009fc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fca:	f023 010f 	bic.w	r1, r3, #15
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a90      	ldr	r2, [pc, #576]	@ (800a220 <UART_SetConfig+0x2e0>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d125      	bne.n	800a030 <UART_SetConfig+0xf0>
 8009fe4:	4b8f      	ldr	r3, [pc, #572]	@ (800a224 <UART_SetConfig+0x2e4>)
 8009fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fea:	f003 0303 	and.w	r3, r3, #3
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	d81a      	bhi.n	800a028 <UART_SetConfig+0xe8>
 8009ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff8 <UART_SetConfig+0xb8>)
 8009ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff8:	0800a009 	.word	0x0800a009
 8009ffc:	0800a019 	.word	0x0800a019
 800a000:	0800a011 	.word	0x0800a011
 800a004:	0800a021 	.word	0x0800a021
 800a008:	2301      	movs	r3, #1
 800a00a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a00e:	e116      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a010:	2302      	movs	r3, #2
 800a012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a016:	e112      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a018:	2304      	movs	r3, #4
 800a01a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a01e:	e10e      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a020:	2308      	movs	r3, #8
 800a022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a026:	e10a      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a028:	2310      	movs	r3, #16
 800a02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a02e:	e106      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a7c      	ldr	r2, [pc, #496]	@ (800a228 <UART_SetConfig+0x2e8>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d138      	bne.n	800a0ac <UART_SetConfig+0x16c>
 800a03a:	4b7a      	ldr	r3, [pc, #488]	@ (800a224 <UART_SetConfig+0x2e4>)
 800a03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a040:	f003 030c 	and.w	r3, r3, #12
 800a044:	2b0c      	cmp	r3, #12
 800a046:	d82d      	bhi.n	800a0a4 <UART_SetConfig+0x164>
 800a048:	a201      	add	r2, pc, #4	@ (adr r2, 800a050 <UART_SetConfig+0x110>)
 800a04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04e:	bf00      	nop
 800a050:	0800a085 	.word	0x0800a085
 800a054:	0800a0a5 	.word	0x0800a0a5
 800a058:	0800a0a5 	.word	0x0800a0a5
 800a05c:	0800a0a5 	.word	0x0800a0a5
 800a060:	0800a095 	.word	0x0800a095
 800a064:	0800a0a5 	.word	0x0800a0a5
 800a068:	0800a0a5 	.word	0x0800a0a5
 800a06c:	0800a0a5 	.word	0x0800a0a5
 800a070:	0800a08d 	.word	0x0800a08d
 800a074:	0800a0a5 	.word	0x0800a0a5
 800a078:	0800a0a5 	.word	0x0800a0a5
 800a07c:	0800a0a5 	.word	0x0800a0a5
 800a080:	0800a09d 	.word	0x0800a09d
 800a084:	2300      	movs	r3, #0
 800a086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a08a:	e0d8      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a08c:	2302      	movs	r3, #2
 800a08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a092:	e0d4      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a094:	2304      	movs	r3, #4
 800a096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a09a:	e0d0      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a09c:	2308      	movs	r3, #8
 800a09e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0a2:	e0cc      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a0a4:	2310      	movs	r3, #16
 800a0a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0aa:	e0c8      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a5e      	ldr	r2, [pc, #376]	@ (800a22c <UART_SetConfig+0x2ec>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d125      	bne.n	800a102 <UART_SetConfig+0x1c2>
 800a0b6:	4b5b      	ldr	r3, [pc, #364]	@ (800a224 <UART_SetConfig+0x2e4>)
 800a0b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a0c0:	2b30      	cmp	r3, #48	@ 0x30
 800a0c2:	d016      	beq.n	800a0f2 <UART_SetConfig+0x1b2>
 800a0c4:	2b30      	cmp	r3, #48	@ 0x30
 800a0c6:	d818      	bhi.n	800a0fa <UART_SetConfig+0x1ba>
 800a0c8:	2b20      	cmp	r3, #32
 800a0ca:	d00a      	beq.n	800a0e2 <UART_SetConfig+0x1a2>
 800a0cc:	2b20      	cmp	r3, #32
 800a0ce:	d814      	bhi.n	800a0fa <UART_SetConfig+0x1ba>
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <UART_SetConfig+0x19a>
 800a0d4:	2b10      	cmp	r3, #16
 800a0d6:	d008      	beq.n	800a0ea <UART_SetConfig+0x1aa>
 800a0d8:	e00f      	b.n	800a0fa <UART_SetConfig+0x1ba>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0e0:	e0ad      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0e8:	e0a9      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a0ea:	2304      	movs	r3, #4
 800a0ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0f0:	e0a5      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a0f2:	2308      	movs	r3, #8
 800a0f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0f8:	e0a1      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a0fa:	2310      	movs	r3, #16
 800a0fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a100:	e09d      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a4a      	ldr	r2, [pc, #296]	@ (800a230 <UART_SetConfig+0x2f0>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d125      	bne.n	800a158 <UART_SetConfig+0x218>
 800a10c:	4b45      	ldr	r3, [pc, #276]	@ (800a224 <UART_SetConfig+0x2e4>)
 800a10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a112:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a116:	2bc0      	cmp	r3, #192	@ 0xc0
 800a118:	d016      	beq.n	800a148 <UART_SetConfig+0x208>
 800a11a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a11c:	d818      	bhi.n	800a150 <UART_SetConfig+0x210>
 800a11e:	2b80      	cmp	r3, #128	@ 0x80
 800a120:	d00a      	beq.n	800a138 <UART_SetConfig+0x1f8>
 800a122:	2b80      	cmp	r3, #128	@ 0x80
 800a124:	d814      	bhi.n	800a150 <UART_SetConfig+0x210>
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <UART_SetConfig+0x1f0>
 800a12a:	2b40      	cmp	r3, #64	@ 0x40
 800a12c:	d008      	beq.n	800a140 <UART_SetConfig+0x200>
 800a12e:	e00f      	b.n	800a150 <UART_SetConfig+0x210>
 800a130:	2300      	movs	r3, #0
 800a132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a136:	e082      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a138:	2302      	movs	r3, #2
 800a13a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a13e:	e07e      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a140:	2304      	movs	r3, #4
 800a142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a146:	e07a      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a148:	2308      	movs	r3, #8
 800a14a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a14e:	e076      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a150:	2310      	movs	r3, #16
 800a152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a156:	e072      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a35      	ldr	r2, [pc, #212]	@ (800a234 <UART_SetConfig+0x2f4>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d12a      	bne.n	800a1b8 <UART_SetConfig+0x278>
 800a162:	4b30      	ldr	r3, [pc, #192]	@ (800a224 <UART_SetConfig+0x2e4>)
 800a164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a168:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a16c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a170:	d01a      	beq.n	800a1a8 <UART_SetConfig+0x268>
 800a172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a176:	d81b      	bhi.n	800a1b0 <UART_SetConfig+0x270>
 800a178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a17c:	d00c      	beq.n	800a198 <UART_SetConfig+0x258>
 800a17e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a182:	d815      	bhi.n	800a1b0 <UART_SetConfig+0x270>
 800a184:	2b00      	cmp	r3, #0
 800a186:	d003      	beq.n	800a190 <UART_SetConfig+0x250>
 800a188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a18c:	d008      	beq.n	800a1a0 <UART_SetConfig+0x260>
 800a18e:	e00f      	b.n	800a1b0 <UART_SetConfig+0x270>
 800a190:	2300      	movs	r3, #0
 800a192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a196:	e052      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a198:	2302      	movs	r3, #2
 800a19a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a19e:	e04e      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a1a0:	2304      	movs	r3, #4
 800a1a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1a6:	e04a      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a1a8:	2308      	movs	r3, #8
 800a1aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ae:	e046      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a1b0:	2310      	movs	r3, #16
 800a1b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1b6:	e042      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a17      	ldr	r2, [pc, #92]	@ (800a21c <UART_SetConfig+0x2dc>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d13a      	bne.n	800a238 <UART_SetConfig+0x2f8>
 800a1c2:	4b18      	ldr	r3, [pc, #96]	@ (800a224 <UART_SetConfig+0x2e4>)
 800a1c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a1cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1d0:	d01a      	beq.n	800a208 <UART_SetConfig+0x2c8>
 800a1d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1d6:	d81b      	bhi.n	800a210 <UART_SetConfig+0x2d0>
 800a1d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1dc:	d00c      	beq.n	800a1f8 <UART_SetConfig+0x2b8>
 800a1de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1e2:	d815      	bhi.n	800a210 <UART_SetConfig+0x2d0>
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d003      	beq.n	800a1f0 <UART_SetConfig+0x2b0>
 800a1e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1ec:	d008      	beq.n	800a200 <UART_SetConfig+0x2c0>
 800a1ee:	e00f      	b.n	800a210 <UART_SetConfig+0x2d0>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1f6:	e022      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1fe:	e01e      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a200:	2304      	movs	r3, #4
 800a202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a206:	e01a      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a208:	2308      	movs	r3, #8
 800a20a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a20e:	e016      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a210:	2310      	movs	r3, #16
 800a212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a216:	e012      	b.n	800a23e <UART_SetConfig+0x2fe>
 800a218:	cfff69f3 	.word	0xcfff69f3
 800a21c:	40008000 	.word	0x40008000
 800a220:	40013800 	.word	0x40013800
 800a224:	40021000 	.word	0x40021000
 800a228:	40004400 	.word	0x40004400
 800a22c:	40004800 	.word	0x40004800
 800a230:	40004c00 	.word	0x40004c00
 800a234:	40005000 	.word	0x40005000
 800a238:	2310      	movs	r3, #16
 800a23a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4aae      	ldr	r2, [pc, #696]	@ (800a4fc <UART_SetConfig+0x5bc>)
 800a244:	4293      	cmp	r3, r2
 800a246:	f040 8097 	bne.w	800a378 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a24a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a24e:	2b08      	cmp	r3, #8
 800a250:	d823      	bhi.n	800a29a <UART_SetConfig+0x35a>
 800a252:	a201      	add	r2, pc, #4	@ (adr r2, 800a258 <UART_SetConfig+0x318>)
 800a254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a258:	0800a27d 	.word	0x0800a27d
 800a25c:	0800a29b 	.word	0x0800a29b
 800a260:	0800a285 	.word	0x0800a285
 800a264:	0800a29b 	.word	0x0800a29b
 800a268:	0800a28b 	.word	0x0800a28b
 800a26c:	0800a29b 	.word	0x0800a29b
 800a270:	0800a29b 	.word	0x0800a29b
 800a274:	0800a29b 	.word	0x0800a29b
 800a278:	0800a293 	.word	0x0800a293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a27c:	f7fc f812 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 800a280:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a282:	e010      	b.n	800a2a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a284:	4b9e      	ldr	r3, [pc, #632]	@ (800a500 <UART_SetConfig+0x5c0>)
 800a286:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a288:	e00d      	b.n	800a2a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a28a:	f7fb ff9d 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 800a28e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a290:	e009      	b.n	800a2a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a296:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a298:	e005      	b.n	800a2a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a29a:	2300      	movs	r3, #0
 800a29c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a2a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f000 8130 	beq.w	800a50e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b2:	4a94      	ldr	r2, [pc, #592]	@ (800a504 <UART_SetConfig+0x5c4>)
 800a2b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	005b      	lsls	r3, r3, #1
 800a2ca:	4413      	add	r3, r2
 800a2cc:	69ba      	ldr	r2, [r7, #24]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d305      	bcc.n	800a2de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d903      	bls.n	800a2e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2e4:	e113      	b.n	800a50e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	60bb      	str	r3, [r7, #8]
 800a2ec:	60fa      	str	r2, [r7, #12]
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2f2:	4a84      	ldr	r2, [pc, #528]	@ (800a504 <UART_SetConfig+0x5c4>)
 800a2f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	603b      	str	r3, [r7, #0]
 800a2fe:	607a      	str	r2, [r7, #4]
 800a300:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a304:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a308:	f7f6 fd62 	bl	8000dd0 <__aeabi_uldivmod>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	4610      	mov	r0, r2
 800a312:	4619      	mov	r1, r3
 800a314:	f04f 0200 	mov.w	r2, #0
 800a318:	f04f 0300 	mov.w	r3, #0
 800a31c:	020b      	lsls	r3, r1, #8
 800a31e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a322:	0202      	lsls	r2, r0, #8
 800a324:	6979      	ldr	r1, [r7, #20]
 800a326:	6849      	ldr	r1, [r1, #4]
 800a328:	0849      	lsrs	r1, r1, #1
 800a32a:	2000      	movs	r0, #0
 800a32c:	460c      	mov	r4, r1
 800a32e:	4605      	mov	r5, r0
 800a330:	eb12 0804 	adds.w	r8, r2, r4
 800a334:	eb43 0905 	adc.w	r9, r3, r5
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	469a      	mov	sl, r3
 800a340:	4693      	mov	fp, r2
 800a342:	4652      	mov	r2, sl
 800a344:	465b      	mov	r3, fp
 800a346:	4640      	mov	r0, r8
 800a348:	4649      	mov	r1, r9
 800a34a:	f7f6 fd41 	bl	8000dd0 <__aeabi_uldivmod>
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	4613      	mov	r3, r2
 800a354:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a35c:	d308      	bcc.n	800a370 <UART_SetConfig+0x430>
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a364:	d204      	bcs.n	800a370 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	6a3a      	ldr	r2, [r7, #32]
 800a36c:	60da      	str	r2, [r3, #12]
 800a36e:	e0ce      	b.n	800a50e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a376:	e0ca      	b.n	800a50e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a380:	d166      	bne.n	800a450 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a382:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a386:	2b08      	cmp	r3, #8
 800a388:	d827      	bhi.n	800a3da <UART_SetConfig+0x49a>
 800a38a:	a201      	add	r2, pc, #4	@ (adr r2, 800a390 <UART_SetConfig+0x450>)
 800a38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a390:	0800a3b5 	.word	0x0800a3b5
 800a394:	0800a3bd 	.word	0x0800a3bd
 800a398:	0800a3c5 	.word	0x0800a3c5
 800a39c:	0800a3db 	.word	0x0800a3db
 800a3a0:	0800a3cb 	.word	0x0800a3cb
 800a3a4:	0800a3db 	.word	0x0800a3db
 800a3a8:	0800a3db 	.word	0x0800a3db
 800a3ac:	0800a3db 	.word	0x0800a3db
 800a3b0:	0800a3d3 	.word	0x0800a3d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3b4:	f7fb ff76 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 800a3b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3ba:	e014      	b.n	800a3e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3bc:	f7fb ff88 	bl	80062d0 <HAL_RCC_GetPCLK2Freq>
 800a3c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3c2:	e010      	b.n	800a3e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3c4:	4b4e      	ldr	r3, [pc, #312]	@ (800a500 <UART_SetConfig+0x5c0>)
 800a3c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3c8:	e00d      	b.n	800a3e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3ca:	f7fb fefd 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 800a3ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3d0:	e009      	b.n	800a3e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3d8:	e005      	b.n	800a3e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a3e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 8090 	beq.w	800a50e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f2:	4a44      	ldr	r2, [pc, #272]	@ (800a504 <UART_SetConfig+0x5c4>)
 800a3f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a400:	005a      	lsls	r2, r3, #1
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	085b      	lsrs	r3, r3, #1
 800a408:	441a      	add	r2, r3
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a412:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a414:	6a3b      	ldr	r3, [r7, #32]
 800a416:	2b0f      	cmp	r3, #15
 800a418:	d916      	bls.n	800a448 <UART_SetConfig+0x508>
 800a41a:	6a3b      	ldr	r3, [r7, #32]
 800a41c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a420:	d212      	bcs.n	800a448 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a422:	6a3b      	ldr	r3, [r7, #32]
 800a424:	b29b      	uxth	r3, r3
 800a426:	f023 030f 	bic.w	r3, r3, #15
 800a42a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	085b      	lsrs	r3, r3, #1
 800a430:	b29b      	uxth	r3, r3
 800a432:	f003 0307 	and.w	r3, r3, #7
 800a436:	b29a      	uxth	r2, r3
 800a438:	8bfb      	ldrh	r3, [r7, #30]
 800a43a:	4313      	orrs	r3, r2
 800a43c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	8bfa      	ldrh	r2, [r7, #30]
 800a444:	60da      	str	r2, [r3, #12]
 800a446:	e062      	b.n	800a50e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a44e:	e05e      	b.n	800a50e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a450:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a454:	2b08      	cmp	r3, #8
 800a456:	d828      	bhi.n	800a4aa <UART_SetConfig+0x56a>
 800a458:	a201      	add	r2, pc, #4	@ (adr r2, 800a460 <UART_SetConfig+0x520>)
 800a45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45e:	bf00      	nop
 800a460:	0800a485 	.word	0x0800a485
 800a464:	0800a48d 	.word	0x0800a48d
 800a468:	0800a495 	.word	0x0800a495
 800a46c:	0800a4ab 	.word	0x0800a4ab
 800a470:	0800a49b 	.word	0x0800a49b
 800a474:	0800a4ab 	.word	0x0800a4ab
 800a478:	0800a4ab 	.word	0x0800a4ab
 800a47c:	0800a4ab 	.word	0x0800a4ab
 800a480:	0800a4a3 	.word	0x0800a4a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a484:	f7fb ff0e 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 800a488:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a48a:	e014      	b.n	800a4b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a48c:	f7fb ff20 	bl	80062d0 <HAL_RCC_GetPCLK2Freq>
 800a490:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a492:	e010      	b.n	800a4b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a494:	4b1a      	ldr	r3, [pc, #104]	@ (800a500 <UART_SetConfig+0x5c0>)
 800a496:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a498:	e00d      	b.n	800a4b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a49a:	f7fb fe95 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 800a49e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a4a0:	e009      	b.n	800a4b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a4a8:	e005      	b.n	800a4b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a4b4:	bf00      	nop
    }

    if (pclk != 0U)
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d028      	beq.n	800a50e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c0:	4a10      	ldr	r2, [pc, #64]	@ (800a504 <UART_SetConfig+0x5c4>)
 800a4c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	085b      	lsrs	r3, r3, #1
 800a4d4:	441a      	add	r2, r3
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4e0:	6a3b      	ldr	r3, [r7, #32]
 800a4e2:	2b0f      	cmp	r3, #15
 800a4e4:	d910      	bls.n	800a508 <UART_SetConfig+0x5c8>
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4ec:	d20c      	bcs.n	800a508 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4ee:	6a3b      	ldr	r3, [r7, #32]
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	60da      	str	r2, [r3, #12]
 800a4f8:	e009      	b.n	800a50e <UART_SetConfig+0x5ce>
 800a4fa:	bf00      	nop
 800a4fc:	40008000 	.word	0x40008000
 800a500:	00f42400 	.word	0x00f42400
 800a504:	0800bcc0 	.word	0x0800bcc0
      }
      else
      {
        ret = HAL_ERROR;
 800a508:	2301      	movs	r3, #1
 800a50a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	2201      	movs	r2, #1
 800a512:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	2201      	movs	r2, #1
 800a51a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	2200      	movs	r2, #0
 800a522:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	2200      	movs	r2, #0
 800a528:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a52a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3730      	adds	r7, #48	@ 0x30
 800a532:	46bd      	mov	sp, r7
 800a534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a538 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a544:	f003 0308 	and.w	r3, r3, #8
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00a      	beq.n	800a562 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	430a      	orrs	r2, r1
 800a560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a566:	f003 0301 	and.w	r3, r3, #1
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00a      	beq.n	800a584 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	430a      	orrs	r2, r1
 800a582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a588:	f003 0302 	and.w	r3, r3, #2
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00a      	beq.n	800a5a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5aa:	f003 0304 	and.w	r3, r3, #4
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00a      	beq.n	800a5c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	430a      	orrs	r2, r1
 800a5c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5cc:	f003 0310 	and.w	r3, r3, #16
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00a      	beq.n	800a5ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ee:	f003 0320 	and.w	r3, r3, #32
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00a      	beq.n	800a60c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	430a      	orrs	r2, r1
 800a60a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a614:	2b00      	cmp	r3, #0
 800a616:	d01a      	beq.n	800a64e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	430a      	orrs	r2, r1
 800a62c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a636:	d10a      	bne.n	800a64e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	430a      	orrs	r2, r1
 800a64c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00a      	beq.n	800a670 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	430a      	orrs	r2, r1
 800a66e:	605a      	str	r2, [r3, #4]
  }
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b098      	sub	sp, #96	@ 0x60
 800a680:	af02      	add	r7, sp, #8
 800a682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a68c:	f7fa fa82 	bl	8004b94 <HAL_GetTick>
 800a690:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0308 	and.w	r3, r3, #8
 800a69c:	2b08      	cmp	r3, #8
 800a69e:	d12f      	bne.n	800a700 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f88e 	bl	800a7d0 <UART_WaitOnFlagUntilTimeout>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d022      	beq.n	800a700 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c2:	e853 3f00 	ldrex	r3, [r3]
 800a6c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6e0:	e841 2300 	strex	r3, r2, [r1]
 800a6e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1e6      	bne.n	800a6ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2220      	movs	r2, #32
 800a6f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e063      	b.n	800a7c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f003 0304 	and.w	r3, r3, #4
 800a70a:	2b04      	cmp	r3, #4
 800a70c:	d149      	bne.n	800a7a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a70e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a716:	2200      	movs	r2, #0
 800a718:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f857 	bl	800a7d0 <UART_WaitOnFlagUntilTimeout>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d03c      	beq.n	800a7a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a730:	e853 3f00 	ldrex	r3, [r3]
 800a734:	623b      	str	r3, [r7, #32]
   return(result);
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a73c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	461a      	mov	r2, r3
 800a744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a746:	633b      	str	r3, [r7, #48]	@ 0x30
 800a748:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a74c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e6      	bne.n	800a728 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	3308      	adds	r3, #8
 800a760:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	e853 3f00 	ldrex	r3, [r3]
 800a768:	60fb      	str	r3, [r7, #12]
   return(result);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f023 0301 	bic.w	r3, r3, #1
 800a770:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3308      	adds	r3, #8
 800a778:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a77a:	61fa      	str	r2, [r7, #28]
 800a77c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77e:	69b9      	ldr	r1, [r7, #24]
 800a780:	69fa      	ldr	r2, [r7, #28]
 800a782:	e841 2300 	strex	r3, r2, [r1]
 800a786:	617b      	str	r3, [r7, #20]
   return(result);
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d1e5      	bne.n	800a75a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2220      	movs	r2, #32
 800a792:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e012      	b.n	800a7c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2220      	movs	r2, #32
 800a7a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2220      	movs	r2, #32
 800a7ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3758      	adds	r7, #88	@ 0x58
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	603b      	str	r3, [r7, #0]
 800a7dc:	4613      	mov	r3, r2
 800a7de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7e0:	e04f      	b.n	800a882 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e8:	d04b      	beq.n	800a882 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7ea:	f7fa f9d3 	bl	8004b94 <HAL_GetTick>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	69ba      	ldr	r2, [r7, #24]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d302      	bcc.n	800a800 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d101      	bne.n	800a804 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a800:	2303      	movs	r3, #3
 800a802:	e04e      	b.n	800a8a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 0304 	and.w	r3, r3, #4
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d037      	beq.n	800a882 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	2b80      	cmp	r3, #128	@ 0x80
 800a816:	d034      	beq.n	800a882 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	2b40      	cmp	r3, #64	@ 0x40
 800a81c:	d031      	beq.n	800a882 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	69db      	ldr	r3, [r3, #28]
 800a824:	f003 0308 	and.w	r3, r3, #8
 800a828:	2b08      	cmp	r3, #8
 800a82a:	d110      	bne.n	800a84e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2208      	movs	r2, #8
 800a832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f000 f920 	bl	800aa7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2208      	movs	r2, #8
 800a83e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e029      	b.n	800a8a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	69db      	ldr	r3, [r3, #28]
 800a854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a85c:	d111      	bne.n	800a882 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f000 f906 	bl	800aa7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2220      	movs	r2, #32
 800a872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a87e:	2303      	movs	r3, #3
 800a880:	e00f      	b.n	800a8a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	69da      	ldr	r2, [r3, #28]
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	4013      	ands	r3, r2
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	429a      	cmp	r2, r3
 800a890:	bf0c      	ite	eq
 800a892:	2301      	moveq	r3, #1
 800a894:	2300      	movne	r3, #0
 800a896:	b2db      	uxtb	r3, r3
 800a898:	461a      	mov	r2, r3
 800a89a:	79fb      	ldrb	r3, [r7, #7]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d0a0      	beq.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
	...

0800a8ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b096      	sub	sp, #88	@ 0x58
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	88fa      	ldrh	r2, [r7, #6]
 800a8c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2222      	movs	r2, #34	@ 0x22
 800a8d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d02d      	beq.n	800a93e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8e8:	4a40      	ldr	r2, [pc, #256]	@ (800a9ec <UART_Start_Receive_DMA+0x140>)
 800a8ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8f2:	4a3f      	ldr	r2, [pc, #252]	@ (800a9f0 <UART_Start_Receive_DMA+0x144>)
 800a8f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8fc:	4a3d      	ldr	r2, [pc, #244]	@ (800a9f4 <UART_Start_Receive_DMA+0x148>)
 800a8fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a906:	2200      	movs	r2, #0
 800a908:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3324      	adds	r3, #36	@ 0x24
 800a916:	4619      	mov	r1, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a91c:	461a      	mov	r2, r3
 800a91e:	88fb      	ldrh	r3, [r7, #6]
 800a920:	f7fa fafc 	bl	8004f1c <HAL_DMA_Start_IT>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d009      	beq.n	800a93e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2210      	movs	r2, #16
 800a92e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2220      	movs	r2, #32
 800a936:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e051      	b.n	800a9e2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d018      	beq.n	800a978 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a94e:	e853 3f00 	ldrex	r3, [r3]
 800a952:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a95a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	461a      	mov	r2, r3
 800a962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a964:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a966:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a968:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a96a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a96c:	e841 2300 	strex	r3, r2, [r1]
 800a970:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e6      	bne.n	800a946 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	3308      	adds	r3, #8
 800a97e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a982:	e853 3f00 	ldrex	r3, [r3]
 800a986:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98a:	f043 0301 	orr.w	r3, r3, #1
 800a98e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3308      	adds	r3, #8
 800a996:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a998:	637a      	str	r2, [r7, #52]	@ 0x34
 800a99a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a99e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9a0:	e841 2300 	strex	r3, r2, [r1]
 800a9a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1e5      	bne.n	800a978 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3308      	adds	r3, #8
 800a9b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	e853 3f00 	ldrex	r3, [r3]
 800a9ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	3308      	adds	r3, #8
 800a9ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a9cc:	623a      	str	r2, [r7, #32]
 800a9ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d0:	69f9      	ldr	r1, [r7, #28]
 800a9d2:	6a3a      	ldr	r2, [r7, #32]
 800a9d4:	e841 2300 	strex	r3, r2, [r1]
 800a9d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1e5      	bne.n	800a9ac <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3758      	adds	r7, #88	@ 0x58
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	0800ac05 	.word	0x0800ac05
 800a9f0:	0800ad39 	.word	0x0800ad39
 800a9f4:	0800ad7f 	.word	0x0800ad7f

0800a9f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b08f      	sub	sp, #60	@ 0x3c
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa06:	6a3b      	ldr	r3, [r7, #32]
 800aa08:	e853 3f00 	ldrex	r3, [r3]
 800aa0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800aa14:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa20:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa26:	e841 2300 	strex	r3, r2, [r1]
 800aa2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1e6      	bne.n	800aa00 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	3308      	adds	r3, #8
 800aa38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	e853 3f00 	ldrex	r3, [r3]
 800aa40:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aa48:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	3308      	adds	r3, #8
 800aa50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa52:	61ba      	str	r2, [r7, #24]
 800aa54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa56:	6979      	ldr	r1, [r7, #20]
 800aa58:	69ba      	ldr	r2, [r7, #24]
 800aa5a:	e841 2300 	strex	r3, r2, [r1]
 800aa5e:	613b      	str	r3, [r7, #16]
   return(result);
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1e5      	bne.n	800aa32 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2220      	movs	r2, #32
 800aa6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800aa6e:	bf00      	nop
 800aa70:	373c      	adds	r7, #60	@ 0x3c
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	b095      	sub	sp, #84	@ 0x54
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa8a:	e853 3f00 	ldrex	r3, [r3]
 800aa8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aaa0:	643b      	str	r3, [r7, #64]	@ 0x40
 800aaa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aaa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aaa8:	e841 2300 	strex	r3, r2, [r1]
 800aaac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aaae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1e6      	bne.n	800aa82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	3308      	adds	r3, #8
 800aaba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aabc:	6a3b      	ldr	r3, [r7, #32]
 800aabe:	e853 3f00 	ldrex	r3, [r3]
 800aac2:	61fb      	str	r3, [r7, #28]
   return(result);
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aaca:	f023 0301 	bic.w	r3, r3, #1
 800aace:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3308      	adds	r3, #8
 800aad6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aad8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aada:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aadc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aae0:	e841 2300 	strex	r3, r2, [r1]
 800aae4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1e3      	bne.n	800aab4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d118      	bne.n	800ab26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	e853 3f00 	ldrex	r3, [r3]
 800ab00:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	f023 0310 	bic.w	r3, r3, #16
 800ab08:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab12:	61bb      	str	r3, [r7, #24]
 800ab14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab16:	6979      	ldr	r1, [r7, #20]
 800ab18:	69ba      	ldr	r2, [r7, #24]
 800ab1a:	e841 2300 	strex	r3, r2, [r1]
 800ab1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1e6      	bne.n	800aaf4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2220      	movs	r2, #32
 800ab2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ab3a:	bf00      	nop
 800ab3c:	3754      	adds	r7, #84	@ 0x54
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b090      	sub	sp, #64	@ 0x40
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab52:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f003 0320 	and.w	r3, r3, #32
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d137      	bne.n	800abd2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ab62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab64:	2200      	movs	r2, #0
 800ab66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	3308      	adds	r3, #8
 800ab70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab74:	e853 3f00 	ldrex	r3, [r3]
 800ab78:	623b      	str	r3, [r7, #32]
   return(result);
 800ab7a:	6a3b      	ldr	r3, [r7, #32]
 800ab7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab80:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ab82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	3308      	adds	r3, #8
 800ab88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab8a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab92:	e841 2300 	strex	r3, r2, [r1]
 800ab96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1e5      	bne.n	800ab6a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	e853 3f00 	ldrex	r3, [r3]
 800abaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800abb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	461a      	mov	r2, r3
 800abba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abbc:	61fb      	str	r3, [r7, #28]
 800abbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc0:	69b9      	ldr	r1, [r7, #24]
 800abc2:	69fa      	ldr	r2, [r7, #28]
 800abc4:	e841 2300 	strex	r3, r2, [r1]
 800abc8:	617b      	str	r3, [r7, #20]
   return(result);
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1e6      	bne.n	800ab9e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abd0:	e004      	b.n	800abdc <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800abd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800abd8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800abda:	4798      	blx	r3
}
 800abdc:	bf00      	nop
 800abde:	3740      	adds	r7, #64	@ 0x40
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abfc:	bf00      	nop
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b09c      	sub	sp, #112	@ 0x70
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac10:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0320 	and.w	r3, r3, #32
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d171      	bne.n	800ad04 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ac20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac22:	2200      	movs	r2, #0
 800ac24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac30:	e853 3f00 	ldrex	r3, [r3]
 800ac34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ac36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	461a      	mov	r2, r3
 800ac44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac46:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ac4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac4e:	e841 2300 	strex	r3, r2, [r1]
 800ac52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ac54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1e6      	bne.n	800ac28 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	3308      	adds	r3, #8
 800ac60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac64:	e853 3f00 	ldrex	r3, [r3]
 800ac68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac6c:	f023 0301 	bic.w	r3, r3, #1
 800ac70:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	3308      	adds	r3, #8
 800ac78:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ac7a:	647a      	str	r2, [r7, #68]	@ 0x44
 800ac7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac82:	e841 2300 	strex	r3, r2, [r1]
 800ac86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1e5      	bne.n	800ac5a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3308      	adds	r3, #8
 800ac94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac98:	e853 3f00 	ldrex	r3, [r3]
 800ac9c:	623b      	str	r3, [r7, #32]
   return(result);
 800ac9e:	6a3b      	ldr	r3, [r7, #32]
 800aca0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aca4:	663b      	str	r3, [r7, #96]	@ 0x60
 800aca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3308      	adds	r3, #8
 800acac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800acae:	633a      	str	r2, [r7, #48]	@ 0x30
 800acb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acb6:	e841 2300 	strex	r3, r2, [r1]
 800acba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800acbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1e5      	bne.n	800ac8e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800acc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acc4:	2220      	movs	r2, #32
 800acc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800accc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d118      	bne.n	800ad04 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	e853 3f00 	ldrex	r3, [r3]
 800acde:	60fb      	str	r3, [r7, #12]
   return(result);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f023 0310 	bic.w	r3, r3, #16
 800ace6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ace8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	461a      	mov	r2, r3
 800acee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acf0:	61fb      	str	r3, [r7, #28]
 800acf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf4:	69b9      	ldr	r1, [r7, #24]
 800acf6:	69fa      	ldr	r2, [r7, #28]
 800acf8:	e841 2300 	strex	r3, r2, [r1]
 800acfc:	617b      	str	r3, [r7, #20]
   return(result);
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1e6      	bne.n	800acd2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad06:	2200      	movs	r2, #0
 800ad08:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d109      	bne.n	800ad26 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800ad12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ad18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ad1a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ad1e:	4611      	mov	r1, r2
 800ad20:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ad22:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad24:	e004      	b.n	800ad30 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800ad26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ad2c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ad2e:	4798      	blx	r3
}
 800ad30:	bf00      	nop
 800ad32:	3770      	adds	r7, #112	@ 0x70
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad44:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d10b      	bne.n	800ad6c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ad60:	0852      	lsrs	r2, r2, #1
 800ad62:	b292      	uxth	r2, r2
 800ad64:	4611      	mov	r1, r2
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad6a:	e004      	b.n	800ad76 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	4798      	blx	r3
}
 800ad76:	bf00      	nop
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b086      	sub	sp, #24
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad8a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad92:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad9a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ada6:	2b80      	cmp	r3, #128	@ 0x80
 800ada8:	d109      	bne.n	800adbe <UART_DMAError+0x40>
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	2b21      	cmp	r3, #33	@ 0x21
 800adae:	d106      	bne.n	800adbe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800adb8:	6978      	ldr	r0, [r7, #20]
 800adba:	f7ff fe1d 	bl	800a9f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adc8:	2b40      	cmp	r3, #64	@ 0x40
 800adca:	d109      	bne.n	800ade0 <UART_DMAError+0x62>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b22      	cmp	r3, #34	@ 0x22
 800add0:	d106      	bne.n	800ade0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	2200      	movs	r2, #0
 800add6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800adda:	6978      	ldr	r0, [r7, #20]
 800addc:	f7ff fe4d 	bl	800aa7a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ade6:	f043 0210 	orr.w	r2, r3, #16
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800adf6:	6978      	ldr	r0, [r7, #20]
 800adf8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adfa:	bf00      	nop
 800adfc:	3718      	adds	r7, #24
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b084      	sub	sp, #16
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae22:	bf00      	nop
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b088      	sub	sp, #32
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	e853 3f00 	ldrex	r3, [r3]
 800ae3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae46:	61fb      	str	r3, [r7, #28]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	61bb      	str	r3, [r7, #24]
 800ae52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae54:	6979      	ldr	r1, [r7, #20]
 800ae56:	69ba      	ldr	r2, [r7, #24]
 800ae58:	e841 2300 	strex	r3, r2, [r1]
 800ae5c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1e6      	bne.n	800ae32 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2220      	movs	r2, #32
 800ae68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae7c:	bf00      	nop
 800ae7e:	3720      	adds	r7, #32
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae8c:	bf00      	nop
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aea0:	bf00      	nop
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aeb4:	bf00      	nop
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d101      	bne.n	800aed6 <HAL_UARTEx_DisableFifoMode+0x16>
 800aed2:	2302      	movs	r3, #2
 800aed4:	e027      	b.n	800af26 <HAL_UARTEx_DisableFifoMode+0x66>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2224      	movs	r2, #36	@ 0x24
 800aee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f022 0201 	bic.w	r2, r2, #1
 800aefc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800af04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2220      	movs	r2, #32
 800af18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b084      	sub	sp, #16
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af42:	2b01      	cmp	r3, #1
 800af44:	d101      	bne.n	800af4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af46:	2302      	movs	r3, #2
 800af48:	e02d      	b.n	800afa6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2224      	movs	r2, #36	@ 0x24
 800af56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f022 0201 	bic.w	r2, r2, #1
 800af70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	683a      	ldr	r2, [r7, #0]
 800af82:	430a      	orrs	r2, r1
 800af84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f850 	bl	800b02c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2220      	movs	r2, #32
 800af98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b084      	sub	sp, #16
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d101      	bne.n	800afc6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800afc2:	2302      	movs	r3, #2
 800afc4:	e02d      	b.n	800b022 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2201      	movs	r2, #1
 800afca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2224      	movs	r2, #36	@ 0x24
 800afd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f022 0201 	bic.w	r2, r2, #1
 800afec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	430a      	orrs	r2, r1
 800b000:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f812 	bl	800b02c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2220      	movs	r2, #32
 800b014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
	...

0800b02c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d108      	bne.n	800b04e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b04c:	e031      	b.n	800b0b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b04e:	2308      	movs	r3, #8
 800b050:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b052:	2308      	movs	r3, #8
 800b054:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	0e5b      	lsrs	r3, r3, #25
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	f003 0307 	and.w	r3, r3, #7
 800b064:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	0f5b      	lsrs	r3, r3, #29
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	f003 0307 	and.w	r3, r3, #7
 800b074:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b076:	7bbb      	ldrb	r3, [r7, #14]
 800b078:	7b3a      	ldrb	r2, [r7, #12]
 800b07a:	4911      	ldr	r1, [pc, #68]	@ (800b0c0 <UARTEx_SetNbDataToProcess+0x94>)
 800b07c:	5c8a      	ldrb	r2, [r1, r2]
 800b07e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b082:	7b3a      	ldrb	r2, [r7, #12]
 800b084:	490f      	ldr	r1, [pc, #60]	@ (800b0c4 <UARTEx_SetNbDataToProcess+0x98>)
 800b086:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b088:	fb93 f3f2 	sdiv	r3, r3, r2
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b094:	7bfb      	ldrb	r3, [r7, #15]
 800b096:	7b7a      	ldrb	r2, [r7, #13]
 800b098:	4909      	ldr	r1, [pc, #36]	@ (800b0c0 <UARTEx_SetNbDataToProcess+0x94>)
 800b09a:	5c8a      	ldrb	r2, [r1, r2]
 800b09c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0a0:	7b7a      	ldrb	r2, [r7, #13]
 800b0a2:	4908      	ldr	r1, [pc, #32]	@ (800b0c4 <UARTEx_SetNbDataToProcess+0x98>)
 800b0a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b0b2:	bf00      	nop
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	0800bcd8 	.word	0x0800bcd8
 800b0c4:	0800bce0 	.word	0x0800bce0

0800b0c8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	ed93 7a06 	vldr	s14, [r3, #24]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	edd3 7a07 	vldr	s15, [r3, #28]
 800b0de:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	edd3 7a08 	vldr	s15, [r3, #32]
 800b0e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	edd3 7a06 	vldr	s15, [r3, #24]
 800b0f8:	eeb1 7a67 	vneg.f32	s14, s15
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	edd3 7a08 	vldr	s15, [r3, #32]
 800b102:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a1a      	ldr	r2, [r3, #32]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d006      	beq.n	800b12c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	330c      	adds	r3, #12
 800b122:	220c      	movs	r2, #12
 800b124:	2100      	movs	r1, #0
 800b126:	4618      	mov	r0, r3
 800b128:	f000 f804 	bl	800b134 <memset>
  }

}
 800b12c:	bf00      	nop
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <memset>:
 800b134:	4402      	add	r2, r0
 800b136:	4603      	mov	r3, r0
 800b138:	4293      	cmp	r3, r2
 800b13a:	d100      	bne.n	800b13e <memset+0xa>
 800b13c:	4770      	bx	lr
 800b13e:	f803 1b01 	strb.w	r1, [r3], #1
 800b142:	e7f9      	b.n	800b138 <memset+0x4>

0800b144 <__libc_init_array>:
 800b144:	b570      	push	{r4, r5, r6, lr}
 800b146:	4d0d      	ldr	r5, [pc, #52]	@ (800b17c <__libc_init_array+0x38>)
 800b148:	4c0d      	ldr	r4, [pc, #52]	@ (800b180 <__libc_init_array+0x3c>)
 800b14a:	1b64      	subs	r4, r4, r5
 800b14c:	10a4      	asrs	r4, r4, #2
 800b14e:	2600      	movs	r6, #0
 800b150:	42a6      	cmp	r6, r4
 800b152:	d109      	bne.n	800b168 <__libc_init_array+0x24>
 800b154:	4d0b      	ldr	r5, [pc, #44]	@ (800b184 <__libc_init_array+0x40>)
 800b156:	4c0c      	ldr	r4, [pc, #48]	@ (800b188 <__libc_init_array+0x44>)
 800b158:	f000 fd9a 	bl	800bc90 <_init>
 800b15c:	1b64      	subs	r4, r4, r5
 800b15e:	10a4      	asrs	r4, r4, #2
 800b160:	2600      	movs	r6, #0
 800b162:	42a6      	cmp	r6, r4
 800b164:	d105      	bne.n	800b172 <__libc_init_array+0x2e>
 800b166:	bd70      	pop	{r4, r5, r6, pc}
 800b168:	f855 3b04 	ldr.w	r3, [r5], #4
 800b16c:	4798      	blx	r3
 800b16e:	3601      	adds	r6, #1
 800b170:	e7ee      	b.n	800b150 <__libc_init_array+0xc>
 800b172:	f855 3b04 	ldr.w	r3, [r5], #4
 800b176:	4798      	blx	r3
 800b178:	3601      	adds	r6, #1
 800b17a:	e7f2      	b.n	800b162 <__libc_init_array+0x1e>
 800b17c:	0800c0c0 	.word	0x0800c0c0
 800b180:	0800c0c0 	.word	0x0800c0c0
 800b184:	0800c0c0 	.word	0x0800c0c0
 800b188:	0800c0c4 	.word	0x0800c0c4

0800b18c <memcpy>:
 800b18c:	440a      	add	r2, r1
 800b18e:	4291      	cmp	r1, r2
 800b190:	f100 33ff 	add.w	r3, r0, #4294967295
 800b194:	d100      	bne.n	800b198 <memcpy+0xc>
 800b196:	4770      	bx	lr
 800b198:	b510      	push	{r4, lr}
 800b19a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b19e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1a2:	4291      	cmp	r1, r2
 800b1a4:	d1f9      	bne.n	800b19a <memcpy+0xe>
 800b1a6:	bd10      	pop	{r4, pc}

0800b1a8 <cosf>:
 800b1a8:	ee10 3a10 	vmov	r3, s0
 800b1ac:	b507      	push	{r0, r1, r2, lr}
 800b1ae:	4a1e      	ldr	r2, [pc, #120]	@ (800b228 <cosf+0x80>)
 800b1b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d806      	bhi.n	800b1c6 <cosf+0x1e>
 800b1b8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b22c <cosf+0x84>
 800b1bc:	b003      	add	sp, #12
 800b1be:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1c2:	f000 b87b 	b.w	800b2bc <__kernel_cosf>
 800b1c6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b1ca:	d304      	bcc.n	800b1d6 <cosf+0x2e>
 800b1cc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b1d0:	b003      	add	sp, #12
 800b1d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1d6:	4668      	mov	r0, sp
 800b1d8:	f000 f910 	bl	800b3fc <__ieee754_rem_pio2f>
 800b1dc:	f000 0003 	and.w	r0, r0, #3
 800b1e0:	2801      	cmp	r0, #1
 800b1e2:	d009      	beq.n	800b1f8 <cosf+0x50>
 800b1e4:	2802      	cmp	r0, #2
 800b1e6:	d010      	beq.n	800b20a <cosf+0x62>
 800b1e8:	b9b0      	cbnz	r0, 800b218 <cosf+0x70>
 800b1ea:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1ee:	ed9d 0a00 	vldr	s0, [sp]
 800b1f2:	f000 f863 	bl	800b2bc <__kernel_cosf>
 800b1f6:	e7eb      	b.n	800b1d0 <cosf+0x28>
 800b1f8:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1fc:	ed9d 0a00 	vldr	s0, [sp]
 800b200:	f000 f8b4 	bl	800b36c <__kernel_sinf>
 800b204:	eeb1 0a40 	vneg.f32	s0, s0
 800b208:	e7e2      	b.n	800b1d0 <cosf+0x28>
 800b20a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b20e:	ed9d 0a00 	vldr	s0, [sp]
 800b212:	f000 f853 	bl	800b2bc <__kernel_cosf>
 800b216:	e7f5      	b.n	800b204 <cosf+0x5c>
 800b218:	eddd 0a01 	vldr	s1, [sp, #4]
 800b21c:	ed9d 0a00 	vldr	s0, [sp]
 800b220:	2001      	movs	r0, #1
 800b222:	f000 f8a3 	bl	800b36c <__kernel_sinf>
 800b226:	e7d3      	b.n	800b1d0 <cosf+0x28>
 800b228:	3f490fd8 	.word	0x3f490fd8
 800b22c:	00000000 	.word	0x00000000

0800b230 <sinf>:
 800b230:	ee10 3a10 	vmov	r3, s0
 800b234:	b507      	push	{r0, r1, r2, lr}
 800b236:	4a1f      	ldr	r2, [pc, #124]	@ (800b2b4 <sinf+0x84>)
 800b238:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d807      	bhi.n	800b250 <sinf+0x20>
 800b240:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b2b8 <sinf+0x88>
 800b244:	2000      	movs	r0, #0
 800b246:	b003      	add	sp, #12
 800b248:	f85d eb04 	ldr.w	lr, [sp], #4
 800b24c:	f000 b88e 	b.w	800b36c <__kernel_sinf>
 800b250:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b254:	d304      	bcc.n	800b260 <sinf+0x30>
 800b256:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b25a:	b003      	add	sp, #12
 800b25c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b260:	4668      	mov	r0, sp
 800b262:	f000 f8cb 	bl	800b3fc <__ieee754_rem_pio2f>
 800b266:	f000 0003 	and.w	r0, r0, #3
 800b26a:	2801      	cmp	r0, #1
 800b26c:	d00a      	beq.n	800b284 <sinf+0x54>
 800b26e:	2802      	cmp	r0, #2
 800b270:	d00f      	beq.n	800b292 <sinf+0x62>
 800b272:	b9c0      	cbnz	r0, 800b2a6 <sinf+0x76>
 800b274:	eddd 0a01 	vldr	s1, [sp, #4]
 800b278:	ed9d 0a00 	vldr	s0, [sp]
 800b27c:	2001      	movs	r0, #1
 800b27e:	f000 f875 	bl	800b36c <__kernel_sinf>
 800b282:	e7ea      	b.n	800b25a <sinf+0x2a>
 800b284:	eddd 0a01 	vldr	s1, [sp, #4]
 800b288:	ed9d 0a00 	vldr	s0, [sp]
 800b28c:	f000 f816 	bl	800b2bc <__kernel_cosf>
 800b290:	e7e3      	b.n	800b25a <sinf+0x2a>
 800b292:	eddd 0a01 	vldr	s1, [sp, #4]
 800b296:	ed9d 0a00 	vldr	s0, [sp]
 800b29a:	2001      	movs	r0, #1
 800b29c:	f000 f866 	bl	800b36c <__kernel_sinf>
 800b2a0:	eeb1 0a40 	vneg.f32	s0, s0
 800b2a4:	e7d9      	b.n	800b25a <sinf+0x2a>
 800b2a6:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2aa:	ed9d 0a00 	vldr	s0, [sp]
 800b2ae:	f000 f805 	bl	800b2bc <__kernel_cosf>
 800b2b2:	e7f5      	b.n	800b2a0 <sinf+0x70>
 800b2b4:	3f490fd8 	.word	0x3f490fd8
 800b2b8:	00000000 	.word	0x00000000

0800b2bc <__kernel_cosf>:
 800b2bc:	ee10 3a10 	vmov	r3, s0
 800b2c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2c4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b2c8:	eef0 6a40 	vmov.f32	s13, s0
 800b2cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b2d0:	d204      	bcs.n	800b2dc <__kernel_cosf+0x20>
 800b2d2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b2d6:	ee17 2a90 	vmov	r2, s15
 800b2da:	b342      	cbz	r2, 800b32e <__kernel_cosf+0x72>
 800b2dc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b2e0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b34c <__kernel_cosf+0x90>
 800b2e4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b350 <__kernel_cosf+0x94>
 800b2e8:	4a1a      	ldr	r2, [pc, #104]	@ (800b354 <__kernel_cosf+0x98>)
 800b2ea:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b358 <__kernel_cosf+0x9c>
 800b2f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b2f8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b35c <__kernel_cosf+0xa0>
 800b2fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b300:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b360 <__kernel_cosf+0xa4>
 800b304:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b308:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b364 <__kernel_cosf+0xa8>
 800b30c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b310:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b314:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b318:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b31c:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b320:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b324:	d804      	bhi.n	800b330 <__kernel_cosf+0x74>
 800b326:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b32a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b32e:	4770      	bx	lr
 800b330:	4a0d      	ldr	r2, [pc, #52]	@ (800b368 <__kernel_cosf+0xac>)
 800b332:	4293      	cmp	r3, r2
 800b334:	bf9a      	itte	ls
 800b336:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b33a:	ee07 3a10 	vmovls	s14, r3
 800b33e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b342:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b346:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b34a:	e7ec      	b.n	800b326 <__kernel_cosf+0x6a>
 800b34c:	ad47d74e 	.word	0xad47d74e
 800b350:	310f74f6 	.word	0x310f74f6
 800b354:	3e999999 	.word	0x3e999999
 800b358:	b493f27c 	.word	0xb493f27c
 800b35c:	37d00d01 	.word	0x37d00d01
 800b360:	bab60b61 	.word	0xbab60b61
 800b364:	3d2aaaab 	.word	0x3d2aaaab
 800b368:	3f480000 	.word	0x3f480000

0800b36c <__kernel_sinf>:
 800b36c:	ee10 3a10 	vmov	r3, s0
 800b370:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b374:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b378:	d204      	bcs.n	800b384 <__kernel_sinf+0x18>
 800b37a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b37e:	ee17 3a90 	vmov	r3, s15
 800b382:	b35b      	cbz	r3, 800b3dc <__kernel_sinf+0x70>
 800b384:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b388:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b3e0 <__kernel_sinf+0x74>
 800b38c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b3e4 <__kernel_sinf+0x78>
 800b390:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b394:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b3e8 <__kernel_sinf+0x7c>
 800b398:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b39c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b3ec <__kernel_sinf+0x80>
 800b3a0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b3a4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b3f0 <__kernel_sinf+0x84>
 800b3a8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b3ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b3b0:	b930      	cbnz	r0, 800b3c0 <__kernel_sinf+0x54>
 800b3b2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b3f4 <__kernel_sinf+0x88>
 800b3b6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b3ba:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b3be:	4770      	bx	lr
 800b3c0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b3c4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b3c8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b3cc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b3d0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b3f8 <__kernel_sinf+0x8c>
 800b3d4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b3d8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	2f2ec9d3 	.word	0x2f2ec9d3
 800b3e4:	b2d72f34 	.word	0xb2d72f34
 800b3e8:	3638ef1b 	.word	0x3638ef1b
 800b3ec:	b9500d01 	.word	0xb9500d01
 800b3f0:	3c088889 	.word	0x3c088889
 800b3f4:	be2aaaab 	.word	0xbe2aaaab
 800b3f8:	3e2aaaab 	.word	0x3e2aaaab

0800b3fc <__ieee754_rem_pio2f>:
 800b3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3fe:	ee10 6a10 	vmov	r6, s0
 800b402:	4b88      	ldr	r3, [pc, #544]	@ (800b624 <__ieee754_rem_pio2f+0x228>)
 800b404:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b408:	429d      	cmp	r5, r3
 800b40a:	b087      	sub	sp, #28
 800b40c:	4604      	mov	r4, r0
 800b40e:	d805      	bhi.n	800b41c <__ieee754_rem_pio2f+0x20>
 800b410:	2300      	movs	r3, #0
 800b412:	ed80 0a00 	vstr	s0, [r0]
 800b416:	6043      	str	r3, [r0, #4]
 800b418:	2000      	movs	r0, #0
 800b41a:	e022      	b.n	800b462 <__ieee754_rem_pio2f+0x66>
 800b41c:	4b82      	ldr	r3, [pc, #520]	@ (800b628 <__ieee754_rem_pio2f+0x22c>)
 800b41e:	429d      	cmp	r5, r3
 800b420:	d83a      	bhi.n	800b498 <__ieee754_rem_pio2f+0x9c>
 800b422:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b426:	2e00      	cmp	r6, #0
 800b428:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b62c <__ieee754_rem_pio2f+0x230>
 800b42c:	4a80      	ldr	r2, [pc, #512]	@ (800b630 <__ieee754_rem_pio2f+0x234>)
 800b42e:	f023 030f 	bic.w	r3, r3, #15
 800b432:	dd18      	ble.n	800b466 <__ieee754_rem_pio2f+0x6a>
 800b434:	4293      	cmp	r3, r2
 800b436:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b43a:	bf09      	itett	eq
 800b43c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b634 <__ieee754_rem_pio2f+0x238>
 800b440:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b638 <__ieee754_rem_pio2f+0x23c>
 800b444:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b63c <__ieee754_rem_pio2f+0x240>
 800b448:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b44c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b454:	ed80 7a00 	vstr	s14, [r0]
 800b458:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b45c:	edc0 7a01 	vstr	s15, [r0, #4]
 800b460:	2001      	movs	r0, #1
 800b462:	b007      	add	sp, #28
 800b464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b466:	4293      	cmp	r3, r2
 800b468:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b46c:	bf09      	itett	eq
 800b46e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b634 <__ieee754_rem_pio2f+0x238>
 800b472:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b638 <__ieee754_rem_pio2f+0x23c>
 800b476:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b63c <__ieee754_rem_pio2f+0x240>
 800b47a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b47e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b486:	ed80 7a00 	vstr	s14, [r0]
 800b48a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b48e:	edc0 7a01 	vstr	s15, [r0, #4]
 800b492:	f04f 30ff 	mov.w	r0, #4294967295
 800b496:	e7e4      	b.n	800b462 <__ieee754_rem_pio2f+0x66>
 800b498:	4b69      	ldr	r3, [pc, #420]	@ (800b640 <__ieee754_rem_pio2f+0x244>)
 800b49a:	429d      	cmp	r5, r3
 800b49c:	d873      	bhi.n	800b586 <__ieee754_rem_pio2f+0x18a>
 800b49e:	f000 f8dd 	bl	800b65c <fabsf>
 800b4a2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b644 <__ieee754_rem_pio2f+0x248>
 800b4a6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b4aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b4ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b4b6:	ee17 0a90 	vmov	r0, s15
 800b4ba:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b62c <__ieee754_rem_pio2f+0x230>
 800b4be:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b4c2:	281f      	cmp	r0, #31
 800b4c4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b638 <__ieee754_rem_pio2f+0x23c>
 800b4c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4cc:	eeb1 6a47 	vneg.f32	s12, s14
 800b4d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b4d4:	ee16 1a90 	vmov	r1, s13
 800b4d8:	dc09      	bgt.n	800b4ee <__ieee754_rem_pio2f+0xf2>
 800b4da:	4a5b      	ldr	r2, [pc, #364]	@ (800b648 <__ieee754_rem_pio2f+0x24c>)
 800b4dc:	1e47      	subs	r7, r0, #1
 800b4de:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b4e2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b4e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d107      	bne.n	800b4fe <__ieee754_rem_pio2f+0x102>
 800b4ee:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b4f2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b4f6:	2a08      	cmp	r2, #8
 800b4f8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b4fc:	dc14      	bgt.n	800b528 <__ieee754_rem_pio2f+0x12c>
 800b4fe:	6021      	str	r1, [r4, #0]
 800b500:	ed94 7a00 	vldr	s14, [r4]
 800b504:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b508:	2e00      	cmp	r6, #0
 800b50a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b50e:	ed84 0a01 	vstr	s0, [r4, #4]
 800b512:	daa6      	bge.n	800b462 <__ieee754_rem_pio2f+0x66>
 800b514:	eeb1 7a47 	vneg.f32	s14, s14
 800b518:	eeb1 0a40 	vneg.f32	s0, s0
 800b51c:	ed84 7a00 	vstr	s14, [r4]
 800b520:	ed84 0a01 	vstr	s0, [r4, #4]
 800b524:	4240      	negs	r0, r0
 800b526:	e79c      	b.n	800b462 <__ieee754_rem_pio2f+0x66>
 800b528:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b634 <__ieee754_rem_pio2f+0x238>
 800b52c:	eef0 6a40 	vmov.f32	s13, s0
 800b530:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b534:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b538:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b53c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b63c <__ieee754_rem_pio2f+0x240>
 800b540:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b544:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b548:	ee15 2a90 	vmov	r2, s11
 800b54c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b550:	1a5b      	subs	r3, r3, r1
 800b552:	2b19      	cmp	r3, #25
 800b554:	dc04      	bgt.n	800b560 <__ieee754_rem_pio2f+0x164>
 800b556:	edc4 5a00 	vstr	s11, [r4]
 800b55a:	eeb0 0a66 	vmov.f32	s0, s13
 800b55e:	e7cf      	b.n	800b500 <__ieee754_rem_pio2f+0x104>
 800b560:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b64c <__ieee754_rem_pio2f+0x250>
 800b564:	eeb0 0a66 	vmov.f32	s0, s13
 800b568:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b56c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b570:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b650 <__ieee754_rem_pio2f+0x254>
 800b574:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b578:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b57c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b580:	ed84 7a00 	vstr	s14, [r4]
 800b584:	e7bc      	b.n	800b500 <__ieee754_rem_pio2f+0x104>
 800b586:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b58a:	d306      	bcc.n	800b59a <__ieee754_rem_pio2f+0x19e>
 800b58c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b590:	edc0 7a01 	vstr	s15, [r0, #4]
 800b594:	edc0 7a00 	vstr	s15, [r0]
 800b598:	e73e      	b.n	800b418 <__ieee754_rem_pio2f+0x1c>
 800b59a:	15ea      	asrs	r2, r5, #23
 800b59c:	3a86      	subs	r2, #134	@ 0x86
 800b59e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b5a2:	ee07 3a90 	vmov	s15, r3
 800b5a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b5aa:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b654 <__ieee754_rem_pio2f+0x258>
 800b5ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b5b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5b6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b5ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b5be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b5c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b5c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5ca:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b5ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b5d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5da:	edcd 7a05 	vstr	s15, [sp, #20]
 800b5de:	d11e      	bne.n	800b61e <__ieee754_rem_pio2f+0x222>
 800b5e0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5e8:	bf0c      	ite	eq
 800b5ea:	2301      	moveq	r3, #1
 800b5ec:	2302      	movne	r3, #2
 800b5ee:	491a      	ldr	r1, [pc, #104]	@ (800b658 <__ieee754_rem_pio2f+0x25c>)
 800b5f0:	9101      	str	r1, [sp, #4]
 800b5f2:	2102      	movs	r1, #2
 800b5f4:	9100      	str	r1, [sp, #0]
 800b5f6:	a803      	add	r0, sp, #12
 800b5f8:	4621      	mov	r1, r4
 800b5fa:	f000 f89d 	bl	800b738 <__kernel_rem_pio2f>
 800b5fe:	2e00      	cmp	r6, #0
 800b600:	f6bf af2f 	bge.w	800b462 <__ieee754_rem_pio2f+0x66>
 800b604:	edd4 7a00 	vldr	s15, [r4]
 800b608:	eef1 7a67 	vneg.f32	s15, s15
 800b60c:	edc4 7a00 	vstr	s15, [r4]
 800b610:	edd4 7a01 	vldr	s15, [r4, #4]
 800b614:	eef1 7a67 	vneg.f32	s15, s15
 800b618:	edc4 7a01 	vstr	s15, [r4, #4]
 800b61c:	e782      	b.n	800b524 <__ieee754_rem_pio2f+0x128>
 800b61e:	2303      	movs	r3, #3
 800b620:	e7e5      	b.n	800b5ee <__ieee754_rem_pio2f+0x1f2>
 800b622:	bf00      	nop
 800b624:	3f490fd8 	.word	0x3f490fd8
 800b628:	4016cbe3 	.word	0x4016cbe3
 800b62c:	3fc90f80 	.word	0x3fc90f80
 800b630:	3fc90fd0 	.word	0x3fc90fd0
 800b634:	37354400 	.word	0x37354400
 800b638:	37354443 	.word	0x37354443
 800b63c:	2e85a308 	.word	0x2e85a308
 800b640:	43490f80 	.word	0x43490f80
 800b644:	3f22f984 	.word	0x3f22f984
 800b648:	0800bce8 	.word	0x0800bce8
 800b64c:	2e85a300 	.word	0x2e85a300
 800b650:	248d3132 	.word	0x248d3132
 800b654:	43800000 	.word	0x43800000
 800b658:	0800bd68 	.word	0x0800bd68

0800b65c <fabsf>:
 800b65c:	ee10 3a10 	vmov	r3, s0
 800b660:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b664:	ee00 3a10 	vmov	s0, r3
 800b668:	4770      	bx	lr
	...

0800b66c <scalbnf>:
 800b66c:	ee10 3a10 	vmov	r3, s0
 800b670:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b674:	d02b      	beq.n	800b6ce <scalbnf+0x62>
 800b676:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b67a:	d302      	bcc.n	800b682 <scalbnf+0x16>
 800b67c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b680:	4770      	bx	lr
 800b682:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b686:	d123      	bne.n	800b6d0 <scalbnf+0x64>
 800b688:	4b24      	ldr	r3, [pc, #144]	@ (800b71c <scalbnf+0xb0>)
 800b68a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b720 <scalbnf+0xb4>
 800b68e:	4298      	cmp	r0, r3
 800b690:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b694:	db17      	blt.n	800b6c6 <scalbnf+0x5a>
 800b696:	ee10 3a10 	vmov	r3, s0
 800b69a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b69e:	3a19      	subs	r2, #25
 800b6a0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b6a4:	4288      	cmp	r0, r1
 800b6a6:	dd15      	ble.n	800b6d4 <scalbnf+0x68>
 800b6a8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b724 <scalbnf+0xb8>
 800b6ac:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b728 <scalbnf+0xbc>
 800b6b0:	ee10 3a10 	vmov	r3, s0
 800b6b4:	eeb0 7a67 	vmov.f32	s14, s15
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	bfb8      	it	lt
 800b6bc:	eef0 7a66 	vmovlt.f32	s15, s13
 800b6c0:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b6c4:	4770      	bx	lr
 800b6c6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b72c <scalbnf+0xc0>
 800b6ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b6ce:	4770      	bx	lr
 800b6d0:	0dd2      	lsrs	r2, r2, #23
 800b6d2:	e7e5      	b.n	800b6a0 <scalbnf+0x34>
 800b6d4:	4410      	add	r0, r2
 800b6d6:	28fe      	cmp	r0, #254	@ 0xfe
 800b6d8:	dce6      	bgt.n	800b6a8 <scalbnf+0x3c>
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	dd06      	ble.n	800b6ec <scalbnf+0x80>
 800b6de:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b6e2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b6e6:	ee00 3a10 	vmov	s0, r3
 800b6ea:	4770      	bx	lr
 800b6ec:	f110 0f16 	cmn.w	r0, #22
 800b6f0:	da09      	bge.n	800b706 <scalbnf+0x9a>
 800b6f2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b72c <scalbnf+0xc0>
 800b6f6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b730 <scalbnf+0xc4>
 800b6fa:	ee10 3a10 	vmov	r3, s0
 800b6fe:	eeb0 7a67 	vmov.f32	s14, s15
 800b702:	2b00      	cmp	r3, #0
 800b704:	e7d9      	b.n	800b6ba <scalbnf+0x4e>
 800b706:	3019      	adds	r0, #25
 800b708:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b70c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b710:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b734 <scalbnf+0xc8>
 800b714:	ee07 3a90 	vmov	s15, r3
 800b718:	e7d7      	b.n	800b6ca <scalbnf+0x5e>
 800b71a:	bf00      	nop
 800b71c:	ffff3cb0 	.word	0xffff3cb0
 800b720:	4c000000 	.word	0x4c000000
 800b724:	7149f2ca 	.word	0x7149f2ca
 800b728:	f149f2ca 	.word	0xf149f2ca
 800b72c:	0da24260 	.word	0x0da24260
 800b730:	8da24260 	.word	0x8da24260
 800b734:	33000000 	.word	0x33000000

0800b738 <__kernel_rem_pio2f>:
 800b738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b73c:	ed2d 8b04 	vpush	{d8-d9}
 800b740:	b0d9      	sub	sp, #356	@ 0x164
 800b742:	4690      	mov	r8, r2
 800b744:	9001      	str	r0, [sp, #4]
 800b746:	4ab6      	ldr	r2, [pc, #728]	@ (800ba20 <__kernel_rem_pio2f+0x2e8>)
 800b748:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b74a:	f118 0f04 	cmn.w	r8, #4
 800b74e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b752:	460f      	mov	r7, r1
 800b754:	f103 3bff 	add.w	fp, r3, #4294967295
 800b758:	db26      	blt.n	800b7a8 <__kernel_rem_pio2f+0x70>
 800b75a:	f1b8 0203 	subs.w	r2, r8, #3
 800b75e:	bf48      	it	mi
 800b760:	f108 0204 	addmi.w	r2, r8, #4
 800b764:	10d2      	asrs	r2, r2, #3
 800b766:	1c55      	adds	r5, r2, #1
 800b768:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b76a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800ba30 <__kernel_rem_pio2f+0x2f8>
 800b76e:	00e8      	lsls	r0, r5, #3
 800b770:	eba2 060b 	sub.w	r6, r2, fp
 800b774:	9002      	str	r0, [sp, #8]
 800b776:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b77a:	eb0a 0c0b 	add.w	ip, sl, fp
 800b77e:	ac1c      	add	r4, sp, #112	@ 0x70
 800b780:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b784:	2000      	movs	r0, #0
 800b786:	4560      	cmp	r0, ip
 800b788:	dd10      	ble.n	800b7ac <__kernel_rem_pio2f+0x74>
 800b78a:	a91c      	add	r1, sp, #112	@ 0x70
 800b78c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b790:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b794:	2600      	movs	r6, #0
 800b796:	4556      	cmp	r6, sl
 800b798:	dc24      	bgt.n	800b7e4 <__kernel_rem_pio2f+0xac>
 800b79a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b79e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800ba30 <__kernel_rem_pio2f+0x2f8>
 800b7a2:	4684      	mov	ip, r0
 800b7a4:	2400      	movs	r4, #0
 800b7a6:	e016      	b.n	800b7d6 <__kernel_rem_pio2f+0x9e>
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	e7dc      	b.n	800b766 <__kernel_rem_pio2f+0x2e>
 800b7ac:	42c6      	cmn	r6, r0
 800b7ae:	bf5d      	ittte	pl
 800b7b0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b7b4:	ee07 1a90 	vmovpl	s15, r1
 800b7b8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b7bc:	eef0 7a47 	vmovmi.f32	s15, s14
 800b7c0:	ece4 7a01 	vstmia	r4!, {s15}
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	e7de      	b.n	800b786 <__kernel_rem_pio2f+0x4e>
 800b7c8:	ecfe 6a01 	vldmia	lr!, {s13}
 800b7cc:	ed3c 7a01 	vldmdb	ip!, {s14}
 800b7d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b7d4:	3401      	adds	r4, #1
 800b7d6:	455c      	cmp	r4, fp
 800b7d8:	ddf6      	ble.n	800b7c8 <__kernel_rem_pio2f+0x90>
 800b7da:	ece9 7a01 	vstmia	r9!, {s15}
 800b7de:	3601      	adds	r6, #1
 800b7e0:	3004      	adds	r0, #4
 800b7e2:	e7d8      	b.n	800b796 <__kernel_rem_pio2f+0x5e>
 800b7e4:	a908      	add	r1, sp, #32
 800b7e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7ea:	9104      	str	r1, [sp, #16]
 800b7ec:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b7ee:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800ba2c <__kernel_rem_pio2f+0x2f4>
 800b7f2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800ba28 <__kernel_rem_pio2f+0x2f0>
 800b7f6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b7fa:	9203      	str	r2, [sp, #12]
 800b7fc:	4654      	mov	r4, sl
 800b7fe:	00a2      	lsls	r2, r4, #2
 800b800:	9205      	str	r2, [sp, #20]
 800b802:	aa58      	add	r2, sp, #352	@ 0x160
 800b804:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b808:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b80c:	a944      	add	r1, sp, #272	@ 0x110
 800b80e:	aa08      	add	r2, sp, #32
 800b810:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b814:	4694      	mov	ip, r2
 800b816:	4626      	mov	r6, r4
 800b818:	2e00      	cmp	r6, #0
 800b81a:	dc4c      	bgt.n	800b8b6 <__kernel_rem_pio2f+0x17e>
 800b81c:	4628      	mov	r0, r5
 800b81e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b822:	f7ff ff23 	bl	800b66c <scalbnf>
 800b826:	eeb0 8a40 	vmov.f32	s16, s0
 800b82a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b82e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b832:	f000 f9e9 	bl	800bc08 <floorf>
 800b836:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b83a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b83e:	2d00      	cmp	r5, #0
 800b840:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b844:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b848:	ee17 9a90 	vmov	r9, s15
 800b84c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b850:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b854:	dd41      	ble.n	800b8da <__kernel_rem_pio2f+0x1a2>
 800b856:	f104 3cff 	add.w	ip, r4, #4294967295
 800b85a:	a908      	add	r1, sp, #32
 800b85c:	f1c5 0e08 	rsb	lr, r5, #8
 800b860:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b864:	fa46 f00e 	asr.w	r0, r6, lr
 800b868:	4481      	add	r9, r0
 800b86a:	fa00 f00e 	lsl.w	r0, r0, lr
 800b86e:	1a36      	subs	r6, r6, r0
 800b870:	f1c5 0007 	rsb	r0, r5, #7
 800b874:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b878:	4106      	asrs	r6, r0
 800b87a:	2e00      	cmp	r6, #0
 800b87c:	dd3c      	ble.n	800b8f8 <__kernel_rem_pio2f+0x1c0>
 800b87e:	f04f 0e00 	mov.w	lr, #0
 800b882:	f109 0901 	add.w	r9, r9, #1
 800b886:	4670      	mov	r0, lr
 800b888:	4574      	cmp	r4, lr
 800b88a:	dc68      	bgt.n	800b95e <__kernel_rem_pio2f+0x226>
 800b88c:	2d00      	cmp	r5, #0
 800b88e:	dd03      	ble.n	800b898 <__kernel_rem_pio2f+0x160>
 800b890:	2d01      	cmp	r5, #1
 800b892:	d074      	beq.n	800b97e <__kernel_rem_pio2f+0x246>
 800b894:	2d02      	cmp	r5, #2
 800b896:	d07d      	beq.n	800b994 <__kernel_rem_pio2f+0x25c>
 800b898:	2e02      	cmp	r6, #2
 800b89a:	d12d      	bne.n	800b8f8 <__kernel_rem_pio2f+0x1c0>
 800b89c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b8a0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b8a4:	b340      	cbz	r0, 800b8f8 <__kernel_rem_pio2f+0x1c0>
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	9306      	str	r3, [sp, #24]
 800b8aa:	f7ff fedf 	bl	800b66c <scalbnf>
 800b8ae:	9b06      	ldr	r3, [sp, #24]
 800b8b0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b8b4:	e020      	b.n	800b8f8 <__kernel_rem_pio2f+0x1c0>
 800b8b6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b8ba:	3e01      	subs	r6, #1
 800b8bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8c4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b8c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b8cc:	ecac 0a01 	vstmia	ip!, {s0}
 800b8d0:	ed30 0a01 	vldmdb	r0!, {s0}
 800b8d4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b8d8:	e79e      	b.n	800b818 <__kernel_rem_pio2f+0xe0>
 800b8da:	d105      	bne.n	800b8e8 <__kernel_rem_pio2f+0x1b0>
 800b8dc:	1e60      	subs	r0, r4, #1
 800b8de:	a908      	add	r1, sp, #32
 800b8e0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b8e4:	11f6      	asrs	r6, r6, #7
 800b8e6:	e7c8      	b.n	800b87a <__kernel_rem_pio2f+0x142>
 800b8e8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b8ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f4:	da31      	bge.n	800b95a <__kernel_rem_pio2f+0x222>
 800b8f6:	2600      	movs	r6, #0
 800b8f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b900:	f040 8098 	bne.w	800ba34 <__kernel_rem_pio2f+0x2fc>
 800b904:	1e60      	subs	r0, r4, #1
 800b906:	2200      	movs	r2, #0
 800b908:	4550      	cmp	r0, sl
 800b90a:	da4b      	bge.n	800b9a4 <__kernel_rem_pio2f+0x26c>
 800b90c:	2a00      	cmp	r2, #0
 800b90e:	d065      	beq.n	800b9dc <__kernel_rem_pio2f+0x2a4>
 800b910:	3c01      	subs	r4, #1
 800b912:	ab08      	add	r3, sp, #32
 800b914:	3d08      	subs	r5, #8
 800b916:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d0f8      	beq.n	800b910 <__kernel_rem_pio2f+0x1d8>
 800b91e:	4628      	mov	r0, r5
 800b920:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b924:	f7ff fea2 	bl	800b66c <scalbnf>
 800b928:	1c63      	adds	r3, r4, #1
 800b92a:	aa44      	add	r2, sp, #272	@ 0x110
 800b92c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ba2c <__kernel_rem_pio2f+0x2f4>
 800b930:	0099      	lsls	r1, r3, #2
 800b932:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b936:	4623      	mov	r3, r4
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f280 80a9 	bge.w	800ba90 <__kernel_rem_pio2f+0x358>
 800b93e:	4623      	mov	r3, r4
 800b940:	2b00      	cmp	r3, #0
 800b942:	f2c0 80c7 	blt.w	800bad4 <__kernel_rem_pio2f+0x39c>
 800b946:	aa44      	add	r2, sp, #272	@ 0x110
 800b948:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b94c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ba24 <__kernel_rem_pio2f+0x2ec>
 800b950:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ba30 <__kernel_rem_pio2f+0x2f8>
 800b954:	2000      	movs	r0, #0
 800b956:	1ae2      	subs	r2, r4, r3
 800b958:	e0b1      	b.n	800babe <__kernel_rem_pio2f+0x386>
 800b95a:	2602      	movs	r6, #2
 800b95c:	e78f      	b.n	800b87e <__kernel_rem_pio2f+0x146>
 800b95e:	f852 1b04 	ldr.w	r1, [r2], #4
 800b962:	b948      	cbnz	r0, 800b978 <__kernel_rem_pio2f+0x240>
 800b964:	b121      	cbz	r1, 800b970 <__kernel_rem_pio2f+0x238>
 800b966:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b96a:	f842 1c04 	str.w	r1, [r2, #-4]
 800b96e:	2101      	movs	r1, #1
 800b970:	f10e 0e01 	add.w	lr, lr, #1
 800b974:	4608      	mov	r0, r1
 800b976:	e787      	b.n	800b888 <__kernel_rem_pio2f+0x150>
 800b978:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b97c:	e7f5      	b.n	800b96a <__kernel_rem_pio2f+0x232>
 800b97e:	f104 3cff 	add.w	ip, r4, #4294967295
 800b982:	aa08      	add	r2, sp, #32
 800b984:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b988:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b98c:	a908      	add	r1, sp, #32
 800b98e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b992:	e781      	b.n	800b898 <__kernel_rem_pio2f+0x160>
 800b994:	f104 3cff 	add.w	ip, r4, #4294967295
 800b998:	aa08      	add	r2, sp, #32
 800b99a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b99e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b9a2:	e7f3      	b.n	800b98c <__kernel_rem_pio2f+0x254>
 800b9a4:	a908      	add	r1, sp, #32
 800b9a6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b9aa:	3801      	subs	r0, #1
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	e7ab      	b.n	800b908 <__kernel_rem_pio2f+0x1d0>
 800b9b0:	3201      	adds	r2, #1
 800b9b2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b9b6:	2e00      	cmp	r6, #0
 800b9b8:	d0fa      	beq.n	800b9b0 <__kernel_rem_pio2f+0x278>
 800b9ba:	9905      	ldr	r1, [sp, #20]
 800b9bc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b9c0:	eb0d 0001 	add.w	r0, sp, r1
 800b9c4:	18e6      	adds	r6, r4, r3
 800b9c6:	a91c      	add	r1, sp, #112	@ 0x70
 800b9c8:	f104 0c01 	add.w	ip, r4, #1
 800b9cc:	384c      	subs	r0, #76	@ 0x4c
 800b9ce:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800b9d2:	4422      	add	r2, r4
 800b9d4:	4562      	cmp	r2, ip
 800b9d6:	da04      	bge.n	800b9e2 <__kernel_rem_pio2f+0x2aa>
 800b9d8:	4614      	mov	r4, r2
 800b9da:	e710      	b.n	800b7fe <__kernel_rem_pio2f+0xc6>
 800b9dc:	9804      	ldr	r0, [sp, #16]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	e7e7      	b.n	800b9b2 <__kernel_rem_pio2f+0x27a>
 800b9e2:	9903      	ldr	r1, [sp, #12]
 800b9e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b9e8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800b9ec:	9105      	str	r1, [sp, #20]
 800b9ee:	ee07 1a90 	vmov	s15, r1
 800b9f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9f6:	2400      	movs	r4, #0
 800b9f8:	ece6 7a01 	vstmia	r6!, {s15}
 800b9fc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ba30 <__kernel_rem_pio2f+0x2f8>
 800ba00:	46b1      	mov	r9, r6
 800ba02:	455c      	cmp	r4, fp
 800ba04:	dd04      	ble.n	800ba10 <__kernel_rem_pio2f+0x2d8>
 800ba06:	ece0 7a01 	vstmia	r0!, {s15}
 800ba0a:	f10c 0c01 	add.w	ip, ip, #1
 800ba0e:	e7e1      	b.n	800b9d4 <__kernel_rem_pio2f+0x29c>
 800ba10:	ecfe 6a01 	vldmia	lr!, {s13}
 800ba14:	ed39 7a01 	vldmdb	r9!, {s14}
 800ba18:	3401      	adds	r4, #1
 800ba1a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ba1e:	e7f0      	b.n	800ba02 <__kernel_rem_pio2f+0x2ca>
 800ba20:	0800c0ac 	.word	0x0800c0ac
 800ba24:	0800c080 	.word	0x0800c080
 800ba28:	43800000 	.word	0x43800000
 800ba2c:	3b800000 	.word	0x3b800000
 800ba30:	00000000 	.word	0x00000000
 800ba34:	9b02      	ldr	r3, [sp, #8]
 800ba36:	eeb0 0a48 	vmov.f32	s0, s16
 800ba3a:	eba3 0008 	sub.w	r0, r3, r8
 800ba3e:	f7ff fe15 	bl	800b66c <scalbnf>
 800ba42:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ba28 <__kernel_rem_pio2f+0x2f0>
 800ba46:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ba4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4e:	db19      	blt.n	800ba84 <__kernel_rem_pio2f+0x34c>
 800ba50:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800ba2c <__kernel_rem_pio2f+0x2f4>
 800ba54:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ba58:	aa08      	add	r2, sp, #32
 800ba5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba5e:	3508      	adds	r5, #8
 800ba60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba64:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ba68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba6c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba70:	ee10 3a10 	vmov	r3, s0
 800ba74:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba78:	ee17 3a90 	vmov	r3, s15
 800ba7c:	3401      	adds	r4, #1
 800ba7e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba82:	e74c      	b.n	800b91e <__kernel_rem_pio2f+0x1e6>
 800ba84:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba88:	aa08      	add	r2, sp, #32
 800ba8a:	ee10 3a10 	vmov	r3, s0
 800ba8e:	e7f6      	b.n	800ba7e <__kernel_rem_pio2f+0x346>
 800ba90:	a808      	add	r0, sp, #32
 800ba92:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ba96:	9001      	str	r0, [sp, #4]
 800ba98:	ee07 0a90 	vmov	s15, r0
 800ba9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800baa0:	3b01      	subs	r3, #1
 800baa2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800baa6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800baaa:	ed62 7a01 	vstmdb	r2!, {s15}
 800baae:	e743      	b.n	800b938 <__kernel_rem_pio2f+0x200>
 800bab0:	ecfc 6a01 	vldmia	ip!, {s13}
 800bab4:	ecb5 7a01 	vldmia	r5!, {s14}
 800bab8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800babc:	3001      	adds	r0, #1
 800babe:	4550      	cmp	r0, sl
 800bac0:	dc01      	bgt.n	800bac6 <__kernel_rem_pio2f+0x38e>
 800bac2:	4290      	cmp	r0, r2
 800bac4:	ddf4      	ble.n	800bab0 <__kernel_rem_pio2f+0x378>
 800bac6:	a858      	add	r0, sp, #352	@ 0x160
 800bac8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800bacc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800bad0:	3b01      	subs	r3, #1
 800bad2:	e735      	b.n	800b940 <__kernel_rem_pio2f+0x208>
 800bad4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	dc09      	bgt.n	800baee <__kernel_rem_pio2f+0x3b6>
 800bada:	2b00      	cmp	r3, #0
 800badc:	dc27      	bgt.n	800bb2e <__kernel_rem_pio2f+0x3f6>
 800bade:	d040      	beq.n	800bb62 <__kernel_rem_pio2f+0x42a>
 800bae0:	f009 0007 	and.w	r0, r9, #7
 800bae4:	b059      	add	sp, #356	@ 0x164
 800bae6:	ecbd 8b04 	vpop	{d8-d9}
 800baea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baee:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800baf0:	2b03      	cmp	r3, #3
 800baf2:	d1f5      	bne.n	800bae0 <__kernel_rem_pio2f+0x3a8>
 800baf4:	aa30      	add	r2, sp, #192	@ 0xc0
 800baf6:	1f0b      	subs	r3, r1, #4
 800baf8:	4413      	add	r3, r2
 800bafa:	461a      	mov	r2, r3
 800bafc:	4620      	mov	r0, r4
 800bafe:	2800      	cmp	r0, #0
 800bb00:	dc50      	bgt.n	800bba4 <__kernel_rem_pio2f+0x46c>
 800bb02:	4622      	mov	r2, r4
 800bb04:	2a01      	cmp	r2, #1
 800bb06:	dc5d      	bgt.n	800bbc4 <__kernel_rem_pio2f+0x48c>
 800bb08:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb0a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800ba30 <__kernel_rem_pio2f+0x2f8>
 800bb0e:	440b      	add	r3, r1
 800bb10:	2c01      	cmp	r4, #1
 800bb12:	dc67      	bgt.n	800bbe4 <__kernel_rem_pio2f+0x4ac>
 800bb14:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bb18:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800bb1c:	2e00      	cmp	r6, #0
 800bb1e:	d167      	bne.n	800bbf0 <__kernel_rem_pio2f+0x4b8>
 800bb20:	edc7 6a00 	vstr	s13, [r7]
 800bb24:	ed87 7a01 	vstr	s14, [r7, #4]
 800bb28:	edc7 7a02 	vstr	s15, [r7, #8]
 800bb2c:	e7d8      	b.n	800bae0 <__kernel_rem_pio2f+0x3a8>
 800bb2e:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb30:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800ba30 <__kernel_rem_pio2f+0x2f8>
 800bb34:	440b      	add	r3, r1
 800bb36:	4622      	mov	r2, r4
 800bb38:	2a00      	cmp	r2, #0
 800bb3a:	da24      	bge.n	800bb86 <__kernel_rem_pio2f+0x44e>
 800bb3c:	b34e      	cbz	r6, 800bb92 <__kernel_rem_pio2f+0x45a>
 800bb3e:	eef1 7a47 	vneg.f32	s15, s14
 800bb42:	edc7 7a00 	vstr	s15, [r7]
 800bb46:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800bb4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb4e:	aa31      	add	r2, sp, #196	@ 0xc4
 800bb50:	2301      	movs	r3, #1
 800bb52:	429c      	cmp	r4, r3
 800bb54:	da20      	bge.n	800bb98 <__kernel_rem_pio2f+0x460>
 800bb56:	b10e      	cbz	r6, 800bb5c <__kernel_rem_pio2f+0x424>
 800bb58:	eef1 7a67 	vneg.f32	s15, s15
 800bb5c:	edc7 7a01 	vstr	s15, [r7, #4]
 800bb60:	e7be      	b.n	800bae0 <__kernel_rem_pio2f+0x3a8>
 800bb62:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb64:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800ba30 <__kernel_rem_pio2f+0x2f8>
 800bb68:	440b      	add	r3, r1
 800bb6a:	2c00      	cmp	r4, #0
 800bb6c:	da05      	bge.n	800bb7a <__kernel_rem_pio2f+0x442>
 800bb6e:	b10e      	cbz	r6, 800bb74 <__kernel_rem_pio2f+0x43c>
 800bb70:	eef1 7a67 	vneg.f32	s15, s15
 800bb74:	edc7 7a00 	vstr	s15, [r7]
 800bb78:	e7b2      	b.n	800bae0 <__kernel_rem_pio2f+0x3a8>
 800bb7a:	ed33 7a01 	vldmdb	r3!, {s14}
 800bb7e:	3c01      	subs	r4, #1
 800bb80:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb84:	e7f1      	b.n	800bb6a <__kernel_rem_pio2f+0x432>
 800bb86:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb8a:	3a01      	subs	r2, #1
 800bb8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb90:	e7d2      	b.n	800bb38 <__kernel_rem_pio2f+0x400>
 800bb92:	eef0 7a47 	vmov.f32	s15, s14
 800bb96:	e7d4      	b.n	800bb42 <__kernel_rem_pio2f+0x40a>
 800bb98:	ecb2 7a01 	vldmia	r2!, {s14}
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bba2:	e7d6      	b.n	800bb52 <__kernel_rem_pio2f+0x41a>
 800bba4:	ed72 7a01 	vldmdb	r2!, {s15}
 800bba8:	edd2 6a01 	vldr	s13, [r2, #4]
 800bbac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bbb0:	3801      	subs	r0, #1
 800bbb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbb6:	ed82 7a00 	vstr	s14, [r2]
 800bbba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbbe:	edc2 7a01 	vstr	s15, [r2, #4]
 800bbc2:	e79c      	b.n	800bafe <__kernel_rem_pio2f+0x3c6>
 800bbc4:	ed73 7a01 	vldmdb	r3!, {s15}
 800bbc8:	edd3 6a01 	vldr	s13, [r3, #4]
 800bbcc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bbd0:	3a01      	subs	r2, #1
 800bbd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbd6:	ed83 7a00 	vstr	s14, [r3]
 800bbda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbde:	edc3 7a01 	vstr	s15, [r3, #4]
 800bbe2:	e78f      	b.n	800bb04 <__kernel_rem_pio2f+0x3cc>
 800bbe4:	ed33 7a01 	vldmdb	r3!, {s14}
 800bbe8:	3c01      	subs	r4, #1
 800bbea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbee:	e78f      	b.n	800bb10 <__kernel_rem_pio2f+0x3d8>
 800bbf0:	eef1 6a66 	vneg.f32	s13, s13
 800bbf4:	eeb1 7a47 	vneg.f32	s14, s14
 800bbf8:	edc7 6a00 	vstr	s13, [r7]
 800bbfc:	ed87 7a01 	vstr	s14, [r7, #4]
 800bc00:	eef1 7a67 	vneg.f32	s15, s15
 800bc04:	e790      	b.n	800bb28 <__kernel_rem_pio2f+0x3f0>
 800bc06:	bf00      	nop

0800bc08 <floorf>:
 800bc08:	ee10 3a10 	vmov	r3, s0
 800bc0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bc10:	3a7f      	subs	r2, #127	@ 0x7f
 800bc12:	2a16      	cmp	r2, #22
 800bc14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bc18:	dc2b      	bgt.n	800bc72 <floorf+0x6a>
 800bc1a:	2a00      	cmp	r2, #0
 800bc1c:	da12      	bge.n	800bc44 <floorf+0x3c>
 800bc1e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bc84 <floorf+0x7c>
 800bc22:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc2e:	dd06      	ble.n	800bc3e <floorf+0x36>
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	da24      	bge.n	800bc7e <floorf+0x76>
 800bc34:	2900      	cmp	r1, #0
 800bc36:	4b14      	ldr	r3, [pc, #80]	@ (800bc88 <floorf+0x80>)
 800bc38:	bf08      	it	eq
 800bc3a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bc3e:	ee00 3a10 	vmov	s0, r3
 800bc42:	4770      	bx	lr
 800bc44:	4911      	ldr	r1, [pc, #68]	@ (800bc8c <floorf+0x84>)
 800bc46:	4111      	asrs	r1, r2
 800bc48:	420b      	tst	r3, r1
 800bc4a:	d0fa      	beq.n	800bc42 <floorf+0x3a>
 800bc4c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bc84 <floorf+0x7c>
 800bc50:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc5c:	ddef      	ble.n	800bc3e <floorf+0x36>
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	bfbe      	ittt	lt
 800bc62:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bc66:	fa40 f202 	asrlt.w	r2, r0, r2
 800bc6a:	189b      	addlt	r3, r3, r2
 800bc6c:	ea23 0301 	bic.w	r3, r3, r1
 800bc70:	e7e5      	b.n	800bc3e <floorf+0x36>
 800bc72:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bc76:	d3e4      	bcc.n	800bc42 <floorf+0x3a>
 800bc78:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc7c:	4770      	bx	lr
 800bc7e:	2300      	movs	r3, #0
 800bc80:	e7dd      	b.n	800bc3e <floorf+0x36>
 800bc82:	bf00      	nop
 800bc84:	7149f2ca 	.word	0x7149f2ca
 800bc88:	bf800000 	.word	0xbf800000
 800bc8c:	007fffff 	.word	0x007fffff

0800bc90 <_init>:
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc92:	bf00      	nop
 800bc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc96:	bc08      	pop	{r3}
 800bc98:	469e      	mov	lr, r3
 800bc9a:	4770      	bx	lr

0800bc9c <_fini>:
 800bc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9e:	bf00      	nop
 800bca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bca2:	bc08      	pop	{r3}
 800bca4:	469e      	mov	lr, r3
 800bca6:	4770      	bx	lr
