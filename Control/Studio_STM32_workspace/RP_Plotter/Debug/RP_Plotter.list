
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba38  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800bc10  0800bc10  0000cc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c020  0800c020  0000e20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c020  0800c020  0000d020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c028  0800c028  0000e20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c028  0800c028  0000d028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c02c  0800c02c  0000d02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800c030  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000104c  20000210  0800c23c  0000e210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000125c  0800c23c  0000e25c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173a3  00000000  00000000  0000e23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be0  00000000  00000000  000255df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  000281c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e75  00000000  00000000  00029418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271f3  00000000  00000000  0002a28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f40  00000000  00000000  00051480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffb74  00000000  00000000  000673c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166f34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005248  00000000  00000000  00166f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0016c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000210 	.word	0x20000210
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bbf8 	.word	0x0800bbf8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000214 	.word	0x20000214
 8000214:	0800bbf8 	.word	0x0800bbf8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_frsub>:
 8000bb4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	e002      	b.n	8000bc0 <__addsf3>
 8000bba:	bf00      	nop

08000bbc <__aeabi_fsub>:
 8000bbc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bc0 <__addsf3>:
 8000bc0:	0042      	lsls	r2, r0, #1
 8000bc2:	bf1f      	itttt	ne
 8000bc4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc8:	ea92 0f03 	teqne	r2, r3
 8000bcc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bd0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd4:	d06a      	beq.n	8000cac <__addsf3+0xec>
 8000bd6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bda:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bde:	bfc1      	itttt	gt
 8000be0:	18d2      	addgt	r2, r2, r3
 8000be2:	4041      	eorgt	r1, r0
 8000be4:	4048      	eorgt	r0, r1
 8000be6:	4041      	eorgt	r1, r0
 8000be8:	bfb8      	it	lt
 8000bea:	425b      	neglt	r3, r3
 8000bec:	2b19      	cmp	r3, #25
 8000bee:	bf88      	it	hi
 8000bf0:	4770      	bxhi	lr
 8000bf2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bf6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4240      	negne	r0, r0
 8000c02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c06:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c0a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4249      	negne	r1, r1
 8000c12:	ea92 0f03 	teq	r2, r3
 8000c16:	d03f      	beq.n	8000c98 <__addsf3+0xd8>
 8000c18:	f1a2 0201 	sub.w	r2, r2, #1
 8000c1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c20:	eb10 000c 	adds.w	r0, r0, ip
 8000c24:	f1c3 0320 	rsb	r3, r3, #32
 8000c28:	fa01 f103 	lsl.w	r1, r1, r3
 8000c2c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c30:	d502      	bpl.n	8000c38 <__addsf3+0x78>
 8000c32:	4249      	negs	r1, r1
 8000c34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c38:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c3c:	d313      	bcc.n	8000c66 <__addsf3+0xa6>
 8000c3e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c42:	d306      	bcc.n	8000c52 <__addsf3+0x92>
 8000c44:	0840      	lsrs	r0, r0, #1
 8000c46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c4a:	f102 0201 	add.w	r2, r2, #1
 8000c4e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c50:	d251      	bcs.n	8000cf6 <__addsf3+0x136>
 8000c52:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c5a:	bf08      	it	eq
 8000c5c:	f020 0001 	biceq.w	r0, r0, #1
 8000c60:	ea40 0003 	orr.w	r0, r0, r3
 8000c64:	4770      	bx	lr
 8000c66:	0049      	lsls	r1, r1, #1
 8000c68:	eb40 0000 	adc.w	r0, r0, r0
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c74:	d2ed      	bcs.n	8000c52 <__addsf3+0x92>
 8000c76:	fab0 fc80 	clz	ip, r0
 8000c7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c86:	bfaa      	itet	ge
 8000c88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c8c:	4252      	neglt	r2, r2
 8000c8e:	4318      	orrge	r0, r3
 8000c90:	bfbc      	itt	lt
 8000c92:	40d0      	lsrlt	r0, r2
 8000c94:	4318      	orrlt	r0, r3
 8000c96:	4770      	bx	lr
 8000c98:	f092 0f00 	teq	r2, #0
 8000c9c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ca0:	bf06      	itte	eq
 8000ca2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ca6:	3201      	addeq	r2, #1
 8000ca8:	3b01      	subne	r3, #1
 8000caa:	e7b5      	b.n	8000c18 <__addsf3+0x58>
 8000cac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb4:	bf18      	it	ne
 8000cb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cba:	d021      	beq.n	8000d00 <__addsf3+0x140>
 8000cbc:	ea92 0f03 	teq	r2, r3
 8000cc0:	d004      	beq.n	8000ccc <__addsf3+0x10c>
 8000cc2:	f092 0f00 	teq	r2, #0
 8000cc6:	bf08      	it	eq
 8000cc8:	4608      	moveq	r0, r1
 8000cca:	4770      	bx	lr
 8000ccc:	ea90 0f01 	teq	r0, r1
 8000cd0:	bf1c      	itt	ne
 8000cd2:	2000      	movne	r0, #0
 8000cd4:	4770      	bxne	lr
 8000cd6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cda:	d104      	bne.n	8000ce6 <__addsf3+0x126>
 8000cdc:	0040      	lsls	r0, r0, #1
 8000cde:	bf28      	it	cs
 8000ce0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ce4:	4770      	bx	lr
 8000ce6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cea:	bf3c      	itt	cc
 8000cec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cf0:	4770      	bxcc	lr
 8000cf2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cf6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cfe:	4770      	bx	lr
 8000d00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d04:	bf16      	itet	ne
 8000d06:	4608      	movne	r0, r1
 8000d08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d0c:	4601      	movne	r1, r0
 8000d0e:	0242      	lsls	r2, r0, #9
 8000d10:	bf06      	itte	eq
 8000d12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d16:	ea90 0f01 	teqeq	r0, r1
 8000d1a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_ui2f>:
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e004      	b.n	8000d30 <__aeabi_i2f+0x8>
 8000d26:	bf00      	nop

08000d28 <__aeabi_i2f>:
 8000d28:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d2c:	bf48      	it	mi
 8000d2e:	4240      	negmi	r0, r0
 8000d30:	ea5f 0c00 	movs.w	ip, r0
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d3c:	4601      	mov	r1, r0
 8000d3e:	f04f 0000 	mov.w	r0, #0
 8000d42:	e01c      	b.n	8000d7e <__aeabi_l2f+0x2a>

08000d44 <__aeabi_ul2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e00a      	b.n	8000d68 <__aeabi_l2f+0x14>
 8000d52:	bf00      	nop

08000d54 <__aeabi_l2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d60:	d502      	bpl.n	8000d68 <__aeabi_l2f+0x14>
 8000d62:	4240      	negs	r0, r0
 8000d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d68:	ea5f 0c01 	movs.w	ip, r1
 8000d6c:	bf02      	ittt	eq
 8000d6e:	4684      	moveq	ip, r0
 8000d70:	4601      	moveq	r1, r0
 8000d72:	2000      	moveq	r0, #0
 8000d74:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d78:	bf08      	it	eq
 8000d7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d82:	fabc f28c 	clz	r2, ip
 8000d86:	3a08      	subs	r2, #8
 8000d88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d8c:	db10      	blt.n	8000db0 <__aeabi_l2f+0x5c>
 8000d8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d92:	4463      	add	r3, ip
 8000d94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d98:	f1c2 0220 	rsb	r2, r2, #32
 8000d9c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000da0:	fa20 f202 	lsr.w	r2, r0, r2
 8000da4:	eb43 0002 	adc.w	r0, r3, r2
 8000da8:	bf08      	it	eq
 8000daa:	f020 0001 	biceq.w	r0, r0, #1
 8000dae:	4770      	bx	lr
 8000db0:	f102 0220 	add.w	r2, r2, #32
 8000db4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db8:	f1c2 0220 	rsb	r2, r2, #32
 8000dbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc4:	eb43 0002 	adc.w	r0, r3, r2
 8000dc8:	bf08      	it	eq
 8000dca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_uldivmod>:
 8000dd0:	b953      	cbnz	r3, 8000de8 <__aeabi_uldivmod+0x18>
 8000dd2:	b94a      	cbnz	r2, 8000de8 <__aeabi_uldivmod+0x18>
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	bf08      	it	eq
 8000dd8:	2800      	cmpeq	r0, #0
 8000dda:	bf1c      	itt	ne
 8000ddc:	f04f 31ff 	movne.w	r1, #4294967295
 8000de0:	f04f 30ff 	movne.w	r0, #4294967295
 8000de4:	f000 b988 	b.w	80010f8 <__aeabi_idiv0>
 8000de8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000df0:	f000 f806 	bl	8000e00 <__udivmoddi4>
 8000df4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dfc:	b004      	add	sp, #16
 8000dfe:	4770      	bx	lr

08000e00 <__udivmoddi4>:
 8000e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e04:	9d08      	ldr	r5, [sp, #32]
 8000e06:	468e      	mov	lr, r1
 8000e08:	4604      	mov	r4, r0
 8000e0a:	4688      	mov	r8, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14a      	bne.n	8000ea6 <__udivmoddi4+0xa6>
 8000e10:	428a      	cmp	r2, r1
 8000e12:	4617      	mov	r7, r2
 8000e14:	d962      	bls.n	8000edc <__udivmoddi4+0xdc>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	b14e      	cbz	r6, 8000e30 <__udivmoddi4+0x30>
 8000e1c:	f1c6 0320 	rsb	r3, r6, #32
 8000e20:	fa01 f806 	lsl.w	r8, r1, r6
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	40b7      	lsls	r7, r6
 8000e2a:	ea43 0808 	orr.w	r8, r3, r8
 8000e2e:	40b4      	lsls	r4, r6
 8000e30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e34:	fa1f fc87 	uxth.w	ip, r7
 8000e38:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e3c:	0c23      	lsrs	r3, r4, #16
 8000e3e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e42:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e46:	fb01 f20c 	mul.w	r2, r1, ip
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x62>
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e54:	f080 80ea 	bcs.w	800102c <__udivmoddi4+0x22c>
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f240 80e7 	bls.w	800102c <__udivmoddi4+0x22c>
 8000e5e:	3902      	subs	r1, #2
 8000e60:	443b      	add	r3, r7
 8000e62:	1a9a      	subs	r2, r3, r2
 8000e64:	b2a3      	uxth	r3, r4
 8000e66:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e6a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e72:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e76:	459c      	cmp	ip, r3
 8000e78:	d909      	bls.n	8000e8e <__udivmoddi4+0x8e>
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e80:	f080 80d6 	bcs.w	8001030 <__udivmoddi4+0x230>
 8000e84:	459c      	cmp	ip, r3
 8000e86:	f240 80d3 	bls.w	8001030 <__udivmoddi4+0x230>
 8000e8a:	443b      	add	r3, r7
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e92:	eba3 030c 	sub.w	r3, r3, ip
 8000e96:	2100      	movs	r1, #0
 8000e98:	b11d      	cbz	r5, 8000ea2 <__udivmoddi4+0xa2>
 8000e9a:	40f3      	lsrs	r3, r6
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d905      	bls.n	8000eb6 <__udivmoddi4+0xb6>
 8000eaa:	b10d      	cbz	r5, 8000eb0 <__udivmoddi4+0xb0>
 8000eac:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4608      	mov	r0, r1
 8000eb4:	e7f5      	b.n	8000ea2 <__udivmoddi4+0xa2>
 8000eb6:	fab3 f183 	clz	r1, r3
 8000eba:	2900      	cmp	r1, #0
 8000ebc:	d146      	bne.n	8000f4c <__udivmoddi4+0x14c>
 8000ebe:	4573      	cmp	r3, lr
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xc8>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 8105 	bhi.w	80010d2 <__udivmoddi4+0x2d2>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	4690      	mov	r8, r2
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e5      	beq.n	8000ea2 <__udivmoddi4+0xa2>
 8000ed6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eda:	e7e2      	b.n	8000ea2 <__udivmoddi4+0xa2>
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	f000 8090 	beq.w	8001002 <__udivmoddi4+0x202>
 8000ee2:	fab2 f682 	clz	r6, r2
 8000ee6:	2e00      	cmp	r6, #0
 8000ee8:	f040 80a4 	bne.w	8001034 <__udivmoddi4+0x234>
 8000eec:	1a8a      	subs	r2, r1, r2
 8000eee:	0c03      	lsrs	r3, r0, #16
 8000ef0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef4:	b280      	uxth	r0, r0
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	2101      	movs	r1, #1
 8000efa:	fbb2 fcfe 	udiv	ip, r2, lr
 8000efe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f06:	fb04 f20c 	mul.w	r2, r4, ip
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x11e>
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f14:	d202      	bcs.n	8000f1c <__udivmoddi4+0x11c>
 8000f16:	429a      	cmp	r2, r3
 8000f18:	f200 80e0 	bhi.w	80010dc <__udivmoddi4+0x2dc>
 8000f1c:	46c4      	mov	ip, r8
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f24:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f28:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f2c:	fb02 f404 	mul.w	r4, r2, r4
 8000f30:	429c      	cmp	r4, r3
 8000f32:	d907      	bls.n	8000f44 <__udivmoddi4+0x144>
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f3a:	d202      	bcs.n	8000f42 <__udivmoddi4+0x142>
 8000f3c:	429c      	cmp	r4, r3
 8000f3e:	f200 80ca 	bhi.w	80010d6 <__udivmoddi4+0x2d6>
 8000f42:	4602      	mov	r2, r0
 8000f44:	1b1b      	subs	r3, r3, r4
 8000f46:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f4a:	e7a5      	b.n	8000e98 <__udivmoddi4+0x98>
 8000f4c:	f1c1 0620 	rsb	r6, r1, #32
 8000f50:	408b      	lsls	r3, r1
 8000f52:	fa22 f706 	lsr.w	r7, r2, r6
 8000f56:	431f      	orrs	r7, r3
 8000f58:	fa0e f401 	lsl.w	r4, lr, r1
 8000f5c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f60:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f64:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f68:	4323      	orrs	r3, r4
 8000f6a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f6e:	fa1f fc87 	uxth.w	ip, r7
 8000f72:	fbbe f0f9 	udiv	r0, lr, r9
 8000f76:	0c1c      	lsrs	r4, r3, #16
 8000f78:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f7c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f80:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f84:	45a6      	cmp	lr, r4
 8000f86:	fa02 f201 	lsl.w	r2, r2, r1
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x1a0>
 8000f8c:	193c      	adds	r4, r7, r4
 8000f8e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f92:	f080 809c 	bcs.w	80010ce <__udivmoddi4+0x2ce>
 8000f96:	45a6      	cmp	lr, r4
 8000f98:	f240 8099 	bls.w	80010ce <__udivmoddi4+0x2ce>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	443c      	add	r4, r7
 8000fa0:	eba4 040e 	sub.w	r4, r4, lr
 8000fa4:	fa1f fe83 	uxth.w	lr, r3
 8000fa8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fac:	fb09 4413 	mls	r4, r9, r3, r4
 8000fb0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fb4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fb8:	45a4      	cmp	ip, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1ce>
 8000fbc:	193c      	adds	r4, r7, r4
 8000fbe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fc2:	f080 8082 	bcs.w	80010ca <__udivmoddi4+0x2ca>
 8000fc6:	45a4      	cmp	ip, r4
 8000fc8:	d97f      	bls.n	80010ca <__udivmoddi4+0x2ca>
 8000fca:	3b02      	subs	r3, #2
 8000fcc:	443c      	add	r4, r7
 8000fce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fd2:	eba4 040c 	sub.w	r4, r4, ip
 8000fd6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fda:	4564      	cmp	r4, ip
 8000fdc:	4673      	mov	r3, lr
 8000fde:	46e1      	mov	r9, ip
 8000fe0:	d362      	bcc.n	80010a8 <__udivmoddi4+0x2a8>
 8000fe2:	d05f      	beq.n	80010a4 <__udivmoddi4+0x2a4>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x1fe>
 8000fe6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fea:	eb64 0409 	sbc.w	r4, r4, r9
 8000fee:	fa04 f606 	lsl.w	r6, r4, r6
 8000ff2:	fa22 f301 	lsr.w	r3, r2, r1
 8000ff6:	431e      	orrs	r6, r3
 8000ff8:	40cc      	lsrs	r4, r1
 8000ffa:	e9c5 6400 	strd	r6, r4, [r5]
 8000ffe:	2100      	movs	r1, #0
 8001000:	e74f      	b.n	8000ea2 <__udivmoddi4+0xa2>
 8001002:	fbb1 fcf2 	udiv	ip, r1, r2
 8001006:	0c01      	lsrs	r1, r0, #16
 8001008:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800100c:	b280      	uxth	r0, r0
 800100e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001012:	463b      	mov	r3, r7
 8001014:	4638      	mov	r0, r7
 8001016:	463c      	mov	r4, r7
 8001018:	46b8      	mov	r8, r7
 800101a:	46be      	mov	lr, r7
 800101c:	2620      	movs	r6, #32
 800101e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001022:	eba2 0208 	sub.w	r2, r2, r8
 8001026:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800102a:	e766      	b.n	8000efa <__udivmoddi4+0xfa>
 800102c:	4601      	mov	r1, r0
 800102e:	e718      	b.n	8000e62 <__udivmoddi4+0x62>
 8001030:	4610      	mov	r0, r2
 8001032:	e72c      	b.n	8000e8e <__udivmoddi4+0x8e>
 8001034:	f1c6 0220 	rsb	r2, r6, #32
 8001038:	fa2e f302 	lsr.w	r3, lr, r2
 800103c:	40b7      	lsls	r7, r6
 800103e:	40b1      	lsls	r1, r6
 8001040:	fa20 f202 	lsr.w	r2, r0, r2
 8001044:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001048:	430a      	orrs	r2, r1
 800104a:	fbb3 f8fe 	udiv	r8, r3, lr
 800104e:	b2bc      	uxth	r4, r7
 8001050:	fb0e 3318 	mls	r3, lr, r8, r3
 8001054:	0c11      	lsrs	r1, r2, #16
 8001056:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800105a:	fb08 f904 	mul.w	r9, r8, r4
 800105e:	40b0      	lsls	r0, r6
 8001060:	4589      	cmp	r9, r1
 8001062:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001066:	b280      	uxth	r0, r0
 8001068:	d93e      	bls.n	80010e8 <__udivmoddi4+0x2e8>
 800106a:	1879      	adds	r1, r7, r1
 800106c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001070:	d201      	bcs.n	8001076 <__udivmoddi4+0x276>
 8001072:	4589      	cmp	r9, r1
 8001074:	d81f      	bhi.n	80010b6 <__udivmoddi4+0x2b6>
 8001076:	eba1 0109 	sub.w	r1, r1, r9
 800107a:	fbb1 f9fe 	udiv	r9, r1, lr
 800107e:	fb09 f804 	mul.w	r8, r9, r4
 8001082:	fb0e 1119 	mls	r1, lr, r9, r1
 8001086:	b292      	uxth	r2, r2
 8001088:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800108c:	4542      	cmp	r2, r8
 800108e:	d229      	bcs.n	80010e4 <__udivmoddi4+0x2e4>
 8001090:	18ba      	adds	r2, r7, r2
 8001092:	f109 31ff 	add.w	r1, r9, #4294967295
 8001096:	d2c4      	bcs.n	8001022 <__udivmoddi4+0x222>
 8001098:	4542      	cmp	r2, r8
 800109a:	d2c2      	bcs.n	8001022 <__udivmoddi4+0x222>
 800109c:	f1a9 0102 	sub.w	r1, r9, #2
 80010a0:	443a      	add	r2, r7
 80010a2:	e7be      	b.n	8001022 <__udivmoddi4+0x222>
 80010a4:	45f0      	cmp	r8, lr
 80010a6:	d29d      	bcs.n	8000fe4 <__udivmoddi4+0x1e4>
 80010a8:	ebbe 0302 	subs.w	r3, lr, r2
 80010ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010b0:	3801      	subs	r0, #1
 80010b2:	46e1      	mov	r9, ip
 80010b4:	e796      	b.n	8000fe4 <__udivmoddi4+0x1e4>
 80010b6:	eba7 0909 	sub.w	r9, r7, r9
 80010ba:	4449      	add	r1, r9
 80010bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80010c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010c4:	fb09 f804 	mul.w	r8, r9, r4
 80010c8:	e7db      	b.n	8001082 <__udivmoddi4+0x282>
 80010ca:	4673      	mov	r3, lr
 80010cc:	e77f      	b.n	8000fce <__udivmoddi4+0x1ce>
 80010ce:	4650      	mov	r0, sl
 80010d0:	e766      	b.n	8000fa0 <__udivmoddi4+0x1a0>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e6fd      	b.n	8000ed2 <__udivmoddi4+0xd2>
 80010d6:	443b      	add	r3, r7
 80010d8:	3a02      	subs	r2, #2
 80010da:	e733      	b.n	8000f44 <__udivmoddi4+0x144>
 80010dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010e0:	443b      	add	r3, r7
 80010e2:	e71c      	b.n	8000f1e <__udivmoddi4+0x11e>
 80010e4:	4649      	mov	r1, r9
 80010e6:	e79c      	b.n	8001022 <__udivmoddi4+0x222>
 80010e8:	eba1 0109 	sub.w	r1, r1, r9
 80010ec:	46c4      	mov	ip, r8
 80010ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80010f2:	fb09 f804 	mul.w	r8, r9, r4
 80010f6:	e7c4      	b.n	8001082 <__udivmoddi4+0x282>

080010f8 <__aeabi_idiv0>:
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef *huart);

// function for interrupt
void modbus_1t5_Timeout() {
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001100:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <modbus_1t5_Timeout+0x3c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2201      	movs	r2, #1
 8001106:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <modbus_1t5_Timeout+0x3c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2200      	movs	r2, #0
 8001112:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <modbus_1t5_Timeout+0x3c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <modbus_1t5_Timeout+0x3c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0201 	orr.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2000022c 	.word	0x2000022c

0800113c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <modbus_3t5_Timeout+0x1c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2201      	movs	r2, #1
 800114a:	755a      	strb	r2, [r3, #21]

}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	2000022c 	.word	0x2000022c

0800115c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef *huart) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(huart) == HAL_UART_ERROR_RTO) {
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f008 fe3f 	bl	8009de8 <HAL_UART_GetError>
 800116a:	4603      	mov	r3, r0
 800116c:	2b20      	cmp	r3, #32
 800116e:	d101      	bne.n	8001174 <modbus_ErrorTimeout+0x18>
		modbus_1t5_Timeout();
 8001170:	f7ff ffc4 	bl	80010fc <modbus_1t5_Timeout>

	}
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001186:	4a25      	ldr	r2, [pc, #148]	@ (800121c <Modbus_init+0xa0>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800118c:	4b23      	ldr	r3, [pc, #140]	@ (800121c <Modbus_init+0xa0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	4a21      	ldr	r2, [pc, #132]	@ (8001220 <Modbus_init+0xa4>)
 800119a:	210e      	movs	r1, #14
 800119c:	4618      	mov	r0, r3
 800119e:	f006 fe3d 	bl	8007e1c <HAL_TIM_RegisterCallback>
			(void*) modbus_3t5_Timeout);

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2110      	movs	r1, #16
 80011a8:	4618      	mov	r0, r3
 80011aa:	f008 fdc7 	bl	8009d3c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f008 fdde 	bl	8009d74 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	4a19      	ldr	r2, [pc, #100]	@ (8001224 <Modbus_init+0xa8>)
 80011be:	2104      	movs	r1, #4
 80011c0:	4618      	mov	r0, r3
 80011c2:	f008 f885 	bl	80092d0 <HAL_UART_RegisterCallback>
			(void*) modbus_ErrorTimeout);
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
	HAL_UART_Receive_DMA(hModbus->huart,
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <Modbus_init+0xa0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68d8      	ldr	r0, [r3, #12]
			&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011cc:	4b13      	ldr	r3, [pc, #76]	@ (800121c <Modbus_init+0xa0>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <Modbus_init+0xa0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
	HAL_UART_Receive_DMA(hModbus->huart,
 80011d8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011dc:	4413      	add	r3, r2
 80011de:	3302      	adds	r3, #2
 80011e0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011e4:	4619      	mov	r1, r3
 80011e6:	f008 f9ad 	bl	8009544 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE);

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <Modbus_init+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d10c      	bne.n	8001214 <Modbus_init+0x98>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <Modbus_init+0xa0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	4618      	mov	r0, r3
 8001202:	f005 fb97 	bl	8006934 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001206:	4b05      	ldr	r3, [pc, #20]	@ (800121c <Modbus_init+0xa0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f005 ff58 	bl	80070c4 <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000022c 	.word	0x2000022c
 8001220:	0800113d 	.word	0x0800113d
 8001224:	0800115d 	.word	0x0800115d

08001228 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8001234:	23ff      	movs	r3, #255	@ 0xff
 8001236:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8001238:	23ff      	movs	r3, #255	@ 0xff
 800123a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800123c:	e013      	b.n	8001266 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	4053      	eors	r3, r2
 800124a:	b2db      	uxtb	r3, r3
 800124c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800124e:	4a10      	ldr	r2, [pc, #64]	@ (8001290 <CRC16+0x68>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4413      	add	r3, r2
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	4053      	eors	r3, r2
 800125a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <CRC16+0x6c>)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	4413      	add	r3, r2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001266:	883b      	ldrh	r3, [r7, #0]
 8001268:	1e5a      	subs	r2, r3, #1
 800126a:	803a      	strh	r2, [r7, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1e6      	bne.n	800123e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	b21b      	sxth	r3, r3
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	b21a      	sxth	r2, r3
 8001278:	7bbb      	ldrb	r3, [r7, #14]
 800127a:	b21b      	sxth	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b21b      	sxth	r3, r3
 8001280:	b29b      	uxth	r3, r3
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000100 	.word	0x20000100
 8001294:	20000000 	.word	0x20000000

08001298 <ResetAllTargets>:

void ResetAllTargets(void) {
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	e020      	b.n	80012e6 <ResetAllTargets+0x4e>
		SET_TARGET(i, 0, 0);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	dc03      	bgt.n	80012b2 <ResetAllTargets+0x1a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3310      	adds	r3, #16
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	e002      	b.n	80012b8 <ResetAllTargets+0x20>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3313      	adds	r3, #19
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4a10      	ldr	r2, [pc, #64]	@ (80012fc <ResetAllTargets+0x64>)
 80012ba:	2100      	movs	r1, #0
 80012bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	dc04      	bgt.n	80012d0 <ResetAllTargets+0x38>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3310      	adds	r3, #16
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	3301      	adds	r3, #1
 80012ce:	e003      	b.n	80012d8 <ResetAllTargets+0x40>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3313      	adds	r3, #19
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a08      	ldr	r2, [pc, #32]	@ (80012fc <ResetAllTargets+0x64>)
 80012da:	2100      	movs	r1, #0
 80012dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 10; i++) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3301      	adds	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b09      	cmp	r3, #9
 80012ea:	dddb      	ble.n	80012a4 <ResetAllTargets+0xc>
	}
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20001080 	.word	0x20001080

08001300 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
//	//-- value

	REG16(HEART_BEAT) = 22881;
 8001306:	4b8d      	ldr	r3, [pc, #564]	@ (800153c <Modbus_Protocal_Worker+0x23c>)
 8001308:	f645 1261 	movw	r2, #22881	@ 0x5961
 800130c:	801a      	strh	r2, [r3, #0]
	REG16(REG_SERVO_LIMIT_SWITCH) = Pen_Status ? 2 : 1;
 800130e:	4b8c      	ldr	r3, [pc, #560]	@ (8001540 <Modbus_Protocal_Worker+0x240>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <Modbus_Protocal_Worker+0x1a>
 8001316:	2202      	movs	r2, #2
 8001318:	e000      	b.n	800131c <Modbus_Protocal_Worker+0x1c>
 800131a:	2201      	movs	r2, #1
 800131c:	4b87      	ldr	r3, [pc, #540]	@ (800153c <Modbus_Protocal_Worker+0x23c>)
 800131e:	80da      	strh	r2, [r3, #6]
	Pen_BaseSystem = REG16(REG_SERVO_CMD_DOWN) ? 1 : 0;
 8001320:	4b86      	ldr	r3, [pc, #536]	@ (800153c <Modbus_Protocal_Worker+0x23c>)
 8001322:	895b      	ldrh	r3, [r3, #10]
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf14      	ite	ne
 8001328:	2301      	movne	r3, #1
 800132a:	2300      	moveq	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	4b84      	ldr	r3, [pc, #528]	@ (8001544 <Modbus_Protocal_Worker+0x244>)
 8001332:	701a      	strb	r2, [r3, #0]
	TargetR_BaseSystem = REG16(REG_TARGET_GOAL_R) * 0.1f;
 8001334:	4b81      	ldr	r3, [pc, #516]	@ (800153c <Modbus_Protocal_Worker+0x23c>)
 8001336:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8001548 <Modbus_Protocal_Worker+0x248>
 8001346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134a:	4b80      	ldr	r3, [pc, #512]	@ (800154c <Modbus_Protocal_Worker+0x24c>)
 800134c:	edc3 7a00 	vstr	s15, [r3]
	TargetP_BaseSystem = REG16(REG_TARGET_GOAL_THETA) * 0.1f;
 8001350:	4b7a      	ldr	r3, [pc, #488]	@ (800153c <Modbus_Protocal_Worker+0x23c>)
 8001352:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001548 <Modbus_Protocal_Worker+0x248>
 8001362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001366:	4b7a      	ldr	r3, [pc, #488]	@ (8001550 <Modbus_Protocal_Worker+0x250>)
 8001368:	edc3 7a00 	vstr	s15, [r3]

	uint16_t base_status = REG16(REG_BASE_STATUS);
 800136c:	4b73      	ldr	r3, [pc, #460]	@ (800153c <Modbus_Protocal_Worker+0x23c>)
 800136e:	885b      	ldrh	r3, [r3, #2]
 8001370:	80fb      	strh	r3, [r7, #6]
	REG16(REG_MOTION_STATUS) = base_status;
 8001372:	4a72      	ldr	r2, [pc, #456]	@ (800153c <Modbus_Protocal_Worker+0x23c>)
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	8413      	strh	r3, [r2, #32]

	static int currentSlot = 0;
	switch (base_status) {
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	2b08      	cmp	r3, #8
 800137c:	d01d      	beq.n	80013ba <Modbus_Protocal_Worker+0xba>
 800137e:	2b08      	cmp	r3, #8
 8001380:	dc55      	bgt.n	800142e <Modbus_Protocal_Worker+0x12e>
 8001382:	2b01      	cmp	r3, #1
 8001384:	d002      	beq.n	800138c <Modbus_Protocal_Worker+0x8c>
 8001386:	2b02      	cmp	r3, #2
 8001388:	d013      	beq.n	80013b2 <Modbus_Protocal_Worker+0xb2>
 800138a:	e050      	b.n	800142e <Modbus_Protocal_Worker+0x12e>
	case 1:  // Home
		State_BaseSystem = 3;
 800138c:	4b71      	ldr	r3, [pc, #452]	@ (8001554 <Modbus_Protocal_Worker+0x254>)
 800138e:	2203      	movs	r2, #3
 8001390:	701a      	strb	r2, [r3, #0]
		// if either of the first two target registers is non-zero
		if (REG16(REG_TARGET_BASE_ADDR) || REG16(REG_TARGET_BASE_ADDR + 1)) {
 8001392:	4b6a      	ldr	r3, [pc, #424]	@ (800153c <Modbus_Protocal_Worker+0x23c>)
 8001394:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001398:	2b00      	cmp	r3, #0
 800139a:	d104      	bne.n	80013a6 <Modbus_Protocal_Worker+0xa6>
 800139c:	4b67      	ldr	r3, [pc, #412]	@ (800153c <Modbus_Protocal_Worker+0x23c>)
 800139e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d047      	beq.n	8001436 <Modbus_Protocal_Worker+0x136>
			ResetAllTargets();
 80013a6:	f7ff ff77 	bl	8001298 <ResetAllTargets>
			currentSlot = 0;
 80013aa:	4b6b      	ldr	r3, [pc, #428]	@ (8001558 <Modbus_Protocal_Worker+0x258>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
		}
		break;
 80013b0:	e041      	b.n	8001436 <Modbus_Protocal_Worker+0x136>

	case 2:  // Run Jog Mode
		State_BaseSystem = 1;
 80013b2:	4b68      	ldr	r3, [pc, #416]	@ (8001554 <Modbus_Protocal_Worker+0x254>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
		break;
 80013b8:	e040      	b.n	800143c <Modbus_Protocal_Worker+0x13c>

	case 8:  // Go To Target
		State_BaseSystem = 2;
 80013ba:	4b66      	ldr	r3, [pc, #408]	@ (8001554 <Modbus_Protocal_Worker+0x254>)
 80013bc:	2202      	movs	r2, #2
 80013be:	701a      	strb	r2, [r3, #0]
		// enqueue the next target
		SET_TARGET(currentSlot, REG16(REG_TARGET_GOAL_R),
 80013c0:	4b65      	ldr	r3, [pc, #404]	@ (8001558 <Modbus_Protocal_Worker+0x258>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	dc04      	bgt.n	80013d2 <Modbus_Protocal_Worker+0xd2>
 80013c8:	4b63      	ldr	r3, [pc, #396]	@ (8001558 <Modbus_Protocal_Worker+0x258>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3310      	adds	r3, #16
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	e003      	b.n	80013da <Modbus_Protocal_Worker+0xda>
 80013d2:	4b61      	ldr	r3, [pc, #388]	@ (8001558 <Modbus_Protocal_Worker+0x258>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3313      	adds	r3, #19
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4a58      	ldr	r2, [pc, #352]	@ (800153c <Modbus_Protocal_Worker+0x23c>)
 80013dc:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 80013e0:	4a56      	ldr	r2, [pc, #344]	@ (800153c <Modbus_Protocal_Worker+0x23c>)
 80013e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80013e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001558 <Modbus_Protocal_Worker+0x258>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	dc05      	bgt.n	80013fa <Modbus_Protocal_Worker+0xfa>
 80013ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001558 <Modbus_Protocal_Worker+0x258>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3310      	adds	r3, #16
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	3301      	adds	r3, #1
 80013f8:	e004      	b.n	8001404 <Modbus_Protocal_Worker+0x104>
 80013fa:	4b57      	ldr	r3, [pc, #348]	@ (8001558 <Modbus_Protocal_Worker+0x258>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	3313      	adds	r3, #19
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	3301      	adds	r3, #1
 8001404:	4a4d      	ldr	r2, [pc, #308]	@ (800153c <Modbus_Protocal_Worker+0x23c>)
 8001406:	f8b2 1082 	ldrh.w	r1, [r2, #130]	@ 0x82
 800140a:	4a4c      	ldr	r2, [pc, #304]	@ (800153c <Modbus_Protocal_Worker+0x23c>)
 800140c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				REG16(REG_TARGET_GOAL_THETA));

		// increment _and_ wrap+reset in one go
		if (++currentSlot >= 10) {
 8001410:	4b51      	ldr	r3, [pc, #324]	@ (8001558 <Modbus_Protocal_Worker+0x258>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	4a50      	ldr	r2, [pc, #320]	@ (8001558 <Modbus_Protocal_Worker+0x258>)
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b4f      	ldr	r3, [pc, #316]	@ (8001558 <Modbus_Protocal_Worker+0x258>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b09      	cmp	r3, #9
 8001420:	dd0b      	ble.n	800143a <Modbus_Protocal_Worker+0x13a>
			currentSlot = 0;
 8001422:	4b4d      	ldr	r3, [pc, #308]	@ (8001558 <Modbus_Protocal_Worker+0x258>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
			ResetAllTargets();
 8001428:	f7ff ff36 	bl	8001298 <ResetAllTargets>
		}
		break;
 800142c:	e005      	b.n	800143a <Modbus_Protocal_Worker+0x13a>

	default: // Run Point Mode
		State_BaseSystem = 0;
 800142e:	4b49      	ldr	r3, [pc, #292]	@ (8001554 <Modbus_Protocal_Worker+0x254>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
		break;
 8001434:	e002      	b.n	800143c <Modbus_Protocal_Worker+0x13c>
		break;
 8001436:	bf00      	nop
 8001438:	e000      	b.n	800143c <Modbus_Protocal_Worker+0x13c>
		break;
 800143a:	bf00      	nop
// Revolute_QEIdata.AngularVelocity_rad
//Revolute_QEIdata.AngularAcceleration_rad
//Revolute_QEIdata.RadPosition

	//--Modbus
	switch (hModbus->Mstatus) {
 800143c:	4b47      	ldr	r3, [pc, #284]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	7ddb      	ldrb	r3, [r3, #23]
 8001442:	3b01      	subs	r3, #1
 8001444:	2b03      	cmp	r3, #3
 8001446:	d80b      	bhi.n	8001460 <Modbus_Protocal_Worker+0x160>
 8001448:	a201      	add	r2, pc, #4	@ (adr r2, 8001450 <Modbus_Protocal_Worker+0x150>)
 800144a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144e:	bf00      	nop
 8001450:	0800146b 	.word	0x0800146b
 8001454:	08001625 	.word	0x08001625
 8001458:	080014f7 	.word	0x080014f7
 800145c:	08001561 	.word	0x08001561
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001460:	4b3e      	ldr	r3, [pc, #248]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2201      	movs	r2, #1
 8001466:	75da      	strb	r2, [r3, #23]
		break;
 8001468:	e0f4      	b.n	8001654 <Modbus_Protocal_Worker+0x354>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 800146a:	4b3c      	ldr	r3, [pc, #240]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <Modbus_Protocal_Worker+0x184>
			/*set state*/
			hModbus->Mstatus = Modbus_state_Emission;
 8001476:	4b39      	ldr	r3, [pc, #228]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2202      	movs	r2, #2
 800147c:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 800147e:	f000 f9df 	bl	8001840 <Modbus_Emission>
 8001482:	e018      	b.n	80014b6 <Modbus_Protocal_Worker+0x1b6>
		}

		// Received character
		else if (hModbus->huart->RxXferSize != hModbus->huart->RxXferCount) {
 8001484:	4b35      	ldr	r3, [pc, #212]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800148e:	4b33      	ldr	r3, [pc, #204]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001498:	b29b      	uxth	r3, r3
 800149a:	429a      	cmp	r2, r3
 800149c:	d00b      	beq.n	80014b6 <Modbus_Protocal_Worker+0x1b6>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800149e:	4b2f      	ldr	r3, [pc, #188]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2200      	movs	r2, #0
 80014a4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80014a6:	4b2d      	ldr	r3, [pc, #180]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2200      	movs	r2, #0
 80014ac:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 80014ae:	4b2b      	ldr	r3, [pc, #172]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2203      	movs	r2, #3
 80014b4:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 80014b6:	4b29      	ldr	r3, [pc, #164]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c0:	2b20      	cmp	r3, #32
 80014c2:	f040 80c0 	bne.w	8001646 <Modbus_Protocal_Worker+0x346>
			hModbus->modbusUartStructure.RxTail = 0;
 80014c6:	4b25      	ldr	r3, [pc, #148]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 80014d0:	4b22      	ldr	r3, [pc, #136]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68d8      	ldr	r0, [r3, #12]
					&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80014d6:	4b21      	ldr	r3, [pc, #132]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b20      	ldr	r3, [pc, #128]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 80014e2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80014e6:	4413      	add	r3, r2
 80014e8:	3302      	adds	r3, #2
 80014ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014ee:	4619      	mov	r1, r3
 80014f0:	f008 f828 	bl	8009544 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE);

		}
		break;
 80014f4:	e0a7      	b.n	8001646 <Modbus_Protocal_Worker+0x346>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 80014f6:	4b19      	ldr	r3, [pc, #100]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	7d1b      	ldrb	r3, [r3, #20]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80a4 	beq.w	800164a <Modbus_Protocal_Worker+0x34a>
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001502:	4b16      	ldr	r3, [pc, #88]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	22fe      	movs	r2, #254	@ 0xfe
 8001508:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 800150a:	4b14      	ldr	r3, [pc, #80]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 8001524:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 8001526:	681b      	ldr	r3, [r3, #0]
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 8001528:	1a8a      	subs	r2, r1, r2
 800152a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 800152c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001530:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <Modbus_Protocal_Worker+0x25c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2204      	movs	r2, #4
 8001536:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001538:	e087      	b.n	800164a <Modbus_Protocal_Worker+0x34a>
 800153a:	bf00      	nop
 800153c:	20001080 	.word	0x20001080
 8001540:	20000b2b 	.word	0x20000b2b
 8001544:	20000ba5 	.word	0x20000ba5
 8001548:	3dcccccd 	.word	0x3dcccccd
 800154c:	20000b9c 	.word	0x20000b9c
 8001550:	20000ba0 	.word	0x20000ba0
 8001554:	20000ba4 	.word	0x20000ba4
 8001558:	20000230 	.word	0x20000230
 800155c:	2000022c 	.word	0x2000022c
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 8001560:	4b3e      	ldr	r3, [pc, #248]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001568:	f113 0f02 	cmn.w	r3, #2
 800156c:	d150      	bne.n	8001610 <Modbus_Protocal_Worker+0x310>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800156e:	4b3b      	ldr	r3, [pc, #236]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2200      	movs	r2, #0
 8001574:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(
					hModbus->modbusUartStructure.MessageBufferRx,
 8001576:	4b39      	ldr	r3, [pc, #228]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f203 2272 	addw	r2, r3, #626	@ 0x272
					hModbus->modbusUartStructure.RxTail - 2);
 800157e:	4b37      	ldr	r3, [pc, #220]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			CalculateCRC.U16 = CRC16(
 8001586:	3b02      	subs	r3, #2
 8001588:	4619      	mov	r1, r3
 800158a:	4610      	mov	r0, r2
 800158c:	f7ff fe4c 	bl	8001228 <CRC16>
 8001590:	4603      	mov	r3, r0
 8001592:	80bb      	strh	r3, [r7, #4]

			if (!(CalculateCRC.U8[0]
 8001594:	793a      	ldrb	r2, [r7, #4]
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001596:	4b31      	ldr	r3, [pc, #196]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 8001598:	6819      	ldr	r1, [r3, #0]
 800159a:	4b30      	ldr	r3, [pc, #192]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
							- 2]
 80015a2:	3b02      	subs	r3, #2
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80015a4:	440b      	add	r3, r1
 80015a6:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d10c      	bne.n	80015c8 <Modbus_Protocal_Worker+0x2c8>
					&& CalculateCRC.U8[1]
 80015ae:	797a      	ldrb	r2, [r7, #5]
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80015b0:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 80015b2:	6819      	ldr	r1, [r3, #0]
 80015b4:	4b29      	ldr	r3, [pc, #164]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
									- 1])) {
 80015bc:	3b01      	subs	r3, #1
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 80015be:	440b      	add	r3, r1
 80015c0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d004      	beq.n	80015d2 <Modbus_Protocal_Worker+0x2d2>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80015c8:	4b24      	ldr	r3, [pc, #144]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	22ff      	movs	r2, #255	@ 0xff
 80015ce:	759a      	strb	r2, [r3, #22]
				break;
 80015d0:	e040      	b.n	8001654 <Modbus_Protocal_Worker+0x354>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 80015d2:	4b22      	ldr	r3, [pc, #136]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
					!= hModbus->slaveAddress)
 80015da:	4b20      	ldr	r3, [pc, #128]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	781b      	ldrb	r3, [r3, #0]
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d113      	bne.n	800160c <Modbus_Protocal_Worker+0x30c>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80015e4:	4b1d      	ldr	r3, [pc, #116]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx + 1,
 80015ec:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80015f4:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail - 3);
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80015fe:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001600:	461a      	mov	r2, r3
 8001602:	f009 fd77 	bl	800b0f4 <memcpy>

			//execute command
			Modbus_frame_response();
 8001606:	f000 f903 	bl	8001810 <Modbus_frame_response>
 800160a:	e001      	b.n	8001610 <Modbus_Protocal_Worker+0x310>
				break;
 800160c:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 800160e:	e021      	b.n	8001654 <Modbus_Protocal_Worker+0x354>
		if (hModbus->Flag_T35TimeOut) {
 8001610:	4b12      	ldr	r3, [pc, #72]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	7d5b      	ldrb	r3, [r3, #21]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d019      	beq.n	800164e <Modbus_Protocal_Worker+0x34e>
			hModbus->Mstatus = Modbus_state_Idle;
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2201      	movs	r2, #1
 8001620:	75da      	strb	r2, [r3, #23]
		break;
 8001622:	e014      	b.n	800164e <Modbus_Protocal_Worker+0x34e>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001624:	4b0d      	ldr	r3, [pc, #52]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162e:	2b20      	cmp	r3, #32
 8001630:	d10f      	bne.n	8001652 <Modbus_Protocal_Worker+0x352>
			hModbus->TxCount = 0;
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800163c:	4b07      	ldr	r3, [pc, #28]	@ (800165c <Modbus_Protocal_Worker+0x35c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2201      	movs	r2, #1
 8001642:	75da      	strb	r2, [r3, #23]
		break;
 8001644:	e005      	b.n	8001652 <Modbus_Protocal_Worker+0x352>
		break;
 8001646:	bf00      	nop
 8001648:	e004      	b.n	8001654 <Modbus_Protocal_Worker+0x354>
		break;
 800164a:	bf00      	nop
 800164c:	e002      	b.n	8001654 <Modbus_Protocal_Worker+0x354>
		break;
 800164e:	bf00      	nop
 8001650:	e000      	b.n	8001654 <Modbus_Protocal_Worker+0x354>
		break;
 8001652:	bf00      	nop
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2000022c 	.word	0x2000022c

08001660 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 8001666:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <modbusWrite1Register+0x7c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	7e5b      	ldrb	r3, [r3, #25]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	b29b      	uxth	r3, r3
 8001670:	4a1a      	ldr	r2, [pc, #104]	@ (80016dc <modbusWrite1Register+0x7c>)
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	7e92      	ldrb	r2, [r2, #26]
 8001676:	4413      	add	r3, r2
 8001678:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 800167a:	88fa      	ldrh	r2, [r7, #6]
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <modbusWrite1Register+0x7c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	429a      	cmp	r2, r3
 8001684:	d903      	bls.n	800168e <modbusWrite1Register+0x2e>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001686:	2002      	movs	r0, #2
 8001688:	f000 f8a0 	bl	80017cc <ModbusErrorReply>
		return;
 800168c:	e023      	b.n	80016d6 <modbusWrite1Register+0x76>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800168e:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <modbusWrite1Register+0x7c>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <modbusWrite1Register+0x7c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	440b      	add	r3, r1
 800169e:	7ed2      	ldrb	r2, [r2, #27]
 80016a0:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <modbusWrite1Register+0x7c>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <modbusWrite1Register+0x7c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	440b      	add	r3, r1
 80016b2:	7f12      	ldrb	r2, [r2, #28]
 80016b4:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <modbusWrite1Register+0x7c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <modbusWrite1Register+0x7c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3318      	adds	r3, #24
 80016c4:	2208      	movs	r2, #8
 80016c6:	4619      	mov	r1, r3
 80016c8:	f009 fd14 	bl	800b0f4 <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 80016cc:	4b03      	ldr	r3, [pc, #12]	@ (80016dc <modbusWrite1Register+0x7c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2205      	movs	r2, #5
 80016d2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000022c 	.word	0x2000022c

080016e0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 80016e6:	4b38      	ldr	r3, [pc, #224]	@ (80017c8 <modbusRead1Register+0xe8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	7edb      	ldrb	r3, [r3, #27]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	b29b      	uxth	r3, r3
			+ (hModbus->Rxframe[4]));
 80016f0:	4a35      	ldr	r2, [pc, #212]	@ (80017c8 <modbusRead1Register+0xe8>)
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	7f12      	ldrb	r2, [r2, #28]
	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 80016f6:	4413      	add	r3, r2
 80016f8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 80016fa:	4b33      	ldr	r3, [pc, #204]	@ (80017c8 <modbusRead1Register+0xe8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	7e5b      	ldrb	r3, [r3, #25]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b29b      	uxth	r3, r3
 8001704:	4a30      	ldr	r2, [pc, #192]	@ (80017c8 <modbusRead1Register+0xe8>)
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	7e92      	ldrb	r2, [r2, #26]
 800170a:	4413      	add	r3, r2
 800170c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <modbusRead1Register+0x3a>
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	2b7d      	cmp	r3, #125	@ 0x7d
 8001718:	d903      	bls.n	8001722 <modbusRead1Register+0x42>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800171a:	2003      	movs	r0, #3
 800171c:	f000 f856 	bl	80017cc <ModbusErrorReply>
		return;
 8001720:	e04e      	b.n	80017c0 <modbusRead1Register+0xe0>
	}

	if (startAddress > hModbus->RegisterSize
 8001722:	88ba      	ldrh	r2, [r7, #4]
 8001724:	4b28      	ldr	r3, [pc, #160]	@ (80017c8 <modbusRead1Register+0xe8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	429a      	cmp	r2, r3
 800172c:	d808      	bhi.n	8001740 <modbusRead1Register+0x60>
			|| (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 800172e:	88ba      	ldrh	r2, [r7, #4]
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	4413      	add	r3, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4b24      	ldr	r3, [pc, #144]	@ (80017c8 <modbusRead1Register+0xe8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	429a      	cmp	r2, r3
 800173e:	d903      	bls.n	8001748 <modbusRead1Register+0x68>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001740:	2002      	movs	r0, #2
 8001742:	f000 f843 	bl	80017cc <ModbusErrorReply>
		return;
 8001746:	e03b      	b.n	80017c0 <modbusRead1Register+0xe0>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001748:	4b1f      	ldr	r3, [pc, #124]	@ (80017c8 <modbusRead1Register+0xe8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2203      	movs	r2, #3
 800174e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <modbusRead1Register+0xe8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	0052      	lsls	r2, r2, #1
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 8001762:	2400      	movs	r4, #0
 8001764:	e020      	b.n	80017a8 <modbusRead1Register+0xc8>
		hModbus->Txframe[2 * i + 2] =
				hModbus->RegisterAddress[startAddress + i].U8[1];
 8001766:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <modbusRead1Register+0xe8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	88bb      	ldrh	r3, [r7, #4]
 800176e:	4423      	add	r3, r4
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 2] =
 8001774:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <modbusRead1Register+0xe8>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	1c63      	adds	r3, r4, #1
 800177a:	005b      	lsls	r3, r3, #1
				hModbus->RegisterAddress[startAddress + i].U8[1];
 800177c:	7849      	ldrb	r1, [r1, #1]
		hModbus->Txframe[2 * i + 2] =
 800177e:	4413      	add	r3, r2
 8001780:	460a      	mov	r2, r1
 8001782:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2 * i + 3] =
				hModbus->RegisterAddress[startAddress + i].U8[0];
 8001786:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <modbusRead1Register+0xe8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	88bb      	ldrh	r3, [r7, #4]
 800178e:	4423      	add	r3, r4
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 3] =
 8001794:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <modbusRead1Register+0xe8>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	0063      	lsls	r3, r4, #1
 800179a:	3303      	adds	r3, #3
				hModbus->RegisterAddress[startAddress + i].U8[0];
 800179c:	7809      	ldrb	r1, [r1, #0]
		hModbus->Txframe[2 * i + 3] =
 800179e:	4413      	add	r3, r2
 80017a0:	460a      	mov	r2, r1
 80017a2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for (i = 0; i < numberOfDataToRead; i++) {
 80017a6:	3401      	adds	r4, #1
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	429c      	cmp	r4, r3
 80017ac:	dbdb      	blt.n	8001766 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	3301      	adds	r3, #1
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <modbusRead1Register+0xe8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0052      	lsls	r2, r2, #1
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	2000022c 	.word	0x2000022c

080017cc <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <ModbusErrorReply+0x40>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	7e1a      	ldrb	r2, [r3, #24]
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <ModbusErrorReply+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80017ea:	4b08      	ldr	r3, [pc, #32]	@ (800180c <ModbusErrorReply+0x40>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	79fa      	ldrb	r2, [r7, #7]
 80017f0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <ModbusErrorReply+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2202      	movs	r2, #2
 80017fa:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000022c 	.word	0x2000022c

08001810 <Modbus_frame_response>:

void Modbus_frame_response() {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 8001814:	4b09      	ldr	r3, [pc, #36]	@ (800183c <Modbus_frame_response+0x2c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	7e1b      	ldrb	r3, [r3, #24]
 800181a:	2b03      	cmp	r3, #3
 800181c:	d004      	beq.n	8001828 <Modbus_frame_response+0x18>
 800181e:	2b06      	cmp	r3, #6
 8001820:	d105      	bne.n	800182e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001822:	f7ff ff1d 	bl	8001660 <modbusWrite1Register>
		break;
 8001826:	e006      	b.n	8001836 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001828:	f7ff ff5a 	bl	80016e0 <modbusRead1Register>
		break;
 800182c:	e003      	b.n	8001836 <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800182e:	2001      	movs	r0, #1
 8001830:	f7ff ffcc 	bl	80017cc <ModbusErrorReply>
		break;
 8001834:	bf00      	nop

	}
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000022c 	.word	0x2000022c

08001840 <Modbus_Emission>:

void Modbus_Emission() {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001846:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <Modbus_Emission+0xe8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001850:	2b20      	cmp	r3, #32
 8001852:	d15d      	bne.n	8001910 <Modbus_Emission+0xd0>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001854:	4b34      	ldr	r3, [pc, #208]	@ (8001928 <Modbus_Emission+0xe8>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <Modbus_Emission+0xe8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 8001862:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <Modbus_Emission+0xe8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 800186a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe, hModbus->TxCount);
 800186c:	4b2e      	ldr	r3, [pc, #184]	@ (8001928 <Modbus_Emission+0xe8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
 8001874:	4b2c      	ldr	r3, [pc, #176]	@ (8001928 <Modbus_Emission+0xe8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 800187c:	461a      	mov	r2, r3
 800187e:	f009 fc39 	bl	800b0f4 <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 8001882:	4b29      	ldr	r3, [pc, #164]	@ (8001928 <Modbus_Emission+0xe8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800188a:	461a      	mov	r2, r3
 800188c:	4b26      	ldr	r3, [pc, #152]	@ (8001928 <Modbus_Emission+0xe8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	3203      	adds	r2, #3
 8001892:	b292      	uxth	r2, r2
 8001894:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001898:	4b23      	ldr	r3, [pc, #140]	@ (8001928 <Modbus_Emission+0xe8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80018a0:	4b21      	ldr	r3, [pc, #132]	@ (8001928 <Modbus_Emission+0xe8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80018a8:	3b02      	subs	r3, #2
 80018aa:	4619      	mov	r1, r3
 80018ac:	4610      	mov	r0, r2
 80018ae:	f7ff fcbb 	bl	8001228 <CRC16>
 80018b2:	4603      	mov	r3, r0
 80018b4:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 80018b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001928 <Modbus_Emission+0xe8>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <Modbus_Emission+0xe8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 2] = CalculateCRC.U8[0];
 80018c2:	3b02      	subs	r3, #2
 80018c4:	7939      	ldrb	r1, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	460a      	mov	r2, r1
 80018ca:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 80018ce:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <Modbus_Emission+0xe8>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <Modbus_Emission+0xe8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 1] = CalculateCRC.U8[1];
 80018da:	3b01      	subs	r3, #1
 80018dc:	7979      	ldrb	r1, [r7, #5]
 80018de:	4413      	add	r3, r2
 80018e0:	460a      	mov	r2, r1
 80018e2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		//sent modbus

		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <Modbus_Emission+0xe8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018f0:	2b20      	cmp	r3, #32
 80018f2:	d10d      	bne.n	8001910 <Modbus_Emission+0xd0>
			HAL_UART_Transmit_DMA(hModbus->huart,
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <Modbus_Emission+0xe8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68d8      	ldr	r0, [r3, #12]
					hModbus->modbusUartStructure.MessageBufferTx,
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <Modbus_Emission+0xe8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					hModbus->modbusUartStructure.TxTail);
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <Modbus_Emission+0xe8>)
 8001904:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart,
 8001906:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800190a:	461a      	mov	r2, r3
 800190c:	f007 fd9a 	bl	8009444 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001910:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <Modbus_Emission+0xe8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2200      	movs	r2, #0
 8001916:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <Modbus_Emission+0xe8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2200      	movs	r2, #0
 800191e:	755a      	strb	r2, [r3, #21]

}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2000022c 	.word	0x2000022c
 800192c:	00000000 	.word	0x00000000

08001930 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001934:	ed2d 8b02 	vpush	{d8}
 8001938:	b0a7      	sub	sp, #156	@ 0x9c
 800193a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800193c:	f003 f879 	bl	8004a32 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001940:	f001 fb76 	bl	8003030 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001944:	f001 ffd0 	bl	80038e8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001948:	f001 ff9c 	bl	8003884 <MX_DMA_Init>
	MX_TIM4_Init();
 800194c:	f001 fd18 	bl	8003380 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001950:	f001 fd6c 	bl	800342c <MX_TIM5_Init>
	MX_TIM3_Init();
 8001954:	f001 fcbe 	bl	80032d4 <MX_TIM3_Init>
	MX_TIM8_Init();
 8001958:	f001 fdb6 	bl	80034c8 <MX_TIM8_Init>
	MX_TIM15_Init();
 800195c:	f001 fe70 	bl	8003640 <MX_TIM15_Init>
	MX_TIM1_Init();
 8001960:	f001 fbb2 	bl	80030c8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001964:	f001 fc36 	bl	80031d4 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 8001968:	f001 ff3e 	bl	80037e8 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 800196c:	f001 ff0c 	bl	8003788 <MX_TIM16_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001970:	48c3      	ldr	r0, [pc, #780]	@ (8001c80 <main+0x350>)
 8001972:	f004 ff6f 	bl	8006854 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001976:	2100      	movs	r1, #0
 8001978:	48c1      	ldr	r0, [pc, #772]	@ (8001c80 <main+0x350>)
 800197a:	f005 fa37 	bl	8006dec <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 800197e:	2104      	movs	r1, #4
 8001980:	48bf      	ldr	r0, [pc, #764]	@ (8001c80 <main+0x350>)
 8001982:	f005 fa33 	bl	8006dec <HAL_TIM_IC_Start>
	HAL_TIM_Base_Start(&htim2);
 8001986:	48bf      	ldr	r0, [pc, #764]	@ (8001c84 <main+0x354>)
 8001988:	f004 ff64 	bl	8006854 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 800198c:	2100      	movs	r1, #0
 800198e:	48bd      	ldr	r0, [pc, #756]	@ (8001c84 <main+0x354>)
 8001990:	f005 fa2c 	bl	8006dec <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001994:	2104      	movs	r1, #4
 8001996:	48bb      	ldr	r0, [pc, #748]	@ (8001c84 <main+0x354>)
 8001998:	f005 fa28 	bl	8006dec <HAL_TIM_IC_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800199c:	213c      	movs	r1, #60	@ 0x3c
 800199e:	48ba      	ldr	r0, [pc, #744]	@ (8001c88 <main+0x358>)
 80019a0:	f005 fcd2 	bl	8007348 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80019a4:	213c      	movs	r1, #60	@ 0x3c
 80019a6:	48b9      	ldr	r0, [pc, #740]	@ (8001c8c <main+0x35c>)
 80019a8:	f005 fcce 	bl	8007348 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 80019ac:	48b8      	ldr	r0, [pc, #736]	@ (8001c90 <main+0x360>)
 80019ae:	f004 ffc1 	bl	8006934 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8);
 80019b2:	48b8      	ldr	r0, [pc, #736]	@ (8001c94 <main+0x364>)
 80019b4:	f004 ff4e 	bl	8006854 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80019b8:	2108      	movs	r1, #8
 80019ba:	48b6      	ldr	r0, [pc, #728]	@ (8001c94 <main+0x364>)
 80019bc:	f005 f8a0 	bl	8006b00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80019c0:	210c      	movs	r1, #12
 80019c2:	48b4      	ldr	r0, [pc, #720]	@ (8001c94 <main+0x364>)
 80019c4:	f005 f89c 	bl	8006b00 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim15);
 80019c8:	48b3      	ldr	r0, [pc, #716]	@ (8001c98 <main+0x368>)
 80019ca:	f004 ff43 	bl	8006854 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80019ce:	2100      	movs	r1, #0
 80019d0:	48b1      	ldr	r0, [pc, #708]	@ (8001c98 <main+0x368>)
 80019d2:	f005 f895 	bl	8006b00 <HAL_TIM_PWM_Start>
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
	DWT_Init();
 80019d6:	f002 f89f 	bl	8003b18 <DWT_Init>

	PID.Kp = 0.1;
 80019da:	4ab0      	ldr	r2, [pc, #704]	@ (8001c9c <main+0x36c>)
 80019dc:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca0 <main+0x370>)
 80019de:	6193      	str	r3, [r2, #24]
	PID.Ki = 0.00001;
 80019e0:	4aae      	ldr	r2, [pc, #696]	@ (8001c9c <main+0x36c>)
 80019e2:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca4 <main+0x374>)
 80019e4:	61d3      	str	r3, [r2, #28]
	PID.Kd = 0.1;
 80019e6:	4aad      	ldr	r2, [pc, #692]	@ (8001c9c <main+0x36c>)
 80019e8:	4bad      	ldr	r3, [pc, #692]	@ (8001ca0 <main+0x370>)
 80019ea:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 80019ec:	2100      	movs	r1, #0
 80019ee:	48ab      	ldr	r0, [pc, #684]	@ (8001c9c <main+0x36c>)
 80019f0:	f009 fb1e 	bl	800b030 <arm_pid_init_f32>

	Reset_R();
 80019f4:	f002 fc74 	bl	80042e0 <Reset_R>
	Reset_P();
 80019f8:	f002 fc82 	bl	8004300 <Reset_P>
	calibState = CALIB_IDLE;
 80019fc:	4aaa      	ldr	r2, [pc, #680]	@ (8001ca8 <main+0x378>)
 80019fe:	2300      	movs	r3, #0
 8001a00:	7013      	strb	r3, [r2, #0]

	Set_Servo(0);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f002 fc42 	bl	800428c <Set_Servo>

	//BaseSystem//////////
	hmodbus.huart = &huart2;
 8001a08:	4aa8      	ldr	r2, [pc, #672]	@ (8001cac <main+0x37c>)
 8001a0a:	4ba9      	ldr	r3, [pc, #676]	@ (8001cb0 <main+0x380>)
 8001a0c:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim16;
 8001a0e:	4aa7      	ldr	r2, [pc, #668]	@ (8001cac <main+0x37c>)
 8001a10:	4ba8      	ldr	r3, [pc, #672]	@ (8001cb4 <main+0x384>)
 8001a12:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8001a14:	4aa5      	ldr	r2, [pc, #660]	@ (8001cac <main+0x37c>)
 8001a16:	2315      	movs	r3, #21
 8001a18:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8001a1a:	4aa4      	ldr	r2, [pc, #656]	@ (8001cac <main+0x37c>)
 8001a1c:	23c8      	movs	r3, #200	@ 0xc8
 8001a1e:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001a20:	49a5      	ldr	r1, [pc, #660]	@ (8001cb8 <main+0x388>)
 8001a22:	48a2      	ldr	r0, [pc, #648]	@ (8001cac <main+0x37c>)
 8001a24:	f7ff fbaa 	bl	800117c <Modbus_init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		//BaseSystem//////////


		speed_theta  = RAD_TO_DEG10(Revolute_QEIdata.AngularVelocity_rad);
 8001a28:	4ba4      	ldr	r3, [pc, #656]	@ (8001cbc <main+0x38c>)
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd57 	bl	80004e0 <__aeabi_f2d>
 8001a32:	a391      	add	r3, pc, #580	@ (adr r3, 8001c78 <main+0x348>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7fe fdaa 	bl	8000590 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b9d      	ldr	r3, [pc, #628]	@ (8001cc0 <main+0x390>)
 8001a4a:	f7fe fbeb 	bl	8000224 <__adddf3>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7ff f835 	bl	8000ac4 <__aeabi_d2iz>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4a99      	ldr	r2, [pc, #612]	@ (8001cc4 <main+0x394>)
 8001a60:	8013      	strh	r3, [r2, #0]
		accel_theta  = RAD_TO_DEG10(Revolute_QEIdata.AngularAcceleration_rad);
 8001a62:	4b96      	ldr	r3, [pc, #600]	@ (8001cbc <main+0x38c>)
 8001a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd3a 	bl	80004e0 <__aeabi_f2d>
 8001a6c:	a382      	add	r3, pc, #520	@ (adr r3, 8001c78 <main+0x348>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7fe fd8d 	bl	8000590 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	4b8f      	ldr	r3, [pc, #572]	@ (8001cc0 <main+0x390>)
 8001a84:	f7fe fbce 	bl	8000224 <__adddf3>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f7ff f818 	bl	8000ac4 <__aeabi_d2iz>
 8001a94:	4603      	mov	r3, r0
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	4a8b      	ldr	r2, [pc, #556]	@ (8001cc8 <main+0x398>)
 8001a9a:	8013      	strh	r3, [r2, #0]
		pos_theta    = RAD_TO_DEG10(Revolute_QEIdata.RadPosition);
 8001a9c:	4b87      	ldr	r3, [pc, #540]	@ (8001cbc <main+0x38c>)
 8001a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fd1d 	bl	80004e0 <__aeabi_f2d>
 8001aa6:	a374      	add	r3, pc, #464	@ (adr r3, 8001c78 <main+0x348>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fd70 	bl	8000590 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	4b80      	ldr	r3, [pc, #512]	@ (8001cc0 <main+0x390>)
 8001abe:	f7fe fbb1 	bl	8000224 <__adddf3>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7fe fffb 	bl	8000ac4 <__aeabi_d2iz>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	4a7e      	ldr	r2, [pc, #504]	@ (8001ccc <main+0x39c>)
 8001ad4:	8013      	strh	r3, [r2, #0]
		speed_r = FLOAT_TO_intU16(Prismatic_QEIdata.Velocity_mm);
 8001ad6:	4b7e      	ldr	r3, [pc, #504]	@ (8001cd0 <main+0x3a0>)
 8001ad8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001adc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae8:	ee17 3a90 	vmov	r3, s15
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001afa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b02:	ee17 3a90 	vmov	r3, s15
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	4a72      	ldr	r2, [pc, #456]	@ (8001cd4 <main+0x3a4>)
 8001b0a:	8013      	strh	r3, [r2, #0]
		accel_r = FLOAT_TO_intU16(Prismatic_QEIdata.Acceleration_mm);
 8001b0c:	4b70      	ldr	r3, [pc, #448]	@ (8001cd0 <main+0x3a0>)
 8001b0e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001b12:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1e:	ee17 3a90 	vmov	r3, s15
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	ee07 3a90 	vmov	s15, r3
 8001b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b38:	ee17 3a90 	vmov	r3, s15
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	4a66      	ldr	r2, [pc, #408]	@ (8001cd8 <main+0x3a8>)
 8001b40:	8013      	strh	r3, [r2, #0]
		pos_r   = FLOAT_TO_intU16(Prismatic_QEIdata.mmPosition);
 8001b42:	4b63      	ldr	r3, [pc, #396]	@ (8001cd0 <main+0x3a0>)
 8001b44:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b48:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b54:	ee17 3a90 	vmov	r3, s15
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b6e:	ee17 3a90 	vmov	r3, s15
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4a59      	ldr	r2, [pc, #356]	@ (8001cdc <main+0x3ac>)
 8001b76:	8013      	strh	r3, [r2, #0]
//		REG16(REG_ACCELERATION_R) = 100;
//		REG16(REG_POSITION_R) = 100;
//		REG16(REG_SPEED_THETA) = 100;
//		REG16(REG_ACCELERATION_THETA) = 100;
//		REG16(REG_POSITION_THETA) = 100;
		Modbus_Protocal_Worker();
 8001b78:	f7ff fbc2 	bl	8001300 <Modbus_Protocal_Worker>
		//////////////////////

		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8001b7c:	4b43      	ldr	r3, [pc, #268]	@ (8001c8c <main+0x35c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b82:	4b57      	ldr	r3, [pc, #348]	@ (8001ce0 <main+0x3b0>)
 8001b84:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8001b86:	4b40      	ldr	r3, [pc, #256]	@ (8001c88 <main+0x358>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b8c:	4b55      	ldr	r3, [pc, #340]	@ (8001ce4 <main+0x3b4>)
 8001b8e:	601a      	str	r2, [r3, #0]
		//Call every 0.01 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 8001b90:	f002 f8a2 	bl	8003cd8 <micros>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
		if (currentTime > timestamp) {
 8001b9c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001ba0:	4b51      	ldr	r3, [pc, #324]	@ (8001ce8 <main+0x3b8>)
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	4282      	cmp	r2, r0
 8001ba8:	418b      	sbcs	r3, r1
 8001baa:	d211      	bcs.n	8001bd0 <main+0x2a0>
			timestamp = currentTime + 10000;  //us
 8001bac:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001bb0:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001bb4:	1851      	adds	r1, r2, r1
 8001bb6:	6639      	str	r1, [r7, #96]	@ 0x60
 8001bb8:	f143 0300 	adc.w	r3, r3, #0
 8001bbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8001bbe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001bc2:	4b49      	ldr	r3, [pc, #292]	@ (8001ce8 <main+0x3b8>)
 8001bc4:	e9c3 0100 	strd	r0, r1, [r3]
			Prismatic_PosVel_Update();
 8001bc8:	f002 fa38 	bl	800403c <Prismatic_PosVel_Update>
			Revolute_PosVel_Update();
 8001bcc:	f002 f968 	bl	8003ea0 <Revolute_PosVel_Update>
		}
		//Call every 0.1 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 8001bd0:	f002 f882 	bl	8003cd8 <micros>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		if (currentTime1 > timestamp1) {
 8001bdc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001be0:	4b42      	ldr	r3, [pc, #264]	@ (8001cec <main+0x3bc>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	4282      	cmp	r2, r0
 8001be8:	418b      	sbcs	r3, r1
 8001bea:	d20c      	bcs.n	8001c06 <main+0x2d6>
			timestamp1 = currentTime1 + 100000;  //us
 8001bec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001bf0:	493f      	ldr	r1, [pc, #252]	@ (8001cf0 <main+0x3c0>)
 8001bf2:	1851      	adds	r1, r2, r1
 8001bf4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001bf6:	f143 0300 	adc.w	r3, r3, #0
 8001bfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001bfc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001c00:	4b3a      	ldr	r3, [pc, #232]	@ (8001cec <main+0x3bc>)
 8001c02:	e9c3 0100 	strd	r0, r1, [r3]

		}
		End_x = Prismatic_QEIdata.mmPosition
 8001c06:	4b32      	ldr	r3, [pc, #200]	@ (8001cd0 <main+0x3a0>)
 8001c08:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
				* cosf(Revolute_QEIdata.RadPosition * -1);
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001cbc <main+0x38c>)
 8001c0e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001c12:	eef1 7a67 	vneg.f32	s15, s15
 8001c16:	eeb0 0a67 	vmov.f32	s0, s15
 8001c1a:	f009 fa79 	bl	800b110 <cosf>
 8001c1e:	eef0 7a40 	vmov.f32	s15, s0
 8001c22:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_x = Prismatic_QEIdata.mmPosition
 8001c26:	4b33      	ldr	r3, [pc, #204]	@ (8001cf4 <main+0x3c4>)
 8001c28:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition
 8001c2c:	4b28      	ldr	r3, [pc, #160]	@ (8001cd0 <main+0x3a0>)
 8001c2e:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
				* sinf(Revolute_QEIdata.RadPosition);
 8001c32:	4b22      	ldr	r3, [pc, #136]	@ (8001cbc <main+0x38c>)
 8001c34:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001c38:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3c:	f009 faac 	bl	800b198 <sinf>
 8001c40:	eef0 7a40 	vmov.f32	s15, s0
 8001c44:	ee68 7a27 	vmul.f32	s15, s16, s15
		End_y = Prismatic_QEIdata.mmPosition
 8001c48:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf8 <main+0x3c8>)
 8001c4a:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<RECEIVER>> ////////////////////////
		Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <main+0x354>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b29      	ldr	r3, [pc, #164]	@ (8001cfc <main+0x3cc>)
 8001c58:	601a      	str	r2, [r3, #0]
		Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <main+0x350>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b26      	ldr	r3, [pc, #152]	@ (8001cfc <main+0x3cc>)
 8001c64:	605a      	str	r2, [r3, #4]
		float RX_temp = map(
		__HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_2) - 1500.00, -500.00, 500.00,
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <main+0x354>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc15 	bl	800049c <__aeabi_ui2d>
 8001c72:	e045      	b.n	8001d00 <main+0x3d0>
 8001c74:	f3af 8000 	nop.w
 8001c78:	907e593b 	.word	0x907e593b
 8001c7c:	4081e7a9 	.word	0x4081e7a9
 8001c80:	20000234 	.word	0x20000234
 8001c84:	20000300 	.word	0x20000300
 8001c88:	200003cc 	.word	0x200003cc
 8001c8c:	20000498 	.word	0x20000498
 8001c90:	20000564 	.word	0x20000564
 8001c94:	20000630 	.word	0x20000630
 8001c98:	200006fc 	.word	0x200006fc
 8001c9c:	20000b38 	.word	0x20000b38
 8001ca0:	3dcccccd 	.word	0x3dcccccd
 8001ca4:	3727c5ac 	.word	0x3727c5ac
 8001ca8:	20000b7c 	.word	0x20000b7c
 8001cac:	20000ba8 	.word	0x20000ba8
 8001cb0:	20000894 	.word	0x20000894
 8001cb4:	200007c8 	.word	0x200007c8
 8001cb8:	20001080 	.word	0x20001080
 8001cbc:	20000a70 	.word	0x20000a70
 8001cc0:	3fe00000 	.word	0x3fe00000
 8001cc4:	20001210 	.word	0x20001210
 8001cc8:	20001212 	.word	0x20001212
 8001ccc:	20001214 	.word	0x20001214
 8001cd0:	20000ab0 	.word	0x20000ab0
 8001cd4:	20001216 	.word	0x20001216
 8001cd8:	20001218 	.word	0x20001218
 8001cdc:	2000121a 	.word	0x2000121a
 8001ce0:	20000a68 	.word	0x20000a68
 8001ce4:	20000a6c 	.word	0x20000a6c
 8001ce8:	20001220 	.word	0x20001220
 8001cec:	20001228 	.word	0x20001228
 8001cf0:	000186a0 	.word	0x000186a0
 8001cf4:	20000af0 	.word	0x20000af0
 8001cf8:	20000af4 	.word	0x20000af4
 8001cfc:	20000a3c 	.word	0x20000a3c
 8001d00:	a3c5      	add	r3, pc, #788	@ (adr r3, 8002018 <main+0x6e8>)
 8001d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d06:	f7fe fa8b 	bl	8000220 <__aeabi_dsub>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
		float RX_temp = map(
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7fe feff 	bl	8000b14 <__aeabi_d2f>
 8001d16:	4603      	mov	r3, r0
 8001d18:	ed9f 2ac1 	vldr	s4, [pc, #772]	@ 8002020 <main+0x6f0>
 8001d1c:	eddf 1ac1 	vldr	s3, [pc, #772]	@ 8002024 <main+0x6f4>
 8001d20:	ed9f 1ac1 	vldr	s2, [pc, #772]	@ 8002028 <main+0x6f8>
 8001d24:	eddf 0ac1 	vldr	s1, [pc, #772]	@ 800202c <main+0x6fc>
 8001d28:	ee00 3a10 	vmov	s0, r3
 8001d2c:	f001 fec6 	bl	8003abc <map>
 8001d30:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
				-100.00, 100.00);
		float RY_temp = map(
		__HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1) - 18530.00, -500.00, 500.00,
 8001d34:	4bbe      	ldr	r3, [pc, #760]	@ (8002030 <main+0x700>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fbae 	bl	800049c <__aeabi_ui2d>
 8001d40:	a3b3      	add	r3, pc, #716	@ (adr r3, 8002010 <main+0x6e0>)
 8001d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d46:	f7fe fa6b 	bl	8000220 <__aeabi_dsub>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
		float RY_temp = map(
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	f7fe fedf 	bl	8000b14 <__aeabi_d2f>
 8001d56:	4603      	mov	r3, r0
 8001d58:	ed9f 2ab1 	vldr	s4, [pc, #708]	@ 8002020 <main+0x6f0>
 8001d5c:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 8002024 <main+0x6f4>
 8001d60:	ed9f 1ab1 	vldr	s2, [pc, #708]	@ 8002028 <main+0x6f8>
 8001d64:	eddf 0ab1 	vldr	s1, [pc, #708]	@ 800202c <main+0x6fc>
 8001d68:	ee00 3a10 	vmov	s0, r3
 8001d6c:	f001 fea6 	bl	8003abc <map>
 8001d70:	ed87 0a20 	vstr	s0, [r7, #128]	@ 0x80
				-100.00, 100.00);

		if (RX_temp >= -4 && RX_temp <= 4)
 8001d74:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001d78:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8001d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d84:	db0d      	blt.n	8001da2 <main+0x472>
 8001d86:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001d8a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	d804      	bhi.n	8001da2 <main+0x472>
			Receiver[0] = 0.00;
 8001d98:	4aa6      	ldr	r2, [pc, #664]	@ (8002034 <main+0x704>)
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	e01d      	b.n	8001dde <main+0x4ae>
		else if (RX_temp > 100)
 8001da2:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001da6:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8002020 <main+0x6f0>
 8001daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	dd03      	ble.n	8001dbc <main+0x48c>
			Receiver[0] = 100.00;
 8001db4:	4a9f      	ldr	r2, [pc, #636]	@ (8002034 <main+0x704>)
 8001db6:	4ba0      	ldr	r3, [pc, #640]	@ (8002038 <main+0x708>)
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e010      	b.n	8001dde <main+0x4ae>
		else if (RX_temp < -100)
 8001dbc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001dc0:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8002024 <main+0x6f4>
 8001dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	d503      	bpl.n	8001dd6 <main+0x4a6>
			Receiver[0] = -100.00;
 8001dce:	4a99      	ldr	r2, [pc, #612]	@ (8002034 <main+0x704>)
 8001dd0:	4b9a      	ldr	r3, [pc, #616]	@ (800203c <main+0x70c>)
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e003      	b.n	8001dde <main+0x4ae>
		else
			Receiver[0] = RX_temp;
 8001dd6:	4a97      	ldr	r2, [pc, #604]	@ (8002034 <main+0x704>)
 8001dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ddc:	6013      	str	r3, [r2, #0]
		if (RY_temp >= -4 && RY_temp <= 4)
 8001dde:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001de2:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8001de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dee:	db0d      	blt.n	8001e0c <main+0x4dc>
 8001df0:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001df4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e00:	d804      	bhi.n	8001e0c <main+0x4dc>
			Receiver[1] = 0.00;
 8001e02:	4a8c      	ldr	r2, [pc, #560]	@ (8002034 <main+0x704>)
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	6053      	str	r3, [r2, #4]
 8001e0a:	e01d      	b.n	8001e48 <main+0x518>
		else if (RY_temp > 100)
 8001e0c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001e10:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002020 <main+0x6f0>
 8001e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	dd03      	ble.n	8001e26 <main+0x4f6>
			Receiver[1] = 100.00;
 8001e1e:	4a85      	ldr	r2, [pc, #532]	@ (8002034 <main+0x704>)
 8001e20:	4b85      	ldr	r3, [pc, #532]	@ (8002038 <main+0x708>)
 8001e22:	6053      	str	r3, [r2, #4]
 8001e24:	e010      	b.n	8001e48 <main+0x518>
		else if (RY_temp < -100)
 8001e26:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001e2a:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8002024 <main+0x6f4>
 8001e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e36:	d503      	bpl.n	8001e40 <main+0x510>
			Receiver[1] = -100.00;
 8001e38:	4a7e      	ldr	r2, [pc, #504]	@ (8002034 <main+0x704>)
 8001e3a:	4b80      	ldr	r3, [pc, #512]	@ (800203c <main+0x70c>)
 8001e3c:	6053      	str	r3, [r2, #4]
 8001e3e:	e003      	b.n	8001e48 <main+0x518>
		else
			Receiver[1] = RY_temp;
 8001e40:	4a7c      	ldr	r2, [pc, #496]	@ (8002034 <main+0x704>)
 8001e42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e46:	6053      	str	r3, [r2, #4]

		Receiver[2] = map((float) pulse_width_us[0] - 1500.00, -500.00, 500.00,
 8001e48:	4b7d      	ldr	r3, [pc, #500]	@ (8002040 <main+0x710>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	ee07 3a90 	vmov	s15, r3
 8001e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e54:	ee17 0a90 	vmov	r0, s15
 8001e58:	f7fe fb42 	bl	80004e0 <__aeabi_f2d>
 8001e5c:	a36e      	add	r3, pc, #440	@ (adr r3, 8002018 <main+0x6e8>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f7fe f9dd 	bl	8000220 <__aeabi_dsub>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f7fe fe51 	bl	8000b14 <__aeabi_d2f>
 8001e72:	4603      	mov	r3, r0
 8001e74:	ed9f 2a6a 	vldr	s4, [pc, #424]	@ 8002020 <main+0x6f0>
 8001e78:	eddf 1a6a 	vldr	s3, [pc, #424]	@ 8002024 <main+0x6f4>
 8001e7c:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 8002028 <main+0x6f8>
 8001e80:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 800202c <main+0x6fc>
 8001e84:	ee00 3a10 	vmov	s0, r3
 8001e88:	f001 fe18 	bl	8003abc <map>
 8001e8c:	eef0 7a40 	vmov.f32	s15, s0
 8001e90:	4b68      	ldr	r3, [pc, #416]	@ (8002034 <main+0x704>)
 8001e92:	edc3 7a02 	vstr	s15, [r3, #8]
				-100.00, 100.00);
		Receiver[3] = map((float) pulse_width_us[1] - 1500.00, -500.00, 500.00,
 8001e96:	4b6a      	ldr	r3, [pc, #424]	@ (8002040 <main+0x710>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea2:	ee17 0a90 	vmov	r0, s15
 8001ea6:	f7fe fb1b 	bl	80004e0 <__aeabi_f2d>
 8001eaa:	a35b      	add	r3, pc, #364	@ (adr r3, 8002018 <main+0x6e8>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe f9b6 	bl	8000220 <__aeabi_dsub>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f7fe fe2a 	bl	8000b14 <__aeabi_d2f>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	ed9f 2a57 	vldr	s4, [pc, #348]	@ 8002020 <main+0x6f0>
 8001ec6:	eddf 1a57 	vldr	s3, [pc, #348]	@ 8002024 <main+0x6f4>
 8001eca:	ed9f 1a57 	vldr	s2, [pc, #348]	@ 8002028 <main+0x6f8>
 8001ece:	eddf 0a57 	vldr	s1, [pc, #348]	@ 800202c <main+0x6fc>
 8001ed2:	ee00 3a10 	vmov	s0, r3
 8001ed6:	f001 fdf1 	bl	8003abc <map>
 8001eda:	eef0 7a40 	vmov.f32	s15, s0
 8001ede:	4b55      	ldr	r3, [pc, #340]	@ (8002034 <main+0x704>)
 8001ee0:	edc3 7a03 	vstr	s15, [r3, #12]
				-100.00, 100.00);
		Receiver[4] = map((float) pulse_width_us[2] - 1500.00, -500.00, 500.00,
 8001ee4:	4b56      	ldr	r3, [pc, #344]	@ (8002040 <main+0x710>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	ee07 3a90 	vmov	s15, r3
 8001eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ef0:	ee17 0a90 	vmov	r0, s15
 8001ef4:	f7fe faf4 	bl	80004e0 <__aeabi_f2d>
 8001ef8:	a347      	add	r3, pc, #284	@ (adr r3, 8002018 <main+0x6e8>)
 8001efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efe:	f7fe f98f 	bl	8000220 <__aeabi_dsub>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f7fe fe03 	bl	8000b14 <__aeabi_d2f>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	ed9f 2a43 	vldr	s4, [pc, #268]	@ 8002020 <main+0x6f0>
 8001f14:	eddf 1a43 	vldr	s3, [pc, #268]	@ 8002024 <main+0x6f4>
 8001f18:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 8002028 <main+0x6f8>
 8001f1c:	eddf 0a43 	vldr	s1, [pc, #268]	@ 800202c <main+0x6fc>
 8001f20:	ee00 3a10 	vmov	s0, r3
 8001f24:	f001 fdca 	bl	8003abc <map>
 8001f28:	eef0 7a40 	vmov.f32	s15, s0
 8001f2c:	4b41      	ldr	r3, [pc, #260]	@ (8002034 <main+0x704>)
 8001f2e:	edc3 7a04 	vstr	s15, [r3, #16]
				-100.00, 100.00);

		//Adjust as needed
		vx = map((float) Receiver[0], -100.00, 100.00, -300.00, 300.00);
 8001f32:	4b40      	ldr	r3, [pc, #256]	@ (8002034 <main+0x704>)
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	ed9f 2a42 	vldr	s4, [pc, #264]	@ 8002044 <main+0x714>
 8001f3c:	eddf 1a42 	vldr	s3, [pc, #264]	@ 8002048 <main+0x718>
 8001f40:	ed9f 1a37 	vldr	s2, [pc, #220]	@ 8002020 <main+0x6f0>
 8001f44:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8002024 <main+0x6f4>
 8001f48:	eeb0 0a67 	vmov.f32	s0, s15
 8001f4c:	f001 fdb6 	bl	8003abc <map>
 8001f50:	eef0 7a40 	vmov.f32	s15, s0
 8001f54:	4b3d      	ldr	r3, [pc, #244]	@ (800204c <main+0x71c>)
 8001f56:	edc3 7a00 	vstr	s15, [r3]
		vy = map((float) Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8001f5a:	4b36      	ldr	r3, [pc, #216]	@ (8002034 <main+0x704>)
 8001f5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f60:	ed9f 2a38 	vldr	s4, [pc, #224]	@ 8002044 <main+0x714>
 8001f64:	eddf 1a38 	vldr	s3, [pc, #224]	@ 8002048 <main+0x718>
 8001f68:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 8002020 <main+0x6f0>
 8001f6c:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8002024 <main+0x6f4>
 8001f70:	eeb0 0a67 	vmov.f32	s0, s15
 8001f74:	f001 fda2 	bl	8003abc <map>
 8001f78:	eef0 7a40 	vmov.f32	s15, s0
 8001f7c:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <main+0x720>)
 8001f7e:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8001f82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f86:	4833      	ldr	r0, [pc, #204]	@ (8002054 <main+0x724>)
 8001f88:	f003 fb88 	bl	800569c <HAL_GPIO_ReadPin>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d10e      	bne.n	8001fb0 <main+0x680>
			Mode = 0;
 8001f92:	4a31      	ldr	r2, [pc, #196]	@ (8002058 <main+0x728>)
 8001f94:	2300      	movs	r3, #0
 8001f96:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 8001f98:	4a30      	ldr	r2, [pc, #192]	@ (800205c <main+0x72c>)
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f002 f974 	bl	800428c <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001faa:	482a      	ldr	r0, [pc, #168]	@ (8002054 <main+0x724>)
 8001fac:	f003 fb8e 	bl	80056cc <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1) {
 8001fb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fb4:	482a      	ldr	r0, [pc, #168]	@ (8002060 <main+0x730>)
 8001fb6:	f003 fb71 	bl	800569c <HAL_GPIO_ReadPin>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d108      	bne.n	8001fd2 <main+0x6a2>
			EmergencyState = 0;
 8001fc0:	4a26      	ldr	r2, [pc, #152]	@ (800205c <main+0x72c>)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fcc:	4821      	ldr	r0, [pc, #132]	@ (8002054 <main+0x724>)
 8001fce:	f003 fb7d 	bl	80056cc <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 8001fd2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fd6:	4822      	ldr	r0, [pc, #136]	@ (8002060 <main+0x730>)
 8001fd8:	f003 fb60 	bl	800569c <HAL_GPIO_ReadPin>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d102      	bne.n	8001fe8 <main+0x6b8>
			Pen_Status = 0;
 8001fe2:	4a20      	ldr	r2, [pc, #128]	@ (8002064 <main+0x734>)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1) {
 8001fe8:	2104      	movs	r1, #4
 8001fea:	481d      	ldr	r0, [pc, #116]	@ (8002060 <main+0x730>)
 8001fec:	f003 fb56 	bl	800569c <HAL_GPIO_ReadPin>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d102      	bne.n	8001ffc <main+0x6cc>
			Pen_Status = 1;
 8001ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8002064 <main+0x734>)
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	7013      	strb	r3, [r2, #0]
		}

		if (EmergencyState == 1) {
 8001ffc:	4b17      	ldr	r3, [pc, #92]	@ (800205c <main+0x72c>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d131      	bne.n	8002068 <main+0x738>
			Mode = 0;
 8002004:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <main+0x728>)
 8002006:	2300      	movs	r3, #0
 8002008:	7013      	strb	r3, [r2, #0]
 800200a:	e1a0      	b.n	800234e <main+0xa1e>
 800200c:	f3af 8000 	nop.w
 8002010:	00000000 	.word	0x00000000
 8002014:	40d21880 	.word	0x40d21880
 8002018:	00000000 	.word	0x00000000
 800201c:	40977000 	.word	0x40977000
 8002020:	42c80000 	.word	0x42c80000
 8002024:	c2c80000 	.word	0xc2c80000
 8002028:	43fa0000 	.word	0x43fa0000
 800202c:	c3fa0000 	.word	0xc3fa0000
 8002030:	20000234 	.word	0x20000234
 8002034:	20000a28 	.word	0x20000a28
 8002038:	42c80000 	.word	0x42c80000
 800203c:	c2c80000 	.word	0xc2c80000
 8002040:	20000a5c 	.word	0x20000a5c
 8002044:	43960000 	.word	0x43960000
 8002048:	c3960000 	.word	0xc3960000
 800204c:	20000ae8 	.word	0x20000ae8
 8002050:	20000aec 	.word	0x20000aec
 8002054:	48000800 	.word	0x48000800
 8002058:	20000b28 	.word	0x20000b28
 800205c:	20000b29 	.word	0x20000b29
 8002060:	48000400 	.word	0x48000400
 8002064:	20000b2b 	.word	0x20000b2b
		} else if (Receiver[2] < -30 && Receiver[4] < -30) {
 8002068:	4ba7      	ldr	r3, [pc, #668]	@ (8002308 <main+0x9d8>)
 800206a:	edd3 7a02 	vldr	s15, [r3, #8]
 800206e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	d513      	bpl.n	80020a4 <main+0x774>
 800207c:	4ba2      	ldr	r3, [pc, #648]	@ (8002308 <main+0x9d8>)
 800207e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002082:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800208a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208e:	d509      	bpl.n	80020a4 <main+0x774>
			Mode = 0;
 8002090:	4a9e      	ldr	r2, [pc, #632]	@ (800230c <main+0x9dc>)
 8002092:	2300      	movs	r3, #0
 8002094:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800209c:	489c      	ldr	r0, [pc, #624]	@ (8002310 <main+0x9e0>)
 800209e:	f003 fb15 	bl	80056cc <HAL_GPIO_WritePin>
 80020a2:	e154      	b.n	800234e <main+0xa1e>
		} else if (Receiver[3] > 0 && IsPress == 0) {
 80020a4:	4b98      	ldr	r3, [pc, #608]	@ (8002308 <main+0x9d8>)
 80020a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80020aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	f340 8149 	ble.w	8002348 <main+0xa18>
 80020b6:	4b97      	ldr	r3, [pc, #604]	@ (8002314 <main+0x9e4>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 8144 	bne.w	8002348 <main+0xa18>
			IsPress = 1;
 80020c0:	4a94      	ldr	r2, [pc, #592]	@ (8002314 <main+0x9e4>)
 80020c2:	2301      	movs	r3, #1
 80020c4:	7013      	strb	r3, [r2, #0]
			calibState = CALIB_IDLE;
 80020c6:	4a94      	ldr	r2, [pc, #592]	@ (8002318 <main+0x9e8>)
 80020c8:	2300      	movs	r3, #0
 80020ca:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 80020cc:	4b8e      	ldr	r3, [pc, #568]	@ (8002308 <main+0x9d8>)
 80020ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80020d2:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80020d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020de:	dd2c      	ble.n	800213a <main+0x80a>
 80020e0:	4b89      	ldr	r3, [pc, #548]	@ (8002308 <main+0x9d8>)
 80020e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80020e6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80020ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f2:	d522      	bpl.n	800213a <main+0x80a>
 80020f4:	4b84      	ldr	r3, [pc, #528]	@ (8002308 <main+0x9d8>)
 80020f6:	edd3 7a04 	vldr	s15, [r3, #16]
 80020fa:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80020fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002106:	d518      	bpl.n	800213a <main+0x80a>
				if (Mode != 1) {
 8002108:	4b80      	ldr	r3, [pc, #512]	@ (800230c <main+0x9dc>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d003      	beq.n	8002118 <main+0x7e8>
					Mode = 1;
 8002110:	4a7e      	ldr	r2, [pc, #504]	@ (800230c <main+0x9dc>)
 8002112:	2301      	movs	r3, #1
 8002114:	7013      	strb	r3, [r2, #0]
				if (Mode != 1) {
 8002116:	e0f5      	b.n	8002304 <main+0x9d4>
				} else {
					TargetX = End_x;
 8002118:	4b80      	ldr	r3, [pc, #512]	@ (800231c <main+0x9ec>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b80      	ldr	r3, [pc, #512]	@ (8002320 <main+0x9f0>)
 800211e:	601a      	str	r2, [r3, #0]
					TargetY = End_y;
 8002120:	4b80      	ldr	r3, [pc, #512]	@ (8002324 <main+0x9f4>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b80      	ldr	r3, [pc, #512]	@ (8002328 <main+0x9f8>)
 8002126:	601a      	str	r2, [r3, #0]
					TargetR = Revolute_QEIdata.RadPosition;
 8002128:	4b80      	ldr	r3, [pc, #512]	@ (800232c <main+0x9fc>)
 800212a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800212c:	4b80      	ldr	r3, [pc, #512]	@ (8002330 <main+0xa00>)
 800212e:	601a      	str	r2, [r3, #0]
					TargetP = Prismatic_QEIdata.mmPosition;
 8002130:	4b80      	ldr	r3, [pc, #512]	@ (8002334 <main+0xa04>)
 8002132:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002134:	4b80      	ldr	r3, [pc, #512]	@ (8002338 <main+0xa08>)
 8002136:	601a      	str	r2, [r3, #0]
				if (Mode != 1) {
 8002138:	e0e4      	b.n	8002304 <main+0x9d4>
				}
			} else if (Receiver[2] > 30 && Receiver[4] < -30) {
 800213a:	4b73      	ldr	r3, [pc, #460]	@ (8002308 <main+0x9d8>)
 800213c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002140:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214c:	dd0d      	ble.n	800216a <main+0x83a>
 800214e:	4b6e      	ldr	r3, [pc, #440]	@ (8002308 <main+0x9d8>)
 8002150:	edd3 7a04 	vldr	s15, [r3, #16]
 8002154:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002158:	eef4 7ac7 	vcmpe.f32	s15, s14
 800215c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002160:	d503      	bpl.n	800216a <main+0x83a>
				Mode = 2;
 8002162:	4a6a      	ldr	r2, [pc, #424]	@ (800230c <main+0x9dc>)
 8002164:	2302      	movs	r3, #2
 8002166:	7013      	strb	r3, [r2, #0]
 8002168:	e0cc      	b.n	8002304 <main+0x9d4>
			} else if (Receiver[2] < -30 && Receiver[4] > -30
 800216a:	4b67      	ldr	r3, [pc, #412]	@ (8002308 <main+0x9d8>)
 800216c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002170:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217c:	d517      	bpl.n	80021ae <main+0x87e>
 800217e:	4b62      	ldr	r3, [pc, #392]	@ (8002308 <main+0x9d8>)
 8002180:	edd3 7a04 	vldr	s15, [r3, #16]
 8002184:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002190:	dd0d      	ble.n	80021ae <main+0x87e>
					&& Receiver[4] < 30) {
 8002192:	4b5d      	ldr	r3, [pc, #372]	@ (8002308 <main+0x9d8>)
 8002194:	edd3 7a04 	vldr	s15, [r3, #16]
 8002198:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800219c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a4:	d503      	bpl.n	80021ae <main+0x87e>
				Mode = 3;
 80021a6:	4a59      	ldr	r2, [pc, #356]	@ (800230c <main+0x9dc>)
 80021a8:	2303      	movs	r3, #3
 80021aa:	7013      	strb	r3, [r2, #0]
 80021ac:	e0aa      	b.n	8002304 <main+0x9d4>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 80021ae:	4b56      	ldr	r3, [pc, #344]	@ (8002308 <main+0x9d8>)
 80021b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80021b4:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80021b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c0:	dd21      	ble.n	8002206 <main+0x8d6>
 80021c2:	4b51      	ldr	r3, [pc, #324]	@ (8002308 <main+0x9d8>)
 80021c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80021c8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80021cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d4:	d517      	bpl.n	8002206 <main+0x8d6>
					&& Receiver[4] > -30 && Receiver[4] < 30) {
 80021d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002308 <main+0x9d8>)
 80021d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80021dc:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80021e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	dd0d      	ble.n	8002206 <main+0x8d6>
 80021ea:	4b47      	ldr	r3, [pc, #284]	@ (8002308 <main+0x9d8>)
 80021ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80021f0:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80021f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fc:	d503      	bpl.n	8002206 <main+0x8d6>
				Mode = 4;
 80021fe:	4a43      	ldr	r2, [pc, #268]	@ (800230c <main+0x9dc>)
 8002200:	2304      	movs	r3, #4
 8002202:	7013      	strb	r3, [r2, #0]
 8002204:	e07e      	b.n	8002304 <main+0x9d4>
			} else if (Receiver[2] > 30 && Receiver[4] > -30
 8002206:	4b40      	ldr	r3, [pc, #256]	@ (8002308 <main+0x9d8>)
 8002208:	edd3 7a02 	vldr	s15, [r3, #8]
 800220c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002218:	dd17      	ble.n	800224a <main+0x91a>
 800221a:	4b3b      	ldr	r3, [pc, #236]	@ (8002308 <main+0x9d8>)
 800221c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002220:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222c:	dd0d      	ble.n	800224a <main+0x91a>
					&& Receiver[4] < 30) {
 800222e:	4b36      	ldr	r3, [pc, #216]	@ (8002308 <main+0x9d8>)
 8002230:	edd3 7a04 	vldr	s15, [r3, #16]
 8002234:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800223c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002240:	d503      	bpl.n	800224a <main+0x91a>
				Mode = 5;
 8002242:	4a32      	ldr	r2, [pc, #200]	@ (800230c <main+0x9dc>)
 8002244:	2305      	movs	r3, #5
 8002246:	7013      	strb	r3, [r2, #0]
 8002248:	e05c      	b.n	8002304 <main+0x9d4>
			} else if (Receiver[2] < -30 && Receiver[4] > 30) {
 800224a:	4b2f      	ldr	r3, [pc, #188]	@ (8002308 <main+0x9d8>)
 800224c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002250:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225c:	d50d      	bpl.n	800227a <main+0x94a>
 800225e:	4b2a      	ldr	r3, [pc, #168]	@ (8002308 <main+0x9d8>)
 8002260:	edd3 7a04 	vldr	s15, [r3, #16]
 8002264:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800226c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002270:	dd03      	ble.n	800227a <main+0x94a>
				Mode = 6;
 8002272:	4a26      	ldr	r2, [pc, #152]	@ (800230c <main+0x9dc>)
 8002274:	2306      	movs	r3, #6
 8002276:	7013      	strb	r3, [r2, #0]
 8002278:	e044      	b.n	8002304 <main+0x9d4>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 800227a:	4b23      	ldr	r3, [pc, #140]	@ (8002308 <main+0x9d8>)
 800227c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002280:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	dd17      	ble.n	80022be <main+0x98e>
 800228e:	4b1e      	ldr	r3, [pc, #120]	@ (8002308 <main+0x9d8>)
 8002290:	edd3 7a02 	vldr	s15, [r3, #8]
 8002294:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	d50d      	bpl.n	80022be <main+0x98e>
					&& Receiver[4] > 30) {
 80022a2:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <main+0x9d8>)
 80022a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80022a8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80022ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	dd03      	ble.n	80022be <main+0x98e>
				Mode = 7;
 80022b6:	4a15      	ldr	r2, [pc, #84]	@ (800230c <main+0x9dc>)
 80022b8:	2307      	movs	r3, #7
 80022ba:	7013      	strb	r3, [r2, #0]
 80022bc:	e022      	b.n	8002304 <main+0x9d4>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 80022be:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <main+0x9d8>)
 80022c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80022c4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80022c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	dc00      	bgt.n	80022d4 <main+0x9a4>
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 80022d2:	e03c      	b.n	800234e <main+0xa1e>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <main+0x9d8>)
 80022d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80022da:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80022de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e6:	dc00      	bgt.n	80022ea <main+0x9ba>
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 80022e8:	e031      	b.n	800234e <main+0xa1e>
				loop_counter = 0;
 80022ea:	4a14      	ldr	r2, [pc, #80]	@ (800233c <main+0xa0c>)
 80022ec:	2300      	movs	r3, #0
 80022ee:	6013      	str	r3, [r2, #0]
				TargetR = 4.18879;
 80022f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002330 <main+0xa00>)
 80022f2:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <main+0xa10>)
 80022f4:	6013      	str	r3, [r2, #0]
				TargetP = 50;
 80022f6:	4a10      	ldr	r2, [pc, #64]	@ (8002338 <main+0xa08>)
 80022f8:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <main+0xa14>)
 80022fa:	6013      	str	r3, [r2, #0]
				Mode = 8;
 80022fc:	4a03      	ldr	r2, [pc, #12]	@ (800230c <main+0x9dc>)
 80022fe:	2308      	movs	r3, #8
 8002300:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30) {
 8002302:	e024      	b.n	800234e <main+0xa1e>
 8002304:	e023      	b.n	800234e <main+0xa1e>
 8002306:	bf00      	nop
 8002308:	20000a28 	.word	0x20000a28
 800230c:	20000b28 	.word	0x20000b28
 8002310:	48000800 	.word	0x48000800
 8002314:	20000b2a 	.word	0x20000b2a
 8002318:	20000b7c 	.word	0x20000b7c
 800231c:	20000af0 	.word	0x20000af0
 8002320:	20000af8 	.word	0x20000af8
 8002324:	20000af4 	.word	0x20000af4
 8002328:	20000afc 	.word	0x20000afc
 800232c:	20000a70 	.word	0x20000a70
 8002330:	20000b00 	.word	0x20000b00
 8002334:	20000ab0 	.word	0x20000ab0
 8002338:	20000b04 	.word	0x20000b04
 800233c:	20000b98 	.word	0x20000b98
 8002340:	40860a91 	.word	0x40860a91
 8002344:	42480000 	.word	0x42480000
			}
		} else {
			IsPress = 0;
 8002348:	4acd      	ldr	r2, [pc, #820]	@ (8002680 <main+0xd50>)
 800234a:	2300      	movs	r3, #0
 800234c:	7013      	strb	r3, [r2, #0]
//			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
//		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<STOP>> ////////////////////////////
		if (Mode == 0) {
 800234e:	4bcd      	ldr	r3, [pc, #820]	@ (8002684 <main+0xd54>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <main+0xa40>
			Set_Motor(0, 0);
 8002356:	ed9f 0acc 	vldr	s0, [pc, #816]	@ 8002688 <main+0xd58>
 800235a:	2000      	movs	r0, #0
 800235c:	f001 ff18 	bl	8004190 <Set_Motor>
			Set_Motor(1, 0);
 8002360:	ed9f 0ac9 	vldr	s0, [pc, #804]	@ 8002688 <main+0xd58>
 8002364:	2001      	movs	r0, #1
 8002366:	f001 ff13 	bl	8004190 <Set_Motor>
			Set_Servo(0);
 800236a:	2000      	movs	r0, #0
 800236c:	f001 ff8e 	bl	800428c <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MANUAL>> //////////////////////////
		if (Mode == 1) {
 8002370:	4bc4      	ldr	r3, [pc, #784]	@ (8002684 <main+0xd54>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	f040 8102 	bne.w	800257e <main+0xc4e>
			//////////////////////// <<CONTROL>> /////////////////////////
//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
			TargetRVel =
					(map((float) Receiver[0], -100.00, 100.00, -1.00, 1.00))
 800237a:	4bc4      	ldr	r3, [pc, #784]	@ (800268c <main+0xd5c>)
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8002384:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 8002388:	ed9f 1ac1 	vldr	s2, [pc, #772]	@ 8002690 <main+0xd60>
 800238c:	eddf 0ac1 	vldr	s1, [pc, #772]	@ 8002694 <main+0xd64>
 8002390:	eeb0 0a67 	vmov.f32	s0, s15
 8002394:	f001 fb92 	bl	8003abc <map>
 8002398:	eef0 7a40 	vmov.f32	s15, s0
							* -1;
 800239c:	eef1 7a67 	vneg.f32	s15, s15
			TargetRVel =
 80023a0:	4bbd      	ldr	r3, [pc, #756]	@ (8002698 <main+0xd68>)
 80023a2:	edc3 7a00 	vstr	s15, [r3]
			TargetPVel = map((float) Receiver[1], -100.00, 100.00, -500.00,
 80023a6:	4bb9      	ldr	r3, [pc, #740]	@ (800268c <main+0xd5c>)
 80023a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80023ac:	ed9f 2abb 	vldr	s4, [pc, #748]	@ 800269c <main+0xd6c>
 80023b0:	eddf 1abb 	vldr	s3, [pc, #748]	@ 80026a0 <main+0xd70>
 80023b4:	ed9f 1ab6 	vldr	s2, [pc, #728]	@ 8002690 <main+0xd60>
 80023b8:	eddf 0ab6 	vldr	s1, [pc, #728]	@ 8002694 <main+0xd64>
 80023bc:	eeb0 0a67 	vmov.f32	s0, s15
 80023c0:	f001 fb7c 	bl	8003abc <map>
 80023c4:	eef0 7a40 	vmov.f32	s15, s0
 80023c8:	4bb6      	ldr	r3, [pc, #728]	@ (80026a4 <main+0xd74>)
 80023ca:	edc3 7a00 	vstr	s15, [r3]
					500.00);
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MOTOR>> ///////////////////////////
			R_Velo_Error = (TargetRVel - Revolute_QEIdata.AngularVelocity_rad)
 80023ce:	4bb2      	ldr	r3, [pc, #712]	@ (8002698 <main+0xd68>)
 80023d0:	ed93 7a00 	vldr	s14, [r3]
 80023d4:	4bb4      	ldr	r3, [pc, #720]	@ (80026a8 <main+0xd78>)
 80023d6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80023da:	ee77 7a67 	vsub.f32	s15, s14, s15
					* -1;
 80023de:	eef1 7a67 	vneg.f32	s15, s15
			R_Velo_Error = (TargetRVel - Revolute_QEIdata.AngularVelocity_rad)
 80023e2:	4bb2      	ldr	r3, [pc, #712]	@ (80026ac <main+0xd7c>)
 80023e4:	edc3 7a00 	vstr	s15, [r3]
			P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity_mm;
 80023e8:	4bae      	ldr	r3, [pc, #696]	@ (80026a4 <main+0xd74>)
 80023ea:	ed93 7a00 	vldr	s14, [r3]
 80023ee:	4bb0      	ldr	r3, [pc, #704]	@ (80026b0 <main+0xd80>)
 80023f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80023f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f8:	4bae      	ldr	r3, [pc, #696]	@ (80026b4 <main+0xd84>)
 80023fa:	edc3 7a00 	vstr	s15, [r3]
//			PID.Kd = 0.0;
//			arm_pid_init_f32(&PID, 1);
//			P_Speed = arm_pid_f32(&PID, P_Velo_Error);

			static uint64_t timestampState1 = 0;
			int64_t currentTimeState1 = micros();
 80023fe:	f001 fc6b 	bl	8003cd8 <micros>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
			if (currentTimeState1 > timestampState1) {
 800240a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800240e:	4baa      	ldr	r3, [pc, #680]	@ (80026b8 <main+0xd88>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	4282      	cmp	r2, r0
 8002416:	418b      	sbcs	r3, r1
 8002418:	d23f      	bcs.n	800249a <main+0xb6a>
				timestampState1 = currentTimeState1 + 10000;		//us
 800241a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800241e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002422:	1851      	adds	r1, r2, r1
 8002424:	6539      	str	r1, [r7, #80]	@ 0x50
 8002426:	f143 0300 	adc.w	r3, r3, #0
 800242a:	657b      	str	r3, [r7, #84]	@ 0x54
 800242c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002430:	4ba1      	ldr	r3, [pc, #644]	@ (80026b8 <main+0xd88>)
 8002432:	e9c3 0100 	strd	r0, r1, [r3]
				R_Speed = PID_Update(R_Velo_Error, 100.00f, 0.10f, 0.00f, 0.01f,
 8002436:	4b9d      	ldr	r3, [pc, #628]	@ (80026ac <main+0xd7c>)
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	489f      	ldr	r0, [pc, #636]	@ (80026bc <main+0xd8c>)
 800243e:	ed9f 3a94 	vldr	s6, [pc, #592]	@ 8002690 <main+0xd60>
 8002442:	eddf 2a94 	vldr	s5, [pc, #592]	@ 8002694 <main+0xd64>
 8002446:	ed9f 2a9e 	vldr	s4, [pc, #632]	@ 80026c0 <main+0xd90>
 800244a:	eddf 1a8f 	vldr	s3, [pc, #572]	@ 8002688 <main+0xd58>
 800244e:	ed9f 1a9d 	vldr	s2, [pc, #628]	@ 80026c4 <main+0xd94>
 8002452:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 8002690 <main+0xd60>
 8002456:	eeb0 0a67 	vmov.f32	s0, s15
 800245a:	f001 fc57 	bl	8003d0c <PID_Update>
 800245e:	eef0 7a40 	vmov.f32	s15, s0
 8002462:	4b99      	ldr	r3, [pc, #612]	@ (80026c8 <main+0xd98>)
 8002464:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_r_v);
				P_Speed = PID_Update(P_Velo_Error, 0.2f, 1.5f, 0.00f, 0.01f,
 8002468:	4b92      	ldr	r3, [pc, #584]	@ (80026b4 <main+0xd84>)
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	4897      	ldr	r0, [pc, #604]	@ (80026cc <main+0xd9c>)
 8002470:	ed9f 3a87 	vldr	s6, [pc, #540]	@ 8002690 <main+0xd60>
 8002474:	eddf 2a87 	vldr	s5, [pc, #540]	@ 8002694 <main+0xd64>
 8002478:	ed9f 2a91 	vldr	s4, [pc, #580]	@ 80026c0 <main+0xd90>
 800247c:	eddf 1a82 	vldr	s3, [pc, #520]	@ 8002688 <main+0xd58>
 8002480:	eeb7 1a08 	vmov.f32	s2, #120	@ 0x3fc00000  1.5
 8002484:	eddf 0a92 	vldr	s1, [pc, #584]	@ 80026d0 <main+0xda0>
 8002488:	eeb0 0a67 	vmov.f32	s0, s15
 800248c:	f001 fc3e 	bl	8003d0c <PID_Update>
 8002490:	eef0 7a40 	vmov.f32	s15, s0
 8002494:	4b8f      	ldr	r3, [pc, #572]	@ (80026d4 <main+0xda4>)
 8002496:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_p_v);
			}

			R_Speed = Receiver[0];
 800249a:	4b7c      	ldr	r3, [pc, #496]	@ (800268c <main+0xd5c>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4b8a      	ldr	r3, [pc, #552]	@ (80026c8 <main+0xd98>)
 80024a0:	601a      	str	r2, [r3, #0]
//			P_Speed = Receiver[1];

			if (Revolute_QEIdata.RadPosition < -1.91986 && R_Speed > 0) {
 80024a2:	4b81      	ldr	r3, [pc, #516]	@ (80026a8 <main+0xd78>)
 80024a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe f81a 	bl	80004e0 <__aeabi_f2d>
 80024ac:	a370      	add	r3, pc, #448	@ (adr r3, 8002670 <main+0xd40>)
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	f7fe fadf 	bl	8000a74 <__aeabi_dcmplt>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00b      	beq.n	80024d4 <main+0xba4>
 80024bc:	4b82      	ldr	r3, [pc, #520]	@ (80026c8 <main+0xd98>)
 80024be:	edd3 7a00 	vldr	s15, [r3]
 80024c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ca:	dd03      	ble.n	80024d4 <main+0xba4>
				R_Speed = 0;
 80024cc:	4a7e      	ldr	r2, [pc, #504]	@ (80026c8 <main+0xd98>)
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	6013      	str	r3, [r2, #0]
			}
			if (Revolute_QEIdata.RadPosition > 5.06145 && R_Speed < 0) {
 80024d4:	4b74      	ldr	r3, [pc, #464]	@ (80026a8 <main+0xd78>)
 80024d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f801 	bl	80004e0 <__aeabi_f2d>
 80024de:	a366      	add	r3, pc, #408	@ (adr r3, 8002678 <main+0xd48>)
 80024e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e4:	f7fe fae4 	bl	8000ab0 <__aeabi_dcmpgt>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <main+0xbd6>
 80024ee:	4b76      	ldr	r3, [pc, #472]	@ (80026c8 <main+0xd98>)
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fc:	d503      	bpl.n	8002506 <main+0xbd6>
				R_Speed = 0;
 80024fe:	4a72      	ldr	r2, [pc, #456]	@ (80026c8 <main+0xd98>)
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition > 305 && P_Speed > 0) {
 8002506:	4b6a      	ldr	r3, [pc, #424]	@ (80026b0 <main+0xd80>)
 8002508:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800250c:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 80026d8 <main+0xda8>
 8002510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002518:	dd0b      	ble.n	8002532 <main+0xc02>
 800251a:	4b6e      	ldr	r3, [pc, #440]	@ (80026d4 <main+0xda4>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002528:	dd03      	ble.n	8002532 <main+0xc02>
				P_Speed = 0;
 800252a:	4a6a      	ldr	r2, [pc, #424]	@ (80026d4 <main+0xda4>)
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition < -1 && P_Speed < 0) {
 8002532:	4b5f      	ldr	r3, [pc, #380]	@ (80026b0 <main+0xd80>)
 8002534:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002538:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800253c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002544:	d50b      	bpl.n	800255e <main+0xc2e>
 8002546:	4b63      	ldr	r3, [pc, #396]	@ (80026d4 <main+0xda4>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002554:	d503      	bpl.n	800255e <main+0xc2e>
				P_Speed = 0;
 8002556:	4a5f      	ldr	r2, [pc, #380]	@ (80026d4 <main+0xda4>)
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	6013      	str	r3, [r2, #0]
			}

			Set_Motor(0, R_Speed);
 800255e:	4b5a      	ldr	r3, [pc, #360]	@ (80026c8 <main+0xd98>)
 8002560:	edd3 7a00 	vldr	s15, [r3]
 8002564:	eeb0 0a67 	vmov.f32	s0, s15
 8002568:	2000      	movs	r0, #0
 800256a:	f001 fe11 	bl	8004190 <Set_Motor>
			Set_Motor(1, P_Speed);
 800256e:	4b59      	ldr	r3, [pc, #356]	@ (80026d4 <main+0xda4>)
 8002570:	edd3 7a00 	vldr	s15, [r3]
 8002574:	eeb0 0a67 	vmov.f32	s0, s15
 8002578:	2001      	movs	r0, #1
 800257a:	f001 fe09 	bl	8004190 <Set_Motor>
			//////////////////////////////////////////////////////////////
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<GOTO>> ////////////////////////////
		if (Mode == 2) {
 800257e:	4b41      	ldr	r3, [pc, #260]	@ (8002684 <main+0xd54>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b02      	cmp	r3, #2
 8002584:	f040 8105 	bne.w	8002792 <main+0xe62>
			R_Pos_Error = (TargetR - Revolute_QEIdata.RadPosition) * -1;
 8002588:	4b54      	ldr	r3, [pc, #336]	@ (80026dc <main+0xdac>)
 800258a:	ed93 7a00 	vldr	s14, [r3]
 800258e:	4b46      	ldr	r3, [pc, #280]	@ (80026a8 <main+0xd78>)
 8002590:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002598:	eef1 7a67 	vneg.f32	s15, s15
 800259c:	4b50      	ldr	r3, [pc, #320]	@ (80026e0 <main+0xdb0>)
 800259e:	edc3 7a00 	vstr	s15, [r3]
//			PID.Ki = 10;
//			PID.Kd = 0.1;
//			arm_pid_init_f32(&PID, 1);
//			R_Speed = arm_pid_f32(&PID, R_Pos_Error);
//
			P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 80025a2:	4b50      	ldr	r3, [pc, #320]	@ (80026e4 <main+0xdb4>)
 80025a4:	ed93 7a00 	vldr	s14, [r3]
 80025a8:	4b41      	ldr	r3, [pc, #260]	@ (80026b0 <main+0xd80>)
 80025aa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80025ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b2:	4b4d      	ldr	r3, [pc, #308]	@ (80026e8 <main+0xdb8>)
 80025b4:	edc3 7a00 	vstr	s15, [r3]
//			PID.Kd = 0.25;
//			arm_pid_init_f32(&PID, 1);
//			P_Speed = arm_pid_f32(&PID, P_Pos_Error);

			static uint64_t timestampState2 = 0;
			int64_t currentTimeState2 = micros();
 80025b8:	f001 fb8e 	bl	8003cd8 <micros>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
			if (currentTimeState2 > timestampState2) {
 80025c4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80025c8:	4b48      	ldr	r3, [pc, #288]	@ (80026ec <main+0xdbc>)
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	4282      	cmp	r2, r0
 80025d0:	418b      	sbcs	r3, r1
 80025d2:	d23f      	bcs.n	8002654 <main+0xd24>
				timestampState2 = currentTimeState2 + 10000;		//us
 80025d4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80025d8:	f242 7110 	movw	r1, #10000	@ 0x2710
 80025dc:	1851      	adds	r1, r2, r1
 80025de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80025e0:	f143 0300 	adc.w	r3, r3, #0
 80025e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80025ea:	4b40      	ldr	r3, [pc, #256]	@ (80026ec <main+0xdbc>)
 80025ec:	e9c3 0100 	strd	r0, r1, [r3]
				R_Speed = PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f, 0.01f,
 80025f0:	4b3b      	ldr	r3, [pc, #236]	@ (80026e0 <main+0xdb0>)
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	483e      	ldr	r0, [pc, #248]	@ (80026f0 <main+0xdc0>)
 80025f8:	ed9f 3a25 	vldr	s6, [pc, #148]	@ 8002690 <main+0xd60>
 80025fc:	eddf 2a25 	vldr	s5, [pc, #148]	@ 8002694 <main+0xd64>
 8002600:	ed9f 2a2f 	vldr	s4, [pc, #188]	@ 80026c0 <main+0xd90>
 8002604:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 8002608:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 800260c:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 8002610:	eeb0 0a67 	vmov.f32	s0, s15
 8002614:	f001 fb7a 	bl	8003d0c <PID_Update>
 8002618:	eef0 7a40 	vmov.f32	s15, s0
 800261c:	4b2a      	ldr	r3, [pc, #168]	@ (80026c8 <main+0xd98>)
 800261e:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_r);
				P_Speed = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f,
 8002622:	4b31      	ldr	r3, [pc, #196]	@ (80026e8 <main+0xdb8>)
 8002624:	edd3 7a00 	vldr	s15, [r3]
 8002628:	4832      	ldr	r0, [pc, #200]	@ (80026f4 <main+0xdc4>)
 800262a:	ed9f 3a19 	vldr	s6, [pc, #100]	@ 8002690 <main+0xd60>
 800262e:	eddf 2a19 	vldr	s5, [pc, #100]	@ 8002694 <main+0xd64>
 8002632:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 80026c0 <main+0xd90>
 8002636:	eddf 1a30 	vldr	s3, [pc, #192]	@ 80026f8 <main+0xdc8>
 800263a:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 80026fc <main+0xdcc>
 800263e:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8002700 <main+0xdd0>
 8002642:	eeb0 0a67 	vmov.f32	s0, s15
 8002646:	f001 fb61 	bl	8003d0c <PID_Update>
 800264a:	eef0 7a40 	vmov.f32	s15, s0
 800264e:	4b21      	ldr	r3, [pc, #132]	@ (80026d4 <main+0xda4>)
 8002650:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_p);
			}

			Set_Motor(0, R_Speed);
 8002654:	4b1c      	ldr	r3, [pc, #112]	@ (80026c8 <main+0xd98>)
 8002656:	edd3 7a00 	vldr	s15, [r3]
 800265a:	eeb0 0a67 	vmov.f32	s0, s15
 800265e:	2000      	movs	r0, #0
 8002660:	f001 fd96 	bl	8004190 <Set_Motor>
			Set_Motor(1, P_Speed);
 8002664:	4b1b      	ldr	r3, [pc, #108]	@ (80026d4 <main+0xda4>)
 8002666:	edd3 7a00 	vldr	s15, [r3]
 800266a:	e04b      	b.n	8002704 <main+0xdd4>
 800266c:	f3af 8000 	nop.w
 8002670:	1e8e6080 	.word	0x1e8e6080
 8002674:	bffeb7bf 	.word	0xbffeb7bf
 8002678:	bfb15b57 	.word	0xbfb15b57
 800267c:	40143eec 	.word	0x40143eec
 8002680:	20000b2a 	.word	0x20000b2a
 8002684:	20000b28 	.word	0x20000b28
 8002688:	00000000 	.word	0x00000000
 800268c:	20000a28 	.word	0x20000a28
 8002690:	42c80000 	.word	0x42c80000
 8002694:	c2c80000 	.word	0xc2c80000
 8002698:	20000b08 	.word	0x20000b08
 800269c:	43fa0000 	.word	0x43fa0000
 80026a0:	c3fa0000 	.word	0xc3fa0000
 80026a4:	20000b0c 	.word	0x20000b0c
 80026a8:	20000a70 	.word	0x20000a70
 80026ac:	20000b18 	.word	0x20000b18
 80026b0:	20000ab0 	.word	0x20000ab0
 80026b4:	20000b1c 	.word	0x20000b1c
 80026b8:	20001230 	.word	0x20001230
 80026bc:	20000b6c 	.word	0x20000b6c
 80026c0:	3c23d70a 	.word	0x3c23d70a
 80026c4:	3dcccccd 	.word	0x3dcccccd
 80026c8:	20000b20 	.word	0x20000b20
 80026cc:	20000b74 	.word	0x20000b74
 80026d0:	3e4ccccd 	.word	0x3e4ccccd
 80026d4:	20000b24 	.word	0x20000b24
 80026d8:	43988000 	.word	0x43988000
 80026dc:	20000b00 	.word	0x20000b00
 80026e0:	20000b10 	.word	0x20000b10
 80026e4:	20000b04 	.word	0x20000b04
 80026e8:	20000b14 	.word	0x20000b14
 80026ec:	20001238 	.word	0x20001238
 80026f0:	20000b5c 	.word	0x20000b5c
 80026f4:	20000b64 	.word	0x20000b64
 80026f8:	3e19999a 	.word	0x3e19999a
 80026fc:	3f99999a 	.word	0x3f99999a
 8002700:	3eaa7efa 	.word	0x3eaa7efa
 8002704:	eeb0 0a67 	vmov.f32	s0, s15
 8002708:	2001      	movs	r0, #1
 800270a:	f001 fd41 	bl	8004190 <Set_Motor>
			if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 800270e:	4bb7      	ldr	r3, [pc, #732]	@ (80029ec <main+0x10bc>)
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	eef0 7ae7 	vabs.f32	s15, s15
 8002718:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 80029f0 <main+0x10c0>
 800271c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002724:	d52c      	bpl.n	8002780 <main+0xe50>
					&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 8002726:	4bb3      	ldr	r3, [pc, #716]	@ (80029f4 <main+0x10c4>)
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	eef0 7ae7 	vabs.f32	s15, s15
 8002730:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80029f8 <main+0x10c8>
 8002734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	d520      	bpl.n	8002780 <main+0xe50>
				/* within window —— start or continue timer */
				if (lock_timer_us == 0)
 800273e:	4baf      	ldr	r3, [pc, #700]	@ (80029fc <main+0x10cc>)
 8002740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002744:	4313      	orrs	r3, r2
 8002746:	d107      	bne.n	8002758 <main+0xe28>
					lock_timer_us = micros(); /* start timing */
 8002748:	f001 fac6 	bl	8003cd8 <micros>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	49aa      	ldr	r1, [pc, #680]	@ (80029fc <main+0x10cc>)
 8002752:	e9c1 2300 	strd	r2, r3, [r1]
				if (lock_timer_us == 0)
 8002756:	e01b      	b.n	8002790 <main+0xe60>

				else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8002758:	f001 fabe 	bl	8003cd8 <micros>
 800275c:	4ba7      	ldr	r3, [pc, #668]	@ (80029fc <main+0x10cc>)
 800275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002762:	1a84      	subs	r4, r0, r2
 8002764:	eb61 0503 	sbc.w	r5, r1, r3
 8002768:	4ba5      	ldr	r3, [pc, #660]	@ (8002a00 <main+0x10d0>)
 800276a:	429c      	cmp	r4, r3
 800276c:	f175 0300 	sbcs.w	r3, r5, #0
 8002770:	d30e      	bcc.n	8002790 <main+0xe60>
					Set_Servo(1);
 8002772:	2001      	movs	r0, #1
 8002774:	f001 fd8a 	bl	800428c <Set_Servo>
					Mode = 1;
 8002778:	4aa2      	ldr	r2, [pc, #648]	@ (8002a04 <main+0x10d4>)
 800277a:	2301      	movs	r3, #1
 800277c:	7013      	strb	r3, [r2, #0]
				if (lock_timer_us == 0)
 800277e:	e007      	b.n	8002790 <main+0xe60>
				}
			} else {
				lock_timer_us = 0;
 8002780:	499e      	ldr	r1, [pc, #632]	@ (80029fc <main+0x10cc>)
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	e9c1 2300 	strd	r2, r3, [r1]
 800278e:	e000      	b.n	8002792 <main+0xe62>
				if (lock_timer_us == 0)
 8002790:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<CALIBRATING>> /////////////////////
		if (Mode == 3) {
 8002792:	4b9c      	ldr	r3, [pc, #624]	@ (8002a04 <main+0x10d4>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b03      	cmp	r3, #3
 8002798:	f040 825c 	bne.w	8002c54 <main+0x1324>
			switch (calibState) {
 800279c:	4b9a      	ldr	r3, [pc, #616]	@ (8002a08 <main+0x10d8>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b0c      	cmp	r3, #12
 80027a2:	f200 8257 	bhi.w	8002c54 <main+0x1324>
 80027a6:	a201      	add	r2, pc, #4	@ (adr r2, 80027ac <main+0xe7c>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080027e1 	.word	0x080027e1
 80027b0:	08002817 	.word	0x08002817
 80027b4:	0800285d 	.word	0x0800285d
 80027b8:	080028a7 	.word	0x080028a7
 80027bc:	080028f1 	.word	0x080028f1
 80027c0:	0800293f 	.word	0x0800293f
 80027c4:	08002997 	.word	0x08002997
 80027c8:	080029d7 	.word	0x080029d7
 80027cc:	08002a7f 	.word	0x08002a7f
 80027d0:	08002aeb 	.word	0x08002aeb
 80027d4:	08002b57 	.word	0x08002b57
 80027d8:	08002bc1 	.word	0x08002bc1
 80027dc:	08002c13 	.word	0x08002c13
			case CALIB_IDLE:
				Set_Motor(0, 0);
 80027e0:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8002a0c <main+0x10dc>
 80027e4:	2000      	movs	r0, #0
 80027e6:	f001 fcd3 	bl	8004190 <Set_Motor>
				Set_Motor(1, 0);
 80027ea:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 8002a0c <main+0x10dc>
 80027ee:	2001      	movs	r0, #1
 80027f0:	f001 fcce 	bl	8004190 <Set_Motor>
				P_Limit = 0;
 80027f4:	4a86      	ldr	r2, [pc, #536]	@ (8002a10 <main+0x10e0>)
 80027f6:	2300      	movs	r3, #0
 80027f8:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 80027fa:	4a86      	ldr	r2, [pc, #536]	@ (8002a14 <main+0x10e4>)
 80027fc:	2300      	movs	r3, #0
 80027fe:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 8002800:	4a81      	ldr	r2, [pc, #516]	@ (8002a08 <main+0x10d8>)
 8002802:	2301      	movs	r3, #1
 8002804:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 8002806:	f001 fa67 	bl	8003cd8 <micros>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4982      	ldr	r1, [pc, #520]	@ (8002a18 <main+0x10e8>)
 8002810:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8002814:	e21e      	b.n	8002c54 <main+0x1324>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80) {
 8002816:	4b81      	ldr	r3, [pc, #516]	@ (8002a1c <main+0x10ec>)
 8002818:	edd3 7a00 	vldr	s15, [r3]
 800281c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002a20 <main+0x10f0>
 8002820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002828:	dd06      	ble.n	8002838 <main+0xf08>
					Cal_Side = 1;
 800282a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a24 <main+0x10f4>)
 800282c:	2301      	movs	r3, #1
 800282e:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002830:	4a75      	ldr	r2, [pc, #468]	@ (8002a08 <main+0x10d8>)
 8002832:	2302      	movs	r3, #2
 8002834:	7013      	strb	r3, [r2, #0]
				} else if (Receiver[0] < -80) {
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 8002836:	e20d      	b.n	8002c54 <main+0x1324>
				} else if (Receiver[0] < -80) {
 8002838:	4b78      	ldr	r3, [pc, #480]	@ (8002a1c <main+0x10ec>)
 800283a:	edd3 7a00 	vldr	s15, [r3]
 800283e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002a28 <main+0x10f8>
 8002842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284a:	d400      	bmi.n	800284e <main+0xf1e>
				break;
 800284c:	e202      	b.n	8002c54 <main+0x1324>
					Cal_Side = 2;
 800284e:	4a75      	ldr	r2, [pc, #468]	@ (8002a24 <main+0x10f4>)
 8002850:	2302      	movs	r3, #2
 8002852:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002854:	4a6c      	ldr	r2, [pc, #432]	@ (8002a08 <main+0x10d8>)
 8002856:	2302      	movs	r3, #2
 8002858:	7013      	strb	r3, [r2, #0]
				break;
 800285a:	e1fb      	b.n	8002c54 <main+0x1324>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -15);
 800285c:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8002860:	2001      	movs	r0, #1
 8002862:	f001 fc95 	bl	8004190 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8002866:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800286a:	4870      	ldr	r0, [pc, #448]	@ (8002a2c <main+0x10fc>)
 800286c:	f002 ff16 	bl	800569c <HAL_GPIO_ReadPin>
 8002870:	4603      	mov	r3, r0
 8002872:	2b01      	cmp	r3, #1
 8002874:	d004      	beq.n	8002880 <main+0xf50>
 8002876:	4b66      	ldr	r3, [pc, #408]	@ (8002a10 <main+0x10e0>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 81d9 	beq.w	8002c32 <main+0x1302>
					Set_Motor(1, 0);
 8002880:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 8002a0c <main+0x10dc>
 8002884:	2001      	movs	r0, #1
 8002886:	f001 fc83 	bl	8004190 <Set_Motor>
					calib_timer = micros();
 800288a:	f001 fa25 	bl	8003cd8 <micros>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4961      	ldr	r1, [pc, #388]	@ (8002a18 <main+0x10e8>)
 8002894:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002898:	4a5d      	ldr	r2, [pc, #372]	@ (8002a10 <main+0x10e0>)
 800289a:	2300      	movs	r3, #0
 800289c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 800289e:	4a5a      	ldr	r2, [pc, #360]	@ (8002a08 <main+0x10d8>)
 80028a0:	2303      	movs	r3, #3
 80028a2:	7013      	strb	r3, [r2, #0]
				}
				break;
 80028a4:	e1c5      	b.n	8002c32 <main+0x1302>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 80028a6:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8002a0c <main+0x10dc>
 80028aa:	2001      	movs	r0, #1
 80028ac:	f001 fc70 	bl	8004190 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 80028b0:	f001 fa12 	bl	8003cd8 <micros>
 80028b4:	4b58      	ldr	r3, [pc, #352]	@ (8002a18 <main+0x10e8>)
 80028b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ba:	ebb0 0802 	subs.w	r8, r0, r2
 80028be:	eb61 0903 	sbc.w	r9, r1, r3
 80028c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a30 <main+0x1100>)
 80028c4:	4598      	cmp	r8, r3
 80028c6:	f179 0300 	sbcs.w	r3, r9, #0
 80028ca:	d311      	bcc.n	80028f0 <main+0xfc0>
					Set_Motor(1, 15);
 80028cc:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 80028d0:	2001      	movs	r0, #1
 80028d2:	f001 fc5d 	bl	8004190 <Set_Motor>
					calib_timer = micros();
 80028d6:	f001 f9ff 	bl	8003cd8 <micros>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	494e      	ldr	r1, [pc, #312]	@ (8002a18 <main+0x10e8>)
 80028e0:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80028e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002a10 <main+0x10e0>)
 80028e6:	2300      	movs	r3, #0
 80028e8:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 80028ea:	4a47      	ldr	r2, [pc, #284]	@ (8002a08 <main+0x10d8>)
 80028ec:	2304      	movs	r3, #4
 80028ee:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 15);
 80028f0:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 80028f4:	2001      	movs	r0, #1
 80028f6:	f001 fc4b 	bl	8004190 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 80028fa:	f001 f9ed 	bl	8003cd8 <micros>
 80028fe:	4b46      	ldr	r3, [pc, #280]	@ (8002a18 <main+0x10e8>)
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	ebb0 0a02 	subs.w	sl, r0, r2
 8002908:	eb61 0b03 	sbc.w	fp, r1, r3
 800290c:	4b48      	ldr	r3, [pc, #288]	@ (8002a30 <main+0x1100>)
 800290e:	459a      	cmp	sl, r3
 8002910:	f17b 0300 	sbcs.w	r3, fp, #0
 8002914:	f0c0 818f 	bcc.w	8002c36 <main+0x1306>
					Set_Motor(1, 0);
 8002918:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8002a0c <main+0x10dc>
 800291c:	2001      	movs	r0, #1
 800291e:	f001 fc37 	bl	8004190 <Set_Motor>
					calib_timer = micros();
 8002922:	f001 f9d9 	bl	8003cd8 <micros>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	493b      	ldr	r1, [pc, #236]	@ (8002a18 <main+0x10e8>)
 800292c:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002930:	4a37      	ldr	r2, [pc, #220]	@ (8002a10 <main+0x10e0>)
 8002932:	2300      	movs	r3, #0
 8002934:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 8002936:	4a34      	ldr	r2, [pc, #208]	@ (8002a08 <main+0x10d8>)
 8002938:	2305      	movs	r3, #5
 800293a:	7013      	strb	r3, [r2, #0]
				}
				break;
 800293c:	e17b      	b.n	8002c36 <main+0x1306>

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 800293e:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8002a0c <main+0x10dc>
 8002942:	2001      	movs	r0, #1
 8002944:	f001 fc24 	bl	8004190 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002948:	f001 f9c6 	bl	8003cd8 <micros>
 800294c:	4b32      	ldr	r3, [pc, #200]	@ (8002a18 <main+0x10e8>)
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	1a86      	subs	r6, r0, r2
 8002954:	643e      	str	r6, [r7, #64]	@ 0x40
 8002956:	eb61 0303 	sbc.w	r3, r1, r3
 800295a:	647b      	str	r3, [r7, #68]	@ 0x44
 800295c:	4b34      	ldr	r3, [pc, #208]	@ (8002a30 <main+0x1100>)
 800295e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002962:	4602      	mov	r2, r0
 8002964:	429a      	cmp	r2, r3
 8002966:	460b      	mov	r3, r1
 8002968:	f173 0300 	sbcs.w	r3, r3, #0
 800296c:	f0c0 8165 	bcc.w	8002c3a <main+0x130a>
					Set_Motor(1, -5);
 8002970:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8002974:	2001      	movs	r0, #1
 8002976:	f001 fc0b 	bl	8004190 <Set_Motor>
					calib_timer = micros();
 800297a:	f001 f9ad 	bl	8003cd8 <micros>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4925      	ldr	r1, [pc, #148]	@ (8002a18 <main+0x10e8>)
 8002984:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002988:	4a21      	ldr	r2, [pc, #132]	@ (8002a10 <main+0x10e0>)
 800298a:	2300      	movs	r3, #0
 800298c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 800298e:	4a1e      	ldr	r2, [pc, #120]	@ (8002a08 <main+0x10d8>)
 8002990:	2306      	movs	r3, #6
 8002992:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002994:	e151      	b.n	8002c3a <main+0x130a>

			case CALIB_RETOUCH_P:
				Set_Motor(1, -5);
 8002996:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 800299a:	2001      	movs	r0, #1
 800299c:	f001 fbf8 	bl	8004190 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 80029a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029a4:	4821      	ldr	r0, [pc, #132]	@ (8002a2c <main+0x10fc>)
 80029a6:	f002 fe79 	bl	800569c <HAL_GPIO_ReadPin>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d004      	beq.n	80029ba <main+0x108a>
 80029b0:	4b17      	ldr	r3, [pc, #92]	@ (8002a10 <main+0x10e0>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8142 	beq.w	8002c3e <main+0x130e>
					Set_Motor(1, 0);
 80029ba:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002a0c <main+0x10dc>
 80029be:	2001      	movs	r0, #1
 80029c0:	f001 fbe6 	bl	8004190 <Set_Motor>
					Reset_P();
 80029c4:	f001 fc9c 	bl	8004300 <Reset_P>
					P_Limit = 0;
 80029c8:	4a11      	ldr	r2, [pc, #68]	@ (8002a10 <main+0x10e0>)
 80029ca:	2300      	movs	r3, #0
 80029cc:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 80029ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002a08 <main+0x10d8>)
 80029d0:	2307      	movs	r3, #7
 80029d2:	7013      	strb	r3, [r2, #0]
				}
				break;
 80029d4:	e133      	b.n	8002c3e <main+0x130e>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 80029d6:	4b13      	ldr	r3, [pc, #76]	@ (8002a24 <main+0x10f4>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d12a      	bne.n	8002a34 <main+0x1104>
					Set_Motor(0, 30);
 80029de:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 80029e2:	2000      	movs	r0, #0
 80029e4:	f001 fbd4 	bl	8004190 <Set_Motor>
 80029e8:	e029      	b.n	8002a3e <main+0x110e>
 80029ea:	bf00      	nop
 80029ec:	20000b10 	.word	0x20000b10
 80029f0:	3d0b4396 	.word	0x3d0b4396
 80029f4:	20000b14 	.word	0x20000b14
 80029f8:	3dcccccd 	.word	0x3dcccccd
 80029fc:	20000b30 	.word	0x20000b30
 8002a00:	000f4240 	.word	0x000f4240
 8002a04:	20000b28 	.word	0x20000b28
 8002a08:	20000b7c 	.word	0x20000b7c
 8002a0c:	00000000 	.word	0x00000000
 8002a10:	20000b2d 	.word	0x20000b2d
 8002a14:	20000b2e 	.word	0x20000b2e
 8002a18:	20000b80 	.word	0x20000b80
 8002a1c:	20000a28 	.word	0x20000a28
 8002a20:	42a00000 	.word	0x42a00000
 8002a24:	20000b88 	.word	0x20000b88
 8002a28:	c2a00000 	.word	0xc2a00000
 8002a2c:	48000400 	.word	0x48000400
 8002a30:	000186a1 	.word	0x000186a1
				else
					Set_Motor(0, -30);
 8002a34:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f001 fba9 	bl	8004190 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8002a3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a42:	48ae      	ldr	r0, [pc, #696]	@ (8002cfc <main+0x13cc>)
 8002a44:	f002 fe2a 	bl	800569c <HAL_GPIO_ReadPin>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d004      	beq.n	8002a58 <main+0x1128>
 8002a4e:	4bac      	ldr	r3, [pc, #688]	@ (8002d00 <main+0x13d0>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80f5 	beq.w	8002c42 <main+0x1312>
					Set_Motor(0, 0);
 8002a58:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 8002d04 <main+0x13d4>
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f001 fb97 	bl	8004190 <Set_Motor>
					calib_timer = micros();
 8002a62:	f001 f939 	bl	8003cd8 <micros>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	49a7      	ldr	r1, [pc, #668]	@ (8002d08 <main+0x13d8>)
 8002a6c:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002a70:	4aa3      	ldr	r2, [pc, #652]	@ (8002d00 <main+0x13d0>)
 8002a72:	2300      	movs	r3, #0
 8002a74:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 8002a76:	4aa5      	ldr	r2, [pc, #660]	@ (8002d0c <main+0x13dc>)
 8002a78:	2308      	movs	r3, #8
 8002a7a:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002a7c:	e0e1      	b.n	8002c42 <main+0x1312>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 8002a7e:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8002d04 <main+0x13d4>
 8002a82:	2000      	movs	r0, #0
 8002a84:	f001 fb84 	bl	8004190 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002a88:	f001 f926 	bl	8003cd8 <micros>
 8002a8c:	4b9e      	ldr	r3, [pc, #632]	@ (8002d08 <main+0x13d8>)
 8002a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a92:	1a86      	subs	r6, r0, r2
 8002a94:	63be      	str	r6, [r7, #56]	@ 0x38
 8002a96:	eb61 0303 	sbc.w	r3, r1, r3
 8002a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a9c:	4b9c      	ldr	r3, [pc, #624]	@ (8002d10 <main+0x13e0>)
 8002a9e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	f173 0300 	sbcs.w	r3, r3, #0
 8002aac:	f0c0 80cb 	bcc.w	8002c46 <main+0x1316>
					if (Cal_Side == 1)
 8002ab0:	4b98      	ldr	r3, [pc, #608]	@ (8002d14 <main+0x13e4>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <main+0x1194>
						Set_Motor(0, -30);
 8002ab8:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002abc:	2000      	movs	r0, #0
 8002abe:	f001 fb67 	bl	8004190 <Set_Motor>
 8002ac2:	e004      	b.n	8002ace <main+0x119e>
					else
						Set_Motor(0, 30);
 8002ac4:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f001 fb61 	bl	8004190 <Set_Motor>
					calib_timer = micros();
 8002ace:	f001 f903 	bl	8003cd8 <micros>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	498c      	ldr	r1, [pc, #560]	@ (8002d08 <main+0x13d8>)
 8002ad8:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002adc:	4a88      	ldr	r2, [pc, #544]	@ (8002d00 <main+0x13d0>)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 8002ae2:	4a8a      	ldr	r2, [pc, #552]	@ (8002d0c <main+0x13dc>)
 8002ae4:	2309      	movs	r3, #9
 8002ae6:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002ae8:	e0ad      	b.n	8002c46 <main+0x1316>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 8002aea:	4b8a      	ldr	r3, [pc, #552]	@ (8002d14 <main+0x13e4>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d105      	bne.n	8002afe <main+0x11ce>
					Set_Motor(0, -30);
 8002af2:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002af6:	2000      	movs	r0, #0
 8002af8:	f001 fb4a 	bl	8004190 <Set_Motor>
 8002afc:	e004      	b.n	8002b08 <main+0x11d8>
				else
					Set_Motor(0, 30);
 8002afe:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8002b02:	2000      	movs	r0, #0
 8002b04:	f001 fb44 	bl	8004190 <Set_Motor>

				if (micros() - calib_timer > 200000) {
 8002b08:	f001 f8e6 	bl	8003cd8 <micros>
 8002b0c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d08 <main+0x13d8>)
 8002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b12:	1a86      	subs	r6, r0, r2
 8002b14:	633e      	str	r6, [r7, #48]	@ 0x30
 8002b16:	eb61 0303 	sbc.w	r3, r1, r3
 8002b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b1c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d18 <main+0x13e8>)
 8002b1e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b22:	4602      	mov	r2, r0
 8002b24:	429a      	cmp	r2, r3
 8002b26:	460b      	mov	r3, r1
 8002b28:	f173 0300 	sbcs.w	r3, r3, #0
 8002b2c:	f0c0 808d 	bcc.w	8002c4a <main+0x131a>
					Set_Motor(0, 0);
 8002b30:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8002d04 <main+0x13d4>
 8002b34:	2000      	movs	r0, #0
 8002b36:	f001 fb2b 	bl	8004190 <Set_Motor>
					calib_timer = micros();
 8002b3a:	f001 f8cd 	bl	8003cd8 <micros>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4971      	ldr	r1, [pc, #452]	@ (8002d08 <main+0x13d8>)
 8002b44:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002b48:	4a6d      	ldr	r2, [pc, #436]	@ (8002d00 <main+0x13d0>)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 8002b4e:	4a6f      	ldr	r2, [pc, #444]	@ (8002d0c <main+0x13dc>)
 8002b50:	230a      	movs	r3, #10
 8002b52:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002b54:	e079      	b.n	8002c4a <main+0x131a>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 8002b56:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8002d04 <main+0x13d4>
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f001 fb18 	bl	8004190 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8002b60:	f001 f8ba 	bl	8003cd8 <micros>
 8002b64:	4b68      	ldr	r3, [pc, #416]	@ (8002d08 <main+0x13d8>)
 8002b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6a:	1a86      	subs	r6, r0, r2
 8002b6c:	62be      	str	r6, [r7, #40]	@ 0x28
 8002b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8002b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b74:	4b66      	ldr	r3, [pc, #408]	@ (8002d10 <main+0x13e0>)
 8002b76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	460b      	mov	r3, r1
 8002b80:	f173 0300 	sbcs.w	r3, r3, #0
 8002b84:	d363      	bcc.n	8002c4e <main+0x131e>
					if (Cal_Side == 1)
 8002b86:	4b63      	ldr	r3, [pc, #396]	@ (8002d14 <main+0x13e4>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d105      	bne.n	8002b9a <main+0x126a>
						Set_Motor(0, 15);
 8002b8e:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002b92:	2000      	movs	r0, #0
 8002b94:	f001 fafc 	bl	8004190 <Set_Motor>
 8002b98:	e004      	b.n	8002ba4 <main+0x1274>
					else
						Set_Motor(0, -15);
 8002b9a:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f001 faf6 	bl	8004190 <Set_Motor>
					calib_timer = micros();
 8002ba4:	f001 f898 	bl	8003cd8 <micros>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4956      	ldr	r1, [pc, #344]	@ (8002d08 <main+0x13d8>)
 8002bae:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002bb2:	4a53      	ldr	r2, [pc, #332]	@ (8002d00 <main+0x13d0>)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 8002bb8:	4a54      	ldr	r2, [pc, #336]	@ (8002d0c <main+0x13dc>)
 8002bba:	230b      	movs	r3, #11
 8002bbc:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002bbe:	e046      	b.n	8002c4e <main+0x131e>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 8002bc0:	4b54      	ldr	r3, [pc, #336]	@ (8002d14 <main+0x13e4>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <main+0x12a4>
					Set_Motor(0, 15);
 8002bc8:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f001 fadf 	bl	8004190 <Set_Motor>
 8002bd2:	e004      	b.n	8002bde <main+0x12ae>
				else
					Set_Motor(0, -15);
 8002bd4:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f001 fad9 	bl	8004190 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8002bde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002be2:	4846      	ldr	r0, [pc, #280]	@ (8002cfc <main+0x13cc>)
 8002be4:	f002 fd5a 	bl	800569c <HAL_GPIO_ReadPin>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d003      	beq.n	8002bf6 <main+0x12c6>
 8002bee:	4b44      	ldr	r3, [pc, #272]	@ (8002d00 <main+0x13d0>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d02d      	beq.n	8002c52 <main+0x1322>
					Set_Motor(0, 0);
 8002bf6:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8002d04 <main+0x13d4>
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f001 fac8 	bl	8004190 <Set_Motor>
					Reset_R();
 8002c00:	f001 fb6e 	bl	80042e0 <Reset_R>
					R_Limit = 0;
 8002c04:	4a3e      	ldr	r2, [pc, #248]	@ (8002d00 <main+0x13d0>)
 8002c06:	2300      	movs	r3, #0
 8002c08:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 8002c0a:	4a40      	ldr	r2, [pc, #256]	@ (8002d0c <main+0x13dc>)
 8002c0c:	230c      	movs	r3, #12
 8002c0e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002c10:	e01f      	b.n	8002c52 <main+0x1322>

			case CALIB_DONE:
				Cal_Side = 0;
 8002c12:	4a40      	ldr	r2, [pc, #256]	@ (8002d14 <main+0x13e4>)
 8002c14:	2300      	movs	r3, #0
 8002c16:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 8002c18:	4a40      	ldr	r2, [pc, #256]	@ (8002d1c <main+0x13ec>)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 8002c1e:	4a40      	ldr	r2, [pc, #256]	@ (8002d20 <main+0x13f0>)
 8002c20:	2300      	movs	r3, #0
 8002c22:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8002c24:	4a36      	ldr	r2, [pc, #216]	@ (8002d00 <main+0x13d0>)
 8002c26:	2300      	movs	r3, #0
 8002c28:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002c2a:	4a38      	ldr	r2, [pc, #224]	@ (8002d0c <main+0x13dc>)
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	7013      	strb	r3, [r2, #0]
				break;
 8002c30:	e010      	b.n	8002c54 <main+0x1324>
				break;
 8002c32:	bf00      	nop
 8002c34:	e00e      	b.n	8002c54 <main+0x1324>
				break;
 8002c36:	bf00      	nop
 8002c38:	e00c      	b.n	8002c54 <main+0x1324>
				break;
 8002c3a:	bf00      	nop
 8002c3c:	e00a      	b.n	8002c54 <main+0x1324>
				break;
 8002c3e:	bf00      	nop
 8002c40:	e008      	b.n	8002c54 <main+0x1324>
				break;
 8002c42:	bf00      	nop
 8002c44:	e006      	b.n	8002c54 <main+0x1324>
				break;
 8002c46:	bf00      	nop
 8002c48:	e004      	b.n	8002c54 <main+0x1324>
				break;
 8002c4a:	bf00      	nop
 8002c4c:	e002      	b.n	8002c54 <main+0x1324>
				break;
 8002c4e:	bf00      	nop
 8002c50:	e000      	b.n	8002c54 <main+0x1324>
				break;
 8002c52:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 6) {
 8002c54:	4b31      	ldr	r3, [pc, #196]	@ (8002d1c <main+0x13ec>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b06      	cmp	r3, #6
 8002c5a:	d102      	bne.n	8002c62 <main+0x1332>
			Set_Servo(0);
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f001 fb15 	bl	800428c <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 7) {
 8002c62:	4b2e      	ldr	r3, [pc, #184]	@ (8002d1c <main+0x13ec>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b07      	cmp	r3, #7
 8002c68:	d102      	bne.n	8002c70 <main+0x1340>
			Set_Servo(1);
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	f001 fb0e 	bl	800428c <Set_Servo>
		}
		//////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////
		if (Mode == 8) {
 8002c70:	4b2a      	ldr	r3, [pc, #168]	@ (8002d1c <main+0x13ec>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	f47e aed7 	bne.w	8001a28 <main+0xf8>
			static uint64_t pen_delay_timer;
			if (loop_counter == 1 && micros() - pen_delay_timer < 300000) {
 8002c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d24 <main+0x13f4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d120      	bne.n	8002cc4 <main+0x1394>
 8002c82:	f001 f829 	bl	8003cd8 <micros>
 8002c86:	4b28      	ldr	r3, [pc, #160]	@ (8002d28 <main+0x13f8>)
 8002c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8c:	1a86      	subs	r6, r0, r2
 8002c8e:	623e      	str	r6, [r7, #32]
 8002c90:	eb61 0303 	sbc.w	r3, r1, r3
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c96:	4b25      	ldr	r3, [pc, #148]	@ (8002d2c <main+0x13fc>)
 8002c98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	f173 0300 	sbcs.w	r3, r3, #0
 8002ca6:	d20d      	bcs.n	8002cc4 <main+0x1394>
				Set_Motor(0, 0);
 8002ca8:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8002d04 <main+0x13d4>
 8002cac:	2000      	movs	r0, #0
 8002cae:	f001 fa6f 	bl	8004190 <Set_Motor>
				Set_Motor(1, 0);
 8002cb2:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002d04 <main+0x13d4>
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f001 fa6a 	bl	8004190 <Set_Motor>
				Set_Servo(1);
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	f001 fae5 	bl	800428c <Set_Servo>
 8002cc2:	e175      	b.n	8002fb0 <main+0x1680>
			} else if (loop_counter == 1
 8002cc4:	4b17      	ldr	r3, [pc, #92]	@ (8002d24 <main+0x13f4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d133      	bne.n	8002d34 <main+0x1404>
					&& micros() - pen_delay_timer < 500000) {
 8002ccc:	f001 f804 	bl	8003cd8 <micros>
 8002cd0:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <main+0x13f8>)
 8002cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd6:	1a86      	subs	r6, r0, r2
 8002cd8:	61be      	str	r6, [r7, #24]
 8002cda:	eb61 0303 	sbc.w	r3, r1, r3
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	4b13      	ldr	r3, [pc, #76]	@ (8002d30 <main+0x1400>)
 8002ce2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	460b      	mov	r3, r1
 8002cec:	f173 0300 	sbcs.w	r3, r3, #0
 8002cf0:	d220      	bcs.n	8002d34 <main+0x1404>
				Set_Servo(0);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f001 faca 	bl	800428c <Set_Servo>
 8002cf8:	e15a      	b.n	8002fb0 <main+0x1680>
 8002cfa:	bf00      	nop
 8002cfc:	48000400 	.word	0x48000400
 8002d00:	20000b2e 	.word	0x20000b2e
 8002d04:	00000000 	.word	0x00000000
 8002d08:	20000b80 	.word	0x20000b80
 8002d0c:	20000b7c 	.word	0x20000b7c
 8002d10:	000186a1 	.word	0x000186a1
 8002d14:	20000b88 	.word	0x20000b88
 8002d18:	00030d41 	.word	0x00030d41
 8002d1c:	20000b28 	.word	0x20000b28
 8002d20:	20000b2d 	.word	0x20000b2d
 8002d24:	20000b98 	.word	0x20000b98
 8002d28:	20001240 	.word	0x20001240
 8002d2c:	000493e0 	.word	0x000493e0
 8002d30:	0007a120 	.word	0x0007a120
			} else if (loop_counter < 100) {
 8002d34:	4b9f      	ldr	r3, [pc, #636]	@ (8002fb4 <main+0x1684>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b63      	cmp	r3, #99	@ 0x63
 8002d3a:	f300 810e 	bgt.w	8002f5a <main+0x162a>
				static uint16_t loop_temp = 0;
				Set_Servo(0);
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f001 faa4 	bl	800428c <Set_Servo>

				R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8002d44:	4b9c      	ldr	r3, [pc, #624]	@ (8002fb8 <main+0x1688>)
 8002d46:	ed93 7a00 	vldr	s14, [r3]
 8002d4a:	4b9c      	ldr	r3, [pc, #624]	@ (8002fbc <main+0x168c>)
 8002d4c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d54:	4b9a      	ldr	r3, [pc, #616]	@ (8002fc0 <main+0x1690>)
 8002d56:	edc3 7a00 	vstr	s15, [r3]
				P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8002d5a:	4b9a      	ldr	r3, [pc, #616]	@ (8002fc4 <main+0x1694>)
 8002d5c:	ed93 7a00 	vldr	s14, [r3]
 8002d60:	4b99      	ldr	r3, [pc, #612]	@ (8002fc8 <main+0x1698>)
 8002d62:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d6a:	4b98      	ldr	r3, [pc, #608]	@ (8002fcc <main+0x169c>)
 8002d6c:	edc3 7a00 	vstr	s15, [r3]

				static uint64_t timestampState8 = 0;
				int64_t currentTimeState8 = micros();
 8002d70:	f000 ffb2 	bl	8003cd8 <micros>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
				if (currentTimeState8 > timestampState8) {
 8002d7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d80:	4b93      	ldr	r3, [pc, #588]	@ (8002fd0 <main+0x16a0>)
 8002d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d86:	4282      	cmp	r2, r0
 8002d88:	418b      	sbcs	r3, r1
 8002d8a:	d241      	bcs.n	8002e10 <main+0x14e0>
					timestampState8 = currentTimeState8 + 10000;		//us
 8002d8c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002d90:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002d94:	1851      	adds	r1, r2, r1
 8002d96:	6139      	str	r1, [r7, #16]
 8002d98:	f143 0300 	adc.w	r3, r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002da2:	4b8b      	ldr	r3, [pc, #556]	@ (8002fd0 <main+0x16a0>)
 8002da4:	e9c3 0100 	strd	r0, r1, [r3]
					R_Speed = -1
							* (PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f,
 8002da8:	4b85      	ldr	r3, [pc, #532]	@ (8002fc0 <main+0x1690>)
 8002daa:	edd3 7a00 	vldr	s15, [r3]
 8002dae:	4889      	ldr	r0, [pc, #548]	@ (8002fd4 <main+0x16a4>)
 8002db0:	ed9f 3a89 	vldr	s6, [pc, #548]	@ 8002fd8 <main+0x16a8>
 8002db4:	eddf 2a89 	vldr	s5, [pc, #548]	@ 8002fdc <main+0x16ac>
 8002db8:	ed9f 2a89 	vldr	s4, [pc, #548]	@ 8002fe0 <main+0x16b0>
 8002dbc:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 8002dc0:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8002dc4:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 8002dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dcc:	f000 ff9e 	bl	8003d0c <PID_Update>
 8002dd0:	eef0 7a40 	vmov.f32	s15, s0
 8002dd4:	eef1 7a67 	vneg.f32	s15, s15
					R_Speed = -1
 8002dd8:	4b82      	ldr	r3, [pc, #520]	@ (8002fe4 <main+0x16b4>)
 8002dda:	edc3 7a00 	vstr	s15, [r3]
									0.01f, -100.0f, 100.0f, &pid_r));
					P_Speed = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f,
 8002dde:	4b7b      	ldr	r3, [pc, #492]	@ (8002fcc <main+0x169c>)
 8002de0:	edd3 7a00 	vldr	s15, [r3]
 8002de4:	4880      	ldr	r0, [pc, #512]	@ (8002fe8 <main+0x16b8>)
 8002de6:	ed9f 3a7c 	vldr	s6, [pc, #496]	@ 8002fd8 <main+0x16a8>
 8002dea:	eddf 2a7c 	vldr	s5, [pc, #496]	@ 8002fdc <main+0x16ac>
 8002dee:	ed9f 2a7c 	vldr	s4, [pc, #496]	@ 8002fe0 <main+0x16b0>
 8002df2:	eddf 1a7e 	vldr	s3, [pc, #504]	@ 8002fec <main+0x16bc>
 8002df6:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 8002ff0 <main+0x16c0>
 8002dfa:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8002ff4 <main+0x16c4>
 8002dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8002e02:	f000 ff83 	bl	8003d0c <PID_Update>
 8002e06:	eef0 7a40 	vmov.f32	s15, s0
 8002e0a:	4b7b      	ldr	r3, [pc, #492]	@ (8002ff8 <main+0x16c8>)
 8002e0c:	edc3 7a00 	vstr	s15, [r3]
							0.01f, -100.0f, 100.0f, &pid_p);
				}

				Set_Motor(0, R_Speed);
 8002e10:	4b74      	ldr	r3, [pc, #464]	@ (8002fe4 <main+0x16b4>)
 8002e12:	edd3 7a00 	vldr	s15, [r3]
 8002e16:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f001 f9b8 	bl	8004190 <Set_Motor>
				Set_Motor(1, P_Speed);
 8002e20:	4b75      	ldr	r3, [pc, #468]	@ (8002ff8 <main+0x16c8>)
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	eeb0 0a67 	vmov.f32	s0, s15
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	f001 f9b0 	bl	8004190 <Set_Motor>
				if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 8002e30:	4b63      	ldr	r3, [pc, #396]	@ (8002fc0 <main+0x1690>)
 8002e32:	edd3 7a00 	vldr	s15, [r3]
 8002e36:	eef0 7ae7 	vabs.f32	s15, s15
 8002e3a:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8002ffc <main+0x16cc>
 8002e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e46:	d57f      	bpl.n	8002f48 <main+0x1618>
						&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 8002e48:	4b60      	ldr	r3, [pc, #384]	@ (8002fcc <main+0x169c>)
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	eef0 7ae7 	vabs.f32	s15, s15
 8002e52:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8003000 <main+0x16d0>
 8002e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5e:	d573      	bpl.n	8002f48 <main+0x1618>
					/* within window —— start or continue timer */
					if (lock_timer_us == 0)
 8002e60:	4b68      	ldr	r3, [pc, #416]	@ (8003004 <main+0x16d4>)
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	d107      	bne.n	8002e7a <main+0x154a>
						lock_timer_us = micros(); /* start timing */
 8002e6a:	f000 ff35 	bl	8003cd8 <micros>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4964      	ldr	r1, [pc, #400]	@ (8003004 <main+0x16d4>)
 8002e74:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 8002e78:	e099      	b.n	8002fae <main+0x167e>

					else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8002e7a:	f000 ff2d 	bl	8003cd8 <micros>
 8002e7e:	4b61      	ldr	r3, [pc, #388]	@ (8003004 <main+0x16d4>)
 8002e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e84:	1a86      	subs	r6, r0, r2
 8002e86:	60be      	str	r6, [r7, #8]
 8002e88:	eb61 0303 	sbc.w	r3, r1, r3
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b5e      	ldr	r3, [pc, #376]	@ (8003008 <main+0x16d8>)
 8002e90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e94:	4602      	mov	r2, r0
 8002e96:	429a      	cmp	r2, r3
 8002e98:	460b      	mov	r3, r1
 8002e9a:	f173 0300 	sbcs.w	r3, r3, #0
 8002e9e:	f0c0 8086 	bcc.w	8002fae <main+0x167e>
						if (loop_temp == 0) {
 8002ea2:	4b5a      	ldr	r3, [pc, #360]	@ (800300c <main+0x16dc>)
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d119      	bne.n	8002ede <main+0x15ae>
							pid_r.integ = 0;
 8002eaa:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd4 <main+0x16a4>)
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 8002eb2:	4a48      	ldr	r2, [pc, #288]	@ (8002fd4 <main+0x16a4>)
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 8002eba:	4a4b      	ldr	r2, [pc, #300]	@ (8002fe8 <main+0x16b8>)
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 8002ec2:	4a49      	ldr	r2, [pc, #292]	@ (8002fe8 <main+0x16b8>)
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	6053      	str	r3, [r2, #4]
							TargetR = -1.0472;
 8002eca:	4a3b      	ldr	r2, [pc, #236]	@ (8002fb8 <main+0x1688>)
 8002ecc:	4b50      	ldr	r3, [pc, #320]	@ (8003010 <main+0x16e0>)
 8002ece:	6013      	str	r3, [r2, #0]
							TargetP = 250;
 8002ed0:	4a3c      	ldr	r2, [pc, #240]	@ (8002fc4 <main+0x1694>)
 8002ed2:	4b50      	ldr	r3, [pc, #320]	@ (8003014 <main+0x16e4>)
 8002ed4:	6013      	str	r3, [r2, #0]
							loop_temp = 1;
 8002ed6:	4a4d      	ldr	r2, [pc, #308]	@ (800300c <main+0x16dc>)
 8002ed8:	2301      	movs	r3, #1
 8002eda:	8013      	strh	r3, [r2, #0]
					if (lock_timer_us == 0)
 8002edc:	e067      	b.n	8002fae <main+0x167e>
						} else {
							pid_r.integ = 0;
 8002ede:	4a3d      	ldr	r2, [pc, #244]	@ (8002fd4 <main+0x16a4>)
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 8002ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8002fd4 <main+0x16a4>)
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 8002eee:	4a3e      	ldr	r2, [pc, #248]	@ (8002fe8 <main+0x16b8>)
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 8002ef6:	4a3c      	ldr	r2, [pc, #240]	@ (8002fe8 <main+0x16b8>)
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	6053      	str	r3, [r2, #4]
							TargetR = 4.18879;
 8002efe:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb8 <main+0x1688>)
 8002f00:	4b45      	ldr	r3, [pc, #276]	@ (8003018 <main+0x16e8>)
 8002f02:	6013      	str	r3, [r2, #0]
							TargetP = 50;
 8002f04:	4a2f      	ldr	r2, [pc, #188]	@ (8002fc4 <main+0x1694>)
 8002f06:	4b45      	ldr	r3, [pc, #276]	@ (800301c <main+0x16ec>)
 8002f08:	6013      	str	r3, [r2, #0]
							loop_temp = 0;
 8002f0a:	4a40      	ldr	r2, [pc, #256]	@ (800300c <main+0x16dc>)
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	8013      	strh	r3, [r2, #0]
							loop_counter++;
 8002f10:	4b28      	ldr	r3, [pc, #160]	@ (8002fb4 <main+0x1684>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	4b27      	ldr	r3, [pc, #156]	@ (8002fb4 <main+0x1684>)
 8002f18:	601a      	str	r2, [r3, #0]
							if (loop_counter == 1) {
 8002f1a:	4b26      	ldr	r3, [pc, #152]	@ (8002fb4 <main+0x1684>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d106      	bne.n	8002f30 <main+0x1600>
								pen_delay_timer = micros();
 8002f22:	f000 fed9 	bl	8003cd8 <micros>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	493d      	ldr	r1, [pc, #244]	@ (8003020 <main+0x16f0>)
 8002f2c:	e9c1 2300 	strd	r2, r3, [r1]
							}
							if (loop_counter == 100) {
 8002f30:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <main+0x1684>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b64      	cmp	r3, #100	@ 0x64
 8002f36:	d13a      	bne.n	8002fae <main+0x167e>
								pen_delay_timer = micros();
 8002f38:	f000 fece 	bl	8003cd8 <micros>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4937      	ldr	r1, [pc, #220]	@ (8003020 <main+0x16f0>)
 8002f42:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 8002f46:	e032      	b.n	8002fae <main+0x167e>
							}
						}
					}
				} else {
					lock_timer_us = 0;
 8002f48:	492e      	ldr	r1, [pc, #184]	@ (8003004 <main+0x16d4>)
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	e9c1 2300 	strd	r2, r3, [r1]
 8002f56:	f7fe bd67 	b.w	8001a28 <main+0xf8>
				}
			} else {
				if (micros() - pen_delay_timer < 500000) {
 8002f5a:	f000 febd 	bl	8003cd8 <micros>
 8002f5e:	4b30      	ldr	r3, [pc, #192]	@ (8003020 <main+0x16f0>)
 8002f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f64:	1a86      	subs	r6, r0, r2
 8002f66:	603e      	str	r6, [r7, #0]
 8002f68:	eb61 0303 	sbc.w	r3, r1, r3
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003024 <main+0x16f4>)
 8002f70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f74:	4602      	mov	r2, r0
 8002f76:	429a      	cmp	r2, r3
 8002f78:	460b      	mov	r3, r1
 8002f7a:	f173 0300 	sbcs.w	r3, r3, #0
 8002f7e:	d20e      	bcs.n	8002f9e <main+0x166e>
					Set_Motor(0, 0);
 8002f80:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8003028 <main+0x16f8>
 8002f84:	2000      	movs	r0, #0
 8002f86:	f001 f903 	bl	8004190 <Set_Motor>
					Set_Motor(1, 0);
 8002f8a:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8003028 <main+0x16f8>
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f001 f8fe 	bl	8004190 <Set_Motor>
					Set_Servo(1);
 8002f94:	2001      	movs	r0, #1
 8002f96:	f001 f979 	bl	800428c <Set_Servo>
 8002f9a:	f7fe bd45 	b.w	8001a28 <main+0xf8>
				} else {
					Set_Servo(0);
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f001 f974 	bl	800428c <Set_Servo>
					Mode = 0;
 8002fa4:	4a21      	ldr	r2, [pc, #132]	@ (800302c <main+0x16fc>)
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	7013      	strb	r3, [r2, #0]
 8002faa:	f7fe bd3d 	b.w	8001a28 <main+0xf8>
					if (lock_timer_us == 0)
 8002fae:	bf00      	nop
	while (1) {
 8002fb0:	f7fe bd3a 	b.w	8001a28 <main+0xf8>
 8002fb4:	20000b98 	.word	0x20000b98
 8002fb8:	20000b00 	.word	0x20000b00
 8002fbc:	20000a70 	.word	0x20000a70
 8002fc0:	20000b10 	.word	0x20000b10
 8002fc4:	20000b04 	.word	0x20000b04
 8002fc8:	20000ab0 	.word	0x20000ab0
 8002fcc:	20000b14 	.word	0x20000b14
 8002fd0:	20001248 	.word	0x20001248
 8002fd4:	20000b5c 	.word	0x20000b5c
 8002fd8:	42c80000 	.word	0x42c80000
 8002fdc:	c2c80000 	.word	0xc2c80000
 8002fe0:	3c23d70a 	.word	0x3c23d70a
 8002fe4:	20000b20 	.word	0x20000b20
 8002fe8:	20000b64 	.word	0x20000b64
 8002fec:	3e19999a 	.word	0x3e19999a
 8002ff0:	3f99999a 	.word	0x3f99999a
 8002ff4:	3eaa7efa 	.word	0x3eaa7efa
 8002ff8:	20000b24 	.word	0x20000b24
 8002ffc:	3d0b4396 	.word	0x3d0b4396
 8003000:	3dcccccd 	.word	0x3dcccccd
 8003004:	20000b30 	.word	0x20000b30
 8003008:	000f4240 	.word	0x000f4240
 800300c:	20001250 	.word	0x20001250
 8003010:	bf860aa6 	.word	0xbf860aa6
 8003014:	437a0000 	.word	0x437a0000
 8003018:	40860a91 	.word	0x40860a91
 800301c:	42480000 	.word	0x42480000
 8003020:	20001240 	.word	0x20001240
 8003024:	0007a120 	.word	0x0007a120
 8003028:	00000000 	.word	0x00000000
 800302c:	20000b28 	.word	0x20000b28

08003030 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003030:	b580      	push	{r7, lr}
 8003032:	b094      	sub	sp, #80	@ 0x50
 8003034:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003036:	f107 0318 	add.w	r3, r7, #24
 800303a:	2238      	movs	r2, #56	@ 0x38
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f008 f82c 	bl	800b09c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003044:	1d3b      	adds	r3, r7, #4
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	609a      	str	r2, [r3, #8]
 800304e:	60da      	str	r2, [r3, #12]
 8003050:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003052:	2000      	movs	r0, #0
 8003054:	f002 fb6a 	bl	800572c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003058:	2302      	movs	r3, #2
 800305a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800305c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003060:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003062:	2340      	movs	r3, #64	@ 0x40
 8003064:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003066:	2302      	movs	r3, #2
 8003068:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800306a:	2302      	movs	r3, #2
 800306c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800306e:	2304      	movs	r3, #4
 8003070:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003072:	2355      	movs	r3, #85	@ 0x55
 8003074:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003076:	2302      	movs	r3, #2
 8003078:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800307a:	2302      	movs	r3, #2
 800307c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800307e:	2302      	movs	r3, #2
 8003080:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003082:	f107 0318 	add.w	r3, r7, #24
 8003086:	4618      	mov	r0, r3
 8003088:	f002 fc04 	bl	8005894 <HAL_RCC_OscConfig>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <SystemClock_Config+0x66>
		Error_Handler();
 8003092:	f001 f947 	bl	8004324 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003096:	230f      	movs	r3, #15
 8003098:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800309a:	2303      	movs	r3, #3
 800309c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	2104      	movs	r1, #4
 80030ae:	4618      	mov	r0, r3
 80030b0:	f002 ff02 	bl	8005eb8 <HAL_RCC_ClockConfig>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <SystemClock_Config+0x8e>
		Error_Handler();
 80030ba:	f001 f933 	bl	8004324 <Error_Handler>
	}
}
 80030be:	bf00      	nop
 80030c0:	3750      	adds	r7, #80	@ 0x50
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08c      	sub	sp, #48	@ 0x30
 80030cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80030ce:	f107 031c 	add.w	r3, r7, #28
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	609a      	str	r2, [r3, #8]
 80030da:	60da      	str	r2, [r3, #12]
 80030dc:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80030ec:	463b      	mov	r3, r7
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80030f6:	4b35      	ldr	r3, [pc, #212]	@ (80031cc <MX_TIM1_Init+0x104>)
 80030f8:	4a35      	ldr	r2, [pc, #212]	@ (80031d0 <MX_TIM1_Init+0x108>)
 80030fa:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 80030fc:	4b33      	ldr	r3, [pc, #204]	@ (80031cc <MX_TIM1_Init+0x104>)
 80030fe:	22a9      	movs	r2, #169	@ 0xa9
 8003100:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003102:	4b32      	ldr	r3, [pc, #200]	@ (80031cc <MX_TIM1_Init+0x104>)
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003108:	4b30      	ldr	r3, [pc, #192]	@ (80031cc <MX_TIM1_Init+0x104>)
 800310a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800310e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003110:	4b2e      	ldr	r3, [pc, #184]	@ (80031cc <MX_TIM1_Init+0x104>)
 8003112:	2200      	movs	r2, #0
 8003114:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003116:	4b2d      	ldr	r3, [pc, #180]	@ (80031cc <MX_TIM1_Init+0x104>)
 8003118:	2200      	movs	r2, #0
 800311a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800311c:	4b2b      	ldr	r3, [pc, #172]	@ (80031cc <MX_TIM1_Init+0x104>)
 800311e:	2200      	movs	r2, #0
 8003120:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8003122:	482a      	ldr	r0, [pc, #168]	@ (80031cc <MX_TIM1_Init+0x104>)
 8003124:	f003 fdfe 	bl	8006d24 <HAL_TIM_IC_Init>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <MX_TIM1_Init+0x6a>
		Error_Handler();
 800312e:	f001 f8f9 	bl	8004324 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003132:	2304      	movs	r3, #4
 8003134:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003136:	2360      	movs	r3, #96	@ 0x60
 8003138:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800313a:	2302      	movs	r3, #2
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800313e:	2300      	movs	r3, #0
 8003140:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8003146:	f107 031c 	add.w	r3, r7, #28
 800314a:	4619      	mov	r1, r3
 800314c:	481f      	ldr	r0, [pc, #124]	@ (80031cc <MX_TIM1_Init+0x104>)
 800314e:	f004 fdc9 	bl	8007ce4 <HAL_TIM_SlaveConfigSynchro>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <MX_TIM1_Init+0x94>
		Error_Handler();
 8003158:	f001 f8e4 	bl	8004324 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003160:	2302      	movs	r3, #2
 8003162:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800316c:	f107 030c 	add.w	r3, r7, #12
 8003170:	2200      	movs	r2, #0
 8003172:	4619      	mov	r1, r3
 8003174:	4815      	ldr	r0, [pc, #84]	@ (80031cc <MX_TIM1_Init+0x104>)
 8003176:	f004 faee 	bl	8007756 <HAL_TIM_IC_ConfigChannel>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_TIM1_Init+0xbc>
		Error_Handler();
 8003180:	f001 f8d0 	bl	8004324 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003184:	2302      	movs	r3, #2
 8003186:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003188:	2301      	movs	r3, #1
 800318a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 800318c:	f107 030c 	add.w	r3, r7, #12
 8003190:	2204      	movs	r2, #4
 8003192:	4619      	mov	r1, r3
 8003194:	480d      	ldr	r0, [pc, #52]	@ (80031cc <MX_TIM1_Init+0x104>)
 8003196:	f004 fade 	bl	8007756 <HAL_TIM_IC_ConfigChannel>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_TIM1_Init+0xdc>
		Error_Handler();
 80031a0:	f001 f8c0 	bl	8004324 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031a4:	2300      	movs	r3, #0
 80031a6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80031a8:	2300      	movs	r3, #0
 80031aa:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80031b0:	463b      	mov	r3, r7
 80031b2:	4619      	mov	r1, r3
 80031b4:	4805      	ldr	r0, [pc, #20]	@ (80031cc <MX_TIM1_Init+0x104>)
 80031b6:	f005 feb1 	bl	8008f1c <HAL_TIMEx_MasterConfigSynchronization>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 80031c0:	f001 f8b0 	bl	8004324 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80031c4:	bf00      	nop
 80031c6:	3730      	adds	r7, #48	@ 0x30
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000234 	.word	0x20000234
 80031d0:	40012c00 	.word	0x40012c00

080031d4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08c      	sub	sp, #48	@ 0x30
 80031d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80031da:	f107 031c 	add.w	r3, r7, #28
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	60da      	str	r2, [r3, #12]
 80031e8:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80031ea:	f107 030c 	add.w	r3, r7, #12
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	605a      	str	r2, [r3, #4]
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80031f8:	463b      	mov	r3, r7
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003202:	4b33      	ldr	r3, [pc, #204]	@ (80032d0 <MX_TIM2_Init+0xfc>)
 8003204:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003208:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 800320a:	4b31      	ldr	r3, [pc, #196]	@ (80032d0 <MX_TIM2_Init+0xfc>)
 800320c:	22a9      	movs	r2, #169	@ 0xa9
 800320e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003210:	4b2f      	ldr	r3, [pc, #188]	@ (80032d0 <MX_TIM2_Init+0xfc>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003216:	4b2e      	ldr	r3, [pc, #184]	@ (80032d0 <MX_TIM2_Init+0xfc>)
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800321e:	4b2c      	ldr	r3, [pc, #176]	@ (80032d0 <MX_TIM2_Init+0xfc>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003224:	4b2a      	ldr	r3, [pc, #168]	@ (80032d0 <MX_TIM2_Init+0xfc>)
 8003226:	2200      	movs	r2, #0
 8003228:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800322a:	4829      	ldr	r0, [pc, #164]	@ (80032d0 <MX_TIM2_Init+0xfc>)
 800322c:	f003 fd7a 	bl	8006d24 <HAL_TIM_IC_Init>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <MX_TIM2_Init+0x66>
		Error_Handler();
 8003236:	f001 f875 	bl	8004324 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800323a:	2304      	movs	r3, #4
 800323c:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800323e:	2350      	movs	r3, #80	@ 0x50
 8003240:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003242:	2300      	movs	r3, #0
 8003244:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003246:	2300      	movs	r3, #0
 8003248:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 800324e:	f107 031c 	add.w	r3, r7, #28
 8003252:	4619      	mov	r1, r3
 8003254:	481e      	ldr	r0, [pc, #120]	@ (80032d0 <MX_TIM2_Init+0xfc>)
 8003256:	f004 fd45 	bl	8007ce4 <HAL_TIM_SlaveConfigSynchro>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_TIM2_Init+0x90>
		Error_Handler();
 8003260:	f001 f860 	bl	8004324 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003268:	2301      	movs	r3, #1
 800326a:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003274:	f107 030c 	add.w	r3, r7, #12
 8003278:	2200      	movs	r2, #0
 800327a:	4619      	mov	r1, r3
 800327c:	4814      	ldr	r0, [pc, #80]	@ (80032d0 <MX_TIM2_Init+0xfc>)
 800327e:	f004 fa6a 	bl	8007756 <HAL_TIM_IC_ConfigChannel>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <MX_TIM2_Init+0xb8>
		Error_Handler();
 8003288:	f001 f84c 	bl	8004324 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800328c:	2302      	movs	r3, #2
 800328e:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003290:	2302      	movs	r3, #2
 8003292:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003294:	f107 030c 	add.w	r3, r7, #12
 8003298:	2204      	movs	r2, #4
 800329a:	4619      	mov	r1, r3
 800329c:	480c      	ldr	r0, [pc, #48]	@ (80032d0 <MX_TIM2_Init+0xfc>)
 800329e:	f004 fa5a 	bl	8007756 <HAL_TIM_IC_ConfigChannel>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <MX_TIM2_Init+0xd8>
		Error_Handler();
 80032a8:	f001 f83c 	bl	8004324 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ac:	2300      	movs	r3, #0
 80032ae:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80032b4:	463b      	mov	r3, r7
 80032b6:	4619      	mov	r1, r3
 80032b8:	4805      	ldr	r0, [pc, #20]	@ (80032d0 <MX_TIM2_Init+0xfc>)
 80032ba:	f005 fe2f 	bl	8008f1c <HAL_TIMEx_MasterConfigSynchronization>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <MX_TIM2_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 80032c4:	f001 f82e 	bl	8004324 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80032c8:	bf00      	nop
 80032ca:	3730      	adds	r7, #48	@ 0x30
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20000300 	.word	0x20000300

080032d4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08c      	sub	sp, #48	@ 0x30
 80032d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80032da:	f107 030c 	add.w	r3, r7, #12
 80032de:	2224      	movs	r2, #36	@ 0x24
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f007 feda 	bl	800b09c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80032e8:	463b      	mov	r3, r7
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80032f2:	4b21      	ldr	r3, [pc, #132]	@ (8003378 <MX_TIM3_Init+0xa4>)
 80032f4:	4a21      	ldr	r2, [pc, #132]	@ (800337c <MX_TIM3_Init+0xa8>)
 80032f6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80032f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003378 <MX_TIM3_Init+0xa4>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003378 <MX_TIM3_Init+0xa4>)
 8003300:	2200      	movs	r2, #0
 8003302:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003304:	4b1c      	ldr	r3, [pc, #112]	@ (8003378 <MX_TIM3_Init+0xa4>)
 8003306:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800330a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800330c:	4b1a      	ldr	r3, [pc, #104]	@ (8003378 <MX_TIM3_Init+0xa4>)
 800330e:	2200      	movs	r2, #0
 8003310:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003312:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <MX_TIM3_Init+0xa4>)
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003318:	2303      	movs	r3, #3
 800331a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003320:	2301      	movs	r3, #1
 8003322:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003324:	2300      	movs	r3, #0
 8003326:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800332c:	2300      	movs	r3, #0
 800332e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003330:	2301      	movs	r3, #1
 8003332:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003334:	2300      	movs	r3, #0
 8003336:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 800333c:	f107 030c 	add.w	r3, r7, #12
 8003340:	4619      	mov	r1, r3
 8003342:	480d      	ldr	r0, [pc, #52]	@ (8003378 <MX_TIM3_Init+0xa4>)
 8003344:	f003 ff4c 	bl	80071e0 <HAL_TIM_Encoder_Init>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_TIM3_Init+0x7e>
		Error_Handler();
 800334e:	f000 ffe9 	bl	8004324 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800335a:	463b      	mov	r3, r7
 800335c:	4619      	mov	r1, r3
 800335e:	4806      	ldr	r0, [pc, #24]	@ (8003378 <MX_TIM3_Init+0xa4>)
 8003360:	f005 fddc 	bl	8008f1c <HAL_TIMEx_MasterConfigSynchronization>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800336a:	f000 ffdb 	bl	8004324 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800336e:	bf00      	nop
 8003370:	3730      	adds	r7, #48	@ 0x30
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	200003cc 	.word	0x200003cc
 800337c:	40000400 	.word	0x40000400

08003380 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b08c      	sub	sp, #48	@ 0x30
 8003384:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003386:	f107 030c 	add.w	r3, r7, #12
 800338a:	2224      	movs	r2, #36	@ 0x24
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f007 fe84 	bl	800b09c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003394:	463b      	mov	r3, r7
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800339e:	4b21      	ldr	r3, [pc, #132]	@ (8003424 <MX_TIM4_Init+0xa4>)
 80033a0:	4a21      	ldr	r2, [pc, #132]	@ (8003428 <MX_TIM4_Init+0xa8>)
 80033a2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80033a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003424 <MX_TIM4_Init+0xa4>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003424 <MX_TIM4_Init+0xa4>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80033b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003424 <MX_TIM4_Init+0xa4>)
 80033b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033b6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003424 <MX_TIM4_Init+0xa4>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033be:	4b19      	ldr	r3, [pc, #100]	@ (8003424 <MX_TIM4_Init+0xa4>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80033c4:	2303      	movs	r3, #3
 80033c6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033cc:	2301      	movs	r3, #1
 80033ce:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033d8:	2300      	movs	r3, #0
 80033da:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033dc:	2301      	movs	r3, #1
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033e0:	2300      	movs	r3, #0
 80033e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 80033e8:	f107 030c 	add.w	r3, r7, #12
 80033ec:	4619      	mov	r1, r3
 80033ee:	480d      	ldr	r0, [pc, #52]	@ (8003424 <MX_TIM4_Init+0xa4>)
 80033f0:	f003 fef6 	bl	80071e0 <HAL_TIM_Encoder_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_TIM4_Init+0x7e>
		Error_Handler();
 80033fa:	f000 ff93 	bl	8004324 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033fe:	2300      	movs	r3, #0
 8003400:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003406:	463b      	mov	r3, r7
 8003408:	4619      	mov	r1, r3
 800340a:	4806      	ldr	r0, [pc, #24]	@ (8003424 <MX_TIM4_Init+0xa4>)
 800340c:	f005 fd86 	bl	8008f1c <HAL_TIMEx_MasterConfigSynchronization>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8003416:	f000 ff85 	bl	8004324 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800341a:	bf00      	nop
 800341c:	3730      	adds	r7, #48	@ 0x30
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000498 	.word	0x20000498
 8003428:	40000800 	.word	0x40000800

0800342c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003432:	f107 0310 	add.w	r3, r7, #16
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	609a      	str	r2, [r3, #8]
 800343e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800344a:	4b1d      	ldr	r3, [pc, #116]	@ (80034c0 <MX_TIM5_Init+0x94>)
 800344c:	4a1d      	ldr	r2, [pc, #116]	@ (80034c4 <MX_TIM5_Init+0x98>)
 800344e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 8003450:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <MX_TIM5_Init+0x94>)
 8003452:	22a9      	movs	r2, #169	@ 0xa9
 8003454:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003456:	4b1a      	ldr	r3, [pc, #104]	@ (80034c0 <MX_TIM5_Init+0x94>)
 8003458:	2200      	movs	r2, #0
 800345a:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 800345c:	4b18      	ldr	r3, [pc, #96]	@ (80034c0 <MX_TIM5_Init+0x94>)
 800345e:	f04f 32ff 	mov.w	r2, #4294967295
 8003462:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003464:	4b16      	ldr	r3, [pc, #88]	@ (80034c0 <MX_TIM5_Init+0x94>)
 8003466:	2200      	movs	r2, #0
 8003468:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800346a:	4b15      	ldr	r3, [pc, #84]	@ (80034c0 <MX_TIM5_Init+0x94>)
 800346c:	2200      	movs	r2, #0
 800346e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003470:	4813      	ldr	r0, [pc, #76]	@ (80034c0 <MX_TIM5_Init+0x94>)
 8003472:	f003 f98b 	bl	800678c <HAL_TIM_Base_Init>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <MX_TIM5_Init+0x54>
		Error_Handler();
 800347c:	f000 ff52 	bl	8004324 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003480:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003484:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8003486:	f107 0310 	add.w	r3, r7, #16
 800348a:	4619      	mov	r1, r3
 800348c:	480c      	ldr	r0, [pc, #48]	@ (80034c0 <MX_TIM5_Init+0x94>)
 800348e:	f004 fb13 	bl	8007ab8 <HAL_TIM_ConfigClockSource>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_TIM5_Init+0x70>
		Error_Handler();
 8003498:	f000 ff44 	bl	8004324 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800349c:	2300      	movs	r3, #0
 800349e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80034a4:	1d3b      	adds	r3, r7, #4
 80034a6:	4619      	mov	r1, r3
 80034a8:	4805      	ldr	r0, [pc, #20]	@ (80034c0 <MX_TIM5_Init+0x94>)
 80034aa:	f005 fd37 	bl	8008f1c <HAL_TIMEx_MasterConfigSynchronization>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80034b4:	f000 ff36 	bl	8004324 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80034b8:	bf00      	nop
 80034ba:	3720      	adds	r7, #32
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000564 	.word	0x20000564
 80034c4:	40000c00 	.word	0x40000c00

080034c8 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b09c      	sub	sp, #112	@ 0x70
 80034cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80034ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80034dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80034e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
 80034f8:	615a      	str	r2, [r3, #20]
 80034fa:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80034fc:	1d3b      	adds	r3, r7, #4
 80034fe:	2234      	movs	r2, #52	@ 0x34
 8003500:	2100      	movs	r1, #0
 8003502:	4618      	mov	r0, r3
 8003504:	f007 fdca 	bl	800b09c <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003508:	4b4b      	ldr	r3, [pc, #300]	@ (8003638 <MX_TIM8_Init+0x170>)
 800350a:	4a4c      	ldr	r2, [pc, #304]	@ (800363c <MX_TIM8_Init+0x174>)
 800350c:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 800350e:	4b4a      	ldr	r3, [pc, #296]	@ (8003638 <MX_TIM8_Init+0x170>)
 8003510:	22a9      	movs	r2, #169	@ 0xa9
 8003512:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003514:	4b48      	ldr	r3, [pc, #288]	@ (8003638 <MX_TIM8_Init+0x170>)
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 100;
 800351a:	4b47      	ldr	r3, [pc, #284]	@ (8003638 <MX_TIM8_Init+0x170>)
 800351c:	2264      	movs	r2, #100	@ 0x64
 800351e:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003520:	4b45      	ldr	r3, [pc, #276]	@ (8003638 <MX_TIM8_Init+0x170>)
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8003526:	4b44      	ldr	r3, [pc, #272]	@ (8003638 <MX_TIM8_Init+0x170>)
 8003528:	2200      	movs	r2, #0
 800352a:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800352c:	4b42      	ldr	r3, [pc, #264]	@ (8003638 <MX_TIM8_Init+0x170>)
 800352e:	2200      	movs	r2, #0
 8003530:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8003532:	4841      	ldr	r0, [pc, #260]	@ (8003638 <MX_TIM8_Init+0x170>)
 8003534:	f003 f92a 	bl	800678c <HAL_TIM_Base_Init>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <MX_TIM8_Init+0x7a>
		Error_Handler();
 800353e:	f000 fef1 	bl	8004324 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003542:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003546:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8003548:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800354c:	4619      	mov	r1, r3
 800354e:	483a      	ldr	r0, [pc, #232]	@ (8003638 <MX_TIM8_Init+0x170>)
 8003550:	f004 fab2 	bl	8007ab8 <HAL_TIM_ConfigClockSource>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <MX_TIM8_Init+0x96>
		Error_Handler();
 800355a:	f000 fee3 	bl	8004324 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 800355e:	4836      	ldr	r0, [pc, #216]	@ (8003638 <MX_TIM8_Init+0x170>)
 8003560:	f003 fa60 	bl	8006a24 <HAL_TIM_PWM_Init>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_TIM8_Init+0xa6>
		Error_Handler();
 800356a:	f000 fedb 	bl	8004324 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003576:	2300      	movs	r3, #0
 8003578:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800357a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800357e:	4619      	mov	r1, r3
 8003580:	482d      	ldr	r0, [pc, #180]	@ (8003638 <MX_TIM8_Init+0x170>)
 8003582:	f005 fccb 	bl	8008f1c <HAL_TIMEx_MasterConfigSynchronization>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <MX_TIM8_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 800358c:	f000 feca 	bl	8004324 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003590:	2360      	movs	r3, #96	@ 0x60
 8003592:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 100;
 8003594:	2364      	movs	r3, #100	@ 0x64
 8003596:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003598:	2300      	movs	r3, #0
 800359a:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800359c:	2300      	movs	r3, #0
 800359e:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035a4:	2300      	movs	r3, #0
 80035a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035a8:	2300      	movs	r3, #0
 80035aa:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 80035ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80035b0:	2208      	movs	r2, #8
 80035b2:	4619      	mov	r1, r3
 80035b4:	4820      	ldr	r0, [pc, #128]	@ (8003638 <MX_TIM8_Init+0x170>)
 80035b6:	f004 f96b 	bl	8007890 <HAL_TIM_PWM_ConfigChannel>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <MX_TIM8_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 80035c0:	f000 feb0 	bl	8004324 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 80035c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80035c8:	220c      	movs	r2, #12
 80035ca:	4619      	mov	r1, r3
 80035cc:	481a      	ldr	r0, [pc, #104]	@ (8003638 <MX_TIM8_Init+0x170>)
 80035ce:	f004 f95f 	bl	8007890 <HAL_TIM_PWM_ConfigChannel>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <MX_TIM8_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 80035d8:	f000 fea4 	bl	8004324 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035dc:	2300      	movs	r3, #0
 80035de:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035f4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80035fa:	2300      	movs	r3, #0
 80035fc:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80035fe:	2300      	movs	r3, #0
 8003600:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003602:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003606:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800360c:	2300      	movs	r3, #0
 800360e:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003610:	2300      	movs	r3, #0
 8003612:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8003614:	1d3b      	adds	r3, r7, #4
 8003616:	4619      	mov	r1, r3
 8003618:	4807      	ldr	r0, [pc, #28]	@ (8003638 <MX_TIM8_Init+0x170>)
 800361a:	f005 fd15 	bl	8009048 <HAL_TIMEx_ConfigBreakDeadTime>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <MX_TIM8_Init+0x160>
			!= HAL_OK) {
		Error_Handler();
 8003624:	f000 fe7e 	bl	8004324 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8003628:	4803      	ldr	r0, [pc, #12]	@ (8003638 <MX_TIM8_Init+0x170>)
 800362a:	f001 f807 	bl	800463c <HAL_TIM_MspPostInit>

}
 800362e:	bf00      	nop
 8003630:	3770      	adds	r7, #112	@ 0x70
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000630 	.word	0x20000630
 800363c:	40013400 	.word	0x40013400

08003640 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8003640:	b580      	push	{r7, lr}
 8003642:	b09c      	sub	sp, #112	@ 0x70
 8003644:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003646:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	605a      	str	r2, [r3, #4]
 8003650:	609a      	str	r2, [r3, #8]
 8003652:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003654:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003660:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	611a      	str	r2, [r3, #16]
 8003670:	615a      	str	r2, [r3, #20]
 8003672:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	2234      	movs	r2, #52	@ 0x34
 8003678:	2100      	movs	r1, #0
 800367a:	4618      	mov	r0, r3
 800367c:	f007 fd0e 	bl	800b09c <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8003680:	4b3f      	ldr	r3, [pc, #252]	@ (8003780 <MX_TIM15_Init+0x140>)
 8003682:	4a40      	ldr	r2, [pc, #256]	@ (8003784 <MX_TIM15_Init+0x144>)
 8003684:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 169;
 8003686:	4b3e      	ldr	r3, [pc, #248]	@ (8003780 <MX_TIM15_Init+0x140>)
 8003688:	22a9      	movs	r2, #169	@ 0xa9
 800368a:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800368c:	4b3c      	ldr	r3, [pc, #240]	@ (8003780 <MX_TIM15_Init+0x140>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 20000;
 8003692:	4b3b      	ldr	r3, [pc, #236]	@ (8003780 <MX_TIM15_Init+0x140>)
 8003694:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8003698:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800369a:	4b39      	ldr	r3, [pc, #228]	@ (8003780 <MX_TIM15_Init+0x140>)
 800369c:	2200      	movs	r2, #0
 800369e:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 80036a0:	4b37      	ldr	r3, [pc, #220]	@ (8003780 <MX_TIM15_Init+0x140>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036a6:	4b36      	ldr	r3, [pc, #216]	@ (8003780 <MX_TIM15_Init+0x140>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 80036ac:	4834      	ldr	r0, [pc, #208]	@ (8003780 <MX_TIM15_Init+0x140>)
 80036ae:	f003 f86d 	bl	800678c <HAL_TIM_Base_Init>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <MX_TIM15_Init+0x7c>
		Error_Handler();
 80036b8:	f000 fe34 	bl	8004324 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036c0:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 80036c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80036c6:	4619      	mov	r1, r3
 80036c8:	482d      	ldr	r0, [pc, #180]	@ (8003780 <MX_TIM15_Init+0x140>)
 80036ca:	f004 f9f5 	bl	8007ab8 <HAL_TIM_ConfigClockSource>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_TIM15_Init+0x98>
		Error_Handler();
 80036d4:	f000 fe26 	bl	8004324 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 80036d8:	4829      	ldr	r0, [pc, #164]	@ (8003780 <MX_TIM15_Init+0x140>)
 80036da:	f003 f9a3 	bl	8006a24 <HAL_TIM_PWM_Init>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <MX_TIM15_Init+0xa8>
		Error_Handler();
 80036e4:	f000 fe1e 	bl	8004324 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036e8:	2300      	movs	r3, #0
 80036ea:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 80036f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80036f4:	4619      	mov	r1, r3
 80036f6:	4822      	ldr	r0, [pc, #136]	@ (8003780 <MX_TIM15_Init+0x140>)
 80036f8:	f005 fc10 	bl	8008f1c <HAL_TIMEx_MasterConfigSynchronization>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <MX_TIM15_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8003702:	f000 fe0f 	bl	8004324 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003706:	2360      	movs	r3, #96	@ 0x60
 8003708:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800370e:	2300      	movs	r3, #0
 8003710:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003712:	2300      	movs	r3, #0
 8003714:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003716:	2300      	movs	r3, #0
 8003718:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800371a:	2300      	movs	r3, #0
 800371c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 8003722:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003726:	2200      	movs	r2, #0
 8003728:	4619      	mov	r1, r3
 800372a:	4815      	ldr	r0, [pc, #84]	@ (8003780 <MX_TIM15_Init+0x140>)
 800372c:	f004 f8b0 	bl	8007890 <HAL_TIM_PWM_ConfigChannel>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <MX_TIM15_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8003736:	f000 fdf5 	bl	8004324 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800373a:	2300      	movs	r3, #0
 800373c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800374e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003752:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003758:	2300      	movs	r3, #0
 800375a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 800375c:	1d3b      	adds	r3, r7, #4
 800375e:	4619      	mov	r1, r3
 8003760:	4807      	ldr	r0, [pc, #28]	@ (8003780 <MX_TIM15_Init+0x140>)
 8003762:	f005 fc71 	bl	8009048 <HAL_TIMEx_ConfigBreakDeadTime>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <MX_TIM15_Init+0x130>
			!= HAL_OK) {
		Error_Handler();
 800376c:	f000 fdda 	bl	8004324 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8003770:	4803      	ldr	r0, [pc, #12]	@ (8003780 <MX_TIM15_Init+0x140>)
 8003772:	f000 ff63 	bl	800463c <HAL_TIM_MspPostInit>

}
 8003776:	bf00      	nop
 8003778:	3770      	adds	r7, #112	@ 0x70
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	200006fc 	.word	0x200006fc
 8003784:	40014000 	.word	0x40014000

08003788 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 800378c:	4b14      	ldr	r3, [pc, #80]	@ (80037e0 <MX_TIM16_Init+0x58>)
 800378e:	4a15      	ldr	r2, [pc, #84]	@ (80037e4 <MX_TIM16_Init+0x5c>)
 8003790:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 8003792:	4b13      	ldr	r3, [pc, #76]	@ (80037e0 <MX_TIM16_Init+0x58>)
 8003794:	22a9      	movs	r2, #169	@ 0xa9
 8003796:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003798:	4b11      	ldr	r3, [pc, #68]	@ (80037e0 <MX_TIM16_Init+0x58>)
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 800379e:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <MX_TIM16_Init+0x58>)
 80037a0:	f240 4279 	movw	r2, #1145	@ 0x479
 80037a4:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a6:	4b0e      	ldr	r3, [pc, #56]	@ (80037e0 <MX_TIM16_Init+0x58>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 80037ac:	4b0c      	ldr	r3, [pc, #48]	@ (80037e0 <MX_TIM16_Init+0x58>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037b2:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <MX_TIM16_Init+0x58>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 80037b8:	4809      	ldr	r0, [pc, #36]	@ (80037e0 <MX_TIM16_Init+0x58>)
 80037ba:	f002 ffe7 	bl	800678c <HAL_TIM_Base_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_TIM16_Init+0x40>
		Error_Handler();
 80037c4:	f000 fdae 	bl	8004324 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 80037c8:	2108      	movs	r1, #8
 80037ca:	4805      	ldr	r0, [pc, #20]	@ (80037e0 <MX_TIM16_Init+0x58>)
 80037cc:	f003 fc12 	bl	8006ff4 <HAL_TIM_OnePulse_Init>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_TIM16_Init+0x52>
		Error_Handler();
 80037d6:	f000 fda5 	bl	8004324 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200007c8 	.word	0x200007c8
 80037e4:	40014400 	.word	0x40014400

080037e8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80037ec:	4b23      	ldr	r3, [pc, #140]	@ (800387c <MX_USART2_UART_Init+0x94>)
 80037ee:	4a24      	ldr	r2, [pc, #144]	@ (8003880 <MX_USART2_UART_Init+0x98>)
 80037f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 80037f2:	4b22      	ldr	r3, [pc, #136]	@ (800387c <MX_USART2_UART_Init+0x94>)
 80037f4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80037f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80037fa:	4b20      	ldr	r3, [pc, #128]	@ (800387c <MX_USART2_UART_Init+0x94>)
 80037fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003800:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003802:	4b1e      	ldr	r3, [pc, #120]	@ (800387c <MX_USART2_UART_Init+0x94>)
 8003804:	2200      	movs	r2, #0
 8003806:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8003808:	4b1c      	ldr	r3, [pc, #112]	@ (800387c <MX_USART2_UART_Init+0x94>)
 800380a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800380e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003810:	4b1a      	ldr	r3, [pc, #104]	@ (800387c <MX_USART2_UART_Init+0x94>)
 8003812:	220c      	movs	r2, #12
 8003814:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003816:	4b19      	ldr	r3, [pc, #100]	@ (800387c <MX_USART2_UART_Init+0x94>)
 8003818:	2200      	movs	r2, #0
 800381a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800381c:	4b17      	ldr	r3, [pc, #92]	@ (800387c <MX_USART2_UART_Init+0x94>)
 800381e:	2200      	movs	r2, #0
 8003820:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003822:	4b16      	ldr	r3, [pc, #88]	@ (800387c <MX_USART2_UART_Init+0x94>)
 8003824:	2200      	movs	r2, #0
 8003826:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003828:	4b14      	ldr	r3, [pc, #80]	@ (800387c <MX_USART2_UART_Init+0x94>)
 800382a:	2200      	movs	r2, #0
 800382c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800382e:	4b13      	ldr	r3, [pc, #76]	@ (800387c <MX_USART2_UART_Init+0x94>)
 8003830:	2200      	movs	r2, #0
 8003832:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003834:	4811      	ldr	r0, [pc, #68]	@ (800387c <MX_USART2_UART_Init+0x94>)
 8003836:	f005 fceb 	bl	8009210 <HAL_UART_Init>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 8003840:	f000 fd70 	bl	8004324 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8003844:	2100      	movs	r1, #0
 8003846:	480d      	ldr	r0, [pc, #52]	@ (800387c <MX_USART2_UART_Init+0x94>)
 8003848:	f007 fb27 	bl	800ae9a <HAL_UARTEx_SetTxFifoThreshold>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 8003852:	f000 fd67 	bl	8004324 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8003856:	2100      	movs	r1, #0
 8003858:	4808      	ldr	r0, [pc, #32]	@ (800387c <MX_USART2_UART_Init+0x94>)
 800385a:	f007 fb5c 	bl	800af16 <HAL_UARTEx_SetRxFifoThreshold>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 8003864:	f000 fd5e 	bl	8004324 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8003868:	4804      	ldr	r0, [pc, #16]	@ (800387c <MX_USART2_UART_Init+0x94>)
 800386a:	f007 fadd 	bl	800ae28 <HAL_UARTEx_DisableFifoMode>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <MX_USART2_UART_Init+0x90>
		Error_Handler();
 8003874:	f000 fd56 	bl	8004324 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003878:	bf00      	nop
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000894 	.word	0x20000894
 8003880:	40004400 	.word	0x40004400

08003884 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 800388a:	4b16      	ldr	r3, [pc, #88]	@ (80038e4 <MX_DMA_Init+0x60>)
 800388c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800388e:	4a15      	ldr	r2, [pc, #84]	@ (80038e4 <MX_DMA_Init+0x60>)
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	6493      	str	r3, [r2, #72]	@ 0x48
 8003896:	4b13      	ldr	r3, [pc, #76]	@ (80038e4 <MX_DMA_Init+0x60>)
 8003898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	607b      	str	r3, [r7, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80038a2:	4b10      	ldr	r3, [pc, #64]	@ (80038e4 <MX_DMA_Init+0x60>)
 80038a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a6:	4a0f      	ldr	r2, [pc, #60]	@ (80038e4 <MX_DMA_Init+0x60>)
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80038ae:	4b0d      	ldr	r3, [pc, #52]	@ (80038e4 <MX_DMA_Init+0x60>)
 80038b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80038ba:	2200      	movs	r2, #0
 80038bc:	2100      	movs	r1, #0
 80038be:	200b      	movs	r0, #11
 80038c0:	f001 fa03 	bl	8004cca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80038c4:	200b      	movs	r0, #11
 80038c6:	f001 fa1a 	bl	8004cfe <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80038ca:	2200      	movs	r2, #0
 80038cc:	2100      	movs	r1, #0
 80038ce:	200c      	movs	r0, #12
 80038d0:	f001 f9fb 	bl	8004cca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80038d4:	200c      	movs	r0, #12
 80038d6:	f001 fa12 	bl	8004cfe <HAL_NVIC_EnableIRQ>

}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000

080038e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	@ 0x28
 80038ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80038ee:	f107 0314 	add.w	r3, r7, #20
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	609a      	str	r2, [r3, #8]
 80038fa:	60da      	str	r2, [r3, #12]
 80038fc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80038fe:	4b6c      	ldr	r3, [pc, #432]	@ (8003ab0 <MX_GPIO_Init+0x1c8>)
 8003900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003902:	4a6b      	ldr	r2, [pc, #428]	@ (8003ab0 <MX_GPIO_Init+0x1c8>)
 8003904:	f043 0304 	orr.w	r3, r3, #4
 8003908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800390a:	4b69      	ldr	r3, [pc, #420]	@ (8003ab0 <MX_GPIO_Init+0x1c8>)
 800390c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003916:	4b66      	ldr	r3, [pc, #408]	@ (8003ab0 <MX_GPIO_Init+0x1c8>)
 8003918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391a:	4a65      	ldr	r2, [pc, #404]	@ (8003ab0 <MX_GPIO_Init+0x1c8>)
 800391c:	f043 0320 	orr.w	r3, r3, #32
 8003920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003922:	4b63      	ldr	r3, [pc, #396]	@ (8003ab0 <MX_GPIO_Init+0x1c8>)
 8003924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800392e:	4b60      	ldr	r3, [pc, #384]	@ (8003ab0 <MX_GPIO_Init+0x1c8>)
 8003930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003932:	4a5f      	ldr	r2, [pc, #380]	@ (8003ab0 <MX_GPIO_Init+0x1c8>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800393a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ab0 <MX_GPIO_Init+0x1c8>)
 800393c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003946:	4b5a      	ldr	r3, [pc, #360]	@ (8003ab0 <MX_GPIO_Init+0x1c8>)
 8003948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800394a:	4a59      	ldr	r2, [pc, #356]	@ (8003ab0 <MX_GPIO_Init+0x1c8>)
 800394c:	f043 0302 	orr.w	r3, r3, #2
 8003950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003952:	4b57      	ldr	r3, [pc, #348]	@ (8003ab0 <MX_GPIO_Init+0x1c8>)
 8003954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	607b      	str	r3, [r7, #4]
 800395c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800395e:	2200      	movs	r2, #0
 8003960:	2120      	movs	r1, #32
 8003962:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003966:	f001 feb1 	bl	80056cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12,
 800396a:	2200      	movs	r2, #0
 800396c:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8003970:	4850      	ldr	r0, [pc, #320]	@ (8003ab4 <MX_GPIO_Init+0x1cc>)
 8003972:	f001 feab 	bl	80056cc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC0 PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 8003976:	230d      	movs	r3, #13
 8003978:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800397a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800397e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	2300      	movs	r3, #0
 8003982:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003984:	f107 0314 	add.w	r3, r7, #20
 8003988:	4619      	mov	r1, r3
 800398a:	484a      	ldr	r0, [pc, #296]	@ (8003ab4 <MX_GPIO_Init+0x1cc>)
 800398c:	f001 fd04 	bl	8005398 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8003990:	2320      	movs	r3, #32
 8003992:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003994:	2301      	movs	r3, #1
 8003996:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399c:	2300      	movs	r3, #0
 800399e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	4619      	mov	r1, r3
 80039a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039aa:	f001 fcf5 	bl	8005398 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12;
 80039ae:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 80039b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039b4:	2301      	movs	r3, #1
 80039b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039bc:	2300      	movs	r3, #0
 80039be:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039c0:	f107 0314 	add.w	r3, r7, #20
 80039c4:	4619      	mov	r1, r3
 80039c6:	483b      	ldr	r0, [pc, #236]	@ (8003ab4 <MX_GPIO_Init+0x1cc>)
 80039c8:	f001 fce6 	bl	8005398 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11;
 80039cc:	f640 0304 	movw	r3, #2052	@ 0x804
 80039d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039da:	f107 0314 	add.w	r3, r7, #20
 80039de:	4619      	mov	r1, r3
 80039e0:	4835      	ldr	r0, [pc, #212]	@ (8003ab8 <MX_GPIO_Init+0x1d0>)
 80039e2:	f001 fcd9 	bl	8005398 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80039e6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80039ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80039ec:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80039f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039f2:	2302      	movs	r3, #2
 80039f4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f6:	f107 0314 	add.w	r3, r7, #20
 80039fa:	4619      	mov	r1, r3
 80039fc:	482e      	ldr	r0, [pc, #184]	@ (8003ab8 <MX_GPIO_Init+0x1d0>)
 80039fe:	f001 fccb 	bl	8005398 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a0c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a12:	f107 0314 	add.w	r3, r7, #20
 8003a16:	4619      	mov	r1, r3
 8003a18:	4827      	ldr	r0, [pc, #156]	@ (8003ab8 <MX_GPIO_Init+0x1d0>)
 8003a1a:	f001 fcbd 	bl	8005398 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003a1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003a22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a24:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a28:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2e:	f107 0314 	add.w	r3, r7, #20
 8003a32:	4619      	mov	r1, r3
 8003a34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a38:	f001 fcae 	bl	8005398 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a40:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a46:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a4c:	f107 0314 	add.w	r3, r7, #20
 8003a50:	4619      	mov	r1, r3
 8003a52:	4818      	ldr	r0, [pc, #96]	@ (8003ab4 <MX_GPIO_Init+0x1cc>)
 8003a54:	f001 fca0 	bl	8005398 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	2006      	movs	r0, #6
 8003a5e:	f001 f934 	bl	8004cca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003a62:	2006      	movs	r0, #6
 8003a64:	f001 f94b 	bl	8004cfe <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	2008      	movs	r0, #8
 8003a6e:	f001 f92c 	bl	8004cca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003a72:	2008      	movs	r0, #8
 8003a74:	f001 f943 	bl	8004cfe <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	2009      	movs	r0, #9
 8003a7e:	f001 f924 	bl	8004cca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003a82:	2009      	movs	r0, #9
 8003a84:	f001 f93b 	bl	8004cfe <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	2017      	movs	r0, #23
 8003a8e:	f001 f91c 	bl	8004cca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a92:	2017      	movs	r0, #23
 8003a94:	f001 f933 	bl	8004cfe <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	2028      	movs	r0, #40	@ 0x28
 8003a9e:	f001 f914 	bl	8004cca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003aa2:	2028      	movs	r0, #40	@ 0x28
 8003aa4:	f001 f92b 	bl	8004cfe <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003aa8:	bf00      	nop
 8003aaa:	3728      	adds	r7, #40	@ 0x28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	48000800 	.word	0x48000800
 8003ab8:	48000400 	.word	0x48000400

08003abc <map>:

/* USER CODE BEGIN 4 */
float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	ed87 0a05 	vstr	s0, [r7, #20]
 8003ac6:	edc7 0a04 	vstr	s1, [r7, #16]
 8003aca:	ed87 1a03 	vstr	s2, [r7, #12]
 8003ace:	edc7 1a02 	vstr	s3, [r7, #8]
 8003ad2:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003ad6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ada:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ade:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ae2:	edd7 6a01 	vldr	s13, [r7, #4]
 8003ae6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003aea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003aee:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003af2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003af6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b02:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b06:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <DWT_Init>:

void DWT_Init(void) {
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003b1c:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <DWT_Init+0x28>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4a07      	ldr	r2, [pc, #28]	@ (8003b40 <DWT_Init+0x28>)
 8003b22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b26:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003b28:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <DWT_Init+0x2c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a05      	ldr	r2, [pc, #20]	@ (8003b44 <DWT_Init+0x2c>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6013      	str	r3, [r2, #0]
}
 8003b34:	bf00      	nop
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	e000edf0 	.word	0xe000edf0
 8003b44:	e0001000 	.word	0xe0001000

08003b48 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10) {
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b58:	d10d      	bne.n	8003b76 <HAL_GPIO_EXTI_Callback+0x2e>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8003b5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b5e:	4845      	ldr	r0, [pc, #276]	@ (8003c74 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003b60:	f001 fd9c 	bl	800569c <HAL_GPIO_ReadPin>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d105      	bne.n	8003b76 <HAL_GPIO_EXTI_Callback+0x2e>
			Mode = 0;
 8003b6a:	4b43      	ldr	r3, [pc, #268]	@ (8003c78 <HAL_GPIO_EXTI_Callback+0x130>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 8003b70:	4b42      	ldr	r3, [pc, #264]	@ (8003c7c <HAL_GPIO_EXTI_Callback+0x134>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b7c:	d10e      	bne.n	8003b9c <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 8003b7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b82:	483f      	ldr	r0, [pc, #252]	@ (8003c80 <HAL_GPIO_EXTI_Callback+0x138>)
 8003b84:	f001 fd8a 	bl	800569c <HAL_GPIO_ReadPin>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d103      	bne.n	8003b96 <HAL_GPIO_EXTI_Callback+0x4e>
			P_Limit = 1;
 8003b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c84 <HAL_GPIO_EXTI_Callback+0x13c>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	701a      	strb	r2, [r3, #0]
 8003b94:	e002      	b.n	8003b9c <HAL_GPIO_EXTI_Callback+0x54>
		} else {
			P_Limit = 0;
 8003b96:	4b3b      	ldr	r3, [pc, #236]	@ (8003c84 <HAL_GPIO_EXTI_Callback+0x13c>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_GPIO_EXTI_Callback+0x7a>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1) {
 8003ba4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ba8:	4835      	ldr	r0, [pc, #212]	@ (8003c80 <HAL_GPIO_EXTI_Callback+0x138>)
 8003baa:	f001 fd77 	bl	800569c <HAL_GPIO_ReadPin>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d103      	bne.n	8003bbc <HAL_GPIO_EXTI_Callback+0x74>
			R_Limit = 1;
 8003bb4:	4b34      	ldr	r3, [pc, #208]	@ (8003c88 <HAL_GPIO_EXTI_Callback+0x140>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	e002      	b.n	8003bc2 <HAL_GPIO_EXTI_Callback+0x7a>
		} else {
			R_Limit = 0;
 8003bbc:	4b32      	ldr	r3, [pc, #200]	@ (8003c88 <HAL_GPIO_EXTI_Callback+0x140>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15) {
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bc8:	d102      	bne.n	8003bd0 <HAL_GPIO_EXTI_Callback+0x88>
		EmergencyState = 0;
 8003bca:	4b2c      	ldr	r3, [pc, #176]	@ (8003c7c <HAL_GPIO_EXTI_Callback+0x134>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t state[3] = { 0 }; // 0 = waiting for rise, 1 = waiting for fall

	uint32_t now = DWT->CYCCNT;
 8003bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8003c8c <HAL_GPIO_EXTI_Callback+0x144>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	613b      	str	r3, [r7, #16]
	uint32_t idx;

	if (GPIO_Pin == GPIO_PIN_0)
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d102      	bne.n	8003be2 <HAL_GPIO_EXTI_Callback+0x9a>
		idx = 0;      // PC0
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e00a      	b.n	8003bf8 <HAL_GPIO_EXTI_Callback+0xb0>
	else if (GPIO_Pin == GPIO_PIN_2)
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d102      	bne.n	8003bee <HAL_GPIO_EXTI_Callback+0xa6>
		idx = 1; // PC2
 8003be8:	2301      	movs	r3, #1
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	e004      	b.n	8003bf8 <HAL_GPIO_EXTI_Callback+0xb0>
	else if (GPIO_Pin == GPIO_PIN_3)
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d13b      	bne.n	8003c6c <HAL_GPIO_EXTI_Callback+0x124>
		idx = 2; // PC3
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	617b      	str	r3, [r7, #20]
	else
		return;

	if (state[idx] == 0) {
 8003bf8:	4a25      	ldr	r2, [pc, #148]	@ (8003c90 <HAL_GPIO_EXTI_Callback+0x148>)
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <HAL_GPIO_EXTI_Callback+0xd2>
		rise_time[idx] = now;
 8003c04:	4923      	ldr	r1, [pc, #140]	@ (8003c94 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 1;
 8003c0e:	4a20      	ldr	r2, [pc, #128]	@ (8003c90 <HAL_GPIO_EXTI_Callback+0x148>)
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4413      	add	r3, r2
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	e029      	b.n	8003c6e <HAL_GPIO_EXTI_Callback+0x126>
	} else {
		uint32_t delta =
				(now >= rise_time[idx]) ?
 8003c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003c94 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						(now - rise_time[idx]) :
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d306      	bcc.n	8003c36 <HAL_GPIO_EXTI_Callback+0xee>
 8003c28:	4a1a      	ldr	r2, [pc, #104]	@ (8003c94 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	e006      	b.n	8003c44 <HAL_GPIO_EXTI_Callback+0xfc>
						(0xFFFFFFFF - rise_time[idx] + now);
 8003c36:	4a17      	ldr	r2, [pc, #92]	@ (8003c94 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
						(now - rise_time[idx]) :
 8003c42:	3b01      	subs	r3, #1
		uint32_t delta =
 8003c44:	60fb      	str	r3, [r7, #12]
		pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 8003c46:	4b14      	ldr	r3, [pc, #80]	@ (8003c98 <HAL_GPIO_EXTI_Callback+0x150>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a14      	ldr	r2, [pc, #80]	@ (8003c9c <HAL_GPIO_EXTI_Callback+0x154>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	0c9b      	lsrs	r3, r3, #18
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c58:	4911      	ldr	r1, [pc, #68]	@ (8003ca0 <HAL_GPIO_EXTI_Callback+0x158>)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 0;
 8003c60:	4a0b      	ldr	r2, [pc, #44]	@ (8003c90 <HAL_GPIO_EXTI_Callback+0x148>)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	4413      	add	r3, r2
 8003c66:	2200      	movs	r2, #0
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	e000      	b.n	8003c6e <HAL_GPIO_EXTI_Callback+0x126>
		return;
 8003c6c:	bf00      	nop
	}
}
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	48000800 	.word	0x48000800
 8003c78:	20000b28 	.word	0x20000b28
 8003c7c:	20000b29 	.word	0x20000b29
 8003c80:	48000400 	.word	0x48000400
 8003c84:	20000b2d 	.word	0x20000b2d
 8003c88:	20000b2e 	.word	0x20000b2e
 8003c8c:	e0001000 	.word	0xe0001000
 8003c90:	20001254 	.word	0x20001254
 8003c94:	20000a50 	.word	0x20000a50
 8003c98:	20000200 	.word	0x20000200
 8003c9c:	431bde83 	.word	0x431bde83
 8003ca0:	20000a5c 	.word	0x20000a5c

08003ca4 <HAL_TIM_PeriodElapsedCallback>:

//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003ca4:	b4b0      	push	{r4, r5, r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a08      	ldr	r2, [pc, #32]	@ (8003cd0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d108      	bne.n	8003cc6 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8003cb4:	4b07      	ldr	r3, [pc, #28]	@ (8003cd4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	1e54      	subs	r4, r2, #1
 8003cbc:	f143 0500 	adc.w	r5, r3, #0
 8003cc0:	4b04      	ldr	r3, [pc, #16]	@ (8003cd4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003cc2:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bcb0      	pop	{r4, r5, r7}
 8003cce:	4770      	bx	lr
 8003cd0:	20000564 	.word	0x20000564
 8003cd4:	20000a20 	.word	0x20000a20

08003cd8 <micros>:
uint64_t micros() {
 8003cd8:	b4b0      	push	{r4, r5, r7}
 8003cda:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8003cdc:	4b09      	ldr	r3, [pc, #36]	@ (8003d04 <micros+0x2c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4b07      	ldr	r3, [pc, #28]	@ (8003d08 <micros+0x30>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	1884      	adds	r4, r0, r2
 8003cf0:	eb41 0503 	adc.w	r5, r1, r3
 8003cf4:	4622      	mov	r2, r4
 8003cf6:	462b      	mov	r3, r5
}
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bcb0      	pop	{r4, r5, r7}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20000564 	.word	0x20000564
 8003d08:	20000a20 	.word	0x20000a20

08003d0c <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
		float outMin, float outMax, PID_State *state) {
 8003d0c:	b480      	push	{r7}
 8003d0e:	b08f      	sub	sp, #60	@ 0x3c
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	ed87 0a07 	vstr	s0, [r7, #28]
 8003d16:	edc7 0a06 	vstr	s1, [r7, #24]
 8003d1a:	ed87 1a05 	vstr	s2, [r7, #20]
 8003d1e:	edc7 1a04 	vstr	s3, [r7, #16]
 8003d22:	ed87 2a03 	vstr	s4, [r7, #12]
 8003d26:	edc7 2a02 	vstr	s5, [r7, #8]
 8003d2a:	ed87 3a01 	vstr	s6, [r7, #4]
 8003d2e:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 8003d30:	ed97 7a06 	vldr	s14, [r7, #24]
 8003d34:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	ed93 7a00 	vldr	s14, [r3]
 8003d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	ed93 7a00 	vldr	s14, [r3]
 8003d62:	ed97 6a01 	vldr	s12, [r7, #4]
 8003d66:	edd7 6a05 	vldr	s13, [r7, #20]
 8003d6a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003d6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d76:	dd08      	ble.n	8003d8a <PID_Update+0x7e>
		state->integ = outMax / kI;
 8003d78:	edd7 6a01 	vldr	s13, [r7, #4]
 8003d7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	ed93 7a00 	vldr	s14, [r3]
 8003d90:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d94:	edd7 6a05 	vldr	s13, [r7, #20]
 8003d98:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003d9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da4:	d508      	bpl.n	8003db8 <PID_Update+0xac>
		state->integ = outMin / kI;
 8003da6:	edd7 6a02 	vldr	s13, [r7, #8]
 8003daa:	ed97 7a05 	vldr	s14, [r7, #20]
 8003dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 8003db8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc4:	dd0b      	ble.n	8003dde <PID_Update+0xd2>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	edd3 7a00 	vldr	s15, [r3]
 8003dcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd4:	d503      	bpl.n	8003dde <PID_Update+0xd2>
		state->integ = 0;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 8003dde:	edd7 7a07 	vldr	s15, [r7, #28]
 8003de2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dea:	d50b      	bpl.n	8003e04 <PID_Update+0xf8>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	edd3 7a00 	vldr	s15, [r3]
 8003df2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfa:	dd03      	ble.n	8003e04 <PID_Update+0xf8>
		state->integ = 0;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	edd3 7a00 	vldr	s15, [r3]
 8003e0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e12:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e20:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003e24:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e2c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 8003e30:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e34:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	69fa      	ldr	r2, [r7, #28]
 8003e44:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 8003e46:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003e4a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e52:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e5a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 8003e5e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e62:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6e:	dd01      	ble.n	8003e74 <PID_Update+0x168>
		out = outMax;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 8003e74:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e78:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e84:	d501      	bpl.n	8003e8a <PID_Update+0x17e>
		out = outMin;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 8003e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8c:	ee07 3a90 	vmov	s15, r3
}
 8003e90:	eeb0 0a67 	vmov.f32	s0, s15
 8003e94:	373c      	adds	r7, #60	@ 0x3c
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update() {
 8003ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	af00      	add	r7, sp, #0
	// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 8003ea8:	f7ff ff16 	bl	8003cd8 <micros>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	495f      	ldr	r1, [pc, #380]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003eb2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 8003eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8004034 <Revolute_PosVel_Update+0x194>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	4a5c      	ldr	r2, [pc, #368]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003ebe:	6013      	str	r3, [r2, #0]

	// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8003ec0:	4b5b      	ldr	r3, [pc, #364]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003ec8:	ee07 3a90 	vmov	s15, r3
 8003ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed0:	4b57      	ldr	r3, [pc, #348]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003ed2:	edc3 7a06 	vstr	s15, [r3, #24]

	// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8003ed6:	4b56      	ldr	r3, [pc, #344]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
			- Revolute_QEIdata.Position[OLD];
 8003eda:	4b55      	ldr	r3, [pc, #340]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW]
 8003ee0:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee8:	dd04      	ble.n	8003ef4 <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	e007      	b.n	8003f04 <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8003efa:	da03      	bge.n	8003f04 <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003f02:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8003f04:	4b4a      	ldr	r3, [pc, #296]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003f06:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8003f0a:	4b49      	ldr	r3, [pc, #292]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003f0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003f10:	ebb0 0a02 	subs.w	sl, r0, r2
 8003f14:	eb61 0b03 	sbc.w	fp, r1, r3
 8003f18:	4650      	mov	r0, sl
 8003f1a:	4659      	mov	r1, fp
 8003f1c:	f7fc ff12 	bl	8000d44 <__aeabi_ul2f>
 8003f20:	ee07 0a10 	vmov	s14, r0
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW]
 8003f24:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8004038 <Revolute_PosVel_Update+0x198>
 8003f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2c:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 8003f30:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3c:	d06d      	beq.n	800401a <Revolute_PosVel_Update+0x17a>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_r = (float) diffPosition_r / diffTime_r;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	ee07 3a90 	vmov	s15, r3
 8003f44:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f48:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f50:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAngularAcceleration = (Vel_counts_r
			- Revolute_QEIdata.QEIAngularVelocity) / diffTime_r;
 8003f54:	4b36      	ldr	r3, [pc, #216]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003f56:	edd3 7a07 	vldr	s15, [r3, #28]
 8003f5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f5e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003f62:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Revolute_QEIdata.QEIAngularAcceleration = (Vel_counts_r
 8003f6a:	4b31      	ldr	r3, [pc, #196]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003f6c:	edc3 7a08 	vstr	s15, [r3, #32]

	// Store raw velocity
	Revolute_QEIdata.QEIAngularVelocity = Vel_counts_r;
 8003f70:	4a2f      	ldr	r2, [pc, #188]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	61d3      	str	r3, [r2, #28]

	// Angular velocity in rad/s
	Revolute_QEIdata.AngularVelocity_rad = Vel_counts_r
			* (2.0f * M_PI / 16384.0f);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fc fab2 	bl	80004e0 <__aeabi_f2d>
 8003f7c:	a32a      	add	r3, pc, #168	@ (adr r3, 8004028 <Revolute_PosVel_Update+0x188>)
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	f7fc fb05 	bl	8000590 <__aeabi_dmul>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f7fc fdc1 	bl	8000b14 <__aeabi_d2f>
 8003f92:	4603      	mov	r3, r0
	Revolute_QEIdata.AngularVelocity_rad = Vel_counts_r
 8003f94:	4a26      	ldr	r2, [pc, #152]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003f96:	6253      	str	r3, [r2, #36]	@ 0x24

	// Angular acceleration in rad/s²
	Revolute_QEIdata.AngularAcceleration_rad =
			Revolute_QEIdata.QEIAngularAcceleration * (2.0f * M_PI / 16384.0f);
 8003f98:	4b25      	ldr	r3, [pc, #148]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fc fa9f 	bl	80004e0 <__aeabi_f2d>
 8003fa2:	a321      	add	r3, pc, #132	@ (adr r3, 8004028 <Revolute_PosVel_Update+0x188>)
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f7fc faf2 	bl	8000590 <__aeabi_dmul>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f7fc fdae 	bl	8000b14 <__aeabi_d2f>
 8003fb8:	4603      	mov	r3, r0
	Revolute_QEIdata.AngularAcceleration_rad =
 8003fba:	4a1d      	ldr	r2, [pc, #116]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003fbc:	6293      	str	r3, [r2, #40]	@ 0x28

	// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 8003fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003fc0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003fc4:	68f9      	ldr	r1, [r7, #12]
 8003fc6:	17c8      	asrs	r0, r1, #31
 8003fc8:	460c      	mov	r4, r1
 8003fca:	4605      	mov	r5, r0
 8003fcc:	eb12 0804 	adds.w	r8, r2, r4
 8003fd0:	eb43 0905 	adc.w	r9, r3, r5
 8003fd4:	4b16      	ldr	r3, [pc, #88]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003fd6:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8003fda:	4b15      	ldr	r3, [pc, #84]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8003fdc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
			* (2.0f * M_PI / 16384.0f);
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f7fc faa6 	bl	8000534 <__aeabi_l2d>
 8003fe8:	a30f      	add	r3, pc, #60	@ (adr r3, 8004028 <Revolute_PosVel_Update+0x188>)
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	f7fc facf 	bl	8000590 <__aeabi_dmul>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f7fc fd8b 	bl	8000b14 <__aeabi_d2f>
 8003ffe:	4603      	mov	r3, r0
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition
 8004000:	4a0b      	ldr	r2, [pc, #44]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8004002:	6393      	str	r3, [r2, #56]	@ 0x38

	// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 8004004:	4b0a      	ldr	r3, [pc, #40]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a09      	ldr	r2, [pc, #36]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 800400a:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 800400c:	4b08      	ldr	r3, [pc, #32]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 800400e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004012:	4907      	ldr	r1, [pc, #28]	@ (8004030 <Revolute_PosVel_Update+0x190>)
 8004014:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004018:	e000      	b.n	800401c <Revolute_PosVel_Update+0x17c>
		return;
 800401a:	bf00      	nop
}
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004024:	f3af 8000 	nop.w
 8004028:	54442d18 	.word	0x54442d18
 800402c:	3f3921fb 	.word	0x3f3921fb
 8004030:	20000a70 	.word	0x20000a70
 8004034:	20000498 	.word	0x20000498
 8004038:	358637bd 	.word	0x358637bd

0800403c <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update() {
 800403c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
	// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 8004044:	f7ff fe48 	bl	8003cd8 <micros>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	494c      	ldr	r1, [pc, #304]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 800404e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8004052:	4b4c      	ldr	r3, [pc, #304]	@ (8004184 <Prismatic_PosVel_Update+0x148>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	4a49      	ldr	r2, [pc, #292]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 800405a:	6013      	str	r3, [r2, #0]

	// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 800405c:	4b48      	ldr	r3, [pc, #288]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 800405e:	681a      	ldr	r2, [r3, #0]
			- Prismatic_QEIdata.Position[OLD];
 8004060:	4b47      	ldr	r3, [pc, #284]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	1ad3      	subs	r3, r2, r3
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW]
 8004066:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800406e:	dd04      	ble.n	800407a <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	e007      	b.n	800408a <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004080:	da03      	bge.n	800408a <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004088:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 800408a:	4b3d      	ldr	r3, [pc, #244]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 800408c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			- Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8004090:	4b3b      	ldr	r3, [pc, #236]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 8004092:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004096:	ebb0 0a02 	subs.w	sl, r0, r2
 800409a:	eb61 0b03 	sbc.w	fp, r1, r3
 800409e:	4650      	mov	r0, sl
 80040a0:	4659      	mov	r1, fp
 80040a2:	f7fc fe4f 	bl	8000d44 <__aeabi_ul2f>
 80040a6:	ee07 0a10 	vmov	s14, r0
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW]
 80040aa:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8004188 <Prismatic_PosVel_Update+0x14c>
 80040ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b2:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 80040b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80040ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80040be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c2:	d057      	beq.n	8004174 <Prismatic_PosVel_Update+0x138>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_p = (float) diffPosition_p / diffTime_p;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80040ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80040d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040d6:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
			- Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 80040da:	4b29      	ldr	r3, [pc, #164]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 80040dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80040e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80040e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80040e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80040ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p
 80040f0:	4b23      	ldr	r3, [pc, #140]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 80040f2:	edc3 7a07 	vstr	s15, [r3, #28]

	// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 80040f6:	4a22      	ldr	r2, [pc, #136]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6193      	str	r3, [r2, #24]

	// Velocity in mm/s
	Prismatic_QEIdata.Velocity_mm = Vel_counts_p * (10.0f / 8192.0f);
 80040fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004100:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800418c <Prismatic_PosVel_Update+0x150>
 8004104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004108:	4b1d      	ldr	r3, [pc, #116]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 800410a:	edc3 7a08 	vstr	s15, [r3, #32]

	// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration_mm = Prismatic_QEIdata.QEIAcceleration
 800410e:	4b1c      	ldr	r3, [pc, #112]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 8004110:	edd3 7a07 	vldr	s15, [r3, #28]
			* (10.0f / 8192.0f);
 8004114:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800418c <Prismatic_PosVel_Update+0x150>
 8004118:	ee67 7a87 	vmul.f32	s15, s15, s14
	Prismatic_QEIdata.Acceleration_mm = Prismatic_QEIdata.QEIAcceleration
 800411c:	4b18      	ldr	r3, [pc, #96]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 800411e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 8004122:	4b17      	ldr	r3, [pc, #92]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 8004124:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004128:	68f9      	ldr	r1, [r7, #12]
 800412a:	17c8      	asrs	r0, r1, #31
 800412c:	460c      	mov	r4, r1
 800412e:	4605      	mov	r5, r0
 8004130:	eb12 0804 	adds.w	r8, r2, r4
 8004134:	eb43 0905 	adc.w	r9, r3, r5
 8004138:	4b11      	ldr	r3, [pc, #68]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 800413a:	e9c3 890a 	strd	r8, r9, [r3, #40]	@ 0x28

	// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 800413e:	4b10      	ldr	r3, [pc, #64]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 8004140:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
			* (10.0f / 8192.0f);
 8004144:	4610      	mov	r0, r2
 8004146:	4619      	mov	r1, r3
 8004148:	f7fc fe04 	bl	8000d54 <__aeabi_l2f>
 800414c:	ee07 0a10 	vmov	s14, r0
 8004150:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800418c <Prismatic_PosVel_Update+0x150>
 8004154:	ee67 7a27 	vmul.f32	s15, s14, s15
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition
 8004158:	4b09      	ldr	r3, [pc, #36]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 800415a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 800415e:	4b08      	ldr	r3, [pc, #32]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a07      	ldr	r2, [pc, #28]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 8004164:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 8004166:	4b06      	ldr	r3, [pc, #24]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 8004168:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800416c:	4904      	ldr	r1, [pc, #16]	@ (8004180 <Prismatic_PosVel_Update+0x144>)
 800416e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004172:	e000      	b.n	8004176 <Prismatic_PosVel_Update+0x13a>
		return;
 8004174:	bf00      	nop
}
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800417e:	bf00      	nop
 8004180:	20000ab0 	.word	0x20000ab0
 8004184:	200003cc 	.word	0x200003cc
 8004188:	358637bd 	.word	0x358637bd
 800418c:	3aa00000 	.word	0x3aa00000

08004190 <Set_Motor>:

void Set_Motor(int motor_num, float speed) {
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)
 800419c:	edd7 7a00 	vldr	s15, [r7]
 80041a0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004274 <Set_Motor+0xe4>
 80041a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ac:	dd01      	ble.n	80041b2 <Set_Motor+0x22>
		speed = 100.0f;
 80041ae:	4b32      	ldr	r3, [pc, #200]	@ (8004278 <Set_Motor+0xe8>)
 80041b0:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f)
 80041b2:	edd7 7a00 	vldr	s15, [r7]
 80041b6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800427c <Set_Motor+0xec>
 80041ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c2:	d501      	bpl.n	80041c8 <Set_Motor+0x38>
		speed = -100.0f;
 80041c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004280 <Set_Motor+0xf0>)
 80041c6:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t) ((fabsf(speed) * 100) / 100);
 80041c8:	edd7 7a00 	vldr	s15, [r7]
 80041cc:	eef0 7ae7 	vabs.f32	s15, s15
 80041d0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004274 <Set_Motor+0xe4>
 80041d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041d8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004274 <Set_Motor+0xe4>
 80041dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e4:	ee17 3a90 	vmov	r3, s15
 80041e8:	60fb      	str	r3, [r7, #12]
	if (motor_num == 0) {
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d11d      	bne.n	800422c <Set_Motor+0x9c>
		if (speed > 0) {
 80041f0:	edd7 7a00 	vldr	s15, [r7]
 80041f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fc:	dd05      	ble.n	800420a <Set_Motor+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80041fe:	2201      	movs	r2, #1
 8004200:	2120      	movs	r1, #32
 8004202:	4820      	ldr	r0, [pc, #128]	@ (8004284 <Set_Motor+0xf4>)
 8004204:	f001 fa62 	bl	80056cc <HAL_GPIO_WritePin>
 8004208:	e00b      	b.n	8004222 <Set_Motor+0x92>
		} else if (speed < 0) {
 800420a:	edd7 7a00 	vldr	s15, [r7]
 800420e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004216:	d504      	bpl.n	8004222 <Set_Motor+0x92>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004218:	2200      	movs	r2, #0
 800421a:	2120      	movs	r1, #32
 800421c:	4819      	ldr	r0, [pc, #100]	@ (8004284 <Set_Motor+0xf4>)
 800421e:	f001 fa55 	bl	80056cc <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 8004222:	4b19      	ldr	r3, [pc, #100]	@ (8004288 <Set_Motor+0xf8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	63da      	str	r2, [r3, #60]	@ 0x3c
		} else if (speed < 0) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 800422a:	e01f      	b.n	800426c <Set_Motor+0xdc>
	} else if (motor_num == 1) {
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d11c      	bne.n	800426c <Set_Motor+0xdc>
		if (speed > 0) {
 8004232:	edd7 7a00 	vldr	s15, [r7]
 8004236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800423a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423e:	dd05      	ble.n	800424c <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004240:	2200      	movs	r2, #0
 8004242:	2140      	movs	r1, #64	@ 0x40
 8004244:	480f      	ldr	r0, [pc, #60]	@ (8004284 <Set_Motor+0xf4>)
 8004246:	f001 fa41 	bl	80056cc <HAL_GPIO_WritePin>
 800424a:	e00b      	b.n	8004264 <Set_Motor+0xd4>
		} else if (speed < 0) {
 800424c:	edd7 7a00 	vldr	s15, [r7]
 8004250:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004258:	d504      	bpl.n	8004264 <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800425a:	2201      	movs	r2, #1
 800425c:	2140      	movs	r1, #64	@ 0x40
 800425e:	4809      	ldr	r0, [pc, #36]	@ (8004284 <Set_Motor+0xf4>)
 8004260:	f001 fa34 	bl	80056cc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 8004264:	4b08      	ldr	r3, [pc, #32]	@ (8004288 <Set_Motor+0xf8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	42c80000 	.word	0x42c80000
 8004278:	42c80000 	.word	0x42c80000
 800427c:	c2c80000 	.word	0xc2c80000
 8004280:	c2c80000 	.word	0xc2c80000
 8004284:	48000800 	.word	0x48000800
 8004288:	20000630 	.word	0x20000630

0800428c <Set_Servo>:

void Set_Servo(int Pen_Pos) {
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0) {
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10f      	bne.n	80042ba <Set_Servo+0x2e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 800429a:	4b0e      	ldr	r3, [pc, #56]	@ (80042d4 <Set_Servo+0x48>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80042a2:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 80042a4:	4b0c      	ldr	r3, [pc, #48]	@ (80042d8 <Set_Servo+0x4c>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 80042aa:	f7ff fd15 	bl	8003cd8 <micros>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	490a      	ldr	r1, [pc, #40]	@ (80042dc <Set_Servo+0x50>)
 80042b4:	e9c1 2300 	strd	r2, r3, [r1]
	} else {
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 80042b8:	e007      	b.n	80042ca <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 80042ba:	4b06      	ldr	r3, [pc, #24]	@ (80042d4 <Set_Servo+0x48>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042c2:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 80042c4:	4b04      	ldr	r3, [pc, #16]	@ (80042d8 <Set_Servo+0x4c>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	701a      	strb	r2, [r3, #0]
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	200006fc 	.word	0x200006fc
 80042d8:	20000b2c 	.word	0x20000b2c
 80042dc:	20000b90 	.word	0x20000b90

080042e0 <Reset_R>:

void Reset_R() {
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 80042e4:	4905      	ldr	r1, [pc, #20]	@ (80042fc <Reset_R+0x1c>)
 80042e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 80042f2:	bf00      	nop
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	20000a70 	.word	0x20000a70

08004300 <Reset_P>:
void Reset_P() {
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 8004304:	4905      	ldr	r1, [pc, #20]	@ (800431c <Reset_P+0x1c>)
 8004306:	4a06      	ldr	r2, [pc, #24]	@ (8004320 <Reset_P+0x20>)
 8004308:	f04f 33ff 	mov.w	r3, #4294967295
 800430c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//	Prismatic_QEIdata.mmPosition = 0;
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	20000ab0 	.word	0x20000ab0
 8004320:	fffff99a 	.word	0xfffff99a

08004324 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004328:	b672      	cpsid	i
}
 800432a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800432c:	bf00      	nop
 800432e:	e7fd      	b.n	800432c <Error_Handler+0x8>

08004330 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004336:	4b0f      	ldr	r3, [pc, #60]	@ (8004374 <HAL_MspInit+0x44>)
 8004338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800433a:	4a0e      	ldr	r2, [pc, #56]	@ (8004374 <HAL_MspInit+0x44>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	6613      	str	r3, [r2, #96]	@ 0x60
 8004342:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <HAL_MspInit+0x44>)
 8004344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800434e:	4b09      	ldr	r3, [pc, #36]	@ (8004374 <HAL_MspInit+0x44>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004352:	4a08      	ldr	r2, [pc, #32]	@ (8004374 <HAL_MspInit+0x44>)
 8004354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004358:	6593      	str	r3, [r2, #88]	@ 0x58
 800435a:	4b06      	ldr	r3, [pc, #24]	@ (8004374 <HAL_MspInit+0x44>)
 800435c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004366:	f001 fa85 	bl	8005874 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40021000 	.word	0x40021000

08004378 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08c      	sub	sp, #48	@ 0x30
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004380:	f107 031c 	add.w	r3, r7, #28
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a32      	ldr	r2, [pc, #200]	@ (8004460 <HAL_TIM_IC_MspInit+0xe8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d130      	bne.n	80043fc <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800439a:	4b32      	ldr	r3, [pc, #200]	@ (8004464 <HAL_TIM_IC_MspInit+0xec>)
 800439c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439e:	4a31      	ldr	r2, [pc, #196]	@ (8004464 <HAL_TIM_IC_MspInit+0xec>)
 80043a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80043a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80043a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004464 <HAL_TIM_IC_MspInit+0xec>)
 80043a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043ae:	61bb      	str	r3, [r7, #24]
 80043b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004464 <HAL_TIM_IC_MspInit+0xec>)
 80043b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004464 <HAL_TIM_IC_MspInit+0xec>)
 80043b8:	f043 0304 	orr.w	r3, r3, #4
 80043bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043be:	4b29      	ldr	r3, [pc, #164]	@ (8004464 <HAL_TIM_IC_MspInit+0xec>)
 80043c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80043ca:	2302      	movs	r3, #2
 80043cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ce:	2302      	movs	r3, #2
 80043d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d6:	2300      	movs	r3, #0
 80043d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80043da:	2302      	movs	r3, #2
 80043dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043de:	f107 031c 	add.w	r3, r7, #28
 80043e2:	4619      	mov	r1, r3
 80043e4:	4820      	ldr	r0, [pc, #128]	@ (8004468 <HAL_TIM_IC_MspInit+0xf0>)
 80043e6:	f000 ffd7 	bl	8005398 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80043ea:	2200      	movs	r2, #0
 80043ec:	2100      	movs	r1, #0
 80043ee:	2019      	movs	r0, #25
 80043f0:	f000 fc6b 	bl	8004cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80043f4:	2019      	movs	r0, #25
 80043f6:	f000 fc82 	bl	8004cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80043fa:	e02d      	b.n	8004458 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004404:	d128      	bne.n	8004458 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004406:	4b17      	ldr	r3, [pc, #92]	@ (8004464 <HAL_TIM_IC_MspInit+0xec>)
 8004408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440a:	4a16      	ldr	r2, [pc, #88]	@ (8004464 <HAL_TIM_IC_MspInit+0xec>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6593      	str	r3, [r2, #88]	@ 0x58
 8004412:	4b14      	ldr	r3, [pc, #80]	@ (8004464 <HAL_TIM_IC_MspInit+0xec>)
 8004414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	613b      	str	r3, [r7, #16]
 800441c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800441e:	4b11      	ldr	r3, [pc, #68]	@ (8004464 <HAL_TIM_IC_MspInit+0xec>)
 8004420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004422:	4a10      	ldr	r2, [pc, #64]	@ (8004464 <HAL_TIM_IC_MspInit+0xec>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800442a:	4b0e      	ldr	r3, [pc, #56]	@ (8004464 <HAL_TIM_IC_MspInit+0xec>)
 800442c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004436:	2301      	movs	r3, #1
 8004438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443a:	2302      	movs	r3, #2
 800443c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443e:	2300      	movs	r3, #0
 8004440:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004442:	2300      	movs	r3, #0
 8004444:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004446:	2301      	movs	r3, #1
 8004448:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800444a:	f107 031c 	add.w	r3, r7, #28
 800444e:	4619      	mov	r1, r3
 8004450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004454:	f000 ffa0 	bl	8005398 <HAL_GPIO_Init>
}
 8004458:	bf00      	nop
 800445a:	3730      	adds	r7, #48	@ 0x30
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40012c00 	.word	0x40012c00
 8004464:	40021000 	.word	0x40021000
 8004468:	48000800 	.word	0x48000800

0800446c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08c      	sub	sp, #48	@ 0x30
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004474:	f107 031c 	add.w	r3, r7, #28
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a33      	ldr	r2, [pc, #204]	@ (8004558 <HAL_TIM_Encoder_MspInit+0xec>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d128      	bne.n	80044e0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800448e:	4b33      	ldr	r3, [pc, #204]	@ (800455c <HAL_TIM_Encoder_MspInit+0xf0>)
 8004490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004492:	4a32      	ldr	r2, [pc, #200]	@ (800455c <HAL_TIM_Encoder_MspInit+0xf0>)
 8004494:	f043 0302 	orr.w	r3, r3, #2
 8004498:	6593      	str	r3, [r2, #88]	@ 0x58
 800449a:	4b30      	ldr	r3, [pc, #192]	@ (800455c <HAL_TIM_Encoder_MspInit+0xf0>)
 800449c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044a6:	4b2d      	ldr	r3, [pc, #180]	@ (800455c <HAL_TIM_Encoder_MspInit+0xf0>)
 80044a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044aa:	4a2c      	ldr	r2, [pc, #176]	@ (800455c <HAL_TIM_Encoder_MspInit+0xf0>)
 80044ac:	f043 0302 	orr.w	r3, r3, #2
 80044b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044b2:	4b2a      	ldr	r3, [pc, #168]	@ (800455c <HAL_TIM_Encoder_MspInit+0xf0>)
 80044b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80044be:	2330      	movs	r3, #48	@ 0x30
 80044c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c2:	2302      	movs	r3, #2
 80044c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ca:	2300      	movs	r3, #0
 80044cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044ce:	2302      	movs	r3, #2
 80044d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044d2:	f107 031c 	add.w	r3, r7, #28
 80044d6:	4619      	mov	r1, r3
 80044d8:	4821      	ldr	r0, [pc, #132]	@ (8004560 <HAL_TIM_Encoder_MspInit+0xf4>)
 80044da:	f000 ff5d 	bl	8005398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80044de:	e036      	b.n	800454e <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004564 <HAL_TIM_Encoder_MspInit+0xf8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d131      	bne.n	800454e <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044ea:	4b1c      	ldr	r3, [pc, #112]	@ (800455c <HAL_TIM_Encoder_MspInit+0xf0>)
 80044ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ee:	4a1b      	ldr	r2, [pc, #108]	@ (800455c <HAL_TIM_Encoder_MspInit+0xf0>)
 80044f0:	f043 0304 	orr.w	r3, r3, #4
 80044f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80044f6:	4b19      	ldr	r3, [pc, #100]	@ (800455c <HAL_TIM_Encoder_MspInit+0xf0>)
 80044f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004502:	4b16      	ldr	r3, [pc, #88]	@ (800455c <HAL_TIM_Encoder_MspInit+0xf0>)
 8004504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004506:	4a15      	ldr	r2, [pc, #84]	@ (800455c <HAL_TIM_Encoder_MspInit+0xf0>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800450e:	4b13      	ldr	r3, [pc, #76]	@ (800455c <HAL_TIM_Encoder_MspInit+0xf0>)
 8004510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800451a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800451e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004520:	2302      	movs	r3, #2
 8004522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004524:	2300      	movs	r3, #0
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004528:	2300      	movs	r3, #0
 800452a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800452c:	230a      	movs	r3, #10
 800452e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004530:	f107 031c 	add.w	r3, r7, #28
 8004534:	4619      	mov	r1, r3
 8004536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800453a:	f000 ff2d 	bl	8005398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800453e:	2200      	movs	r2, #0
 8004540:	2100      	movs	r1, #0
 8004542:	201e      	movs	r0, #30
 8004544:	f000 fbc1 	bl	8004cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004548:	201e      	movs	r0, #30
 800454a:	f000 fbd8 	bl	8004cfe <HAL_NVIC_EnableIRQ>
}
 800454e:	bf00      	nop
 8004550:	3730      	adds	r7, #48	@ 0x30
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40000400 	.word	0x40000400
 800455c:	40021000 	.word	0x40021000
 8004560:	48000400 	.word	0x48000400
 8004564:	40000800 	.word	0x40000800

08004568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a2c      	ldr	r2, [pc, #176]	@ (8004628 <HAL_TIM_Base_MspInit+0xc0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d114      	bne.n	80045a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800457a:	4b2c      	ldr	r3, [pc, #176]	@ (800462c <HAL_TIM_Base_MspInit+0xc4>)
 800457c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457e:	4a2b      	ldr	r2, [pc, #172]	@ (800462c <HAL_TIM_Base_MspInit+0xc4>)
 8004580:	f043 0308 	orr.w	r3, r3, #8
 8004584:	6593      	str	r3, [r2, #88]	@ 0x58
 8004586:	4b29      	ldr	r3, [pc, #164]	@ (800462c <HAL_TIM_Base_MspInit+0xc4>)
 8004588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004592:	2200      	movs	r2, #0
 8004594:	2100      	movs	r1, #0
 8004596:	2032      	movs	r0, #50	@ 0x32
 8004598:	f000 fb97 	bl	8004cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800459c:	2032      	movs	r0, #50	@ 0x32
 800459e:	f000 fbae 	bl	8004cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80045a2:	e03c      	b.n	800461e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a21      	ldr	r2, [pc, #132]	@ (8004630 <HAL_TIM_Base_MspInit+0xc8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d10c      	bne.n	80045c8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80045ae:	4b1f      	ldr	r3, [pc, #124]	@ (800462c <HAL_TIM_Base_MspInit+0xc4>)
 80045b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b2:	4a1e      	ldr	r2, [pc, #120]	@ (800462c <HAL_TIM_Base_MspInit+0xc4>)
 80045b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80045b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80045ba:	4b1c      	ldr	r3, [pc, #112]	@ (800462c <HAL_TIM_Base_MspInit+0xc4>)
 80045bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	693b      	ldr	r3, [r7, #16]
}
 80045c6:	e02a      	b.n	800461e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM15)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a19      	ldr	r2, [pc, #100]	@ (8004634 <HAL_TIM_Base_MspInit+0xcc>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d10c      	bne.n	80045ec <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80045d2:	4b16      	ldr	r3, [pc, #88]	@ (800462c <HAL_TIM_Base_MspInit+0xc4>)
 80045d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d6:	4a15      	ldr	r2, [pc, #84]	@ (800462c <HAL_TIM_Base_MspInit+0xc4>)
 80045d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80045de:	4b13      	ldr	r3, [pc, #76]	@ (800462c <HAL_TIM_Base_MspInit+0xc4>)
 80045e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
}
 80045ea:	e018      	b.n	800461e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a11      	ldr	r2, [pc, #68]	@ (8004638 <HAL_TIM_Base_MspInit+0xd0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d113      	bne.n	800461e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80045f6:	4b0d      	ldr	r3, [pc, #52]	@ (800462c <HAL_TIM_Base_MspInit+0xc4>)
 80045f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fa:	4a0c      	ldr	r2, [pc, #48]	@ (800462c <HAL_TIM_Base_MspInit+0xc4>)
 80045fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004600:	6613      	str	r3, [r2, #96]	@ 0x60
 8004602:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <HAL_TIM_Base_MspInit+0xc4>)
 8004604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800460e:	2200      	movs	r2, #0
 8004610:	2100      	movs	r1, #0
 8004612:	2019      	movs	r0, #25
 8004614:	f000 fb59 	bl	8004cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004618:	2019      	movs	r0, #25
 800461a:	f000 fb70 	bl	8004cfe <HAL_NVIC_EnableIRQ>
}
 800461e:	bf00      	nop
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40000c00 	.word	0x40000c00
 800462c:	40021000 	.word	0x40021000
 8004630:	40013400 	.word	0x40013400
 8004634:	40014000 	.word	0x40014000
 8004638:	40014400 	.word	0x40014400

0800463c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	@ 0x28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	60da      	str	r2, [r3, #12]
 8004652:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a23      	ldr	r2, [pc, #140]	@ (80046e8 <HAL_TIM_MspPostInit+0xac>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d11d      	bne.n	800469a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800465e:	4b23      	ldr	r3, [pc, #140]	@ (80046ec <HAL_TIM_MspPostInit+0xb0>)
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004662:	4a22      	ldr	r2, [pc, #136]	@ (80046ec <HAL_TIM_MspPostInit+0xb0>)
 8004664:	f043 0304 	orr.w	r3, r3, #4
 8004668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800466a:	4b20      	ldr	r3, [pc, #128]	@ (80046ec <HAL_TIM_MspPostInit+0xb0>)
 800466c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004676:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800467a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467c:	2302      	movs	r3, #2
 800467e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004680:	2300      	movs	r3, #0
 8004682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004684:	2300      	movs	r3, #0
 8004686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004688:	2304      	movs	r3, #4
 800468a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800468c:	f107 0314 	add.w	r3, r7, #20
 8004690:	4619      	mov	r1, r3
 8004692:	4817      	ldr	r0, [pc, #92]	@ (80046f0 <HAL_TIM_MspPostInit+0xb4>)
 8004694:	f000 fe80 	bl	8005398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004698:	e021      	b.n	80046de <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a15      	ldr	r2, [pc, #84]	@ (80046f4 <HAL_TIM_MspPostInit+0xb8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d11c      	bne.n	80046de <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046a4:	4b11      	ldr	r3, [pc, #68]	@ (80046ec <HAL_TIM_MspPostInit+0xb0>)
 80046a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a8:	4a10      	ldr	r2, [pc, #64]	@ (80046ec <HAL_TIM_MspPostInit+0xb0>)
 80046aa:	f043 0302 	orr.w	r3, r3, #2
 80046ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046b0:	4b0e      	ldr	r3, [pc, #56]	@ (80046ec <HAL_TIM_MspPostInit+0xb0>)
 80046b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80046bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80046c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c2:	2302      	movs	r3, #2
 80046c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ca:	2300      	movs	r3, #0
 80046cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80046ce:	2301      	movs	r3, #1
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d2:	f107 0314 	add.w	r3, r7, #20
 80046d6:	4619      	mov	r1, r3
 80046d8:	4807      	ldr	r0, [pc, #28]	@ (80046f8 <HAL_TIM_MspPostInit+0xbc>)
 80046da:	f000 fe5d 	bl	8005398 <HAL_GPIO_Init>
}
 80046de:	bf00      	nop
 80046e0:	3728      	adds	r7, #40	@ 0x28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40013400 	.word	0x40013400
 80046ec:	40021000 	.word	0x40021000
 80046f0:	48000800 	.word	0x48000800
 80046f4:	40014000 	.word	0x40014000
 80046f8:	48000400 	.word	0x48000400

080046fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b09e      	sub	sp, #120	@ 0x78
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004704:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	605a      	str	r2, [r3, #4]
 800470e:	609a      	str	r2, [r3, #8]
 8004710:	60da      	str	r2, [r3, #12]
 8004712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004714:	f107 0310 	add.w	r3, r7, #16
 8004718:	2254      	movs	r2, #84	@ 0x54
 800471a:	2100      	movs	r1, #0
 800471c:	4618      	mov	r0, r3
 800471e:	f006 fcbd 	bl	800b09c <memset>
  if(huart->Instance==USART2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a4d      	ldr	r2, [pc, #308]	@ (800485c <HAL_UART_MspInit+0x160>)
 8004728:	4293      	cmp	r3, r2
 800472a:	f040 8092 	bne.w	8004852 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800472e:	2302      	movs	r3, #2
 8004730:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004732:	2300      	movs	r3, #0
 8004734:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004736:	f107 0310 	add.w	r3, r7, #16
 800473a:	4618      	mov	r0, r3
 800473c:	f001 fdd8 	bl	80062f0 <HAL_RCCEx_PeriphCLKConfig>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004746:	f7ff fded 	bl	8004324 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800474a:	4b45      	ldr	r3, [pc, #276]	@ (8004860 <HAL_UART_MspInit+0x164>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474e:	4a44      	ldr	r2, [pc, #272]	@ (8004860 <HAL_UART_MspInit+0x164>)
 8004750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004754:	6593      	str	r3, [r2, #88]	@ 0x58
 8004756:	4b42      	ldr	r3, [pc, #264]	@ (8004860 <HAL_UART_MspInit+0x164>)
 8004758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004762:	4b3f      	ldr	r3, [pc, #252]	@ (8004860 <HAL_UART_MspInit+0x164>)
 8004764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004766:	4a3e      	ldr	r2, [pc, #248]	@ (8004860 <HAL_UART_MspInit+0x164>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800476e:	4b3c      	ldr	r3, [pc, #240]	@ (8004860 <HAL_UART_MspInit+0x164>)
 8004770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800477a:	230c      	movs	r3, #12
 800477c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477e:	2302      	movs	r3, #2
 8004780:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004782:	2300      	movs	r3, #0
 8004784:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004786:	2300      	movs	r3, #0
 8004788:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800478a:	2307      	movs	r3, #7
 800478c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800478e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004792:	4619      	mov	r1, r3
 8004794:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004798:	f000 fdfe 	bl	8005398 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800479c:	4b31      	ldr	r3, [pc, #196]	@ (8004864 <HAL_UART_MspInit+0x168>)
 800479e:	4a32      	ldr	r2, [pc, #200]	@ (8004868 <HAL_UART_MspInit+0x16c>)
 80047a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80047a2:	4b30      	ldr	r3, [pc, #192]	@ (8004864 <HAL_UART_MspInit+0x168>)
 80047a4:	221a      	movs	r2, #26
 80047a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004864 <HAL_UART_MspInit+0x168>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004864 <HAL_UART_MspInit+0x168>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004864 <HAL_UART_MspInit+0x168>)
 80047b6:	2280      	movs	r2, #128	@ 0x80
 80047b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004864 <HAL_UART_MspInit+0x168>)
 80047bc:	2200      	movs	r2, #0
 80047be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047c0:	4b28      	ldr	r3, [pc, #160]	@ (8004864 <HAL_UART_MspInit+0x168>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80047c6:	4b27      	ldr	r3, [pc, #156]	@ (8004864 <HAL_UART_MspInit+0x168>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047cc:	4b25      	ldr	r3, [pc, #148]	@ (8004864 <HAL_UART_MspInit+0x168>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80047d2:	4824      	ldr	r0, [pc, #144]	@ (8004864 <HAL_UART_MspInit+0x168>)
 80047d4:	f000 faae 	bl	8004d34 <HAL_DMA_Init>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80047de:	f7ff fda1 	bl	8004324 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004864 <HAL_UART_MspInit+0x168>)
 80047e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80047ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004864 <HAL_UART_MspInit+0x168>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80047f0:	4b1e      	ldr	r3, [pc, #120]	@ (800486c <HAL_UART_MspInit+0x170>)
 80047f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004870 <HAL_UART_MspInit+0x174>)
 80047f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80047f6:	4b1d      	ldr	r3, [pc, #116]	@ (800486c <HAL_UART_MspInit+0x170>)
 80047f8:	221b      	movs	r2, #27
 80047fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047fc:	4b1b      	ldr	r3, [pc, #108]	@ (800486c <HAL_UART_MspInit+0x170>)
 80047fe:	2210      	movs	r2, #16
 8004800:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004802:	4b1a      	ldr	r3, [pc, #104]	@ (800486c <HAL_UART_MspInit+0x170>)
 8004804:	2200      	movs	r2, #0
 8004806:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004808:	4b18      	ldr	r3, [pc, #96]	@ (800486c <HAL_UART_MspInit+0x170>)
 800480a:	2280      	movs	r2, #128	@ 0x80
 800480c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800480e:	4b17      	ldr	r3, [pc, #92]	@ (800486c <HAL_UART_MspInit+0x170>)
 8004810:	2200      	movs	r2, #0
 8004812:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004814:	4b15      	ldr	r3, [pc, #84]	@ (800486c <HAL_UART_MspInit+0x170>)
 8004816:	2200      	movs	r2, #0
 8004818:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800481a:	4b14      	ldr	r3, [pc, #80]	@ (800486c <HAL_UART_MspInit+0x170>)
 800481c:	2200      	movs	r2, #0
 800481e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004820:	4b12      	ldr	r3, [pc, #72]	@ (800486c <HAL_UART_MspInit+0x170>)
 8004822:	2200      	movs	r2, #0
 8004824:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004826:	4811      	ldr	r0, [pc, #68]	@ (800486c <HAL_UART_MspInit+0x170>)
 8004828:	f000 fa84 	bl	8004d34 <HAL_DMA_Init>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8004832:	f7ff fd77 	bl	8004324 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a0c      	ldr	r2, [pc, #48]	@ (800486c <HAL_UART_MspInit+0x170>)
 800483a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800483c:	4a0b      	ldr	r2, [pc, #44]	@ (800486c <HAL_UART_MspInit+0x170>)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004842:	2200      	movs	r2, #0
 8004844:	2100      	movs	r1, #0
 8004846:	2026      	movs	r0, #38	@ 0x26
 8004848:	f000 fa3f 	bl	8004cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800484c:	2026      	movs	r0, #38	@ 0x26
 800484e:	f000 fa56 	bl	8004cfe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004852:	bf00      	nop
 8004854:	3778      	adds	r7, #120	@ 0x78
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40004400 	.word	0x40004400
 8004860:	40021000 	.word	0x40021000
 8004864:	20000960 	.word	0x20000960
 8004868:	40020008 	.word	0x40020008
 800486c:	200009c0 	.word	0x200009c0
 8004870:	4002001c 	.word	0x4002001c

08004874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004878:	bf00      	nop
 800487a:	e7fd      	b.n	8004878 <NMI_Handler+0x4>

0800487c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004880:	bf00      	nop
 8004882:	e7fd      	b.n	8004880 <HardFault_Handler+0x4>

08004884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004888:	bf00      	nop
 800488a:	e7fd      	b.n	8004888 <MemManage_Handler+0x4>

0800488c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004890:	bf00      	nop
 8004892:	e7fd      	b.n	8004890 <BusFault_Handler+0x4>

08004894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004898:	bf00      	nop
 800489a:	e7fd      	b.n	8004898 <UsageFault_Handler+0x4>

0800489c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048a0:	bf00      	nop
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048aa:	b480      	push	{r7}
 80048ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048ae:	bf00      	nop
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048bc:	bf00      	nop
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048ca:	f000 f905 	bl	8004ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048ce:	bf00      	nop
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80048d6:	2001      	movs	r0, #1
 80048d8:	f000 ff10 	bl	80056fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80048dc:	bf00      	nop
 80048de:	bd80      	pop	{r7, pc}

080048e0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80048e4:	2004      	movs	r0, #4
 80048e6:	f000 ff09 	bl	80056fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80048ea:	bf00      	nop
 80048ec:	bd80      	pop	{r7, pc}

080048ee <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80048f2:	2008      	movs	r0, #8
 80048f4:	f000 ff02 	bl	80056fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80048f8:	bf00      	nop
 80048fa:	bd80      	pop	{r7, pc}

080048fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004900:	4802      	ldr	r0, [pc, #8]	@ (800490c <DMA1_Channel1_IRQHandler+0x10>)
 8004902:	f000 fbfa 	bl	80050fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004906:	bf00      	nop
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000960 	.word	0x20000960

08004910 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004914:	4802      	ldr	r0, [pc, #8]	@ (8004920 <DMA1_Channel2_IRQHandler+0x10>)
 8004916:	f000 fbf0 	bl	80050fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800491a:	bf00      	nop
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	200009c0 	.word	0x200009c0

08004924 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004928:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800492c:	f000 fee6 	bl	80056fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004930:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004934:	f000 fee2 	bl	80056fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004938:	bf00      	nop
 800493a:	bd80      	pop	{r7, pc}

0800493c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004940:	4803      	ldr	r0, [pc, #12]	@ (8004950 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004942:	f002 fd8f 	bl	8007464 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004946:	4803      	ldr	r0, [pc, #12]	@ (8004954 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004948:	f002 fd8c 	bl	8007464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800494c:	bf00      	nop
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20000234 	.word	0x20000234
 8004954:	200007c8 	.word	0x200007c8

08004958 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800495c:	4802      	ldr	r0, [pc, #8]	@ (8004968 <TIM4_IRQHandler+0x10>)
 800495e:	f002 fd81 	bl	8007464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004962:	bf00      	nop
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000498 	.word	0x20000498

0800496c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004970:	4802      	ldr	r0, [pc, #8]	@ (800497c <USART2_IRQHandler+0x10>)
 8004972:	f004 fe33 	bl	80095dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004976:	bf00      	nop
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000894 	.word	0x20000894

08004980 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004984:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004988:	f000 feb8 	bl	80056fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800498c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004990:	f000 feb4 	bl	80056fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004994:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004998:	f000 feb0 	bl	80056fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800499c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80049a0:	f000 feac 	bl	80056fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80049a4:	bf00      	nop
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80049ac:	4802      	ldr	r0, [pc, #8]	@ (80049b8 <TIM5_IRQHandler+0x10>)
 80049ae:	f002 fd59 	bl	8007464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000564 	.word	0x20000564

080049bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80049c0:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <SystemInit+0x20>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c6:	4a05      	ldr	r2, [pc, #20]	@ (80049dc <SystemInit+0x20>)
 80049c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	e000ed00 	.word	0xe000ed00

080049e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80049e0:	480d      	ldr	r0, [pc, #52]	@ (8004a18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80049e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80049e4:	f7ff ffea 	bl	80049bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049e8:	480c      	ldr	r0, [pc, #48]	@ (8004a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80049ea:	490d      	ldr	r1, [pc, #52]	@ (8004a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80049ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004a24 <LoopForever+0xe>)
  movs r3, #0
 80049ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80049f0:	e002      	b.n	80049f8 <LoopCopyDataInit>

080049f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049f6:	3304      	adds	r3, #4

080049f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049fc:	d3f9      	bcc.n	80049f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a00:	4c0a      	ldr	r4, [pc, #40]	@ (8004a2c <LoopForever+0x16>)
  movs r3, #0
 8004a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a04:	e001      	b.n	8004a0a <LoopFillZerobss>

08004a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a08:	3204      	adds	r2, #4

08004a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a0c:	d3fb      	bcc.n	8004a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a0e:	f006 fb4d 	bl	800b0ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a12:	f7fc ff8d 	bl	8001930 <main>

08004a16 <LoopForever>:

LoopForever:
    b LoopForever
 8004a16:	e7fe      	b.n	8004a16 <LoopForever>
  ldr   r0, =_estack
 8004a18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a20:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8004a24:	0800c030 	.word	0x0800c030
  ldr r2, =_sbss
 8004a28:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004a2c:	2000125c 	.word	0x2000125c

08004a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a30:	e7fe      	b.n	8004a30 <ADC1_2_IRQHandler>

08004a32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a3c:	2003      	movs	r0, #3
 8004a3e:	f000 f939 	bl	8004cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a42:	2000      	movs	r0, #0
 8004a44:	f000 f80e 	bl	8004a64 <HAL_InitTick>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	71fb      	strb	r3, [r7, #7]
 8004a52:	e001      	b.n	8004a58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a54:	f7ff fc6c 	bl	8004330 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a58:	79fb      	ldrb	r3, [r7, #7]

}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004a70:	4b16      	ldr	r3, [pc, #88]	@ (8004acc <HAL_InitTick+0x68>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d022      	beq.n	8004abe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004a78:	4b15      	ldr	r3, [pc, #84]	@ (8004ad0 <HAL_InitTick+0x6c>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b13      	ldr	r3, [pc, #76]	@ (8004acc <HAL_InitTick+0x68>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 f944 	bl	8004d1a <HAL_SYSTICK_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10f      	bne.n	8004ab8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b0f      	cmp	r3, #15
 8004a9c:	d809      	bhi.n	8004ab2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa6:	f000 f910 	bl	8004cca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad4 <HAL_InitTick+0x70>)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	e007      	b.n	8004ac2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
 8004ab6:	e004      	b.n	8004ac2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
 8004abc:	e001      	b.n	8004ac2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	20000208 	.word	0x20000208
 8004ad0:	20000200 	.word	0x20000200
 8004ad4:	20000204 	.word	0x20000204

08004ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004adc:	4b05      	ldr	r3, [pc, #20]	@ (8004af4 <HAL_IncTick+0x1c>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <HAL_IncTick+0x20>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	4a03      	ldr	r2, [pc, #12]	@ (8004af4 <HAL_IncTick+0x1c>)
 8004ae8:	6013      	str	r3, [r2, #0]
}
 8004aea:	bf00      	nop
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	20001258 	.word	0x20001258
 8004af8:	20000208 	.word	0x20000208

08004afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  return uwTick;
 8004b00:	4b03      	ldr	r3, [pc, #12]	@ (8004b10 <HAL_GetTick+0x14>)
 8004b02:	681b      	ldr	r3, [r3, #0]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20001258 	.word	0x20001258

08004b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b24:	4b0c      	ldr	r3, [pc, #48]	@ (8004b58 <__NVIC_SetPriorityGrouping+0x44>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b30:	4013      	ands	r3, r2
 8004b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b46:	4a04      	ldr	r2, [pc, #16]	@ (8004b58 <__NVIC_SetPriorityGrouping+0x44>)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	60d3      	str	r3, [r2, #12]
}
 8004b4c:	bf00      	nop
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	e000ed00 	.word	0xe000ed00

08004b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b60:	4b04      	ldr	r3, [pc, #16]	@ (8004b74 <__NVIC_GetPriorityGrouping+0x18>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	0a1b      	lsrs	r3, r3, #8
 8004b66:	f003 0307 	and.w	r3, r3, #7
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	e000ed00 	.word	0xe000ed00

08004b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	db0b      	blt.n	8004ba2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	f003 021f 	and.w	r2, r3, #31
 8004b90:	4907      	ldr	r1, [pc, #28]	@ (8004bb0 <__NVIC_EnableIRQ+0x38>)
 8004b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	2001      	movs	r0, #1
 8004b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	e000e100 	.word	0xe000e100

08004bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	6039      	str	r1, [r7, #0]
 8004bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	db0a      	blt.n	8004bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	490c      	ldr	r1, [pc, #48]	@ (8004c00 <__NVIC_SetPriority+0x4c>)
 8004bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd2:	0112      	lsls	r2, r2, #4
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bdc:	e00a      	b.n	8004bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	4908      	ldr	r1, [pc, #32]	@ (8004c04 <__NVIC_SetPriority+0x50>)
 8004be4:	79fb      	ldrb	r3, [r7, #7]
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	3b04      	subs	r3, #4
 8004bec:	0112      	lsls	r2, r2, #4
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	761a      	strb	r2, [r3, #24]
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	e000e100 	.word	0xe000e100
 8004c04:	e000ed00 	.word	0xe000ed00

08004c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b089      	sub	sp, #36	@ 0x24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f1c3 0307 	rsb	r3, r3, #7
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	bf28      	it	cs
 8004c26:	2304      	movcs	r3, #4
 8004c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	2b06      	cmp	r3, #6
 8004c30:	d902      	bls.n	8004c38 <NVIC_EncodePriority+0x30>
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3b03      	subs	r3, #3
 8004c36:	e000      	b.n	8004c3a <NVIC_EncodePriority+0x32>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	43da      	mvns	r2, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	401a      	ands	r2, r3
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c50:	f04f 31ff 	mov.w	r1, #4294967295
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5a:	43d9      	mvns	r1, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c60:	4313      	orrs	r3, r2
         );
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3724      	adds	r7, #36	@ 0x24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
	...

08004c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c80:	d301      	bcc.n	8004c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c82:	2301      	movs	r3, #1
 8004c84:	e00f      	b.n	8004ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c86:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb0 <SysTick_Config+0x40>)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c8e:	210f      	movs	r1, #15
 8004c90:	f04f 30ff 	mov.w	r0, #4294967295
 8004c94:	f7ff ff8e 	bl	8004bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c98:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <SysTick_Config+0x40>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c9e:	4b04      	ldr	r3, [pc, #16]	@ (8004cb0 <SysTick_Config+0x40>)
 8004ca0:	2207      	movs	r2, #7
 8004ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	e000e010 	.word	0xe000e010

08004cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff ff29 	bl	8004b14 <__NVIC_SetPriorityGrouping>
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b086      	sub	sp, #24
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
 8004cd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cd8:	f7ff ff40 	bl	8004b5c <__NVIC_GetPriorityGrouping>
 8004cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	6978      	ldr	r0, [r7, #20]
 8004ce4:	f7ff ff90 	bl	8004c08 <NVIC_EncodePriority>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff ff5f 	bl	8004bb4 <__NVIC_SetPriority>
}
 8004cf6:	bf00      	nop
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	4603      	mov	r3, r0
 8004d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff ff33 	bl	8004b78 <__NVIC_EnableIRQ>
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff ffa4 	bl	8004c70 <SysTick_Config>
 8004d28:	4603      	mov	r3, r0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e08d      	b.n	8004e62 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	4b47      	ldr	r3, [pc, #284]	@ (8004e6c <HAL_DMA_Init+0x138>)
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d80f      	bhi.n	8004d72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	4b45      	ldr	r3, [pc, #276]	@ (8004e70 <HAL_DMA_Init+0x13c>)
 8004d5a:	4413      	add	r3, r2
 8004d5c:	4a45      	ldr	r2, [pc, #276]	@ (8004e74 <HAL_DMA_Init+0x140>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	009a      	lsls	r2, r3, #2
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a42      	ldr	r2, [pc, #264]	@ (8004e78 <HAL_DMA_Init+0x144>)
 8004d6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d70:	e00e      	b.n	8004d90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	4b40      	ldr	r3, [pc, #256]	@ (8004e7c <HAL_DMA_Init+0x148>)
 8004d7a:	4413      	add	r3, r2
 8004d7c:	4a3d      	ldr	r2, [pc, #244]	@ (8004e74 <HAL_DMA_Init+0x140>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	091b      	lsrs	r3, r3, #4
 8004d84:	009a      	lsls	r2, r3, #2
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a3c      	ldr	r2, [pc, #240]	@ (8004e80 <HAL_DMA_Init+0x14c>)
 8004d8e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004daa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fa76 	bl	80052d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004df0:	d102      	bne.n	8004df8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e0c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d010      	beq.n	8004e38 <HAL_DMA_Init+0x104>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d80c      	bhi.n	8004e38 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fa96 	bl	8005350 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e34:	605a      	str	r2, [r3, #4]
 8004e36:	e008      	b.n	8004e4a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40020407 	.word	0x40020407
 8004e70:	bffdfff8 	.word	0xbffdfff8
 8004e74:	cccccccd 	.word	0xcccccccd
 8004e78:	40020000 	.word	0x40020000
 8004e7c:	bffdfbf8 	.word	0xbffdfbf8
 8004e80:	40020400 	.word	0x40020400

08004e84 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_DMA_Start_IT+0x20>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e066      	b.n	8004f72 <HAL_DMA_Start_IT+0xee>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d155      	bne.n	8004f64 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 f9bb 	bl	8005258 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d008      	beq.n	8004efc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 020e 	orr.w	r2, r2, #14
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	e00f      	b.n	8004f1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0204 	bic.w	r2, r2, #4
 8004f0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 020a 	orr.w	r2, r2, #10
 8004f1a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f38:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d007      	beq.n	8004f52 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f50:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0201 	orr.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	e005      	b.n	8004f70 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d005      	beq.n	8004f9e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2204      	movs	r2, #4
 8004f96:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	73fb      	strb	r3, [r7, #15]
 8004f9c:	e037      	b.n	800500e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 020e 	bic.w	r2, r2, #14
 8004fac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fbc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0201 	bic.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd2:	f003 021f 	and.w	r2, r3, #31
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	2101      	movs	r1, #1
 8004fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00c      	beq.n	800500e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ffe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005002:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800500c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800501e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d00d      	beq.n	8005060 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2204      	movs	r2, #4
 8005048:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
 800505e:	e047      	b.n	80050f0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 020e 	bic.w	r2, r2, #14
 800506e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800508a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800508e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005094:	f003 021f 	and.w	r2, r3, #31
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509c:	2101      	movs	r1, #1
 800509e:	fa01 f202 	lsl.w	r2, r1, r2
 80050a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80050ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00c      	beq.n	80050d0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80050ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	4798      	blx	r3
    }
  }
  return status;
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005116:	f003 031f 	and.w	r3, r3, #31
 800511a:	2204      	movs	r2, #4
 800511c:	409a      	lsls	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4013      	ands	r3, r2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d026      	beq.n	8005174 <HAL_DMA_IRQHandler+0x7a>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d021      	beq.n	8005174 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	d107      	bne.n	800514e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0204 	bic.w	r2, r2, #4
 800514c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005152:	f003 021f 	and.w	r2, r3, #31
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	2104      	movs	r1, #4
 800515c:	fa01 f202 	lsl.w	r2, r1, r2
 8005160:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005166:	2b00      	cmp	r3, #0
 8005168:	d071      	beq.n	800524e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005172:	e06c      	b.n	800524e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	2202      	movs	r2, #2
 800517e:	409a      	lsls	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4013      	ands	r3, r2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d02e      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d029      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10b      	bne.n	80051b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 020a 	bic.w	r2, r2, #10
 80051ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051bc:	f003 021f 	and.w	r2, r3, #31
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c4:	2102      	movs	r1, #2
 80051c6:	fa01 f202 	lsl.w	r2, r1, r2
 80051ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d038      	beq.n	800524e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80051e4:	e033      	b.n	800524e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	2208      	movs	r2, #8
 80051f0:	409a      	lsls	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4013      	ands	r3, r2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d02a      	beq.n	8005250 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d025      	beq.n	8005250 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 020e 	bic.w	r2, r2, #14
 8005212:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005218:	f003 021f 	and.w	r2, r3, #31
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005220:	2101      	movs	r1, #1
 8005222:	fa01 f202 	lsl.w	r2, r1, r2
 8005226:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005242:	2b00      	cmp	r3, #0
 8005244:	d004      	beq.n	8005250 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800524e:	bf00      	nop
 8005250:	bf00      	nop
}
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800526e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005274:	2b00      	cmp	r3, #0
 8005276:	d004      	beq.n	8005282 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005280:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005286:	f003 021f 	and.w	r2, r3, #31
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528e:	2101      	movs	r1, #1
 8005290:	fa01 f202 	lsl.w	r2, r1, r2
 8005294:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d108      	bne.n	80052b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052b6:	e007      	b.n	80052c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	60da      	str	r2, [r3, #12]
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	4b16      	ldr	r3, [pc, #88]	@ (800533c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d802      	bhi.n	80052ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80052e8:	4b15      	ldr	r3, [pc, #84]	@ (8005340 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	e001      	b.n	80052f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80052ee:	4b15      	ldr	r3, [pc, #84]	@ (8005344 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80052f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	3b08      	subs	r3, #8
 80052fe:	4a12      	ldr	r2, [pc, #72]	@ (8005348 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005300:	fba2 2303 	umull	r2, r3, r2, r3
 8005304:	091b      	lsrs	r3, r3, #4
 8005306:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530c:	089b      	lsrs	r3, r3, #2
 800530e:	009a      	lsls	r2, r3, #2
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4413      	add	r3, r2
 8005314:	461a      	mov	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a0b      	ldr	r2, [pc, #44]	@ (800534c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800531e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	2201      	movs	r2, #1
 8005328:	409a      	lsls	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40020407 	.word	0x40020407
 8005340:	40020800 	.word	0x40020800
 8005344:	40020820 	.word	0x40020820
 8005348:	cccccccd 	.word	0xcccccccd
 800534c:	40020880 	.word	0x40020880

08005350 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4b0b      	ldr	r3, [pc, #44]	@ (8005390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	461a      	mov	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a08      	ldr	r2, [pc, #32]	@ (8005394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005372:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3b01      	subs	r3, #1
 8005378:	f003 031f 	and.w	r3, r3, #31
 800537c:	2201      	movs	r2, #1
 800537e:	409a      	lsls	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005384:	bf00      	nop
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	1000823f 	.word	0x1000823f
 8005394:	40020940 	.word	0x40020940

08005398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053a6:	e15a      	b.n	800565e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	2101      	movs	r1, #1
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	fa01 f303 	lsl.w	r3, r1, r3
 80053b4:	4013      	ands	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 814c 	beq.w	8005658 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d005      	beq.n	80053d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d130      	bne.n	800543a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	2203      	movs	r2, #3
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	43db      	mvns	r3, r3
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4013      	ands	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800540e:	2201      	movs	r2, #1
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43db      	mvns	r3, r3
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4013      	ands	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	091b      	lsrs	r3, r3, #4
 8005424:	f003 0201 	and.w	r2, r3, #1
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b03      	cmp	r3, #3
 8005444:	d017      	beq.n	8005476 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	2203      	movs	r2, #3
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	43db      	mvns	r3, r3
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4013      	ands	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d123      	bne.n	80054ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	08da      	lsrs	r2, r3, #3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3208      	adds	r2, #8
 800548a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	220f      	movs	r2, #15
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43db      	mvns	r3, r3
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4013      	ands	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	691a      	ldr	r2, [r3, #16]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	08da      	lsrs	r2, r3, #3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3208      	adds	r2, #8
 80054c4:	6939      	ldr	r1, [r7, #16]
 80054c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	2203      	movs	r2, #3
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	43db      	mvns	r3, r3
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4013      	ands	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f003 0203 	and.w	r2, r3, #3
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 80a6 	beq.w	8005658 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800550c:	4b5b      	ldr	r3, [pc, #364]	@ (800567c <HAL_GPIO_Init+0x2e4>)
 800550e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005510:	4a5a      	ldr	r2, [pc, #360]	@ (800567c <HAL_GPIO_Init+0x2e4>)
 8005512:	f043 0301 	orr.w	r3, r3, #1
 8005516:	6613      	str	r3, [r2, #96]	@ 0x60
 8005518:	4b58      	ldr	r3, [pc, #352]	@ (800567c <HAL_GPIO_Init+0x2e4>)
 800551a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005524:	4a56      	ldr	r2, [pc, #344]	@ (8005680 <HAL_GPIO_Init+0x2e8>)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	089b      	lsrs	r3, r3, #2
 800552a:	3302      	adds	r3, #2
 800552c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005530:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	220f      	movs	r2, #15
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4013      	ands	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800554e:	d01f      	beq.n	8005590 <HAL_GPIO_Init+0x1f8>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a4c      	ldr	r2, [pc, #304]	@ (8005684 <HAL_GPIO_Init+0x2ec>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d019      	beq.n	800558c <HAL_GPIO_Init+0x1f4>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a4b      	ldr	r2, [pc, #300]	@ (8005688 <HAL_GPIO_Init+0x2f0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d013      	beq.n	8005588 <HAL_GPIO_Init+0x1f0>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a4a      	ldr	r2, [pc, #296]	@ (800568c <HAL_GPIO_Init+0x2f4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00d      	beq.n	8005584 <HAL_GPIO_Init+0x1ec>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a49      	ldr	r2, [pc, #292]	@ (8005690 <HAL_GPIO_Init+0x2f8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d007      	beq.n	8005580 <HAL_GPIO_Init+0x1e8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a48      	ldr	r2, [pc, #288]	@ (8005694 <HAL_GPIO_Init+0x2fc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d101      	bne.n	800557c <HAL_GPIO_Init+0x1e4>
 8005578:	2305      	movs	r3, #5
 800557a:	e00a      	b.n	8005592 <HAL_GPIO_Init+0x1fa>
 800557c:	2306      	movs	r3, #6
 800557e:	e008      	b.n	8005592 <HAL_GPIO_Init+0x1fa>
 8005580:	2304      	movs	r3, #4
 8005582:	e006      	b.n	8005592 <HAL_GPIO_Init+0x1fa>
 8005584:	2303      	movs	r3, #3
 8005586:	e004      	b.n	8005592 <HAL_GPIO_Init+0x1fa>
 8005588:	2302      	movs	r3, #2
 800558a:	e002      	b.n	8005592 <HAL_GPIO_Init+0x1fa>
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <HAL_GPIO_Init+0x1fa>
 8005590:	2300      	movs	r3, #0
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	f002 0203 	and.w	r2, r2, #3
 8005598:	0092      	lsls	r2, r2, #2
 800559a:	4093      	lsls	r3, r2
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055a2:	4937      	ldr	r1, [pc, #220]	@ (8005680 <HAL_GPIO_Init+0x2e8>)
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	089b      	lsrs	r3, r3, #2
 80055a8:	3302      	adds	r3, #2
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055b0:	4b39      	ldr	r3, [pc, #228]	@ (8005698 <HAL_GPIO_Init+0x300>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	43db      	mvns	r3, r3
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4013      	ands	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055d4:	4a30      	ldr	r2, [pc, #192]	@ (8005698 <HAL_GPIO_Init+0x300>)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80055da:	4b2f      	ldr	r3, [pc, #188]	@ (8005698 <HAL_GPIO_Init+0x300>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	43db      	mvns	r3, r3
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4013      	ands	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055fe:	4a26      	ldr	r2, [pc, #152]	@ (8005698 <HAL_GPIO_Init+0x300>)
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005604:	4b24      	ldr	r3, [pc, #144]	@ (8005698 <HAL_GPIO_Init+0x300>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	43db      	mvns	r3, r3
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4013      	ands	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005628:	4a1b      	ldr	r2, [pc, #108]	@ (8005698 <HAL_GPIO_Init+0x300>)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800562e:	4b1a      	ldr	r3, [pc, #104]	@ (8005698 <HAL_GPIO_Init+0x300>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	43db      	mvns	r3, r3
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4013      	ands	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005652:	4a11      	ldr	r2, [pc, #68]	@ (8005698 <HAL_GPIO_Init+0x300>)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	3301      	adds	r3, #1
 800565c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	fa22 f303 	lsr.w	r3, r2, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	f47f ae9d 	bne.w	80053a8 <HAL_GPIO_Init+0x10>
  }
}
 800566e:	bf00      	nop
 8005670:	bf00      	nop
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	40021000 	.word	0x40021000
 8005680:	40010000 	.word	0x40010000
 8005684:	48000400 	.word	0x48000400
 8005688:	48000800 	.word	0x48000800
 800568c:	48000c00 	.word	0x48000c00
 8005690:	48001000 	.word	0x48001000
 8005694:	48001400 	.word	0x48001400
 8005698:	40010400 	.word	0x40010400

0800569c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	887b      	ldrh	r3, [r7, #2]
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
 80056b8:	e001      	b.n	80056be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056be:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	807b      	strh	r3, [r7, #2]
 80056d8:	4613      	mov	r3, r2
 80056da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056dc:	787b      	ldrb	r3, [r7, #1]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056e2:	887a      	ldrh	r2, [r7, #2]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056e8:	e002      	b.n	80056f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056ea:	887a      	ldrh	r2, [r7, #2]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005706:	4b08      	ldr	r3, [pc, #32]	@ (8005728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005708:	695a      	ldr	r2, [r3, #20]
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	4013      	ands	r3, r2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d006      	beq.n	8005720 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005712:	4a05      	ldr	r2, [pc, #20]	@ (8005728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005718:	88fb      	ldrh	r3, [r7, #6]
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe fa14 	bl	8003b48 <HAL_GPIO_EXTI_Callback>
  }
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40010400 	.word	0x40010400

0800572c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d141      	bne.n	80057be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800573a:	4b4b      	ldr	r3, [pc, #300]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005746:	d131      	bne.n	80057ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005748:	4b47      	ldr	r3, [pc, #284]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800574a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800574e:	4a46      	ldr	r2, [pc, #280]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005754:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005758:	4b43      	ldr	r3, [pc, #268]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005760:	4a41      	ldr	r2, [pc, #260]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005762:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005766:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005768:	4b40      	ldr	r3, [pc, #256]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2232      	movs	r2, #50	@ 0x32
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	4a3f      	ldr	r2, [pc, #252]	@ (8005870 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005774:	fba2 2303 	umull	r2, r3, r2, r3
 8005778:	0c9b      	lsrs	r3, r3, #18
 800577a:	3301      	adds	r3, #1
 800577c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800577e:	e002      	b.n	8005786 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3b01      	subs	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005786:	4b38      	ldr	r3, [pc, #224]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800578e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005792:	d102      	bne.n	800579a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f2      	bne.n	8005780 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800579a:	4b33      	ldr	r3, [pc, #204]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a6:	d158      	bne.n	800585a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e057      	b.n	800585c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80057bc:	e04d      	b.n	800585a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c4:	d141      	bne.n	800584a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057c6:	4b28      	ldr	r3, [pc, #160]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80057ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d2:	d131      	bne.n	8005838 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057d4:	4b24      	ldr	r3, [pc, #144]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057da:	4a23      	ldr	r2, [pc, #140]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057e4:	4b20      	ldr	r3, [pc, #128]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057f4:	4b1d      	ldr	r3, [pc, #116]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2232      	movs	r2, #50	@ 0x32
 80057fa:	fb02 f303 	mul.w	r3, r2, r3
 80057fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005870 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005800:	fba2 2303 	umull	r2, r3, r2, r3
 8005804:	0c9b      	lsrs	r3, r3, #18
 8005806:	3301      	adds	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800580a:	e002      	b.n	8005812 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3b01      	subs	r3, #1
 8005810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005812:	4b15      	ldr	r3, [pc, #84]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800581a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800581e:	d102      	bne.n	8005826 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f2      	bne.n	800580c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005826:	4b10      	ldr	r3, [pc, #64]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800582e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005832:	d112      	bne.n	800585a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e011      	b.n	800585c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005838:	4b0b      	ldr	r3, [pc, #44]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800583e:	4a0a      	ldr	r2, [pc, #40]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005844:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005848:	e007      	b.n	800585a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800584a:	4b07      	ldr	r3, [pc, #28]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005852:	4a05      	ldr	r2, [pc, #20]	@ (8005868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005854:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005858:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	40007000 	.word	0x40007000
 800586c:	20000200 	.word	0x20000200
 8005870:	431bde83 	.word	0x431bde83

08005874 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005878:	4b05      	ldr	r3, [pc, #20]	@ (8005890 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	4a04      	ldr	r2, [pc, #16]	@ (8005890 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800587e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005882:	6093      	str	r3, [r2, #8]
}
 8005884:	bf00      	nop
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40007000 	.word	0x40007000

08005894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e2fe      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d075      	beq.n	800599e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058b2:	4b97      	ldr	r3, [pc, #604]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 030c 	and.w	r3, r3, #12
 80058ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058bc:	4b94      	ldr	r3, [pc, #592]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b0c      	cmp	r3, #12
 80058ca:	d102      	bne.n	80058d2 <HAL_RCC_OscConfig+0x3e>
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d002      	beq.n	80058d8 <HAL_RCC_OscConfig+0x44>
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d10b      	bne.n	80058f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d8:	4b8d      	ldr	r3, [pc, #564]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d05b      	beq.n	800599c <HAL_RCC_OscConfig+0x108>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d157      	bne.n	800599c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e2d9      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058f8:	d106      	bne.n	8005908 <HAL_RCC_OscConfig+0x74>
 80058fa:	4b85      	ldr	r3, [pc, #532]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a84      	ldr	r2, [pc, #528]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	e01d      	b.n	8005944 <HAL_RCC_OscConfig+0xb0>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005910:	d10c      	bne.n	800592c <HAL_RCC_OscConfig+0x98>
 8005912:	4b7f      	ldr	r3, [pc, #508]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a7e      	ldr	r2, [pc, #504]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005918:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a7b      	ldr	r2, [pc, #492]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	e00b      	b.n	8005944 <HAL_RCC_OscConfig+0xb0>
 800592c:	4b78      	ldr	r3, [pc, #480]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a77      	ldr	r2, [pc, #476]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	4b75      	ldr	r3, [pc, #468]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a74      	ldr	r2, [pc, #464]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 800593e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d013      	beq.n	8005974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7ff f8d6 	bl	8004afc <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005954:	f7ff f8d2 	bl	8004afc <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	@ 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e29e      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005966:	4b6a      	ldr	r3, [pc, #424]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCC_OscConfig+0xc0>
 8005972:	e014      	b.n	800599e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005974:	f7ff f8c2 	bl	8004afc <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800597c:	f7ff f8be 	bl	8004afc <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b64      	cmp	r3, #100	@ 0x64
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e28a      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800598e:	4b60      	ldr	r3, [pc, #384]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f0      	bne.n	800597c <HAL_RCC_OscConfig+0xe8>
 800599a:	e000      	b.n	800599e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800599c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d075      	beq.n	8005a96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059aa:	4b59      	ldr	r3, [pc, #356]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 030c 	and.w	r3, r3, #12
 80059b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059b4:	4b56      	ldr	r3, [pc, #344]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0303 	and.w	r3, r3, #3
 80059bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	2b0c      	cmp	r3, #12
 80059c2:	d102      	bne.n	80059ca <HAL_RCC_OscConfig+0x136>
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d002      	beq.n	80059d0 <HAL_RCC_OscConfig+0x13c>
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d11f      	bne.n	8005a10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059d0:	4b4f      	ldr	r3, [pc, #316]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d005      	beq.n	80059e8 <HAL_RCC_OscConfig+0x154>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e25d      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e8:	4b49      	ldr	r3, [pc, #292]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	061b      	lsls	r3, r3, #24
 80059f6:	4946      	ldr	r1, [pc, #280]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059fc:	4b45      	ldr	r3, [pc, #276]	@ (8005b14 <HAL_RCC_OscConfig+0x280>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff f82f 	bl	8004a64 <HAL_InitTick>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d043      	beq.n	8005a94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e249      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d023      	beq.n	8005a60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a18:	4b3d      	ldr	r3, [pc, #244]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a24:	f7ff f86a 	bl	8004afc <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a2c:	f7ff f866 	bl	8004afc <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e232      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a3e:	4b34      	ldr	r3, [pc, #208]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4a:	4b31      	ldr	r3, [pc, #196]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	061b      	lsls	r3, r3, #24
 8005a58:	492d      	ldr	r1, [pc, #180]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	604b      	str	r3, [r1, #4]
 8005a5e:	e01a      	b.n	8005a96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a60:	4b2b      	ldr	r3, [pc, #172]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a2a      	ldr	r2, [pc, #168]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005a66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6c:	f7ff f846 	bl	8004afc <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a74:	f7ff f842 	bl	8004afc <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e20e      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a86:	4b22      	ldr	r3, [pc, #136]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <HAL_RCC_OscConfig+0x1e0>
 8005a92:	e000      	b.n	8005a96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d041      	beq.n	8005b26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d01c      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aaa:	4b19      	ldr	r3, [pc, #100]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ab0:	4a17      	ldr	r2, [pc, #92]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005ab2:	f043 0301 	orr.w	r3, r3, #1
 8005ab6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aba:	f7ff f81f 	bl	8004afc <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ac2:	f7ff f81b 	bl	8004afc <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e1e7      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0ef      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x22e>
 8005ae2:	e020      	b.n	8005b26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aea:	4a09      	ldr	r2, [pc, #36]	@ (8005b10 <HAL_RCC_OscConfig+0x27c>)
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af4:	f7ff f802 	bl	8004afc <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005afa:	e00d      	b.n	8005b18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005afc:	f7fe fffe 	bl	8004afc <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d906      	bls.n	8005b18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e1ca      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
 8005b0e:	bf00      	nop
 8005b10:	40021000 	.word	0x40021000
 8005b14:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b18:	4b8c      	ldr	r3, [pc, #560]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1ea      	bne.n	8005afc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 80a6 	beq.w	8005c80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b34:	2300      	movs	r3, #0
 8005b36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b38:	4b84      	ldr	r3, [pc, #528]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <HAL_RCC_OscConfig+0x2b4>
 8005b44:	2301      	movs	r3, #1
 8005b46:	e000      	b.n	8005b4a <HAL_RCC_OscConfig+0x2b6>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00d      	beq.n	8005b6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b52:	4a7e      	ldr	r2, [pc, #504]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b5a:	4b7c      	ldr	r3, [pc, #496]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b66:	2301      	movs	r3, #1
 8005b68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b6a:	4b79      	ldr	r3, [pc, #484]	@ (8005d50 <HAL_RCC_OscConfig+0x4bc>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d118      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b76:	4b76      	ldr	r3, [pc, #472]	@ (8005d50 <HAL_RCC_OscConfig+0x4bc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a75      	ldr	r2, [pc, #468]	@ (8005d50 <HAL_RCC_OscConfig+0x4bc>)
 8005b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b82:	f7fe ffbb 	bl	8004afc <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b88:	e008      	b.n	8005b9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b8a:	f7fe ffb7 	bl	8004afc <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e183      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b9c:	4b6c      	ldr	r3, [pc, #432]	@ (8005d50 <HAL_RCC_OscConfig+0x4bc>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0f0      	beq.n	8005b8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d108      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x32e>
 8005bb0:	4b66      	ldr	r3, [pc, #408]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb6:	4a65      	ldr	r2, [pc, #404]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005bb8:	f043 0301 	orr.w	r3, r3, #1
 8005bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bc0:	e024      	b.n	8005c0c <HAL_RCC_OscConfig+0x378>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b05      	cmp	r3, #5
 8005bc8:	d110      	bne.n	8005bec <HAL_RCC_OscConfig+0x358>
 8005bca:	4b60      	ldr	r3, [pc, #384]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd0:	4a5e      	ldr	r2, [pc, #376]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005bd2:	f043 0304 	orr.w	r3, r3, #4
 8005bd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bda:	4b5c      	ldr	r3, [pc, #368]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be0:	4a5a      	ldr	r2, [pc, #360]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005be2:	f043 0301 	orr.w	r3, r3, #1
 8005be6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bea:	e00f      	b.n	8005c0c <HAL_RCC_OscConfig+0x378>
 8005bec:	4b57      	ldr	r3, [pc, #348]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf2:	4a56      	ldr	r2, [pc, #344]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bfc:	4b53      	ldr	r3, [pc, #332]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c02:	4a52      	ldr	r2, [pc, #328]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005c04:	f023 0304 	bic.w	r3, r3, #4
 8005c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d016      	beq.n	8005c42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c14:	f7fe ff72 	bl	8004afc <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c1a:	e00a      	b.n	8005c32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1c:	f7fe ff6e 	bl	8004afc <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e138      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c32:	4b46      	ldr	r3, [pc, #280]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0ed      	beq.n	8005c1c <HAL_RCC_OscConfig+0x388>
 8005c40:	e015      	b.n	8005c6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c42:	f7fe ff5b 	bl	8004afc <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c48:	e00a      	b.n	8005c60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c4a:	f7fe ff57 	bl	8004afc <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e121      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c60:	4b3a      	ldr	r3, [pc, #232]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1ed      	bne.n	8005c4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c6e:	7ffb      	ldrb	r3, [r7, #31]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d105      	bne.n	8005c80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c74:	4b35      	ldr	r3, [pc, #212]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c78:	4a34      	ldr	r2, [pc, #208]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005c7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c7e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d03c      	beq.n	8005d06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d01c      	beq.n	8005cce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c94:	4b2d      	ldr	r3, [pc, #180]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c9a:	4a2c      	ldr	r2, [pc, #176]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca4:	f7fe ff2a 	bl	8004afc <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cac:	f7fe ff26 	bl	8004afc <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e0f2      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cbe:	4b23      	ldr	r3, [pc, #140]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0ef      	beq.n	8005cac <HAL_RCC_OscConfig+0x418>
 8005ccc:	e01b      	b.n	8005d06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cce:	4b1f      	ldr	r3, [pc, #124]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005cd6:	f023 0301 	bic.w	r3, r3, #1
 8005cda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cde:	f7fe ff0d 	bl	8004afc <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ce6:	f7fe ff09 	bl	8004afc <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e0d5      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cf8:	4b14      	ldr	r3, [pc, #80]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1ef      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80c9 	beq.w	8005ea2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d10:	4b0e      	ldr	r3, [pc, #56]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 030c 	and.w	r3, r3, #12
 8005d18:	2b0c      	cmp	r3, #12
 8005d1a:	f000 8083 	beq.w	8005e24 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d15e      	bne.n	8005de4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d26:	4b09      	ldr	r3, [pc, #36]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a08      	ldr	r2, [pc, #32]	@ (8005d4c <HAL_RCC_OscConfig+0x4b8>)
 8005d2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d32:	f7fe fee3 	bl	8004afc <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d38:	e00c      	b.n	8005d54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d3a:	f7fe fedf 	bl	8004afc <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d905      	bls.n	8005d54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e0ab      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d54:	4b55      	ldr	r3, [pc, #340]	@ (8005eac <HAL_RCC_OscConfig+0x618>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1ec      	bne.n	8005d3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d60:	4b52      	ldr	r3, [pc, #328]	@ (8005eac <HAL_RCC_OscConfig+0x618>)
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	4b52      	ldr	r3, [pc, #328]	@ (8005eb0 <HAL_RCC_OscConfig+0x61c>)
 8005d66:	4013      	ands	r3, r2
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	6a11      	ldr	r1, [r2, #32]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d70:	3a01      	subs	r2, #1
 8005d72:	0112      	lsls	r2, r2, #4
 8005d74:	4311      	orrs	r1, r2
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005d7a:	0212      	lsls	r2, r2, #8
 8005d7c:	4311      	orrs	r1, r2
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005d82:	0852      	lsrs	r2, r2, #1
 8005d84:	3a01      	subs	r2, #1
 8005d86:	0552      	lsls	r2, r2, #21
 8005d88:	4311      	orrs	r1, r2
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005d8e:	0852      	lsrs	r2, r2, #1
 8005d90:	3a01      	subs	r2, #1
 8005d92:	0652      	lsls	r2, r2, #25
 8005d94:	4311      	orrs	r1, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d9a:	06d2      	lsls	r2, r2, #27
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	4943      	ldr	r1, [pc, #268]	@ (8005eac <HAL_RCC_OscConfig+0x618>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005da4:	4b41      	ldr	r3, [pc, #260]	@ (8005eac <HAL_RCC_OscConfig+0x618>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a40      	ldr	r2, [pc, #256]	@ (8005eac <HAL_RCC_OscConfig+0x618>)
 8005daa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005db0:	4b3e      	ldr	r3, [pc, #248]	@ (8005eac <HAL_RCC_OscConfig+0x618>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	4a3d      	ldr	r2, [pc, #244]	@ (8005eac <HAL_RCC_OscConfig+0x618>)
 8005db6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbc:	f7fe fe9e 	bl	8004afc <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc4:	f7fe fe9a 	bl	8004afc <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e066      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd6:	4b35      	ldr	r3, [pc, #212]	@ (8005eac <HAL_RCC_OscConfig+0x618>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0f0      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x530>
 8005de2:	e05e      	b.n	8005ea2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de4:	4b31      	ldr	r3, [pc, #196]	@ (8005eac <HAL_RCC_OscConfig+0x618>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a30      	ldr	r2, [pc, #192]	@ (8005eac <HAL_RCC_OscConfig+0x618>)
 8005dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df0:	f7fe fe84 	bl	8004afc <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df8:	f7fe fe80 	bl	8004afc <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e04c      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e0a:	4b28      	ldr	r3, [pc, #160]	@ (8005eac <HAL_RCC_OscConfig+0x618>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f0      	bne.n	8005df8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e16:	4b25      	ldr	r3, [pc, #148]	@ (8005eac <HAL_RCC_OscConfig+0x618>)
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	4924      	ldr	r1, [pc, #144]	@ (8005eac <HAL_RCC_OscConfig+0x618>)
 8005e1c:	4b25      	ldr	r3, [pc, #148]	@ (8005eb4 <HAL_RCC_OscConfig+0x620>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	60cb      	str	r3, [r1, #12]
 8005e22:	e03e      	b.n	8005ea2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d101      	bne.n	8005e30 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e039      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e30:	4b1e      	ldr	r3, [pc, #120]	@ (8005eac <HAL_RCC_OscConfig+0x618>)
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f003 0203 	and.w	r2, r3, #3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d12c      	bne.n	8005e9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d123      	bne.n	8005e9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e60:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d11b      	bne.n	8005e9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e70:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d113      	bne.n	8005e9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e80:	085b      	lsrs	r3, r3, #1
 8005e82:	3b01      	subs	r3, #1
 8005e84:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d109      	bne.n	8005e9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e94:	085b      	lsrs	r3, r3, #1
 8005e96:	3b01      	subs	r3, #1
 8005e98:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d001      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3720      	adds	r7, #32
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	019f800c 	.word	0x019f800c
 8005eb4:	feeefffc 	.word	0xfeeefffc

08005eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e11e      	b.n	800610e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed0:	4b91      	ldr	r3, [pc, #580]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d910      	bls.n	8005f00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ede:	4b8e      	ldr	r3, [pc, #568]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f023 020f 	bic.w	r2, r3, #15
 8005ee6:	498c      	ldr	r1, [pc, #560]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eee:	4b8a      	ldr	r3, [pc, #552]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d001      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e106      	b.n	800610e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d073      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d129      	bne.n	8005f68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f14:	4b81      	ldr	r3, [pc, #516]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0f4      	b.n	800610e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f24:	f000 f99e 	bl	8006264 <RCC_GetSysClockFreqFromPLLSource>
 8005f28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	4a7c      	ldr	r2, [pc, #496]	@ (8006120 <HAL_RCC_ClockConfig+0x268>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d93f      	bls.n	8005fb2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f32:	4b7a      	ldr	r3, [pc, #488]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d009      	beq.n	8005f52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d033      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d12f      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f52:	4b72      	ldr	r3, [pc, #456]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f5a:	4a70      	ldr	r2, [pc, #448]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8005f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f62:	2380      	movs	r3, #128	@ 0x80
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	e024      	b.n	8005fb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d107      	bne.n	8005f80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f70:	4b6a      	ldr	r3, [pc, #424]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d109      	bne.n	8005f90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0c6      	b.n	800610e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f80:	4b66      	ldr	r3, [pc, #408]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e0be      	b.n	800610e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005f90:	f000 f8ce 	bl	8006130 <HAL_RCC_GetSysClockFreq>
 8005f94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4a61      	ldr	r2, [pc, #388]	@ (8006120 <HAL_RCC_ClockConfig+0x268>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d909      	bls.n	8005fb2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f9e:	4b5f      	ldr	r3, [pc, #380]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fa6:	4a5d      	ldr	r2, [pc, #372]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8005fa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005fae:	2380      	movs	r3, #128	@ 0x80
 8005fb0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fb2:	4b5a      	ldr	r3, [pc, #360]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f023 0203 	bic.w	r2, r3, #3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	4957      	ldr	r1, [pc, #348]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fc4:	f7fe fd9a 	bl	8004afc <HAL_GetTick>
 8005fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fca:	e00a      	b.n	8005fe2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fcc:	f7fe fd96 	bl	8004afc <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e095      	b.n	800610e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe2:	4b4e      	ldr	r3, [pc, #312]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 020c 	and.w	r2, r3, #12
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d1eb      	bne.n	8005fcc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d023      	beq.n	8006048 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800600c:	4b43      	ldr	r3, [pc, #268]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	4a42      	ldr	r2, [pc, #264]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8006012:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006016:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d007      	beq.n	8006034 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006024:	4b3d      	ldr	r3, [pc, #244]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800602c:	4a3b      	ldr	r2, [pc, #236]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 800602e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006032:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006034:	4b39      	ldr	r3, [pc, #228]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	4936      	ldr	r1, [pc, #216]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8006042:	4313      	orrs	r3, r2
 8006044:	608b      	str	r3, [r1, #8]
 8006046:	e008      	b.n	800605a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	2b80      	cmp	r3, #128	@ 0x80
 800604c:	d105      	bne.n	800605a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800604e:	4b33      	ldr	r3, [pc, #204]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	4a32      	ldr	r2, [pc, #200]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8006054:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006058:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800605a:	4b2f      	ldr	r3, [pc, #188]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d21d      	bcs.n	80060a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006068:	4b2b      	ldr	r3, [pc, #172]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f023 020f 	bic.w	r2, r3, #15
 8006070:	4929      	ldr	r1, [pc, #164]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	4313      	orrs	r3, r2
 8006076:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006078:	f7fe fd40 	bl	8004afc <HAL_GetTick>
 800607c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800607e:	e00a      	b.n	8006096 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006080:	f7fe fd3c 	bl	8004afc <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800608e:	4293      	cmp	r3, r2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e03b      	b.n	800610e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006096:	4b20      	ldr	r3, [pc, #128]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d1ed      	bne.n	8006080 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060b0:	4b1a      	ldr	r3, [pc, #104]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4917      	ldr	r1, [pc, #92]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060ce:	4b13      	ldr	r3, [pc, #76]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	490f      	ldr	r1, [pc, #60]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060e2:	f000 f825 	bl	8006130 <HAL_RCC_GetSysClockFreq>
 80060e6:	4602      	mov	r2, r0
 80060e8:	4b0c      	ldr	r3, [pc, #48]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	091b      	lsrs	r3, r3, #4
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	490c      	ldr	r1, [pc, #48]	@ (8006124 <HAL_RCC_ClockConfig+0x26c>)
 80060f4:	5ccb      	ldrb	r3, [r1, r3]
 80060f6:	f003 031f 	and.w	r3, r3, #31
 80060fa:	fa22 f303 	lsr.w	r3, r2, r3
 80060fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006128 <HAL_RCC_ClockConfig+0x270>)
 8006100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006102:	4b0a      	ldr	r3, [pc, #40]	@ (800612c <HAL_RCC_ClockConfig+0x274>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe fcac 	bl	8004a64 <HAL_InitTick>
 800610c:	4603      	mov	r3, r0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	40022000 	.word	0x40022000
 800611c:	40021000 	.word	0x40021000
 8006120:	04c4b400 	.word	0x04c4b400
 8006124:	0800bc10 	.word	0x0800bc10
 8006128:	20000200 	.word	0x20000200
 800612c:	20000204 	.word	0x20000204

08006130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006136:	4b2c      	ldr	r3, [pc, #176]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 030c 	and.w	r3, r3, #12
 800613e:	2b04      	cmp	r3, #4
 8006140:	d102      	bne.n	8006148 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006142:	4b2a      	ldr	r3, [pc, #168]	@ (80061ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	e047      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006148:	4b27      	ldr	r3, [pc, #156]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f003 030c 	and.w	r3, r3, #12
 8006150:	2b08      	cmp	r3, #8
 8006152:	d102      	bne.n	800615a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006154:	4b26      	ldr	r3, [pc, #152]	@ (80061f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	e03e      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800615a:	4b23      	ldr	r3, [pc, #140]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f003 030c 	and.w	r3, r3, #12
 8006162:	2b0c      	cmp	r3, #12
 8006164:	d136      	bne.n	80061d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006166:	4b20      	ldr	r3, [pc, #128]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006170:	4b1d      	ldr	r3, [pc, #116]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	091b      	lsrs	r3, r3, #4
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	3301      	adds	r3, #1
 800617c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b03      	cmp	r3, #3
 8006182:	d10c      	bne.n	800619e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006184:	4a1a      	ldr	r2, [pc, #104]	@ (80061f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	fbb2 f3f3 	udiv	r3, r2, r3
 800618c:	4a16      	ldr	r2, [pc, #88]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800618e:	68d2      	ldr	r2, [r2, #12]
 8006190:	0a12      	lsrs	r2, r2, #8
 8006192:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006196:	fb02 f303 	mul.w	r3, r2, r3
 800619a:	617b      	str	r3, [r7, #20]
      break;
 800619c:	e00c      	b.n	80061b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800619e:	4a13      	ldr	r2, [pc, #76]	@ (80061ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a6:	4a10      	ldr	r2, [pc, #64]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061a8:	68d2      	ldr	r2, [r2, #12]
 80061aa:	0a12      	lsrs	r2, r2, #8
 80061ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061b0:	fb02 f303 	mul.w	r3, r2, r3
 80061b4:	617b      	str	r3, [r7, #20]
      break;
 80061b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061b8:	4b0b      	ldr	r3, [pc, #44]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	0e5b      	lsrs	r3, r3, #25
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	3301      	adds	r3, #1
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	e001      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80061d8:	693b      	ldr	r3, [r7, #16]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40021000 	.word	0x40021000
 80061ec:	00f42400 	.word	0x00f42400
 80061f0:	016e3600 	.word	0x016e3600

080061f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061f4:	b480      	push	{r7}
 80061f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061f8:	4b03      	ldr	r3, [pc, #12]	@ (8006208 <HAL_RCC_GetHCLKFreq+0x14>)
 80061fa:	681b      	ldr	r3, [r3, #0]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	20000200 	.word	0x20000200

0800620c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006210:	f7ff fff0 	bl	80061f4 <HAL_RCC_GetHCLKFreq>
 8006214:	4602      	mov	r2, r0
 8006216:	4b06      	ldr	r3, [pc, #24]	@ (8006230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	0a1b      	lsrs	r3, r3, #8
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	4904      	ldr	r1, [pc, #16]	@ (8006234 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006222:	5ccb      	ldrb	r3, [r1, r3]
 8006224:	f003 031f 	and.w	r3, r3, #31
 8006228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800622c:	4618      	mov	r0, r3
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40021000 	.word	0x40021000
 8006234:	0800bc20 	.word	0x0800bc20

08006238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800623c:	f7ff ffda 	bl	80061f4 <HAL_RCC_GetHCLKFreq>
 8006240:	4602      	mov	r2, r0
 8006242:	4b06      	ldr	r3, [pc, #24]	@ (800625c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	0adb      	lsrs	r3, r3, #11
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	4904      	ldr	r1, [pc, #16]	@ (8006260 <HAL_RCC_GetPCLK2Freq+0x28>)
 800624e:	5ccb      	ldrb	r3, [r1, r3]
 8006250:	f003 031f 	and.w	r3, r3, #31
 8006254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006258:	4618      	mov	r0, r3
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40021000 	.word	0x40021000
 8006260:	0800bc20 	.word	0x0800bc20

08006264 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800626a:	4b1e      	ldr	r3, [pc, #120]	@ (80062e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006274:	4b1b      	ldr	r3, [pc, #108]	@ (80062e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	091b      	lsrs	r3, r3, #4
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	3301      	adds	r3, #1
 8006280:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	2b03      	cmp	r3, #3
 8006286:	d10c      	bne.n	80062a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006288:	4a17      	ldr	r2, [pc, #92]	@ (80062e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006290:	4a14      	ldr	r2, [pc, #80]	@ (80062e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006292:	68d2      	ldr	r2, [r2, #12]
 8006294:	0a12      	lsrs	r2, r2, #8
 8006296:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800629a:	fb02 f303 	mul.w	r3, r2, r3
 800629e:	617b      	str	r3, [r7, #20]
    break;
 80062a0:	e00c      	b.n	80062bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062a2:	4a12      	ldr	r2, [pc, #72]	@ (80062ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062aa:	4a0e      	ldr	r2, [pc, #56]	@ (80062e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062ac:	68d2      	ldr	r2, [r2, #12]
 80062ae:	0a12      	lsrs	r2, r2, #8
 80062b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062b4:	fb02 f303 	mul.w	r3, r2, r3
 80062b8:	617b      	str	r3, [r7, #20]
    break;
 80062ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062bc:	4b09      	ldr	r3, [pc, #36]	@ (80062e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	0e5b      	lsrs	r3, r3, #25
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	3301      	adds	r3, #1
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80062d6:	687b      	ldr	r3, [r7, #4]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	40021000 	.word	0x40021000
 80062e8:	016e3600 	.word	0x016e3600
 80062ec:	00f42400 	.word	0x00f42400

080062f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062f8:	2300      	movs	r3, #0
 80062fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062fc:	2300      	movs	r3, #0
 80062fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 8098 	beq.w	800643e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800630e:	2300      	movs	r3, #0
 8006310:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006312:	4b43      	ldr	r3, [pc, #268]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10d      	bne.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800631e:	4b40      	ldr	r3, [pc, #256]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006322:	4a3f      	ldr	r2, [pc, #252]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006328:	6593      	str	r3, [r2, #88]	@ 0x58
 800632a:	4b3d      	ldr	r3, [pc, #244]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800632c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800632e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006332:	60bb      	str	r3, [r7, #8]
 8006334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006336:	2301      	movs	r3, #1
 8006338:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800633a:	4b3a      	ldr	r3, [pc, #232]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a39      	ldr	r2, [pc, #228]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006344:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006346:	f7fe fbd9 	bl	8004afc <HAL_GetTick>
 800634a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800634c:	e009      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800634e:	f7fe fbd5 	bl	8004afc <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d902      	bls.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	74fb      	strb	r3, [r7, #19]
        break;
 8006360:	e005      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006362:	4b30      	ldr	r3, [pc, #192]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0ef      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800636e:	7cfb      	ldrb	r3, [r7, #19]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d159      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006374:	4b2a      	ldr	r3, [pc, #168]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800637a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800637e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d01e      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	429a      	cmp	r2, r3
 800638e:	d019      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006390:	4b23      	ldr	r3, [pc, #140]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800639a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800639c:	4b20      	ldr	r3, [pc, #128]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063bc:	4a18      	ldr	r2, [pc, #96]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d016      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ce:	f7fe fb95 	bl	8004afc <HAL_GetTick>
 80063d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063d4:	e00b      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d6:	f7fe fb91 	bl	8004afc <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d902      	bls.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	74fb      	strb	r3, [r7, #19]
            break;
 80063ec:	e006      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0ec      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80063fc:	7cfb      	ldrb	r3, [r7, #19]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10b      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006402:	4b07      	ldr	r3, [pc, #28]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006408:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006410:	4903      	ldr	r1, [pc, #12]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006418:	e008      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800641a:	7cfb      	ldrb	r3, [r7, #19]
 800641c:	74bb      	strb	r3, [r7, #18]
 800641e:	e005      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006420:	40021000 	.word	0x40021000
 8006424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006428:	7cfb      	ldrb	r3, [r7, #19]
 800642a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800642c:	7c7b      	ldrb	r3, [r7, #17]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d105      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006432:	4ba7      	ldr	r3, [pc, #668]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006436:	4aa6      	ldr	r2, [pc, #664]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006438:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800643c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800644a:	4ba1      	ldr	r3, [pc, #644]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800644c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006450:	f023 0203 	bic.w	r2, r3, #3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	499d      	ldr	r1, [pc, #628]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00a      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800646c:	4b98      	ldr	r3, [pc, #608]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800646e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006472:	f023 020c 	bic.w	r2, r3, #12
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	4995      	ldr	r1, [pc, #596]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800647c:	4313      	orrs	r3, r2
 800647e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800648e:	4b90      	ldr	r3, [pc, #576]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006494:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	498c      	ldr	r1, [pc, #560]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064b0:	4b87      	ldr	r3, [pc, #540]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	4984      	ldr	r1, [pc, #528]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0310 	and.w	r3, r3, #16
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064d2:	4b7f      	ldr	r3, [pc, #508]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	497b      	ldr	r1, [pc, #492]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064f4:	4b76      	ldr	r3, [pc, #472]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	4973      	ldr	r1, [pc, #460]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006504:	4313      	orrs	r3, r2
 8006506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006516:	4b6e      	ldr	r3, [pc, #440]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	496a      	ldr	r1, [pc, #424]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006526:	4313      	orrs	r3, r2
 8006528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006538:	4b65      	ldr	r3, [pc, #404]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800653e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	4962      	ldr	r1, [pc, #392]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006548:	4313      	orrs	r3, r2
 800654a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800655a:	4b5d      	ldr	r3, [pc, #372]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006560:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	4959      	ldr	r1, [pc, #356]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800656a:	4313      	orrs	r3, r2
 800656c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00a      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800657c:	4b54      	ldr	r3, [pc, #336]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006582:	f023 0203 	bic.w	r2, r3, #3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658a:	4951      	ldr	r1, [pc, #324]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658c:	4313      	orrs	r3, r2
 800658e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800659e:	4b4c      	ldr	r3, [pc, #304]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ac:	4948      	ldr	r1, [pc, #288]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d015      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065c0:	4b43      	ldr	r3, [pc, #268]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ce:	4940      	ldr	r1, [pc, #256]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065de:	d105      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e0:	4b3b      	ldr	r3, [pc, #236]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	4a3a      	ldr	r2, [pc, #232]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ea:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d015      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065f8:	4b35      	ldr	r3, [pc, #212]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006606:	4932      	ldr	r1, [pc, #200]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006608:	4313      	orrs	r3, r2
 800660a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006612:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006616:	d105      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006618:	4b2d      	ldr	r3, [pc, #180]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	4a2c      	ldr	r2, [pc, #176]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006622:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d015      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006630:	4b27      	ldr	r3, [pc, #156]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006636:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663e:	4924      	ldr	r1, [pc, #144]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006640:	4313      	orrs	r3, r2
 8006642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800664e:	d105      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006650:	4b1f      	ldr	r3, [pc, #124]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	4a1e      	ldr	r2, [pc, #120]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006656:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800665a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d015      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006668:	4b19      	ldr	r3, [pc, #100]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800666e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006676:	4916      	ldr	r1, [pc, #88]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006678:	4313      	orrs	r3, r2
 800667a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006682:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006686:	d105      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006688:	4b11      	ldr	r3, [pc, #68]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	4a10      	ldr	r2, [pc, #64]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800668e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006692:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d019      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066a0:	4b0b      	ldr	r3, [pc, #44]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ae:	4908      	ldr	r1, [pc, #32]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066be:	d109      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066c0:	4b03      	ldr	r3, [pc, #12]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	4a02      	ldr	r2, [pc, #8]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ca:	60d3      	str	r3, [r2, #12]
 80066cc:	e002      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80066ce:	bf00      	nop
 80066d0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d015      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80066e0:	4b29      	ldr	r3, [pc, #164]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ee:	4926      	ldr	r1, [pc, #152]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066fe:	d105      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006700:	4b21      	ldr	r3, [pc, #132]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	4a20      	ldr	r2, [pc, #128]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800670a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d015      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006718:	4b1b      	ldr	r3, [pc, #108]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800671a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800671e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006726:	4918      	ldr	r1, [pc, #96]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006736:	d105      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006738:	4b13      	ldr	r3, [pc, #76]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	4a12      	ldr	r2, [pc, #72]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800673e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006742:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d015      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006750:	4b0d      	ldr	r3, [pc, #52]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006752:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006756:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800675e:	490a      	ldr	r1, [pc, #40]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800676a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800676e:	d105      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006770:	4b05      	ldr	r3, [pc, #20]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	4a04      	ldr	r2, [pc, #16]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800677a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800677c:	7cbb      	ldrb	r3, [r7, #18]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	40021000 	.word	0x40021000

0800678c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e054      	b.n	8006848 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d111      	bne.n	80067ce <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f002 fb3c 	bl	8008e30 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d102      	bne.n	80067c6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a23      	ldr	r2, [pc, #140]	@ (8006850 <HAL_TIM_Base_Init+0xc4>)
 80067c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2202      	movs	r2, #2
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3304      	adds	r3, #4
 80067de:	4619      	mov	r1, r3
 80067e0:	4610      	mov	r0, r2
 80067e2:	f001 fc7b 	bl	80080dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	08004569 	.word	0x08004569

08006854 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b01      	cmp	r3, #1
 8006866:	d001      	beq.n	800686c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e04c      	b.n	8006906 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a26      	ldr	r2, [pc, #152]	@ (8006914 <HAL_TIM_Base_Start+0xc0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d022      	beq.n	80068c4 <HAL_TIM_Base_Start+0x70>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006886:	d01d      	beq.n	80068c4 <HAL_TIM_Base_Start+0x70>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a22      	ldr	r2, [pc, #136]	@ (8006918 <HAL_TIM_Base_Start+0xc4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d018      	beq.n	80068c4 <HAL_TIM_Base_Start+0x70>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a21      	ldr	r2, [pc, #132]	@ (800691c <HAL_TIM_Base_Start+0xc8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d013      	beq.n	80068c4 <HAL_TIM_Base_Start+0x70>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006920 <HAL_TIM_Base_Start+0xcc>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d00e      	beq.n	80068c4 <HAL_TIM_Base_Start+0x70>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006924 <HAL_TIM_Base_Start+0xd0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d009      	beq.n	80068c4 <HAL_TIM_Base_Start+0x70>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006928 <HAL_TIM_Base_Start+0xd4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d004      	beq.n	80068c4 <HAL_TIM_Base_Start+0x70>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1b      	ldr	r2, [pc, #108]	@ (800692c <HAL_TIM_Base_Start+0xd8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d115      	bne.n	80068f0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689a      	ldr	r2, [r3, #8]
 80068ca:	4b19      	ldr	r3, [pc, #100]	@ (8006930 <HAL_TIM_Base_Start+0xdc>)
 80068cc:	4013      	ands	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b06      	cmp	r3, #6
 80068d4:	d015      	beq.n	8006902 <HAL_TIM_Base_Start+0xae>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068dc:	d011      	beq.n	8006902 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f042 0201 	orr.w	r2, r2, #1
 80068ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ee:	e008      	b.n	8006902 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	e000      	b.n	8006904 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006902:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40012c00 	.word	0x40012c00
 8006918:	40000400 	.word	0x40000400
 800691c:	40000800 	.word	0x40000800
 8006920:	40000c00 	.word	0x40000c00
 8006924:	40013400 	.word	0x40013400
 8006928:	40014000 	.word	0x40014000
 800692c:	40015000 	.word	0x40015000
 8006930:	00010007 	.word	0x00010007

08006934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b01      	cmp	r3, #1
 8006946:	d001      	beq.n	800694c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e054      	b.n	80069f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68da      	ldr	r2, [r3, #12]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0201 	orr.w	r2, r2, #1
 8006962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a26      	ldr	r2, [pc, #152]	@ (8006a04 <HAL_TIM_Base_Start_IT+0xd0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d022      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x80>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006976:	d01d      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x80>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a22      	ldr	r2, [pc, #136]	@ (8006a08 <HAL_TIM_Base_Start_IT+0xd4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d018      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x80>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a21      	ldr	r2, [pc, #132]	@ (8006a0c <HAL_TIM_Base_Start_IT+0xd8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d013      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x80>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a1f      	ldr	r2, [pc, #124]	@ (8006a10 <HAL_TIM_Base_Start_IT+0xdc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d00e      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x80>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a1e      	ldr	r2, [pc, #120]	@ (8006a14 <HAL_TIM_Base_Start_IT+0xe0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d009      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x80>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a18 <HAL_TIM_Base_Start_IT+0xe4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d004      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x80>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1b      	ldr	r2, [pc, #108]	@ (8006a1c <HAL_TIM_Base_Start_IT+0xe8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d115      	bne.n	80069e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	4b19      	ldr	r3, [pc, #100]	@ (8006a20 <HAL_TIM_Base_Start_IT+0xec>)
 80069bc:	4013      	ands	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b06      	cmp	r3, #6
 80069c4:	d015      	beq.n	80069f2 <HAL_TIM_Base_Start_IT+0xbe>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069cc:	d011      	beq.n	80069f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f042 0201 	orr.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069de:	e008      	b.n	80069f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0201 	orr.w	r2, r2, #1
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	e000      	b.n	80069f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40012c00 	.word	0x40012c00
 8006a08:	40000400 	.word	0x40000400
 8006a0c:	40000800 	.word	0x40000800
 8006a10:	40000c00 	.word	0x40000c00
 8006a14:	40013400 	.word	0x40013400
 8006a18:	40014000 	.word	0x40014000
 8006a1c:	40015000 	.word	0x40015000
 8006a20:	00010007 	.word	0x00010007

08006a24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e054      	b.n	8006ae0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d111      	bne.n	8006a66 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f002 f9f0 	bl	8008e30 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a23      	ldr	r2, [pc, #140]	@ (8006ae8 <HAL_TIM_PWM_Init+0xc4>)
 8006a5c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3304      	adds	r3, #4
 8006a76:	4619      	mov	r1, r3
 8006a78:	4610      	mov	r0, r2
 8006a7a:	f001 fb2f 	bl	80080dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	08006aed 	.word	0x08006aed

08006aec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d109      	bne.n	8006b24 <HAL_TIM_PWM_Start+0x24>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	bf14      	ite	ne
 8006b1c:	2301      	movne	r3, #1
 8006b1e:	2300      	moveq	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	e03c      	b.n	8006b9e <HAL_TIM_PWM_Start+0x9e>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d109      	bne.n	8006b3e <HAL_TIM_PWM_Start+0x3e>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	bf14      	ite	ne
 8006b36:	2301      	movne	r3, #1
 8006b38:	2300      	moveq	r3, #0
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	e02f      	b.n	8006b9e <HAL_TIM_PWM_Start+0x9e>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d109      	bne.n	8006b58 <HAL_TIM_PWM_Start+0x58>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	bf14      	ite	ne
 8006b50:	2301      	movne	r3, #1
 8006b52:	2300      	moveq	r3, #0
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	e022      	b.n	8006b9e <HAL_TIM_PWM_Start+0x9e>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2b0c      	cmp	r3, #12
 8006b5c:	d109      	bne.n	8006b72 <HAL_TIM_PWM_Start+0x72>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	bf14      	ite	ne
 8006b6a:	2301      	movne	r3, #1
 8006b6c:	2300      	moveq	r3, #0
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	e015      	b.n	8006b9e <HAL_TIM_PWM_Start+0x9e>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b10      	cmp	r3, #16
 8006b76:	d109      	bne.n	8006b8c <HAL_TIM_PWM_Start+0x8c>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	bf14      	ite	ne
 8006b84:	2301      	movne	r3, #1
 8006b86:	2300      	moveq	r3, #0
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	e008      	b.n	8006b9e <HAL_TIM_PWM_Start+0x9e>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	bf14      	ite	ne
 8006b98:	2301      	movne	r3, #1
 8006b9a:	2300      	moveq	r3, #0
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e0a6      	b.n	8006cf4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <HAL_TIM_PWM_Start+0xb6>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bb4:	e023      	b.n	8006bfe <HAL_TIM_PWM_Start+0xfe>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b04      	cmp	r3, #4
 8006bba:	d104      	bne.n	8006bc6 <HAL_TIM_PWM_Start+0xc6>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bc4:	e01b      	b.n	8006bfe <HAL_TIM_PWM_Start+0xfe>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d104      	bne.n	8006bd6 <HAL_TIM_PWM_Start+0xd6>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bd4:	e013      	b.n	8006bfe <HAL_TIM_PWM_Start+0xfe>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b0c      	cmp	r3, #12
 8006bda:	d104      	bne.n	8006be6 <HAL_TIM_PWM_Start+0xe6>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006be4:	e00b      	b.n	8006bfe <HAL_TIM_PWM_Start+0xfe>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b10      	cmp	r3, #16
 8006bea:	d104      	bne.n	8006bf6 <HAL_TIM_PWM_Start+0xf6>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bf4:	e003      	b.n	8006bfe <HAL_TIM_PWM_Start+0xfe>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2201      	movs	r2, #1
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f002 f8ec 	bl	8008de4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a3a      	ldr	r2, [pc, #232]	@ (8006cfc <HAL_TIM_PWM_Start+0x1fc>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d018      	beq.n	8006c48 <HAL_TIM_PWM_Start+0x148>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a39      	ldr	r2, [pc, #228]	@ (8006d00 <HAL_TIM_PWM_Start+0x200>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d013      	beq.n	8006c48 <HAL_TIM_PWM_Start+0x148>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a37      	ldr	r2, [pc, #220]	@ (8006d04 <HAL_TIM_PWM_Start+0x204>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d00e      	beq.n	8006c48 <HAL_TIM_PWM_Start+0x148>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a36      	ldr	r2, [pc, #216]	@ (8006d08 <HAL_TIM_PWM_Start+0x208>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d009      	beq.n	8006c48 <HAL_TIM_PWM_Start+0x148>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a34      	ldr	r2, [pc, #208]	@ (8006d0c <HAL_TIM_PWM_Start+0x20c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d004      	beq.n	8006c48 <HAL_TIM_PWM_Start+0x148>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a33      	ldr	r2, [pc, #204]	@ (8006d10 <HAL_TIM_PWM_Start+0x210>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d101      	bne.n	8006c4c <HAL_TIM_PWM_Start+0x14c>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e000      	b.n	8006c4e <HAL_TIM_PWM_Start+0x14e>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a25      	ldr	r2, [pc, #148]	@ (8006cfc <HAL_TIM_PWM_Start+0x1fc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d022      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x1b2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c74:	d01d      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x1b2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a26      	ldr	r2, [pc, #152]	@ (8006d14 <HAL_TIM_PWM_Start+0x214>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d018      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x1b2>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a24      	ldr	r2, [pc, #144]	@ (8006d18 <HAL_TIM_PWM_Start+0x218>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d013      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x1b2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a23      	ldr	r2, [pc, #140]	@ (8006d1c <HAL_TIM_PWM_Start+0x21c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00e      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x1b2>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a19      	ldr	r2, [pc, #100]	@ (8006d00 <HAL_TIM_PWM_Start+0x200>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d009      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x1b2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a18      	ldr	r2, [pc, #96]	@ (8006d04 <HAL_TIM_PWM_Start+0x204>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d004      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x1b2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a18      	ldr	r2, [pc, #96]	@ (8006d10 <HAL_TIM_PWM_Start+0x210>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d115      	bne.n	8006cde <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	4b19      	ldr	r3, [pc, #100]	@ (8006d20 <HAL_TIM_PWM_Start+0x220>)
 8006cba:	4013      	ands	r3, r2
 8006cbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b06      	cmp	r3, #6
 8006cc2:	d015      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x1f0>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cca:	d011      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0201 	orr.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cdc:	e008      	b.n	8006cf0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f042 0201 	orr.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e000      	b.n	8006cf2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	40012c00 	.word	0x40012c00
 8006d00:	40013400 	.word	0x40013400
 8006d04:	40014000 	.word	0x40014000
 8006d08:	40014400 	.word	0x40014400
 8006d0c:	40014800 	.word	0x40014800
 8006d10:	40015000 	.word	0x40015000
 8006d14:	40000400 	.word	0x40000400
 8006d18:	40000800 	.word	0x40000800
 8006d1c:	40000c00 	.word	0x40000c00
 8006d20:	00010007 	.word	0x00010007

08006d24 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e054      	b.n	8006de0 <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d111      	bne.n	8006d66 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f002 f870 	bl	8008e30 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d102      	bne.n	8006d5e <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a23      	ldr	r2, [pc, #140]	@ (8006de8 <HAL_TIM_IC_Init+0xc4>)
 8006d5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2202      	movs	r2, #2
 8006d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3304      	adds	r3, #4
 8006d76:	4619      	mov	r1, r3
 8006d78:	4610      	mov	r0, r2
 8006d7a:	f001 f9af 	bl	80080dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	08004379 	.word	0x08004379

08006dec <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <HAL_TIM_IC_Start+0x1a>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	e023      	b.n	8006e4e <HAL_TIM_IC_Start+0x62>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b04      	cmp	r3, #4
 8006e0a:	d104      	bne.n	8006e16 <HAL_TIM_IC_Start+0x2a>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	e01b      	b.n	8006e4e <HAL_TIM_IC_Start+0x62>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d104      	bne.n	8006e26 <HAL_TIM_IC_Start+0x3a>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	e013      	b.n	8006e4e <HAL_TIM_IC_Start+0x62>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b0c      	cmp	r3, #12
 8006e2a:	d104      	bne.n	8006e36 <HAL_TIM_IC_Start+0x4a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	e00b      	b.n	8006e4e <HAL_TIM_IC_Start+0x62>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b10      	cmp	r3, #16
 8006e3a:	d104      	bne.n	8006e46 <HAL_TIM_IC_Start+0x5a>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	e003      	b.n	8006e4e <HAL_TIM_IC_Start+0x62>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d104      	bne.n	8006e60 <HAL_TIM_IC_Start+0x74>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	e013      	b.n	8006e88 <HAL_TIM_IC_Start+0x9c>
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d104      	bne.n	8006e70 <HAL_TIM_IC_Start+0x84>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	e00b      	b.n	8006e88 <HAL_TIM_IC_Start+0x9c>
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b08      	cmp	r3, #8
 8006e74:	d104      	bne.n	8006e80 <HAL_TIM_IC_Start+0x94>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	e003      	b.n	8006e88 <HAL_TIM_IC_Start+0x9c>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e8a:	7bfb      	ldrb	r3, [r7, #15]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d102      	bne.n	8006e96 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d001      	beq.n	8006e9a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e097      	b.n	8006fca <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d104      	bne.n	8006eaa <HAL_TIM_IC_Start+0xbe>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ea8:	e023      	b.n	8006ef2 <HAL_TIM_IC_Start+0x106>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d104      	bne.n	8006eba <HAL_TIM_IC_Start+0xce>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006eb8:	e01b      	b.n	8006ef2 <HAL_TIM_IC_Start+0x106>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d104      	bne.n	8006eca <HAL_TIM_IC_Start+0xde>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ec8:	e013      	b.n	8006ef2 <HAL_TIM_IC_Start+0x106>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b0c      	cmp	r3, #12
 8006ece:	d104      	bne.n	8006eda <HAL_TIM_IC_Start+0xee>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ed8:	e00b      	b.n	8006ef2 <HAL_TIM_IC_Start+0x106>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b10      	cmp	r3, #16
 8006ede:	d104      	bne.n	8006eea <HAL_TIM_IC_Start+0xfe>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ee8:	e003      	b.n	8006ef2 <HAL_TIM_IC_Start+0x106>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2202      	movs	r2, #2
 8006eee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <HAL_TIM_IC_Start+0x116>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f00:	e013      	b.n	8006f2a <HAL_TIM_IC_Start+0x13e>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d104      	bne.n	8006f12 <HAL_TIM_IC_Start+0x126>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f10:	e00b      	b.n	8006f2a <HAL_TIM_IC_Start+0x13e>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d104      	bne.n	8006f22 <HAL_TIM_IC_Start+0x136>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f20:	e003      	b.n	8006f2a <HAL_TIM_IC_Start+0x13e>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2202      	movs	r2, #2
 8006f26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 ff56 	bl	8008de4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a25      	ldr	r2, [pc, #148]	@ (8006fd4 <HAL_TIM_IC_Start+0x1e8>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d022      	beq.n	8006f88 <HAL_TIM_IC_Start+0x19c>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f4a:	d01d      	beq.n	8006f88 <HAL_TIM_IC_Start+0x19c>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a21      	ldr	r2, [pc, #132]	@ (8006fd8 <HAL_TIM_IC_Start+0x1ec>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d018      	beq.n	8006f88 <HAL_TIM_IC_Start+0x19c>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a20      	ldr	r2, [pc, #128]	@ (8006fdc <HAL_TIM_IC_Start+0x1f0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d013      	beq.n	8006f88 <HAL_TIM_IC_Start+0x19c>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1e      	ldr	r2, [pc, #120]	@ (8006fe0 <HAL_TIM_IC_Start+0x1f4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00e      	beq.n	8006f88 <HAL_TIM_IC_Start+0x19c>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8006fe4 <HAL_TIM_IC_Start+0x1f8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d009      	beq.n	8006f88 <HAL_TIM_IC_Start+0x19c>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a1b      	ldr	r2, [pc, #108]	@ (8006fe8 <HAL_TIM_IC_Start+0x1fc>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d004      	beq.n	8006f88 <HAL_TIM_IC_Start+0x19c>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a1a      	ldr	r2, [pc, #104]	@ (8006fec <HAL_TIM_IC_Start+0x200>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d115      	bne.n	8006fb4 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	4b18      	ldr	r3, [pc, #96]	@ (8006ff0 <HAL_TIM_IC_Start+0x204>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2b06      	cmp	r3, #6
 8006f98:	d015      	beq.n	8006fc6 <HAL_TIM_IC_Start+0x1da>
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fa0:	d011      	beq.n	8006fc6 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f042 0201 	orr.w	r2, r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb2:	e008      	b.n	8006fc6 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	e000      	b.n	8006fc8 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	40012c00 	.word	0x40012c00
 8006fd8:	40000400 	.word	0x40000400
 8006fdc:	40000800 	.word	0x40000800
 8006fe0:	40000c00 	.word	0x40000c00
 8006fe4:	40013400 	.word	0x40013400
 8006fe8:	40014000 	.word	0x40014000
 8006fec:	40015000 	.word	0x40015000
 8006ff0:	00010007 	.word	0x00010007

08006ff4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e04c      	b.n	80070a2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d111      	bne.n	8007038 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f001 ff07 	bl	8008e30 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007026:	2b00      	cmp	r3, #0
 8007028:	d102      	bne.n	8007030 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a1f      	ldr	r2, [pc, #124]	@ (80070ac <HAL_TIM_OnePulse_Init+0xb8>)
 800702e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	4610      	mov	r0, r2
 800704c:	f001 f846 	bl	80080dc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0208 	bic.w	r2, r2, #8
 800705e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6819      	ldr	r1, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	080070b1 	.word	0x080070b1

080070b0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80070dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070ec:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d108      	bne.n	8007106 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d105      	bne.n	8007106 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070fa:	7b7b      	ldrb	r3, [r7, #13]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d102      	bne.n	8007106 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007100:	7b3b      	ldrb	r3, [r7, #12]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d001      	beq.n	800710a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e059      	b.n	80071be <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2202      	movs	r2, #2
 800710e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2202      	movs	r2, #2
 8007116:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2202      	movs	r2, #2
 800711e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2202      	movs	r2, #2
 8007126:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68da      	ldr	r2, [r3, #12]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 0202 	orr.w	r2, r2, #2
 8007138:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68da      	ldr	r2, [r3, #12]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0204 	orr.w	r2, r2, #4
 8007148:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2201      	movs	r2, #1
 8007150:	2100      	movs	r1, #0
 8007152:	4618      	mov	r0, r3
 8007154:	f001 fe46 	bl	8008de4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2201      	movs	r2, #1
 800715e:	2104      	movs	r1, #4
 8007160:	4618      	mov	r0, r3
 8007162:	f001 fe3f 	bl	8008de4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a17      	ldr	r2, [pc, #92]	@ (80071c8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d018      	beq.n	80071a2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a15      	ldr	r2, [pc, #84]	@ (80071cc <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d013      	beq.n	80071a2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a14      	ldr	r2, [pc, #80]	@ (80071d0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d00e      	beq.n	80071a2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a12      	ldr	r2, [pc, #72]	@ (80071d4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d009      	beq.n	80071a2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a11      	ldr	r2, [pc, #68]	@ (80071d8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d004      	beq.n	80071a2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a0f      	ldr	r2, [pc, #60]	@ (80071dc <HAL_TIM_OnePulse_Start_IT+0x118>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d101      	bne.n	80071a6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80071a2:	2301      	movs	r3, #1
 80071a4:	e000      	b.n	80071a8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80071a6:	2300      	movs	r3, #0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d007      	beq.n	80071bc <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	40012c00 	.word	0x40012c00
 80071cc:	40013400 	.word	0x40013400
 80071d0:	40014000 	.word	0x40014000
 80071d4:	40014400 	.word	0x40014400
 80071d8:	40014800 	.word	0x40014800
 80071dc:	40015000 	.word	0x40015000

080071e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e0a2      	b.n	800733a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d111      	bne.n	8007224 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 fe11 	bl	8008e30 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007212:	2b00      	cmp	r3, #0
 8007214:	d102      	bne.n	800721c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a4a      	ldr	r2, [pc, #296]	@ (8007344 <HAL_TIM_Encoder_Init+0x164>)
 800721a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	6812      	ldr	r2, [r2, #0]
 8007236:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800723a:	f023 0307 	bic.w	r3, r3, #7
 800723e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3304      	adds	r3, #4
 8007248:	4619      	mov	r1, r3
 800724a:	4610      	mov	r0, r2
 800724c:	f000 ff46 	bl	80080dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007278:	f023 0303 	bic.w	r3, r3, #3
 800727c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	689a      	ldr	r2, [r3, #8]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	021b      	lsls	r3, r3, #8
 8007288:	4313      	orrs	r3, r2
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	4313      	orrs	r3, r2
 800728e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007296:	f023 030c 	bic.w	r3, r3, #12
 800729a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	021b      	lsls	r3, r3, #8
 80072b2:	4313      	orrs	r3, r2
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	011a      	lsls	r2, r3, #4
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	031b      	lsls	r3, r3, #12
 80072c6:	4313      	orrs	r3, r2
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80072d4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80072dc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	011b      	lsls	r3, r3, #4
 80072e8:	4313      	orrs	r3, r2
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	0800446d 	.word	0x0800446d

08007348 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007358:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007360:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007368:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007370:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d110      	bne.n	800739a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d102      	bne.n	8007384 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800737e:	7b7b      	ldrb	r3, [r7, #13]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d001      	beq.n	8007388 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e069      	b.n	800745c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007398:	e031      	b.n	80073fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b04      	cmp	r3, #4
 800739e:	d110      	bne.n	80073c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d102      	bne.n	80073ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80073a6:	7b3b      	ldrb	r3, [r7, #12]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d001      	beq.n	80073b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e055      	b.n	800745c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073c0:	e01d      	b.n	80073fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d108      	bne.n	80073da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d105      	bne.n	80073da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80073ce:	7b7b      	ldrb	r3, [r7, #13]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d102      	bne.n	80073da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80073d4:	7b3b      	ldrb	r3, [r7, #12]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d001      	beq.n	80073de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e03e      	b.n	800745c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2202      	movs	r2, #2
 80073e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2202      	movs	r2, #2
 80073ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2202      	movs	r2, #2
 80073f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2202      	movs	r2, #2
 80073fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <HAL_TIM_Encoder_Start+0xc4>
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2b04      	cmp	r3, #4
 8007408:	d008      	beq.n	800741c <HAL_TIM_Encoder_Start+0xd4>
 800740a:	e00f      	b.n	800742c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2201      	movs	r2, #1
 8007412:	2100      	movs	r1, #0
 8007414:	4618      	mov	r0, r3
 8007416:	f001 fce5 	bl	8008de4 <TIM_CCxChannelCmd>
      break;
 800741a:	e016      	b.n	800744a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2201      	movs	r2, #1
 8007422:	2104      	movs	r1, #4
 8007424:	4618      	mov	r0, r3
 8007426:	f001 fcdd 	bl	8008de4 <TIM_CCxChannelCmd>
      break;
 800742a:	e00e      	b.n	800744a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2201      	movs	r2, #1
 8007432:	2100      	movs	r1, #0
 8007434:	4618      	mov	r0, r3
 8007436:	f001 fcd5 	bl	8008de4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2201      	movs	r2, #1
 8007440:	2104      	movs	r1, #4
 8007442:	4618      	mov	r0, r3
 8007444:	f001 fcce 	bl	8008de4 <TIM_CCxChannelCmd>
      break;
 8007448:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0201 	orr.w	r2, r2, #1
 8007458:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d026      	beq.n	80074d4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d021      	beq.n	80074d4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f06f 0202 	mvn.w	r2, #2
 8007498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d005      	beq.n	80074ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	4798      	blx	r3
 80074b8:	e009      	b.n	80074ce <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f003 0304 	and.w	r3, r3, #4
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d026      	beq.n	800752c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d021      	beq.n	800752c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f06f 0204 	mvn.w	r2, #4
 80074f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2202      	movs	r2, #2
 80074f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	4798      	blx	r3
 8007510:	e009      	b.n	8007526 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f003 0308 	and.w	r3, r3, #8
 8007532:	2b00      	cmp	r3, #0
 8007534:	d026      	beq.n	8007584 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f003 0308 	and.w	r3, r3, #8
 800753c:	2b00      	cmp	r3, #0
 800753e:	d021      	beq.n	8007584 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0208 	mvn.w	r2, #8
 8007548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2204      	movs	r2, #4
 800754e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	4798      	blx	r3
 8007568:	e009      	b.n	800757e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f003 0310 	and.w	r3, r3, #16
 800758a:	2b00      	cmp	r3, #0
 800758c:	d026      	beq.n	80075dc <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f003 0310 	and.w	r3, r3, #16
 8007594:	2b00      	cmp	r3, #0
 8007596:	d021      	beq.n	80075dc <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f06f 0210 	mvn.w	r2, #16
 80075a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2208      	movs	r2, #8
 80075a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d005      	beq.n	80075c2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	4798      	blx	r3
 80075c0:	e009      	b.n	80075d6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00e      	beq.n	8007604 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d009      	beq.n	8007604 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f06f 0201 	mvn.w	r2, #1
 80075f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800760a:	2b00      	cmp	r3, #0
 800760c:	d104      	bne.n	8007618 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00e      	beq.n	8007636 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800761e:	2b00      	cmp	r3, #0
 8007620:	d009      	beq.n	8007636 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800762a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00e      	beq.n	800765e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007646:	2b00      	cmp	r3, #0
 8007648:	d009      	beq.n	800765e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00e      	beq.n	8007686 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800767a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00e      	beq.n	80076ae <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	d009      	beq.n	80076ae <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f06f 0220 	mvn.w	r2, #32
 80076a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00e      	beq.n	80076d6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d009      	beq.n	80076d6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80076ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00e      	beq.n	80076fe <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d009      	beq.n	80076fe <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80076f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00e      	beq.n	8007726 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d009      	beq.n	8007726 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800771a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00e      	beq.n	800774e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d009      	beq.n	800774e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800774e:	bf00      	nop
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b086      	sub	sp, #24
 800775a:	af00      	add	r7, sp, #0
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800776c:	2b01      	cmp	r3, #1
 800776e:	d101      	bne.n	8007774 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007770:	2302      	movs	r3, #2
 8007772:	e088      	b.n	8007886 <HAL_TIM_IC_ConfigChannel+0x130>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d11b      	bne.n	80077ba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007792:	f001 f961 	bl	8008a58 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	699a      	ldr	r2, [r3, #24]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 020c 	bic.w	r2, r2, #12
 80077a4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6999      	ldr	r1, [r3, #24]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	619a      	str	r2, [r3, #24]
 80077b8:	e060      	b.n	800787c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b04      	cmp	r3, #4
 80077be:	d11c      	bne.n	80077fa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80077d0:	f001 f9e5 	bl	8008b9e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699a      	ldr	r2, [r3, #24]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80077e2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6999      	ldr	r1, [r3, #24]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	021a      	lsls	r2, r3, #8
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	619a      	str	r2, [r3, #24]
 80077f8:	e040      	b.n	800787c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d11b      	bne.n	8007838 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007810:	f001 fa32 	bl	8008c78 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	69da      	ldr	r2, [r3, #28]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 020c 	bic.w	r2, r2, #12
 8007822:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	69d9      	ldr	r1, [r3, #28]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	61da      	str	r2, [r3, #28]
 8007836:	e021      	b.n	800787c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b0c      	cmp	r3, #12
 800783c:	d11c      	bne.n	8007878 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800784e:	f001 fa4f 	bl	8008cf0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69da      	ldr	r2, [r3, #28]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007860:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69d9      	ldr	r1, [r3, #28]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	021a      	lsls	r2, r3, #8
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	61da      	str	r2, [r3, #28]
 8007876:	e001      	b.n	800787c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007884:	7dfb      	ldrb	r3, [r7, #23]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d101      	bne.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078aa:	2302      	movs	r3, #2
 80078ac:	e0ff      	b.n	8007aae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b14      	cmp	r3, #20
 80078ba:	f200 80f0 	bhi.w	8007a9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80078be:	a201      	add	r2, pc, #4	@ (adr r2, 80078c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c4:	08007919 	.word	0x08007919
 80078c8:	08007a9f 	.word	0x08007a9f
 80078cc:	08007a9f 	.word	0x08007a9f
 80078d0:	08007a9f 	.word	0x08007a9f
 80078d4:	08007959 	.word	0x08007959
 80078d8:	08007a9f 	.word	0x08007a9f
 80078dc:	08007a9f 	.word	0x08007a9f
 80078e0:	08007a9f 	.word	0x08007a9f
 80078e4:	0800799b 	.word	0x0800799b
 80078e8:	08007a9f 	.word	0x08007a9f
 80078ec:	08007a9f 	.word	0x08007a9f
 80078f0:	08007a9f 	.word	0x08007a9f
 80078f4:	080079db 	.word	0x080079db
 80078f8:	08007a9f 	.word	0x08007a9f
 80078fc:	08007a9f 	.word	0x08007a9f
 8007900:	08007a9f 	.word	0x08007a9f
 8007904:	08007a1d 	.word	0x08007a1d
 8007908:	08007a9f 	.word	0x08007a9f
 800790c:	08007a9f 	.word	0x08007a9f
 8007910:	08007a9f 	.word	0x08007a9f
 8007914:	08007a5d 	.word	0x08007a5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68b9      	ldr	r1, [r7, #8]
 800791e:	4618      	mov	r0, r3
 8007920:	f000 fc90 	bl	8008244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699a      	ldr	r2, [r3, #24]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f042 0208 	orr.w	r2, r2, #8
 8007932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	699a      	ldr	r2, [r3, #24]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f022 0204 	bic.w	r2, r2, #4
 8007942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6999      	ldr	r1, [r3, #24]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	691a      	ldr	r2, [r3, #16]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	619a      	str	r2, [r3, #24]
      break;
 8007956:	e0a5      	b.n	8007aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68b9      	ldr	r1, [r7, #8]
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fd0a 	bl	8008378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	699a      	ldr	r2, [r3, #24]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699a      	ldr	r2, [r3, #24]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6999      	ldr	r1, [r3, #24]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	021a      	lsls	r2, r3, #8
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	619a      	str	r2, [r3, #24]
      break;
 8007998:	e084      	b.n	8007aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68b9      	ldr	r1, [r7, #8]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 fd7d 	bl	80084a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	69da      	ldr	r2, [r3, #28]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f042 0208 	orr.w	r2, r2, #8
 80079b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	69da      	ldr	r2, [r3, #28]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 0204 	bic.w	r2, r2, #4
 80079c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69d9      	ldr	r1, [r3, #28]
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	691a      	ldr	r2, [r3, #16]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	61da      	str	r2, [r3, #28]
      break;
 80079d8:	e064      	b.n	8007aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 fdef 	bl	80085c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69da      	ldr	r2, [r3, #28]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69da      	ldr	r2, [r3, #28]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	69d9      	ldr	r1, [r3, #28]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	021a      	lsls	r2, r3, #8
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	61da      	str	r2, [r3, #28]
      break;
 8007a1a:	e043      	b.n	8007aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68b9      	ldr	r1, [r7, #8]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 fe62 	bl	80086ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0208 	orr.w	r2, r2, #8
 8007a36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 0204 	bic.w	r2, r2, #4
 8007a46:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	691a      	ldr	r2, [r3, #16]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007a5a:	e023      	b.n	8007aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68b9      	ldr	r1, [r7, #8]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 feac 	bl	80087c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a86:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	021a      	lsls	r2, r3, #8
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007a9c:	e002      	b.n	8007aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop

08007ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1c>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e0f6      	b.n	8007cc2 <HAL_TIM_ConfigClockSource+0x20a>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007af2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a6f      	ldr	r2, [pc, #444]	@ (8007ccc <HAL_TIM_ConfigClockSource+0x214>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	f000 80c1 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x1de>
 8007b14:	4a6d      	ldr	r2, [pc, #436]	@ (8007ccc <HAL_TIM_ConfigClockSource+0x214>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	f200 80c6 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b1c:	4a6c      	ldr	r2, [pc, #432]	@ (8007cd0 <HAL_TIM_ConfigClockSource+0x218>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	f000 80b9 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x1de>
 8007b24:	4a6a      	ldr	r2, [pc, #424]	@ (8007cd0 <HAL_TIM_ConfigClockSource+0x218>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	f200 80be 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b2c:	4a69      	ldr	r2, [pc, #420]	@ (8007cd4 <HAL_TIM_ConfigClockSource+0x21c>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	f000 80b1 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x1de>
 8007b34:	4a67      	ldr	r2, [pc, #412]	@ (8007cd4 <HAL_TIM_ConfigClockSource+0x21c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	f200 80b6 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b3c:	4a66      	ldr	r2, [pc, #408]	@ (8007cd8 <HAL_TIM_ConfigClockSource+0x220>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	f000 80a9 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x1de>
 8007b44:	4a64      	ldr	r2, [pc, #400]	@ (8007cd8 <HAL_TIM_ConfigClockSource+0x220>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	f200 80ae 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b4c:	4a63      	ldr	r2, [pc, #396]	@ (8007cdc <HAL_TIM_ConfigClockSource+0x224>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	f000 80a1 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x1de>
 8007b54:	4a61      	ldr	r2, [pc, #388]	@ (8007cdc <HAL_TIM_ConfigClockSource+0x224>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	f200 80a6 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b5c:	4a60      	ldr	r2, [pc, #384]	@ (8007ce0 <HAL_TIM_ConfigClockSource+0x228>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	f000 8099 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x1de>
 8007b64:	4a5e      	ldr	r2, [pc, #376]	@ (8007ce0 <HAL_TIM_ConfigClockSource+0x228>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	f200 809e 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007b70:	f000 8091 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x1de>
 8007b74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007b78:	f200 8096 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b80:	f000 8089 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x1de>
 8007b84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b88:	f200 808e 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b90:	d03e      	beq.n	8007c10 <HAL_TIM_ConfigClockSource+0x158>
 8007b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b96:	f200 8087 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b9e:	f000 8086 	beq.w	8007cae <HAL_TIM_ConfigClockSource+0x1f6>
 8007ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ba6:	d87f      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ba8:	2b70      	cmp	r3, #112	@ 0x70
 8007baa:	d01a      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0x12a>
 8007bac:	2b70      	cmp	r3, #112	@ 0x70
 8007bae:	d87b      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bb0:	2b60      	cmp	r3, #96	@ 0x60
 8007bb2:	d050      	beq.n	8007c56 <HAL_TIM_ConfigClockSource+0x19e>
 8007bb4:	2b60      	cmp	r3, #96	@ 0x60
 8007bb6:	d877      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bb8:	2b50      	cmp	r3, #80	@ 0x50
 8007bba:	d03c      	beq.n	8007c36 <HAL_TIM_ConfigClockSource+0x17e>
 8007bbc:	2b50      	cmp	r3, #80	@ 0x50
 8007bbe:	d873      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bc0:	2b40      	cmp	r3, #64	@ 0x40
 8007bc2:	d058      	beq.n	8007c76 <HAL_TIM_ConfigClockSource+0x1be>
 8007bc4:	2b40      	cmp	r3, #64	@ 0x40
 8007bc6:	d86f      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bc8:	2b30      	cmp	r3, #48	@ 0x30
 8007bca:	d064      	beq.n	8007c96 <HAL_TIM_ConfigClockSource+0x1de>
 8007bcc:	2b30      	cmp	r3, #48	@ 0x30
 8007bce:	d86b      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	d060      	beq.n	8007c96 <HAL_TIM_ConfigClockSource+0x1de>
 8007bd4:	2b20      	cmp	r3, #32
 8007bd6:	d867      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d05c      	beq.n	8007c96 <HAL_TIM_ConfigClockSource+0x1de>
 8007bdc:	2b10      	cmp	r3, #16
 8007bde:	d05a      	beq.n	8007c96 <HAL_TIM_ConfigClockSource+0x1de>
 8007be0:	e062      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bf2:	f001 f8d7 	bl	8008da4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	609a      	str	r2, [r3, #8]
      break;
 8007c0e:	e04f      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c20:	f001 f8c0 	bl	8008da4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c32:	609a      	str	r2, [r3, #8]
      break;
 8007c34:	e03c      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c42:	461a      	mov	r2, r3
 8007c44:	f000 ff7c 	bl	8008b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2150      	movs	r1, #80	@ 0x50
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f001 f88b 	bl	8008d6a <TIM_ITRx_SetConfig>
      break;
 8007c54:	e02c      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c62:	461a      	mov	r2, r3
 8007c64:	f000 ffd8 	bl	8008c18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2160      	movs	r1, #96	@ 0x60
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f001 f87b 	bl	8008d6a <TIM_ITRx_SetConfig>
      break;
 8007c74:	e01c      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c82:	461a      	mov	r2, r3
 8007c84:	f000 ff5c 	bl	8008b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2140      	movs	r1, #64	@ 0x40
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f001 f86b 	bl	8008d6a <TIM_ITRx_SetConfig>
      break;
 8007c94:	e00c      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	f001 f862 	bl	8008d6a <TIM_ITRx_SetConfig>
      break;
 8007ca6:	e003      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	73fb      	strb	r3, [r7, #15]
      break;
 8007cac:	e000      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	00100070 	.word	0x00100070
 8007cd0:	00100060 	.word	0x00100060
 8007cd4:	00100050 	.word	0x00100050
 8007cd8:	00100040 	.word	0x00100040
 8007cdc:	00100030 	.word	0x00100030
 8007ce0:	00100020 	.word	0x00100020

08007ce4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d101      	bne.n	8007cfc <HAL_TIM_SlaveConfigSynchro+0x18>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e031      	b.n	8007d60 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fdc2 	bl	8008898 <TIM_SlaveTimer_SetConfig>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d009      	beq.n	8007d2e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e018      	b.n	8007d60 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68da      	ldr	r2, [r3, #12]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d3c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d4c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	460b      	mov	r3, r1
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e14a      	b.n	80080ce <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	f040 80dd 	bne.w	8008000 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007e46:	7afb      	ldrb	r3, [r7, #11]
 8007e48:	2b1f      	cmp	r3, #31
 8007e4a:	f200 80d6 	bhi.w	8007ffa <HAL_TIM_RegisterCallback+0x1de>
 8007e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e54 <HAL_TIM_RegisterCallback+0x38>)
 8007e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e54:	08007ed5 	.word	0x08007ed5
 8007e58:	08007edd 	.word	0x08007edd
 8007e5c:	08007ee5 	.word	0x08007ee5
 8007e60:	08007eed 	.word	0x08007eed
 8007e64:	08007ef5 	.word	0x08007ef5
 8007e68:	08007efd 	.word	0x08007efd
 8007e6c:	08007f05 	.word	0x08007f05
 8007e70:	08007f0d 	.word	0x08007f0d
 8007e74:	08007f15 	.word	0x08007f15
 8007e78:	08007f1d 	.word	0x08007f1d
 8007e7c:	08007f25 	.word	0x08007f25
 8007e80:	08007f2d 	.word	0x08007f2d
 8007e84:	08007f35 	.word	0x08007f35
 8007e88:	08007f3d 	.word	0x08007f3d
 8007e8c:	08007f47 	.word	0x08007f47
 8007e90:	08007f51 	.word	0x08007f51
 8007e94:	08007f5b 	.word	0x08007f5b
 8007e98:	08007f65 	.word	0x08007f65
 8007e9c:	08007f6f 	.word	0x08007f6f
 8007ea0:	08007f79 	.word	0x08007f79
 8007ea4:	08007f83 	.word	0x08007f83
 8007ea8:	08007f8d 	.word	0x08007f8d
 8007eac:	08007f97 	.word	0x08007f97
 8007eb0:	08007fa1 	.word	0x08007fa1
 8007eb4:	08007fab 	.word	0x08007fab
 8007eb8:	08007fb5 	.word	0x08007fb5
 8007ebc:	08007fbf 	.word	0x08007fbf
 8007ec0:	08007fc9 	.word	0x08007fc9
 8007ec4:	08007fd3 	.word	0x08007fd3
 8007ec8:	08007fdd 	.word	0x08007fdd
 8007ecc:	08007fe7 	.word	0x08007fe7
 8007ed0:	08007ff1 	.word	0x08007ff1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007eda:	e0f7      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007ee2:	e0f3      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007eea:	e0ef      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007ef2:	e0eb      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007efa:	e0e7      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007f02:	e0e3      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007f0a:	e0df      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007f12:	e0db      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007f1a:	e0d7      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007f22:	e0d3      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007f2a:	e0cf      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007f32:	e0cb      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007f3a:	e0c7      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007f44:	e0c2      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007f4e:	e0bd      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007f58:	e0b8      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007f62:	e0b3      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007f6c:	e0ae      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007f76:	e0a9      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007f80:	e0a4      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007f8a:	e09f      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007f94:	e09a      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007f9e:	e095      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007fa8:	e090      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007fb2:	e08b      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007fbc:	e086      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007fc6:	e081      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007fd0:	e07c      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007fda:	e077      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007fe4:	e072      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007fee:	e06d      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007ff8:	e068      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	75fb      	strb	r3, [r7, #23]
        break;
 8007ffe:	e065      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b00      	cmp	r3, #0
 800800a:	d15d      	bne.n	80080c8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800800c:	7afb      	ldrb	r3, [r7, #11]
 800800e:	2b0d      	cmp	r3, #13
 8008010:	d857      	bhi.n	80080c2 <HAL_TIM_RegisterCallback+0x2a6>
 8008012:	a201      	add	r2, pc, #4	@ (adr r2, 8008018 <HAL_TIM_RegisterCallback+0x1fc>)
 8008014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008018:	08008051 	.word	0x08008051
 800801c:	08008059 	.word	0x08008059
 8008020:	08008061 	.word	0x08008061
 8008024:	08008069 	.word	0x08008069
 8008028:	08008071 	.word	0x08008071
 800802c:	08008079 	.word	0x08008079
 8008030:	08008081 	.word	0x08008081
 8008034:	08008089 	.word	0x08008089
 8008038:	08008091 	.word	0x08008091
 800803c:	08008099 	.word	0x08008099
 8008040:	080080a1 	.word	0x080080a1
 8008044:	080080a9 	.word	0x080080a9
 8008048:	080080b1 	.word	0x080080b1
 800804c:	080080b9 	.word	0x080080b9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008056:	e039      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800805e:	e035      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008066:	e031      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800806e:	e02d      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008076:	e029      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800807e:	e025      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008086:	e021      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800808e:	e01d      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008096:	e019      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800809e:	e015      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80080a6:	e011      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80080ae:	e00d      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80080b6:	e009      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80080c0:	e004      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	75fb      	strb	r3, [r7, #23]
        break;
 80080c6:	e001      	b.n	80080cc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop

080080dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a4c      	ldr	r2, [pc, #304]	@ (8008220 <TIM_Base_SetConfig+0x144>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d017      	beq.n	8008124 <TIM_Base_SetConfig+0x48>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080fa:	d013      	beq.n	8008124 <TIM_Base_SetConfig+0x48>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a49      	ldr	r2, [pc, #292]	@ (8008224 <TIM_Base_SetConfig+0x148>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d00f      	beq.n	8008124 <TIM_Base_SetConfig+0x48>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a48      	ldr	r2, [pc, #288]	@ (8008228 <TIM_Base_SetConfig+0x14c>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d00b      	beq.n	8008124 <TIM_Base_SetConfig+0x48>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a47      	ldr	r2, [pc, #284]	@ (800822c <TIM_Base_SetConfig+0x150>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d007      	beq.n	8008124 <TIM_Base_SetConfig+0x48>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a46      	ldr	r2, [pc, #280]	@ (8008230 <TIM_Base_SetConfig+0x154>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d003      	beq.n	8008124 <TIM_Base_SetConfig+0x48>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a45      	ldr	r2, [pc, #276]	@ (8008234 <TIM_Base_SetConfig+0x158>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d108      	bne.n	8008136 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800812a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4313      	orrs	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a39      	ldr	r2, [pc, #228]	@ (8008220 <TIM_Base_SetConfig+0x144>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d023      	beq.n	8008186 <TIM_Base_SetConfig+0xaa>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008144:	d01f      	beq.n	8008186 <TIM_Base_SetConfig+0xaa>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a36      	ldr	r2, [pc, #216]	@ (8008224 <TIM_Base_SetConfig+0x148>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d01b      	beq.n	8008186 <TIM_Base_SetConfig+0xaa>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a35      	ldr	r2, [pc, #212]	@ (8008228 <TIM_Base_SetConfig+0x14c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d017      	beq.n	8008186 <TIM_Base_SetConfig+0xaa>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a34      	ldr	r2, [pc, #208]	@ (800822c <TIM_Base_SetConfig+0x150>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d013      	beq.n	8008186 <TIM_Base_SetConfig+0xaa>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a33      	ldr	r2, [pc, #204]	@ (8008230 <TIM_Base_SetConfig+0x154>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d00f      	beq.n	8008186 <TIM_Base_SetConfig+0xaa>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a33      	ldr	r2, [pc, #204]	@ (8008238 <TIM_Base_SetConfig+0x15c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d00b      	beq.n	8008186 <TIM_Base_SetConfig+0xaa>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a32      	ldr	r2, [pc, #200]	@ (800823c <TIM_Base_SetConfig+0x160>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d007      	beq.n	8008186 <TIM_Base_SetConfig+0xaa>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a31      	ldr	r2, [pc, #196]	@ (8008240 <TIM_Base_SetConfig+0x164>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d003      	beq.n	8008186 <TIM_Base_SetConfig+0xaa>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a2c      	ldr	r2, [pc, #176]	@ (8008234 <TIM_Base_SetConfig+0x158>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d108      	bne.n	8008198 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800818c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	4313      	orrs	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a18      	ldr	r2, [pc, #96]	@ (8008220 <TIM_Base_SetConfig+0x144>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d013      	beq.n	80081ec <TIM_Base_SetConfig+0x110>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a1a      	ldr	r2, [pc, #104]	@ (8008230 <TIM_Base_SetConfig+0x154>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d00f      	beq.n	80081ec <TIM_Base_SetConfig+0x110>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008238 <TIM_Base_SetConfig+0x15c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d00b      	beq.n	80081ec <TIM_Base_SetConfig+0x110>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a19      	ldr	r2, [pc, #100]	@ (800823c <TIM_Base_SetConfig+0x160>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d007      	beq.n	80081ec <TIM_Base_SetConfig+0x110>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a18      	ldr	r2, [pc, #96]	@ (8008240 <TIM_Base_SetConfig+0x164>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d003      	beq.n	80081ec <TIM_Base_SetConfig+0x110>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a13      	ldr	r2, [pc, #76]	@ (8008234 <TIM_Base_SetConfig+0x158>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d103      	bne.n	80081f4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	691a      	ldr	r2, [r3, #16]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b01      	cmp	r3, #1
 8008204:	d105      	bne.n	8008212 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	f023 0201 	bic.w	r2, r3, #1
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	611a      	str	r2, [r3, #16]
  }
}
 8008212:	bf00      	nop
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	40012c00 	.word	0x40012c00
 8008224:	40000400 	.word	0x40000400
 8008228:	40000800 	.word	0x40000800
 800822c:	40000c00 	.word	0x40000c00
 8008230:	40013400 	.word	0x40013400
 8008234:	40015000 	.word	0x40015000
 8008238:	40014000 	.word	0x40014000
 800823c:	40014400 	.word	0x40014400
 8008240:	40014800 	.word	0x40014800

08008244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a1b      	ldr	r3, [r3, #32]
 8008258:	f023 0201 	bic.w	r2, r3, #1
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 0303 	bic.w	r3, r3, #3
 800827e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	4313      	orrs	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f023 0302 	bic.w	r3, r3, #2
 8008290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	4313      	orrs	r3, r2
 800829a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a30      	ldr	r2, [pc, #192]	@ (8008360 <TIM_OC1_SetConfig+0x11c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d013      	beq.n	80082cc <TIM_OC1_SetConfig+0x88>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a2f      	ldr	r2, [pc, #188]	@ (8008364 <TIM_OC1_SetConfig+0x120>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d00f      	beq.n	80082cc <TIM_OC1_SetConfig+0x88>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a2e      	ldr	r2, [pc, #184]	@ (8008368 <TIM_OC1_SetConfig+0x124>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00b      	beq.n	80082cc <TIM_OC1_SetConfig+0x88>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a2d      	ldr	r2, [pc, #180]	@ (800836c <TIM_OC1_SetConfig+0x128>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d007      	beq.n	80082cc <TIM_OC1_SetConfig+0x88>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a2c      	ldr	r2, [pc, #176]	@ (8008370 <TIM_OC1_SetConfig+0x12c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d003      	beq.n	80082cc <TIM_OC1_SetConfig+0x88>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a2b      	ldr	r2, [pc, #172]	@ (8008374 <TIM_OC1_SetConfig+0x130>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d10c      	bne.n	80082e6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f023 0308 	bic.w	r3, r3, #8
 80082d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	4313      	orrs	r3, r2
 80082dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f023 0304 	bic.w	r3, r3, #4
 80082e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008360 <TIM_OC1_SetConfig+0x11c>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d013      	beq.n	8008316 <TIM_OC1_SetConfig+0xd2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008364 <TIM_OC1_SetConfig+0x120>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d00f      	beq.n	8008316 <TIM_OC1_SetConfig+0xd2>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008368 <TIM_OC1_SetConfig+0x124>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d00b      	beq.n	8008316 <TIM_OC1_SetConfig+0xd2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a1a      	ldr	r2, [pc, #104]	@ (800836c <TIM_OC1_SetConfig+0x128>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d007      	beq.n	8008316 <TIM_OC1_SetConfig+0xd2>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a19      	ldr	r2, [pc, #100]	@ (8008370 <TIM_OC1_SetConfig+0x12c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d003      	beq.n	8008316 <TIM_OC1_SetConfig+0xd2>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a18      	ldr	r2, [pc, #96]	@ (8008374 <TIM_OC1_SetConfig+0x130>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d111      	bne.n	800833a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800831c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	4313      	orrs	r3, r2
 800832e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	4313      	orrs	r3, r2
 8008338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	621a      	str	r2, [r3, #32]
}
 8008354:	bf00      	nop
 8008356:	371c      	adds	r7, #28
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	40012c00 	.word	0x40012c00
 8008364:	40013400 	.word	0x40013400
 8008368:	40014000 	.word	0x40014000
 800836c:	40014400 	.word	0x40014400
 8008370:	40014800 	.word	0x40014800
 8008374:	40015000 	.word	0x40015000

08008378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	f023 0210 	bic.w	r2, r3, #16
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f023 0320 	bic.w	r3, r3, #32
 80083c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a2c      	ldr	r2, [pc, #176]	@ (8008488 <TIM_OC2_SetConfig+0x110>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d007      	beq.n	80083ec <TIM_OC2_SetConfig+0x74>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a2b      	ldr	r2, [pc, #172]	@ (800848c <TIM_OC2_SetConfig+0x114>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d003      	beq.n	80083ec <TIM_OC2_SetConfig+0x74>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008490 <TIM_OC2_SetConfig+0x118>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d10d      	bne.n	8008408 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	011b      	lsls	r3, r3, #4
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008406:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a1f      	ldr	r2, [pc, #124]	@ (8008488 <TIM_OC2_SetConfig+0x110>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d013      	beq.n	8008438 <TIM_OC2_SetConfig+0xc0>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a1e      	ldr	r2, [pc, #120]	@ (800848c <TIM_OC2_SetConfig+0x114>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d00f      	beq.n	8008438 <TIM_OC2_SetConfig+0xc0>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a1e      	ldr	r2, [pc, #120]	@ (8008494 <TIM_OC2_SetConfig+0x11c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d00b      	beq.n	8008438 <TIM_OC2_SetConfig+0xc0>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a1d      	ldr	r2, [pc, #116]	@ (8008498 <TIM_OC2_SetConfig+0x120>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d007      	beq.n	8008438 <TIM_OC2_SetConfig+0xc0>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a1c      	ldr	r2, [pc, #112]	@ (800849c <TIM_OC2_SetConfig+0x124>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d003      	beq.n	8008438 <TIM_OC2_SetConfig+0xc0>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a17      	ldr	r2, [pc, #92]	@ (8008490 <TIM_OC2_SetConfig+0x118>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d113      	bne.n	8008460 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800843e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	4313      	orrs	r3, r2
 8008452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	4313      	orrs	r3, r2
 800845e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	621a      	str	r2, [r3, #32]
}
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	40012c00 	.word	0x40012c00
 800848c:	40013400 	.word	0x40013400
 8008490:	40015000 	.word	0x40015000
 8008494:	40014000 	.word	0x40014000
 8008498:	40014400 	.word	0x40014400
 800849c:	40014800 	.word	0x40014800

080084a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f023 0303 	bic.w	r3, r3, #3
 80084da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a2b      	ldr	r2, [pc, #172]	@ (80085ac <TIM_OC3_SetConfig+0x10c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d007      	beq.n	8008512 <TIM_OC3_SetConfig+0x72>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a2a      	ldr	r2, [pc, #168]	@ (80085b0 <TIM_OC3_SetConfig+0x110>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d003      	beq.n	8008512 <TIM_OC3_SetConfig+0x72>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a29      	ldr	r2, [pc, #164]	@ (80085b4 <TIM_OC3_SetConfig+0x114>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d10d      	bne.n	800852e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	021b      	lsls	r3, r3, #8
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	4313      	orrs	r3, r2
 8008524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800852c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a1e      	ldr	r2, [pc, #120]	@ (80085ac <TIM_OC3_SetConfig+0x10c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d013      	beq.n	800855e <TIM_OC3_SetConfig+0xbe>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a1d      	ldr	r2, [pc, #116]	@ (80085b0 <TIM_OC3_SetConfig+0x110>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d00f      	beq.n	800855e <TIM_OC3_SetConfig+0xbe>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a1d      	ldr	r2, [pc, #116]	@ (80085b8 <TIM_OC3_SetConfig+0x118>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d00b      	beq.n	800855e <TIM_OC3_SetConfig+0xbe>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a1c      	ldr	r2, [pc, #112]	@ (80085bc <TIM_OC3_SetConfig+0x11c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d007      	beq.n	800855e <TIM_OC3_SetConfig+0xbe>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a1b      	ldr	r2, [pc, #108]	@ (80085c0 <TIM_OC3_SetConfig+0x120>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d003      	beq.n	800855e <TIM_OC3_SetConfig+0xbe>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a16      	ldr	r2, [pc, #88]	@ (80085b4 <TIM_OC3_SetConfig+0x114>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d113      	bne.n	8008586 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800856c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	011b      	lsls	r3, r3, #4
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	4313      	orrs	r3, r2
 8008578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	011b      	lsls	r3, r3, #4
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	4313      	orrs	r3, r2
 8008584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	621a      	str	r2, [r3, #32]
}
 80085a0:	bf00      	nop
 80085a2:	371c      	adds	r7, #28
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	40012c00 	.word	0x40012c00
 80085b0:	40013400 	.word	0x40013400
 80085b4:	40015000 	.word	0x40015000
 80085b8:	40014000 	.word	0x40014000
 80085bc:	40014400 	.word	0x40014400
 80085c0:	40014800 	.word	0x40014800

080085c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	021b      	lsls	r3, r3, #8
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4313      	orrs	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	031b      	lsls	r3, r3, #12
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	4313      	orrs	r3, r2
 800861e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a2c      	ldr	r2, [pc, #176]	@ (80086d4 <TIM_OC4_SetConfig+0x110>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d007      	beq.n	8008638 <TIM_OC4_SetConfig+0x74>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a2b      	ldr	r2, [pc, #172]	@ (80086d8 <TIM_OC4_SetConfig+0x114>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d003      	beq.n	8008638 <TIM_OC4_SetConfig+0x74>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a2a      	ldr	r2, [pc, #168]	@ (80086dc <TIM_OC4_SetConfig+0x118>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d10d      	bne.n	8008654 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800863e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	031b      	lsls	r3, r3, #12
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a1f      	ldr	r2, [pc, #124]	@ (80086d4 <TIM_OC4_SetConfig+0x110>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d013      	beq.n	8008684 <TIM_OC4_SetConfig+0xc0>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a1e      	ldr	r2, [pc, #120]	@ (80086d8 <TIM_OC4_SetConfig+0x114>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d00f      	beq.n	8008684 <TIM_OC4_SetConfig+0xc0>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a1e      	ldr	r2, [pc, #120]	@ (80086e0 <TIM_OC4_SetConfig+0x11c>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d00b      	beq.n	8008684 <TIM_OC4_SetConfig+0xc0>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a1d      	ldr	r2, [pc, #116]	@ (80086e4 <TIM_OC4_SetConfig+0x120>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d007      	beq.n	8008684 <TIM_OC4_SetConfig+0xc0>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a1c      	ldr	r2, [pc, #112]	@ (80086e8 <TIM_OC4_SetConfig+0x124>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d003      	beq.n	8008684 <TIM_OC4_SetConfig+0xc0>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a17      	ldr	r2, [pc, #92]	@ (80086dc <TIM_OC4_SetConfig+0x118>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d113      	bne.n	80086ac <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800868a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008692:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	019b      	lsls	r3, r3, #6
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	4313      	orrs	r3, r2
 800869e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	019b      	lsls	r3, r3, #6
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	621a      	str	r2, [r3, #32]
}
 80086c6:	bf00      	nop
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	40012c00 	.word	0x40012c00
 80086d8:	40013400 	.word	0x40013400
 80086dc:	40015000 	.word	0x40015000
 80086e0:	40014000 	.word	0x40014000
 80086e4:	40014400 	.word	0x40014400
 80086e8:	40014800 	.word	0x40014800

080086ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800871a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800871e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	4313      	orrs	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008730:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	041b      	lsls	r3, r3, #16
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a19      	ldr	r2, [pc, #100]	@ (80087a8 <TIM_OC5_SetConfig+0xbc>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d013      	beq.n	800876e <TIM_OC5_SetConfig+0x82>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a18      	ldr	r2, [pc, #96]	@ (80087ac <TIM_OC5_SetConfig+0xc0>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d00f      	beq.n	800876e <TIM_OC5_SetConfig+0x82>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a17      	ldr	r2, [pc, #92]	@ (80087b0 <TIM_OC5_SetConfig+0xc4>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d00b      	beq.n	800876e <TIM_OC5_SetConfig+0x82>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a16      	ldr	r2, [pc, #88]	@ (80087b4 <TIM_OC5_SetConfig+0xc8>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d007      	beq.n	800876e <TIM_OC5_SetConfig+0x82>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a15      	ldr	r2, [pc, #84]	@ (80087b8 <TIM_OC5_SetConfig+0xcc>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d003      	beq.n	800876e <TIM_OC5_SetConfig+0x82>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a14      	ldr	r2, [pc, #80]	@ (80087bc <TIM_OC5_SetConfig+0xd0>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d109      	bne.n	8008782 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008774:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	021b      	lsls	r3, r3, #8
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	4313      	orrs	r3, r2
 8008780:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	621a      	str	r2, [r3, #32]
}
 800879c:	bf00      	nop
 800879e:	371c      	adds	r7, #28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	40012c00 	.word	0x40012c00
 80087ac:	40013400 	.word	0x40013400
 80087b0:	40014000 	.word	0x40014000
 80087b4:	40014400 	.word	0x40014400
 80087b8:	40014800 	.word	0x40014800
 80087bc:	40015000 	.word	0x40015000

080087c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a1b      	ldr	r3, [r3, #32]
 80087d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	051b      	lsls	r3, r3, #20
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	4313      	orrs	r3, r2
 8008812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a1a      	ldr	r2, [pc, #104]	@ (8008880 <TIM_OC6_SetConfig+0xc0>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d013      	beq.n	8008844 <TIM_OC6_SetConfig+0x84>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a19      	ldr	r2, [pc, #100]	@ (8008884 <TIM_OC6_SetConfig+0xc4>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d00f      	beq.n	8008844 <TIM_OC6_SetConfig+0x84>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a18      	ldr	r2, [pc, #96]	@ (8008888 <TIM_OC6_SetConfig+0xc8>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d00b      	beq.n	8008844 <TIM_OC6_SetConfig+0x84>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a17      	ldr	r2, [pc, #92]	@ (800888c <TIM_OC6_SetConfig+0xcc>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d007      	beq.n	8008844 <TIM_OC6_SetConfig+0x84>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a16      	ldr	r2, [pc, #88]	@ (8008890 <TIM_OC6_SetConfig+0xd0>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_OC6_SetConfig+0x84>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a15      	ldr	r2, [pc, #84]	@ (8008894 <TIM_OC6_SetConfig+0xd4>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d109      	bne.n	8008858 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800884a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	029b      	lsls	r3, r3, #10
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	4313      	orrs	r3, r2
 8008856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	621a      	str	r2, [r3, #32]
}
 8008872:	bf00      	nop
 8008874:	371c      	adds	r7, #28
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40012c00 	.word	0x40012c00
 8008884:	40013400 	.word	0x40013400
 8008888:	40014000 	.word	0x40014000
 800888c:	40014400 	.word	0x40014400
 8008890:	40014800 	.word	0x40014800
 8008894:	40015000 	.word	0x40015000

08008898 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80088b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088ca:	f023 0307 	bic.w	r3, r3, #7
 80088ce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	4a56      	ldr	r2, [pc, #344]	@ (8008a40 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	f000 80a2 	beq.w	8008a32 <TIM_SlaveTimer_SetConfig+0x19a>
 80088ee:	4a54      	ldr	r2, [pc, #336]	@ (8008a40 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	f200 809b 	bhi.w	8008a2c <TIM_SlaveTimer_SetConfig+0x194>
 80088f6:	4a53      	ldr	r2, [pc, #332]	@ (8008a44 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	f000 809a 	beq.w	8008a32 <TIM_SlaveTimer_SetConfig+0x19a>
 80088fe:	4a51      	ldr	r2, [pc, #324]	@ (8008a44 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8008900:	4293      	cmp	r3, r2
 8008902:	f200 8093 	bhi.w	8008a2c <TIM_SlaveTimer_SetConfig+0x194>
 8008906:	4a50      	ldr	r2, [pc, #320]	@ (8008a48 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8008908:	4293      	cmp	r3, r2
 800890a:	f000 8092 	beq.w	8008a32 <TIM_SlaveTimer_SetConfig+0x19a>
 800890e:	4a4e      	ldr	r2, [pc, #312]	@ (8008a48 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8008910:	4293      	cmp	r3, r2
 8008912:	f200 808b 	bhi.w	8008a2c <TIM_SlaveTimer_SetConfig+0x194>
 8008916:	4a4d      	ldr	r2, [pc, #308]	@ (8008a4c <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008918:	4293      	cmp	r3, r2
 800891a:	f000 808a 	beq.w	8008a32 <TIM_SlaveTimer_SetConfig+0x19a>
 800891e:	4a4b      	ldr	r2, [pc, #300]	@ (8008a4c <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008920:	4293      	cmp	r3, r2
 8008922:	f200 8083 	bhi.w	8008a2c <TIM_SlaveTimer_SetConfig+0x194>
 8008926:	4a4a      	ldr	r2, [pc, #296]	@ (8008a50 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008928:	4293      	cmp	r3, r2
 800892a:	f000 8082 	beq.w	8008a32 <TIM_SlaveTimer_SetConfig+0x19a>
 800892e:	4a48      	ldr	r2, [pc, #288]	@ (8008a50 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d87b      	bhi.n	8008a2c <TIM_SlaveTimer_SetConfig+0x194>
 8008934:	4a47      	ldr	r2, [pc, #284]	@ (8008a54 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d07b      	beq.n	8008a32 <TIM_SlaveTimer_SetConfig+0x19a>
 800893a:	4a46      	ldr	r2, [pc, #280]	@ (8008a54 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d875      	bhi.n	8008a2c <TIM_SlaveTimer_SetConfig+0x194>
 8008940:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008944:	d075      	beq.n	8008a32 <TIM_SlaveTimer_SetConfig+0x19a>
 8008946:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800894a:	d86f      	bhi.n	8008a2c <TIM_SlaveTimer_SetConfig+0x194>
 800894c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008950:	d06f      	beq.n	8008a32 <TIM_SlaveTimer_SetConfig+0x19a>
 8008952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008956:	d869      	bhi.n	8008a2c <TIM_SlaveTimer_SetConfig+0x194>
 8008958:	2b70      	cmp	r3, #112	@ 0x70
 800895a:	d01a      	beq.n	8008992 <TIM_SlaveTimer_SetConfig+0xfa>
 800895c:	2b70      	cmp	r3, #112	@ 0x70
 800895e:	d865      	bhi.n	8008a2c <TIM_SlaveTimer_SetConfig+0x194>
 8008960:	2b60      	cmp	r3, #96	@ 0x60
 8008962:	d059      	beq.n	8008a18 <TIM_SlaveTimer_SetConfig+0x180>
 8008964:	2b60      	cmp	r3, #96	@ 0x60
 8008966:	d861      	bhi.n	8008a2c <TIM_SlaveTimer_SetConfig+0x194>
 8008968:	2b50      	cmp	r3, #80	@ 0x50
 800896a:	d04b      	beq.n	8008a04 <TIM_SlaveTimer_SetConfig+0x16c>
 800896c:	2b50      	cmp	r3, #80	@ 0x50
 800896e:	d85d      	bhi.n	8008a2c <TIM_SlaveTimer_SetConfig+0x194>
 8008970:	2b40      	cmp	r3, #64	@ 0x40
 8008972:	d019      	beq.n	80089a8 <TIM_SlaveTimer_SetConfig+0x110>
 8008974:	2b40      	cmp	r3, #64	@ 0x40
 8008976:	d859      	bhi.n	8008a2c <TIM_SlaveTimer_SetConfig+0x194>
 8008978:	2b30      	cmp	r3, #48	@ 0x30
 800897a:	d05a      	beq.n	8008a32 <TIM_SlaveTimer_SetConfig+0x19a>
 800897c:	2b30      	cmp	r3, #48	@ 0x30
 800897e:	d855      	bhi.n	8008a2c <TIM_SlaveTimer_SetConfig+0x194>
 8008980:	2b20      	cmp	r3, #32
 8008982:	d056      	beq.n	8008a32 <TIM_SlaveTimer_SetConfig+0x19a>
 8008984:	2b20      	cmp	r3, #32
 8008986:	d851      	bhi.n	8008a2c <TIM_SlaveTimer_SetConfig+0x194>
 8008988:	2b00      	cmp	r3, #0
 800898a:	d052      	beq.n	8008a32 <TIM_SlaveTimer_SetConfig+0x19a>
 800898c:	2b10      	cmp	r3, #16
 800898e:	d050      	beq.n	8008a32 <TIM_SlaveTimer_SetConfig+0x19a>
 8008990:	e04c      	b.n	8008a2c <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80089a2:	f000 f9ff 	bl	8008da4 <TIM_ETR_SetConfig>
      break;
 80089a6:	e045      	b.n	8008a34 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b05      	cmp	r3, #5
 80089ae:	d004      	beq.n	80089ba <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80089b4:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80089b8:	d101      	bne.n	80089be <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e03b      	b.n	8008a36 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	6a1b      	ldr	r3, [r3, #32]
 80089c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	6a1a      	ldr	r2, [r3, #32]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f022 0201 	bic.w	r2, r2, #1
 80089d4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089e4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	011b      	lsls	r3, r3, #4
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	621a      	str	r2, [r3, #32]
      break;
 8008a02:	e017      	b.n	8008a34 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a10:	461a      	mov	r2, r3
 8008a12:	f000 f895 	bl	8008b40 <TIM_TI1_ConfigInputStage>
      break;
 8008a16:	e00d      	b.n	8008a34 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a24:	461a      	mov	r2, r3
 8008a26:	f000 f8f7 	bl	8008c18 <TIM_TI2_ConfigInputStage>
      break;
 8008a2a:	e003      	b.n	8008a34 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a30:	e000      	b.n	8008a34 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8008a32:	bf00      	nop
  }

  return status;
 8008a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	00100070 	.word	0x00100070
 8008a44:	00100060 	.word	0x00100060
 8008a48:	00100050 	.word	0x00100050
 8008a4c:	00100040 	.word	0x00100040
 8008a50:	00100030 	.word	0x00100030
 8008a54:	00100020 	.word	0x00100020

08008a58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6a1b      	ldr	r3, [r3, #32]
 8008a70:	f023 0201 	bic.w	r2, r3, #1
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	4a28      	ldr	r2, [pc, #160]	@ (8008b24 <TIM_TI1_SetConfig+0xcc>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d01b      	beq.n	8008abe <TIM_TI1_SetConfig+0x66>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a8c:	d017      	beq.n	8008abe <TIM_TI1_SetConfig+0x66>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4a25      	ldr	r2, [pc, #148]	@ (8008b28 <TIM_TI1_SetConfig+0xd0>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d013      	beq.n	8008abe <TIM_TI1_SetConfig+0x66>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4a24      	ldr	r2, [pc, #144]	@ (8008b2c <TIM_TI1_SetConfig+0xd4>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d00f      	beq.n	8008abe <TIM_TI1_SetConfig+0x66>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	4a23      	ldr	r2, [pc, #140]	@ (8008b30 <TIM_TI1_SetConfig+0xd8>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d00b      	beq.n	8008abe <TIM_TI1_SetConfig+0x66>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	4a22      	ldr	r2, [pc, #136]	@ (8008b34 <TIM_TI1_SetConfig+0xdc>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d007      	beq.n	8008abe <TIM_TI1_SetConfig+0x66>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	4a21      	ldr	r2, [pc, #132]	@ (8008b38 <TIM_TI1_SetConfig+0xe0>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d003      	beq.n	8008abe <TIM_TI1_SetConfig+0x66>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	4a20      	ldr	r2, [pc, #128]	@ (8008b3c <TIM_TI1_SetConfig+0xe4>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d101      	bne.n	8008ac2 <TIM_TI1_SetConfig+0x6a>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <TIM_TI1_SetConfig+0x6c>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d008      	beq.n	8008ada <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	f023 0303 	bic.w	r3, r3, #3
 8008ace:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	e003      	b.n	8008ae2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f043 0301 	orr.w	r3, r3, #1
 8008ae0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ae8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	011b      	lsls	r3, r3, #4
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	f023 030a 	bic.w	r3, r3, #10
 8008afc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f003 030a 	and.w	r3, r3, #10
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	621a      	str	r2, [r3, #32]
}
 8008b16:	bf00      	nop
 8008b18:	371c      	adds	r7, #28
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	40012c00 	.word	0x40012c00
 8008b28:	40000400 	.word	0x40000400
 8008b2c:	40000800 	.word	0x40000800
 8008b30:	40000c00 	.word	0x40000c00
 8008b34:	40013400 	.word	0x40013400
 8008b38:	40014000 	.word	0x40014000
 8008b3c:	40015000 	.word	0x40015000

08008b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6a1b      	ldr	r3, [r3, #32]
 8008b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	f023 0201 	bic.w	r2, r3, #1
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	011b      	lsls	r3, r3, #4
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f023 030a 	bic.w	r3, r3, #10
 8008b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	621a      	str	r2, [r3, #32]
}
 8008b92:	bf00      	nop
 8008b94:	371c      	adds	r7, #28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b087      	sub	sp, #28
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	60f8      	str	r0, [r7, #12]
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	607a      	str	r2, [r7, #4]
 8008baa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6a1b      	ldr	r3, [r3, #32]
 8008bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	f023 0210 	bic.w	r2, r3, #16
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	021b      	lsls	r3, r3, #8
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	031b      	lsls	r3, r3, #12
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	621a      	str	r2, [r3, #32]
}
 8008c0c:	bf00      	nop
 8008c0e:	371c      	adds	r7, #28
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	f023 0210 	bic.w	r2, r3, #16
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	031b      	lsls	r3, r3, #12
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	011b      	lsls	r3, r3, #4
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	621a      	str	r2, [r3, #32]
}
 8008c6c:	bf00      	nop
 8008c6e:	371c      	adds	r7, #28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	69db      	ldr	r3, [r3, #28]
 8008c9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f023 0303 	bic.w	r3, r3, #3
 8008ca4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	011b      	lsls	r3, r3, #4
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	621a      	str	r2, [r3, #32]
}
 8008ce4:	bf00      	nop
 8008ce6:	371c      	adds	r7, #28
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b087      	sub	sp, #28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	69db      	ldr	r3, [r3, #28]
 8008d14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d1c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	021b      	lsls	r3, r3, #8
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d2e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	031b      	lsls	r3, r3, #12
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008d42:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	031b      	lsls	r3, r3, #12
 8008d48:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	621a      	str	r2, [r3, #32]
}
 8008d5e:	bf00      	nop
 8008d60:	371c      	adds	r7, #28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b085      	sub	sp, #20
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	f043 0307 	orr.w	r3, r3, #7
 8008d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	609a      	str	r2, [r3, #8]
}
 8008d98:	bf00      	nop
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
 8008db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	021a      	lsls	r2, r3, #8
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	609a      	str	r2, [r3, #8]
}
 8008dd8:	bf00      	nop
 8008dda:	371c      	adds	r7, #28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b087      	sub	sp, #28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f003 031f 	and.w	r3, r3, #31
 8008df6:	2201      	movs	r2, #1
 8008df8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6a1a      	ldr	r2, [r3, #32]
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	43db      	mvns	r3, r3
 8008e06:	401a      	ands	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6a1a      	ldr	r2, [r3, #32]
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f003 031f 	and.w	r3, r3, #31
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	fa01 f303 	lsl.w	r3, r1, r3
 8008e1c:	431a      	orrs	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	621a      	str	r2, [r3, #32]
}
 8008e22:	bf00      	nop
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
	...

08008e30 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a26      	ldr	r2, [pc, #152]	@ (8008ed4 <TIM_ResetCallback+0xa4>)
 8008e3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a25      	ldr	r2, [pc, #148]	@ (8008ed8 <TIM_ResetCallback+0xa8>)
 8008e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a24      	ldr	r2, [pc, #144]	@ (8008edc <TIM_ResetCallback+0xac>)
 8008e4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a23      	ldr	r2, [pc, #140]	@ (8008ee0 <TIM_ResetCallback+0xb0>)
 8008e54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a22      	ldr	r2, [pc, #136]	@ (8008ee4 <TIM_ResetCallback+0xb4>)
 8008e5c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a21      	ldr	r2, [pc, #132]	@ (8008ee8 <TIM_ResetCallback+0xb8>)
 8008e64:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a20      	ldr	r2, [pc, #128]	@ (8008eec <TIM_ResetCallback+0xbc>)
 8008e6c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a1f      	ldr	r2, [pc, #124]	@ (8008ef0 <TIM_ResetCallback+0xc0>)
 8008e74:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ef4 <TIM_ResetCallback+0xc4>)
 8008e7c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a1d      	ldr	r2, [pc, #116]	@ (8008ef8 <TIM_ResetCallback+0xc8>)
 8008e84:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8008efc <TIM_ResetCallback+0xcc>)
 8008e8c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a1b      	ldr	r2, [pc, #108]	@ (8008f00 <TIM_ResetCallback+0xd0>)
 8008e94:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8008f04 <TIM_ResetCallback+0xd4>)
 8008e9c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a19      	ldr	r2, [pc, #100]	@ (8008f08 <TIM_ResetCallback+0xd8>)
 8008ea4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a18      	ldr	r2, [pc, #96]	@ (8008f0c <TIM_ResetCallback+0xdc>)
 8008eac:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a17      	ldr	r2, [pc, #92]	@ (8008f10 <TIM_ResetCallback+0xe0>)
 8008eb4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a16      	ldr	r2, [pc, #88]	@ (8008f14 <TIM_ResetCallback+0xe4>)
 8008ebc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a15      	ldr	r2, [pc, #84]	@ (8008f18 <TIM_ResetCallback+0xe8>)
 8008ec4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	08003ca5 	.word	0x08003ca5
 8008ed8:	08007d69 	.word	0x08007d69
 8008edc:	08007de1 	.word	0x08007de1
 8008ee0:	08007df5 	.word	0x08007df5
 8008ee4:	08007d91 	.word	0x08007d91
 8008ee8:	08007da5 	.word	0x08007da5
 8008eec:	08007d7d 	.word	0x08007d7d
 8008ef0:	08007db9 	.word	0x08007db9
 8008ef4:	08007dcd 	.word	0x08007dcd
 8008ef8:	08007e09 	.word	0x08007e09
 8008efc:	08009171 	.word	0x08009171
 8008f00:	08009185 	.word	0x08009185
 8008f04:	08009199 	.word	0x08009199
 8008f08:	080091ad 	.word	0x080091ad
 8008f0c:	080091c1 	.word	0x080091c1
 8008f10:	080091d5 	.word	0x080091d5
 8008f14:	080091e9 	.word	0x080091e9
 8008f18:	080091fd 	.word	0x080091fd

08008f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d101      	bne.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f30:	2302      	movs	r3, #2
 8008f32:	e074      	b.n	800901e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a34      	ldr	r2, [pc, #208]	@ (800902c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d009      	beq.n	8008f72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a33      	ldr	r2, [pc, #204]	@ (8009030 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d004      	beq.n	8008f72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a31      	ldr	r2, [pc, #196]	@ (8009034 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d108      	bne.n	8008f84 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008f78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a21      	ldr	r2, [pc, #132]	@ (800902c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d022      	beq.n	8008ff2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fb4:	d01d      	beq.n	8008ff2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a1f      	ldr	r2, [pc, #124]	@ (8009038 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d018      	beq.n	8008ff2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800903c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d013      	beq.n	8008ff2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a1c      	ldr	r2, [pc, #112]	@ (8009040 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d00e      	beq.n	8008ff2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a15      	ldr	r2, [pc, #84]	@ (8009030 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d009      	beq.n	8008ff2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a18      	ldr	r2, [pc, #96]	@ (8009044 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d004      	beq.n	8008ff2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a11      	ldr	r2, [pc, #68]	@ (8009034 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d10c      	bne.n	800900c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	4313      	orrs	r3, r2
 8009002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	40012c00 	.word	0x40012c00
 8009030:	40013400 	.word	0x40013400
 8009034:	40015000 	.word	0x40015000
 8009038:	40000400 	.word	0x40000400
 800903c:	40000800 	.word	0x40000800
 8009040:	40000c00 	.word	0x40000c00
 8009044:	40014000 	.word	0x40014000

08009048 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800905c:	2b01      	cmp	r3, #1
 800905e:	d101      	bne.n	8009064 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009060:	2302      	movs	r3, #2
 8009062:	e078      	b.n	8009156 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	4313      	orrs	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	4313      	orrs	r3, r2
 8009086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	4313      	orrs	r3, r2
 8009094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	4313      	orrs	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ca:	4313      	orrs	r3, r2
 80090cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	041b      	lsls	r3, r3, #16
 80090da:	4313      	orrs	r3, r2
 80090dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a1c      	ldr	r2, [pc, #112]	@ (8009164 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d009      	beq.n	800910a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a1b      	ldr	r2, [pc, #108]	@ (8009168 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d004      	beq.n	800910a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a19      	ldr	r2, [pc, #100]	@ (800916c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d11c      	bne.n	8009144 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009114:	051b      	lsls	r3, r3, #20
 8009116:	4313      	orrs	r3, r2
 8009118:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	4313      	orrs	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009132:	4313      	orrs	r3, r2
 8009134:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009140:	4313      	orrs	r3, r2
 8009142:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	40012c00 	.word	0x40012c00
 8009168:	40013400 	.word	0x40013400
 800916c:	40015000 	.word	0x40015000

08009170 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d101      	bne.n	8009222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e050      	b.n	80092c4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009228:	2b00      	cmp	r3, #0
 800922a:	d114      	bne.n	8009256 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fde5 	bl	8009e04 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009240:	2b00      	cmp	r3, #0
 8009242:	d103      	bne.n	800924c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a21      	ldr	r2, [pc, #132]	@ (80092cc <HAL_UART_Init+0xbc>)
 8009248:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2224      	movs	r2, #36	@ 0x24
 800925a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f022 0201 	bic.w	r2, r2, #1
 800926c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009272:	2b00      	cmp	r3, #0
 8009274:	d002      	beq.n	800927c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 f912 	bl	800a4a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fe13 	bl	8009ea8 <UART_SetConfig>
 8009282:	4603      	mov	r3, r0
 8009284:	2b01      	cmp	r3, #1
 8009286:	d101      	bne.n	800928c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e01b      	b.n	80092c4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800929a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689a      	ldr	r2, [r3, #8]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80092aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f042 0201 	orr.w	r2, r2, #1
 80092ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f001 f991 	bl	800a5e4 <UART_CheckIdleState>
 80092c2:	4603      	mov	r3, r0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	080046fd 	.word	0x080046fd

080092d0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	460b      	mov	r3, r1
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d109      	bne.n	80092fc <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e09c      	b.n	8009436 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009302:	2b20      	cmp	r3, #32
 8009304:	d16c      	bne.n	80093e0 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009306:	7afb      	ldrb	r3, [r7, #11]
 8009308:	2b0c      	cmp	r3, #12
 800930a:	d85e      	bhi.n	80093ca <HAL_UART_RegisterCallback+0xfa>
 800930c:	a201      	add	r2, pc, #4	@ (adr r2, 8009314 <HAL_UART_RegisterCallback+0x44>)
 800930e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009312:	bf00      	nop
 8009314:	08009349 	.word	0x08009349
 8009318:	08009353 	.word	0x08009353
 800931c:	0800935d 	.word	0x0800935d
 8009320:	08009367 	.word	0x08009367
 8009324:	08009371 	.word	0x08009371
 8009328:	0800937b 	.word	0x0800937b
 800932c:	08009385 	.word	0x08009385
 8009330:	0800938f 	.word	0x0800938f
 8009334:	08009399 	.word	0x08009399
 8009338:	080093a3 	.word	0x080093a3
 800933c:	080093ad 	.word	0x080093ad
 8009340:	080093b7 	.word	0x080093b7
 8009344:	080093c1 	.word	0x080093c1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009350:	e070      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800935a:	e06b      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009364:	e066      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800936e:	e061      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009378:	e05c      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009382:	e057      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800938c:	e052      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009396:	e04d      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80093a0:	e048      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80093aa:	e043      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80093b4:	e03e      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80093be:	e039      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80093c8:	e034      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	75fb      	strb	r3, [r7, #23]
        break;
 80093de:	e029      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d11a      	bne.n	8009420 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80093ea:	7afb      	ldrb	r3, [r7, #11]
 80093ec:	2b0b      	cmp	r3, #11
 80093ee:	d002      	beq.n	80093f6 <HAL_UART_RegisterCallback+0x126>
 80093f0:	2b0c      	cmp	r3, #12
 80093f2:	d005      	beq.n	8009400 <HAL_UART_RegisterCallback+0x130>
 80093f4:	e009      	b.n	800940a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80093fe:	e019      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009408:	e014      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009410:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	75fb      	strb	r3, [r7, #23]
        break;
 800941e:	e009      	b.n	8009434 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009426:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009434:	7dfb      	ldrb	r3, [r7, #23]
}
 8009436:	4618      	mov	r0, r3
 8009438:	371c      	adds	r7, #28
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop

08009444 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08a      	sub	sp, #40	@ 0x28
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	4613      	mov	r3, r2
 8009450:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009458:	2b20      	cmp	r3, #32
 800945a:	d167      	bne.n	800952c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d002      	beq.n	8009468 <HAL_UART_Transmit_DMA+0x24>
 8009462:	88fb      	ldrh	r3, [r7, #6]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e060      	b.n	800952e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	88fa      	ldrh	r2, [r7, #6]
 8009476:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	88fa      	ldrh	r2, [r7, #6]
 800947e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2221      	movs	r2, #33	@ 0x21
 800948e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009496:	2b00      	cmp	r3, #0
 8009498:	d028      	beq.n	80094ec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800949e:	4a26      	ldr	r2, [pc, #152]	@ (8009538 <HAL_UART_Transmit_DMA+0xf4>)
 80094a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094a6:	4a25      	ldr	r2, [pc, #148]	@ (800953c <HAL_UART_Transmit_DMA+0xf8>)
 80094a8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094ae:	4a24      	ldr	r2, [pc, #144]	@ (8009540 <HAL_UART_Transmit_DMA+0xfc>)
 80094b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094b6:	2200      	movs	r2, #0
 80094b8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c2:	4619      	mov	r1, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3328      	adds	r3, #40	@ 0x28
 80094ca:	461a      	mov	r2, r3
 80094cc:	88fb      	ldrh	r3, [r7, #6]
 80094ce:	f7fb fcd9 	bl	8004e84 <HAL_DMA_Start_IT>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d009      	beq.n	80094ec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2210      	movs	r2, #16
 80094dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2220      	movs	r2, #32
 80094e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e020      	b.n	800952e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2240      	movs	r2, #64	@ 0x40
 80094f2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	3308      	adds	r3, #8
 80094fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	e853 3f00 	ldrex	r3, [r3]
 8009502:	613b      	str	r3, [r7, #16]
   return(result);
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800950a:	627b      	str	r3, [r7, #36]	@ 0x24
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	3308      	adds	r3, #8
 8009512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009514:	623a      	str	r2, [r7, #32]
 8009516:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009518:	69f9      	ldr	r1, [r7, #28]
 800951a:	6a3a      	ldr	r2, [r7, #32]
 800951c:	e841 2300 	strex	r3, r2, [r1]
 8009520:	61bb      	str	r3, [r7, #24]
   return(result);
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1e5      	bne.n	80094f4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	e000      	b.n	800952e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800952c:	2302      	movs	r3, #2
  }
}
 800952e:	4618      	mov	r0, r3
 8009530:	3728      	adds	r7, #40	@ 0x28
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	0800aaaf 	.word	0x0800aaaf
 800953c:	0800ab4d 	.word	0x0800ab4d
 8009540:	0800ace7 	.word	0x0800ace7

08009544 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b08a      	sub	sp, #40	@ 0x28
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	4613      	mov	r3, r2
 8009550:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009558:	2b20      	cmp	r3, #32
 800955a:	d137      	bne.n	80095cc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <HAL_UART_Receive_DMA+0x24>
 8009562:	88fb      	ldrh	r3, [r7, #6]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e030      	b.n	80095ce <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a18      	ldr	r2, [pc, #96]	@ (80095d8 <HAL_UART_Receive_DMA+0x94>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d01f      	beq.n	80095bc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d018      	beq.n	80095bc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	e853 3f00 	ldrex	r3, [r3]
 8009596:	613b      	str	r3, [r7, #16]
   return(result);
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800959e:	627b      	str	r3, [r7, #36]	@ 0x24
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	461a      	mov	r2, r3
 80095a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a8:	623b      	str	r3, [r7, #32]
 80095aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ac:	69f9      	ldr	r1, [r7, #28]
 80095ae:	6a3a      	ldr	r2, [r7, #32]
 80095b0:	e841 2300 	strex	r3, r2, [r1]
 80095b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1e6      	bne.n	800958a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80095bc:	88fb      	ldrh	r3, [r7, #6]
 80095be:	461a      	mov	r2, r3
 80095c0:	68b9      	ldr	r1, [r7, #8]
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f001 f926 	bl	800a814 <UART_Start_Receive_DMA>
 80095c8:	4603      	mov	r3, r0
 80095ca:	e000      	b.n	80095ce <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80095cc:	2302      	movs	r3, #2
  }
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3728      	adds	r7, #40	@ 0x28
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	40008000 	.word	0x40008000

080095dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b0ba      	sub	sp, #232	@ 0xe8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	69db      	ldr	r3, [r3, #28]
 80095ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009602:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009606:	f640 030f 	movw	r3, #2063	@ 0x80f
 800960a:	4013      	ands	r3, r2
 800960c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009614:	2b00      	cmp	r3, #0
 8009616:	d11b      	bne.n	8009650 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800961c:	f003 0320 	and.w	r3, r3, #32
 8009620:	2b00      	cmp	r3, #0
 8009622:	d015      	beq.n	8009650 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009628:	f003 0320 	and.w	r3, r3, #32
 800962c:	2b00      	cmp	r3, #0
 800962e:	d105      	bne.n	800963c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d009      	beq.n	8009650 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 8312 	beq.w	8009c6a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	4798      	blx	r3
      }
      return;
 800964e:	e30c      	b.n	8009c6a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 8129 	beq.w	80098ac <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800965a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800965e:	4b90      	ldr	r3, [pc, #576]	@ (80098a0 <HAL_UART_IRQHandler+0x2c4>)
 8009660:	4013      	ands	r3, r2
 8009662:	2b00      	cmp	r3, #0
 8009664:	d106      	bne.n	8009674 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009666:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800966a:	4b8e      	ldr	r3, [pc, #568]	@ (80098a4 <HAL_UART_IRQHandler+0x2c8>)
 800966c:	4013      	ands	r3, r2
 800966e:	2b00      	cmp	r3, #0
 8009670:	f000 811c 	beq.w	80098ac <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	2b00      	cmp	r3, #0
 800967e:	d011      	beq.n	80096a4 <HAL_UART_IRQHandler+0xc8>
 8009680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00b      	beq.n	80096a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2201      	movs	r2, #1
 8009692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800969a:	f043 0201 	orr.w	r2, r3, #1
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096a8:	f003 0302 	and.w	r3, r3, #2
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d011      	beq.n	80096d4 <HAL_UART_IRQHandler+0xf8>
 80096b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00b      	beq.n	80096d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2202      	movs	r2, #2
 80096c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ca:	f043 0204 	orr.w	r2, r3, #4
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096d8:	f003 0304 	and.w	r3, r3, #4
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d011      	beq.n	8009704 <HAL_UART_IRQHandler+0x128>
 80096e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00b      	beq.n	8009704 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2204      	movs	r2, #4
 80096f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096fa:	f043 0202 	orr.w	r2, r3, #2
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009708:	f003 0308 	and.w	r3, r3, #8
 800970c:	2b00      	cmp	r3, #0
 800970e:	d017      	beq.n	8009740 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b00      	cmp	r3, #0
 800971a:	d105      	bne.n	8009728 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800971c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009720:	4b5f      	ldr	r3, [pc, #380]	@ (80098a0 <HAL_UART_IRQHandler+0x2c4>)
 8009722:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00b      	beq.n	8009740 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2208      	movs	r2, #8
 800972e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009736:	f043 0208 	orr.w	r2, r3, #8
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009744:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009748:	2b00      	cmp	r3, #0
 800974a:	d012      	beq.n	8009772 <HAL_UART_IRQHandler+0x196>
 800974c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009750:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00c      	beq.n	8009772 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009760:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009768:	f043 0220 	orr.w	r2, r3, #32
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 8278 	beq.w	8009c6e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800977e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009782:	f003 0320 	and.w	r3, r3, #32
 8009786:	2b00      	cmp	r3, #0
 8009788:	d013      	beq.n	80097b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800978a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800978e:	f003 0320 	and.w	r3, r3, #32
 8009792:	2b00      	cmp	r3, #0
 8009794:	d105      	bne.n	80097a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800979a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d007      	beq.n	80097b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097c6:	2b40      	cmp	r3, #64	@ 0x40
 80097c8:	d005      	beq.n	80097d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80097ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80097ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d058      	beq.n	8009888 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f001 f903 	bl	800a9e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e6:	2b40      	cmp	r3, #64	@ 0x40
 80097e8:	d148      	bne.n	800987c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	3308      	adds	r3, #8
 80097f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009800:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009808:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3308      	adds	r3, #8
 8009812:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009816:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800981a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009822:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800982e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1d9      	bne.n	80097ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800983c:	2b00      	cmp	r3, #0
 800983e:	d017      	beq.n	8009870 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009846:	4a18      	ldr	r2, [pc, #96]	@ (80098a8 <HAL_UART_IRQHandler+0x2cc>)
 8009848:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009850:	4618      	mov	r0, r3
 8009852:	f7fb fbeb 	bl	800502c <HAL_DMA_Abort_IT>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d01f      	beq.n	800989c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800986a:	4610      	mov	r0, r2
 800986c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800986e:	e015      	b.n	800989c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800987a:	e00f      	b.n	800989c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009886:	e009      	b.n	800989c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800989a:	e1e8      	b.n	8009c6e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800989c:	bf00      	nop
    return;
 800989e:	e1e6      	b.n	8009c6e <HAL_UART_IRQHandler+0x692>
 80098a0:	10000001 	.word	0x10000001
 80098a4:	04000120 	.word	0x04000120
 80098a8:	0800ad6b 	.word	0x0800ad6b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	f040 8176 	bne.w	8009ba2 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80098b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ba:	f003 0310 	and.w	r3, r3, #16
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f000 816f 	beq.w	8009ba2 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80098c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098c8:	f003 0310 	and.w	r3, r3, #16
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 8168 	beq.w	8009ba2 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2210      	movs	r2, #16
 80098d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098e4:	2b40      	cmp	r3, #64	@ 0x40
 80098e6:	f040 80dc 	bne.w	8009aa2 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f000 80b1 	beq.w	8009a64 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009908:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800990c:	429a      	cmp	r2, r3
 800990e:	f080 80a9 	bcs.w	8009a64 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009918:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 0320 	and.w	r3, r3, #32
 800992a:	2b00      	cmp	r3, #0
 800992c:	f040 8087 	bne.w	8009a3e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009938:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800993c:	e853 3f00 	ldrex	r3, [r3]
 8009940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009944:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800994c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	461a      	mov	r2, r3
 8009956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800995a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800995e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009962:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009966:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1da      	bne.n	8009930 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3308      	adds	r3, #8
 8009980:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009982:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009984:	e853 3f00 	ldrex	r3, [r3]
 8009988:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800998a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800998c:	f023 0301 	bic.w	r3, r3, #1
 8009990:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3308      	adds	r3, #8
 800999a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800999e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80099a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80099a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80099aa:	e841 2300 	strex	r3, r2, [r1]
 80099ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80099b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1e1      	bne.n	800997a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3308      	adds	r3, #8
 80099bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099c0:	e853 3f00 	ldrex	r3, [r3]
 80099c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80099c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	3308      	adds	r3, #8
 80099d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80099da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80099dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80099e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80099e2:	e841 2300 	strex	r3, r2, [r1]
 80099e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80099e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1e3      	bne.n	80099b6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2220      	movs	r2, #32
 80099f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a04:	e853 3f00 	ldrex	r3, [r3]
 8009a08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a0c:	f023 0310 	bic.w	r3, r3, #16
 8009a10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a26:	e841 2300 	strex	r3, r2, [r1]
 8009a2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1e4      	bne.n	80099fc <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fb fa9e 	bl	8004f7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2202      	movs	r2, #2
 8009a42:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009a56:	b292      	uxth	r2, r2
 8009a58:	1a8a      	subs	r2, r1, r2
 8009a5a:	b292      	uxth	r2, r2
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009a62:	e106      	b.n	8009c72 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	f040 80ff 	bne.w	8009c72 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 0320 	and.w	r3, r3, #32
 8009a82:	2b20      	cmp	r3, #32
 8009a84:	f040 80f5 	bne.w	8009c72 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	4798      	blx	r3
      return;
 8009aa0:	e0e7      	b.n	8009c72 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 80d9 	beq.w	8009c76 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8009ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 80d4 	beq.w	8009c76 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad6:	e853 3f00 	ldrex	r3, [r3]
 8009ada:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ade:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	461a      	mov	r2, r3
 8009aec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009af2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009af6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009af8:	e841 2300 	strex	r3, r2, [r1]
 8009afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1e4      	bne.n	8009ace <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3308      	adds	r3, #8
 8009b0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0e:	e853 3f00 	ldrex	r3, [r3]
 8009b12:	623b      	str	r3, [r7, #32]
   return(result);
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b1a:	f023 0301 	bic.w	r3, r3, #1
 8009b1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	3308      	adds	r3, #8
 8009b28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b34:	e841 2300 	strex	r3, r2, [r1]
 8009b38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1e1      	bne.n	8009b04 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2220      	movs	r2, #32
 8009b44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	e853 3f00 	ldrex	r3, [r3]
 8009b60:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f023 0310 	bic.w	r3, r3, #16
 8009b68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	461a      	mov	r2, r3
 8009b72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009b76:	61fb      	str	r3, [r7, #28]
 8009b78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7a:	69b9      	ldr	r1, [r7, #24]
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	e841 2300 	strex	r3, r2, [r1]
 8009b82:	617b      	str	r3, [r7, #20]
   return(result);
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1e4      	bne.n	8009b54 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2202      	movs	r2, #2
 8009b8e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009b96:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ba0:	e069      	b.n	8009c76 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d010      	beq.n	8009bd0 <HAL_UART_IRQHandler+0x5f4>
 8009bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00a      	beq.n	8009bd0 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009bc2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bce:	e055      	b.n	8009c7c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d014      	beq.n	8009c06 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d105      	bne.n	8009bf4 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d008      	beq.n	8009c06 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d03e      	beq.n	8009c7a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	4798      	blx	r3
    }
    return;
 8009c04:	e039      	b.n	8009c7a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d009      	beq.n	8009c26 <HAL_UART_IRQHandler+0x64a>
 8009c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d003      	beq.n	8009c26 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f001 f8b7 	bl	800ad92 <UART_EndTransmit_IT>
    return;
 8009c24:	e02a      	b.n	8009c7c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00b      	beq.n	8009c4a <HAL_UART_IRQHandler+0x66e>
 8009c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c36:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d005      	beq.n	8009c4a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c48:	e018      	b.n	8009c7c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d012      	beq.n	8009c7c <HAL_UART_IRQHandler+0x6a0>
 8009c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	da0e      	bge.n	8009c7c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c68:	e008      	b.n	8009c7c <HAL_UART_IRQHandler+0x6a0>
      return;
 8009c6a:	bf00      	nop
 8009c6c:	e006      	b.n	8009c7c <HAL_UART_IRQHandler+0x6a0>
    return;
 8009c6e:	bf00      	nop
 8009c70:	e004      	b.n	8009c7c <HAL_UART_IRQHandler+0x6a0>
      return;
 8009c72:	bf00      	nop
 8009c74:	e002      	b.n	8009c7c <HAL_UART_IRQHandler+0x6a0>
      return;
 8009c76:	bf00      	nop
 8009c78:	e000      	b.n	8009c7c <HAL_UART_IRQHandler+0x6a0>
    return;
 8009c7a:	bf00      	nop
  }
}
 8009c7c:	37e8      	adds	r7, #232	@ 0xe8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop

08009c84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009cc8:	bf00      	nop
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a09      	ldr	r2, [pc, #36]	@ (8009d70 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d009      	beq.n	8009d64 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	430a      	orrs	r2, r1
 8009d62:	615a      	str	r2, [r3, #20]
  }
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	40008000 	.word	0x40008000

08009d74 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a18      	ldr	r2, [pc, #96]	@ (8009de4 <HAL_UART_EnableReceiverTimeout+0x70>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d027      	beq.n	8009dd6 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d8c:	2b20      	cmp	r3, #32
 8009d8e:	d120      	bne.n	8009dd2 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d101      	bne.n	8009d9e <HAL_UART_EnableReceiverTimeout+0x2a>
 8009d9a:	2302      	movs	r3, #2
 8009d9c:	e01c      	b.n	8009dd8 <HAL_UART_EnableReceiverTimeout+0x64>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2224      	movs	r2, #36	@ 0x24
 8009daa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	685a      	ldr	r2, [r3, #4]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009dbc:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2220      	movs	r2, #32
 8009dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	e002      	b.n	8009dd8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	e000      	b.n	8009dd8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
  }
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr
 8009de4:	40008000 	.word	0x40008000

08009de8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
	...

08009e04 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8009e78 <UART_InitCallbacksToDefault+0x74>)
 8009e10:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a19      	ldr	r2, [pc, #100]	@ (8009e7c <UART_InitCallbacksToDefault+0x78>)
 8009e18:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a18      	ldr	r2, [pc, #96]	@ (8009e80 <UART_InitCallbacksToDefault+0x7c>)
 8009e20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a17      	ldr	r2, [pc, #92]	@ (8009e84 <UART_InitCallbacksToDefault+0x80>)
 8009e28:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a16      	ldr	r2, [pc, #88]	@ (8009e88 <UART_InitCallbacksToDefault+0x84>)
 8009e30:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a15      	ldr	r2, [pc, #84]	@ (8009e8c <UART_InitCallbacksToDefault+0x88>)
 8009e38:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a14      	ldr	r2, [pc, #80]	@ (8009e90 <UART_InitCallbacksToDefault+0x8c>)
 8009e40:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a13      	ldr	r2, [pc, #76]	@ (8009e94 <UART_InitCallbacksToDefault+0x90>)
 8009e48:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a12      	ldr	r2, [pc, #72]	@ (8009e98 <UART_InitCallbacksToDefault+0x94>)
 8009e50:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a11      	ldr	r2, [pc, #68]	@ (8009e9c <UART_InitCallbacksToDefault+0x98>)
 8009e58:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a10      	ldr	r2, [pc, #64]	@ (8009ea0 <UART_InitCallbacksToDefault+0x9c>)
 8009e60:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a0f      	ldr	r2, [pc, #60]	@ (8009ea4 <UART_InitCallbacksToDefault+0xa0>)
 8009e68:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	08009c99 	.word	0x08009c99
 8009e7c:	08009c85 	.word	0x08009c85
 8009e80:	08009cc1 	.word	0x08009cc1
 8009e84:	08009cad 	.word	0x08009cad
 8009e88:	08009cd5 	.word	0x08009cd5
 8009e8c:	08009ce9 	.word	0x08009ce9
 8009e90:	08009cfd 	.word	0x08009cfd
 8009e94:	08009d11 	.word	0x08009d11
 8009e98:	0800aded 	.word	0x0800aded
 8009e9c:	0800ae01 	.word	0x0800ae01
 8009ea0:	0800ae15 	.word	0x0800ae15
 8009ea4:	08009d25 	.word	0x08009d25

08009ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009eac:	b08c      	sub	sp, #48	@ 0x30
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	689a      	ldr	r2, [r3, #8]
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	431a      	orrs	r2, r3
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	695b      	ldr	r3, [r3, #20]
 8009ec6:	431a      	orrs	r2, r3
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	69db      	ldr	r3, [r3, #28]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	4baa      	ldr	r3, [pc, #680]	@ (800a180 <UART_SetConfig+0x2d8>)
 8009ed8:	4013      	ands	r3, r2
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	6812      	ldr	r2, [r2, #0]
 8009ede:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ee0:	430b      	orrs	r3, r1
 8009ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	68da      	ldr	r2, [r3, #12]
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	699b      	ldr	r3, [r3, #24]
 8009efe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a9f      	ldr	r2, [pc, #636]	@ (800a184 <UART_SetConfig+0x2dc>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d004      	beq.n	8009f14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f10:	4313      	orrs	r3, r2
 8009f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009f1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	6812      	ldr	r2, [r2, #0]
 8009f26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f28:	430b      	orrs	r3, r1
 8009f2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f32:	f023 010f 	bic.w	r1, r3, #15
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a90      	ldr	r2, [pc, #576]	@ (800a188 <UART_SetConfig+0x2e0>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d125      	bne.n	8009f98 <UART_SetConfig+0xf0>
 8009f4c:	4b8f      	ldr	r3, [pc, #572]	@ (800a18c <UART_SetConfig+0x2e4>)
 8009f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f52:	f003 0303 	and.w	r3, r3, #3
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d81a      	bhi.n	8009f90 <UART_SetConfig+0xe8>
 8009f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f60 <UART_SetConfig+0xb8>)
 8009f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f60:	08009f71 	.word	0x08009f71
 8009f64:	08009f81 	.word	0x08009f81
 8009f68:	08009f79 	.word	0x08009f79
 8009f6c:	08009f89 	.word	0x08009f89
 8009f70:	2301      	movs	r3, #1
 8009f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f76:	e116      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 8009f78:	2302      	movs	r3, #2
 8009f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f7e:	e112      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 8009f80:	2304      	movs	r3, #4
 8009f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f86:	e10e      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 8009f88:	2308      	movs	r3, #8
 8009f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f8e:	e10a      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 8009f90:	2310      	movs	r3, #16
 8009f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f96:	e106      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a7c      	ldr	r2, [pc, #496]	@ (800a190 <UART_SetConfig+0x2e8>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d138      	bne.n	800a014 <UART_SetConfig+0x16c>
 8009fa2:	4b7a      	ldr	r3, [pc, #488]	@ (800a18c <UART_SetConfig+0x2e4>)
 8009fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fa8:	f003 030c 	and.w	r3, r3, #12
 8009fac:	2b0c      	cmp	r3, #12
 8009fae:	d82d      	bhi.n	800a00c <UART_SetConfig+0x164>
 8009fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb8 <UART_SetConfig+0x110>)
 8009fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb6:	bf00      	nop
 8009fb8:	08009fed 	.word	0x08009fed
 8009fbc:	0800a00d 	.word	0x0800a00d
 8009fc0:	0800a00d 	.word	0x0800a00d
 8009fc4:	0800a00d 	.word	0x0800a00d
 8009fc8:	08009ffd 	.word	0x08009ffd
 8009fcc:	0800a00d 	.word	0x0800a00d
 8009fd0:	0800a00d 	.word	0x0800a00d
 8009fd4:	0800a00d 	.word	0x0800a00d
 8009fd8:	08009ff5 	.word	0x08009ff5
 8009fdc:	0800a00d 	.word	0x0800a00d
 8009fe0:	0800a00d 	.word	0x0800a00d
 8009fe4:	0800a00d 	.word	0x0800a00d
 8009fe8:	0800a005 	.word	0x0800a005
 8009fec:	2300      	movs	r3, #0
 8009fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ff2:	e0d8      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ffa:	e0d4      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 8009ffc:	2304      	movs	r3, #4
 8009ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a002:	e0d0      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a004:	2308      	movs	r3, #8
 800a006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a00a:	e0cc      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a00c:	2310      	movs	r3, #16
 800a00e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a012:	e0c8      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a5e      	ldr	r2, [pc, #376]	@ (800a194 <UART_SetConfig+0x2ec>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d125      	bne.n	800a06a <UART_SetConfig+0x1c2>
 800a01e:	4b5b      	ldr	r3, [pc, #364]	@ (800a18c <UART_SetConfig+0x2e4>)
 800a020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a024:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a028:	2b30      	cmp	r3, #48	@ 0x30
 800a02a:	d016      	beq.n	800a05a <UART_SetConfig+0x1b2>
 800a02c:	2b30      	cmp	r3, #48	@ 0x30
 800a02e:	d818      	bhi.n	800a062 <UART_SetConfig+0x1ba>
 800a030:	2b20      	cmp	r3, #32
 800a032:	d00a      	beq.n	800a04a <UART_SetConfig+0x1a2>
 800a034:	2b20      	cmp	r3, #32
 800a036:	d814      	bhi.n	800a062 <UART_SetConfig+0x1ba>
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <UART_SetConfig+0x19a>
 800a03c:	2b10      	cmp	r3, #16
 800a03e:	d008      	beq.n	800a052 <UART_SetConfig+0x1aa>
 800a040:	e00f      	b.n	800a062 <UART_SetConfig+0x1ba>
 800a042:	2300      	movs	r3, #0
 800a044:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a048:	e0ad      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a04a:	2302      	movs	r3, #2
 800a04c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a050:	e0a9      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a052:	2304      	movs	r3, #4
 800a054:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a058:	e0a5      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a05a:	2308      	movs	r3, #8
 800a05c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a060:	e0a1      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a062:	2310      	movs	r3, #16
 800a064:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a068:	e09d      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a4a      	ldr	r2, [pc, #296]	@ (800a198 <UART_SetConfig+0x2f0>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d125      	bne.n	800a0c0 <UART_SetConfig+0x218>
 800a074:	4b45      	ldr	r3, [pc, #276]	@ (800a18c <UART_SetConfig+0x2e4>)
 800a076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a07a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a07e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a080:	d016      	beq.n	800a0b0 <UART_SetConfig+0x208>
 800a082:	2bc0      	cmp	r3, #192	@ 0xc0
 800a084:	d818      	bhi.n	800a0b8 <UART_SetConfig+0x210>
 800a086:	2b80      	cmp	r3, #128	@ 0x80
 800a088:	d00a      	beq.n	800a0a0 <UART_SetConfig+0x1f8>
 800a08a:	2b80      	cmp	r3, #128	@ 0x80
 800a08c:	d814      	bhi.n	800a0b8 <UART_SetConfig+0x210>
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <UART_SetConfig+0x1f0>
 800a092:	2b40      	cmp	r3, #64	@ 0x40
 800a094:	d008      	beq.n	800a0a8 <UART_SetConfig+0x200>
 800a096:	e00f      	b.n	800a0b8 <UART_SetConfig+0x210>
 800a098:	2300      	movs	r3, #0
 800a09a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a09e:	e082      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a0a0:	2302      	movs	r3, #2
 800a0a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0a6:	e07e      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a0a8:	2304      	movs	r3, #4
 800a0aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ae:	e07a      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a0b0:	2308      	movs	r3, #8
 800a0b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0b6:	e076      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a0b8:	2310      	movs	r3, #16
 800a0ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0be:	e072      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a35      	ldr	r2, [pc, #212]	@ (800a19c <UART_SetConfig+0x2f4>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d12a      	bne.n	800a120 <UART_SetConfig+0x278>
 800a0ca:	4b30      	ldr	r3, [pc, #192]	@ (800a18c <UART_SetConfig+0x2e4>)
 800a0cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0d8:	d01a      	beq.n	800a110 <UART_SetConfig+0x268>
 800a0da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0de:	d81b      	bhi.n	800a118 <UART_SetConfig+0x270>
 800a0e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0e4:	d00c      	beq.n	800a100 <UART_SetConfig+0x258>
 800a0e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0ea:	d815      	bhi.n	800a118 <UART_SetConfig+0x270>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <UART_SetConfig+0x250>
 800a0f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0f4:	d008      	beq.n	800a108 <UART_SetConfig+0x260>
 800a0f6:	e00f      	b.n	800a118 <UART_SetConfig+0x270>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0fe:	e052      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a100:	2302      	movs	r3, #2
 800a102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a106:	e04e      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a108:	2304      	movs	r3, #4
 800a10a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a10e:	e04a      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a110:	2308      	movs	r3, #8
 800a112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a116:	e046      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a118:	2310      	movs	r3, #16
 800a11a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a11e:	e042      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a17      	ldr	r2, [pc, #92]	@ (800a184 <UART_SetConfig+0x2dc>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d13a      	bne.n	800a1a0 <UART_SetConfig+0x2f8>
 800a12a:	4b18      	ldr	r3, [pc, #96]	@ (800a18c <UART_SetConfig+0x2e4>)
 800a12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a130:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a134:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a138:	d01a      	beq.n	800a170 <UART_SetConfig+0x2c8>
 800a13a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a13e:	d81b      	bhi.n	800a178 <UART_SetConfig+0x2d0>
 800a140:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a144:	d00c      	beq.n	800a160 <UART_SetConfig+0x2b8>
 800a146:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a14a:	d815      	bhi.n	800a178 <UART_SetConfig+0x2d0>
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d003      	beq.n	800a158 <UART_SetConfig+0x2b0>
 800a150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a154:	d008      	beq.n	800a168 <UART_SetConfig+0x2c0>
 800a156:	e00f      	b.n	800a178 <UART_SetConfig+0x2d0>
 800a158:	2300      	movs	r3, #0
 800a15a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a15e:	e022      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a160:	2302      	movs	r3, #2
 800a162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a166:	e01e      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a168:	2304      	movs	r3, #4
 800a16a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a16e:	e01a      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a170:	2308      	movs	r3, #8
 800a172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a176:	e016      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a178:	2310      	movs	r3, #16
 800a17a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a17e:	e012      	b.n	800a1a6 <UART_SetConfig+0x2fe>
 800a180:	cfff69f3 	.word	0xcfff69f3
 800a184:	40008000 	.word	0x40008000
 800a188:	40013800 	.word	0x40013800
 800a18c:	40021000 	.word	0x40021000
 800a190:	40004400 	.word	0x40004400
 800a194:	40004800 	.word	0x40004800
 800a198:	40004c00 	.word	0x40004c00
 800a19c:	40005000 	.word	0x40005000
 800a1a0:	2310      	movs	r3, #16
 800a1a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4aae      	ldr	r2, [pc, #696]	@ (800a464 <UART_SetConfig+0x5bc>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	f040 8097 	bne.w	800a2e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a1b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a1b6:	2b08      	cmp	r3, #8
 800a1b8:	d823      	bhi.n	800a202 <UART_SetConfig+0x35a>
 800a1ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c0 <UART_SetConfig+0x318>)
 800a1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c0:	0800a1e5 	.word	0x0800a1e5
 800a1c4:	0800a203 	.word	0x0800a203
 800a1c8:	0800a1ed 	.word	0x0800a1ed
 800a1cc:	0800a203 	.word	0x0800a203
 800a1d0:	0800a1f3 	.word	0x0800a1f3
 800a1d4:	0800a203 	.word	0x0800a203
 800a1d8:	0800a203 	.word	0x0800a203
 800a1dc:	0800a203 	.word	0x0800a203
 800a1e0:	0800a1fb 	.word	0x0800a1fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1e4:	f7fc f812 	bl	800620c <HAL_RCC_GetPCLK1Freq>
 800a1e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a1ea:	e010      	b.n	800a20e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1ec:	4b9e      	ldr	r3, [pc, #632]	@ (800a468 <UART_SetConfig+0x5c0>)
 800a1ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a1f0:	e00d      	b.n	800a20e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1f2:	f7fb ff9d 	bl	8006130 <HAL_RCC_GetSysClockFreq>
 800a1f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a1f8:	e009      	b.n	800a20e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a200:	e005      	b.n	800a20e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a202:	2300      	movs	r3, #0
 800a204:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a20c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a210:	2b00      	cmp	r3, #0
 800a212:	f000 8130 	beq.w	800a476 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a21a:	4a94      	ldr	r2, [pc, #592]	@ (800a46c <UART_SetConfig+0x5c4>)
 800a21c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a220:	461a      	mov	r2, r3
 800a222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a224:	fbb3 f3f2 	udiv	r3, r3, r2
 800a228:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	685a      	ldr	r2, [r3, #4]
 800a22e:	4613      	mov	r3, r2
 800a230:	005b      	lsls	r3, r3, #1
 800a232:	4413      	add	r3, r2
 800a234:	69ba      	ldr	r2, [r7, #24]
 800a236:	429a      	cmp	r2, r3
 800a238:	d305      	bcc.n	800a246 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	429a      	cmp	r2, r3
 800a244:	d903      	bls.n	800a24e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a24c:	e113      	b.n	800a476 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a250:	2200      	movs	r2, #0
 800a252:	60bb      	str	r3, [r7, #8]
 800a254:	60fa      	str	r2, [r7, #12]
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a25a:	4a84      	ldr	r2, [pc, #528]	@ (800a46c <UART_SetConfig+0x5c4>)
 800a25c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a260:	b29b      	uxth	r3, r3
 800a262:	2200      	movs	r2, #0
 800a264:	603b      	str	r3, [r7, #0]
 800a266:	607a      	str	r2, [r7, #4]
 800a268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a26c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a270:	f7f6 fdae 	bl	8000dd0 <__aeabi_uldivmod>
 800a274:	4602      	mov	r2, r0
 800a276:	460b      	mov	r3, r1
 800a278:	4610      	mov	r0, r2
 800a27a:	4619      	mov	r1, r3
 800a27c:	f04f 0200 	mov.w	r2, #0
 800a280:	f04f 0300 	mov.w	r3, #0
 800a284:	020b      	lsls	r3, r1, #8
 800a286:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a28a:	0202      	lsls	r2, r0, #8
 800a28c:	6979      	ldr	r1, [r7, #20]
 800a28e:	6849      	ldr	r1, [r1, #4]
 800a290:	0849      	lsrs	r1, r1, #1
 800a292:	2000      	movs	r0, #0
 800a294:	460c      	mov	r4, r1
 800a296:	4605      	mov	r5, r0
 800a298:	eb12 0804 	adds.w	r8, r2, r4
 800a29c:	eb43 0905 	adc.w	r9, r3, r5
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	469a      	mov	sl, r3
 800a2a8:	4693      	mov	fp, r2
 800a2aa:	4652      	mov	r2, sl
 800a2ac:	465b      	mov	r3, fp
 800a2ae:	4640      	mov	r0, r8
 800a2b0:	4649      	mov	r1, r9
 800a2b2:	f7f6 fd8d 	bl	8000dd0 <__aeabi_uldivmod>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2c4:	d308      	bcc.n	800a2d8 <UART_SetConfig+0x430>
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2cc:	d204      	bcs.n	800a2d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6a3a      	ldr	r2, [r7, #32]
 800a2d4:	60da      	str	r2, [r3, #12]
 800a2d6:	e0ce      	b.n	800a476 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2de:	e0ca      	b.n	800a476 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	69db      	ldr	r3, [r3, #28]
 800a2e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2e8:	d166      	bne.n	800a3b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a2ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2ee:	2b08      	cmp	r3, #8
 800a2f0:	d827      	bhi.n	800a342 <UART_SetConfig+0x49a>
 800a2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f8 <UART_SetConfig+0x450>)
 800a2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f8:	0800a31d 	.word	0x0800a31d
 800a2fc:	0800a325 	.word	0x0800a325
 800a300:	0800a32d 	.word	0x0800a32d
 800a304:	0800a343 	.word	0x0800a343
 800a308:	0800a333 	.word	0x0800a333
 800a30c:	0800a343 	.word	0x0800a343
 800a310:	0800a343 	.word	0x0800a343
 800a314:	0800a343 	.word	0x0800a343
 800a318:	0800a33b 	.word	0x0800a33b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a31c:	f7fb ff76 	bl	800620c <HAL_RCC_GetPCLK1Freq>
 800a320:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a322:	e014      	b.n	800a34e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a324:	f7fb ff88 	bl	8006238 <HAL_RCC_GetPCLK2Freq>
 800a328:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a32a:	e010      	b.n	800a34e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a32c:	4b4e      	ldr	r3, [pc, #312]	@ (800a468 <UART_SetConfig+0x5c0>)
 800a32e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a330:	e00d      	b.n	800a34e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a332:	f7fb fefd 	bl	8006130 <HAL_RCC_GetSysClockFreq>
 800a336:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a338:	e009      	b.n	800a34e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a33a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a33e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a340:	e005      	b.n	800a34e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a342:	2300      	movs	r3, #0
 800a344:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a34c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 8090 	beq.w	800a476 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a35a:	4a44      	ldr	r2, [pc, #272]	@ (800a46c <UART_SetConfig+0x5c4>)
 800a35c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a360:	461a      	mov	r2, r3
 800a362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a364:	fbb3 f3f2 	udiv	r3, r3, r2
 800a368:	005a      	lsls	r2, r3, #1
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	085b      	lsrs	r3, r3, #1
 800a370:	441a      	add	r2, r3
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	fbb2 f3f3 	udiv	r3, r2, r3
 800a37a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	2b0f      	cmp	r3, #15
 800a380:	d916      	bls.n	800a3b0 <UART_SetConfig+0x508>
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a388:	d212      	bcs.n	800a3b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a38a:	6a3b      	ldr	r3, [r7, #32]
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	f023 030f 	bic.w	r3, r3, #15
 800a392:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a394:	6a3b      	ldr	r3, [r7, #32]
 800a396:	085b      	lsrs	r3, r3, #1
 800a398:	b29b      	uxth	r3, r3
 800a39a:	f003 0307 	and.w	r3, r3, #7
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	8bfb      	ldrh	r3, [r7, #30]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	8bfa      	ldrh	r2, [r7, #30]
 800a3ac:	60da      	str	r2, [r3, #12]
 800a3ae:	e062      	b.n	800a476 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a3b6:	e05e      	b.n	800a476 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a3bc:	2b08      	cmp	r3, #8
 800a3be:	d828      	bhi.n	800a412 <UART_SetConfig+0x56a>
 800a3c0:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c8 <UART_SetConfig+0x520>)
 800a3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c6:	bf00      	nop
 800a3c8:	0800a3ed 	.word	0x0800a3ed
 800a3cc:	0800a3f5 	.word	0x0800a3f5
 800a3d0:	0800a3fd 	.word	0x0800a3fd
 800a3d4:	0800a413 	.word	0x0800a413
 800a3d8:	0800a403 	.word	0x0800a403
 800a3dc:	0800a413 	.word	0x0800a413
 800a3e0:	0800a413 	.word	0x0800a413
 800a3e4:	0800a413 	.word	0x0800a413
 800a3e8:	0800a40b 	.word	0x0800a40b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3ec:	f7fb ff0e 	bl	800620c <HAL_RCC_GetPCLK1Freq>
 800a3f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3f2:	e014      	b.n	800a41e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3f4:	f7fb ff20 	bl	8006238 <HAL_RCC_GetPCLK2Freq>
 800a3f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3fa:	e010      	b.n	800a41e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a468 <UART_SetConfig+0x5c0>)
 800a3fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a400:	e00d      	b.n	800a41e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a402:	f7fb fe95 	bl	8006130 <HAL_RCC_GetSysClockFreq>
 800a406:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a408:	e009      	b.n	800a41e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a40a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a40e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a410:	e005      	b.n	800a41e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a412:	2300      	movs	r3, #0
 800a414:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a41c:	bf00      	nop
    }

    if (pclk != 0U)
 800a41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a420:	2b00      	cmp	r3, #0
 800a422:	d028      	beq.n	800a476 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a428:	4a10      	ldr	r2, [pc, #64]	@ (800a46c <UART_SetConfig+0x5c4>)
 800a42a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a42e:	461a      	mov	r2, r3
 800a430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a432:	fbb3 f2f2 	udiv	r2, r3, r2
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	085b      	lsrs	r3, r3, #1
 800a43c:	441a      	add	r2, r3
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	fbb2 f3f3 	udiv	r3, r2, r3
 800a446:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a448:	6a3b      	ldr	r3, [r7, #32]
 800a44a:	2b0f      	cmp	r3, #15
 800a44c:	d910      	bls.n	800a470 <UART_SetConfig+0x5c8>
 800a44e:	6a3b      	ldr	r3, [r7, #32]
 800a450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a454:	d20c      	bcs.n	800a470 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	b29a      	uxth	r2, r3
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	60da      	str	r2, [r3, #12]
 800a460:	e009      	b.n	800a476 <UART_SetConfig+0x5ce>
 800a462:	bf00      	nop
 800a464:	40008000 	.word	0x40008000
 800a468:	00f42400 	.word	0x00f42400
 800a46c:	0800bc28 	.word	0x0800bc28
      }
      else
      {
        ret = HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	2201      	movs	r2, #1
 800a47a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2201      	movs	r2, #1
 800a482:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	2200      	movs	r2, #0
 800a48a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	2200      	movs	r2, #0
 800a490:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a492:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a496:	4618      	mov	r0, r3
 800a498:	3730      	adds	r7, #48	@ 0x30
 800a49a:	46bd      	mov	sp, r7
 800a49c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a4a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ac:	f003 0308 	and.w	r3, r3, #8
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00a      	beq.n	800a4ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f0:	f003 0302 	and.w	r3, r3, #2
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00a      	beq.n	800a50e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	430a      	orrs	r2, r1
 800a50c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a512:	f003 0304 	and.w	r3, r3, #4
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00a      	beq.n	800a530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	430a      	orrs	r2, r1
 800a52e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a534:	f003 0310 	and.w	r3, r3, #16
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00a      	beq.n	800a552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	430a      	orrs	r2, r1
 800a550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a556:	f003 0320 	and.w	r3, r3, #32
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00a      	beq.n	800a574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	430a      	orrs	r2, r1
 800a572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d01a      	beq.n	800a5b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	430a      	orrs	r2, r1
 800a594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a59a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a59e:	d10a      	bne.n	800a5b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	430a      	orrs	r2, r1
 800a5b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00a      	beq.n	800a5d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	430a      	orrs	r2, r1
 800a5d6:	605a      	str	r2, [r3, #4]
  }
}
 800a5d8:	bf00      	nop
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b098      	sub	sp, #96	@ 0x60
 800a5e8:	af02      	add	r7, sp, #8
 800a5ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5f4:	f7fa fa82 	bl	8004afc <HAL_GetTick>
 800a5f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 0308 	and.w	r3, r3, #8
 800a604:	2b08      	cmp	r3, #8
 800a606:	d12f      	bne.n	800a668 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a608:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a610:	2200      	movs	r2, #0
 800a612:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f88e 	bl	800a738 <UART_WaitOnFlagUntilTimeout>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d022      	beq.n	800a668 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62a:	e853 3f00 	ldrex	r3, [r3]
 800a62e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a636:	653b      	str	r3, [r7, #80]	@ 0x50
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	461a      	mov	r2, r3
 800a63e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a640:	647b      	str	r3, [r7, #68]	@ 0x44
 800a642:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a644:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a646:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a648:	e841 2300 	strex	r3, r2, [r1]
 800a64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a64e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1e6      	bne.n	800a622 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2220      	movs	r2, #32
 800a658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a664:	2303      	movs	r3, #3
 800a666:	e063      	b.n	800a730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 0304 	and.w	r3, r3, #4
 800a672:	2b04      	cmp	r3, #4
 800a674:	d149      	bne.n	800a70a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a676:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a67e:	2200      	movs	r2, #0
 800a680:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 f857 	bl	800a738 <UART_WaitOnFlagUntilTimeout>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d03c      	beq.n	800a70a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a698:	e853 3f00 	ldrex	r3, [r3]
 800a69c:	623b      	str	r3, [r7, #32]
   return(result);
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6b6:	e841 2300 	strex	r3, r2, [r1]
 800a6ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1e6      	bne.n	800a690 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	3308      	adds	r3, #8
 800a6c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	e853 3f00 	ldrex	r3, [r3]
 800a6d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f023 0301 	bic.w	r3, r3, #1
 800a6d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3308      	adds	r3, #8
 800a6e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6e2:	61fa      	str	r2, [r7, #28]
 800a6e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e6:	69b9      	ldr	r1, [r7, #24]
 800a6e8:	69fa      	ldr	r2, [r7, #28]
 800a6ea:	e841 2300 	strex	r3, r2, [r1]
 800a6ee:	617b      	str	r3, [r7, #20]
   return(result);
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1e5      	bne.n	800a6c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2220      	movs	r2, #32
 800a6fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e012      	b.n	800a730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2220      	movs	r2, #32
 800a70e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2220      	movs	r2, #32
 800a716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3758      	adds	r7, #88	@ 0x58
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	603b      	str	r3, [r7, #0]
 800a744:	4613      	mov	r3, r2
 800a746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a748:	e04f      	b.n	800a7ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a750:	d04b      	beq.n	800a7ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a752:	f7fa f9d3 	bl	8004afc <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	69ba      	ldr	r2, [r7, #24]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d302      	bcc.n	800a768 <UART_WaitOnFlagUntilTimeout+0x30>
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d101      	bne.n	800a76c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a768:	2303      	movs	r3, #3
 800a76a:	e04e      	b.n	800a80a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 0304 	and.w	r3, r3, #4
 800a776:	2b00      	cmp	r3, #0
 800a778:	d037      	beq.n	800a7ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	2b80      	cmp	r3, #128	@ 0x80
 800a77e:	d034      	beq.n	800a7ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2b40      	cmp	r3, #64	@ 0x40
 800a784:	d031      	beq.n	800a7ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	69db      	ldr	r3, [r3, #28]
 800a78c:	f003 0308 	and.w	r3, r3, #8
 800a790:	2b08      	cmp	r3, #8
 800a792:	d110      	bne.n	800a7b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2208      	movs	r2, #8
 800a79a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f000 f920 	bl	800a9e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2208      	movs	r2, #8
 800a7a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e029      	b.n	800a80a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	69db      	ldr	r3, [r3, #28]
 800a7bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7c4:	d111      	bne.n	800a7ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a7ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f000 f906 	bl	800a9e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a7e6:	2303      	movs	r3, #3
 800a7e8:	e00f      	b.n	800a80a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	69da      	ldr	r2, [r3, #28]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	bf0c      	ite	eq
 800a7fa:	2301      	moveq	r3, #1
 800a7fc:	2300      	movne	r3, #0
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	461a      	mov	r2, r3
 800a802:	79fb      	ldrb	r3, [r7, #7]
 800a804:	429a      	cmp	r2, r3
 800a806:	d0a0      	beq.n	800a74a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
	...

0800a814 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b096      	sub	sp, #88	@ 0x58
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	4613      	mov	r3, r2
 800a820:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	88fa      	ldrh	r2, [r7, #6]
 800a82c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2222      	movs	r2, #34	@ 0x22
 800a83c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a846:	2b00      	cmp	r3, #0
 800a848:	d02d      	beq.n	800a8a6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a850:	4a40      	ldr	r2, [pc, #256]	@ (800a954 <UART_Start_Receive_DMA+0x140>)
 800a852:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a85a:	4a3f      	ldr	r2, [pc, #252]	@ (800a958 <UART_Start_Receive_DMA+0x144>)
 800a85c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a864:	4a3d      	ldr	r2, [pc, #244]	@ (800a95c <UART_Start_Receive_DMA+0x148>)
 800a866:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a86e:	2200      	movs	r2, #0
 800a870:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	3324      	adds	r3, #36	@ 0x24
 800a87e:	4619      	mov	r1, r3
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a884:	461a      	mov	r2, r3
 800a886:	88fb      	ldrh	r3, [r7, #6]
 800a888:	f7fa fafc 	bl	8004e84 <HAL_DMA_Start_IT>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d009      	beq.n	800a8a6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2210      	movs	r2, #16
 800a896:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2220      	movs	r2, #32
 800a89e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e051      	b.n	800a94a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d018      	beq.n	800a8e0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8b6:	e853 3f00 	ldrex	r3, [r3]
 800a8ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8ce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a8d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8d4:	e841 2300 	strex	r3, r2, [r1]
 800a8d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a8da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1e6      	bne.n	800a8ae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	3308      	adds	r3, #8
 800a8e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ea:	e853 3f00 	ldrex	r3, [r3]
 800a8ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f2:	f043 0301 	orr.w	r3, r3, #1
 800a8f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	3308      	adds	r3, #8
 800a8fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a900:	637a      	str	r2, [r7, #52]	@ 0x34
 800a902:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a904:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a906:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a908:	e841 2300 	strex	r3, r2, [r1]
 800a90c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1e5      	bne.n	800a8e0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3308      	adds	r3, #8
 800a91a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	e853 3f00 	ldrex	r3, [r3]
 800a922:	613b      	str	r3, [r7, #16]
   return(result);
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a92a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	3308      	adds	r3, #8
 800a932:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a934:	623a      	str	r2, [r7, #32]
 800a936:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a938:	69f9      	ldr	r1, [r7, #28]
 800a93a:	6a3a      	ldr	r2, [r7, #32]
 800a93c:	e841 2300 	strex	r3, r2, [r1]
 800a940:	61bb      	str	r3, [r7, #24]
   return(result);
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1e5      	bne.n	800a914 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3758      	adds	r7, #88	@ 0x58
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	0800ab6d 	.word	0x0800ab6d
 800a958:	0800aca1 	.word	0x0800aca1
 800a95c:	0800ace7 	.word	0x0800ace7

0800a960 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a960:	b480      	push	{r7}
 800a962:	b08f      	sub	sp, #60	@ 0x3c
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96e:	6a3b      	ldr	r3, [r7, #32]
 800a970:	e853 3f00 	ldrex	r3, [r3]
 800a974:	61fb      	str	r3, [r7, #28]
   return(result);
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a97c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	461a      	mov	r2, r3
 800a984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a988:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a98c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a98e:	e841 2300 	strex	r3, r2, [r1]
 800a992:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1e6      	bne.n	800a968 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	3308      	adds	r3, #8
 800a9a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	e853 3f00 	ldrex	r3, [r3]
 800a9a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a9b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	3308      	adds	r3, #8
 800a9b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9ba:	61ba      	str	r2, [r7, #24]
 800a9bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9be:	6979      	ldr	r1, [r7, #20]
 800a9c0:	69ba      	ldr	r2, [r7, #24]
 800a9c2:	e841 2300 	strex	r3, r2, [r1]
 800a9c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1e5      	bne.n	800a99a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2220      	movs	r2, #32
 800a9d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a9d6:	bf00      	nop
 800a9d8:	373c      	adds	r7, #60	@ 0x3c
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b095      	sub	sp, #84	@ 0x54
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9f2:	e853 3f00 	ldrex	r3, [r3]
 800a9f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	461a      	mov	r2, r3
 800aa06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa08:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa10:	e841 2300 	strex	r3, r2, [r1]
 800aa14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1e6      	bne.n	800a9ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	3308      	adds	r3, #8
 800aa22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	e853 3f00 	ldrex	r3, [r3]
 800aa2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa32:	f023 0301 	bic.w	r3, r3, #1
 800aa36:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	3308      	adds	r3, #8
 800aa3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa48:	e841 2300 	strex	r3, r2, [r1]
 800aa4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1e3      	bne.n	800aa1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d118      	bne.n	800aa8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	e853 3f00 	ldrex	r3, [r3]
 800aa68:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	f023 0310 	bic.w	r3, r3, #16
 800aa70:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	461a      	mov	r2, r3
 800aa78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa7a:	61bb      	str	r3, [r7, #24]
 800aa7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7e:	6979      	ldr	r1, [r7, #20]
 800aa80:	69ba      	ldr	r2, [r7, #24]
 800aa82:	e841 2300 	strex	r3, r2, [r1]
 800aa86:	613b      	str	r3, [r7, #16]
   return(result);
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1e6      	bne.n	800aa5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2220      	movs	r2, #32
 800aa92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aaa2:	bf00      	nop
 800aaa4:	3754      	adds	r7, #84	@ 0x54
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b090      	sub	sp, #64	@ 0x40
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 0320 	and.w	r3, r3, #32
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d137      	bne.n	800ab3a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800aaca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aacc:	2200      	movs	r2, #0
 800aace:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3308      	adds	r3, #8
 800aad8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aadc:	e853 3f00 	ldrex	r3, [r3]
 800aae0:	623b      	str	r3, [r7, #32]
   return(result);
 800aae2:	6a3b      	ldr	r3, [r7, #32]
 800aae4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aae8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aaea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	3308      	adds	r3, #8
 800aaf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aaf2:	633a      	str	r2, [r7, #48]	@ 0x30
 800aaf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aaf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aafa:	e841 2300 	strex	r3, r2, [r1]
 800aafe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1e5      	bne.n	800aad2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	e853 3f00 	ldrex	r3, [r3]
 800ab12:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	461a      	mov	r2, r3
 800ab22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab24:	61fb      	str	r3, [r7, #28]
 800ab26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab28:	69b9      	ldr	r1, [r7, #24]
 800ab2a:	69fa      	ldr	r2, [r7, #28]
 800ab2c:	e841 2300 	strex	r3, r2, [r1]
 800ab30:	617b      	str	r3, [r7, #20]
   return(result);
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e6      	bne.n	800ab06 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab38:	e004      	b.n	800ab44 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800ab3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ab40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ab42:	4798      	blx	r3
}
 800ab44:	bf00      	nop
 800ab46:	3740      	adds	r7, #64	@ 0x40
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab58:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab64:	bf00      	nop
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b09c      	sub	sp, #112	@ 0x70
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab78:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 0320 	and.w	r3, r3, #32
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d171      	bne.n	800ac6c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ab88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab98:	e853 3f00 	ldrex	r3, [r3]
 800ab9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aba4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aba6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	461a      	mov	r2, r3
 800abac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800abae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800abb0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800abb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800abb6:	e841 2300 	strex	r3, r2, [r1]
 800abba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800abbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1e6      	bne.n	800ab90 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	3308      	adds	r3, #8
 800abc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abcc:	e853 3f00 	ldrex	r3, [r3]
 800abd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800abd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abd4:	f023 0301 	bic.w	r3, r3, #1
 800abd8:	667b      	str	r3, [r7, #100]	@ 0x64
 800abda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	3308      	adds	r3, #8
 800abe0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800abe2:	647a      	str	r2, [r7, #68]	@ 0x44
 800abe4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800abe8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abea:	e841 2300 	strex	r3, r2, [r1]
 800abee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800abf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1e5      	bne.n	800abc2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	3308      	adds	r3, #8
 800abfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac00:	e853 3f00 	ldrex	r3, [r3]
 800ac04:	623b      	str	r3, [r7, #32]
   return(result);
 800ac06:	6a3b      	ldr	r3, [r7, #32]
 800ac08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac0c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	3308      	adds	r3, #8
 800ac14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ac16:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac1e:	e841 2300 	strex	r3, r2, [r1]
 800ac22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1e5      	bne.n	800abf6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac2c:	2220      	movs	r2, #32
 800ac2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d118      	bne.n	800ac6c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	e853 3f00 	ldrex	r3, [r3]
 800ac46:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f023 0310 	bic.w	r3, r3, #16
 800ac4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac58:	61fb      	str	r3, [r7, #28]
 800ac5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5c:	69b9      	ldr	r1, [r7, #24]
 800ac5e:	69fa      	ldr	r2, [r7, #28]
 800ac60:	e841 2300 	strex	r3, r2, [r1]
 800ac64:	617b      	str	r3, [r7, #20]
   return(result);
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1e6      	bne.n	800ac3a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac6e:	2200      	movs	r2, #0
 800ac70:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d109      	bne.n	800ac8e <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800ac7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ac80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ac82:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ac86:	4611      	mov	r1, r2
 800ac88:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ac8a:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac8c:	e004      	b.n	800ac98 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800ac8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ac94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ac96:	4798      	blx	r3
}
 800ac98:	bf00      	nop
 800ac9a:	3770      	adds	r7, #112	@ 0x70
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2201      	movs	r2, #1
 800acb2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d10b      	bne.n	800acd4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800acc8:	0852      	lsrs	r2, r2, #1
 800acca:	b292      	uxth	r2, r2
 800accc:	4611      	mov	r1, r2
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800acd2:	e004      	b.n	800acde <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	4798      	blx	r3
}
 800acde:	bf00      	nop
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b086      	sub	sp, #24
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acfa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad0e:	2b80      	cmp	r3, #128	@ 0x80
 800ad10:	d109      	bne.n	800ad26 <UART_DMAError+0x40>
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	2b21      	cmp	r3, #33	@ 0x21
 800ad16:	d106      	bne.n	800ad26 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ad20:	6978      	ldr	r0, [r7, #20]
 800ad22:	f7ff fe1d 	bl	800a960 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad30:	2b40      	cmp	r3, #64	@ 0x40
 800ad32:	d109      	bne.n	800ad48 <UART_DMAError+0x62>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2b22      	cmp	r3, #34	@ 0x22
 800ad38:	d106      	bne.n	800ad48 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ad42:	6978      	ldr	r0, [r7, #20]
 800ad44:	f7ff fe4d 	bl	800a9e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad4e:	f043 0210 	orr.w	r2, r3, #16
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ad5e:	6978      	ldr	r0, [r7, #20]
 800ad60:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad62:	bf00      	nop
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b084      	sub	sp, #16
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad8a:	bf00      	nop
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b088      	sub	sp, #32
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	e853 3f00 	ldrex	r3, [r3]
 800ada6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adae:	61fb      	str	r3, [r7, #28]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	461a      	mov	r2, r3
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	61bb      	str	r3, [r7, #24]
 800adba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbc:	6979      	ldr	r1, [r7, #20]
 800adbe:	69ba      	ldr	r2, [r7, #24]
 800adc0:	e841 2300 	strex	r3, r2, [r1]
 800adc4:	613b      	str	r3, [r7, #16]
   return(result);
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1e6      	bne.n	800ad9a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2220      	movs	r2, #32
 800add0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ade4:	bf00      	nop
 800ade6:	3720      	adds	r7, #32
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae1c:	bf00      	nop
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d101      	bne.n	800ae3e <HAL_UARTEx_DisableFifoMode+0x16>
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	e027      	b.n	800ae8e <HAL_UARTEx_DisableFifoMode+0x66>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2201      	movs	r2, #1
 800ae42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2224      	movs	r2, #36	@ 0x24
 800ae4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f022 0201 	bic.w	r2, r2, #1
 800ae64:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ae6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2220      	movs	r2, #32
 800ae80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr

0800ae9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b084      	sub	sp, #16
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
 800aea2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d101      	bne.n	800aeb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aeae:	2302      	movs	r3, #2
 800aeb0:	e02d      	b.n	800af0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2224      	movs	r2, #36	@ 0x24
 800aebe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f022 0201 	bic.w	r2, r2, #1
 800aed8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	683a      	ldr	r2, [r7, #0]
 800aeea:	430a      	orrs	r2, r1
 800aeec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 f850 	bl	800af94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2220      	movs	r2, #32
 800af00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b084      	sub	sp, #16
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af26:	2b01      	cmp	r3, #1
 800af28:	d101      	bne.n	800af2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af2a:	2302      	movs	r3, #2
 800af2c:	e02d      	b.n	800af8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2201      	movs	r2, #1
 800af32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2224      	movs	r2, #36	@ 0x24
 800af3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f022 0201 	bic.w	r2, r2, #1
 800af54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	683a      	ldr	r2, [r7, #0]
 800af66:	430a      	orrs	r2, r1
 800af68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f812 	bl	800af94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2220      	movs	r2, #32
 800af7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
	...

0800af94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d108      	bne.n	800afb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800afb4:	e031      	b.n	800b01a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800afb6:	2308      	movs	r3, #8
 800afb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800afba:	2308      	movs	r3, #8
 800afbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	0e5b      	lsrs	r3, r3, #25
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	f003 0307 	and.w	r3, r3, #7
 800afcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	0f5b      	lsrs	r3, r3, #29
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	f003 0307 	and.w	r3, r3, #7
 800afdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800afde:	7bbb      	ldrb	r3, [r7, #14]
 800afe0:	7b3a      	ldrb	r2, [r7, #12]
 800afe2:	4911      	ldr	r1, [pc, #68]	@ (800b028 <UARTEx_SetNbDataToProcess+0x94>)
 800afe4:	5c8a      	ldrb	r2, [r1, r2]
 800afe6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800afea:	7b3a      	ldrb	r2, [r7, #12]
 800afec:	490f      	ldr	r1, [pc, #60]	@ (800b02c <UARTEx_SetNbDataToProcess+0x98>)
 800afee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aff0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800affc:	7bfb      	ldrb	r3, [r7, #15]
 800affe:	7b7a      	ldrb	r2, [r7, #13]
 800b000:	4909      	ldr	r1, [pc, #36]	@ (800b028 <UARTEx_SetNbDataToProcess+0x94>)
 800b002:	5c8a      	ldrb	r2, [r1, r2]
 800b004:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b008:	7b7a      	ldrb	r2, [r7, #13]
 800b00a:	4908      	ldr	r1, [pc, #32]	@ (800b02c <UARTEx_SetNbDataToProcess+0x98>)
 800b00c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b00e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b012:	b29a      	uxth	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b01a:	bf00      	nop
 800b01c:	3714      	adds	r7, #20
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	0800bc40 	.word	0x0800bc40
 800b02c:	0800bc48 	.word	0x0800bc48

0800b030 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	ed93 7a06 	vldr	s14, [r3, #24]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	edd3 7a07 	vldr	s15, [r3, #28]
 800b046:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	edd3 7a08 	vldr	s15, [r3, #32]
 800b050:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	edd3 7a06 	vldr	s15, [r3, #24]
 800b060:	eeb1 7a67 	vneg.f32	s14, s15
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	edd3 7a08 	vldr	s15, [r3, #32]
 800b06a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b06e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a1a      	ldr	r2, [r3, #32]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d006      	beq.n	800b094 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	330c      	adds	r3, #12
 800b08a:	220c      	movs	r2, #12
 800b08c:	2100      	movs	r1, #0
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 f804 	bl	800b09c <memset>
  }

}
 800b094:	bf00      	nop
 800b096:	3708      	adds	r7, #8
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <memset>:
 800b09c:	4402      	add	r2, r0
 800b09e:	4603      	mov	r3, r0
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d100      	bne.n	800b0a6 <memset+0xa>
 800b0a4:	4770      	bx	lr
 800b0a6:	f803 1b01 	strb.w	r1, [r3], #1
 800b0aa:	e7f9      	b.n	800b0a0 <memset+0x4>

0800b0ac <__libc_init_array>:
 800b0ac:	b570      	push	{r4, r5, r6, lr}
 800b0ae:	4d0d      	ldr	r5, [pc, #52]	@ (800b0e4 <__libc_init_array+0x38>)
 800b0b0:	4c0d      	ldr	r4, [pc, #52]	@ (800b0e8 <__libc_init_array+0x3c>)
 800b0b2:	1b64      	subs	r4, r4, r5
 800b0b4:	10a4      	asrs	r4, r4, #2
 800b0b6:	2600      	movs	r6, #0
 800b0b8:	42a6      	cmp	r6, r4
 800b0ba:	d109      	bne.n	800b0d0 <__libc_init_array+0x24>
 800b0bc:	4d0b      	ldr	r5, [pc, #44]	@ (800b0ec <__libc_init_array+0x40>)
 800b0be:	4c0c      	ldr	r4, [pc, #48]	@ (800b0f0 <__libc_init_array+0x44>)
 800b0c0:	f000 fd9a 	bl	800bbf8 <_init>
 800b0c4:	1b64      	subs	r4, r4, r5
 800b0c6:	10a4      	asrs	r4, r4, #2
 800b0c8:	2600      	movs	r6, #0
 800b0ca:	42a6      	cmp	r6, r4
 800b0cc:	d105      	bne.n	800b0da <__libc_init_array+0x2e>
 800b0ce:	bd70      	pop	{r4, r5, r6, pc}
 800b0d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0d4:	4798      	blx	r3
 800b0d6:	3601      	adds	r6, #1
 800b0d8:	e7ee      	b.n	800b0b8 <__libc_init_array+0xc>
 800b0da:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0de:	4798      	blx	r3
 800b0e0:	3601      	adds	r6, #1
 800b0e2:	e7f2      	b.n	800b0ca <__libc_init_array+0x1e>
 800b0e4:	0800c028 	.word	0x0800c028
 800b0e8:	0800c028 	.word	0x0800c028
 800b0ec:	0800c028 	.word	0x0800c028
 800b0f0:	0800c02c 	.word	0x0800c02c

0800b0f4 <memcpy>:
 800b0f4:	440a      	add	r2, r1
 800b0f6:	4291      	cmp	r1, r2
 800b0f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0fc:	d100      	bne.n	800b100 <memcpy+0xc>
 800b0fe:	4770      	bx	lr
 800b100:	b510      	push	{r4, lr}
 800b102:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b10a:	4291      	cmp	r1, r2
 800b10c:	d1f9      	bne.n	800b102 <memcpy+0xe>
 800b10e:	bd10      	pop	{r4, pc}

0800b110 <cosf>:
 800b110:	ee10 3a10 	vmov	r3, s0
 800b114:	b507      	push	{r0, r1, r2, lr}
 800b116:	4a1e      	ldr	r2, [pc, #120]	@ (800b190 <cosf+0x80>)
 800b118:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d806      	bhi.n	800b12e <cosf+0x1e>
 800b120:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b194 <cosf+0x84>
 800b124:	b003      	add	sp, #12
 800b126:	f85d eb04 	ldr.w	lr, [sp], #4
 800b12a:	f000 b87b 	b.w	800b224 <__kernel_cosf>
 800b12e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b132:	d304      	bcc.n	800b13e <cosf+0x2e>
 800b134:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b138:	b003      	add	sp, #12
 800b13a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b13e:	4668      	mov	r0, sp
 800b140:	f000 f910 	bl	800b364 <__ieee754_rem_pio2f>
 800b144:	f000 0003 	and.w	r0, r0, #3
 800b148:	2801      	cmp	r0, #1
 800b14a:	d009      	beq.n	800b160 <cosf+0x50>
 800b14c:	2802      	cmp	r0, #2
 800b14e:	d010      	beq.n	800b172 <cosf+0x62>
 800b150:	b9b0      	cbnz	r0, 800b180 <cosf+0x70>
 800b152:	eddd 0a01 	vldr	s1, [sp, #4]
 800b156:	ed9d 0a00 	vldr	s0, [sp]
 800b15a:	f000 f863 	bl	800b224 <__kernel_cosf>
 800b15e:	e7eb      	b.n	800b138 <cosf+0x28>
 800b160:	eddd 0a01 	vldr	s1, [sp, #4]
 800b164:	ed9d 0a00 	vldr	s0, [sp]
 800b168:	f000 f8b4 	bl	800b2d4 <__kernel_sinf>
 800b16c:	eeb1 0a40 	vneg.f32	s0, s0
 800b170:	e7e2      	b.n	800b138 <cosf+0x28>
 800b172:	eddd 0a01 	vldr	s1, [sp, #4]
 800b176:	ed9d 0a00 	vldr	s0, [sp]
 800b17a:	f000 f853 	bl	800b224 <__kernel_cosf>
 800b17e:	e7f5      	b.n	800b16c <cosf+0x5c>
 800b180:	eddd 0a01 	vldr	s1, [sp, #4]
 800b184:	ed9d 0a00 	vldr	s0, [sp]
 800b188:	2001      	movs	r0, #1
 800b18a:	f000 f8a3 	bl	800b2d4 <__kernel_sinf>
 800b18e:	e7d3      	b.n	800b138 <cosf+0x28>
 800b190:	3f490fd8 	.word	0x3f490fd8
 800b194:	00000000 	.word	0x00000000

0800b198 <sinf>:
 800b198:	ee10 3a10 	vmov	r3, s0
 800b19c:	b507      	push	{r0, r1, r2, lr}
 800b19e:	4a1f      	ldr	r2, [pc, #124]	@ (800b21c <sinf+0x84>)
 800b1a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d807      	bhi.n	800b1b8 <sinf+0x20>
 800b1a8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b220 <sinf+0x88>
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	b003      	add	sp, #12
 800b1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1b4:	f000 b88e 	b.w	800b2d4 <__kernel_sinf>
 800b1b8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b1bc:	d304      	bcc.n	800b1c8 <sinf+0x30>
 800b1be:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b1c2:	b003      	add	sp, #12
 800b1c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1c8:	4668      	mov	r0, sp
 800b1ca:	f000 f8cb 	bl	800b364 <__ieee754_rem_pio2f>
 800b1ce:	f000 0003 	and.w	r0, r0, #3
 800b1d2:	2801      	cmp	r0, #1
 800b1d4:	d00a      	beq.n	800b1ec <sinf+0x54>
 800b1d6:	2802      	cmp	r0, #2
 800b1d8:	d00f      	beq.n	800b1fa <sinf+0x62>
 800b1da:	b9c0      	cbnz	r0, 800b20e <sinf+0x76>
 800b1dc:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1e0:	ed9d 0a00 	vldr	s0, [sp]
 800b1e4:	2001      	movs	r0, #1
 800b1e6:	f000 f875 	bl	800b2d4 <__kernel_sinf>
 800b1ea:	e7ea      	b.n	800b1c2 <sinf+0x2a>
 800b1ec:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1f0:	ed9d 0a00 	vldr	s0, [sp]
 800b1f4:	f000 f816 	bl	800b224 <__kernel_cosf>
 800b1f8:	e7e3      	b.n	800b1c2 <sinf+0x2a>
 800b1fa:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1fe:	ed9d 0a00 	vldr	s0, [sp]
 800b202:	2001      	movs	r0, #1
 800b204:	f000 f866 	bl	800b2d4 <__kernel_sinf>
 800b208:	eeb1 0a40 	vneg.f32	s0, s0
 800b20c:	e7d9      	b.n	800b1c2 <sinf+0x2a>
 800b20e:	eddd 0a01 	vldr	s1, [sp, #4]
 800b212:	ed9d 0a00 	vldr	s0, [sp]
 800b216:	f000 f805 	bl	800b224 <__kernel_cosf>
 800b21a:	e7f5      	b.n	800b208 <sinf+0x70>
 800b21c:	3f490fd8 	.word	0x3f490fd8
 800b220:	00000000 	.word	0x00000000

0800b224 <__kernel_cosf>:
 800b224:	ee10 3a10 	vmov	r3, s0
 800b228:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b22c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b230:	eef0 6a40 	vmov.f32	s13, s0
 800b234:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b238:	d204      	bcs.n	800b244 <__kernel_cosf+0x20>
 800b23a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b23e:	ee17 2a90 	vmov	r2, s15
 800b242:	b342      	cbz	r2, 800b296 <__kernel_cosf+0x72>
 800b244:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b248:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b2b4 <__kernel_cosf+0x90>
 800b24c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b2b8 <__kernel_cosf+0x94>
 800b250:	4a1a      	ldr	r2, [pc, #104]	@ (800b2bc <__kernel_cosf+0x98>)
 800b252:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b256:	4293      	cmp	r3, r2
 800b258:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b2c0 <__kernel_cosf+0x9c>
 800b25c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b260:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b2c4 <__kernel_cosf+0xa0>
 800b264:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b268:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b2c8 <__kernel_cosf+0xa4>
 800b26c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b270:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b2cc <__kernel_cosf+0xa8>
 800b274:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b278:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b27c:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b280:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b284:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b28c:	d804      	bhi.n	800b298 <__kernel_cosf+0x74>
 800b28e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b292:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b296:	4770      	bx	lr
 800b298:	4a0d      	ldr	r2, [pc, #52]	@ (800b2d0 <__kernel_cosf+0xac>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	bf9a      	itte	ls
 800b29e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b2a2:	ee07 3a10 	vmovls	s14, r3
 800b2a6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b2aa:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b2ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b2b2:	e7ec      	b.n	800b28e <__kernel_cosf+0x6a>
 800b2b4:	ad47d74e 	.word	0xad47d74e
 800b2b8:	310f74f6 	.word	0x310f74f6
 800b2bc:	3e999999 	.word	0x3e999999
 800b2c0:	b493f27c 	.word	0xb493f27c
 800b2c4:	37d00d01 	.word	0x37d00d01
 800b2c8:	bab60b61 	.word	0xbab60b61
 800b2cc:	3d2aaaab 	.word	0x3d2aaaab
 800b2d0:	3f480000 	.word	0x3f480000

0800b2d4 <__kernel_sinf>:
 800b2d4:	ee10 3a10 	vmov	r3, s0
 800b2d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2dc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b2e0:	d204      	bcs.n	800b2ec <__kernel_sinf+0x18>
 800b2e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b2e6:	ee17 3a90 	vmov	r3, s15
 800b2ea:	b35b      	cbz	r3, 800b344 <__kernel_sinf+0x70>
 800b2ec:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b2f0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b348 <__kernel_sinf+0x74>
 800b2f4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b34c <__kernel_sinf+0x78>
 800b2f8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b2fc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b350 <__kernel_sinf+0x7c>
 800b300:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b304:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b354 <__kernel_sinf+0x80>
 800b308:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b30c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b358 <__kernel_sinf+0x84>
 800b310:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b314:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b318:	b930      	cbnz	r0, 800b328 <__kernel_sinf+0x54>
 800b31a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b35c <__kernel_sinf+0x88>
 800b31e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b322:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b326:	4770      	bx	lr
 800b328:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b32c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b330:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b334:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b338:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b360 <__kernel_sinf+0x8c>
 800b33c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b340:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b344:	4770      	bx	lr
 800b346:	bf00      	nop
 800b348:	2f2ec9d3 	.word	0x2f2ec9d3
 800b34c:	b2d72f34 	.word	0xb2d72f34
 800b350:	3638ef1b 	.word	0x3638ef1b
 800b354:	b9500d01 	.word	0xb9500d01
 800b358:	3c088889 	.word	0x3c088889
 800b35c:	be2aaaab 	.word	0xbe2aaaab
 800b360:	3e2aaaab 	.word	0x3e2aaaab

0800b364 <__ieee754_rem_pio2f>:
 800b364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b366:	ee10 6a10 	vmov	r6, s0
 800b36a:	4b88      	ldr	r3, [pc, #544]	@ (800b58c <__ieee754_rem_pio2f+0x228>)
 800b36c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b370:	429d      	cmp	r5, r3
 800b372:	b087      	sub	sp, #28
 800b374:	4604      	mov	r4, r0
 800b376:	d805      	bhi.n	800b384 <__ieee754_rem_pio2f+0x20>
 800b378:	2300      	movs	r3, #0
 800b37a:	ed80 0a00 	vstr	s0, [r0]
 800b37e:	6043      	str	r3, [r0, #4]
 800b380:	2000      	movs	r0, #0
 800b382:	e022      	b.n	800b3ca <__ieee754_rem_pio2f+0x66>
 800b384:	4b82      	ldr	r3, [pc, #520]	@ (800b590 <__ieee754_rem_pio2f+0x22c>)
 800b386:	429d      	cmp	r5, r3
 800b388:	d83a      	bhi.n	800b400 <__ieee754_rem_pio2f+0x9c>
 800b38a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b38e:	2e00      	cmp	r6, #0
 800b390:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b594 <__ieee754_rem_pio2f+0x230>
 800b394:	4a80      	ldr	r2, [pc, #512]	@ (800b598 <__ieee754_rem_pio2f+0x234>)
 800b396:	f023 030f 	bic.w	r3, r3, #15
 800b39a:	dd18      	ble.n	800b3ce <__ieee754_rem_pio2f+0x6a>
 800b39c:	4293      	cmp	r3, r2
 800b39e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b3a2:	bf09      	itett	eq
 800b3a4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b59c <__ieee754_rem_pio2f+0x238>
 800b3a8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b5a0 <__ieee754_rem_pio2f+0x23c>
 800b3ac:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b5a4 <__ieee754_rem_pio2f+0x240>
 800b3b0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b3b4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b3b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3bc:	ed80 7a00 	vstr	s14, [r0]
 800b3c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b3c4:	edc0 7a01 	vstr	s15, [r0, #4]
 800b3c8:	2001      	movs	r0, #1
 800b3ca:	b007      	add	sp, #28
 800b3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b3d4:	bf09      	itett	eq
 800b3d6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b59c <__ieee754_rem_pio2f+0x238>
 800b3da:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b5a0 <__ieee754_rem_pio2f+0x23c>
 800b3de:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b5a4 <__ieee754_rem_pio2f+0x240>
 800b3e2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b3e6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b3ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3ee:	ed80 7a00 	vstr	s14, [r0]
 800b3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3f6:	edc0 7a01 	vstr	s15, [r0, #4]
 800b3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b3fe:	e7e4      	b.n	800b3ca <__ieee754_rem_pio2f+0x66>
 800b400:	4b69      	ldr	r3, [pc, #420]	@ (800b5a8 <__ieee754_rem_pio2f+0x244>)
 800b402:	429d      	cmp	r5, r3
 800b404:	d873      	bhi.n	800b4ee <__ieee754_rem_pio2f+0x18a>
 800b406:	f000 f8dd 	bl	800b5c4 <fabsf>
 800b40a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b5ac <__ieee754_rem_pio2f+0x248>
 800b40e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b412:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b41a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b41e:	ee17 0a90 	vmov	r0, s15
 800b422:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b594 <__ieee754_rem_pio2f+0x230>
 800b426:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b42a:	281f      	cmp	r0, #31
 800b42c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b5a0 <__ieee754_rem_pio2f+0x23c>
 800b430:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b434:	eeb1 6a47 	vneg.f32	s12, s14
 800b438:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b43c:	ee16 1a90 	vmov	r1, s13
 800b440:	dc09      	bgt.n	800b456 <__ieee754_rem_pio2f+0xf2>
 800b442:	4a5b      	ldr	r2, [pc, #364]	@ (800b5b0 <__ieee754_rem_pio2f+0x24c>)
 800b444:	1e47      	subs	r7, r0, #1
 800b446:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b44a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b44e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b452:	4293      	cmp	r3, r2
 800b454:	d107      	bne.n	800b466 <__ieee754_rem_pio2f+0x102>
 800b456:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b45a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b45e:	2a08      	cmp	r2, #8
 800b460:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b464:	dc14      	bgt.n	800b490 <__ieee754_rem_pio2f+0x12c>
 800b466:	6021      	str	r1, [r4, #0]
 800b468:	ed94 7a00 	vldr	s14, [r4]
 800b46c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b470:	2e00      	cmp	r6, #0
 800b472:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b476:	ed84 0a01 	vstr	s0, [r4, #4]
 800b47a:	daa6      	bge.n	800b3ca <__ieee754_rem_pio2f+0x66>
 800b47c:	eeb1 7a47 	vneg.f32	s14, s14
 800b480:	eeb1 0a40 	vneg.f32	s0, s0
 800b484:	ed84 7a00 	vstr	s14, [r4]
 800b488:	ed84 0a01 	vstr	s0, [r4, #4]
 800b48c:	4240      	negs	r0, r0
 800b48e:	e79c      	b.n	800b3ca <__ieee754_rem_pio2f+0x66>
 800b490:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b59c <__ieee754_rem_pio2f+0x238>
 800b494:	eef0 6a40 	vmov.f32	s13, s0
 800b498:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b49c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b4a0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b4a4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b5a4 <__ieee754_rem_pio2f+0x240>
 800b4a8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b4ac:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b4b0:	ee15 2a90 	vmov	r2, s11
 800b4b4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b4b8:	1a5b      	subs	r3, r3, r1
 800b4ba:	2b19      	cmp	r3, #25
 800b4bc:	dc04      	bgt.n	800b4c8 <__ieee754_rem_pio2f+0x164>
 800b4be:	edc4 5a00 	vstr	s11, [r4]
 800b4c2:	eeb0 0a66 	vmov.f32	s0, s13
 800b4c6:	e7cf      	b.n	800b468 <__ieee754_rem_pio2f+0x104>
 800b4c8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b5b4 <__ieee754_rem_pio2f+0x250>
 800b4cc:	eeb0 0a66 	vmov.f32	s0, s13
 800b4d0:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b4d4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b4d8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b5b8 <__ieee754_rem_pio2f+0x254>
 800b4dc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b4e0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b4e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b4e8:	ed84 7a00 	vstr	s14, [r4]
 800b4ec:	e7bc      	b.n	800b468 <__ieee754_rem_pio2f+0x104>
 800b4ee:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b4f2:	d306      	bcc.n	800b502 <__ieee754_rem_pio2f+0x19e>
 800b4f4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b4f8:	edc0 7a01 	vstr	s15, [r0, #4]
 800b4fc:	edc0 7a00 	vstr	s15, [r0]
 800b500:	e73e      	b.n	800b380 <__ieee754_rem_pio2f+0x1c>
 800b502:	15ea      	asrs	r2, r5, #23
 800b504:	3a86      	subs	r2, #134	@ 0x86
 800b506:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b50a:	ee07 3a90 	vmov	s15, r3
 800b50e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b512:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b5bc <__ieee754_rem_pio2f+0x258>
 800b516:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b51a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b51e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b522:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b526:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b52a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b52e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b532:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b536:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b53a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b542:	edcd 7a05 	vstr	s15, [sp, #20]
 800b546:	d11e      	bne.n	800b586 <__ieee754_rem_pio2f+0x222>
 800b548:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b550:	bf0c      	ite	eq
 800b552:	2301      	moveq	r3, #1
 800b554:	2302      	movne	r3, #2
 800b556:	491a      	ldr	r1, [pc, #104]	@ (800b5c0 <__ieee754_rem_pio2f+0x25c>)
 800b558:	9101      	str	r1, [sp, #4]
 800b55a:	2102      	movs	r1, #2
 800b55c:	9100      	str	r1, [sp, #0]
 800b55e:	a803      	add	r0, sp, #12
 800b560:	4621      	mov	r1, r4
 800b562:	f000 f89d 	bl	800b6a0 <__kernel_rem_pio2f>
 800b566:	2e00      	cmp	r6, #0
 800b568:	f6bf af2f 	bge.w	800b3ca <__ieee754_rem_pio2f+0x66>
 800b56c:	edd4 7a00 	vldr	s15, [r4]
 800b570:	eef1 7a67 	vneg.f32	s15, s15
 800b574:	edc4 7a00 	vstr	s15, [r4]
 800b578:	edd4 7a01 	vldr	s15, [r4, #4]
 800b57c:	eef1 7a67 	vneg.f32	s15, s15
 800b580:	edc4 7a01 	vstr	s15, [r4, #4]
 800b584:	e782      	b.n	800b48c <__ieee754_rem_pio2f+0x128>
 800b586:	2303      	movs	r3, #3
 800b588:	e7e5      	b.n	800b556 <__ieee754_rem_pio2f+0x1f2>
 800b58a:	bf00      	nop
 800b58c:	3f490fd8 	.word	0x3f490fd8
 800b590:	4016cbe3 	.word	0x4016cbe3
 800b594:	3fc90f80 	.word	0x3fc90f80
 800b598:	3fc90fd0 	.word	0x3fc90fd0
 800b59c:	37354400 	.word	0x37354400
 800b5a0:	37354443 	.word	0x37354443
 800b5a4:	2e85a308 	.word	0x2e85a308
 800b5a8:	43490f80 	.word	0x43490f80
 800b5ac:	3f22f984 	.word	0x3f22f984
 800b5b0:	0800bc50 	.word	0x0800bc50
 800b5b4:	2e85a300 	.word	0x2e85a300
 800b5b8:	248d3132 	.word	0x248d3132
 800b5bc:	43800000 	.word	0x43800000
 800b5c0:	0800bcd0 	.word	0x0800bcd0

0800b5c4 <fabsf>:
 800b5c4:	ee10 3a10 	vmov	r3, s0
 800b5c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b5cc:	ee00 3a10 	vmov	s0, r3
 800b5d0:	4770      	bx	lr
	...

0800b5d4 <scalbnf>:
 800b5d4:	ee10 3a10 	vmov	r3, s0
 800b5d8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b5dc:	d02b      	beq.n	800b636 <scalbnf+0x62>
 800b5de:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b5e2:	d302      	bcc.n	800b5ea <scalbnf+0x16>
 800b5e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b5e8:	4770      	bx	lr
 800b5ea:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b5ee:	d123      	bne.n	800b638 <scalbnf+0x64>
 800b5f0:	4b24      	ldr	r3, [pc, #144]	@ (800b684 <scalbnf+0xb0>)
 800b5f2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b688 <scalbnf+0xb4>
 800b5f6:	4298      	cmp	r0, r3
 800b5f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b5fc:	db17      	blt.n	800b62e <scalbnf+0x5a>
 800b5fe:	ee10 3a10 	vmov	r3, s0
 800b602:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b606:	3a19      	subs	r2, #25
 800b608:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b60c:	4288      	cmp	r0, r1
 800b60e:	dd15      	ble.n	800b63c <scalbnf+0x68>
 800b610:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b68c <scalbnf+0xb8>
 800b614:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b690 <scalbnf+0xbc>
 800b618:	ee10 3a10 	vmov	r3, s0
 800b61c:	eeb0 7a67 	vmov.f32	s14, s15
 800b620:	2b00      	cmp	r3, #0
 800b622:	bfb8      	it	lt
 800b624:	eef0 7a66 	vmovlt.f32	s15, s13
 800b628:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b62c:	4770      	bx	lr
 800b62e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b694 <scalbnf+0xc0>
 800b632:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b636:	4770      	bx	lr
 800b638:	0dd2      	lsrs	r2, r2, #23
 800b63a:	e7e5      	b.n	800b608 <scalbnf+0x34>
 800b63c:	4410      	add	r0, r2
 800b63e:	28fe      	cmp	r0, #254	@ 0xfe
 800b640:	dce6      	bgt.n	800b610 <scalbnf+0x3c>
 800b642:	2800      	cmp	r0, #0
 800b644:	dd06      	ble.n	800b654 <scalbnf+0x80>
 800b646:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b64a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b64e:	ee00 3a10 	vmov	s0, r3
 800b652:	4770      	bx	lr
 800b654:	f110 0f16 	cmn.w	r0, #22
 800b658:	da09      	bge.n	800b66e <scalbnf+0x9a>
 800b65a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b694 <scalbnf+0xc0>
 800b65e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b698 <scalbnf+0xc4>
 800b662:	ee10 3a10 	vmov	r3, s0
 800b666:	eeb0 7a67 	vmov.f32	s14, s15
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	e7d9      	b.n	800b622 <scalbnf+0x4e>
 800b66e:	3019      	adds	r0, #25
 800b670:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b674:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b678:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b69c <scalbnf+0xc8>
 800b67c:	ee07 3a90 	vmov	s15, r3
 800b680:	e7d7      	b.n	800b632 <scalbnf+0x5e>
 800b682:	bf00      	nop
 800b684:	ffff3cb0 	.word	0xffff3cb0
 800b688:	4c000000 	.word	0x4c000000
 800b68c:	7149f2ca 	.word	0x7149f2ca
 800b690:	f149f2ca 	.word	0xf149f2ca
 800b694:	0da24260 	.word	0x0da24260
 800b698:	8da24260 	.word	0x8da24260
 800b69c:	33000000 	.word	0x33000000

0800b6a0 <__kernel_rem_pio2f>:
 800b6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a4:	ed2d 8b04 	vpush	{d8-d9}
 800b6a8:	b0d9      	sub	sp, #356	@ 0x164
 800b6aa:	4690      	mov	r8, r2
 800b6ac:	9001      	str	r0, [sp, #4]
 800b6ae:	4ab6      	ldr	r2, [pc, #728]	@ (800b988 <__kernel_rem_pio2f+0x2e8>)
 800b6b0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b6b2:	f118 0f04 	cmn.w	r8, #4
 800b6b6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b6ba:	460f      	mov	r7, r1
 800b6bc:	f103 3bff 	add.w	fp, r3, #4294967295
 800b6c0:	db26      	blt.n	800b710 <__kernel_rem_pio2f+0x70>
 800b6c2:	f1b8 0203 	subs.w	r2, r8, #3
 800b6c6:	bf48      	it	mi
 800b6c8:	f108 0204 	addmi.w	r2, r8, #4
 800b6cc:	10d2      	asrs	r2, r2, #3
 800b6ce:	1c55      	adds	r5, r2, #1
 800b6d0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b6d2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800b998 <__kernel_rem_pio2f+0x2f8>
 800b6d6:	00e8      	lsls	r0, r5, #3
 800b6d8:	eba2 060b 	sub.w	r6, r2, fp
 800b6dc:	9002      	str	r0, [sp, #8]
 800b6de:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b6e2:	eb0a 0c0b 	add.w	ip, sl, fp
 800b6e6:	ac1c      	add	r4, sp, #112	@ 0x70
 800b6e8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	4560      	cmp	r0, ip
 800b6f0:	dd10      	ble.n	800b714 <__kernel_rem_pio2f+0x74>
 800b6f2:	a91c      	add	r1, sp, #112	@ 0x70
 800b6f4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b6f8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b6fc:	2600      	movs	r6, #0
 800b6fe:	4556      	cmp	r6, sl
 800b700:	dc24      	bgt.n	800b74c <__kernel_rem_pio2f+0xac>
 800b702:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b706:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800b998 <__kernel_rem_pio2f+0x2f8>
 800b70a:	4684      	mov	ip, r0
 800b70c:	2400      	movs	r4, #0
 800b70e:	e016      	b.n	800b73e <__kernel_rem_pio2f+0x9e>
 800b710:	2200      	movs	r2, #0
 800b712:	e7dc      	b.n	800b6ce <__kernel_rem_pio2f+0x2e>
 800b714:	42c6      	cmn	r6, r0
 800b716:	bf5d      	ittte	pl
 800b718:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b71c:	ee07 1a90 	vmovpl	s15, r1
 800b720:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b724:	eef0 7a47 	vmovmi.f32	s15, s14
 800b728:	ece4 7a01 	vstmia	r4!, {s15}
 800b72c:	3001      	adds	r0, #1
 800b72e:	e7de      	b.n	800b6ee <__kernel_rem_pio2f+0x4e>
 800b730:	ecfe 6a01 	vldmia	lr!, {s13}
 800b734:	ed3c 7a01 	vldmdb	ip!, {s14}
 800b738:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b73c:	3401      	adds	r4, #1
 800b73e:	455c      	cmp	r4, fp
 800b740:	ddf6      	ble.n	800b730 <__kernel_rem_pio2f+0x90>
 800b742:	ece9 7a01 	vstmia	r9!, {s15}
 800b746:	3601      	adds	r6, #1
 800b748:	3004      	adds	r0, #4
 800b74a:	e7d8      	b.n	800b6fe <__kernel_rem_pio2f+0x5e>
 800b74c:	a908      	add	r1, sp, #32
 800b74e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b752:	9104      	str	r1, [sp, #16]
 800b754:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b756:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800b994 <__kernel_rem_pio2f+0x2f4>
 800b75a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800b990 <__kernel_rem_pio2f+0x2f0>
 800b75e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b762:	9203      	str	r2, [sp, #12]
 800b764:	4654      	mov	r4, sl
 800b766:	00a2      	lsls	r2, r4, #2
 800b768:	9205      	str	r2, [sp, #20]
 800b76a:	aa58      	add	r2, sp, #352	@ 0x160
 800b76c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b770:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b774:	a944      	add	r1, sp, #272	@ 0x110
 800b776:	aa08      	add	r2, sp, #32
 800b778:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b77c:	4694      	mov	ip, r2
 800b77e:	4626      	mov	r6, r4
 800b780:	2e00      	cmp	r6, #0
 800b782:	dc4c      	bgt.n	800b81e <__kernel_rem_pio2f+0x17e>
 800b784:	4628      	mov	r0, r5
 800b786:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b78a:	f7ff ff23 	bl	800b5d4 <scalbnf>
 800b78e:	eeb0 8a40 	vmov.f32	s16, s0
 800b792:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b796:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b79a:	f000 f9e9 	bl	800bb70 <floorf>
 800b79e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b7a2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b7a6:	2d00      	cmp	r5, #0
 800b7a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7ac:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b7b0:	ee17 9a90 	vmov	r9, s15
 800b7b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7b8:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b7bc:	dd41      	ble.n	800b842 <__kernel_rem_pio2f+0x1a2>
 800b7be:	f104 3cff 	add.w	ip, r4, #4294967295
 800b7c2:	a908      	add	r1, sp, #32
 800b7c4:	f1c5 0e08 	rsb	lr, r5, #8
 800b7c8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b7cc:	fa46 f00e 	asr.w	r0, r6, lr
 800b7d0:	4481      	add	r9, r0
 800b7d2:	fa00 f00e 	lsl.w	r0, r0, lr
 800b7d6:	1a36      	subs	r6, r6, r0
 800b7d8:	f1c5 0007 	rsb	r0, r5, #7
 800b7dc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b7e0:	4106      	asrs	r6, r0
 800b7e2:	2e00      	cmp	r6, #0
 800b7e4:	dd3c      	ble.n	800b860 <__kernel_rem_pio2f+0x1c0>
 800b7e6:	f04f 0e00 	mov.w	lr, #0
 800b7ea:	f109 0901 	add.w	r9, r9, #1
 800b7ee:	4670      	mov	r0, lr
 800b7f0:	4574      	cmp	r4, lr
 800b7f2:	dc68      	bgt.n	800b8c6 <__kernel_rem_pio2f+0x226>
 800b7f4:	2d00      	cmp	r5, #0
 800b7f6:	dd03      	ble.n	800b800 <__kernel_rem_pio2f+0x160>
 800b7f8:	2d01      	cmp	r5, #1
 800b7fa:	d074      	beq.n	800b8e6 <__kernel_rem_pio2f+0x246>
 800b7fc:	2d02      	cmp	r5, #2
 800b7fe:	d07d      	beq.n	800b8fc <__kernel_rem_pio2f+0x25c>
 800b800:	2e02      	cmp	r6, #2
 800b802:	d12d      	bne.n	800b860 <__kernel_rem_pio2f+0x1c0>
 800b804:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b808:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b80c:	b340      	cbz	r0, 800b860 <__kernel_rem_pio2f+0x1c0>
 800b80e:	4628      	mov	r0, r5
 800b810:	9306      	str	r3, [sp, #24]
 800b812:	f7ff fedf 	bl	800b5d4 <scalbnf>
 800b816:	9b06      	ldr	r3, [sp, #24]
 800b818:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b81c:	e020      	b.n	800b860 <__kernel_rem_pio2f+0x1c0>
 800b81e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b822:	3e01      	subs	r6, #1
 800b824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b82c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b830:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b834:	ecac 0a01 	vstmia	ip!, {s0}
 800b838:	ed30 0a01 	vldmdb	r0!, {s0}
 800b83c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b840:	e79e      	b.n	800b780 <__kernel_rem_pio2f+0xe0>
 800b842:	d105      	bne.n	800b850 <__kernel_rem_pio2f+0x1b0>
 800b844:	1e60      	subs	r0, r4, #1
 800b846:	a908      	add	r1, sp, #32
 800b848:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b84c:	11f6      	asrs	r6, r6, #7
 800b84e:	e7c8      	b.n	800b7e2 <__kernel_rem_pio2f+0x142>
 800b850:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b854:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b85c:	da31      	bge.n	800b8c2 <__kernel_rem_pio2f+0x222>
 800b85e:	2600      	movs	r6, #0
 800b860:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b868:	f040 8098 	bne.w	800b99c <__kernel_rem_pio2f+0x2fc>
 800b86c:	1e60      	subs	r0, r4, #1
 800b86e:	2200      	movs	r2, #0
 800b870:	4550      	cmp	r0, sl
 800b872:	da4b      	bge.n	800b90c <__kernel_rem_pio2f+0x26c>
 800b874:	2a00      	cmp	r2, #0
 800b876:	d065      	beq.n	800b944 <__kernel_rem_pio2f+0x2a4>
 800b878:	3c01      	subs	r4, #1
 800b87a:	ab08      	add	r3, sp, #32
 800b87c:	3d08      	subs	r5, #8
 800b87e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d0f8      	beq.n	800b878 <__kernel_rem_pio2f+0x1d8>
 800b886:	4628      	mov	r0, r5
 800b888:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b88c:	f7ff fea2 	bl	800b5d4 <scalbnf>
 800b890:	1c63      	adds	r3, r4, #1
 800b892:	aa44      	add	r2, sp, #272	@ 0x110
 800b894:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800b994 <__kernel_rem_pio2f+0x2f4>
 800b898:	0099      	lsls	r1, r3, #2
 800b89a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b89e:	4623      	mov	r3, r4
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	f280 80a9 	bge.w	800b9f8 <__kernel_rem_pio2f+0x358>
 800b8a6:	4623      	mov	r3, r4
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f2c0 80c7 	blt.w	800ba3c <__kernel_rem_pio2f+0x39c>
 800b8ae:	aa44      	add	r2, sp, #272	@ 0x110
 800b8b0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b8b4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800b98c <__kernel_rem_pio2f+0x2ec>
 800b8b8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800b998 <__kernel_rem_pio2f+0x2f8>
 800b8bc:	2000      	movs	r0, #0
 800b8be:	1ae2      	subs	r2, r4, r3
 800b8c0:	e0b1      	b.n	800ba26 <__kernel_rem_pio2f+0x386>
 800b8c2:	2602      	movs	r6, #2
 800b8c4:	e78f      	b.n	800b7e6 <__kernel_rem_pio2f+0x146>
 800b8c6:	f852 1b04 	ldr.w	r1, [r2], #4
 800b8ca:	b948      	cbnz	r0, 800b8e0 <__kernel_rem_pio2f+0x240>
 800b8cc:	b121      	cbz	r1, 800b8d8 <__kernel_rem_pio2f+0x238>
 800b8ce:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b8d2:	f842 1c04 	str.w	r1, [r2, #-4]
 800b8d6:	2101      	movs	r1, #1
 800b8d8:	f10e 0e01 	add.w	lr, lr, #1
 800b8dc:	4608      	mov	r0, r1
 800b8de:	e787      	b.n	800b7f0 <__kernel_rem_pio2f+0x150>
 800b8e0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b8e4:	e7f5      	b.n	800b8d2 <__kernel_rem_pio2f+0x232>
 800b8e6:	f104 3cff 	add.w	ip, r4, #4294967295
 800b8ea:	aa08      	add	r2, sp, #32
 800b8ec:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b8f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b8f4:	a908      	add	r1, sp, #32
 800b8f6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b8fa:	e781      	b.n	800b800 <__kernel_rem_pio2f+0x160>
 800b8fc:	f104 3cff 	add.w	ip, r4, #4294967295
 800b900:	aa08      	add	r2, sp, #32
 800b902:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b906:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b90a:	e7f3      	b.n	800b8f4 <__kernel_rem_pio2f+0x254>
 800b90c:	a908      	add	r1, sp, #32
 800b90e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b912:	3801      	subs	r0, #1
 800b914:	430a      	orrs	r2, r1
 800b916:	e7ab      	b.n	800b870 <__kernel_rem_pio2f+0x1d0>
 800b918:	3201      	adds	r2, #1
 800b91a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b91e:	2e00      	cmp	r6, #0
 800b920:	d0fa      	beq.n	800b918 <__kernel_rem_pio2f+0x278>
 800b922:	9905      	ldr	r1, [sp, #20]
 800b924:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b928:	eb0d 0001 	add.w	r0, sp, r1
 800b92c:	18e6      	adds	r6, r4, r3
 800b92e:	a91c      	add	r1, sp, #112	@ 0x70
 800b930:	f104 0c01 	add.w	ip, r4, #1
 800b934:	384c      	subs	r0, #76	@ 0x4c
 800b936:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800b93a:	4422      	add	r2, r4
 800b93c:	4562      	cmp	r2, ip
 800b93e:	da04      	bge.n	800b94a <__kernel_rem_pio2f+0x2aa>
 800b940:	4614      	mov	r4, r2
 800b942:	e710      	b.n	800b766 <__kernel_rem_pio2f+0xc6>
 800b944:	9804      	ldr	r0, [sp, #16]
 800b946:	2201      	movs	r2, #1
 800b948:	e7e7      	b.n	800b91a <__kernel_rem_pio2f+0x27a>
 800b94a:	9903      	ldr	r1, [sp, #12]
 800b94c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b950:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800b954:	9105      	str	r1, [sp, #20]
 800b956:	ee07 1a90 	vmov	s15, r1
 800b95a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b95e:	2400      	movs	r4, #0
 800b960:	ece6 7a01 	vstmia	r6!, {s15}
 800b964:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800b998 <__kernel_rem_pio2f+0x2f8>
 800b968:	46b1      	mov	r9, r6
 800b96a:	455c      	cmp	r4, fp
 800b96c:	dd04      	ble.n	800b978 <__kernel_rem_pio2f+0x2d8>
 800b96e:	ece0 7a01 	vstmia	r0!, {s15}
 800b972:	f10c 0c01 	add.w	ip, ip, #1
 800b976:	e7e1      	b.n	800b93c <__kernel_rem_pio2f+0x29c>
 800b978:	ecfe 6a01 	vldmia	lr!, {s13}
 800b97c:	ed39 7a01 	vldmdb	r9!, {s14}
 800b980:	3401      	adds	r4, #1
 800b982:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b986:	e7f0      	b.n	800b96a <__kernel_rem_pio2f+0x2ca>
 800b988:	0800c014 	.word	0x0800c014
 800b98c:	0800bfe8 	.word	0x0800bfe8
 800b990:	43800000 	.word	0x43800000
 800b994:	3b800000 	.word	0x3b800000
 800b998:	00000000 	.word	0x00000000
 800b99c:	9b02      	ldr	r3, [sp, #8]
 800b99e:	eeb0 0a48 	vmov.f32	s0, s16
 800b9a2:	eba3 0008 	sub.w	r0, r3, r8
 800b9a6:	f7ff fe15 	bl	800b5d4 <scalbnf>
 800b9aa:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800b990 <__kernel_rem_pio2f+0x2f0>
 800b9ae:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9b6:	db19      	blt.n	800b9ec <__kernel_rem_pio2f+0x34c>
 800b9b8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800b994 <__kernel_rem_pio2f+0x2f4>
 800b9bc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b9c0:	aa08      	add	r2, sp, #32
 800b9c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9c6:	3508      	adds	r5, #8
 800b9c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9cc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b9d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b9d8:	ee10 3a10 	vmov	r3, s0
 800b9dc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b9e0:	ee17 3a90 	vmov	r3, s15
 800b9e4:	3401      	adds	r4, #1
 800b9e6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b9ea:	e74c      	b.n	800b886 <__kernel_rem_pio2f+0x1e6>
 800b9ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b9f0:	aa08      	add	r2, sp, #32
 800b9f2:	ee10 3a10 	vmov	r3, s0
 800b9f6:	e7f6      	b.n	800b9e6 <__kernel_rem_pio2f+0x346>
 800b9f8:	a808      	add	r0, sp, #32
 800b9fa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800b9fe:	9001      	str	r0, [sp, #4]
 800ba00:	ee07 0a90 	vmov	s15, r0
 800ba04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ba0e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ba12:	ed62 7a01 	vstmdb	r2!, {s15}
 800ba16:	e743      	b.n	800b8a0 <__kernel_rem_pio2f+0x200>
 800ba18:	ecfc 6a01 	vldmia	ip!, {s13}
 800ba1c:	ecb5 7a01 	vldmia	r5!, {s14}
 800ba20:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ba24:	3001      	adds	r0, #1
 800ba26:	4550      	cmp	r0, sl
 800ba28:	dc01      	bgt.n	800ba2e <__kernel_rem_pio2f+0x38e>
 800ba2a:	4290      	cmp	r0, r2
 800ba2c:	ddf4      	ble.n	800ba18 <__kernel_rem_pio2f+0x378>
 800ba2e:	a858      	add	r0, sp, #352	@ 0x160
 800ba30:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ba34:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	e735      	b.n	800b8a8 <__kernel_rem_pio2f+0x208>
 800ba3c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	dc09      	bgt.n	800ba56 <__kernel_rem_pio2f+0x3b6>
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	dc27      	bgt.n	800ba96 <__kernel_rem_pio2f+0x3f6>
 800ba46:	d040      	beq.n	800baca <__kernel_rem_pio2f+0x42a>
 800ba48:	f009 0007 	and.w	r0, r9, #7
 800ba4c:	b059      	add	sp, #356	@ 0x164
 800ba4e:	ecbd 8b04 	vpop	{d8-d9}
 800ba52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba56:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ba58:	2b03      	cmp	r3, #3
 800ba5a:	d1f5      	bne.n	800ba48 <__kernel_rem_pio2f+0x3a8>
 800ba5c:	aa30      	add	r2, sp, #192	@ 0xc0
 800ba5e:	1f0b      	subs	r3, r1, #4
 800ba60:	4413      	add	r3, r2
 800ba62:	461a      	mov	r2, r3
 800ba64:	4620      	mov	r0, r4
 800ba66:	2800      	cmp	r0, #0
 800ba68:	dc50      	bgt.n	800bb0c <__kernel_rem_pio2f+0x46c>
 800ba6a:	4622      	mov	r2, r4
 800ba6c:	2a01      	cmp	r2, #1
 800ba6e:	dc5d      	bgt.n	800bb2c <__kernel_rem_pio2f+0x48c>
 800ba70:	ab30      	add	r3, sp, #192	@ 0xc0
 800ba72:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800b998 <__kernel_rem_pio2f+0x2f8>
 800ba76:	440b      	add	r3, r1
 800ba78:	2c01      	cmp	r4, #1
 800ba7a:	dc67      	bgt.n	800bb4c <__kernel_rem_pio2f+0x4ac>
 800ba7c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800ba80:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800ba84:	2e00      	cmp	r6, #0
 800ba86:	d167      	bne.n	800bb58 <__kernel_rem_pio2f+0x4b8>
 800ba88:	edc7 6a00 	vstr	s13, [r7]
 800ba8c:	ed87 7a01 	vstr	s14, [r7, #4]
 800ba90:	edc7 7a02 	vstr	s15, [r7, #8]
 800ba94:	e7d8      	b.n	800ba48 <__kernel_rem_pio2f+0x3a8>
 800ba96:	ab30      	add	r3, sp, #192	@ 0xc0
 800ba98:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800b998 <__kernel_rem_pio2f+0x2f8>
 800ba9c:	440b      	add	r3, r1
 800ba9e:	4622      	mov	r2, r4
 800baa0:	2a00      	cmp	r2, #0
 800baa2:	da24      	bge.n	800baee <__kernel_rem_pio2f+0x44e>
 800baa4:	b34e      	cbz	r6, 800bafa <__kernel_rem_pio2f+0x45a>
 800baa6:	eef1 7a47 	vneg.f32	s15, s14
 800baaa:	edc7 7a00 	vstr	s15, [r7]
 800baae:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800bab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bab6:	aa31      	add	r2, sp, #196	@ 0xc4
 800bab8:	2301      	movs	r3, #1
 800baba:	429c      	cmp	r4, r3
 800babc:	da20      	bge.n	800bb00 <__kernel_rem_pio2f+0x460>
 800babe:	b10e      	cbz	r6, 800bac4 <__kernel_rem_pio2f+0x424>
 800bac0:	eef1 7a67 	vneg.f32	s15, s15
 800bac4:	edc7 7a01 	vstr	s15, [r7, #4]
 800bac8:	e7be      	b.n	800ba48 <__kernel_rem_pio2f+0x3a8>
 800baca:	ab30      	add	r3, sp, #192	@ 0xc0
 800bacc:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800b998 <__kernel_rem_pio2f+0x2f8>
 800bad0:	440b      	add	r3, r1
 800bad2:	2c00      	cmp	r4, #0
 800bad4:	da05      	bge.n	800bae2 <__kernel_rem_pio2f+0x442>
 800bad6:	b10e      	cbz	r6, 800badc <__kernel_rem_pio2f+0x43c>
 800bad8:	eef1 7a67 	vneg.f32	s15, s15
 800badc:	edc7 7a00 	vstr	s15, [r7]
 800bae0:	e7b2      	b.n	800ba48 <__kernel_rem_pio2f+0x3a8>
 800bae2:	ed33 7a01 	vldmdb	r3!, {s14}
 800bae6:	3c01      	subs	r4, #1
 800bae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800baec:	e7f1      	b.n	800bad2 <__kernel_rem_pio2f+0x432>
 800baee:	ed73 7a01 	vldmdb	r3!, {s15}
 800baf2:	3a01      	subs	r2, #1
 800baf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800baf8:	e7d2      	b.n	800baa0 <__kernel_rem_pio2f+0x400>
 800bafa:	eef0 7a47 	vmov.f32	s15, s14
 800bafe:	e7d4      	b.n	800baaa <__kernel_rem_pio2f+0x40a>
 800bb00:	ecb2 7a01 	vldmia	r2!, {s14}
 800bb04:	3301      	adds	r3, #1
 800bb06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb0a:	e7d6      	b.n	800baba <__kernel_rem_pio2f+0x41a>
 800bb0c:	ed72 7a01 	vldmdb	r2!, {s15}
 800bb10:	edd2 6a01 	vldr	s13, [r2, #4]
 800bb14:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb18:	3801      	subs	r0, #1
 800bb1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb1e:	ed82 7a00 	vstr	s14, [r2]
 800bb22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb26:	edc2 7a01 	vstr	s15, [r2, #4]
 800bb2a:	e79c      	b.n	800ba66 <__kernel_rem_pio2f+0x3c6>
 800bb2c:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb30:	edd3 6a01 	vldr	s13, [r3, #4]
 800bb34:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb38:	3a01      	subs	r2, #1
 800bb3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb3e:	ed83 7a00 	vstr	s14, [r3]
 800bb42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb46:	edc3 7a01 	vstr	s15, [r3, #4]
 800bb4a:	e78f      	b.n	800ba6c <__kernel_rem_pio2f+0x3cc>
 800bb4c:	ed33 7a01 	vldmdb	r3!, {s14}
 800bb50:	3c01      	subs	r4, #1
 800bb52:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb56:	e78f      	b.n	800ba78 <__kernel_rem_pio2f+0x3d8>
 800bb58:	eef1 6a66 	vneg.f32	s13, s13
 800bb5c:	eeb1 7a47 	vneg.f32	s14, s14
 800bb60:	edc7 6a00 	vstr	s13, [r7]
 800bb64:	ed87 7a01 	vstr	s14, [r7, #4]
 800bb68:	eef1 7a67 	vneg.f32	s15, s15
 800bb6c:	e790      	b.n	800ba90 <__kernel_rem_pio2f+0x3f0>
 800bb6e:	bf00      	nop

0800bb70 <floorf>:
 800bb70:	ee10 3a10 	vmov	r3, s0
 800bb74:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bb78:	3a7f      	subs	r2, #127	@ 0x7f
 800bb7a:	2a16      	cmp	r2, #22
 800bb7c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bb80:	dc2b      	bgt.n	800bbda <floorf+0x6a>
 800bb82:	2a00      	cmp	r2, #0
 800bb84:	da12      	bge.n	800bbac <floorf+0x3c>
 800bb86:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bbec <floorf+0x7c>
 800bb8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bb8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb96:	dd06      	ble.n	800bba6 <floorf+0x36>
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	da24      	bge.n	800bbe6 <floorf+0x76>
 800bb9c:	2900      	cmp	r1, #0
 800bb9e:	4b14      	ldr	r3, [pc, #80]	@ (800bbf0 <floorf+0x80>)
 800bba0:	bf08      	it	eq
 800bba2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bba6:	ee00 3a10 	vmov	s0, r3
 800bbaa:	4770      	bx	lr
 800bbac:	4911      	ldr	r1, [pc, #68]	@ (800bbf4 <floorf+0x84>)
 800bbae:	4111      	asrs	r1, r2
 800bbb0:	420b      	tst	r3, r1
 800bbb2:	d0fa      	beq.n	800bbaa <floorf+0x3a>
 800bbb4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bbec <floorf+0x7c>
 800bbb8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bbbc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bbc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbc4:	ddef      	ble.n	800bba6 <floorf+0x36>
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	bfbe      	ittt	lt
 800bbca:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bbce:	fa40 f202 	asrlt.w	r2, r0, r2
 800bbd2:	189b      	addlt	r3, r3, r2
 800bbd4:	ea23 0301 	bic.w	r3, r3, r1
 800bbd8:	e7e5      	b.n	800bba6 <floorf+0x36>
 800bbda:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bbde:	d3e4      	bcc.n	800bbaa <floorf+0x3a>
 800bbe0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bbe4:	4770      	bx	lr
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	e7dd      	b.n	800bba6 <floorf+0x36>
 800bbea:	bf00      	nop
 800bbec:	7149f2ca 	.word	0x7149f2ca
 800bbf0:	bf800000 	.word	0xbf800000
 800bbf4:	007fffff 	.word	0x007fffff

0800bbf8 <_init>:
 800bbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbfa:	bf00      	nop
 800bbfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbfe:	bc08      	pop	{r3}
 800bc00:	469e      	mov	lr, r3
 800bc02:	4770      	bx	lr

0800bc04 <_fini>:
 800bc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc06:	bf00      	nop
 800bc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc0a:	bc08      	pop	{r3}
 800bc0c:	469e      	mov	lr, r3
 800bc0e:	4770      	bx	lr
