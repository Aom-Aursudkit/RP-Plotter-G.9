
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000795c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08007b34  08007b34  00008b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f14  08007f14  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  08007f14  08007f14  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f14  08007f14  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f14  08007f14  00008f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f18  08007f18  00008f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007f1c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000010  08007f28  00009010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08007f28  000093fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccee  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd6  00000000  00000000  00015d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00017a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a40  00000000  00000000  00018730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e75  00000000  00000000  00019170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e34d  00000000  00000000  0003efe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7864  00000000  00000000  0004d332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144b96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b48  00000000  00000000  00144bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  00148724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007b1c 	.word	0x08007b1c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08007b1c 	.word	0x08007b1c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	@ 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c24:	d2ed      	bcs.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d84:	ed2d 8b02 	vpush	{d8}
 8000d88:	b0a7      	sub	sp, #156	@ 0x9c
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8c:	f002 fe13 	bl	80039b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d90:	f001 faa6 	bl	80022e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d94:	f001 fe50 	bl	8002a38 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000d98:	f001 fc4a 	bl	8002630 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d9c:	f001 fc9e 	bl	80026dc <MX_TIM5_Init>
  MX_TIM3_Init();
 8000da0:	f001 fbf0 	bl	8002584 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000da4:	f001 fce8 	bl	8002778 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000da8:	f001 fda2 	bl	80028f0 <MX_TIM15_Init>
  MX_TIM1_Init();
 8000dac:	f001 fae4 	bl	8002378 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000db0:	f001 fb68 	bl	8002484 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000db4:	48b8      	ldr	r0, [pc, #736]	@ (8001098 <main+0x318>)
 8000db6:	f003 ff4b 	bl	8004c50 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	48b6      	ldr	r0, [pc, #728]	@ (8001098 <main+0x318>)
 8000dbe:	f004 f9fb 	bl	80051b8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	48b4      	ldr	r0, [pc, #720]	@ (8001098 <main+0x318>)
 8000dc6:	f004 f9f7 	bl	80051b8 <HAL_TIM_IC_Start>
  HAL_TIM_Base_Start(&htim2);
 8000dca:	48b4      	ldr	r0, [pc, #720]	@ (800109c <main+0x31c>)
 8000dcc:	f003 ff40 	bl	8004c50 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	48b2      	ldr	r0, [pc, #712]	@ (800109c <main+0x31c>)
 8000dd4:	f004 f9f0 	bl	80051b8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000dd8:	2104      	movs	r1, #4
 8000dda:	48b0      	ldr	r0, [pc, #704]	@ (800109c <main+0x31c>)
 8000ddc:	f004 f9ec 	bl	80051b8 <HAL_TIM_IC_Start>

  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000de0:	213c      	movs	r1, #60	@ 0x3c
 8000de2:	48af      	ldr	r0, [pc, #700]	@ (80010a0 <main+0x320>)
 8000de4:	f004 fb92 	bl	800550c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8000de8:	213c      	movs	r1, #60	@ 0x3c
 8000dea:	48ae      	ldr	r0, [pc, #696]	@ (80010a4 <main+0x324>)
 8000dec:	f004 fb8e 	bl	800550c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000df0:	48ad      	ldr	r0, [pc, #692]	@ (80010a8 <main+0x328>)
 8000df2:	f003 ff9d 	bl	8004d30 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim8);
 8000df6:	48ad      	ldr	r0, [pc, #692]	@ (80010ac <main+0x32c>)
 8000df8:	f003 ff2a 	bl	8004c50 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	48ab      	ldr	r0, [pc, #684]	@ (80010ac <main+0x32c>)
 8000e00:	f004 f870 	bl	8004ee4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000e04:	210c      	movs	r1, #12
 8000e06:	48a9      	ldr	r0, [pc, #676]	@ (80010ac <main+0x32c>)
 8000e08:	f004 f86c 	bl	8004ee4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim15);
 8000e0c:	48a8      	ldr	r0, [pc, #672]	@ (80010b0 <main+0x330>)
 8000e0e:	f003 ff1f 	bl	8004c50 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000e12:	2100      	movs	r1, #0
 8000e14:	48a6      	ldr	r0, [pc, #664]	@ (80010b0 <main+0x330>)
 8000e16:	f004 f865 	bl	8004ee4 <HAL_TIM_PWM_Start>
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
  DWT_Init();
 8000e1a:	f001 ff37 	bl	8002c8c <DWT_Init>

  PID.Kp =0.1;
 8000e1e:	4aa5      	ldr	r2, [pc, #660]	@ (80010b4 <main+0x334>)
 8000e20:	4ba5      	ldr	r3, [pc, #660]	@ (80010b8 <main+0x338>)
 8000e22:	6193      	str	r3, [r2, #24]
  PID.Ki =0.00001;
 8000e24:	4aa3      	ldr	r2, [pc, #652]	@ (80010b4 <main+0x334>)
 8000e26:	4ba5      	ldr	r3, [pc, #660]	@ (80010bc <main+0x33c>)
 8000e28:	61d3      	str	r3, [r2, #28]
  PID.Kd = 0.1;
 8000e2a:	4aa2      	ldr	r2, [pc, #648]	@ (80010b4 <main+0x334>)
 8000e2c:	4ba2      	ldr	r3, [pc, #648]	@ (80010b8 <main+0x338>)
 8000e2e:	6213      	str	r3, [r2, #32]
  arm_pid_init_f32(&PID, 0);
 8000e30:	2100      	movs	r1, #0
 8000e32:	48a0      	ldr	r0, [pc, #640]	@ (80010b4 <main+0x334>)
 8000e34:	f006 f892 	bl	8006f5c <arm_pid_init_f32>

  Reset_R();
 8000e38:	f002 fb0e 	bl	8003458 <Reset_R>
  Reset_P();
 8000e3c:	f002 fb1c 	bl	8003478 <Reset_P>
  calibState = CALIB_IDLE;
 8000e40:	4a9f      	ldr	r2, [pc, #636]	@ (80010c0 <main+0x340>)
 8000e42:	2300      	movs	r3, #0
 8000e44:	7013      	strb	r3, [r2, #0]

  Set_Servo(0);
 8000e46:	2000      	movs	r0, #0
 8000e48:	f002 fadc 	bl	8003404 <Set_Servo>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8000e4c:	4b95      	ldr	r3, [pc, #596]	@ (80010a4 <main+0x324>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e52:	4b9c      	ldr	r3, [pc, #624]	@ (80010c4 <main+0x344>)
 8000e54:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8000e56:	4b92      	ldr	r3, [pc, #584]	@ (80010a0 <main+0x320>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e5c:	4b9a      	ldr	r3, [pc, #616]	@ (80010c8 <main+0x348>)
 8000e5e:	601a      	str	r2, [r3, #0]
		//Call every 0.01 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 8000e60:	f001 fff4 	bl	8002e4c <micros>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
		if (currentTime > timestamp) {
 8000e6c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8000e70:	4b96      	ldr	r3, [pc, #600]	@ (80010cc <main+0x34c>)
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	4282      	cmp	r2, r0
 8000e78:	418b      	sbcs	r3, r1
 8000e7a:	d211      	bcs.n	8000ea0 <main+0x120>
			timestamp = currentTime + 10000;//us
 8000e7c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8000e80:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000e84:	1851      	adds	r1, r2, r1
 8000e86:	6639      	str	r1, [r7, #96]	@ 0x60
 8000e88:	f143 0300 	adc.w	r3, r3, #0
 8000e8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8000e8e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8000e92:	4b8e      	ldr	r3, [pc, #568]	@ (80010cc <main+0x34c>)
 8000e94:	e9c3 0100 	strd	r0, r1, [r3]
			Prismatic_PosVel_Update();
 8000e98:	f002 f98c 	bl	80031b4 <Prismatic_PosVel_Update>
			Revolute_PosVel_Update();
 8000e9c:	f002 f8bc 	bl	8003018 <Revolute_PosVel_Update>
		}
		//Call every 0.1 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 8000ea0:	f001 ffd4 	bl	8002e4c <micros>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		if (currentTime1 > timestamp1) {
 8000eac:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8000eb0:	4b87      	ldr	r3, [pc, #540]	@ (80010d0 <main+0x350>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	4282      	cmp	r2, r0
 8000eb8:	418b      	sbcs	r3, r1
 8000eba:	d20c      	bcs.n	8000ed6 <main+0x156>
			timestamp1 = currentTime1 + 100000;//us
 8000ebc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8000ec0:	4984      	ldr	r1, [pc, #528]	@ (80010d4 <main+0x354>)
 8000ec2:	1851      	adds	r1, r2, r1
 8000ec4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8000ec6:	f143 0300 	adc.w	r3, r3, #0
 8000eca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ecc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8000ed0:	4b7f      	ldr	r3, [pc, #508]	@ (80010d0 <main+0x350>)
 8000ed2:	e9c3 0100 	strd	r0, r1, [r3]

		}
		End_x = Prismatic_QEIdata.mmPosition * cosf(Revolute_QEIdata.RadPosition*-1);
 8000ed6:	4b80      	ldr	r3, [pc, #512]	@ (80010d8 <main+0x358>)
 8000ed8:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
 8000edc:	4b7f      	ldr	r3, [pc, #508]	@ (80010dc <main+0x35c>)
 8000ede:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000ee2:	eef1 7a67 	vneg.f32	s15, s15
 8000ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eea:	f006 f899 	bl	8007020 <cosf>
 8000eee:	eef0 7a40 	vmov.f32	s15, s0
 8000ef2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000ef6:	4b7a      	ldr	r3, [pc, #488]	@ (80010e0 <main+0x360>)
 8000ef8:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition * sinf(Revolute_QEIdata.RadPosition);
 8000efc:	4b76      	ldr	r3, [pc, #472]	@ (80010d8 <main+0x358>)
 8000efe:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
 8000f02:	4b76      	ldr	r3, [pc, #472]	@ (80010dc <main+0x35c>)
 8000f04:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f08:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0c:	f006 f8cc 	bl	80070a8 <sinf>
 8000f10:	eef0 7a40 	vmov.f32	s15, s0
 8000f14:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000f18:	4b72      	ldr	r3, [pc, #456]	@ (80010e4 <main+0x364>)
 8000f1a:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////


		//////////////////////// <<RECEIVER>> ////////////////////////
		Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8000f1e:	4b5f      	ldr	r3, [pc, #380]	@ (800109c <main+0x31c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b70      	ldr	r3, [pc, #448]	@ (80010e8 <main+0x368>)
 8000f28:	601a      	str	r2, [r3, #0]
		Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8000f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8001098 <main+0x318>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b6d      	ldr	r3, [pc, #436]	@ (80010e8 <main+0x368>)
 8000f34:	605a      	str	r2, [r3, #4]
		float RX_temp = map(__HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_2) - 1500.00,
 8000f36:	4b59      	ldr	r3, [pc, #356]	@ (800109c <main+0x31c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff faad 	bl	800049c <__aeabi_ui2d>
 8000f42:	a351      	add	r3, pc, #324	@ (adr r3, 8001088 <main+0x308>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff f96a 	bl	8000220 <__aeabi_dsub>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fdb6 	bl	8000ac4 <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	ed9f 2a64 	vldr	s4, [pc, #400]	@ 80010ec <main+0x36c>
 8000f5e:	eddf 1a64 	vldr	s3, [pc, #400]	@ 80010f0 <main+0x370>
 8000f62:	ed9f 1a64 	vldr	s2, [pc, #400]	@ 80010f4 <main+0x374>
 8000f66:	eddf 0a64 	vldr	s1, [pc, #400]	@ 80010f8 <main+0x378>
 8000f6a:	ee00 3a10 	vmov	s0, r3
 8000f6e:	f001 fe5f 	bl	8002c30 <map>
 8000f72:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
				-500.00, 500.00, -100.00, 100.00);
		float RY_temp = map(__HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1) - 18530.00,
 8000f76:	4b48      	ldr	r3, [pc, #288]	@ (8001098 <main+0x318>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa8d 	bl	800049c <__aeabi_ui2d>
 8000f82:	a343      	add	r3, pc, #268	@ (adr r3, 8001090 <main+0x310>)
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	f7ff f94a 	bl	8000220 <__aeabi_dsub>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f7ff fd96 	bl	8000ac4 <__aeabi_d2f>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 80010ec <main+0x36c>
 8000f9e:	eddf 1a54 	vldr	s3, [pc, #336]	@ 80010f0 <main+0x370>
 8000fa2:	ed9f 1a54 	vldr	s2, [pc, #336]	@ 80010f4 <main+0x374>
 8000fa6:	eddf 0a54 	vldr	s1, [pc, #336]	@ 80010f8 <main+0x378>
 8000faa:	ee00 3a10 	vmov	s0, r3
 8000fae:	f001 fe3f 	bl	8002c30 <map>
 8000fb2:	ed87 0a20 	vstr	s0, [r7, #128]	@ 0x80
				-500.00, 500.00, -100.00, 100.00);

		if(RX_temp >= -4 && RX_temp <= 4) Receiver[0] = 0.00;
 8000fb6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8000fba:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8000fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc6:	db0d      	blt.n	8000fe4 <main+0x264>
 8000fc8:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8000fcc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	d804      	bhi.n	8000fe4 <main+0x264>
 8000fda:	4a48      	ldr	r2, [pc, #288]	@ (80010fc <main+0x37c>)
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e01d      	b.n	8001020 <main+0x2a0>
		else if(RX_temp > 100) Receiver[0] = 100.00;
 8000fe4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8000fe8:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80010ec <main+0x36c>
 8000fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff4:	dd03      	ble.n	8000ffe <main+0x27e>
 8000ff6:	4a41      	ldr	r2, [pc, #260]	@ (80010fc <main+0x37c>)
 8000ff8:	4b41      	ldr	r3, [pc, #260]	@ (8001100 <main+0x380>)
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	e010      	b.n	8001020 <main+0x2a0>
		else if(RX_temp < -100) Receiver[0] = -100.00;
 8000ffe:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001002:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80010f0 <main+0x370>
 8001006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100e:	d503      	bpl.n	8001018 <main+0x298>
 8001010:	4a3a      	ldr	r2, [pc, #232]	@ (80010fc <main+0x37c>)
 8001012:	4b3c      	ldr	r3, [pc, #240]	@ (8001104 <main+0x384>)
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e003      	b.n	8001020 <main+0x2a0>
		else Receiver[0] = RX_temp;
 8001018:	4a38      	ldr	r2, [pc, #224]	@ (80010fc <main+0x37c>)
 800101a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800101e:	6013      	str	r3, [r2, #0]
		if(RY_temp >= -4 && RY_temp <= 4) Receiver[1] = 0.00;
 8001020:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001024:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8001028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	db0d      	blt.n	800104e <main+0x2ce>
 8001032:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001036:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800103a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800103e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001042:	d804      	bhi.n	800104e <main+0x2ce>
 8001044:	4a2d      	ldr	r2, [pc, #180]	@ (80010fc <main+0x37c>)
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	6053      	str	r3, [r2, #4]
 800104c:	e060      	b.n	8001110 <main+0x390>
		else if(RY_temp > 100) Receiver[1] = 100.00;
 800104e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001052:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80010ec <main+0x36c>
 8001056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	dd03      	ble.n	8001068 <main+0x2e8>
 8001060:	4a26      	ldr	r2, [pc, #152]	@ (80010fc <main+0x37c>)
 8001062:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <main+0x380>)
 8001064:	6053      	str	r3, [r2, #4]
 8001066:	e053      	b.n	8001110 <main+0x390>
		else if(RY_temp < -100) Receiver[1] = -100.00;
 8001068:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800106c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80010f0 <main+0x370>
 8001070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001078:	d546      	bpl.n	8001108 <main+0x388>
 800107a:	4a20      	ldr	r2, [pc, #128]	@ (80010fc <main+0x37c>)
 800107c:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <main+0x384>)
 800107e:	6053      	str	r3, [r2, #4]
 8001080:	e046      	b.n	8001110 <main+0x390>
 8001082:	bf00      	nop
 8001084:	f3af 8000 	nop.w
 8001088:	00000000 	.word	0x00000000
 800108c:	40977000 	.word	0x40977000
 8001090:	00000000 	.word	0x00000000
 8001094:	40d21880 	.word	0x40d21880
 8001098:	2000002c 	.word	0x2000002c
 800109c:	20000078 	.word	0x20000078
 80010a0:	200000c4 	.word	0x200000c4
 80010a4:	20000110 	.word	0x20000110
 80010a8:	2000015c 	.word	0x2000015c
 80010ac:	200001a8 	.word	0x200001a8
 80010b0:	200001f4 	.word	0x200001f4
 80010b4:	20000358 	.word	0x20000358
 80010b8:	3dcccccd 	.word	0x3dcccccd
 80010bc:	3727c5ac 	.word	0x3727c5ac
 80010c0:	2000039c 	.word	0x2000039c
 80010c4:	20000288 	.word	0x20000288
 80010c8:	2000028c 	.word	0x2000028c
 80010cc:	200003c0 	.word	0x200003c0
 80010d0:	200003c8 	.word	0x200003c8
 80010d4:	000186a0 	.word	0x000186a0
 80010d8:	200002d0 	.word	0x200002d0
 80010dc:	20000290 	.word	0x20000290
 80010e0:	20000310 	.word	0x20000310
 80010e4:	20000314 	.word	0x20000314
 80010e8:	2000025c 	.word	0x2000025c
 80010ec:	42c80000 	.word	0x42c80000
 80010f0:	c2c80000 	.word	0xc2c80000
 80010f4:	43fa0000 	.word	0x43fa0000
 80010f8:	c3fa0000 	.word	0xc3fa0000
 80010fc:	20000248 	.word	0x20000248
 8001100:	42c80000 	.word	0x42c80000
 8001104:	c2c80000 	.word	0xc2c80000
		else Receiver[1] = RY_temp;
 8001108:	4ab5      	ldr	r2, [pc, #724]	@ (80013e0 <main+0x660>)
 800110a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800110e:	6053      	str	r3, [r2, #4]

		Receiver[2] = map((float)pulse_width_us[0] - 1500.00, -500.00, 500.00, -100.00, 100.00);
 8001110:	4bb4      	ldr	r3, [pc, #720]	@ (80013e4 <main+0x664>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800111c:	ee17 0a90 	vmov	r0, s15
 8001120:	f7ff f9de 	bl	80004e0 <__aeabi_f2d>
 8001124:	a3ac      	add	r3, pc, #688	@ (adr r3, 80013d8 <main+0x658>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff f879 	bl	8000220 <__aeabi_dsub>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fcc5 	bl	8000ac4 <__aeabi_d2f>
 800113a:	4603      	mov	r3, r0
 800113c:	ed9f 2aaa 	vldr	s4, [pc, #680]	@ 80013e8 <main+0x668>
 8001140:	eddf 1aaa 	vldr	s3, [pc, #680]	@ 80013ec <main+0x66c>
 8001144:	ed9f 1aaa 	vldr	s2, [pc, #680]	@ 80013f0 <main+0x670>
 8001148:	eddf 0aaa 	vldr	s1, [pc, #680]	@ 80013f4 <main+0x674>
 800114c:	ee00 3a10 	vmov	s0, r3
 8001150:	f001 fd6e 	bl	8002c30 <map>
 8001154:	eef0 7a40 	vmov.f32	s15, s0
 8001158:	4ba1      	ldr	r3, [pc, #644]	@ (80013e0 <main+0x660>)
 800115a:	edc3 7a02 	vstr	s15, [r3, #8]
		Receiver[3] = map((float)pulse_width_us[1] - 1500.00, -500.00, 500.00, -100.00, 100.00);
 800115e:	4ba1      	ldr	r3, [pc, #644]	@ (80013e4 <main+0x664>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800116a:	ee17 0a90 	vmov	r0, s15
 800116e:	f7ff f9b7 	bl	80004e0 <__aeabi_f2d>
 8001172:	a399      	add	r3, pc, #612	@ (adr r3, 80013d8 <main+0x658>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff f852 	bl	8000220 <__aeabi_dsub>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f7ff fc9e 	bl	8000ac4 <__aeabi_d2f>
 8001188:	4603      	mov	r3, r0
 800118a:	ed9f 2a97 	vldr	s4, [pc, #604]	@ 80013e8 <main+0x668>
 800118e:	eddf 1a97 	vldr	s3, [pc, #604]	@ 80013ec <main+0x66c>
 8001192:	ed9f 1a97 	vldr	s2, [pc, #604]	@ 80013f0 <main+0x670>
 8001196:	eddf 0a97 	vldr	s1, [pc, #604]	@ 80013f4 <main+0x674>
 800119a:	ee00 3a10 	vmov	s0, r3
 800119e:	f001 fd47 	bl	8002c30 <map>
 80011a2:	eef0 7a40 	vmov.f32	s15, s0
 80011a6:	4b8e      	ldr	r3, [pc, #568]	@ (80013e0 <main+0x660>)
 80011a8:	edc3 7a03 	vstr	s15, [r3, #12]
		Receiver[4] = map((float)pulse_width_us[2] - 1500.00, -500.00, 500.00, -100.00, 100.00);
 80011ac:	4b8d      	ldr	r3, [pc, #564]	@ (80013e4 <main+0x664>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b8:	ee17 0a90 	vmov	r0, s15
 80011bc:	f7ff f990 	bl	80004e0 <__aeabi_f2d>
 80011c0:	a385      	add	r3, pc, #532	@ (adr r3, 80013d8 <main+0x658>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff f82b 	bl	8000220 <__aeabi_dsub>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fc77 	bl	8000ac4 <__aeabi_d2f>
 80011d6:	4603      	mov	r3, r0
 80011d8:	ed9f 2a83 	vldr	s4, [pc, #524]	@ 80013e8 <main+0x668>
 80011dc:	eddf 1a83 	vldr	s3, [pc, #524]	@ 80013ec <main+0x66c>
 80011e0:	ed9f 1a83 	vldr	s2, [pc, #524]	@ 80013f0 <main+0x670>
 80011e4:	eddf 0a83 	vldr	s1, [pc, #524]	@ 80013f4 <main+0x674>
 80011e8:	ee00 3a10 	vmov	s0, r3
 80011ec:	f001 fd20 	bl	8002c30 <map>
 80011f0:	eef0 7a40 	vmov.f32	s15, s0
 80011f4:	4b7a      	ldr	r3, [pc, #488]	@ (80013e0 <main+0x660>)
 80011f6:	edc3 7a04 	vstr	s15, [r3, #16]

		//Adjust as needed
		vx = map((float)Receiver[0], -100.00, 100.00, -300.00, 300.00);
 80011fa:	4b79      	ldr	r3, [pc, #484]	@ (80013e0 <main+0x660>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	ed9f 2a7d 	vldr	s4, [pc, #500]	@ 80013f8 <main+0x678>
 8001204:	eddf 1a7d 	vldr	s3, [pc, #500]	@ 80013fc <main+0x67c>
 8001208:	ed9f 1a77 	vldr	s2, [pc, #476]	@ 80013e8 <main+0x668>
 800120c:	eddf 0a77 	vldr	s1, [pc, #476]	@ 80013ec <main+0x66c>
 8001210:	eeb0 0a67 	vmov.f32	s0, s15
 8001214:	f001 fd0c 	bl	8002c30 <map>
 8001218:	eef0 7a40 	vmov.f32	s15, s0
 800121c:	4b78      	ldr	r3, [pc, #480]	@ (8001400 <main+0x680>)
 800121e:	edc3 7a00 	vstr	s15, [r3]
		vy = map((float)Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8001222:	4b6f      	ldr	r3, [pc, #444]	@ (80013e0 <main+0x660>)
 8001224:	edd3 7a01 	vldr	s15, [r3, #4]
 8001228:	ed9f 2a73 	vldr	s4, [pc, #460]	@ 80013f8 <main+0x678>
 800122c:	eddf 1a73 	vldr	s3, [pc, #460]	@ 80013fc <main+0x67c>
 8001230:	ed9f 1a6d 	vldr	s2, [pc, #436]	@ 80013e8 <main+0x668>
 8001234:	eddf 0a6d 	vldr	s1, [pc, #436]	@ 80013ec <main+0x66c>
 8001238:	eeb0 0a67 	vmov.f32	s0, s15
 800123c:	f001 fcf8 	bl	8002c30 <map>
 8001240:	eef0 7a40 	vmov.f32	s15, s0
 8001244:	4b6f      	ldr	r3, [pc, #444]	@ (8001404 <main+0x684>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////


	  	//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 800124a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800124e:	486e      	ldr	r0, [pc, #440]	@ (8001408 <main+0x688>)
 8001250:	f002 feb4 	bl	8003fbc <HAL_GPIO_ReadPin>
 8001254:	4603      	mov	r3, r0
 8001256:	2b01      	cmp	r3, #1
 8001258:	d10e      	bne.n	8001278 <main+0x4f8>
			Mode = 0;
 800125a:	4a6c      	ldr	r2, [pc, #432]	@ (800140c <main+0x68c>)
 800125c:	2300      	movs	r3, #0
 800125e:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 8001260:	4a6b      	ldr	r2, [pc, #428]	@ (8001410 <main+0x690>)
 8001262:	2301      	movs	r3, #1
 8001264:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 8001266:	2000      	movs	r0, #0
 8001268:	f002 f8cc 	bl	8003404 <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001272:	4865      	ldr	r0, [pc, #404]	@ (8001408 <main+0x688>)
 8001274:	f002 feba 	bl	8003fec <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1) {
 8001278:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800127c:	4865      	ldr	r0, [pc, #404]	@ (8001414 <main+0x694>)
 800127e:	f002 fe9d 	bl	8003fbc <HAL_GPIO_ReadPin>
 8001282:	4603      	mov	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d108      	bne.n	800129a <main+0x51a>
			EmergencyState = 0;
 8001288:	4a61      	ldr	r2, [pc, #388]	@ (8001410 <main+0x690>)
 800128a:	2300      	movs	r3, #0
 800128c:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001294:	485c      	ldr	r0, [pc, #368]	@ (8001408 <main+0x688>)
 8001296:	f002 fea9 	bl	8003fec <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 800129a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800129e:	485d      	ldr	r0, [pc, #372]	@ (8001414 <main+0x694>)
 80012a0:	f002 fe8c 	bl	8003fbc <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d102      	bne.n	80012b0 <main+0x530>
			Pen_Status = 0;
 80012aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001418 <main+0x698>)
 80012ac:	2300      	movs	r3, #0
 80012ae:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1) {
 80012b0:	2104      	movs	r1, #4
 80012b2:	4858      	ldr	r0, [pc, #352]	@ (8001414 <main+0x694>)
 80012b4:	f002 fe82 	bl	8003fbc <HAL_GPIO_ReadPin>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d102      	bne.n	80012c4 <main+0x544>
			Pen_Status = 1;
 80012be:	4a56      	ldr	r2, [pc, #344]	@ (8001418 <main+0x698>)
 80012c0:	2301      	movs	r3, #1
 80012c2:	7013      	strb	r3, [r2, #0]
		}

		if (EmergencyState == 1){
 80012c4:	4b52      	ldr	r3, [pc, #328]	@ (8001410 <main+0x690>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d103      	bne.n	80012d4 <main+0x554>
			Mode = 0;
 80012cc:	4a4f      	ldr	r2, [pc, #316]	@ (800140c <main+0x68c>)
 80012ce:	2300      	movs	r3, #0
 80012d0:	7013      	strb	r3, [r2, #0]
 80012d2:	e196      	b.n	8001602 <main+0x882>
		}
		else if (Receiver[2] < -30 && Receiver[4] < -30) {
 80012d4:	4b42      	ldr	r3, [pc, #264]	@ (80013e0 <main+0x660>)
 80012d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80012da:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80012de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e6:	d513      	bpl.n	8001310 <main+0x590>
 80012e8:	4b3d      	ldr	r3, [pc, #244]	@ (80013e0 <main+0x660>)
 80012ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80012ee:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80012f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fa:	d509      	bpl.n	8001310 <main+0x590>
			Mode = 0;
 80012fc:	4a43      	ldr	r2, [pc, #268]	@ (800140c <main+0x68c>)
 80012fe:	2300      	movs	r3, #0
 8001300:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001308:	483f      	ldr	r0, [pc, #252]	@ (8001408 <main+0x688>)
 800130a:	f002 fe6f 	bl	8003fec <HAL_GPIO_WritePin>
 800130e:	e178      	b.n	8001602 <main+0x882>
		}
		else if (Receiver[3] > 0 && IsPress == 0) {
 8001310:	4b33      	ldr	r3, [pc, #204]	@ (80013e0 <main+0x660>)
 8001312:	edd3 7a03 	vldr	s15, [r3, #12]
 8001316:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131e:	f340 816d 	ble.w	80015fc <main+0x87c>
 8001322:	4b3e      	ldr	r3, [pc, #248]	@ (800141c <main+0x69c>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f040 8168 	bne.w	80015fc <main+0x87c>
			IsPress = 1;
 800132c:	4a3b      	ldr	r2, [pc, #236]	@ (800141c <main+0x69c>)
 800132e:	2301      	movs	r3, #1
 8001330:	7013      	strb	r3, [r2, #0]
			calibState = CALIB_IDLE;
 8001332:	4a3b      	ldr	r2, [pc, #236]	@ (8001420 <main+0x6a0>)
 8001334:	2300      	movs	r3, #0
 8001336:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30
 8001338:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <main+0x660>)
 800133a:	edd3 7a02 	vldr	s15, [r3, #8]
 800133e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134a:	dd2c      	ble.n	80013a6 <main+0x626>
 800134c:	4b24      	ldr	r3, [pc, #144]	@ (80013e0 <main+0x660>)
 800134e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001352:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135e:	d522      	bpl.n	80013a6 <main+0x626>
					&& Receiver[4] < -30) {
 8001360:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <main+0x660>)
 8001362:	edd3 7a04 	vldr	s15, [r3, #16]
 8001366:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800136a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001372:	d518      	bpl.n	80013a6 <main+0x626>
				if(Mode != 1){
 8001374:	4b25      	ldr	r3, [pc, #148]	@ (800140c <main+0x68c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d003      	beq.n	8001384 <main+0x604>
					Mode = 1;
 800137c:	4a23      	ldr	r2, [pc, #140]	@ (800140c <main+0x68c>)
 800137e:	2301      	movs	r3, #1
 8001380:	7013      	strb	r3, [r2, #0]
				if(Mode != 1){
 8001382:	e12c      	b.n	80015de <main+0x85e>
				}
				else{
					TargetX = End_x;
 8001384:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <main+0x6a4>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b27      	ldr	r3, [pc, #156]	@ (8001428 <main+0x6a8>)
 800138a:	601a      	str	r2, [r3, #0]
					TargetY = End_y;
 800138c:	4b27      	ldr	r3, [pc, #156]	@ (800142c <main+0x6ac>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b27      	ldr	r3, [pc, #156]	@ (8001430 <main+0x6b0>)
 8001392:	601a      	str	r2, [r3, #0]
					TargetR = Revolute_QEIdata.RadPosition;
 8001394:	4b27      	ldr	r3, [pc, #156]	@ (8001434 <main+0x6b4>)
 8001396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001398:	4b27      	ldr	r3, [pc, #156]	@ (8001438 <main+0x6b8>)
 800139a:	601a      	str	r2, [r3, #0]
					TargetP = Prismatic_QEIdata.mmPosition;
 800139c:	4b27      	ldr	r3, [pc, #156]	@ (800143c <main+0x6bc>)
 800139e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013a0:	4b27      	ldr	r3, [pc, #156]	@ (8001440 <main+0x6c0>)
 80013a2:	601a      	str	r2, [r3, #0]
				if(Mode != 1){
 80013a4:	e11b      	b.n	80015de <main+0x85e>
				}
			} else if (Receiver[2] > 30 && Receiver[4] < -30) {
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <main+0x660>)
 80013a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80013ac:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80013b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	dd44      	ble.n	8001444 <main+0x6c4>
 80013ba:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <main+0x660>)
 80013bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80013c0:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80013c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013cc:	d53a      	bpl.n	8001444 <main+0x6c4>
				Mode = 2;
 80013ce:	4a0f      	ldr	r2, [pc, #60]	@ (800140c <main+0x68c>)
 80013d0:	2302      	movs	r3, #2
 80013d2:	7013      	strb	r3, [r2, #0]
 80013d4:	e103      	b.n	80015de <main+0x85e>
 80013d6:	bf00      	nop
 80013d8:	00000000 	.word	0x00000000
 80013dc:	40977000 	.word	0x40977000
 80013e0:	20000248 	.word	0x20000248
 80013e4:	2000027c 	.word	0x2000027c
 80013e8:	42c80000 	.word	0x42c80000
 80013ec:	c2c80000 	.word	0xc2c80000
 80013f0:	43fa0000 	.word	0x43fa0000
 80013f4:	c3fa0000 	.word	0xc3fa0000
 80013f8:	43960000 	.word	0x43960000
 80013fc:	c3960000 	.word	0xc3960000
 8001400:	20000308 	.word	0x20000308
 8001404:	2000030c 	.word	0x2000030c
 8001408:	48000800 	.word	0x48000800
 800140c:	20000348 	.word	0x20000348
 8001410:	20000349 	.word	0x20000349
 8001414:	48000400 	.word	0x48000400
 8001418:	2000034b 	.word	0x2000034b
 800141c:	2000034a 	.word	0x2000034a
 8001420:	2000039c 	.word	0x2000039c
 8001424:	20000310 	.word	0x20000310
 8001428:	20000318 	.word	0x20000318
 800142c:	20000314 	.word	0x20000314
 8001430:	2000031c 	.word	0x2000031c
 8001434:	20000290 	.word	0x20000290
 8001438:	20000320 	.word	0x20000320
 800143c:	200002d0 	.word	0x200002d0
 8001440:	20000324 	.word	0x20000324
			} else if (Receiver[2] < -30 && Receiver[4] > -30
 8001444:	4b66      	ldr	r3, [pc, #408]	@ (80015e0 <main+0x860>)
 8001446:	edd3 7a02 	vldr	s15, [r3, #8]
 800144a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800144e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	d517      	bpl.n	8001488 <main+0x708>
 8001458:	4b61      	ldr	r3, [pc, #388]	@ (80015e0 <main+0x860>)
 800145a:	edd3 7a04 	vldr	s15, [r3, #16]
 800145e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146a:	dd0d      	ble.n	8001488 <main+0x708>
					&& Receiver[4] < 30) {
 800146c:	4b5c      	ldr	r3, [pc, #368]	@ (80015e0 <main+0x860>)
 800146e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001472:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	d503      	bpl.n	8001488 <main+0x708>
				Mode = 3;
 8001480:	4a58      	ldr	r2, [pc, #352]	@ (80015e4 <main+0x864>)
 8001482:	2303      	movs	r3, #3
 8001484:	7013      	strb	r3, [r2, #0]
 8001486:	e0aa      	b.n	80015de <main+0x85e>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 8001488:	4b55      	ldr	r3, [pc, #340]	@ (80015e0 <main+0x860>)
 800148a:	edd3 7a02 	vldr	s15, [r3, #8]
 800148e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149a:	dd21      	ble.n	80014e0 <main+0x760>
 800149c:	4b50      	ldr	r3, [pc, #320]	@ (80015e0 <main+0x860>)
 800149e:	edd3 7a02 	vldr	s15, [r3, #8]
 80014a2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80014a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	d517      	bpl.n	80014e0 <main+0x760>
					&& Receiver[4] > -30 && Receiver[4] < 30) {
 80014b0:	4b4b      	ldr	r3, [pc, #300]	@ (80015e0 <main+0x860>)
 80014b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80014b6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80014ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c2:	dd0d      	ble.n	80014e0 <main+0x760>
 80014c4:	4b46      	ldr	r3, [pc, #280]	@ (80015e0 <main+0x860>)
 80014c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ca:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80014ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	d503      	bpl.n	80014e0 <main+0x760>
				Mode = 4;
 80014d8:	4a42      	ldr	r2, [pc, #264]	@ (80015e4 <main+0x864>)
 80014da:	2304      	movs	r3, #4
 80014dc:	7013      	strb	r3, [r2, #0]
 80014de:	e07e      	b.n	80015de <main+0x85e>
			} else if (Receiver[2] > 30 && Receiver[4] > -30
 80014e0:	4b3f      	ldr	r3, [pc, #252]	@ (80015e0 <main+0x860>)
 80014e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80014e6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80014ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd17      	ble.n	8001524 <main+0x7a4>
 80014f4:	4b3a      	ldr	r3, [pc, #232]	@ (80015e0 <main+0x860>)
 80014f6:	edd3 7a04 	vldr	s15, [r3, #16]
 80014fa:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 80014fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001506:	dd0d      	ble.n	8001524 <main+0x7a4>
					&& Receiver[4] < 30) {
 8001508:	4b35      	ldr	r3, [pc, #212]	@ (80015e0 <main+0x860>)
 800150a:	edd3 7a04 	vldr	s15, [r3, #16]
 800150e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151a:	d503      	bpl.n	8001524 <main+0x7a4>
				Mode = 5;
 800151c:	4a31      	ldr	r2, [pc, #196]	@ (80015e4 <main+0x864>)
 800151e:	2305      	movs	r3, #5
 8001520:	7013      	strb	r3, [r2, #0]
 8001522:	e05c      	b.n	80015de <main+0x85e>
			} else if (Receiver[2] < -30 && Receiver[4] > 30) {
 8001524:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <main+0x860>)
 8001526:	edd3 7a02 	vldr	s15, [r3, #8]
 800152a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800152e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001536:	d50d      	bpl.n	8001554 <main+0x7d4>
 8001538:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <main+0x860>)
 800153a:	edd3 7a04 	vldr	s15, [r3, #16]
 800153e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154a:	dd03      	ble.n	8001554 <main+0x7d4>
				Mode = 6;
 800154c:	4a25      	ldr	r2, [pc, #148]	@ (80015e4 <main+0x864>)
 800154e:	2306      	movs	r3, #6
 8001550:	7013      	strb	r3, [r2, #0]
 8001552:	e044      	b.n	80015de <main+0x85e>
			} else if (Receiver[2] > -30 && Receiver[2] < 30
 8001554:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <main+0x860>)
 8001556:	edd3 7a02 	vldr	s15, [r3, #8]
 800155a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800155e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001566:	dd17      	ble.n	8001598 <main+0x818>
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <main+0x860>)
 800156a:	edd3 7a02 	vldr	s15, [r3, #8]
 800156e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157a:	d50d      	bpl.n	8001598 <main+0x818>
					&& Receiver[4] > 30) {
 800157c:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <main+0x860>)
 800157e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001582:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	dd03      	ble.n	8001598 <main+0x818>
				Mode = 7;
 8001590:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <main+0x864>)
 8001592:	2307      	movs	r3, #7
 8001594:	7013      	strb	r3, [r2, #0]
 8001596:	e022      	b.n	80015de <main+0x85e>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <main+0x860>)
 800159a:	edd3 7a02 	vldr	s15, [r3, #8]
 800159e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80015a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	dc00      	bgt.n	80015ae <main+0x82e>
			if (Receiver[2] > -30 && Receiver[2] < 30
 80015ac:	e029      	b.n	8001602 <main+0x882>
			} else if (Receiver[2] > 30 && Receiver[4] > 30) {
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <main+0x860>)
 80015b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80015b4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80015b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	dc00      	bgt.n	80015c4 <main+0x844>
			if (Receiver[2] > -30 && Receiver[2] < 30
 80015c2:	e01e      	b.n	8001602 <main+0x882>
				loop_counter = 0;
 80015c4:	4a08      	ldr	r2, [pc, #32]	@ (80015e8 <main+0x868>)
 80015c6:	2300      	movs	r3, #0
 80015c8:	6013      	str	r3, [r2, #0]
				TargetR = 4.18879;
 80015ca:	4a08      	ldr	r2, [pc, #32]	@ (80015ec <main+0x86c>)
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <main+0x870>)
 80015ce:	6013      	str	r3, [r2, #0]
				TargetP = 50;
 80015d0:	4a08      	ldr	r2, [pc, #32]	@ (80015f4 <main+0x874>)
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <main+0x878>)
 80015d4:	6013      	str	r3, [r2, #0]
				Mode = 8;
 80015d6:	4a03      	ldr	r2, [pc, #12]	@ (80015e4 <main+0x864>)
 80015d8:	2308      	movs	r3, #8
 80015da:	7013      	strb	r3, [r2, #0]
			if (Receiver[2] > -30 && Receiver[2] < 30
 80015dc:	e011      	b.n	8001602 <main+0x882>
 80015de:	e010      	b.n	8001602 <main+0x882>
 80015e0:	20000248 	.word	0x20000248
 80015e4:	20000348 	.word	0x20000348
 80015e8:	200003b8 	.word	0x200003b8
 80015ec:	20000320 	.word	0x20000320
 80015f0:	40860a91 	.word	0x40860a91
 80015f4:	20000324 	.word	0x20000324
 80015f8:	42480000 	.word	0x42480000
			}
		}
		else{
			IsPress = 0;
 80015fc:	4acc      	ldr	r2, [pc, #816]	@ (8001930 <main+0xbb0>)
 80015fe:	2300      	movs	r3, #0
 8001600:	7013      	strb	r3, [r2, #0]
//		}
		//////////////////////////////////////////////////////////////


		//////////////////////// <<STOP>> ////////////////////////////
		if (Mode == 0) {
 8001602:	4bcc      	ldr	r3, [pc, #816]	@ (8001934 <main+0xbb4>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10c      	bne.n	8001624 <main+0x8a4>
			Set_Motor(0, 0);
 800160a:	ed9f 0acb 	vldr	s0, [pc, #812]	@ 8001938 <main+0xbb8>
 800160e:	2000      	movs	r0, #0
 8001610:	f001 fe7a 	bl	8003308 <Set_Motor>
			Set_Motor(1, 0);
 8001614:	ed9f 0ac8 	vldr	s0, [pc, #800]	@ 8001938 <main+0xbb8>
 8001618:	2001      	movs	r0, #1
 800161a:	f001 fe75 	bl	8003308 <Set_Motor>
			Set_Servo(0);
 800161e:	2000      	movs	r0, #0
 8001620:	f001 fef0 	bl	8003404 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////


		//////////////////////// <<MANUAL>> //////////////////////////
		if (Mode == 1) {
 8001624:	4bc3      	ldr	r3, [pc, #780]	@ (8001934 <main+0xbb4>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	f040 8102 	bne.w	8001832 <main+0xab2>
		//////////////////////// <<CONTROL>> /////////////////////////
//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
			TargetRVel = (map((float) Receiver[0], -100.00, 100.00, -1.00, 1.00))*-1;
 800162e:	4bc3      	ldr	r3, [pc, #780]	@ (800193c <main+0xbbc>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8001638:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 800163c:	ed9f 1ac0 	vldr	s2, [pc, #768]	@ 8001940 <main+0xbc0>
 8001640:	eddf 0ac0 	vldr	s1, [pc, #768]	@ 8001944 <main+0xbc4>
 8001644:	eeb0 0a67 	vmov.f32	s0, s15
 8001648:	f001 faf2 	bl	8002c30 <map>
 800164c:	eef0 7a40 	vmov.f32	s15, s0
 8001650:	eef1 7a67 	vneg.f32	s15, s15
 8001654:	4bbc      	ldr	r3, [pc, #752]	@ (8001948 <main+0xbc8>)
 8001656:	edc3 7a00 	vstr	s15, [r3]
			TargetPVel = map((float) Receiver[1], -100.00, 100.00, -500.00,
 800165a:	4bb8      	ldr	r3, [pc, #736]	@ (800193c <main+0xbbc>)
 800165c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001660:	ed9f 2aba 	vldr	s4, [pc, #744]	@ 800194c <main+0xbcc>
 8001664:	eddf 1aba 	vldr	s3, [pc, #744]	@ 8001950 <main+0xbd0>
 8001668:	ed9f 1ab5 	vldr	s2, [pc, #724]	@ 8001940 <main+0xbc0>
 800166c:	eddf 0ab5 	vldr	s1, [pc, #724]	@ 8001944 <main+0xbc4>
 8001670:	eeb0 0a67 	vmov.f32	s0, s15
 8001674:	f001 fadc 	bl	8002c30 <map>
 8001678:	eef0 7a40 	vmov.f32	s15, s0
 800167c:	4bb5      	ldr	r3, [pc, #724]	@ (8001954 <main+0xbd4>)
 800167e:	edc3 7a00 	vstr	s15, [r3]
					500.00);
		//////////////////////////////////////////////////////////////


		//////////////////////// <<MOTOR>> ///////////////////////////
			R_Velo_Error = (TargetRVel - Revolute_QEIdata.AngularVelocity_rad)*-1;
 8001682:	4bb1      	ldr	r3, [pc, #708]	@ (8001948 <main+0xbc8>)
 8001684:	ed93 7a00 	vldr	s14, [r3]
 8001688:	4bb3      	ldr	r3, [pc, #716]	@ (8001958 <main+0xbd8>)
 800168a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800168e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001692:	eef1 7a67 	vneg.f32	s15, s15
 8001696:	4bb1      	ldr	r3, [pc, #708]	@ (800195c <main+0xbdc>)
 8001698:	edc3 7a00 	vstr	s15, [r3]
			P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity_mm;
 800169c:	4bad      	ldr	r3, [pc, #692]	@ (8001954 <main+0xbd4>)
 800169e:	ed93 7a00 	vldr	s14, [r3]
 80016a2:	4baf      	ldr	r3, [pc, #700]	@ (8001960 <main+0xbe0>)
 80016a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80016a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ac:	4bad      	ldr	r3, [pc, #692]	@ (8001964 <main+0xbe4>)
 80016ae:	edc3 7a00 	vstr	s15, [r3]
//			PID.Kd = 0.0;
//			arm_pid_init_f32(&PID, 1);
//			P_Speed = arm_pid_f32(&PID, P_Velo_Error);

			static uint64_t timestampState1 = 0;
			int64_t currentTimeState1 = micros();
 80016b2:	f001 fbcb 	bl	8002e4c <micros>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
			if (currentTimeState1 > timestampState1) {
 80016be:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80016c2:	4ba9      	ldr	r3, [pc, #676]	@ (8001968 <main+0xbe8>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	4282      	cmp	r2, r0
 80016ca:	418b      	sbcs	r3, r1
 80016cc:	d23f      	bcs.n	800174e <main+0x9ce>
				timestampState1 = currentTimeState1 + 10000;		//us
 80016ce:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80016d2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80016d6:	1851      	adds	r1, r2, r1
 80016d8:	6539      	str	r1, [r7, #80]	@ 0x50
 80016da:	f143 0300 	adc.w	r3, r3, #0
 80016de:	657b      	str	r3, [r7, #84]	@ 0x54
 80016e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80016e4:	4ba0      	ldr	r3, [pc, #640]	@ (8001968 <main+0xbe8>)
 80016e6:	e9c3 0100 	strd	r0, r1, [r3]
				R_Speed = PID_Update(R_Velo_Error, 100.00f, 0.10f, 0.00f, 0.01f,
 80016ea:	4b9c      	ldr	r3, [pc, #624]	@ (800195c <main+0xbdc>)
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	489e      	ldr	r0, [pc, #632]	@ (800196c <main+0xbec>)
 80016f2:	ed9f 3a93 	vldr	s6, [pc, #588]	@ 8001940 <main+0xbc0>
 80016f6:	eddf 2a93 	vldr	s5, [pc, #588]	@ 8001944 <main+0xbc4>
 80016fa:	ed9f 2a9d 	vldr	s4, [pc, #628]	@ 8001970 <main+0xbf0>
 80016fe:	eddf 1a8e 	vldr	s3, [pc, #568]	@ 8001938 <main+0xbb8>
 8001702:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 8001974 <main+0xbf4>
 8001706:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8001940 <main+0xbc0>
 800170a:	eeb0 0a67 	vmov.f32	s0, s15
 800170e:	f001 fbb7 	bl	8002e80 <PID_Update>
 8001712:	eef0 7a40 	vmov.f32	s15, s0
 8001716:	4b98      	ldr	r3, [pc, #608]	@ (8001978 <main+0xbf8>)
 8001718:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_r_v);
				P_Speed = PID_Update(P_Velo_Error, 0.2f, 1.5f, 0.00f, 0.01f,
 800171c:	4b91      	ldr	r3, [pc, #580]	@ (8001964 <main+0xbe4>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	4896      	ldr	r0, [pc, #600]	@ (800197c <main+0xbfc>)
 8001724:	ed9f 3a86 	vldr	s6, [pc, #536]	@ 8001940 <main+0xbc0>
 8001728:	eddf 2a86 	vldr	s5, [pc, #536]	@ 8001944 <main+0xbc4>
 800172c:	ed9f 2a90 	vldr	s4, [pc, #576]	@ 8001970 <main+0xbf0>
 8001730:	eddf 1a81 	vldr	s3, [pc, #516]	@ 8001938 <main+0xbb8>
 8001734:	eeb7 1a08 	vmov.f32	s2, #120	@ 0x3fc00000  1.5
 8001738:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8001980 <main+0xc00>
 800173c:	eeb0 0a67 	vmov.f32	s0, s15
 8001740:	f001 fb9e 	bl	8002e80 <PID_Update>
 8001744:	eef0 7a40 	vmov.f32	s15, s0
 8001748:	4b8e      	ldr	r3, [pc, #568]	@ (8001984 <main+0xc04>)
 800174a:	edc3 7a00 	vstr	s15, [r3]
						-100.0f, 100.0f, &pid_p_v);
			}

			R_Speed = Receiver[0];
 800174e:	4b7b      	ldr	r3, [pc, #492]	@ (800193c <main+0xbbc>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b89      	ldr	r3, [pc, #548]	@ (8001978 <main+0xbf8>)
 8001754:	601a      	str	r2, [r3, #0]
//			P_Speed = Receiver[1];

			if (Revolute_QEIdata.RadPosition < -1.91986 && R_Speed > 0) {
 8001756:	4b80      	ldr	r3, [pc, #512]	@ (8001958 <main+0xbd8>)
 8001758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fec0 	bl	80004e0 <__aeabi_f2d>
 8001760:	a36f      	add	r3, pc, #444	@ (adr r3, 8001920 <main+0xba0>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7ff f985 	bl	8000a74 <__aeabi_dcmplt>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00b      	beq.n	8001788 <main+0xa08>
 8001770:	4b81      	ldr	r3, [pc, #516]	@ (8001978 <main+0xbf8>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	dd03      	ble.n	8001788 <main+0xa08>
				R_Speed = 0;
 8001780:	4a7d      	ldr	r2, [pc, #500]	@ (8001978 <main+0xbf8>)
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	6013      	str	r3, [r2, #0]
			}
			if (Revolute_QEIdata.RadPosition > 5.06145 && R_Speed < 0) {
 8001788:	4b73      	ldr	r3, [pc, #460]	@ (8001958 <main+0xbd8>)
 800178a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fea7 	bl	80004e0 <__aeabi_f2d>
 8001792:	a365      	add	r3, pc, #404	@ (adr r3, 8001928 <main+0xba8>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7ff f98a 	bl	8000ab0 <__aeabi_dcmpgt>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <main+0xa3a>
 80017a2:	4b75      	ldr	r3, [pc, #468]	@ (8001978 <main+0xbf8>)
 80017a4:	edd3 7a00 	vldr	s15, [r3]
 80017a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	d503      	bpl.n	80017ba <main+0xa3a>
				R_Speed = 0;
 80017b2:	4a71      	ldr	r2, [pc, #452]	@ (8001978 <main+0xbf8>)
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition > 305 && P_Speed > 0) {
 80017ba:	4b69      	ldr	r3, [pc, #420]	@ (8001960 <main+0xbe0>)
 80017bc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80017c0:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8001988 <main+0xc08>
 80017c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017cc:	dd0b      	ble.n	80017e6 <main+0xa66>
 80017ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001984 <main+0xc04>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017dc:	dd03      	ble.n	80017e6 <main+0xa66>
				P_Speed = 0;
 80017de:	4a69      	ldr	r2, [pc, #420]	@ (8001984 <main+0xc04>)
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	6013      	str	r3, [r2, #0]
			}
			if (Prismatic_QEIdata.mmPosition < -1 && P_Speed < 0) {
 80017e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001960 <main+0xbe0>)
 80017e8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80017ec:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80017f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	d50b      	bpl.n	8001812 <main+0xa92>
 80017fa:	4b62      	ldr	r3, [pc, #392]	@ (8001984 <main+0xc04>)
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001808:	d503      	bpl.n	8001812 <main+0xa92>
				P_Speed = 0;
 800180a:	4a5e      	ldr	r2, [pc, #376]	@ (8001984 <main+0xc04>)
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	6013      	str	r3, [r2, #0]
			}

			Set_Motor(0, R_Speed);
 8001812:	4b59      	ldr	r3, [pc, #356]	@ (8001978 <main+0xbf8>)
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	eeb0 0a67 	vmov.f32	s0, s15
 800181c:	2000      	movs	r0, #0
 800181e:	f001 fd73 	bl	8003308 <Set_Motor>
			Set_Motor(1, P_Speed);
 8001822:	4b58      	ldr	r3, [pc, #352]	@ (8001984 <main+0xc04>)
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	eeb0 0a67 	vmov.f32	s0, s15
 800182c:	2001      	movs	r0, #1
 800182e:	f001 fd6b 	bl	8003308 <Set_Motor>
		}
		//////////////////////////////////////////////////////////////


		//////////////////////// <<GOTO>> ////////////////////////////
		if (Mode == 2) {
 8001832:	4b40      	ldr	r3, [pc, #256]	@ (8001934 <main+0xbb4>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b02      	cmp	r3, #2
 8001838:	f040 8103 	bne.w	8001a42 <main+0xcc2>
			R_Pos_Error = (TargetR - Revolute_QEIdata.RadPosition)*-1;
 800183c:	4b53      	ldr	r3, [pc, #332]	@ (800198c <main+0xc0c>)
 800183e:	ed93 7a00 	vldr	s14, [r3]
 8001842:	4b45      	ldr	r3, [pc, #276]	@ (8001958 <main+0xbd8>)
 8001844:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800184c:	eef1 7a67 	vneg.f32	s15, s15
 8001850:	4b4f      	ldr	r3, [pc, #316]	@ (8001990 <main+0xc10>)
 8001852:	edc3 7a00 	vstr	s15, [r3]
//			PID.Ki = 10;
//			PID.Kd = 0.1;
//			arm_pid_init_f32(&PID, 1);
//			R_Speed = arm_pid_f32(&PID, R_Pos_Error);
//
			P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8001856:	4b4f      	ldr	r3, [pc, #316]	@ (8001994 <main+0xc14>)
 8001858:	ed93 7a00 	vldr	s14, [r3]
 800185c:	4b40      	ldr	r3, [pc, #256]	@ (8001960 <main+0xbe0>)
 800185e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001866:	4b4c      	ldr	r3, [pc, #304]	@ (8001998 <main+0xc18>)
 8001868:	edc3 7a00 	vstr	s15, [r3]
//			PID.Kd = 0.25;
//			arm_pid_init_f32(&PID, 1);
//			P_Speed = arm_pid_f32(&PID, P_Pos_Error);

			static uint64_t timestampState2 = 0;
			int64_t currentTimeState2 = micros();
 800186c:	f001 faee 	bl	8002e4c <micros>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
			if (currentTimeState2 > timestampState2) {
 8001878:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800187c:	4b47      	ldr	r3, [pc, #284]	@ (800199c <main+0xc1c>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	4282      	cmp	r2, r0
 8001884:	418b      	sbcs	r3, r1
 8001886:	d23f      	bcs.n	8001908 <main+0xb88>
				timestampState2 = currentTimeState2 + 10000;//us
 8001888:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800188c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001890:	1851      	adds	r1, r2, r1
 8001892:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001894:	f143 0300 	adc.w	r3, r3, #0
 8001898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800189a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800189e:	4b3f      	ldr	r3, [pc, #252]	@ (800199c <main+0xc1c>)
 80018a0:	e9c3 0100 	strd	r0, r1, [r3]
				R_Speed = PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f, 0.01f, -100.0f, 100.0f, &pid_r);
 80018a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001990 <main+0xc10>)
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	483d      	ldr	r0, [pc, #244]	@ (80019a0 <main+0xc20>)
 80018ac:	ed9f 3a24 	vldr	s6, [pc, #144]	@ 8001940 <main+0xbc0>
 80018b0:	eddf 2a24 	vldr	s5, [pc, #144]	@ 8001944 <main+0xbc4>
 80018b4:	ed9f 2a2e 	vldr	s4, [pc, #184]	@ 8001970 <main+0xbf0>
 80018b8:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 80018bc:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80018c0:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 80018c4:	eeb0 0a67 	vmov.f32	s0, s15
 80018c8:	f001 fada 	bl	8002e80 <PID_Update>
 80018cc:	eef0 7a40 	vmov.f32	s15, s0
 80018d0:	4b29      	ldr	r3, [pc, #164]	@ (8001978 <main+0xbf8>)
 80018d2:	edc3 7a00 	vstr	s15, [r3]
				P_Speed = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f, -100.0f, 100.0f, &pid_p);
 80018d6:	4b30      	ldr	r3, [pc, #192]	@ (8001998 <main+0xc18>)
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	4831      	ldr	r0, [pc, #196]	@ (80019a4 <main+0xc24>)
 80018de:	ed9f 3a18 	vldr	s6, [pc, #96]	@ 8001940 <main+0xbc0>
 80018e2:	eddf 2a18 	vldr	s5, [pc, #96]	@ 8001944 <main+0xbc4>
 80018e6:	ed9f 2a22 	vldr	s4, [pc, #136]	@ 8001970 <main+0xbf0>
 80018ea:	eddf 1a2f 	vldr	s3, [pc, #188]	@ 80019a8 <main+0xc28>
 80018ee:	ed9f 1a2f 	vldr	s2, [pc, #188]	@ 80019ac <main+0xc2c>
 80018f2:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 80019b0 <main+0xc30>
 80018f6:	eeb0 0a67 	vmov.f32	s0, s15
 80018fa:	f001 fac1 	bl	8002e80 <PID_Update>
 80018fe:	eef0 7a40 	vmov.f32	s15, s0
 8001902:	4b20      	ldr	r3, [pc, #128]	@ (8001984 <main+0xc04>)
 8001904:	edc3 7a00 	vstr	s15, [r3]
			}

			Set_Motor(0, R_Speed);
 8001908:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <main+0xbf8>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	eeb0 0a67 	vmov.f32	s0, s15
 8001912:	2000      	movs	r0, #0
 8001914:	f001 fcf8 	bl	8003308 <Set_Motor>
			Set_Motor(1, P_Speed);
 8001918:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <main+0xc04>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	e049      	b.n	80019b4 <main+0xc34>
 8001920:	1e8e6080 	.word	0x1e8e6080
 8001924:	bffeb7bf 	.word	0xbffeb7bf
 8001928:	bfb15b57 	.word	0xbfb15b57
 800192c:	40143eec 	.word	0x40143eec
 8001930:	2000034a 	.word	0x2000034a
 8001934:	20000348 	.word	0x20000348
 8001938:	00000000 	.word	0x00000000
 800193c:	20000248 	.word	0x20000248
 8001940:	42c80000 	.word	0x42c80000
 8001944:	c2c80000 	.word	0xc2c80000
 8001948:	20000328 	.word	0x20000328
 800194c:	43fa0000 	.word	0x43fa0000
 8001950:	c3fa0000 	.word	0xc3fa0000
 8001954:	2000032c 	.word	0x2000032c
 8001958:	20000290 	.word	0x20000290
 800195c:	20000338 	.word	0x20000338
 8001960:	200002d0 	.word	0x200002d0
 8001964:	2000033c 	.word	0x2000033c
 8001968:	200003d0 	.word	0x200003d0
 800196c:	2000038c 	.word	0x2000038c
 8001970:	3c23d70a 	.word	0x3c23d70a
 8001974:	3dcccccd 	.word	0x3dcccccd
 8001978:	20000340 	.word	0x20000340
 800197c:	20000394 	.word	0x20000394
 8001980:	3e4ccccd 	.word	0x3e4ccccd
 8001984:	20000344 	.word	0x20000344
 8001988:	43988000 	.word	0x43988000
 800198c:	20000320 	.word	0x20000320
 8001990:	20000330 	.word	0x20000330
 8001994:	20000324 	.word	0x20000324
 8001998:	20000334 	.word	0x20000334
 800199c:	200003d8 	.word	0x200003d8
 80019a0:	2000037c 	.word	0x2000037c
 80019a4:	20000384 	.word	0x20000384
 80019a8:	3e19999a 	.word	0x3e19999a
 80019ac:	3f99999a 	.word	0x3f99999a
 80019b0:	3eaa7efa 	.word	0x3eaa7efa
 80019b4:	eeb0 0a67 	vmov.f32	s0, s15
 80019b8:	2001      	movs	r0, #1
 80019ba:	f001 fca5 	bl	8003308 <Set_Motor>
			if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 80019be:	4bb7      	ldr	r3, [pc, #732]	@ (8001c9c <main+0xf1c>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	eef0 7ae7 	vabs.f32	s15, s15
 80019c8:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 8001ca0 <main+0xf20>
 80019cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	d52c      	bpl.n	8001a30 <main+0xcb0>
					&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 80019d6:	4bb3      	ldr	r3, [pc, #716]	@ (8001ca4 <main+0xf24>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	eef0 7ae7 	vabs.f32	s15, s15
 80019e0:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8001ca8 <main+0xf28>
 80019e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ec:	d520      	bpl.n	8001a30 <main+0xcb0>
				/* within window —— start or continue timer */
				if (lock_timer_us == 0)
 80019ee:	4baf      	ldr	r3, [pc, #700]	@ (8001cac <main+0xf2c>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	d107      	bne.n	8001a08 <main+0xc88>
					lock_timer_us = micros(); /* start timing */
 80019f8:	f001 fa28 	bl	8002e4c <micros>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	49aa      	ldr	r1, [pc, #680]	@ (8001cac <main+0xf2c>)
 8001a02:	e9c1 2300 	strd	r2, r3, [r1]
				if (lock_timer_us == 0)
 8001a06:	e01b      	b.n	8001a40 <main+0xcc0>

				else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 8001a08:	f001 fa20 	bl	8002e4c <micros>
 8001a0c:	4ba7      	ldr	r3, [pc, #668]	@ (8001cac <main+0xf2c>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	1a84      	subs	r4, r0, r2
 8001a14:	eb61 0503 	sbc.w	r5, r1, r3
 8001a18:	4ba5      	ldr	r3, [pc, #660]	@ (8001cb0 <main+0xf30>)
 8001a1a:	429c      	cmp	r4, r3
 8001a1c:	f175 0300 	sbcs.w	r3, r5, #0
 8001a20:	d30e      	bcc.n	8001a40 <main+0xcc0>
					Set_Servo(1);
 8001a22:	2001      	movs	r0, #1
 8001a24:	f001 fcee 	bl	8003404 <Set_Servo>
					Mode = 1;
 8001a28:	4aa2      	ldr	r2, [pc, #648]	@ (8001cb4 <main+0xf34>)
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	7013      	strb	r3, [r2, #0]
				if (lock_timer_us == 0)
 8001a2e:	e007      	b.n	8001a40 <main+0xcc0>
				}
			} else {
				lock_timer_us = 0;
 8001a30:	499e      	ldr	r1, [pc, #632]	@ (8001cac <main+0xf2c>)
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9c1 2300 	strd	r2, r3, [r1]
 8001a3e:	e000      	b.n	8001a42 <main+0xcc2>
				if (lock_timer_us == 0)
 8001a40:	bf00      	nop
		}
		//////////////////////////////////////////////////////////////


		//////////////////////// <<CALIBRATING>> /////////////////////
		if (Mode == 3) {
 8001a42:	4b9c      	ldr	r3, [pc, #624]	@ (8001cb4 <main+0xf34>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	f040 825c 	bne.w	8001f04 <main+0x1184>
			switch (calibState) {
 8001a4c:	4b9a      	ldr	r3, [pc, #616]	@ (8001cb8 <main+0xf38>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b0c      	cmp	r3, #12
 8001a52:	f200 8257 	bhi.w	8001f04 <main+0x1184>
 8001a56:	a201      	add	r2, pc, #4	@ (adr r2, 8001a5c <main+0xcdc>)
 8001a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5c:	08001a91 	.word	0x08001a91
 8001a60:	08001ac7 	.word	0x08001ac7
 8001a64:	08001b0d 	.word	0x08001b0d
 8001a68:	08001b57 	.word	0x08001b57
 8001a6c:	08001ba1 	.word	0x08001ba1
 8001a70:	08001bef 	.word	0x08001bef
 8001a74:	08001c47 	.word	0x08001c47
 8001a78:	08001c87 	.word	0x08001c87
 8001a7c:	08001d2f 	.word	0x08001d2f
 8001a80:	08001d9b 	.word	0x08001d9b
 8001a84:	08001e07 	.word	0x08001e07
 8001a88:	08001e71 	.word	0x08001e71
 8001a8c:	08001ec3 	.word	0x08001ec3
			case CALIB_IDLE:
				Set_Motor(0, 0);
 8001a90:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8001cbc <main+0xf3c>
 8001a94:	2000      	movs	r0, #0
 8001a96:	f001 fc37 	bl	8003308 <Set_Motor>
				Set_Motor(1, 0);
 8001a9a:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 8001cbc <main+0xf3c>
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f001 fc32 	bl	8003308 <Set_Motor>
				P_Limit = 0;
 8001aa4:	4a86      	ldr	r2, [pc, #536]	@ (8001cc0 <main+0xf40>)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8001aaa:	4a86      	ldr	r2, [pc, #536]	@ (8001cc4 <main+0xf44>)
 8001aac:	2300      	movs	r3, #0
 8001aae:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 8001ab0:	4a81      	ldr	r2, [pc, #516]	@ (8001cb8 <main+0xf38>)
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 8001ab6:	f001 f9c9 	bl	8002e4c <micros>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4982      	ldr	r1, [pc, #520]	@ (8001cc8 <main+0xf48>)
 8001ac0:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8001ac4:	e21e      	b.n	8001f04 <main+0x1184>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80) {
 8001ac6:	4b81      	ldr	r3, [pc, #516]	@ (8001ccc <main+0xf4c>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8001cd0 <main+0xf50>
 8001ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad8:	dd06      	ble.n	8001ae8 <main+0xd68>
					Cal_Side = 1;
 8001ada:	4a7e      	ldr	r2, [pc, #504]	@ (8001cd4 <main+0xf54>)
 8001adc:	2301      	movs	r3, #1
 8001ade:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8001ae0:	4a75      	ldr	r2, [pc, #468]	@ (8001cb8 <main+0xf38>)
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	7013      	strb	r3, [r2, #0]
				} else if (Receiver[0] < -80) {
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 8001ae6:	e20d      	b.n	8001f04 <main+0x1184>
				} else if (Receiver[0] < -80) {
 8001ae8:	4b78      	ldr	r3, [pc, #480]	@ (8001ccc <main+0xf4c>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001cd8 <main+0xf58>
 8001af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afa:	d400      	bmi.n	8001afe <main+0xd7e>
				break;
 8001afc:	e202      	b.n	8001f04 <main+0x1184>
					Cal_Side = 2;
 8001afe:	4a75      	ldr	r2, [pc, #468]	@ (8001cd4 <main+0xf54>)
 8001b00:	2302      	movs	r3, #2
 8001b02:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8001b04:	4a6c      	ldr	r2, [pc, #432]	@ (8001cb8 <main+0xf38>)
 8001b06:	2302      	movs	r3, #2
 8001b08:	7013      	strb	r3, [r2, #0]
				break;
 8001b0a:	e1fb      	b.n	8001f04 <main+0x1184>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -15);
 8001b0c:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8001b10:	2001      	movs	r0, #1
 8001b12:	f001 fbf9 	bl	8003308 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8001b16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b1a:	4870      	ldr	r0, [pc, #448]	@ (8001cdc <main+0xf5c>)
 8001b1c:	f002 fa4e 	bl	8003fbc <HAL_GPIO_ReadPin>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d004      	beq.n	8001b30 <main+0xdb0>
 8001b26:	4b66      	ldr	r3, [pc, #408]	@ (8001cc0 <main+0xf40>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 81d9 	beq.w	8001ee2 <main+0x1162>
					Set_Motor(1, 0);
 8001b30:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 8001cbc <main+0xf3c>
 8001b34:	2001      	movs	r0, #1
 8001b36:	f001 fbe7 	bl	8003308 <Set_Motor>
					calib_timer = micros();
 8001b3a:	f001 f987 	bl	8002e4c <micros>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4961      	ldr	r1, [pc, #388]	@ (8001cc8 <main+0xf48>)
 8001b44:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8001b48:	4a5d      	ldr	r2, [pc, #372]	@ (8001cc0 <main+0xf40>)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 8001b4e:	4a5a      	ldr	r2, [pc, #360]	@ (8001cb8 <main+0xf38>)
 8001b50:	2303      	movs	r3, #3
 8001b52:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001b54:	e1c5      	b.n	8001ee2 <main+0x1162>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 8001b56:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8001cbc <main+0xf3c>
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f001 fbd4 	bl	8003308 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8001b60:	f001 f974 	bl	8002e4c <micros>
 8001b64:	4b58      	ldr	r3, [pc, #352]	@ (8001cc8 <main+0xf48>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	ebb0 0802 	subs.w	r8, r0, r2
 8001b6e:	eb61 0903 	sbc.w	r9, r1, r3
 8001b72:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce0 <main+0xf60>)
 8001b74:	4598      	cmp	r8, r3
 8001b76:	f179 0300 	sbcs.w	r3, r9, #0
 8001b7a:	d311      	bcc.n	8001ba0 <main+0xe20>
					Set_Motor(1, 15);
 8001b7c:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001b80:	2001      	movs	r0, #1
 8001b82:	f001 fbc1 	bl	8003308 <Set_Motor>
					calib_timer = micros();
 8001b86:	f001 f961 	bl	8002e4c <micros>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	494e      	ldr	r1, [pc, #312]	@ (8001cc8 <main+0xf48>)
 8001b90:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8001b94:	4a4a      	ldr	r2, [pc, #296]	@ (8001cc0 <main+0xf40>)
 8001b96:	2300      	movs	r3, #0
 8001b98:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 8001b9a:	4a47      	ldr	r2, [pc, #284]	@ (8001cb8 <main+0xf38>)
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 15);
 8001ba0:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f001 fbaf 	bl	8003308 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8001baa:	f001 f94f 	bl	8002e4c <micros>
 8001bae:	4b46      	ldr	r3, [pc, #280]	@ (8001cc8 <main+0xf48>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	ebb0 0a02 	subs.w	sl, r0, r2
 8001bb8:	eb61 0b03 	sbc.w	fp, r1, r3
 8001bbc:	4b48      	ldr	r3, [pc, #288]	@ (8001ce0 <main+0xf60>)
 8001bbe:	459a      	cmp	sl, r3
 8001bc0:	f17b 0300 	sbcs.w	r3, fp, #0
 8001bc4:	f0c0 818f 	bcc.w	8001ee6 <main+0x1166>
					Set_Motor(1, 0);
 8001bc8:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8001cbc <main+0xf3c>
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f001 fb9b 	bl	8003308 <Set_Motor>
					calib_timer = micros();
 8001bd2:	f001 f93b 	bl	8002e4c <micros>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	493b      	ldr	r1, [pc, #236]	@ (8001cc8 <main+0xf48>)
 8001bdc:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8001be0:	4a37      	ldr	r2, [pc, #220]	@ (8001cc0 <main+0xf40>)
 8001be2:	2300      	movs	r3, #0
 8001be4:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 8001be6:	4a34      	ldr	r2, [pc, #208]	@ (8001cb8 <main+0xf38>)
 8001be8:	2305      	movs	r3, #5
 8001bea:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001bec:	e17b      	b.n	8001ee6 <main+0x1166>

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 8001bee:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8001cbc <main+0xf3c>
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f001 fb88 	bl	8003308 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8001bf8:	f001 f928 	bl	8002e4c <micros>
 8001bfc:	4b32      	ldr	r3, [pc, #200]	@ (8001cc8 <main+0xf48>)
 8001bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c02:	1a86      	subs	r6, r0, r2
 8001c04:	643e      	str	r6, [r7, #64]	@ 0x40
 8001c06:	eb61 0303 	sbc.w	r3, r1, r3
 8001c0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <main+0xf60>)
 8001c0e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001c12:	4602      	mov	r2, r0
 8001c14:	429a      	cmp	r2, r3
 8001c16:	460b      	mov	r3, r1
 8001c18:	f173 0300 	sbcs.w	r3, r3, #0
 8001c1c:	f0c0 8165 	bcc.w	8001eea <main+0x116a>
					Set_Motor(1, -5);
 8001c20:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8001c24:	2001      	movs	r0, #1
 8001c26:	f001 fb6f 	bl	8003308 <Set_Motor>
					calib_timer = micros();
 8001c2a:	f001 f90f 	bl	8002e4c <micros>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4925      	ldr	r1, [pc, #148]	@ (8001cc8 <main+0xf48>)
 8001c34:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8001c38:	4a21      	ldr	r2, [pc, #132]	@ (8001cc0 <main+0xf40>)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb8 <main+0xf38>)
 8001c40:	2306      	movs	r3, #6
 8001c42:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001c44:	e151      	b.n	8001eea <main+0x116a>

			case CALIB_RETOUCH_P:
				Set_Motor(1, -5);
 8001c46:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f001 fb5c 	bl	8003308 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0) {
 8001c50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c54:	4821      	ldr	r0, [pc, #132]	@ (8001cdc <main+0xf5c>)
 8001c56:	f002 f9b1 	bl	8003fbc <HAL_GPIO_ReadPin>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d004      	beq.n	8001c6a <main+0xeea>
 8001c60:	4b17      	ldr	r3, [pc, #92]	@ (8001cc0 <main+0xf40>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8142 	beq.w	8001eee <main+0x116e>
					Set_Motor(1, 0);
 8001c6a:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001cbc <main+0xf3c>
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f001 fb4a 	bl	8003308 <Set_Motor>
					Reset_P();
 8001c74:	f001 fc00 	bl	8003478 <Reset_P>
					P_Limit = 0;
 8001c78:	4a11      	ldr	r2, [pc, #68]	@ (8001cc0 <main+0xf40>)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 8001c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb8 <main+0xf38>)
 8001c80:	2307      	movs	r3, #7
 8001c82:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001c84:	e133      	b.n	8001eee <main+0x116e>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 8001c86:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <main+0xf54>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d12a      	bne.n	8001ce4 <main+0xf64>
					Set_Motor(0, 30);
 8001c8e:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001c92:	2000      	movs	r0, #0
 8001c94:	f001 fb38 	bl	8003308 <Set_Motor>
 8001c98:	e029      	b.n	8001cee <main+0xf6e>
 8001c9a:	bf00      	nop
 8001c9c:	20000330 	.word	0x20000330
 8001ca0:	3d0b4396 	.word	0x3d0b4396
 8001ca4:	20000334 	.word	0x20000334
 8001ca8:	3dcccccd 	.word	0x3dcccccd
 8001cac:	20000350 	.word	0x20000350
 8001cb0:	000f4240 	.word	0x000f4240
 8001cb4:	20000348 	.word	0x20000348
 8001cb8:	2000039c 	.word	0x2000039c
 8001cbc:	00000000 	.word	0x00000000
 8001cc0:	2000034d 	.word	0x2000034d
 8001cc4:	2000034e 	.word	0x2000034e
 8001cc8:	200003a0 	.word	0x200003a0
 8001ccc:	20000248 	.word	0x20000248
 8001cd0:	42a00000 	.word	0x42a00000
 8001cd4:	200003a8 	.word	0x200003a8
 8001cd8:	c2a00000 	.word	0xc2a00000
 8001cdc:	48000400 	.word	0x48000400
 8001ce0:	000186a1 	.word	0x000186a1
				else
					Set_Motor(0, -30);
 8001ce4:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f001 fb0d 	bl	8003308 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8001cee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cf2:	48ae      	ldr	r0, [pc, #696]	@ (8001fac <main+0x122c>)
 8001cf4:	f002 f962 	bl	8003fbc <HAL_GPIO_ReadPin>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d004      	beq.n	8001d08 <main+0xf88>
 8001cfe:	4bac      	ldr	r3, [pc, #688]	@ (8001fb0 <main+0x1230>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80f5 	beq.w	8001ef2 <main+0x1172>
					Set_Motor(0, 0);
 8001d08:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 8001fb4 <main+0x1234>
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f001 fafb 	bl	8003308 <Set_Motor>
					calib_timer = micros();
 8001d12:	f001 f89b 	bl	8002e4c <micros>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	49a7      	ldr	r1, [pc, #668]	@ (8001fb8 <main+0x1238>)
 8001d1c:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8001d20:	4aa3      	ldr	r2, [pc, #652]	@ (8001fb0 <main+0x1230>)
 8001d22:	2300      	movs	r3, #0
 8001d24:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 8001d26:	4aa5      	ldr	r2, [pc, #660]	@ (8001fbc <main+0x123c>)
 8001d28:	2308      	movs	r3, #8
 8001d2a:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001d2c:	e0e1      	b.n	8001ef2 <main+0x1172>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 8001d2e:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8001fb4 <main+0x1234>
 8001d32:	2000      	movs	r0, #0
 8001d34:	f001 fae8 	bl	8003308 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8001d38:	f001 f888 	bl	8002e4c <micros>
 8001d3c:	4b9e      	ldr	r3, [pc, #632]	@ (8001fb8 <main+0x1238>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	1a86      	subs	r6, r0, r2
 8001d44:	63be      	str	r6, [r7, #56]	@ 0x38
 8001d46:	eb61 0303 	sbc.w	r3, r1, r3
 8001d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d4c:	4b9c      	ldr	r3, [pc, #624]	@ (8001fc0 <main+0x1240>)
 8001d4e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001d52:	4602      	mov	r2, r0
 8001d54:	429a      	cmp	r2, r3
 8001d56:	460b      	mov	r3, r1
 8001d58:	f173 0300 	sbcs.w	r3, r3, #0
 8001d5c:	f0c0 80cb 	bcc.w	8001ef6 <main+0x1176>
					if (Cal_Side == 1)
 8001d60:	4b98      	ldr	r3, [pc, #608]	@ (8001fc4 <main+0x1244>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d105      	bne.n	8001d74 <main+0xff4>
						Set_Motor(0, -30);
 8001d68:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f001 facb 	bl	8003308 <Set_Motor>
 8001d72:	e004      	b.n	8001d7e <main+0xffe>
					else
						Set_Motor(0, 30);
 8001d74:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f001 fac5 	bl	8003308 <Set_Motor>
					calib_timer = micros();
 8001d7e:	f001 f865 	bl	8002e4c <micros>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	498c      	ldr	r1, [pc, #560]	@ (8001fb8 <main+0x1238>)
 8001d88:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8001d8c:	4a88      	ldr	r2, [pc, #544]	@ (8001fb0 <main+0x1230>)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 8001d92:	4a8a      	ldr	r2, [pc, #552]	@ (8001fbc <main+0x123c>)
 8001d94:	2309      	movs	r3, #9
 8001d96:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001d98:	e0ad      	b.n	8001ef6 <main+0x1176>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 8001d9a:	4b8a      	ldr	r3, [pc, #552]	@ (8001fc4 <main+0x1244>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d105      	bne.n	8001dae <main+0x102e>
					Set_Motor(0, -30);
 8001da2:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8001da6:	2000      	movs	r0, #0
 8001da8:	f001 faae 	bl	8003308 <Set_Motor>
 8001dac:	e004      	b.n	8001db8 <main+0x1038>
				else
					Set_Motor(0, 30);
 8001dae:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001db2:	2000      	movs	r0, #0
 8001db4:	f001 faa8 	bl	8003308 <Set_Motor>

				if (micros() - calib_timer > 200000) {
 8001db8:	f001 f848 	bl	8002e4c <micros>
 8001dbc:	4b7e      	ldr	r3, [pc, #504]	@ (8001fb8 <main+0x1238>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	1a86      	subs	r6, r0, r2
 8001dc4:	633e      	str	r6, [r7, #48]	@ 0x30
 8001dc6:	eb61 0303 	sbc.w	r3, r1, r3
 8001dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dcc:	4b7e      	ldr	r3, [pc, #504]	@ (8001fc8 <main+0x1248>)
 8001dce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	f173 0300 	sbcs.w	r3, r3, #0
 8001ddc:	f0c0 808d 	bcc.w	8001efa <main+0x117a>
					Set_Motor(0, 0);
 8001de0:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8001fb4 <main+0x1234>
 8001de4:	2000      	movs	r0, #0
 8001de6:	f001 fa8f 	bl	8003308 <Set_Motor>
					calib_timer = micros();
 8001dea:	f001 f82f 	bl	8002e4c <micros>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4971      	ldr	r1, [pc, #452]	@ (8001fb8 <main+0x1238>)
 8001df4:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8001df8:	4a6d      	ldr	r2, [pc, #436]	@ (8001fb0 <main+0x1230>)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 8001dfe:	4a6f      	ldr	r2, [pc, #444]	@ (8001fbc <main+0x123c>)
 8001e00:	230a      	movs	r3, #10
 8001e02:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001e04:	e079      	b.n	8001efa <main+0x117a>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 8001e06:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8001fb4 <main+0x1234>
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f001 fa7c 	bl	8003308 <Set_Motor>

				if (micros() - calib_timer > 100000) {
 8001e10:	f001 f81c 	bl	8002e4c <micros>
 8001e14:	4b68      	ldr	r3, [pc, #416]	@ (8001fb8 <main+0x1238>)
 8001e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1a:	1a86      	subs	r6, r0, r2
 8001e1c:	62be      	str	r6, [r7, #40]	@ 0x28
 8001e1e:	eb61 0303 	sbc.w	r3, r1, r3
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e24:	4b66      	ldr	r3, [pc, #408]	@ (8001fc0 <main+0x1240>)
 8001e26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	460b      	mov	r3, r1
 8001e30:	f173 0300 	sbcs.w	r3, r3, #0
 8001e34:	d363      	bcc.n	8001efe <main+0x117e>
					if (Cal_Side == 1)
 8001e36:	4b63      	ldr	r3, [pc, #396]	@ (8001fc4 <main+0x1244>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d105      	bne.n	8001e4a <main+0x10ca>
						Set_Motor(0, 15);
 8001e3e:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001e42:	2000      	movs	r0, #0
 8001e44:	f001 fa60 	bl	8003308 <Set_Motor>
 8001e48:	e004      	b.n	8001e54 <main+0x10d4>
					else
						Set_Motor(0, -15);
 8001e4a:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f001 fa5a 	bl	8003308 <Set_Motor>
					calib_timer = micros();
 8001e54:	f000 fffa 	bl	8002e4c <micros>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4956      	ldr	r1, [pc, #344]	@ (8001fb8 <main+0x1238>)
 8001e5e:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8001e62:	4a53      	ldr	r2, [pc, #332]	@ (8001fb0 <main+0x1230>)
 8001e64:	2300      	movs	r3, #0
 8001e66:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 8001e68:	4a54      	ldr	r2, [pc, #336]	@ (8001fbc <main+0x123c>)
 8001e6a:	230b      	movs	r3, #11
 8001e6c:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001e6e:	e046      	b.n	8001efe <main+0x117e>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 8001e70:	4b54      	ldr	r3, [pc, #336]	@ (8001fc4 <main+0x1244>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <main+0x1104>
					Set_Motor(0, 15);
 8001e78:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f001 fa43 	bl	8003308 <Set_Motor>
 8001e82:	e004      	b.n	8001e8e <main+0x110e>
				else
					Set_Motor(0, -15);
 8001e84:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f001 fa3d 	bl	8003308 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
 8001e8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e92:	4846      	ldr	r0, [pc, #280]	@ (8001fac <main+0x122c>)
 8001e94:	f002 f892 	bl	8003fbc <HAL_GPIO_ReadPin>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d003      	beq.n	8001ea6 <main+0x1126>
 8001e9e:	4b44      	ldr	r3, [pc, #272]	@ (8001fb0 <main+0x1230>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d02d      	beq.n	8001f02 <main+0x1182>
					Set_Motor(0, 0);
 8001ea6:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8001fb4 <main+0x1234>
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f001 fa2c 	bl	8003308 <Set_Motor>
					Reset_R();
 8001eb0:	f001 fad2 	bl	8003458 <Reset_R>
					R_Limit = 0;
 8001eb4:	4a3e      	ldr	r2, [pc, #248]	@ (8001fb0 <main+0x1230>)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 8001eba:	4a40      	ldr	r2, [pc, #256]	@ (8001fbc <main+0x123c>)
 8001ebc:	230c      	movs	r3, #12
 8001ebe:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001ec0:	e01f      	b.n	8001f02 <main+0x1182>

			case CALIB_DONE:
				Cal_Side = 0;
 8001ec2:	4a40      	ldr	r2, [pc, #256]	@ (8001fc4 <main+0x1244>)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 8001ec8:	4a40      	ldr	r2, [pc, #256]	@ (8001fcc <main+0x124c>)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 8001ece:	4a40      	ldr	r2, [pc, #256]	@ (8001fd0 <main+0x1250>)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 8001ed4:	4a36      	ldr	r2, [pc, #216]	@ (8001fb0 <main+0x1230>)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8001eda:	4a38      	ldr	r2, [pc, #224]	@ (8001fbc <main+0x123c>)
 8001edc:	2300      	movs	r3, #0
 8001ede:	7013      	strb	r3, [r2, #0]
				break;
 8001ee0:	e010      	b.n	8001f04 <main+0x1184>
				break;
 8001ee2:	bf00      	nop
 8001ee4:	e00e      	b.n	8001f04 <main+0x1184>
				break;
 8001ee6:	bf00      	nop
 8001ee8:	e00c      	b.n	8001f04 <main+0x1184>
				break;
 8001eea:	bf00      	nop
 8001eec:	e00a      	b.n	8001f04 <main+0x1184>
				break;
 8001eee:	bf00      	nop
 8001ef0:	e008      	b.n	8001f04 <main+0x1184>
				break;
 8001ef2:	bf00      	nop
 8001ef4:	e006      	b.n	8001f04 <main+0x1184>
				break;
 8001ef6:	bf00      	nop
 8001ef8:	e004      	b.n	8001f04 <main+0x1184>
				break;
 8001efa:	bf00      	nop
 8001efc:	e002      	b.n	8001f04 <main+0x1184>
				break;
 8001efe:	bf00      	nop
 8001f00:	e000      	b.n	8001f04 <main+0x1184>
				break;
 8001f02:	bf00      	nop
		}
		//////////////////////////////////////////////////////////////


		//////////////////////////////////////////////////////////////
		if(Mode == 6){
 8001f04:	4b31      	ldr	r3, [pc, #196]	@ (8001fcc <main+0x124c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b06      	cmp	r3, #6
 8001f0a:	d102      	bne.n	8001f12 <main+0x1192>
			Set_Servo(0);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f001 fa79 	bl	8003404 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////


		//////////////////////////////////////////////////////////////
		if(Mode == 7){
 8001f12:	4b2e      	ldr	r3, [pc, #184]	@ (8001fcc <main+0x124c>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b07      	cmp	r3, #7
 8001f18:	d102      	bne.n	8001f20 <main+0x11a0>
			Set_Servo(1);
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f001 fa72 	bl	8003404 <Set_Servo>
		}
		//////////////////////////////////////////////////////////////


		//////////////////////////////////////////////////////////////
		if(Mode == 8){
 8001f20:	4b2a      	ldr	r3, [pc, #168]	@ (8001fcc <main+0x124c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	f47e af91 	bne.w	8000e4c <main+0xcc>
			static uint64_t pen_delay_timer;
			if (loop_counter == 1 && micros() - pen_delay_timer < 300000){
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd4 <main+0x1254>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d120      	bne.n	8001f74 <main+0x11f4>
 8001f32:	f000 ff8b 	bl	8002e4c <micros>
 8001f36:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <main+0x1258>)
 8001f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3c:	1a86      	subs	r6, r0, r2
 8001f3e:	623e      	str	r6, [r7, #32]
 8001f40:	eb61 0303 	sbc.w	r3, r1, r3
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f46:	4b25      	ldr	r3, [pc, #148]	@ (8001fdc <main+0x125c>)
 8001f48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	460b      	mov	r3, r1
 8001f52:	f173 0300 	sbcs.w	r3, r3, #0
 8001f56:	d20d      	bcs.n	8001f74 <main+0x11f4>
				Set_Motor(0, 0);
 8001f58:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8001fb4 <main+0x1234>
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f001 f9d3 	bl	8003308 <Set_Motor>
				Set_Motor(1, 0);
 8001f62:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001fb4 <main+0x1234>
 8001f66:	2001      	movs	r0, #1
 8001f68:	f001 f9ce 	bl	8003308 <Set_Motor>
				Set_Servo(1);
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f001 fa49 	bl	8003404 <Set_Servo>
 8001f72:	e175      	b.n	8002260 <main+0x14e0>
			}
			else if (loop_counter == 1 && micros() - pen_delay_timer < 500000){
 8001f74:	4b17      	ldr	r3, [pc, #92]	@ (8001fd4 <main+0x1254>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d133      	bne.n	8001fe4 <main+0x1264>
 8001f7c:	f000 ff66 	bl	8002e4c <micros>
 8001f80:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <main+0x1258>)
 8001f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f86:	1a86      	subs	r6, r0, r2
 8001f88:	61be      	str	r6, [r7, #24]
 8001f8a:	eb61 0303 	sbc.w	r3, r1, r3
 8001f8e:	61fb      	str	r3, [r7, #28]
 8001f90:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <main+0x1260>)
 8001f92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f96:	4602      	mov	r2, r0
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	f173 0300 	sbcs.w	r3, r3, #0
 8001fa0:	d220      	bcs.n	8001fe4 <main+0x1264>
				Set_Servo(0);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f001 fa2e 	bl	8003404 <Set_Servo>
 8001fa8:	e15a      	b.n	8002260 <main+0x14e0>
 8001faa:	bf00      	nop
 8001fac:	48000400 	.word	0x48000400
 8001fb0:	2000034e 	.word	0x2000034e
 8001fb4:	00000000 	.word	0x00000000
 8001fb8:	200003a0 	.word	0x200003a0
 8001fbc:	2000039c 	.word	0x2000039c
 8001fc0:	000186a1 	.word	0x000186a1
 8001fc4:	200003a8 	.word	0x200003a8
 8001fc8:	00030d41 	.word	0x00030d41
 8001fcc:	20000348 	.word	0x20000348
 8001fd0:	2000034d 	.word	0x2000034d
 8001fd4:	200003b8 	.word	0x200003b8
 8001fd8:	200003e0 	.word	0x200003e0
 8001fdc:	000493e0 	.word	0x000493e0
 8001fe0:	0007a120 	.word	0x0007a120
			}
			else if (loop_counter < 100) {
 8001fe4:	4b9f      	ldr	r3, [pc, #636]	@ (8002264 <main+0x14e4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b63      	cmp	r3, #99	@ 0x63
 8001fea:	f300 810e 	bgt.w	800220a <main+0x148a>
				static uint16_t loop_temp = 0;
				Set_Servo(0);
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f001 fa08 	bl	8003404 <Set_Servo>

				R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8001ff4:	4b9c      	ldr	r3, [pc, #624]	@ (8002268 <main+0x14e8>)
 8001ff6:	ed93 7a00 	vldr	s14, [r3]
 8001ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800226c <main+0x14ec>)
 8001ffc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002000:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002004:	4b9a      	ldr	r3, [pc, #616]	@ (8002270 <main+0x14f0>)
 8002006:	edc3 7a00 	vstr	s15, [r3]
				P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 800200a:	4b9a      	ldr	r3, [pc, #616]	@ (8002274 <main+0x14f4>)
 800200c:	ed93 7a00 	vldr	s14, [r3]
 8002010:	4b99      	ldr	r3, [pc, #612]	@ (8002278 <main+0x14f8>)
 8002012:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800201a:	4b98      	ldr	r3, [pc, #608]	@ (800227c <main+0x14fc>)
 800201c:	edc3 7a00 	vstr	s15, [r3]

				static uint64_t timestampState8 = 0;
				int64_t currentTimeState8 = micros();
 8002020:	f000 ff14 	bl	8002e4c <micros>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
				if (currentTimeState8 > timestampState8) {
 800202c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002030:	4b93      	ldr	r3, [pc, #588]	@ (8002280 <main+0x1500>)
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	4282      	cmp	r2, r0
 8002038:	418b      	sbcs	r3, r1
 800203a:	d241      	bcs.n	80020c0 <main+0x1340>
					timestampState8 = currentTimeState8 + 10000;		//us
 800203c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002040:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002044:	1851      	adds	r1, r2, r1
 8002046:	6139      	str	r1, [r7, #16]
 8002048:	f143 0300 	adc.w	r3, r3, #0
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002052:	4b8b      	ldr	r3, [pc, #556]	@ (8002280 <main+0x1500>)
 8002054:	e9c3 0100 	strd	r0, r1, [r3]
					R_Speed = -1*(PID_Update(R_Pos_Error, 16.00f, 5.00f, 8.00f, 0.01f, -100.0f, 100.0f, &pid_r));
 8002058:	4b85      	ldr	r3, [pc, #532]	@ (8002270 <main+0x14f0>)
 800205a:	edd3 7a00 	vldr	s15, [r3]
 800205e:	4889      	ldr	r0, [pc, #548]	@ (8002284 <main+0x1504>)
 8002060:	ed9f 3a89 	vldr	s6, [pc, #548]	@ 8002288 <main+0x1508>
 8002064:	eddf 2a89 	vldr	s5, [pc, #548]	@ 800228c <main+0x150c>
 8002068:	ed9f 2a89 	vldr	s4, [pc, #548]	@ 8002290 <main+0x1510>
 800206c:	eef2 1a00 	vmov.f32	s3, #32	@ 0x41000000  8.0
 8002070:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8002074:	eef3 0a00 	vmov.f32	s1, #48	@ 0x41800000  16.0
 8002078:	eeb0 0a67 	vmov.f32	s0, s15
 800207c:	f000 ff00 	bl	8002e80 <PID_Update>
 8002080:	eef0 7a40 	vmov.f32	s15, s0
 8002084:	eef1 7a67 	vneg.f32	s15, s15
 8002088:	4b82      	ldr	r3, [pc, #520]	@ (8002294 <main+0x1514>)
 800208a:	edc3 7a00 	vstr	s15, [r3]
					P_Speed = PID_Update(P_Pos_Error, 0.333f, 1.20f, 0.15f, 0.01f, -100.0f, 100.0f, &pid_p);
 800208e:	4b7b      	ldr	r3, [pc, #492]	@ (800227c <main+0x14fc>)
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	4880      	ldr	r0, [pc, #512]	@ (8002298 <main+0x1518>)
 8002096:	ed9f 3a7c 	vldr	s6, [pc, #496]	@ 8002288 <main+0x1508>
 800209a:	eddf 2a7c 	vldr	s5, [pc, #496]	@ 800228c <main+0x150c>
 800209e:	ed9f 2a7c 	vldr	s4, [pc, #496]	@ 8002290 <main+0x1510>
 80020a2:	eddf 1a7e 	vldr	s3, [pc, #504]	@ 800229c <main+0x151c>
 80020a6:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 80022a0 <main+0x1520>
 80020aa:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 80022a4 <main+0x1524>
 80020ae:	eeb0 0a67 	vmov.f32	s0, s15
 80020b2:	f000 fee5 	bl	8002e80 <PID_Update>
 80020b6:	eef0 7a40 	vmov.f32	s15, s0
 80020ba:	4b7b      	ldr	r3, [pc, #492]	@ (80022a8 <main+0x1528>)
 80020bc:	edc3 7a00 	vstr	s15, [r3]
				}

				Set_Motor(0, R_Speed);
 80020c0:	4b74      	ldr	r3, [pc, #464]	@ (8002294 <main+0x1514>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ca:	2000      	movs	r0, #0
 80020cc:	f001 f91c 	bl	8003308 <Set_Motor>
				Set_Motor(1, P_Speed);
 80020d0:	4b75      	ldr	r3, [pc, #468]	@ (80022a8 <main+0x1528>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	eeb0 0a67 	vmov.f32	s0, s15
 80020da:	2001      	movs	r0, #1
 80020dc:	f001 f914 	bl	8003308 <Set_Motor>
				if (fabsf(R_Pos_Error) < R_ERR_TOL_RAD
 80020e0:	4b63      	ldr	r3, [pc, #396]	@ (8002270 <main+0x14f0>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	eef0 7ae7 	vabs.f32	s15, s15
 80020ea:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80022ac <main+0x152c>
 80020ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f6:	d57f      	bpl.n	80021f8 <main+0x1478>
						&& fabsf(P_Pos_Error) < P_ERR_TOL_MM) {
 80020f8:	4b60      	ldr	r3, [pc, #384]	@ (800227c <main+0x14fc>)
 80020fa:	edd3 7a00 	vldr	s15, [r3]
 80020fe:	eef0 7ae7 	vabs.f32	s15, s15
 8002102:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80022b0 <main+0x1530>
 8002106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800210a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210e:	d573      	bpl.n	80021f8 <main+0x1478>
					/* within window —— start or continue timer */
					if (lock_timer_us == 0)
 8002110:	4b68      	ldr	r3, [pc, #416]	@ (80022b4 <main+0x1534>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	4313      	orrs	r3, r2
 8002118:	d107      	bne.n	800212a <main+0x13aa>
						lock_timer_us = micros(); /* start timing */
 800211a:	f000 fe97 	bl	8002e4c <micros>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4964      	ldr	r1, [pc, #400]	@ (80022b4 <main+0x1534>)
 8002124:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 8002128:	e099      	b.n	800225e <main+0x14de>

					else if ((micros() - lock_timer_us) >= HOLD_TIME_US) {
 800212a:	f000 fe8f 	bl	8002e4c <micros>
 800212e:	4b61      	ldr	r3, [pc, #388]	@ (80022b4 <main+0x1534>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	1a86      	subs	r6, r0, r2
 8002136:	60be      	str	r6, [r7, #8]
 8002138:	eb61 0303 	sbc.w	r3, r1, r3
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b5e      	ldr	r3, [pc, #376]	@ (80022b8 <main+0x1538>)
 8002140:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002144:	4602      	mov	r2, r0
 8002146:	429a      	cmp	r2, r3
 8002148:	460b      	mov	r3, r1
 800214a:	f173 0300 	sbcs.w	r3, r3, #0
 800214e:	f0c0 8086 	bcc.w	800225e <main+0x14de>
						if(loop_temp == 0){
 8002152:	4b5a      	ldr	r3, [pc, #360]	@ (80022bc <main+0x153c>)
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d119      	bne.n	800218e <main+0x140e>
							pid_r.integ = 0;
 800215a:	4a4a      	ldr	r2, [pc, #296]	@ (8002284 <main+0x1504>)
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 8002162:	4a48      	ldr	r2, [pc, #288]	@ (8002284 <main+0x1504>)
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 800216a:	4a4b      	ldr	r2, [pc, #300]	@ (8002298 <main+0x1518>)
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 8002172:	4a49      	ldr	r2, [pc, #292]	@ (8002298 <main+0x1518>)
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	6053      	str	r3, [r2, #4]
							TargetR = -1.0472;
 800217a:	4a3b      	ldr	r2, [pc, #236]	@ (8002268 <main+0x14e8>)
 800217c:	4b50      	ldr	r3, [pc, #320]	@ (80022c0 <main+0x1540>)
 800217e:	6013      	str	r3, [r2, #0]
							TargetP = 250;
 8002180:	4a3c      	ldr	r2, [pc, #240]	@ (8002274 <main+0x14f4>)
 8002182:	4b50      	ldr	r3, [pc, #320]	@ (80022c4 <main+0x1544>)
 8002184:	6013      	str	r3, [r2, #0]
							loop_temp = 1;
 8002186:	4a4d      	ldr	r2, [pc, #308]	@ (80022bc <main+0x153c>)
 8002188:	2301      	movs	r3, #1
 800218a:	8013      	strh	r3, [r2, #0]
					if (lock_timer_us == 0)
 800218c:	e067      	b.n	800225e <main+0x14de>
						}
						else{
							pid_r.integ = 0;
 800218e:	4a3d      	ldr	r2, [pc, #244]	@ (8002284 <main+0x1504>)
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	6013      	str	r3, [r2, #0]
							pid_r.prevError = 0;
 8002196:	4a3b      	ldr	r2, [pc, #236]	@ (8002284 <main+0x1504>)
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	6053      	str	r3, [r2, #4]
							pid_p.integ = 0;
 800219e:	4a3e      	ldr	r2, [pc, #248]	@ (8002298 <main+0x1518>)
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	6013      	str	r3, [r2, #0]
							pid_p.prevError = 0;
 80021a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002298 <main+0x1518>)
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	6053      	str	r3, [r2, #4]
							TargetR = 4.18879;
 80021ae:	4a2e      	ldr	r2, [pc, #184]	@ (8002268 <main+0x14e8>)
 80021b0:	4b45      	ldr	r3, [pc, #276]	@ (80022c8 <main+0x1548>)
 80021b2:	6013      	str	r3, [r2, #0]
							TargetP = 50;
 80021b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002274 <main+0x14f4>)
 80021b6:	4b45      	ldr	r3, [pc, #276]	@ (80022cc <main+0x154c>)
 80021b8:	6013      	str	r3, [r2, #0]
							loop_temp = 0;
 80021ba:	4a40      	ldr	r2, [pc, #256]	@ (80022bc <main+0x153c>)
 80021bc:	2300      	movs	r3, #0
 80021be:	8013      	strh	r3, [r2, #0]
							loop_counter++;
 80021c0:	4b28      	ldr	r3, [pc, #160]	@ (8002264 <main+0x14e4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	4b27      	ldr	r3, [pc, #156]	@ (8002264 <main+0x14e4>)
 80021c8:	601a      	str	r2, [r3, #0]
							if(loop_counter == 1){
 80021ca:	4b26      	ldr	r3, [pc, #152]	@ (8002264 <main+0x14e4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d106      	bne.n	80021e0 <main+0x1460>
								pen_delay_timer = micros();
 80021d2:	f000 fe3b 	bl	8002e4c <micros>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	493d      	ldr	r1, [pc, #244]	@ (80022d0 <main+0x1550>)
 80021dc:	e9c1 2300 	strd	r2, r3, [r1]
							}
							if(loop_counter == 100){
 80021e0:	4b20      	ldr	r3, [pc, #128]	@ (8002264 <main+0x14e4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b64      	cmp	r3, #100	@ 0x64
 80021e6:	d13a      	bne.n	800225e <main+0x14de>
								pen_delay_timer = micros();
 80021e8:	f000 fe30 	bl	8002e4c <micros>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4937      	ldr	r1, [pc, #220]	@ (80022d0 <main+0x1550>)
 80021f2:	e9c1 2300 	strd	r2, r3, [r1]
					if (lock_timer_us == 0)
 80021f6:	e032      	b.n	800225e <main+0x14de>
							}
						}
					}
				} else {
					lock_timer_us = 0;
 80021f8:	492e      	ldr	r1, [pc, #184]	@ (80022b4 <main+0x1534>)
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	e9c1 2300 	strd	r2, r3, [r1]
 8002206:	f7fe be21 	b.w	8000e4c <main+0xcc>
				}
			}
			else{
				if (micros() - pen_delay_timer < 500000) {
 800220a:	f000 fe1f 	bl	8002e4c <micros>
 800220e:	4b30      	ldr	r3, [pc, #192]	@ (80022d0 <main+0x1550>)
 8002210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002214:	1a86      	subs	r6, r0, r2
 8002216:	603e      	str	r6, [r7, #0]
 8002218:	eb61 0303 	sbc.w	r3, r1, r3
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	4b2d      	ldr	r3, [pc, #180]	@ (80022d4 <main+0x1554>)
 8002220:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002224:	4602      	mov	r2, r0
 8002226:	429a      	cmp	r2, r3
 8002228:	460b      	mov	r3, r1
 800222a:	f173 0300 	sbcs.w	r3, r3, #0
 800222e:	d20e      	bcs.n	800224e <main+0x14ce>
					Set_Motor(0, 0);
 8002230:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 80022d8 <main+0x1558>
 8002234:	2000      	movs	r0, #0
 8002236:	f001 f867 	bl	8003308 <Set_Motor>
					Set_Motor(1, 0);
 800223a:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80022d8 <main+0x1558>
 800223e:	2001      	movs	r0, #1
 8002240:	f001 f862 	bl	8003308 <Set_Motor>
					Set_Servo(1);
 8002244:	2001      	movs	r0, #1
 8002246:	f001 f8dd 	bl	8003404 <Set_Servo>
 800224a:	f7fe bdff 	b.w	8000e4c <main+0xcc>
				} else {
					Set_Servo(0);
 800224e:	2000      	movs	r0, #0
 8002250:	f001 f8d8 	bl	8003404 <Set_Servo>
					Mode = 0;
 8002254:	4a21      	ldr	r2, [pc, #132]	@ (80022dc <main+0x155c>)
 8002256:	2300      	movs	r3, #0
 8002258:	7013      	strb	r3, [r2, #0]
 800225a:	f7fe bdf7 	b.w	8000e4c <main+0xcc>
					if (lock_timer_us == 0)
 800225e:	bf00      	nop
  {
 8002260:	f7fe bdf4 	b.w	8000e4c <main+0xcc>
 8002264:	200003b8 	.word	0x200003b8
 8002268:	20000320 	.word	0x20000320
 800226c:	20000290 	.word	0x20000290
 8002270:	20000330 	.word	0x20000330
 8002274:	20000324 	.word	0x20000324
 8002278:	200002d0 	.word	0x200002d0
 800227c:	20000334 	.word	0x20000334
 8002280:	200003e8 	.word	0x200003e8
 8002284:	2000037c 	.word	0x2000037c
 8002288:	42c80000 	.word	0x42c80000
 800228c:	c2c80000 	.word	0xc2c80000
 8002290:	3c23d70a 	.word	0x3c23d70a
 8002294:	20000340 	.word	0x20000340
 8002298:	20000384 	.word	0x20000384
 800229c:	3e19999a 	.word	0x3e19999a
 80022a0:	3f99999a 	.word	0x3f99999a
 80022a4:	3eaa7efa 	.word	0x3eaa7efa
 80022a8:	20000344 	.word	0x20000344
 80022ac:	3d0b4396 	.word	0x3d0b4396
 80022b0:	3dcccccd 	.word	0x3dcccccd
 80022b4:	20000350 	.word	0x20000350
 80022b8:	000f4240 	.word	0x000f4240
 80022bc:	200003f0 	.word	0x200003f0
 80022c0:	bf860aa6 	.word	0xbf860aa6
 80022c4:	437a0000 	.word	0x437a0000
 80022c8:	40860a91 	.word	0x40860a91
 80022cc:	42480000 	.word	0x42480000
 80022d0:	200003e0 	.word	0x200003e0
 80022d4:	0007a120 	.word	0x0007a120
 80022d8:	00000000 	.word	0x00000000
 80022dc:	20000348 	.word	0x20000348

080022e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b094      	sub	sp, #80	@ 0x50
 80022e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e6:	f107 0318 	add.w	r3, r7, #24
 80022ea:	2238      	movs	r2, #56	@ 0x38
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f004 fe6a 	bl	8006fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002302:	2000      	movs	r0, #0
 8002304:	f001 fea2 	bl	800404c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002308:	2302      	movs	r3, #2
 800230a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800230c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002310:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002312:	2340      	movs	r3, #64	@ 0x40
 8002314:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002316:	2302      	movs	r3, #2
 8002318:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800231a:	2302      	movs	r3, #2
 800231c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800231e:	2304      	movs	r3, #4
 8002320:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002322:	2355      	movs	r3, #85	@ 0x55
 8002324:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002326:	2302      	movs	r3, #2
 8002328:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800232a:	2302      	movs	r3, #2
 800232c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800232e:	2302      	movs	r3, #2
 8002330:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002332:	f107 0318 	add.w	r3, r7, #24
 8002336:	4618      	mov	r0, r3
 8002338:	f001 ff3c 	bl	80041b4 <HAL_RCC_OscConfig>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002342:	f001 f8ab 	bl	800349c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002346:	230f      	movs	r3, #15
 8002348:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800234a:	2303      	movs	r3, #3
 800234c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	2104      	movs	r1, #4
 800235e:	4618      	mov	r0, r3
 8002360:	f002 fa3a 	bl	80047d8 <HAL_RCC_ClockConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800236a:	f001 f897 	bl	800349c <Error_Handler>
  }
}
 800236e:	bf00      	nop
 8002370:	3750      	adds	r7, #80	@ 0x50
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08c      	sub	sp, #48	@ 0x30
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
 800238c:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239c:	463b      	mov	r3, r7
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023a6:	4b35      	ldr	r3, [pc, #212]	@ (800247c <MX_TIM1_Init+0x104>)
 80023a8:	4a35      	ldr	r2, [pc, #212]	@ (8002480 <MX_TIM1_Init+0x108>)
 80023aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80023ac:	4b33      	ldr	r3, [pc, #204]	@ (800247c <MX_TIM1_Init+0x104>)
 80023ae:	22a9      	movs	r2, #169	@ 0xa9
 80023b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b2:	4b32      	ldr	r3, [pc, #200]	@ (800247c <MX_TIM1_Init+0x104>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80023b8:	4b30      	ldr	r3, [pc, #192]	@ (800247c <MX_TIM1_Init+0x104>)
 80023ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c0:	4b2e      	ldr	r3, [pc, #184]	@ (800247c <MX_TIM1_Init+0x104>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023c6:	4b2d      	ldr	r3, [pc, #180]	@ (800247c <MX_TIM1_Init+0x104>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023cc:	4b2b      	ldr	r3, [pc, #172]	@ (800247c <MX_TIM1_Init+0x104>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80023d2:	482a      	ldr	r0, [pc, #168]	@ (800247c <MX_TIM1_Init+0x104>)
 80023d4:	f002 fe98 	bl	8005108 <HAL_TIM_IC_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80023de:	f001 f85d 	bl	800349c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80023e2:	2304      	movs	r3, #4
 80023e4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80023e6:	2360      	movs	r3, #96	@ 0x60
 80023e8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80023ea:	2302      	movs	r3, #2
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80023ee:	2300      	movs	r3, #0
 80023f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	4619      	mov	r1, r3
 80023fc:	481f      	ldr	r0, [pc, #124]	@ (800247c <MX_TIM1_Init+0x104>)
 80023fe:	f003 fd29 	bl	8005e54 <HAL_TIM_SlaveConfigSynchro>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002408:	f001 f848 	bl	800349c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002410:	2302      	movs	r3, #2
 8002412:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	2200      	movs	r2, #0
 8002422:	4619      	mov	r1, r3
 8002424:	4815      	ldr	r0, [pc, #84]	@ (800247c <MX_TIM1_Init+0x104>)
 8002426:	f003 fa4e 	bl	80058c6 <HAL_TIM_IC_ConfigChannel>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002430:	f001 f834 	bl	800349c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002434:	2302      	movs	r3, #2
 8002436:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002438:	2301      	movs	r3, #1
 800243a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	2204      	movs	r2, #4
 8002442:	4619      	mov	r1, r3
 8002444:	480d      	ldr	r0, [pc, #52]	@ (800247c <MX_TIM1_Init+0x104>)
 8002446:	f003 fa3e 	bl	80058c6 <HAL_TIM_IC_ConfigChannel>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002450:	f001 f824 	bl	800349c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002454:	2300      	movs	r3, #0
 8002456:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002458:	2300      	movs	r3, #0
 800245a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002460:	463b      	mov	r3, r7
 8002462:	4619      	mov	r1, r3
 8002464:	4805      	ldr	r0, [pc, #20]	@ (800247c <MX_TIM1_Init+0x104>)
 8002466:	f004 fc09 	bl	8006c7c <HAL_TIMEx_MasterConfigSynchronization>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002470:	f001 f814 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002474:	bf00      	nop
 8002476:	3730      	adds	r7, #48	@ 0x30
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	2000002c 	.word	0x2000002c
 8002480:	40012c00 	.word	0x40012c00

08002484 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	@ 0x30
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800248a:	f107 031c 	add.w	r3, r7, #28
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
 8002498:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800249a:	f107 030c 	add.w	r3, r7, #12
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a8:	463b      	mov	r3, r7
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024b2:	4b33      	ldr	r3, [pc, #204]	@ (8002580 <MX_TIM2_Init+0xfc>)
 80024b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80024ba:	4b31      	ldr	r3, [pc, #196]	@ (8002580 <MX_TIM2_Init+0xfc>)
 80024bc:	22a9      	movs	r2, #169	@ 0xa9
 80024be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002580 <MX_TIM2_Init+0xfc>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80024c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002580 <MX_TIM2_Init+0xfc>)
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002580 <MX_TIM2_Init+0xfc>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002580 <MX_TIM2_Init+0xfc>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80024da:	4829      	ldr	r0, [pc, #164]	@ (8002580 <MX_TIM2_Init+0xfc>)
 80024dc:	f002 fe14 	bl	8005108 <HAL_TIM_IC_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80024e6:	f000 ffd9 	bl	800349c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80024ea:	2304      	movs	r3, #4
 80024ec:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80024ee:	2350      	movs	r3, #80	@ 0x50
 80024f0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80024f6:	2300      	movs	r3, #0
 80024f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80024fe:	f107 031c 	add.w	r3, r7, #28
 8002502:	4619      	mov	r1, r3
 8002504:	481e      	ldr	r0, [pc, #120]	@ (8002580 <MX_TIM2_Init+0xfc>)
 8002506:	f003 fca5 	bl	8005e54 <HAL_TIM_SlaveConfigSynchro>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002510:	f000 ffc4 	bl	800349c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002518:	2301      	movs	r3, #1
 800251a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	2200      	movs	r2, #0
 800252a:	4619      	mov	r1, r3
 800252c:	4814      	ldr	r0, [pc, #80]	@ (8002580 <MX_TIM2_Init+0xfc>)
 800252e:	f003 f9ca 	bl	80058c6 <HAL_TIM_IC_ConfigChannel>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002538:	f000 ffb0 	bl	800349c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800253c:	2302      	movs	r3, #2
 800253e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002540:	2302      	movs	r3, #2
 8002542:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	2204      	movs	r2, #4
 800254a:	4619      	mov	r1, r3
 800254c:	480c      	ldr	r0, [pc, #48]	@ (8002580 <MX_TIM2_Init+0xfc>)
 800254e:	f003 f9ba 	bl	80058c6 <HAL_TIM_IC_ConfigChannel>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002558:	f000 ffa0 	bl	800349c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255c:	2300      	movs	r3, #0
 800255e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002564:	463b      	mov	r3, r7
 8002566:	4619      	mov	r1, r3
 8002568:	4805      	ldr	r0, [pc, #20]	@ (8002580 <MX_TIM2_Init+0xfc>)
 800256a:	f004 fb87 	bl	8006c7c <HAL_TIMEx_MasterConfigSynchronization>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8002574:	f000 ff92 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002578:	bf00      	nop
 800257a:	3730      	adds	r7, #48	@ 0x30
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000078 	.word	0x20000078

08002584 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08c      	sub	sp, #48	@ 0x30
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	2224      	movs	r2, #36	@ 0x24
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f004 fd18 	bl	8006fc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002598:	463b      	mov	r3, r7
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025a2:	4b21      	ldr	r3, [pc, #132]	@ (8002628 <MX_TIM3_Init+0xa4>)
 80025a4:	4a21      	ldr	r2, [pc, #132]	@ (800262c <MX_TIM3_Init+0xa8>)
 80025a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002628 <MX_TIM3_Init+0xa4>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002628 <MX_TIM3_Init+0xa4>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002628 <MX_TIM3_Init+0xa4>)
 80025b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002628 <MX_TIM3_Init+0xa4>)
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c2:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <MX_TIM3_Init+0xa4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025c8:	2303      	movs	r3, #3
 80025ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025d0:	2301      	movs	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025dc:	2300      	movs	r3, #0
 80025de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025e0:	2301      	movs	r3, #1
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025e4:	2300      	movs	r3, #0
 80025e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80025ec:	f107 030c 	add.w	r3, r7, #12
 80025f0:	4619      	mov	r1, r3
 80025f2:	480d      	ldr	r0, [pc, #52]	@ (8002628 <MX_TIM3_Init+0xa4>)
 80025f4:	f002 fee4 	bl	80053c0 <HAL_TIM_Encoder_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80025fe:	f000 ff4d 	bl	800349c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800260a:	463b      	mov	r3, r7
 800260c:	4619      	mov	r1, r3
 800260e:	4806      	ldr	r0, [pc, #24]	@ (8002628 <MX_TIM3_Init+0xa4>)
 8002610:	f004 fb34 	bl	8006c7c <HAL_TIMEx_MasterConfigSynchronization>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800261a:	f000 ff3f 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	3730      	adds	r7, #48	@ 0x30
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200000c4 	.word	0x200000c4
 800262c:	40000400 	.word	0x40000400

08002630 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08c      	sub	sp, #48	@ 0x30
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002636:	f107 030c 	add.w	r3, r7, #12
 800263a:	2224      	movs	r2, #36	@ 0x24
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f004 fcc2 	bl	8006fc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002644:	463b      	mov	r3, r7
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800264e:	4b21      	ldr	r3, [pc, #132]	@ (80026d4 <MX_TIM4_Init+0xa4>)
 8002650:	4a21      	ldr	r2, [pc, #132]	@ (80026d8 <MX_TIM4_Init+0xa8>)
 8002652:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002654:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <MX_TIM4_Init+0xa4>)
 8002656:	2200      	movs	r2, #0
 8002658:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265a:	4b1e      	ldr	r3, [pc, #120]	@ (80026d4 <MX_TIM4_Init+0xa4>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002660:	4b1c      	ldr	r3, [pc, #112]	@ (80026d4 <MX_TIM4_Init+0xa4>)
 8002662:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002666:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002668:	4b1a      	ldr	r3, [pc, #104]	@ (80026d4 <MX_TIM4_Init+0xa4>)
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266e:	4b19      	ldr	r3, [pc, #100]	@ (80026d4 <MX_TIM4_Init+0xa4>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002674:	2303      	movs	r3, #3
 8002676:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800267c:	2301      	movs	r3, #1
 800267e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002688:	2300      	movs	r3, #0
 800268a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800268c:	2301      	movs	r3, #1
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002690:	2300      	movs	r3, #0
 8002692:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002698:	f107 030c 	add.w	r3, r7, #12
 800269c:	4619      	mov	r1, r3
 800269e:	480d      	ldr	r0, [pc, #52]	@ (80026d4 <MX_TIM4_Init+0xa4>)
 80026a0:	f002 fe8e 	bl	80053c0 <HAL_TIM_Encoder_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80026aa:	f000 fef7 	bl	800349c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026b6:	463b      	mov	r3, r7
 80026b8:	4619      	mov	r1, r3
 80026ba:	4806      	ldr	r0, [pc, #24]	@ (80026d4 <MX_TIM4_Init+0xa4>)
 80026bc:	f004 fade 	bl	8006c7c <HAL_TIMEx_MasterConfigSynchronization>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80026c6:	f000 fee9 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026ca:	bf00      	nop
 80026cc:	3730      	adds	r7, #48	@ 0x30
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000110 	.word	0x20000110
 80026d8:	40000800 	.word	0x40000800

080026dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026e2:	f107 0310 	add.w	r3, r7, #16
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80026fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <MX_TIM5_Init+0x94>)
 80026fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002774 <MX_TIM5_Init+0x98>)
 80026fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002700:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <MX_TIM5_Init+0x94>)
 8002702:	22a9      	movs	r2, #169	@ 0xa9
 8002704:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002706:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <MX_TIM5_Init+0x94>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800270c:	4b18      	ldr	r3, [pc, #96]	@ (8002770 <MX_TIM5_Init+0x94>)
 800270e:	f04f 32ff 	mov.w	r2, #4294967295
 8002712:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002714:	4b16      	ldr	r3, [pc, #88]	@ (8002770 <MX_TIM5_Init+0x94>)
 8002716:	2200      	movs	r2, #0
 8002718:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800271a:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <MX_TIM5_Init+0x94>)
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002720:	4813      	ldr	r0, [pc, #76]	@ (8002770 <MX_TIM5_Init+0x94>)
 8002722:	f002 fa3d 	bl	8004ba0 <HAL_TIM_Base_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800272c:	f000 feb6 	bl	800349c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002730:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002734:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002736:	f107 0310 	add.w	r3, r7, #16
 800273a:	4619      	mov	r1, r3
 800273c:	480c      	ldr	r0, [pc, #48]	@ (8002770 <MX_TIM5_Init+0x94>)
 800273e:	f003 fa73 	bl	8005c28 <HAL_TIM_ConfigClockSource>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002748:	f000 fea8 	bl	800349c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	4619      	mov	r1, r3
 8002758:	4805      	ldr	r0, [pc, #20]	@ (8002770 <MX_TIM5_Init+0x94>)
 800275a:	f004 fa8f 	bl	8006c7c <HAL_TIMEx_MasterConfigSynchronization>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002764:	f000 fe9a 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002768:	bf00      	nop
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	2000015c 	.word	0x2000015c
 8002774:	40000c00 	.word	0x40000c00

08002778 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b09c      	sub	sp, #112	@ 0x70
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800277e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800278c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002798:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
 80027a8:	615a      	str	r2, [r3, #20]
 80027aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	2234      	movs	r2, #52	@ 0x34
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f004 fc08 	bl	8006fc8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80027b8:	4b4b      	ldr	r3, [pc, #300]	@ (80028e8 <MX_TIM8_Init+0x170>)
 80027ba:	4a4c      	ldr	r2, [pc, #304]	@ (80028ec <MX_TIM8_Init+0x174>)
 80027bc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 80027be:	4b4a      	ldr	r3, [pc, #296]	@ (80028e8 <MX_TIM8_Init+0x170>)
 80027c0:	22a9      	movs	r2, #169	@ 0xa9
 80027c2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c4:	4b48      	ldr	r3, [pc, #288]	@ (80028e8 <MX_TIM8_Init+0x170>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 80027ca:	4b47      	ldr	r3, [pc, #284]	@ (80028e8 <MX_TIM8_Init+0x170>)
 80027cc:	2264      	movs	r2, #100	@ 0x64
 80027ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d0:	4b45      	ldr	r3, [pc, #276]	@ (80028e8 <MX_TIM8_Init+0x170>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80027d6:	4b44      	ldr	r3, [pc, #272]	@ (80028e8 <MX_TIM8_Init+0x170>)
 80027d8:	2200      	movs	r2, #0
 80027da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027dc:	4b42      	ldr	r3, [pc, #264]	@ (80028e8 <MX_TIM8_Init+0x170>)
 80027de:	2200      	movs	r2, #0
 80027e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80027e2:	4841      	ldr	r0, [pc, #260]	@ (80028e8 <MX_TIM8_Init+0x170>)
 80027e4:	f002 f9dc 	bl	8004ba0 <HAL_TIM_Base_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80027ee:	f000 fe55 	bl	800349c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027f6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80027f8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80027fc:	4619      	mov	r1, r3
 80027fe:	483a      	ldr	r0, [pc, #232]	@ (80028e8 <MX_TIM8_Init+0x170>)
 8002800:	f003 fa12 	bl	8005c28 <HAL_TIM_ConfigClockSource>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800280a:	f000 fe47 	bl	800349c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800280e:	4836      	ldr	r0, [pc, #216]	@ (80028e8 <MX_TIM8_Init+0x170>)
 8002810:	f002 fb06 	bl	8004e20 <HAL_TIM_PWM_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800281a:	f000 fe3f 	bl	800349c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800282a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800282e:	4619      	mov	r1, r3
 8002830:	482d      	ldr	r0, [pc, #180]	@ (80028e8 <MX_TIM8_Init+0x170>)
 8002832:	f004 fa23 	bl	8006c7c <HAL_TIMEx_MasterConfigSynchronization>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 800283c:	f000 fe2e 	bl	800349c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002840:	2360      	movs	r3, #96	@ 0x60
 8002842:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 100;
 8002844:	2364      	movs	r3, #100	@ 0x64
 8002846:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002848:	2300      	movs	r3, #0
 800284a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800284c:	2300      	movs	r3, #0
 800284e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002850:	2300      	movs	r3, #0
 8002852:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002854:	2300      	movs	r3, #0
 8002856:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002858:	2300      	movs	r3, #0
 800285a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800285c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002860:	2208      	movs	r2, #8
 8002862:	4619      	mov	r1, r3
 8002864:	4820      	ldr	r0, [pc, #128]	@ (80028e8 <MX_TIM8_Init+0x170>)
 8002866:	f003 f8cb 	bl	8005a00 <HAL_TIM_PWM_ConfigChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8002870:	f000 fe14 	bl	800349c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002874:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002878:	220c      	movs	r2, #12
 800287a:	4619      	mov	r1, r3
 800287c:	481a      	ldr	r0, [pc, #104]	@ (80028e8 <MX_TIM8_Init+0x170>)
 800287e:	f003 f8bf 	bl	8005a00 <HAL_TIM_PWM_ConfigChannel>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8002888:	f000 fe08 	bl	800349c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80028b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80028bc:	2300      	movs	r3, #0
 80028be:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	4619      	mov	r1, r3
 80028c8:	4807      	ldr	r0, [pc, #28]	@ (80028e8 <MX_TIM8_Init+0x170>)
 80028ca:	f004 fa6d 	bl	8006da8 <HAL_TIMEx_ConfigBreakDeadTime>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_TIM8_Init+0x160>
  {
    Error_Handler();
 80028d4:	f000 fde2 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80028d8:	4803      	ldr	r0, [pc, #12]	@ (80028e8 <MX_TIM8_Init+0x170>)
 80028da:	f000 ff4f 	bl	800377c <HAL_TIM_MspPostInit>

}
 80028de:	bf00      	nop
 80028e0:	3770      	adds	r7, #112	@ 0x70
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200001a8 	.word	0x200001a8
 80028ec:	40013400 	.word	0x40013400

080028f0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b09c      	sub	sp, #112	@ 0x70
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028f6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002904:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002910:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
 8002920:	615a      	str	r2, [r3, #20]
 8002922:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	2234      	movs	r2, #52	@ 0x34
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f004 fb4c 	bl	8006fc8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002930:	4b3f      	ldr	r3, [pc, #252]	@ (8002a30 <MX_TIM15_Init+0x140>)
 8002932:	4a40      	ldr	r2, [pc, #256]	@ (8002a34 <MX_TIM15_Init+0x144>)
 8002934:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 8002936:	4b3e      	ldr	r3, [pc, #248]	@ (8002a30 <MX_TIM15_Init+0x140>)
 8002938:	22a9      	movs	r2, #169	@ 0xa9
 800293a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a30 <MX_TIM15_Init+0x140>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000;
 8002942:	4b3b      	ldr	r3, [pc, #236]	@ (8002a30 <MX_TIM15_Init+0x140>)
 8002944:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002948:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294a:	4b39      	ldr	r3, [pc, #228]	@ (8002a30 <MX_TIM15_Init+0x140>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002950:	4b37      	ldr	r3, [pc, #220]	@ (8002a30 <MX_TIM15_Init+0x140>)
 8002952:	2200      	movs	r2, #0
 8002954:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002956:	4b36      	ldr	r3, [pc, #216]	@ (8002a30 <MX_TIM15_Init+0x140>)
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800295c:	4834      	ldr	r0, [pc, #208]	@ (8002a30 <MX_TIM15_Init+0x140>)
 800295e:	f002 f91f 	bl	8004ba0 <HAL_TIM_Base_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8002968:	f000 fd98 	bl	800349c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800296c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002970:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002972:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002976:	4619      	mov	r1, r3
 8002978:	482d      	ldr	r0, [pc, #180]	@ (8002a30 <MX_TIM15_Init+0x140>)
 800297a:	f003 f955 	bl	8005c28 <HAL_TIM_ConfigClockSource>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8002984:	f000 fd8a 	bl	800349c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002988:	4829      	ldr	r0, [pc, #164]	@ (8002a30 <MX_TIM15_Init+0x140>)
 800298a:	f002 fa49 	bl	8004e20 <HAL_TIM_PWM_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8002994:	f000 fd82 	bl	800349c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80029a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80029a4:	4619      	mov	r1, r3
 80029a6:	4822      	ldr	r0, [pc, #136]	@ (8002a30 <MX_TIM15_Init+0x140>)
 80029a8:	f004 f968 	bl	8006c7c <HAL_TIMEx_MasterConfigSynchronization>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80029b2:	f000 fd73 	bl	800349c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029b6:	2360      	movs	r3, #96	@ 0x60
 80029b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029be:	2300      	movs	r3, #0
 80029c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029c2:	2300      	movs	r3, #0
 80029c4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029d6:	2200      	movs	r2, #0
 80029d8:	4619      	mov	r1, r3
 80029da:	4815      	ldr	r0, [pc, #84]	@ (8002a30 <MX_TIM15_Init+0x140>)
 80029dc:	f003 f810 	bl	8005a00 <HAL_TIM_PWM_ConfigChannel>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80029e6:	f000 fd59 	bl	800349c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4807      	ldr	r0, [pc, #28]	@ (8002a30 <MX_TIM15_Init+0x140>)
 8002a12:	f004 f9c9 	bl	8006da8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8002a1c:	f000 fd3e 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002a20:	4803      	ldr	r0, [pc, #12]	@ (8002a30 <MX_TIM15_Init+0x140>)
 8002a22:	f000 feab 	bl	800377c <HAL_TIM_MspPostInit>

}
 8002a26:	bf00      	nop
 8002a28:	3770      	adds	r7, #112	@ 0x70
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	200001f4 	.word	0x200001f4
 8002a34:	40014000 	.word	0x40014000

08002a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	@ 0x28
 8002a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	609a      	str	r2, [r3, #8]
 8002a4a:	60da      	str	r2, [r3, #12]
 8002a4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4e:	4b75      	ldr	r3, [pc, #468]	@ (8002c24 <MX_GPIO_Init+0x1ec>)
 8002a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a52:	4a74      	ldr	r2, [pc, #464]	@ (8002c24 <MX_GPIO_Init+0x1ec>)
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a5a:	4b72      	ldr	r3, [pc, #456]	@ (8002c24 <MX_GPIO_Init+0x1ec>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a66:	4b6f      	ldr	r3, [pc, #444]	@ (8002c24 <MX_GPIO_Init+0x1ec>)
 8002a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c24 <MX_GPIO_Init+0x1ec>)
 8002a6c:	f043 0320 	orr.w	r3, r3, #32
 8002a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a72:	4b6c      	ldr	r3, [pc, #432]	@ (8002c24 <MX_GPIO_Init+0x1ec>)
 8002a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7e:	4b69      	ldr	r3, [pc, #420]	@ (8002c24 <MX_GPIO_Init+0x1ec>)
 8002a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a82:	4a68      	ldr	r2, [pc, #416]	@ (8002c24 <MX_GPIO_Init+0x1ec>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a8a:	4b66      	ldr	r3, [pc, #408]	@ (8002c24 <MX_GPIO_Init+0x1ec>)
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a96:	4b63      	ldr	r3, [pc, #396]	@ (8002c24 <MX_GPIO_Init+0x1ec>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9a:	4a62      	ldr	r2, [pc, #392]	@ (8002c24 <MX_GPIO_Init+0x1ec>)
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aa2:	4b60      	ldr	r3, [pc, #384]	@ (8002c24 <MX_GPIO_Init+0x1ec>)
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2120      	movs	r1, #32
 8002ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ab6:	f001 fa99 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12, GPIO_PIN_RESET);
 8002aba:	2200      	movs	r2, #0
 8002abc:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8002ac0:	4859      	ldr	r0, [pc, #356]	@ (8002c28 <MX_GPIO_Init+0x1f0>)
 8002ac2:	f001 fa93 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002ac6:	230d      	movs	r3, #13
 8002ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002aca:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4853      	ldr	r0, [pc, #332]	@ (8002c28 <MX_GPIO_Init+0x1f0>)
 8002adc:	f001 f8ec 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ae0:	230c      	movs	r3, #12
 8002ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aec:	2300      	movs	r3, #0
 8002aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002af0:	2307      	movs	r3, #7
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	4619      	mov	r1, r3
 8002afa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002afe:	f001 f8db 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002b02:	2320      	movs	r3, #32
 8002b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b06:	2301      	movs	r3, #1
 8002b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	4619      	mov	r1, r3
 8002b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b1c:	f001 f8cc 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8002b20:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 8002b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	483b      	ldr	r0, [pc, #236]	@ (8002c28 <MX_GPIO_Init+0x1f0>)
 8002b3a:	f001 f8bd 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11;
 8002b3e:	f640 0304 	movw	r3, #2052	@ 0x804
 8002b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	4619      	mov	r1, r3
 8002b52:	4836      	ldr	r0, [pc, #216]	@ (8002c2c <MX_GPIO_Init+0x1f4>)
 8002b54:	f001 f8b0 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002b58:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002b5e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b64:	2302      	movs	r3, #2
 8002b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	482f      	ldr	r0, [pc, #188]	@ (8002c2c <MX_GPIO_Init+0x1f4>)
 8002b70:	f001 f8a2 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b7a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b80:	2302      	movs	r3, #2
 8002b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4828      	ldr	r0, [pc, #160]	@ (8002c2c <MX_GPIO_Init+0x1f4>)
 8002b8c:	f001 f894 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b90:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002baa:	f001 f885 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bb4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4818      	ldr	r0, [pc, #96]	@ (8002c28 <MX_GPIO_Init+0x1f0>)
 8002bc6:	f001 f877 	bl	8003cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2100      	movs	r1, #0
 8002bce:	2006      	movs	r0, #6
 8002bd0:	f001 f83d 	bl	8003c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002bd4:	2006      	movs	r0, #6
 8002bd6:	f001 f854 	bl	8003c82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	2008      	movs	r0, #8
 8002be0:	f001 f835 	bl	8003c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002be4:	2008      	movs	r0, #8
 8002be6:	f001 f84c 	bl	8003c82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2100      	movs	r1, #0
 8002bee:	2009      	movs	r0, #9
 8002bf0:	f001 f82d 	bl	8003c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002bf4:	2009      	movs	r0, #9
 8002bf6:	f001 f844 	bl	8003c82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	2017      	movs	r0, #23
 8002c00:	f001 f825 	bl	8003c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c04:	2017      	movs	r0, #23
 8002c06:	f001 f83c 	bl	8003c82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	2028      	movs	r0, #40	@ 0x28
 8002c10:	f001 f81d 	bl	8003c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c14:	2028      	movs	r0, #40	@ 0x28
 8002c16:	f001 f834 	bl	8003c82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c1a:	bf00      	nop
 8002c1c:	3728      	adds	r7, #40	@ 0x28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	48000800 	.word	0x48000800
 8002c2c:	48000400 	.word	0x48000400

08002c30 <map>:

/* USER CODE BEGIN 4 */
float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	ed87 0a05 	vstr	s0, [r7, #20]
 8002c3a:	edc7 0a04 	vstr	s1, [r7, #16]
 8002c3e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002c42:	edc7 1a02 	vstr	s3, [r7, #8]
 8002c46:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002c4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c56:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c62:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c66:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c76:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c82:	371c      	adds	r7, #28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <DWT_Init>:

void DWT_Init(void) {
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002c90:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <DWT_Init+0x28>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a07      	ldr	r2, [pc, #28]	@ (8002cb4 <DWT_Init+0x28>)
 8002c96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c9a:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002c9c:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <DWT_Init+0x2c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a05      	ldr	r2, [pc, #20]	@ (8002cb8 <DWT_Init+0x2c>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6013      	str	r3, [r2, #0]
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e000edf0 	.word	0xe000edf0
 8002cb8:	e0001000 	.word	0xe0001000

08002cbc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10) {
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ccc:	d10d      	bne.n	8002cea <HAL_GPIO_EXTI_Callback+0x2e>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1) {
 8002cce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002cd2:	4845      	ldr	r0, [pc, #276]	@ (8002de8 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002cd4:	f001 f972 	bl	8003fbc <HAL_GPIO_ReadPin>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d105      	bne.n	8002cea <HAL_GPIO_EXTI_Callback+0x2e>
			Mode = 0;
 8002cde:	4b43      	ldr	r3, [pc, #268]	@ (8002dec <HAL_GPIO_EXTI_Callback+0x130>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 8002ce4:	4b42      	ldr	r3, [pc, #264]	@ (8002df0 <HAL_GPIO_EXTI_Callback+0x134>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cf0:	d10e      	bne.n	8002d10 <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1) {
 8002cf2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002cf6:	483f      	ldr	r0, [pc, #252]	@ (8002df4 <HAL_GPIO_EXTI_Callback+0x138>)
 8002cf8:	f001 f960 	bl	8003fbc <HAL_GPIO_ReadPin>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d103      	bne.n	8002d0a <HAL_GPIO_EXTI_Callback+0x4e>
			P_Limit = 1;
 8002d02:	4b3d      	ldr	r3, [pc, #244]	@ (8002df8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e002      	b.n	8002d10 <HAL_GPIO_EXTI_Callback+0x54>
		} else {
			P_Limit = 0;
 8002d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002df8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d16:	d10e      	bne.n	8002d36 <HAL_GPIO_EXTI_Callback+0x7a>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1) {
 8002d18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d1c:	4835      	ldr	r0, [pc, #212]	@ (8002df4 <HAL_GPIO_EXTI_Callback+0x138>)
 8002d1e:	f001 f94d 	bl	8003fbc <HAL_GPIO_ReadPin>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d103      	bne.n	8002d30 <HAL_GPIO_EXTI_Callback+0x74>
			R_Limit = 1;
 8002d28:	4b34      	ldr	r3, [pc, #208]	@ (8002dfc <HAL_GPIO_EXTI_Callback+0x140>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
 8002d2e:	e002      	b.n	8002d36 <HAL_GPIO_EXTI_Callback+0x7a>
		} else {
			R_Limit = 0;
 8002d30:	4b32      	ldr	r3, [pc, #200]	@ (8002dfc <HAL_GPIO_EXTI_Callback+0x140>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15) {
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d3c:	d102      	bne.n	8002d44 <HAL_GPIO_EXTI_Callback+0x88>
		EmergencyState = 0;
 8002d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002df0 <HAL_GPIO_EXTI_Callback+0x134>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
	}

    static uint8_t state[3] = {0};  // 0 = waiting for rise, 1 = waiting for fall

    uint32_t now = DWT->CYCCNT;
 8002d44:	4b2e      	ldr	r3, [pc, #184]	@ (8002e00 <HAL_GPIO_EXTI_Callback+0x144>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	613b      	str	r3, [r7, #16]
    uint32_t idx;

    if (GPIO_Pin == GPIO_PIN_0) idx = 0;      // PC0
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d102      	bne.n	8002d56 <HAL_GPIO_EXTI_Callback+0x9a>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e00a      	b.n	8002d6c <HAL_GPIO_EXTI_Callback+0xb0>
    else if (GPIO_Pin == GPIO_PIN_2) idx = 1; // PC2
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d102      	bne.n	8002d62 <HAL_GPIO_EXTI_Callback+0xa6>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e004      	b.n	8002d6c <HAL_GPIO_EXTI_Callback+0xb0>
    else if (GPIO_Pin == GPIO_PIN_3) idx = 2; // PC3
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d13b      	bne.n	8002de0 <HAL_GPIO_EXTI_Callback+0x124>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	617b      	str	r3, [r7, #20]
    else return;

    if (state[idx] == 0) {
 8002d6c:	4a25      	ldr	r2, [pc, #148]	@ (8002e04 <HAL_GPIO_EXTI_Callback+0x148>)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	4413      	add	r3, r2
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10a      	bne.n	8002d8e <HAL_GPIO_EXTI_Callback+0xd2>
        rise_time[idx] = now;
 8002d78:	4923      	ldr	r1, [pc, #140]	@ (8002e08 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        state[idx] = 1;
 8002d82:	4a20      	ldr	r2, [pc, #128]	@ (8002e04 <HAL_GPIO_EXTI_Callback+0x148>)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	4413      	add	r3, r2
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	e029      	b.n	8002de2 <HAL_GPIO_EXTI_Callback+0x126>
    } else {
        uint32_t delta = (now >= rise_time[idx])
 8002d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8002e08 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            ? (now - rise_time[idx])
            : (0xFFFFFFFF - rise_time[idx] + now);
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d306      	bcc.n	8002daa <HAL_GPIO_EXTI_Callback+0xee>
            ? (now - rise_time[idx])
 8002d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002e08 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            : (0xFFFFFFFF - rise_time[idx] + now);
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	e006      	b.n	8002db8 <HAL_GPIO_EXTI_Callback+0xfc>
 8002daa:	4a17      	ldr	r2, [pc, #92]	@ (8002e08 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	3b01      	subs	r3, #1
        uint32_t delta = (now >= rise_time[idx])
 8002db8:	60fb      	str	r3, [r7, #12]
        pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 8002dba:	4b14      	ldr	r3, [pc, #80]	@ (8002e0c <HAL_GPIO_EXTI_Callback+0x150>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a14      	ldr	r2, [pc, #80]	@ (8002e10 <HAL_GPIO_EXTI_Callback+0x154>)
 8002dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc4:	0c9b      	lsrs	r3, r3, #18
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dcc:	4911      	ldr	r1, [pc, #68]	@ (8002e14 <HAL_GPIO_EXTI_Callback+0x158>)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        state[idx] = 0;
 8002dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8002e04 <HAL_GPIO_EXTI_Callback+0x148>)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	4413      	add	r3, r2
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	e000      	b.n	8002de2 <HAL_GPIO_EXTI_Callback+0x126>
    else return;
 8002de0:	bf00      	nop
    }
}
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	48000800 	.word	0x48000800
 8002dec:	20000348 	.word	0x20000348
 8002df0:	20000349 	.word	0x20000349
 8002df4:	48000400 	.word	0x48000400
 8002df8:	2000034d 	.word	0x2000034d
 8002dfc:	2000034e 	.word	0x2000034e
 8002e00:	e0001000 	.word	0xe0001000
 8002e04:	200003f4 	.word	0x200003f4
 8002e08:	20000270 	.word	0x20000270
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	431bde83 	.word	0x431bde83
 8002e14:	2000027c 	.word	0x2000027c

08002e18 <HAL_TIM_PeriodElapsedCallback>:

//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002e18:	b4b0      	push	{r4, r5, r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a08      	ldr	r2, [pc, #32]	@ (8002e44 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d108      	bne.n	8002e3a <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8002e28:	4b07      	ldr	r3, [pc, #28]	@ (8002e48 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2e:	1e54      	subs	r4, r2, #1
 8002e30:	f143 0500 	adc.w	r5, r3, #0
 8002e34:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002e36:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bcb0      	pop	{r4, r5, r7}
 8002e42:	4770      	bx	lr
 8002e44:	2000015c 	.word	0x2000015c
 8002e48:	20000240 	.word	0x20000240

08002e4c <micros>:
uint64_t micros() {
 8002e4c:	b4b0      	push	{r4, r5, r7}
 8002e4e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8002e50:	4b09      	ldr	r3, [pc, #36]	@ (8002e78 <micros+0x2c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	2200      	movs	r2, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4b07      	ldr	r3, [pc, #28]	@ (8002e7c <micros+0x30>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	1884      	adds	r4, r0, r2
 8002e64:	eb41 0503 	adc.w	r5, r1, r3
 8002e68:	4622      	mov	r2, r4
 8002e6a:	462b      	mov	r3, r5
}
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bcb0      	pop	{r4, r5, r7}
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	2000015c 	.word	0x2000015c
 8002e7c:	20000240 	.word	0x20000240

08002e80 <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
		float outMin, float outMax, PID_State *state) {
 8002e80:	b480      	push	{r7}
 8002e82:	b08f      	sub	sp, #60	@ 0x3c
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	ed87 0a07 	vstr	s0, [r7, #28]
 8002e8a:	edc7 0a06 	vstr	s1, [r7, #24]
 8002e8e:	ed87 1a05 	vstr	s2, [r7, #20]
 8002e92:	edc7 1a04 	vstr	s3, [r7, #16]
 8002e96:	ed87 2a03 	vstr	s4, [r7, #12]
 8002e9a:	edc7 2a02 	vstr	s5, [r7, #8]
 8002e9e:	ed87 3a01 	vstr	s6, [r7, #4]
 8002ea2:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 8002ea4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ea8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	ed93 7a00 	vldr	s14, [r3]
 8002eba:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ebe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	ed93 7a00 	vldr	s14, [r3]
 8002ed6:	ed97 6a01 	vldr	s12, [r7, #4]
 8002eda:	edd7 6a05 	vldr	s13, [r7, #20]
 8002ede:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002ee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eea:	dd08      	ble.n	8002efe <PID_Update+0x7e>
		state->integ = outMax / kI;
 8002eec:	edd7 6a01 	vldr	s13, [r7, #4]
 8002ef0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	ed93 7a00 	vldr	s14, [r3]
 8002f04:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f08:	edd7 6a05 	vldr	s13, [r7, #20]
 8002f0c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f18:	d508      	bpl.n	8002f2c <PID_Update+0xac>
		state->integ = outMin / kI;
 8002f1a:	edd7 6a02 	vldr	s13, [r7, #8]
 8002f1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 8002f2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f38:	dd0b      	ble.n	8002f52 <PID_Update+0xd2>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	edd3 7a00 	vldr	s15, [r3]
 8002f40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f48:	d503      	bpl.n	8002f52 <PID_Update+0xd2>
		state->integ = 0;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 8002f52:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5e:	d50b      	bpl.n	8002f78 <PID_Update+0xf8>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	edd3 7a00 	vldr	s15, [r3]
 8002f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6e:	dd03      	ble.n	8002f78 <PID_Update+0xf8>
		state->integ = 0;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f90:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f94:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002f98:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fa0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 8002fa4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fa8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 8002fba:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002fbe:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fce:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 8002fd2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002fd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe2:	dd01      	ble.n	8002fe8 <PID_Update+0x168>
		out = outMax;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 8002fe8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002fec:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff8:	d501      	bpl.n	8002ffe <PID_Update+0x17e>
		out = outMin;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003000:	ee07 3a90 	vmov	s15, r3
}
 8003004:	eeb0 0a67 	vmov.f32	s0, s15
 8003008:	373c      	adds	r7, #60	@ 0x3c
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	0000      	movs	r0, r0
 8003014:	0000      	movs	r0, r0
	...

08003018 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update() {
 8003018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
	// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 8003020:	f7ff ff14 	bl	8002e4c <micros>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	495f      	ldr	r1, [pc, #380]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 800302a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 800302e:	4b5f      	ldr	r3, [pc, #380]	@ (80031ac <Revolute_PosVel_Update+0x194>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	4a5c      	ldr	r2, [pc, #368]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 8003036:	6013      	str	r3, [r2, #0]

	// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8003038:	4b5b      	ldr	r3, [pc, #364]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003048:	4b57      	ldr	r3, [pc, #348]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 800304a:	edc3 7a06 	vstr	s15, [r3, #24]

	// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW] - Revolute_QEIdata.Position[OLD];
 800304e:	4b56      	ldr	r3, [pc, #344]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4b55      	ldr	r3, [pc, #340]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003060:	dd04      	ble.n	800306c <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	e007      	b.n	800307c <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8003072:	da03      	bge.n	800307c <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800307a:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW] - Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 800307c:	4b4a      	ldr	r3, [pc, #296]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 800307e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003082:	4b49      	ldr	r3, [pc, #292]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 8003084:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003088:	ebb0 0a02 	subs.w	sl, r0, r2
 800308c:	eb61 0b03 	sbc.w	fp, r1, r3
 8003090:	4650      	mov	r0, sl
 8003092:	4659      	mov	r1, fp
 8003094:	f7fd fe2e 	bl	8000cf4 <__aeabi_ul2f>
 8003098:	ee07 0a10 	vmov	s14, r0
 800309c:	eddf 7a44 	vldr	s15, [pc, #272]	@ 80031b0 <Revolute_PosVel_Update+0x198>
 80030a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a4:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 80030a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80030ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b4:	d06d      	beq.n	8003192 <Revolute_PosVel_Update+0x17a>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_r = (float) diffPosition_r / diffTime_r;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	ee07 3a90 	vmov	s15, r3
 80030bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80030c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030c8:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAngularAcceleration = (Vel_counts_r - Revolute_QEIdata.QEIAngularVelocity) / diffTime_r;
 80030cc:	4b36      	ldr	r3, [pc, #216]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 80030ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80030d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80030d6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80030da:	ed97 7a02 	vldr	s14, [r7, #8]
 80030de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030e2:	4b31      	ldr	r3, [pc, #196]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 80030e4:	edc3 7a08 	vstr	s15, [r3, #32]

	// Store raw velocity
	Revolute_QEIdata.QEIAngularVelocity = Vel_counts_r;
 80030e8:	4a2f      	ldr	r2, [pc, #188]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	61d3      	str	r3, [r2, #28]

	// Angular velocity in rad/s
	Revolute_QEIdata.AngularVelocity_rad = Vel_counts_r * (2.0f * M_PI / 16384.0f);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd f9f6 	bl	80004e0 <__aeabi_f2d>
 80030f4:	a32a      	add	r3, pc, #168	@ (adr r3, 80031a0 <Revolute_PosVel_Update+0x188>)
 80030f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fa:	f7fd fa49 	bl	8000590 <__aeabi_dmul>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4610      	mov	r0, r2
 8003104:	4619      	mov	r1, r3
 8003106:	f7fd fcdd 	bl	8000ac4 <__aeabi_d2f>
 800310a:	4603      	mov	r3, r0
 800310c:	4a26      	ldr	r2, [pc, #152]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 800310e:	6253      	str	r3, [r2, #36]	@ 0x24

	// Angular acceleration in rad/s²
	Revolute_QEIdata.AngularAcceleration_rad = Revolute_QEIdata.QEIAngularAcceleration * (2.0f * M_PI / 16384.0f);
 8003110:	4b25      	ldr	r3, [pc, #148]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd f9e3 	bl	80004e0 <__aeabi_f2d>
 800311a:	a321      	add	r3, pc, #132	@ (adr r3, 80031a0 <Revolute_PosVel_Update+0x188>)
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	f7fd fa36 	bl	8000590 <__aeabi_dmul>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	f7fd fcca 	bl	8000ac4 <__aeabi_d2f>
 8003130:	4603      	mov	r3, r0
 8003132:	4a1d      	ldr	r2, [pc, #116]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 8003134:	6293      	str	r3, [r2, #40]	@ 0x28

	// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 8003136:	4b1c      	ldr	r3, [pc, #112]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 8003138:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800313c:	68f9      	ldr	r1, [r7, #12]
 800313e:	17c8      	asrs	r0, r1, #31
 8003140:	460c      	mov	r4, r1
 8003142:	4605      	mov	r5, r0
 8003144:	eb12 0804 	adds.w	r8, r2, r4
 8003148:	eb43 0905 	adc.w	r9, r3, r5
 800314c:	4b16      	ldr	r3, [pc, #88]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 800314e:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition * (2.0f * M_PI / 16384.0f);
 8003152:	4b15      	ldr	r3, [pc, #84]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 8003154:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	f7fd f9ea 	bl	8000534 <__aeabi_l2d>
 8003160:	a30f      	add	r3, pc, #60	@ (adr r3, 80031a0 <Revolute_PosVel_Update+0x188>)
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	f7fd fa13 	bl	8000590 <__aeabi_dmul>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4610      	mov	r0, r2
 8003170:	4619      	mov	r1, r3
 8003172:	f7fd fca7 	bl	8000ac4 <__aeabi_d2f>
 8003176:	4603      	mov	r3, r0
 8003178:	4a0b      	ldr	r2, [pc, #44]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 800317a:	6393      	str	r3, [r2, #56]	@ 0x38

	// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 800317c:	4b0a      	ldr	r3, [pc, #40]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a09      	ldr	r2, [pc, #36]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 8003182:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 8003184:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 8003186:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800318a:	4907      	ldr	r1, [pc, #28]	@ (80031a8 <Revolute_PosVel_Update+0x190>)
 800318c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003190:	e000      	b.n	8003194 <Revolute_PosVel_Update+0x17c>
		return;
 8003192:	bf00      	nop
}
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800319c:	f3af 8000 	nop.w
 80031a0:	54442d18 	.word	0x54442d18
 80031a4:	3f3921fb 	.word	0x3f3921fb
 80031a8:	20000290 	.word	0x20000290
 80031ac:	20000110 	.word	0x20000110
 80031b0:	358637bd 	.word	0x358637bd

080031b4 <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update() {
 80031b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
	// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 80031bc:	f7ff fe46 	bl	8002e4c <micros>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	494c      	ldr	r1, [pc, #304]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 80031c6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 80031ca:	4b4c      	ldr	r3, [pc, #304]	@ (80032fc <Prismatic_PosVel_Update+0x148>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	4a49      	ldr	r2, [pc, #292]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 80031d2:	6013      	str	r3, [r2, #0]

	// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW] - Prismatic_QEIdata.Position[OLD];
 80031d4:	4b48      	ldr	r3, [pc, #288]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	4b47      	ldr	r3, [pc, #284]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031e6:	dd04      	ble.n	80031f2 <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e007      	b.n	8003202 <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80031f8:	da03      	bge.n	8003202 <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003200:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW] - Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 8003202:	4b3d      	ldr	r3, [pc, #244]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 8003204:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003208:	4b3b      	ldr	r3, [pc, #236]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 800320a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800320e:	ebb0 0a02 	subs.w	sl, r0, r2
 8003212:	eb61 0b03 	sbc.w	fp, r1, r3
 8003216:	4650      	mov	r0, sl
 8003218:	4659      	mov	r1, fp
 800321a:	f7fd fd6b 	bl	8000cf4 <__aeabi_ul2f>
 800321e:	ee07 0a10 	vmov	s14, r0
 8003222:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8003300 <Prismatic_PosVel_Update+0x14c>
 8003226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322a:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 800322e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003232:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323a:	d057      	beq.n	80032ec <Prismatic_PosVel_Update+0x138>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_p = (float) diffPosition_p / diffTime_p;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003246:	ed97 7a02 	vldr	s14, [r7, #8]
 800324a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800324e:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p - Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 8003252:	4b29      	ldr	r3, [pc, #164]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 8003254:	edd3 7a06 	vldr	s15, [r3, #24]
 8003258:	ed97 7a01 	vldr	s14, [r7, #4]
 800325c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003260:	ed97 7a02 	vldr	s14, [r7, #8]
 8003264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003268:	4b23      	ldr	r3, [pc, #140]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 800326a:	edc3 7a07 	vstr	s15, [r3, #28]

	// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 800326e:	4a22      	ldr	r2, [pc, #136]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6193      	str	r3, [r2, #24]

	// Velocity in mm/s
	Prismatic_QEIdata.Velocity_mm = Vel_counts_p * (10.0f / 8192.0f);
 8003274:	edd7 7a01 	vldr	s15, [r7, #4]
 8003278:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003304 <Prismatic_PosVel_Update+0x150>
 800327c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003280:	4b1d      	ldr	r3, [pc, #116]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 8003282:	edc3 7a08 	vstr	s15, [r3, #32]

	// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration_mm = Prismatic_QEIdata.QEIAcceleration * (10.0f / 8192.0f);
 8003286:	4b1c      	ldr	r3, [pc, #112]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 8003288:	edd3 7a07 	vldr	s15, [r3, #28]
 800328c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003304 <Prismatic_PosVel_Update+0x150>
 8003290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003294:	4b18      	ldr	r3, [pc, #96]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 8003296:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 800329a:	4b17      	ldr	r3, [pc, #92]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 800329c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80032a0:	68f9      	ldr	r1, [r7, #12]
 80032a2:	17c8      	asrs	r0, r1, #31
 80032a4:	460c      	mov	r4, r1
 80032a6:	4605      	mov	r5, r0
 80032a8:	eb12 0804 	adds.w	r8, r2, r4
 80032ac:	eb43 0905 	adc.w	r9, r3, r5
 80032b0:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 80032b2:	e9c3 890a 	strd	r8, r9, [r3, #40]	@ 0x28

	// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition * (10.0f / 8192.0f);
 80032b6:	4b10      	ldr	r3, [pc, #64]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 80032b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	f7fd fd20 	bl	8000d04 <__aeabi_l2f>
 80032c4:	ee07 0a10 	vmov	s14, r0
 80032c8:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003304 <Prismatic_PosVel_Update+0x150>
 80032cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d0:	4b09      	ldr	r3, [pc, #36]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 80032d2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 80032d6:	4b08      	ldr	r3, [pc, #32]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a07      	ldr	r2, [pc, #28]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 80032dc:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 80032de:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 80032e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80032e4:	4904      	ldr	r1, [pc, #16]	@ (80032f8 <Prismatic_PosVel_Update+0x144>)
 80032e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80032ea:	e000      	b.n	80032ee <Prismatic_PosVel_Update+0x13a>
		return;
 80032ec:	bf00      	nop
}
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032f6:	bf00      	nop
 80032f8:	200002d0 	.word	0x200002d0
 80032fc:	200000c4 	.word	0x200000c4
 8003300:	358637bd 	.word	0x358637bd
 8003304:	3aa00000 	.word	0x3aa00000

08003308 <Set_Motor>:

void Set_Motor(int motor_num,float speed){
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)  speed = 100.0f;
 8003314:	edd7 7a00 	vldr	s15, [r7]
 8003318:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80033ec <Set_Motor+0xe4>
 800331c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003324:	dd01      	ble.n	800332a <Set_Motor+0x22>
 8003326:	4b32      	ldr	r3, [pc, #200]	@ (80033f0 <Set_Motor+0xe8>)
 8003328:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f) speed = -100.0f;
 800332a:	edd7 7a00 	vldr	s15, [r7]
 800332e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80033f4 <Set_Motor+0xec>
 8003332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	d501      	bpl.n	8003340 <Set_Motor+0x38>
 800333c:	4b2e      	ldr	r3, [pc, #184]	@ (80033f8 <Set_Motor+0xf0>)
 800333e:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t) ((fabsf(speed) * 100) / 100);
 8003340:	edd7 7a00 	vldr	s15, [r7]
 8003344:	eef0 7ae7 	vabs.f32	s15, s15
 8003348:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80033ec <Set_Motor+0xe4>
 800334c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003350:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80033ec <Set_Motor+0xe4>
 8003354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800335c:	ee17 3a90 	vmov	r3, s15
 8003360:	60fb      	str	r3, [r7, #12]
	if(motor_num == 0){
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d11d      	bne.n	80033a4 <Set_Motor+0x9c>
		if (speed > 0) {
 8003368:	edd7 7a00 	vldr	s15, [r7]
 800336c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003374:	dd05      	ble.n	8003382 <Set_Motor+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8003376:	2201      	movs	r2, #1
 8003378:	2120      	movs	r1, #32
 800337a:	4820      	ldr	r0, [pc, #128]	@ (80033fc <Set_Motor+0xf4>)
 800337c:	f000 fe36 	bl	8003fec <HAL_GPIO_WritePin>
 8003380:	e00b      	b.n	800339a <Set_Motor+0x92>
		} else if (speed < 0) {
 8003382:	edd7 7a00 	vldr	s15, [r7]
 8003386:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338e:	d504      	bpl.n	800339a <Set_Motor+0x92>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8003390:	2200      	movs	r2, #0
 8003392:	2120      	movs	r1, #32
 8003394:	4819      	ldr	r0, [pc, #100]	@ (80033fc <Set_Motor+0xf4>)
 8003396:	f000 fe29 	bl	8003fec <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 800339a:	4b19      	ldr	r3, [pc, #100]	@ (8003400 <Set_Motor+0xf8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	63da      	str	r2, [r3, #60]	@ 0x3c
		} else if (speed < 0) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 80033a2:	e01f      	b.n	80033e4 <Set_Motor+0xdc>
	else if(motor_num == 1){
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d11c      	bne.n	80033e4 <Set_Motor+0xdc>
		if (speed > 0) {
 80033aa:	edd7 7a00 	vldr	s15, [r7]
 80033ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	dd05      	ble.n	80033c4 <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80033b8:	2200      	movs	r2, #0
 80033ba:	2140      	movs	r1, #64	@ 0x40
 80033bc:	480f      	ldr	r0, [pc, #60]	@ (80033fc <Set_Motor+0xf4>)
 80033be:	f000 fe15 	bl	8003fec <HAL_GPIO_WritePin>
 80033c2:	e00b      	b.n	80033dc <Set_Motor+0xd4>
		} else if (speed < 0) {
 80033c4:	edd7 7a00 	vldr	s15, [r7]
 80033c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d0:	d504      	bpl.n	80033dc <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80033d2:	2201      	movs	r2, #1
 80033d4:	2140      	movs	r1, #64	@ 0x40
 80033d6:	4809      	ldr	r0, [pc, #36]	@ (80033fc <Set_Motor+0xf4>)
 80033d8:	f000 fe08 	bl	8003fec <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 80033dc:	4b08      	ldr	r3, [pc, #32]	@ (8003400 <Set_Motor+0xf8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	42c80000 	.word	0x42c80000
 80033f0:	42c80000 	.word	0x42c80000
 80033f4:	c2c80000 	.word	0xc2c80000
 80033f8:	c2c80000 	.word	0xc2c80000
 80033fc:	48000800 	.word	0x48000800
 8003400:	200001a8 	.word	0x200001a8

08003404 <Set_Servo>:

void Set_Servo(int Pen_Pos){
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0) {
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10f      	bne.n	8003432 <Set_Servo+0x2e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 8003412:	4b0e      	ldr	r3, [pc, #56]	@ (800344c <Set_Servo+0x48>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800341a:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 800341c:	4b0c      	ldr	r3, [pc, #48]	@ (8003450 <Set_Servo+0x4c>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 8003422:	f7ff fd13 	bl	8002e4c <micros>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	490a      	ldr	r1, [pc, #40]	@ (8003454 <Set_Servo+0x50>)
 800342c:	e9c1 2300 	strd	r2, r3, [r1]
	} else {
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 8003430:	e007      	b.n	8003442 <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 8003432:	4b06      	ldr	r3, [pc, #24]	@ (800344c <Set_Servo+0x48>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800343a:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 800343c:	4b04      	ldr	r3, [pc, #16]	@ (8003450 <Set_Servo+0x4c>)
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	200001f4 	.word	0x200001f4
 8003450:	2000034c 	.word	0x2000034c
 8003454:	200003b0 	.word	0x200003b0

08003458 <Reset_R>:

void Reset_R(){
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 800345c:	4905      	ldr	r1, [pc, #20]	@ (8003474 <Reset_R+0x1c>)
 800345e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	20000290 	.word	0x20000290

08003478 <Reset_P>:
void Reset_P(){
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 800347c:	4905      	ldr	r1, [pc, #20]	@ (8003494 <Reset_P+0x1c>)
 800347e:	4a06      	ldr	r2, [pc, #24]	@ (8003498 <Reset_P+0x20>)
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
 8003484:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//	Prismatic_QEIdata.mmPosition = 0;
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	200002d0 	.word	0x200002d0
 8003498:	fffff99a 	.word	0xfffff99a

0800349c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034a0:	b672      	cpsid	i
}
 80034a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034a4:	bf00      	nop
 80034a6:	e7fd      	b.n	80034a4 <Error_Handler+0x8>

080034a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ae:	4b0f      	ldr	r3, [pc, #60]	@ (80034ec <HAL_MspInit+0x44>)
 80034b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b2:	4a0e      	ldr	r2, [pc, #56]	@ (80034ec <HAL_MspInit+0x44>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80034ba:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <HAL_MspInit+0x44>)
 80034bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <HAL_MspInit+0x44>)
 80034c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ca:	4a08      	ldr	r2, [pc, #32]	@ (80034ec <HAL_MspInit+0x44>)
 80034cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80034d2:	4b06      	ldr	r3, [pc, #24]	@ (80034ec <HAL_MspInit+0x44>)
 80034d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80034de:	f000 fe59 	bl	8004194 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000

080034f0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08c      	sub	sp, #48	@ 0x30
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f8:	f107 031c 	add.w	r3, r7, #28
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a2e      	ldr	r2, [pc, #184]	@ (80035c8 <HAL_TIM_IC_MspInit+0xd8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d128      	bne.n	8003564 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003512:	4b2e      	ldr	r3, [pc, #184]	@ (80035cc <HAL_TIM_IC_MspInit+0xdc>)
 8003514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003516:	4a2d      	ldr	r2, [pc, #180]	@ (80035cc <HAL_TIM_IC_MspInit+0xdc>)
 8003518:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800351c:	6613      	str	r3, [r2, #96]	@ 0x60
 800351e:	4b2b      	ldr	r3, [pc, #172]	@ (80035cc <HAL_TIM_IC_MspInit+0xdc>)
 8003520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003526:	61bb      	str	r3, [r7, #24]
 8003528:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800352a:	4b28      	ldr	r3, [pc, #160]	@ (80035cc <HAL_TIM_IC_MspInit+0xdc>)
 800352c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352e:	4a27      	ldr	r2, [pc, #156]	@ (80035cc <HAL_TIM_IC_MspInit+0xdc>)
 8003530:	f043 0304 	orr.w	r3, r3, #4
 8003534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003536:	4b25      	ldr	r3, [pc, #148]	@ (80035cc <HAL_TIM_IC_MspInit+0xdc>)
 8003538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003542:	2302      	movs	r3, #2
 8003544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003546:	2302      	movs	r3, #2
 8003548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354e:	2300      	movs	r3, #0
 8003550:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003552:	2302      	movs	r3, #2
 8003554:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003556:	f107 031c 	add.w	r3, r7, #28
 800355a:	4619      	mov	r1, r3
 800355c:	481c      	ldr	r0, [pc, #112]	@ (80035d0 <HAL_TIM_IC_MspInit+0xe0>)
 800355e:	f000 fbab 	bl	8003cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003562:	e02d      	b.n	80035c0 <HAL_TIM_IC_MspInit+0xd0>
  else if(htim_ic->Instance==TIM2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356c:	d128      	bne.n	80035c0 <HAL_TIM_IC_MspInit+0xd0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800356e:	4b17      	ldr	r3, [pc, #92]	@ (80035cc <HAL_TIM_IC_MspInit+0xdc>)
 8003570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003572:	4a16      	ldr	r2, [pc, #88]	@ (80035cc <HAL_TIM_IC_MspInit+0xdc>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	6593      	str	r3, [r2, #88]	@ 0x58
 800357a:	4b14      	ldr	r3, [pc, #80]	@ (80035cc <HAL_TIM_IC_MspInit+0xdc>)
 800357c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003586:	4b11      	ldr	r3, [pc, #68]	@ (80035cc <HAL_TIM_IC_MspInit+0xdc>)
 8003588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800358a:	4a10      	ldr	r2, [pc, #64]	@ (80035cc <HAL_TIM_IC_MspInit+0xdc>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003592:	4b0e      	ldr	r3, [pc, #56]	@ (80035cc <HAL_TIM_IC_MspInit+0xdc>)
 8003594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800359e:	2301      	movs	r3, #1
 80035a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035aa:	2300      	movs	r3, #0
 80035ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035ae:	2301      	movs	r3, #1
 80035b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b2:	f107 031c 	add.w	r3, r7, #28
 80035b6:	4619      	mov	r1, r3
 80035b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035bc:	f000 fb7c 	bl	8003cb8 <HAL_GPIO_Init>
}
 80035c0:	bf00      	nop
 80035c2:	3730      	adds	r7, #48	@ 0x30
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40012c00 	.word	0x40012c00
 80035cc:	40021000 	.word	0x40021000
 80035d0:	48000800 	.word	0x48000800

080035d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08c      	sub	sp, #48	@ 0x30
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	f107 031c 	add.w	r3, r7, #28
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a37      	ldr	r2, [pc, #220]	@ (80036d0 <HAL_TIM_Encoder_MspInit+0xfc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d130      	bne.n	8003658 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035f6:	4b37      	ldr	r3, [pc, #220]	@ (80036d4 <HAL_TIM_Encoder_MspInit+0x100>)
 80035f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fa:	4a36      	ldr	r2, [pc, #216]	@ (80036d4 <HAL_TIM_Encoder_MspInit+0x100>)
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	6593      	str	r3, [r2, #88]	@ 0x58
 8003602:	4b34      	ldr	r3, [pc, #208]	@ (80036d4 <HAL_TIM_Encoder_MspInit+0x100>)
 8003604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800360e:	4b31      	ldr	r3, [pc, #196]	@ (80036d4 <HAL_TIM_Encoder_MspInit+0x100>)
 8003610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003612:	4a30      	ldr	r2, [pc, #192]	@ (80036d4 <HAL_TIM_Encoder_MspInit+0x100>)
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800361a:	4b2e      	ldr	r3, [pc, #184]	@ (80036d4 <HAL_TIM_Encoder_MspInit+0x100>)
 800361c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003626:	2330      	movs	r3, #48	@ 0x30
 8003628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362a:	2302      	movs	r3, #2
 800362c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003632:	2300      	movs	r3, #0
 8003634:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003636:	2302      	movs	r3, #2
 8003638:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363a:	f107 031c 	add.w	r3, r7, #28
 800363e:	4619      	mov	r1, r3
 8003640:	4825      	ldr	r0, [pc, #148]	@ (80036d8 <HAL_TIM_Encoder_MspInit+0x104>)
 8003642:	f000 fb39 	bl	8003cb8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003646:	2200      	movs	r2, #0
 8003648:	2100      	movs	r1, #0
 800364a:	201d      	movs	r0, #29
 800364c:	f000 faff 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003650:	201d      	movs	r0, #29
 8003652:	f000 fb16 	bl	8003c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003656:	e036      	b.n	80036c6 <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM4)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a1f      	ldr	r2, [pc, #124]	@ (80036dc <HAL_TIM_Encoder_MspInit+0x108>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d131      	bne.n	80036c6 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003662:	4b1c      	ldr	r3, [pc, #112]	@ (80036d4 <HAL_TIM_Encoder_MspInit+0x100>)
 8003664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003666:	4a1b      	ldr	r2, [pc, #108]	@ (80036d4 <HAL_TIM_Encoder_MspInit+0x100>)
 8003668:	f043 0304 	orr.w	r3, r3, #4
 800366c:	6593      	str	r3, [r2, #88]	@ 0x58
 800366e:	4b19      	ldr	r3, [pc, #100]	@ (80036d4 <HAL_TIM_Encoder_MspInit+0x100>)
 8003670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800367a:	4b16      	ldr	r3, [pc, #88]	@ (80036d4 <HAL_TIM_Encoder_MspInit+0x100>)
 800367c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367e:	4a15      	ldr	r2, [pc, #84]	@ (80036d4 <HAL_TIM_Encoder_MspInit+0x100>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003686:	4b13      	ldr	r3, [pc, #76]	@ (80036d4 <HAL_TIM_Encoder_MspInit+0x100>)
 8003688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003692:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003698:	2302      	movs	r3, #2
 800369a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369c:	2300      	movs	r3, #0
 800369e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a0:	2300      	movs	r3, #0
 80036a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80036a4:	230a      	movs	r3, #10
 80036a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a8:	f107 031c 	add.w	r3, r7, #28
 80036ac:	4619      	mov	r1, r3
 80036ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036b2:	f000 fb01 	bl	8003cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80036b6:	2200      	movs	r2, #0
 80036b8:	2100      	movs	r1, #0
 80036ba:	201e      	movs	r0, #30
 80036bc:	f000 fac7 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80036c0:	201e      	movs	r0, #30
 80036c2:	f000 fade 	bl	8003c82 <HAL_NVIC_EnableIRQ>
}
 80036c6:	bf00      	nop
 80036c8:	3730      	adds	r7, #48	@ 0x30
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40021000 	.word	0x40021000
 80036d8:	48000400 	.word	0x48000400
 80036dc:	40000800 	.word	0x40000800

080036e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1f      	ldr	r2, [pc, #124]	@ (800376c <HAL_TIM_Base_MspInit+0x8c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d114      	bne.n	800371c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003770 <HAL_TIM_Base_MspInit+0x90>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003770 <HAL_TIM_Base_MspInit+0x90>)
 80036f8:	f043 0308 	orr.w	r3, r3, #8
 80036fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80036fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003770 <HAL_TIM_Base_MspInit+0x90>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800370a:	2200      	movs	r2, #0
 800370c:	2100      	movs	r1, #0
 800370e:	2032      	movs	r0, #50	@ 0x32
 8003710:	f000 fa9d 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003714:	2032      	movs	r0, #50	@ 0x32
 8003716:	f000 fab4 	bl	8003c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800371a:	e022      	b.n	8003762 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a14      	ldr	r2, [pc, #80]	@ (8003774 <HAL_TIM_Base_MspInit+0x94>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10c      	bne.n	8003740 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003726:	4b12      	ldr	r3, [pc, #72]	@ (8003770 <HAL_TIM_Base_MspInit+0x90>)
 8003728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372a:	4a11      	ldr	r2, [pc, #68]	@ (8003770 <HAL_TIM_Base_MspInit+0x90>)
 800372c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003730:	6613      	str	r3, [r2, #96]	@ 0x60
 8003732:	4b0f      	ldr	r3, [pc, #60]	@ (8003770 <HAL_TIM_Base_MspInit+0x90>)
 8003734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	693b      	ldr	r3, [r7, #16]
}
 800373e:	e010      	b.n	8003762 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM15)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0c      	ldr	r2, [pc, #48]	@ (8003778 <HAL_TIM_Base_MspInit+0x98>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d10b      	bne.n	8003762 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800374a:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <HAL_TIM_Base_MspInit+0x90>)
 800374c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374e:	4a08      	ldr	r2, [pc, #32]	@ (8003770 <HAL_TIM_Base_MspInit+0x90>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003754:	6613      	str	r3, [r2, #96]	@ 0x60
 8003756:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <HAL_TIM_Base_MspInit+0x90>)
 8003758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
}
 8003762:	bf00      	nop
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40021000 	.word	0x40021000
 8003774:	40013400 	.word	0x40013400
 8003778:	40014000 	.word	0x40014000

0800377c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	@ 0x28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a23      	ldr	r2, [pc, #140]	@ (8003828 <HAL_TIM_MspPostInit+0xac>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d11d      	bne.n	80037da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800379e:	4b23      	ldr	r3, [pc, #140]	@ (800382c <HAL_TIM_MspPostInit+0xb0>)
 80037a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a2:	4a22      	ldr	r2, [pc, #136]	@ (800382c <HAL_TIM_MspPostInit+0xb0>)
 80037a4:	f043 0304 	orr.w	r3, r3, #4
 80037a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037aa:	4b20      	ldr	r3, [pc, #128]	@ (800382c <HAL_TIM_MspPostInit+0xb0>)
 80037ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80037b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80037ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037bc:	2302      	movs	r3, #2
 80037be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c4:	2300      	movs	r3, #0
 80037c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80037c8:	2304      	movs	r3, #4
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037cc:	f107 0314 	add.w	r3, r7, #20
 80037d0:	4619      	mov	r1, r3
 80037d2:	4817      	ldr	r0, [pc, #92]	@ (8003830 <HAL_TIM_MspPostInit+0xb4>)
 80037d4:	f000 fa70 	bl	8003cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80037d8:	e021      	b.n	800381e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a15      	ldr	r2, [pc, #84]	@ (8003834 <HAL_TIM_MspPostInit+0xb8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d11c      	bne.n	800381e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e4:	4b11      	ldr	r3, [pc, #68]	@ (800382c <HAL_TIM_MspPostInit+0xb0>)
 80037e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e8:	4a10      	ldr	r2, [pc, #64]	@ (800382c <HAL_TIM_MspPostInit+0xb0>)
 80037ea:	f043 0302 	orr.w	r3, r3, #2
 80037ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037f0:	4b0e      	ldr	r3, [pc, #56]	@ (800382c <HAL_TIM_MspPostInit+0xb0>)
 80037f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80037fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003802:	2302      	movs	r3, #2
 8003804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380a:	2300      	movs	r3, #0
 800380c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800380e:	2301      	movs	r3, #1
 8003810:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003812:	f107 0314 	add.w	r3, r7, #20
 8003816:	4619      	mov	r1, r3
 8003818:	4807      	ldr	r0, [pc, #28]	@ (8003838 <HAL_TIM_MspPostInit+0xbc>)
 800381a:	f000 fa4d 	bl	8003cb8 <HAL_GPIO_Init>
}
 800381e:	bf00      	nop
 8003820:	3728      	adds	r7, #40	@ 0x28
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40013400 	.word	0x40013400
 800382c:	40021000 	.word	0x40021000
 8003830:	48000800 	.word	0x48000800
 8003834:	40014000 	.word	0x40014000
 8003838:	48000400 	.word	0x48000400

0800383c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003840:	bf00      	nop
 8003842:	e7fd      	b.n	8003840 <NMI_Handler+0x4>

08003844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <HardFault_Handler+0x4>

0800384c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <MemManage_Handler+0x4>

08003854 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003858:	bf00      	nop
 800385a:	e7fd      	b.n	8003858 <BusFault_Handler+0x4>

0800385c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003860:	bf00      	nop
 8003862:	e7fd      	b.n	8003860 <UsageFault_Handler+0x4>

08003864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003868:	bf00      	nop
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003872:	b480      	push	{r7}
 8003874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003892:	f000 f8e3 	bl	8003a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}

0800389a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800389e:	2001      	movs	r0, #1
 80038a0:	f000 fbbc 	bl	800401c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80038a4:	bf00      	nop
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80038ac:	2004      	movs	r0, #4
 80038ae:	f000 fbb5 	bl	800401c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80038ba:	2008      	movs	r0, #8
 80038bc:	f000 fbae 	bl	800401c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80038c0:	bf00      	nop
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80038c8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80038cc:	f000 fba6 	bl	800401c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80038d0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80038d4:	f000 fba2 	bl	800401c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80038d8:	bf00      	nop
 80038da:	bd80      	pop	{r7, pc}

080038dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038e0:	4802      	ldr	r0, [pc, #8]	@ (80038ec <TIM3_IRQHandler+0x10>)
 80038e2:	f001 fea1 	bl	8005628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	200000c4 	.word	0x200000c4

080038f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80038f4:	4802      	ldr	r0, [pc, #8]	@ (8003900 <TIM4_IRQHandler+0x10>)
 80038f6:	f001 fe97 	bl	8005628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000110 	.word	0x20000110

08003904 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003908:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800390c:	f000 fb86 	bl	800401c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003910:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003914:	f000 fb82 	bl	800401c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003918:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800391c:	f000 fb7e 	bl	800401c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003920:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003924:	f000 fb7a 	bl	800401c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}

0800392c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003930:	4802      	ldr	r0, [pc, #8]	@ (800393c <TIM5_IRQHandler+0x10>)
 8003932:	f001 fe79 	bl	8005628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	2000015c 	.word	0x2000015c

08003940 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003944:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <SystemInit+0x20>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394a:	4a05      	ldr	r2, [pc, #20]	@ (8003960 <SystemInit+0x20>)
 800394c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003950:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003964:	480d      	ldr	r0, [pc, #52]	@ (800399c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003966:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003968:	f7ff ffea 	bl	8003940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800396c:	480c      	ldr	r0, [pc, #48]	@ (80039a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800396e:	490d      	ldr	r1, [pc, #52]	@ (80039a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003970:	4a0d      	ldr	r2, [pc, #52]	@ (80039a8 <LoopForever+0xe>)
  movs r3, #0
 8003972:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003974:	e002      	b.n	800397c <LoopCopyDataInit>

08003976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800397a:	3304      	adds	r3, #4

0800397c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800397c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800397e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003980:	d3f9      	bcc.n	8003976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003982:	4a0a      	ldr	r2, [pc, #40]	@ (80039ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003984:	4c0a      	ldr	r4, [pc, #40]	@ (80039b0 <LoopForever+0x16>)
  movs r3, #0
 8003986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003988:	e001      	b.n	800398e <LoopFillZerobss>

0800398a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800398a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800398c:	3204      	adds	r2, #4

0800398e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800398e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003990:	d3fb      	bcc.n	800398a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003992:	f003 fb21 	bl	8006fd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003996:	f7fd f9f3 	bl	8000d80 <main>

0800399a <LoopForever>:

LoopForever:
    b LoopForever
 800399a:	e7fe      	b.n	800399a <LoopForever>
  ldr   r0, =_estack
 800399c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80039a8:	08007f1c 	.word	0x08007f1c
  ldr r2, =_sbss
 80039ac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80039b0:	200003fc 	.word	0x200003fc

080039b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80039b4:	e7fe      	b.n	80039b4 <ADC1_2_IRQHandler>

080039b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039c0:	2003      	movs	r0, #3
 80039c2:	f000 f939 	bl	8003c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039c6:	2000      	movs	r0, #0
 80039c8:	f000 f80e 	bl	80039e8 <HAL_InitTick>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	71fb      	strb	r3, [r7, #7]
 80039d6:	e001      	b.n	80039dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039d8:	f7ff fd66 	bl	80034a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039dc:	79fb      	ldrb	r3, [r7, #7]

}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80039f4:	4b16      	ldr	r3, [pc, #88]	@ (8003a50 <HAL_InitTick+0x68>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d022      	beq.n	8003a42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80039fc:	4b15      	ldr	r3, [pc, #84]	@ (8003a54 <HAL_InitTick+0x6c>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4b13      	ldr	r3, [pc, #76]	@ (8003a50 <HAL_InitTick+0x68>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003a08:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 f944 	bl	8003c9e <HAL_SYSTICK_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10f      	bne.n	8003a3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b0f      	cmp	r3, #15
 8003a20:	d809      	bhi.n	8003a36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a22:	2200      	movs	r2, #0
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	f04f 30ff 	mov.w	r0, #4294967295
 8003a2a:	f000 f910 	bl	8003c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a58 <HAL_InitTick+0x70>)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	e007      	b.n	8003a46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	73fb      	strb	r3, [r7, #15]
 8003a3a:	e004      	b.n	8003a46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
 8003a40:	e001      	b.n	8003a46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000008 	.word	0x20000008
 8003a54:	20000000 	.word	0x20000000
 8003a58:	20000004 	.word	0x20000004

08003a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a60:	4b05      	ldr	r3, [pc, #20]	@ (8003a78 <HAL_IncTick+0x1c>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	4b05      	ldr	r3, [pc, #20]	@ (8003a7c <HAL_IncTick+0x20>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4413      	add	r3, r2
 8003a6a:	4a03      	ldr	r2, [pc, #12]	@ (8003a78 <HAL_IncTick+0x1c>)
 8003a6c:	6013      	str	r3, [r2, #0]
}
 8003a6e:	bf00      	nop
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	200003f8 	.word	0x200003f8
 8003a7c:	20000008 	.word	0x20000008

08003a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return uwTick;
 8003a84:	4b03      	ldr	r3, [pc, #12]	@ (8003a94 <HAL_GetTick+0x14>)
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	200003f8 	.word	0x200003f8

08003a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8003adc <__NVIC_SetPriorityGrouping+0x44>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aca:	4a04      	ldr	r2, [pc, #16]	@ (8003adc <__NVIC_SetPriorityGrouping+0x44>)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	60d3      	str	r3, [r2, #12]
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	e000ed00 	.word	0xe000ed00

08003ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae4:	4b04      	ldr	r3, [pc, #16]	@ (8003af8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	0a1b      	lsrs	r3, r3, #8
 8003aea:	f003 0307 	and.w	r3, r3, #7
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	db0b      	blt.n	8003b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	f003 021f 	and.w	r2, r3, #31
 8003b14:	4907      	ldr	r1, [pc, #28]	@ (8003b34 <__NVIC_EnableIRQ+0x38>)
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	e000e100 	.word	0xe000e100

08003b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	6039      	str	r1, [r7, #0]
 8003b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	db0a      	blt.n	8003b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	490c      	ldr	r1, [pc, #48]	@ (8003b84 <__NVIC_SetPriority+0x4c>)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	0112      	lsls	r2, r2, #4
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b60:	e00a      	b.n	8003b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	4908      	ldr	r1, [pc, #32]	@ (8003b88 <__NVIC_SetPriority+0x50>)
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	3b04      	subs	r3, #4
 8003b70:	0112      	lsls	r2, r2, #4
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	440b      	add	r3, r1
 8003b76:	761a      	strb	r2, [r3, #24]
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000e100 	.word	0xe000e100
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b089      	sub	sp, #36	@ 0x24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f1c3 0307 	rsb	r3, r3, #7
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	bf28      	it	cs
 8003baa:	2304      	movcs	r3, #4
 8003bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	2b06      	cmp	r3, #6
 8003bb4:	d902      	bls.n	8003bbc <NVIC_EncodePriority+0x30>
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3b03      	subs	r3, #3
 8003bba:	e000      	b.n	8003bbe <NVIC_EncodePriority+0x32>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	401a      	ands	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	fa01 f303 	lsl.w	r3, r1, r3
 8003bde:	43d9      	mvns	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be4:	4313      	orrs	r3, r2
         );
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3724      	adds	r7, #36	@ 0x24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c04:	d301      	bcc.n	8003c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c06:	2301      	movs	r3, #1
 8003c08:	e00f      	b.n	8003c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c34 <SysTick_Config+0x40>)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c12:	210f      	movs	r1, #15
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295
 8003c18:	f7ff ff8e 	bl	8003b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c1c:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <SysTick_Config+0x40>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c22:	4b04      	ldr	r3, [pc, #16]	@ (8003c34 <SysTick_Config+0x40>)
 8003c24:	2207      	movs	r2, #7
 8003c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	e000e010 	.word	0xe000e010

08003c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff29 	bl	8003a98 <__NVIC_SetPriorityGrouping>
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	4603      	mov	r3, r0
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c5c:	f7ff ff40 	bl	8003ae0 <__NVIC_GetPriorityGrouping>
 8003c60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	6978      	ldr	r0, [r7, #20]
 8003c68:	f7ff ff90 	bl	8003b8c <NVIC_EncodePriority>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c72:	4611      	mov	r1, r2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff ff5f 	bl	8003b38 <__NVIC_SetPriority>
}
 8003c7a:	bf00      	nop
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	4603      	mov	r3, r0
 8003c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff ff33 	bl	8003afc <__NVIC_EnableIRQ>
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff ffa4 	bl	8003bf4 <SysTick_Config>
 8003cac:	4603      	mov	r3, r0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cc6:	e15a      	b.n	8003f7e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	2101      	movs	r1, #1
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 814c 	beq.w	8003f78 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d005      	beq.n	8003cf8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d130      	bne.n	8003d5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	2203      	movs	r2, #3
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d2e:	2201      	movs	r2, #1
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	f003 0201 	and.w	r2, r3, #1
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d017      	beq.n	8003d96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	2203      	movs	r2, #3
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43db      	mvns	r3, r3
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d123      	bne.n	8003dea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	08da      	lsrs	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3208      	adds	r2, #8
 8003daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	220f      	movs	r2, #15
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	08da      	lsrs	r2, r3, #3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3208      	adds	r2, #8
 8003de4:	6939      	ldr	r1, [r7, #16]
 8003de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	2203      	movs	r2, #3
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 0203 	and.w	r2, r3, #3
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80a6 	beq.w	8003f78 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e2c:	4b5b      	ldr	r3, [pc, #364]	@ (8003f9c <HAL_GPIO_Init+0x2e4>)
 8003e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e30:	4a5a      	ldr	r2, [pc, #360]	@ (8003f9c <HAL_GPIO_Init+0x2e4>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e38:	4b58      	ldr	r3, [pc, #352]	@ (8003f9c <HAL_GPIO_Init+0x2e4>)
 8003e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e44:	4a56      	ldr	r2, [pc, #344]	@ (8003fa0 <HAL_GPIO_Init+0x2e8>)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	089b      	lsrs	r3, r3, #2
 8003e4a:	3302      	adds	r3, #2
 8003e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	220f      	movs	r2, #15
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e6e:	d01f      	beq.n	8003eb0 <HAL_GPIO_Init+0x1f8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a4c      	ldr	r2, [pc, #304]	@ (8003fa4 <HAL_GPIO_Init+0x2ec>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d019      	beq.n	8003eac <HAL_GPIO_Init+0x1f4>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a4b      	ldr	r2, [pc, #300]	@ (8003fa8 <HAL_GPIO_Init+0x2f0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <HAL_GPIO_Init+0x1f0>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a4a      	ldr	r2, [pc, #296]	@ (8003fac <HAL_GPIO_Init+0x2f4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00d      	beq.n	8003ea4 <HAL_GPIO_Init+0x1ec>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a49      	ldr	r2, [pc, #292]	@ (8003fb0 <HAL_GPIO_Init+0x2f8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d007      	beq.n	8003ea0 <HAL_GPIO_Init+0x1e8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a48      	ldr	r2, [pc, #288]	@ (8003fb4 <HAL_GPIO_Init+0x2fc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d101      	bne.n	8003e9c <HAL_GPIO_Init+0x1e4>
 8003e98:	2305      	movs	r3, #5
 8003e9a:	e00a      	b.n	8003eb2 <HAL_GPIO_Init+0x1fa>
 8003e9c:	2306      	movs	r3, #6
 8003e9e:	e008      	b.n	8003eb2 <HAL_GPIO_Init+0x1fa>
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	e006      	b.n	8003eb2 <HAL_GPIO_Init+0x1fa>
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e004      	b.n	8003eb2 <HAL_GPIO_Init+0x1fa>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e002      	b.n	8003eb2 <HAL_GPIO_Init+0x1fa>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <HAL_GPIO_Init+0x1fa>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	f002 0203 	and.w	r2, r2, #3
 8003eb8:	0092      	lsls	r2, r2, #2
 8003eba:	4093      	lsls	r3, r2
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ec2:	4937      	ldr	r1, [pc, #220]	@ (8003fa0 <HAL_GPIO_Init+0x2e8>)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	089b      	lsrs	r3, r3, #2
 8003ec8:	3302      	adds	r3, #2
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ed0:	4b39      	ldr	r3, [pc, #228]	@ (8003fb8 <HAL_GPIO_Init+0x300>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4013      	ands	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ef4:	4a30      	ldr	r2, [pc, #192]	@ (8003fb8 <HAL_GPIO_Init+0x300>)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003efa:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb8 <HAL_GPIO_Init+0x300>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	43db      	mvns	r3, r3
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4013      	ands	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f1e:	4a26      	ldr	r2, [pc, #152]	@ (8003fb8 <HAL_GPIO_Init+0x300>)
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f24:	4b24      	ldr	r3, [pc, #144]	@ (8003fb8 <HAL_GPIO_Init+0x300>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4013      	ands	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f48:	4a1b      	ldr	r2, [pc, #108]	@ (8003fb8 <HAL_GPIO_Init+0x300>)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb8 <HAL_GPIO_Init+0x300>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	43db      	mvns	r3, r3
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f72:	4a11      	ldr	r2, [pc, #68]	@ (8003fb8 <HAL_GPIO_Init+0x300>)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f47f ae9d 	bne.w	8003cc8 <HAL_GPIO_Init+0x10>
  }
}
 8003f8e:	bf00      	nop
 8003f90:	bf00      	nop
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40010000 	.word	0x40010000
 8003fa4:	48000400 	.word	0x48000400
 8003fa8:	48000800 	.word	0x48000800
 8003fac:	48000c00 	.word	0x48000c00
 8003fb0:	48001000 	.word	0x48001000
 8003fb4:	48001400 	.word	0x48001400
 8003fb8:	40010400 	.word	0x40010400

08003fbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	887b      	ldrh	r3, [r7, #2]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
 8003fd8:	e001      	b.n	8003fde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ffc:	787b      	ldrb	r3, [r7, #1]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004002:	887a      	ldrh	r2, [r7, #2]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004008:	e002      	b.n	8004010 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004026:	4b08      	ldr	r3, [pc, #32]	@ (8004048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	4013      	ands	r3, r2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d006      	beq.n	8004040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004032:	4a05      	ldr	r2, [pc, #20]	@ (8004048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004038:	88fb      	ldrh	r3, [r7, #6]
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe fe3e 	bl	8002cbc <HAL_GPIO_EXTI_Callback>
  }
}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40010400 	.word	0x40010400

0800404c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d141      	bne.n	80040de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800405a:	4b4b      	ldr	r3, [pc, #300]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004066:	d131      	bne.n	80040cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004068:	4b47      	ldr	r3, [pc, #284]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800406e:	4a46      	ldr	r2, [pc, #280]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004074:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004078:	4b43      	ldr	r3, [pc, #268]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004080:	4a41      	ldr	r2, [pc, #260]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004086:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004088:	4b40      	ldr	r3, [pc, #256]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2232      	movs	r2, #50	@ 0x32
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	4a3f      	ldr	r2, [pc, #252]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004094:	fba2 2303 	umull	r2, r3, r2, r3
 8004098:	0c9b      	lsrs	r3, r3, #18
 800409a:	3301      	adds	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800409e:	e002      	b.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a6:	4b38      	ldr	r3, [pc, #224]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b2:	d102      	bne.n	80040ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f2      	bne.n	80040a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040ba:	4b33      	ldr	r3, [pc, #204]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c6:	d158      	bne.n	800417a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e057      	b.n	800417c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040dc:	e04d      	b.n	800417a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040e4:	d141      	bne.n	800416a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040e6:	4b28      	ldr	r3, [pc, #160]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f2:	d131      	bne.n	8004158 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040f4:	4b24      	ldr	r3, [pc, #144]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040fa:	4a23      	ldr	r2, [pc, #140]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004100:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004104:	4b20      	ldr	r3, [pc, #128]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800410c:	4a1e      	ldr	r2, [pc, #120]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800410e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004112:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004114:	4b1d      	ldr	r3, [pc, #116]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2232      	movs	r2, #50	@ 0x32
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	4a1c      	ldr	r2, [pc, #112]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	0c9b      	lsrs	r3, r3, #18
 8004126:	3301      	adds	r3, #1
 8004128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800412a:	e002      	b.n	8004132 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3b01      	subs	r3, #1
 8004130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004132:	4b15      	ldr	r3, [pc, #84]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800413a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800413e:	d102      	bne.n	8004146 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f2      	bne.n	800412c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004146:	4b10      	ldr	r3, [pc, #64]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800414e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004152:	d112      	bne.n	800417a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e011      	b.n	800417c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004158:	4b0b      	ldr	r3, [pc, #44]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800415a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800415e:	4a0a      	ldr	r2, [pc, #40]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004164:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004168:	e007      	b.n	800417a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800416a:	4b07      	ldr	r3, [pc, #28]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004172:	4a05      	ldr	r2, [pc, #20]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004174:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004178:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	40007000 	.word	0x40007000
 800418c:	20000000 	.word	0x20000000
 8004190:	431bde83 	.word	0x431bde83

08004194 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004198:	4b05      	ldr	r3, [pc, #20]	@ (80041b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4a04      	ldr	r2, [pc, #16]	@ (80041b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800419e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041a2:	6093      	str	r3, [r2, #8]
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40007000 	.word	0x40007000

080041b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e2fe      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d075      	beq.n	80042be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d2:	4b97      	ldr	r3, [pc, #604]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
 80041da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041dc:	4b94      	ldr	r3, [pc, #592]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b0c      	cmp	r3, #12
 80041ea:	d102      	bne.n	80041f2 <HAL_RCC_OscConfig+0x3e>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d002      	beq.n	80041f8 <HAL_RCC_OscConfig+0x44>
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d10b      	bne.n	8004210 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f8:	4b8d      	ldr	r3, [pc, #564]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d05b      	beq.n	80042bc <HAL_RCC_OscConfig+0x108>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d157      	bne.n	80042bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e2d9      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004218:	d106      	bne.n	8004228 <HAL_RCC_OscConfig+0x74>
 800421a:	4b85      	ldr	r3, [pc, #532]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a84      	ldr	r2, [pc, #528]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e01d      	b.n	8004264 <HAL_RCC_OscConfig+0xb0>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0x98>
 8004232:	4b7f      	ldr	r3, [pc, #508]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a7e      	ldr	r2, [pc, #504]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4b7c      	ldr	r3, [pc, #496]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a7b      	ldr	r2, [pc, #492]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e00b      	b.n	8004264 <HAL_RCC_OscConfig+0xb0>
 800424c:	4b78      	ldr	r3, [pc, #480]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a77      	ldr	r2, [pc, #476]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	4b75      	ldr	r3, [pc, #468]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a74      	ldr	r2, [pc, #464]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 800425e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d013      	beq.n	8004294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7ff fc08 	bl	8003a80 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004274:	f7ff fc04 	bl	8003a80 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	@ 0x64
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e29e      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004286:	4b6a      	ldr	r3, [pc, #424]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0xc0>
 8004292:	e014      	b.n	80042be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7ff fbf4 	bl	8003a80 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800429c:	f7ff fbf0 	bl	8003a80 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	@ 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e28a      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ae:	4b60      	ldr	r3, [pc, #384]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0xe8>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d075      	beq.n	80043b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ca:	4b59      	ldr	r3, [pc, #356]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042d4:	4b56      	ldr	r3, [pc, #344]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b0c      	cmp	r3, #12
 80042e2:	d102      	bne.n	80042ea <HAL_RCC_OscConfig+0x136>
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d002      	beq.n	80042f0 <HAL_RCC_OscConfig+0x13c>
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d11f      	bne.n	8004330 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f0:	4b4f      	ldr	r3, [pc, #316]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_OscConfig+0x154>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e25d      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004308:	4b49      	ldr	r3, [pc, #292]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	4946      	ldr	r1, [pc, #280]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800431c:	4b45      	ldr	r3, [pc, #276]	@ (8004434 <HAL_RCC_OscConfig+0x280>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fb61 	bl	80039e8 <HAL_InitTick>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d043      	beq.n	80043b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e249      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d023      	beq.n	8004380 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004338:	4b3d      	ldr	r3, [pc, #244]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a3c      	ldr	r2, [pc, #240]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 800433e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7ff fb9c 	bl	8003a80 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800434c:	f7ff fb98 	bl	8003a80 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e232      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800435e:	4b34      	ldr	r3, [pc, #208]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436a:	4b31      	ldr	r3, [pc, #196]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	061b      	lsls	r3, r3, #24
 8004378:	492d      	ldr	r1, [pc, #180]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 800437a:	4313      	orrs	r3, r2
 800437c:	604b      	str	r3, [r1, #4]
 800437e:	e01a      	b.n	80043b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004380:	4b2b      	ldr	r3, [pc, #172]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a2a      	ldr	r2, [pc, #168]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004386:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800438a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7ff fb78 	bl	8003a80 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004394:	f7ff fb74 	bl	8003a80 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e20e      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043a6:	4b22      	ldr	r3, [pc, #136]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x1e0>
 80043b2:	e000      	b.n	80043b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d041      	beq.n	8004446 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01c      	beq.n	8004404 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ca:	4b19      	ldr	r3, [pc, #100]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 80043cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043d0:	4a17      	ldr	r2, [pc, #92]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043da:	f7ff fb51 	bl	8003a80 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e2:	f7ff fb4d 	bl	8003a80 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e1e7      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 80043f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0ef      	beq.n	80043e2 <HAL_RCC_OscConfig+0x22e>
 8004402:	e020      	b.n	8004446 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004404:	4b0a      	ldr	r3, [pc, #40]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004406:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800440a:	4a09      	ldr	r2, [pc, #36]	@ (8004430 <HAL_RCC_OscConfig+0x27c>)
 800440c:	f023 0301 	bic.w	r3, r3, #1
 8004410:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004414:	f7ff fb34 	bl	8003a80 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800441a:	e00d      	b.n	8004438 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800441c:	f7ff fb30 	bl	8003a80 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d906      	bls.n	8004438 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e1ca      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000
 8004434:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004438:	4b8c      	ldr	r3, [pc, #560]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 800443a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1ea      	bne.n	800441c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 80a6 	beq.w	80045a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004454:	2300      	movs	r3, #0
 8004456:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004458:	4b84      	ldr	r3, [pc, #528]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RCC_OscConfig+0x2b4>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <HAL_RCC_OscConfig+0x2b6>
 8004468:	2300      	movs	r3, #0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00d      	beq.n	800448a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800446e:	4b7f      	ldr	r3, [pc, #508]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004472:	4a7e      	ldr	r2, [pc, #504]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004478:	6593      	str	r3, [r2, #88]	@ 0x58
 800447a:	4b7c      	ldr	r3, [pc, #496]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004486:	2301      	movs	r3, #1
 8004488:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800448a:	4b79      	ldr	r3, [pc, #484]	@ (8004670 <HAL_RCC_OscConfig+0x4bc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004492:	2b00      	cmp	r3, #0
 8004494:	d118      	bne.n	80044c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004496:	4b76      	ldr	r3, [pc, #472]	@ (8004670 <HAL_RCC_OscConfig+0x4bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a75      	ldr	r2, [pc, #468]	@ (8004670 <HAL_RCC_OscConfig+0x4bc>)
 800449c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044a2:	f7ff faed 	bl	8003a80 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044aa:	f7ff fae9 	bl	8003a80 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e183      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004670 <HAL_RCC_OscConfig+0x4bc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d108      	bne.n	80044e2 <HAL_RCC_OscConfig+0x32e>
 80044d0:	4b66      	ldr	r3, [pc, #408]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d6:	4a65      	ldr	r2, [pc, #404]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044e0:	e024      	b.n	800452c <HAL_RCC_OscConfig+0x378>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b05      	cmp	r3, #5
 80044e8:	d110      	bne.n	800450c <HAL_RCC_OscConfig+0x358>
 80044ea:	4b60      	ldr	r3, [pc, #384]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f0:	4a5e      	ldr	r2, [pc, #376]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 80044f2:	f043 0304 	orr.w	r3, r3, #4
 80044f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044fa:	4b5c      	ldr	r3, [pc, #368]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004500:	4a5a      	ldr	r2, [pc, #360]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800450a:	e00f      	b.n	800452c <HAL_RCC_OscConfig+0x378>
 800450c:	4b57      	ldr	r3, [pc, #348]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 800450e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004512:	4a56      	ldr	r2, [pc, #344]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800451c:	4b53      	ldr	r3, [pc, #332]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004522:	4a52      	ldr	r2, [pc, #328]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004524:	f023 0304 	bic.w	r3, r3, #4
 8004528:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d016      	beq.n	8004562 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7ff faa4 	bl	8003a80 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453a:	e00a      	b.n	8004552 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f7ff faa0 	bl	8003a80 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e138      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004552:	4b46      	ldr	r3, [pc, #280]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ed      	beq.n	800453c <HAL_RCC_OscConfig+0x388>
 8004560:	e015      	b.n	800458e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004562:	f7ff fa8d 	bl	8003a80 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004568:	e00a      	b.n	8004580 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7ff fa89 	bl	8003a80 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e121      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004580:	4b3a      	ldr	r3, [pc, #232]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1ed      	bne.n	800456a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800458e:	7ffb      	ldrb	r3, [r7, #31]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004594:	4b35      	ldr	r3, [pc, #212]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004598:	4a34      	ldr	r2, [pc, #208]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 800459a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800459e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d03c      	beq.n	8004626 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01c      	beq.n	80045ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045b4:	4b2d      	ldr	r3, [pc, #180]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 80045b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045ba:	4a2c      	ldr	r2, [pc, #176]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c4:	f7ff fa5c 	bl	8003a80 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045cc:	f7ff fa58 	bl	8003a80 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e0f2      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045de:	4b23      	ldr	r3, [pc, #140]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 80045e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0ef      	beq.n	80045cc <HAL_RCC_OscConfig+0x418>
 80045ec:	e01b      	b.n	8004626 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045ee:	4b1f      	ldr	r3, [pc, #124]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 80045f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045f4:	4a1d      	ldr	r2, [pc, #116]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fe:	f7ff fa3f 	bl	8003a80 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004606:	f7ff fa3b 	bl	8003a80 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e0d5      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004618:	4b14      	ldr	r3, [pc, #80]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 800461a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ef      	bne.n	8004606 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80c9 	beq.w	80047c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004630:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b0c      	cmp	r3, #12
 800463a:	f000 8083 	beq.w	8004744 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d15e      	bne.n	8004704 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004646:	4b09      	ldr	r3, [pc, #36]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a08      	ldr	r2, [pc, #32]	@ (800466c <HAL_RCC_OscConfig+0x4b8>)
 800464c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7ff fa15 	bl	8003a80 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004658:	e00c      	b.n	8004674 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465a:	f7ff fa11 	bl	8003a80 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d905      	bls.n	8004674 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e0ab      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
 800466c:	40021000 	.word	0x40021000
 8004670:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004674:	4b55      	ldr	r3, [pc, #340]	@ (80047cc <HAL_RCC_OscConfig+0x618>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1ec      	bne.n	800465a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004680:	4b52      	ldr	r3, [pc, #328]	@ (80047cc <HAL_RCC_OscConfig+0x618>)
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	4b52      	ldr	r3, [pc, #328]	@ (80047d0 <HAL_RCC_OscConfig+0x61c>)
 8004686:	4013      	ands	r3, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6a11      	ldr	r1, [r2, #32]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004690:	3a01      	subs	r2, #1
 8004692:	0112      	lsls	r2, r2, #4
 8004694:	4311      	orrs	r1, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800469a:	0212      	lsls	r2, r2, #8
 800469c:	4311      	orrs	r1, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80046a2:	0852      	lsrs	r2, r2, #1
 80046a4:	3a01      	subs	r2, #1
 80046a6:	0552      	lsls	r2, r2, #21
 80046a8:	4311      	orrs	r1, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046ae:	0852      	lsrs	r2, r2, #1
 80046b0:	3a01      	subs	r2, #1
 80046b2:	0652      	lsls	r2, r2, #25
 80046b4:	4311      	orrs	r1, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046ba:	06d2      	lsls	r2, r2, #27
 80046bc:	430a      	orrs	r2, r1
 80046be:	4943      	ldr	r1, [pc, #268]	@ (80047cc <HAL_RCC_OscConfig+0x618>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c4:	4b41      	ldr	r3, [pc, #260]	@ (80047cc <HAL_RCC_OscConfig+0x618>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a40      	ldr	r2, [pc, #256]	@ (80047cc <HAL_RCC_OscConfig+0x618>)
 80046ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046d0:	4b3e      	ldr	r3, [pc, #248]	@ (80047cc <HAL_RCC_OscConfig+0x618>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4a3d      	ldr	r2, [pc, #244]	@ (80047cc <HAL_RCC_OscConfig+0x618>)
 80046d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7ff f9d0 	bl	8003a80 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e4:	f7ff f9cc 	bl	8003a80 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e066      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f6:	4b35      	ldr	r3, [pc, #212]	@ (80047cc <HAL_RCC_OscConfig+0x618>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0x530>
 8004702:	e05e      	b.n	80047c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004704:	4b31      	ldr	r3, [pc, #196]	@ (80047cc <HAL_RCC_OscConfig+0x618>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a30      	ldr	r2, [pc, #192]	@ (80047cc <HAL_RCC_OscConfig+0x618>)
 800470a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800470e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7ff f9b6 	bl	8003a80 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004718:	f7ff f9b2 	bl	8003a80 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e04c      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800472a:	4b28      	ldr	r3, [pc, #160]	@ (80047cc <HAL_RCC_OscConfig+0x618>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004736:	4b25      	ldr	r3, [pc, #148]	@ (80047cc <HAL_RCC_OscConfig+0x618>)
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	4924      	ldr	r1, [pc, #144]	@ (80047cc <HAL_RCC_OscConfig+0x618>)
 800473c:	4b25      	ldr	r3, [pc, #148]	@ (80047d4 <HAL_RCC_OscConfig+0x620>)
 800473e:	4013      	ands	r3, r2
 8004740:	60cb      	str	r3, [r1, #12]
 8004742:	e03e      	b.n	80047c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e039      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004750:	4b1e      	ldr	r3, [pc, #120]	@ (80047cc <HAL_RCC_OscConfig+0x618>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 0203 	and.w	r2, r3, #3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	429a      	cmp	r2, r3
 8004762:	d12c      	bne.n	80047be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476e:	3b01      	subs	r3, #1
 8004770:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d123      	bne.n	80047be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004780:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d11b      	bne.n	80047be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004790:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d113      	bne.n	80047be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	3b01      	subs	r3, #1
 80047a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d109      	bne.n	80047be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047b4:	085b      	lsrs	r3, r3, #1
 80047b6:	3b01      	subs	r3, #1
 80047b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d001      	beq.n	80047c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3720      	adds	r7, #32
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000
 80047d0:	019f800c 	.word	0x019f800c
 80047d4:	feeefffc 	.word	0xfeeefffc

080047d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e11e      	b.n	8004a2e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047f0:	4b91      	ldr	r3, [pc, #580]	@ (8004a38 <HAL_RCC_ClockConfig+0x260>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d910      	bls.n	8004820 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fe:	4b8e      	ldr	r3, [pc, #568]	@ (8004a38 <HAL_RCC_ClockConfig+0x260>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 020f 	bic.w	r2, r3, #15
 8004806:	498c      	ldr	r1, [pc, #560]	@ (8004a38 <HAL_RCC_ClockConfig+0x260>)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	4313      	orrs	r3, r2
 800480c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480e:	4b8a      	ldr	r3, [pc, #552]	@ (8004a38 <HAL_RCC_ClockConfig+0x260>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d001      	beq.n	8004820 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e106      	b.n	8004a2e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d073      	beq.n	8004914 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d129      	bne.n	8004888 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004834:	4b81      	ldr	r3, [pc, #516]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0f4      	b.n	8004a2e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004844:	f000 f966 	bl	8004b14 <RCC_GetSysClockFreqFromPLLSource>
 8004848:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4a7c      	ldr	r2, [pc, #496]	@ (8004a40 <HAL_RCC_ClockConfig+0x268>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d93f      	bls.n	80048d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004852:	4b7a      	ldr	r3, [pc, #488]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004866:	2b00      	cmp	r3, #0
 8004868:	d033      	beq.n	80048d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800486e:	2b00      	cmp	r3, #0
 8004870:	d12f      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004872:	4b72      	ldr	r3, [pc, #456]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800487a:	4a70      	ldr	r2, [pc, #448]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 800487c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004880:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004882:	2380      	movs	r3, #128	@ 0x80
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	e024      	b.n	80048d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d107      	bne.n	80048a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004890:	4b6a      	ldr	r3, [pc, #424]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d109      	bne.n	80048b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0c6      	b.n	8004a2e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a0:	4b66      	ldr	r3, [pc, #408]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0be      	b.n	8004a2e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048b0:	f000 f8ce 	bl	8004a50 <HAL_RCC_GetSysClockFreq>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4a61      	ldr	r2, [pc, #388]	@ (8004a40 <HAL_RCC_ClockConfig+0x268>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d909      	bls.n	80048d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048be:	4b5f      	ldr	r3, [pc, #380]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048c6:	4a5d      	ldr	r2, [pc, #372]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 80048c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048ce:	2380      	movs	r3, #128	@ 0x80
 80048d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048d2:	4b5a      	ldr	r3, [pc, #360]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f023 0203 	bic.w	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	4957      	ldr	r1, [pc, #348]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e4:	f7ff f8cc 	bl	8003a80 <HAL_GetTick>
 80048e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ec:	f7ff f8c8 	bl	8003a80 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e095      	b.n	8004a2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	4b4e      	ldr	r3, [pc, #312]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 020c 	and.w	r2, r3, #12
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	429a      	cmp	r2, r3
 8004912:	d1eb      	bne.n	80048ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d023      	beq.n	8004968 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800492c:	4b43      	ldr	r3, [pc, #268]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4a42      	ldr	r2, [pc, #264]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 8004932:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004936:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004944:	4b3d      	ldr	r3, [pc, #244]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800494c:	4a3b      	ldr	r2, [pc, #236]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 800494e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004952:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004954:	4b39      	ldr	r3, [pc, #228]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	4936      	ldr	r1, [pc, #216]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 8004962:	4313      	orrs	r3, r2
 8004964:	608b      	str	r3, [r1, #8]
 8004966:	e008      	b.n	800497a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2b80      	cmp	r3, #128	@ 0x80
 800496c:	d105      	bne.n	800497a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800496e:	4b33      	ldr	r3, [pc, #204]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	4a32      	ldr	r2, [pc, #200]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 8004974:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004978:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800497a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a38 <HAL_RCC_ClockConfig+0x260>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d21d      	bcs.n	80049c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004988:	4b2b      	ldr	r3, [pc, #172]	@ (8004a38 <HAL_RCC_ClockConfig+0x260>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f023 020f 	bic.w	r2, r3, #15
 8004990:	4929      	ldr	r1, [pc, #164]	@ (8004a38 <HAL_RCC_ClockConfig+0x260>)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	4313      	orrs	r3, r2
 8004996:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004998:	f7ff f872 	bl	8003a80 <HAL_GetTick>
 800499c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a0:	f7ff f86e 	bl	8003a80 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e03b      	b.n	8004a2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	4b20      	ldr	r3, [pc, #128]	@ (8004a38 <HAL_RCC_ClockConfig+0x260>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d1ed      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4917      	ldr	r1, [pc, #92]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ee:	4b13      	ldr	r3, [pc, #76]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	490f      	ldr	r1, [pc, #60]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a02:	f000 f825 	bl	8004a50 <HAL_RCC_GetSysClockFreq>
 8004a06:	4602      	mov	r2, r0
 8004a08:	4b0c      	ldr	r3, [pc, #48]	@ (8004a3c <HAL_RCC_ClockConfig+0x264>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	490c      	ldr	r1, [pc, #48]	@ (8004a44 <HAL_RCC_ClockConfig+0x26c>)
 8004a14:	5ccb      	ldrb	r3, [r1, r3]
 8004a16:	f003 031f 	and.w	r3, r3, #31
 8004a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a48 <HAL_RCC_ClockConfig+0x270>)
 8004a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a22:	4b0a      	ldr	r3, [pc, #40]	@ (8004a4c <HAL_RCC_ClockConfig+0x274>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fe ffde 	bl	80039e8 <HAL_InitTick>
 8004a2c:	4603      	mov	r3, r0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40022000 	.word	0x40022000
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	04c4b400 	.word	0x04c4b400
 8004a44:	08007b34 	.word	0x08007b34
 8004a48:	20000000 	.word	0x20000000
 8004a4c:	20000004 	.word	0x20000004

08004a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a56:	4b2c      	ldr	r3, [pc, #176]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d102      	bne.n	8004a68 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a62:	4b2a      	ldr	r3, [pc, #168]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	e047      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a68:	4b27      	ldr	r3, [pc, #156]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d102      	bne.n	8004a7a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a74:	4b26      	ldr	r3, [pc, #152]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	e03e      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a7a:	4b23      	ldr	r3, [pc, #140]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d136      	bne.n	8004af4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a86:	4b20      	ldr	r3, [pc, #128]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a90:	4b1d      	ldr	r3, [pc, #116]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d10c      	bne.n	8004abe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aac:	4a16      	ldr	r2, [pc, #88]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aae:	68d2      	ldr	r2, [r2, #12]
 8004ab0:	0a12      	lsrs	r2, r2, #8
 8004ab2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	617b      	str	r3, [r7, #20]
      break;
 8004abc:	e00c      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004abe:	4a13      	ldr	r2, [pc, #76]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac6:	4a10      	ldr	r2, [pc, #64]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ac8:	68d2      	ldr	r2, [r2, #12]
 8004aca:	0a12      	lsrs	r2, r2, #8
 8004acc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ad0:	fb02 f303 	mul.w	r3, r2, r3
 8004ad4:	617b      	str	r3, [r7, #20]
      break;
 8004ad6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	0e5b      	lsrs	r3, r3, #25
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	e001      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004af8:	693b      	ldr	r3, [r7, #16]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	00f42400 	.word	0x00f42400
 8004b10:	016e3600 	.word	0x016e3600

08004b14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b24:	4b1b      	ldr	r3, [pc, #108]	@ (8004b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	3301      	adds	r3, #1
 8004b30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d10c      	bne.n	8004b52 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b38:	4a17      	ldr	r2, [pc, #92]	@ (8004b98 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b40:	4a14      	ldr	r2, [pc, #80]	@ (8004b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b42:	68d2      	ldr	r2, [r2, #12]
 8004b44:	0a12      	lsrs	r2, r2, #8
 8004b46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	617b      	str	r3, [r7, #20]
    break;
 8004b50:	e00c      	b.n	8004b6c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b52:	4a12      	ldr	r2, [pc, #72]	@ (8004b9c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8004b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b5c:	68d2      	ldr	r2, [r2, #12]
 8004b5e:	0a12      	lsrs	r2, r2, #8
 8004b60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b64:	fb02 f303 	mul.w	r3, r2, r3
 8004b68:	617b      	str	r3, [r7, #20]
    break;
 8004b6a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b6c:	4b09      	ldr	r3, [pc, #36]	@ (8004b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	0e5b      	lsrs	r3, r3, #25
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	3301      	adds	r3, #1
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b86:	687b      	ldr	r3, [r7, #4]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40021000 	.word	0x40021000
 8004b98:	016e3600 	.word	0x016e3600
 8004b9c:	00f42400 	.word	0x00f42400

08004ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e049      	b.n	8004c46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fe fd8a 	bl	80036e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4610      	mov	r0, r2
 8004be0:	f001 f9a2 	bl	8005f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d001      	beq.n	8004c68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e04c      	b.n	8004d02 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a26      	ldr	r2, [pc, #152]	@ (8004d10 <HAL_TIM_Base_Start+0xc0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d022      	beq.n	8004cc0 <HAL_TIM_Base_Start+0x70>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c82:	d01d      	beq.n	8004cc0 <HAL_TIM_Base_Start+0x70>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a22      	ldr	r2, [pc, #136]	@ (8004d14 <HAL_TIM_Base_Start+0xc4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d018      	beq.n	8004cc0 <HAL_TIM_Base_Start+0x70>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a21      	ldr	r2, [pc, #132]	@ (8004d18 <HAL_TIM_Base_Start+0xc8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d013      	beq.n	8004cc0 <HAL_TIM_Base_Start+0x70>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8004d1c <HAL_TIM_Base_Start+0xcc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_TIM_Base_Start+0x70>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d20 <HAL_TIM_Base_Start+0xd0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d009      	beq.n	8004cc0 <HAL_TIM_Base_Start+0x70>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8004d24 <HAL_TIM_Base_Start+0xd4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <HAL_TIM_Base_Start+0x70>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1b      	ldr	r2, [pc, #108]	@ (8004d28 <HAL_TIM_Base_Start+0xd8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d115      	bne.n	8004cec <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	4b19      	ldr	r3, [pc, #100]	@ (8004d2c <HAL_TIM_Base_Start+0xdc>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b06      	cmp	r3, #6
 8004cd0:	d015      	beq.n	8004cfe <HAL_TIM_Base_Start+0xae>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd8:	d011      	beq.n	8004cfe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0201 	orr.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cea:	e008      	b.n	8004cfe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e000      	b.n	8004d00 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40012c00 	.word	0x40012c00
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40000c00 	.word	0x40000c00
 8004d20:	40013400 	.word	0x40013400
 8004d24:	40014000 	.word	0x40014000
 8004d28:	40015000 	.word	0x40015000
 8004d2c:	00010007 	.word	0x00010007

08004d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d001      	beq.n	8004d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e054      	b.n	8004df2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a26      	ldr	r2, [pc, #152]	@ (8004e00 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d022      	beq.n	8004db0 <HAL_TIM_Base_Start_IT+0x80>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d72:	d01d      	beq.n	8004db0 <HAL_TIM_Base_Start_IT+0x80>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a22      	ldr	r2, [pc, #136]	@ (8004e04 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d018      	beq.n	8004db0 <HAL_TIM_Base_Start_IT+0x80>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a21      	ldr	r2, [pc, #132]	@ (8004e08 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <HAL_TIM_Base_Start_IT+0x80>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e0c <HAL_TIM_Base_Start_IT+0xdc>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00e      	beq.n	8004db0 <HAL_TIM_Base_Start_IT+0x80>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1e      	ldr	r2, [pc, #120]	@ (8004e10 <HAL_TIM_Base_Start_IT+0xe0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d009      	beq.n	8004db0 <HAL_TIM_Base_Start_IT+0x80>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e14 <HAL_TIM_Base_Start_IT+0xe4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <HAL_TIM_Base_Start_IT+0x80>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a1b      	ldr	r2, [pc, #108]	@ (8004e18 <HAL_TIM_Base_Start_IT+0xe8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d115      	bne.n	8004ddc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	4b19      	ldr	r3, [pc, #100]	@ (8004e1c <HAL_TIM_Base_Start_IT+0xec>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b06      	cmp	r3, #6
 8004dc0:	d015      	beq.n	8004dee <HAL_TIM_Base_Start_IT+0xbe>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc8:	d011      	beq.n	8004dee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0201 	orr.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dda:	e008      	b.n	8004dee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	e000      	b.n	8004df0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40013400 	.word	0x40013400
 8004e14:	40014000 	.word	0x40014000
 8004e18:	40015000 	.word	0x40015000
 8004e1c:	00010007 	.word	0x00010007

08004e20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e049      	b.n	8004ec6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f841 	bl	8004ece <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f001 f862 	bl	8005f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d109      	bne.n	8004f08 <HAL_TIM_PWM_Start+0x24>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	bf14      	ite	ne
 8004f00:	2301      	movne	r3, #1
 8004f02:	2300      	moveq	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	e03c      	b.n	8004f82 <HAL_TIM_PWM_Start+0x9e>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d109      	bne.n	8004f22 <HAL_TIM_PWM_Start+0x3e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	bf14      	ite	ne
 8004f1a:	2301      	movne	r3, #1
 8004f1c:	2300      	moveq	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	e02f      	b.n	8004f82 <HAL_TIM_PWM_Start+0x9e>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d109      	bne.n	8004f3c <HAL_TIM_PWM_Start+0x58>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	bf14      	ite	ne
 8004f34:	2301      	movne	r3, #1
 8004f36:	2300      	moveq	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	e022      	b.n	8004f82 <HAL_TIM_PWM_Start+0x9e>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d109      	bne.n	8004f56 <HAL_TIM_PWM_Start+0x72>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	bf14      	ite	ne
 8004f4e:	2301      	movne	r3, #1
 8004f50:	2300      	moveq	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	e015      	b.n	8004f82 <HAL_TIM_PWM_Start+0x9e>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d109      	bne.n	8004f70 <HAL_TIM_PWM_Start+0x8c>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	bf14      	ite	ne
 8004f68:	2301      	movne	r3, #1
 8004f6a:	2300      	moveq	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	e008      	b.n	8004f82 <HAL_TIM_PWM_Start+0x9e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	bf14      	ite	ne
 8004f7c:	2301      	movne	r3, #1
 8004f7e:	2300      	moveq	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e0a6      	b.n	80050d8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_PWM_Start+0xb6>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f98:	e023      	b.n	8004fe2 <HAL_TIM_PWM_Start+0xfe>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d104      	bne.n	8004faa <HAL_TIM_PWM_Start+0xc6>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fa8:	e01b      	b.n	8004fe2 <HAL_TIM_PWM_Start+0xfe>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_PWM_Start+0xd6>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fb8:	e013      	b.n	8004fe2 <HAL_TIM_PWM_Start+0xfe>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b0c      	cmp	r3, #12
 8004fbe:	d104      	bne.n	8004fca <HAL_TIM_PWM_Start+0xe6>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fc8:	e00b      	b.n	8004fe2 <HAL_TIM_PWM_Start+0xfe>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_PWM_Start+0xf6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fd8:	e003      	b.n	8004fe2 <HAL_TIM_PWM_Start+0xfe>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	6839      	ldr	r1, [r7, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f001 fe20 	bl	8006c30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a3a      	ldr	r2, [pc, #232]	@ (80050e0 <HAL_TIM_PWM_Start+0x1fc>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d018      	beq.n	800502c <HAL_TIM_PWM_Start+0x148>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a39      	ldr	r2, [pc, #228]	@ (80050e4 <HAL_TIM_PWM_Start+0x200>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <HAL_TIM_PWM_Start+0x148>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a37      	ldr	r2, [pc, #220]	@ (80050e8 <HAL_TIM_PWM_Start+0x204>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00e      	beq.n	800502c <HAL_TIM_PWM_Start+0x148>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a36      	ldr	r2, [pc, #216]	@ (80050ec <HAL_TIM_PWM_Start+0x208>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d009      	beq.n	800502c <HAL_TIM_PWM_Start+0x148>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a34      	ldr	r2, [pc, #208]	@ (80050f0 <HAL_TIM_PWM_Start+0x20c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <HAL_TIM_PWM_Start+0x148>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a33      	ldr	r2, [pc, #204]	@ (80050f4 <HAL_TIM_PWM_Start+0x210>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d101      	bne.n	8005030 <HAL_TIM_PWM_Start+0x14c>
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <HAL_TIM_PWM_Start+0x14e>
 8005030:	2300      	movs	r3, #0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005044:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a25      	ldr	r2, [pc, #148]	@ (80050e0 <HAL_TIM_PWM_Start+0x1fc>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d022      	beq.n	8005096 <HAL_TIM_PWM_Start+0x1b2>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005058:	d01d      	beq.n	8005096 <HAL_TIM_PWM_Start+0x1b2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a26      	ldr	r2, [pc, #152]	@ (80050f8 <HAL_TIM_PWM_Start+0x214>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d018      	beq.n	8005096 <HAL_TIM_PWM_Start+0x1b2>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a24      	ldr	r2, [pc, #144]	@ (80050fc <HAL_TIM_PWM_Start+0x218>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <HAL_TIM_PWM_Start+0x1b2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a23      	ldr	r2, [pc, #140]	@ (8005100 <HAL_TIM_PWM_Start+0x21c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00e      	beq.n	8005096 <HAL_TIM_PWM_Start+0x1b2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a19      	ldr	r2, [pc, #100]	@ (80050e4 <HAL_TIM_PWM_Start+0x200>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d009      	beq.n	8005096 <HAL_TIM_PWM_Start+0x1b2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a18      	ldr	r2, [pc, #96]	@ (80050e8 <HAL_TIM_PWM_Start+0x204>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d004      	beq.n	8005096 <HAL_TIM_PWM_Start+0x1b2>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a18      	ldr	r2, [pc, #96]	@ (80050f4 <HAL_TIM_PWM_Start+0x210>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d115      	bne.n	80050c2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	4b19      	ldr	r3, [pc, #100]	@ (8005104 <HAL_TIM_PWM_Start+0x220>)
 800509e:	4013      	ands	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b06      	cmp	r3, #6
 80050a6:	d015      	beq.n	80050d4 <HAL_TIM_PWM_Start+0x1f0>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ae:	d011      	beq.n	80050d4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c0:	e008      	b.n	80050d4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0201 	orr.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	e000      	b.n	80050d6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40013400 	.word	0x40013400
 80050e8:	40014000 	.word	0x40014000
 80050ec:	40014400 	.word	0x40014400
 80050f0:	40014800 	.word	0x40014800
 80050f4:	40015000 	.word	0x40015000
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40000800 	.word	0x40000800
 8005100:	40000c00 	.word	0x40000c00
 8005104:	00010007 	.word	0x00010007

08005108 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e049      	b.n	80051ae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fe f9de 	bl	80034f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3304      	adds	r3, #4
 8005144:	4619      	mov	r1, r3
 8005146:	4610      	mov	r0, r2
 8005148:	f000 feee 	bl	8005f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d104      	bne.n	80051d2 <HAL_TIM_IC_Start+0x1a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	e023      	b.n	800521a <HAL_TIM_IC_Start+0x62>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_IC_Start+0x2a>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	e01b      	b.n	800521a <HAL_TIM_IC_Start+0x62>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_IC_Start+0x3a>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	e013      	b.n	800521a <HAL_TIM_IC_Start+0x62>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b0c      	cmp	r3, #12
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_IC_Start+0x4a>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	e00b      	b.n	800521a <HAL_TIM_IC_Start+0x62>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b10      	cmp	r3, #16
 8005206:	d104      	bne.n	8005212 <HAL_TIM_IC_Start+0x5a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800520e:	b2db      	uxtb	r3, r3
 8005210:	e003      	b.n	800521a <HAL_TIM_IC_Start+0x62>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005218:	b2db      	uxtb	r3, r3
 800521a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d104      	bne.n	800522c <HAL_TIM_IC_Start+0x74>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005228:	b2db      	uxtb	r3, r3
 800522a:	e013      	b.n	8005254 <HAL_TIM_IC_Start+0x9c>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b04      	cmp	r3, #4
 8005230:	d104      	bne.n	800523c <HAL_TIM_IC_Start+0x84>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005238:	b2db      	uxtb	r3, r3
 800523a:	e00b      	b.n	8005254 <HAL_TIM_IC_Start+0x9c>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b08      	cmp	r3, #8
 8005240:	d104      	bne.n	800524c <HAL_TIM_IC_Start+0x94>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005248:	b2db      	uxtb	r3, r3
 800524a:	e003      	b.n	8005254 <HAL_TIM_IC_Start+0x9c>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005252:	b2db      	uxtb	r3, r3
 8005254:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d102      	bne.n	8005262 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800525c:	7bbb      	ldrb	r3, [r7, #14]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d001      	beq.n	8005266 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e097      	b.n	8005396 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <HAL_TIM_IC_Start+0xbe>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005274:	e023      	b.n	80052be <HAL_TIM_IC_Start+0x106>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b04      	cmp	r3, #4
 800527a:	d104      	bne.n	8005286 <HAL_TIM_IC_Start+0xce>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005284:	e01b      	b.n	80052be <HAL_TIM_IC_Start+0x106>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d104      	bne.n	8005296 <HAL_TIM_IC_Start+0xde>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005294:	e013      	b.n	80052be <HAL_TIM_IC_Start+0x106>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b0c      	cmp	r3, #12
 800529a:	d104      	bne.n	80052a6 <HAL_TIM_IC_Start+0xee>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052a4:	e00b      	b.n	80052be <HAL_TIM_IC_Start+0x106>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_IC_Start+0xfe>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052b4:	e003      	b.n	80052be <HAL_TIM_IC_Start+0x106>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_IC_Start+0x116>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052cc:	e013      	b.n	80052f6 <HAL_TIM_IC_Start+0x13e>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d104      	bne.n	80052de <HAL_TIM_IC_Start+0x126>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052dc:	e00b      	b.n	80052f6 <HAL_TIM_IC_Start+0x13e>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_IC_Start+0x136>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052ec:	e003      	b.n	80052f6 <HAL_TIM_IC_Start+0x13e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2202      	movs	r2, #2
 80052f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2201      	movs	r2, #1
 80052fc:	6839      	ldr	r1, [r7, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f001 fc96 	bl	8006c30 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a25      	ldr	r2, [pc, #148]	@ (80053a0 <HAL_TIM_IC_Start+0x1e8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d022      	beq.n	8005354 <HAL_TIM_IC_Start+0x19c>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005316:	d01d      	beq.n	8005354 <HAL_TIM_IC_Start+0x19c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a21      	ldr	r2, [pc, #132]	@ (80053a4 <HAL_TIM_IC_Start+0x1ec>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d018      	beq.n	8005354 <HAL_TIM_IC_Start+0x19c>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a20      	ldr	r2, [pc, #128]	@ (80053a8 <HAL_TIM_IC_Start+0x1f0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d013      	beq.n	8005354 <HAL_TIM_IC_Start+0x19c>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1e      	ldr	r2, [pc, #120]	@ (80053ac <HAL_TIM_IC_Start+0x1f4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00e      	beq.n	8005354 <HAL_TIM_IC_Start+0x19c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a1d      	ldr	r2, [pc, #116]	@ (80053b0 <HAL_TIM_IC_Start+0x1f8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d009      	beq.n	8005354 <HAL_TIM_IC_Start+0x19c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1b      	ldr	r2, [pc, #108]	@ (80053b4 <HAL_TIM_IC_Start+0x1fc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d004      	beq.n	8005354 <HAL_TIM_IC_Start+0x19c>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1a      	ldr	r2, [pc, #104]	@ (80053b8 <HAL_TIM_IC_Start+0x200>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d115      	bne.n	8005380 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	4b18      	ldr	r3, [pc, #96]	@ (80053bc <HAL_TIM_IC_Start+0x204>)
 800535c:	4013      	ands	r3, r2
 800535e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b06      	cmp	r3, #6
 8005364:	d015      	beq.n	8005392 <HAL_TIM_IC_Start+0x1da>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800536c:	d011      	beq.n	8005392 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537e:	e008      	b.n	8005392 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	e000      	b.n	8005394 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005392:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	40012c00 	.word	0x40012c00
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800
 80053ac:	40000c00 	.word	0x40000c00
 80053b0:	40013400 	.word	0x40013400
 80053b4:	40014000 	.word	0x40014000
 80053b8:	40015000 	.word	0x40015000
 80053bc:	00010007 	.word	0x00010007

080053c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e097      	b.n	8005504 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7fe f8f3 	bl	80035d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6812      	ldr	r2, [r2, #0]
 8005400:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005404:	f023 0307 	bic.w	r3, r3, #7
 8005408:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3304      	adds	r3, #4
 8005412:	4619      	mov	r1, r3
 8005414:	4610      	mov	r0, r2
 8005416:	f000 fd87 	bl	8005f28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005442:	f023 0303 	bic.w	r3, r3, #3
 8005446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	021b      	lsls	r3, r3, #8
 8005452:	4313      	orrs	r3, r2
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	4313      	orrs	r3, r2
 8005458:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005460:	f023 030c 	bic.w	r3, r3, #12
 8005464:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800546c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005470:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	4313      	orrs	r3, r2
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	011a      	lsls	r2, r3, #4
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	031b      	lsls	r3, r3, #12
 8005490:	4313      	orrs	r3, r2
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800549e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	4313      	orrs	r3, r2
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800551c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005524:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800552c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005534:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d110      	bne.n	800555e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d102      	bne.n	8005548 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005542:	7b7b      	ldrb	r3, [r7, #13]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d001      	beq.n	800554c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e069      	b.n	8005620 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800555c:	e031      	b.n	80055c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b04      	cmp	r3, #4
 8005562:	d110      	bne.n	8005586 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005564:	7bbb      	ldrb	r3, [r7, #14]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d102      	bne.n	8005570 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800556a:	7b3b      	ldrb	r3, [r7, #12]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d001      	beq.n	8005574 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e055      	b.n	8005620 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005584:	e01d      	b.n	80055c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d108      	bne.n	800559e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800558c:	7bbb      	ldrb	r3, [r7, #14]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d105      	bne.n	800559e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005592:	7b7b      	ldrb	r3, [r7, #13]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d102      	bne.n	800559e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005598:	7b3b      	ldrb	r3, [r7, #12]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d001      	beq.n	80055a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e03e      	b.n	8005620 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2202      	movs	r2, #2
 80055ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2202      	movs	r2, #2
 80055b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_TIM_Encoder_Start+0xc4>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d008      	beq.n	80055e0 <HAL_TIM_Encoder_Start+0xd4>
 80055ce:	e00f      	b.n	80055f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2201      	movs	r2, #1
 80055d6:	2100      	movs	r1, #0
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 fb29 	bl	8006c30 <TIM_CCxChannelCmd>
      break;
 80055de:	e016      	b.n	800560e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2201      	movs	r2, #1
 80055e6:	2104      	movs	r1, #4
 80055e8:	4618      	mov	r0, r3
 80055ea:	f001 fb21 	bl	8006c30 <TIM_CCxChannelCmd>
      break;
 80055ee:	e00e      	b.n	800560e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2201      	movs	r2, #1
 80055f6:	2100      	movs	r1, #0
 80055f8:	4618      	mov	r0, r3
 80055fa:	f001 fb19 	bl	8006c30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2201      	movs	r2, #1
 8005604:	2104      	movs	r1, #4
 8005606:	4618      	mov	r0, r3
 8005608:	f001 fb12 	bl	8006c30 <TIM_CCxChannelCmd>
      break;
 800560c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0201 	orr.w	r2, r2, #1
 800561c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d020      	beq.n	800568c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d01b      	beq.n	800568c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0202 	mvn.w	r2, #2
 800565c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fc3a 	bl	8005eec <HAL_TIM_IC_CaptureCallback>
 8005678:	e005      	b.n	8005686 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fc2c 	bl	8005ed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fc3d 	bl	8005f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	d020      	beq.n	80056d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01b      	beq.n	80056d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0204 	mvn.w	r2, #4
 80056a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fc14 	bl	8005eec <HAL_TIM_IC_CaptureCallback>
 80056c4:	e005      	b.n	80056d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fc06 	bl	8005ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fc17 	bl	8005f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d020      	beq.n	8005724 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01b      	beq.n	8005724 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0208 	mvn.w	r2, #8
 80056f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2204      	movs	r2, #4
 80056fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fbee 	bl	8005eec <HAL_TIM_IC_CaptureCallback>
 8005710:	e005      	b.n	800571e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fbe0 	bl	8005ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fbf1 	bl	8005f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b00      	cmp	r3, #0
 800572c:	d020      	beq.n	8005770 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01b      	beq.n	8005770 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0210 	mvn.w	r2, #16
 8005740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2208      	movs	r2, #8
 8005746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fbc8 	bl	8005eec <HAL_TIM_IC_CaptureCallback>
 800575c:	e005      	b.n	800576a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fbba 	bl	8005ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fbcb 	bl	8005f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00c      	beq.n	8005794 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0201 	mvn.w	r2, #1
 800578c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fd fb42 	bl	8002e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579a:	2b00      	cmp	r3, #0
 800579c:	d104      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00c      	beq.n	80057c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80057ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 fb91 	bl	8006ee4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00c      	beq.n	80057e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d007      	beq.n	80057e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80057de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f001 fb89 	bl	8006ef8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00c      	beq.n	800580a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fb85 	bl	8005f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00c      	beq.n	800582e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f06f 0220 	mvn.w	r2, #32
 8005826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f001 fb51 	bl	8006ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00c      	beq.n	8005852 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d007      	beq.n	8005852 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800584a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f001 fb5d 	bl	8006f0c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00c      	beq.n	8005876 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800586e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 fb55 	bl	8006f20 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00c      	beq.n	800589a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d007      	beq.n	800589a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 fb4d 	bl	8006f34 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00c      	beq.n	80058be <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80058b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f001 fb45 	bl	8006f48 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058be:	bf00      	nop
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b086      	sub	sp, #24
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e088      	b.n	80059f6 <HAL_TIM_IC_ConfigChannel+0x130>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d11b      	bne.n	800592a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005902:	f000 ffcf 	bl	80068a4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699a      	ldr	r2, [r3, #24]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 020c 	bic.w	r2, r2, #12
 8005914:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6999      	ldr	r1, [r3, #24]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	619a      	str	r2, [r3, #24]
 8005928:	e060      	b.n	80059ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b04      	cmp	r3, #4
 800592e:	d11c      	bne.n	800596a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005940:	f001 f853 	bl	80069ea <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005952:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6999      	ldr	r1, [r3, #24]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	021a      	lsls	r2, r3, #8
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	619a      	str	r2, [r3, #24]
 8005968:	e040      	b.n	80059ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b08      	cmp	r3, #8
 800596e:	d11b      	bne.n	80059a8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005980:	f001 f8a0 	bl	8006ac4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69da      	ldr	r2, [r3, #28]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 020c 	bic.w	r2, r2, #12
 8005992:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	69d9      	ldr	r1, [r3, #28]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	61da      	str	r2, [r3, #28]
 80059a6:	e021      	b.n	80059ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b0c      	cmp	r3, #12
 80059ac:	d11c      	bne.n	80059e8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80059be:	f001 f8bd 	bl	8006b3c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80059d0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69d9      	ldr	r1, [r3, #28]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	021a      	lsls	r2, r3, #8
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	61da      	str	r2, [r3, #28]
 80059e6:	e001      	b.n	80059ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e0ff      	b.n	8005c1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b14      	cmp	r3, #20
 8005a2a:	f200 80f0 	bhi.w	8005c0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a89 	.word	0x08005a89
 8005a38:	08005c0f 	.word	0x08005c0f
 8005a3c:	08005c0f 	.word	0x08005c0f
 8005a40:	08005c0f 	.word	0x08005c0f
 8005a44:	08005ac9 	.word	0x08005ac9
 8005a48:	08005c0f 	.word	0x08005c0f
 8005a4c:	08005c0f 	.word	0x08005c0f
 8005a50:	08005c0f 	.word	0x08005c0f
 8005a54:	08005b0b 	.word	0x08005b0b
 8005a58:	08005c0f 	.word	0x08005c0f
 8005a5c:	08005c0f 	.word	0x08005c0f
 8005a60:	08005c0f 	.word	0x08005c0f
 8005a64:	08005b4b 	.word	0x08005b4b
 8005a68:	08005c0f 	.word	0x08005c0f
 8005a6c:	08005c0f 	.word	0x08005c0f
 8005a70:	08005c0f 	.word	0x08005c0f
 8005a74:	08005b8d 	.word	0x08005b8d
 8005a78:	08005c0f 	.word	0x08005c0f
 8005a7c:	08005c0f 	.word	0x08005c0f
 8005a80:	08005c0f 	.word	0x08005c0f
 8005a84:	08005bcd 	.word	0x08005bcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fafe 	bl	8006090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0208 	orr.w	r2, r2, #8
 8005aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0204 	bic.w	r2, r2, #4
 8005ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6999      	ldr	r1, [r3, #24]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	619a      	str	r2, [r3, #24]
      break;
 8005ac6:	e0a5      	b.n	8005c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fb78 	bl	80061c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6999      	ldr	r1, [r3, #24]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	021a      	lsls	r2, r3, #8
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	619a      	str	r2, [r3, #24]
      break;
 8005b08:	e084      	b.n	8005c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fbeb 	bl	80062ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0208 	orr.w	r2, r2, #8
 8005b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0204 	bic.w	r2, r2, #4
 8005b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69d9      	ldr	r1, [r3, #28]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	61da      	str	r2, [r3, #28]
      break;
 8005b48:	e064      	b.n	8005c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 fc5d 	bl	8006410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69d9      	ldr	r1, [r3, #28]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	021a      	lsls	r2, r3, #8
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	61da      	str	r2, [r3, #28]
      break;
 8005b8a:	e043      	b.n	8005c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fcd0 	bl	8006538 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0208 	orr.w	r2, r2, #8
 8005ba6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0204 	bic.w	r2, r2, #4
 8005bb6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005bca:	e023      	b.n	8005c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fd1a 	bl	800660c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005be6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bf6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	021a      	lsls	r2, r3, #8
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c0c:	e002      	b.n	8005c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	75fb      	strb	r3, [r7, #23]
      break;
 8005c12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop

08005c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_TIM_ConfigClockSource+0x1c>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e0f6      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x20a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005c62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a6f      	ldr	r2, [pc, #444]	@ (8005e3c <HAL_TIM_ConfigClockSource+0x214>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	f000 80c1 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005c84:	4a6d      	ldr	r2, [pc, #436]	@ (8005e3c <HAL_TIM_ConfigClockSource+0x214>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	f200 80c6 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c8c:	4a6c      	ldr	r2, [pc, #432]	@ (8005e40 <HAL_TIM_ConfigClockSource+0x218>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	f000 80b9 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005c94:	4a6a      	ldr	r2, [pc, #424]	@ (8005e40 <HAL_TIM_ConfigClockSource+0x218>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	f200 80be 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c9c:	4a69      	ldr	r2, [pc, #420]	@ (8005e44 <HAL_TIM_ConfigClockSource+0x21c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	f000 80b1 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005ca4:	4a67      	ldr	r2, [pc, #412]	@ (8005e44 <HAL_TIM_ConfigClockSource+0x21c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	f200 80b6 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cac:	4a66      	ldr	r2, [pc, #408]	@ (8005e48 <HAL_TIM_ConfigClockSource+0x220>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	f000 80a9 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005cb4:	4a64      	ldr	r2, [pc, #400]	@ (8005e48 <HAL_TIM_ConfigClockSource+0x220>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	f200 80ae 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cbc:	4a63      	ldr	r2, [pc, #396]	@ (8005e4c <HAL_TIM_ConfigClockSource+0x224>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	f000 80a1 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005cc4:	4a61      	ldr	r2, [pc, #388]	@ (8005e4c <HAL_TIM_ConfigClockSource+0x224>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	f200 80a6 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ccc:	4a60      	ldr	r2, [pc, #384]	@ (8005e50 <HAL_TIM_ConfigClockSource+0x228>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	f000 8099 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005cd4:	4a5e      	ldr	r2, [pc, #376]	@ (8005e50 <HAL_TIM_ConfigClockSource+0x228>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	f200 809e 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cdc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005ce0:	f000 8091 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005ce4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005ce8:	f200 8096 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cf0:	f000 8089 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005cf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cf8:	f200 808e 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d00:	d03e      	beq.n	8005d80 <HAL_TIM_ConfigClockSource+0x158>
 8005d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d06:	f200 8087 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d0e:	f000 8086 	beq.w	8005e1e <HAL_TIM_ConfigClockSource+0x1f6>
 8005d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d16:	d87f      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d18:	2b70      	cmp	r3, #112	@ 0x70
 8005d1a:	d01a      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x12a>
 8005d1c:	2b70      	cmp	r3, #112	@ 0x70
 8005d1e:	d87b      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d20:	2b60      	cmp	r3, #96	@ 0x60
 8005d22:	d050      	beq.n	8005dc6 <HAL_TIM_ConfigClockSource+0x19e>
 8005d24:	2b60      	cmp	r3, #96	@ 0x60
 8005d26:	d877      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d28:	2b50      	cmp	r3, #80	@ 0x50
 8005d2a:	d03c      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x17e>
 8005d2c:	2b50      	cmp	r3, #80	@ 0x50
 8005d2e:	d873      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d30:	2b40      	cmp	r3, #64	@ 0x40
 8005d32:	d058      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x1be>
 8005d34:	2b40      	cmp	r3, #64	@ 0x40
 8005d36:	d86f      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d38:	2b30      	cmp	r3, #48	@ 0x30
 8005d3a:	d064      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005d3c:	2b30      	cmp	r3, #48	@ 0x30
 8005d3e:	d86b      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d060      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d867      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d05c      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005d4c:	2b10      	cmp	r3, #16
 8005d4e:	d05a      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x1de>
 8005d50:	e062      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d62:	f000 ff45 	bl	8006bf0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	609a      	str	r2, [r3, #8]
      break;
 8005d7e:	e04f      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d90:	f000 ff2e 	bl	8006bf0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005da2:	609a      	str	r2, [r3, #8]
      break;
 8005da4:	e03c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db2:	461a      	mov	r2, r3
 8005db4:	f000 fdea 	bl	800698c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2150      	movs	r1, #80	@ 0x50
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fef9 	bl	8006bb6 <TIM_ITRx_SetConfig>
      break;
 8005dc4:	e02c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f000 fe46 	bl	8006a64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2160      	movs	r1, #96	@ 0x60
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fee9 	bl	8006bb6 <TIM_ITRx_SetConfig>
      break;
 8005de4:	e01c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df2:	461a      	mov	r2, r3
 8005df4:	f000 fdca 	bl	800698c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2140      	movs	r1, #64	@ 0x40
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fed9 	bl	8006bb6 <TIM_ITRx_SetConfig>
      break;
 8005e04:	e00c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4610      	mov	r0, r2
 8005e12:	f000 fed0 	bl	8006bb6 <TIM_ITRx_SetConfig>
      break;
 8005e16:	e003      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e1c:	e000      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005e1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	00100070 	.word	0x00100070
 8005e40:	00100060 	.word	0x00100060
 8005e44:	00100050 	.word	0x00100050
 8005e48:	00100040 	.word	0x00100040
 8005e4c:	00100030 	.word	0x00100030
 8005e50:	00100020 	.word	0x00100020

08005e54 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e031      	b.n	8005ed0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fc30 	bl	80066e4 <TIM_SlaveTimer_SetConfig>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d009      	beq.n	8005e9e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e018      	b.n	8005ed0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eac:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ebc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a4c      	ldr	r2, [pc, #304]	@ (800606c <TIM_Base_SetConfig+0x144>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d017      	beq.n	8005f70 <TIM_Base_SetConfig+0x48>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f46:	d013      	beq.n	8005f70 <TIM_Base_SetConfig+0x48>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a49      	ldr	r2, [pc, #292]	@ (8006070 <TIM_Base_SetConfig+0x148>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00f      	beq.n	8005f70 <TIM_Base_SetConfig+0x48>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a48      	ldr	r2, [pc, #288]	@ (8006074 <TIM_Base_SetConfig+0x14c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00b      	beq.n	8005f70 <TIM_Base_SetConfig+0x48>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a47      	ldr	r2, [pc, #284]	@ (8006078 <TIM_Base_SetConfig+0x150>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d007      	beq.n	8005f70 <TIM_Base_SetConfig+0x48>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a46      	ldr	r2, [pc, #280]	@ (800607c <TIM_Base_SetConfig+0x154>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d003      	beq.n	8005f70 <TIM_Base_SetConfig+0x48>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a45      	ldr	r2, [pc, #276]	@ (8006080 <TIM_Base_SetConfig+0x158>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d108      	bne.n	8005f82 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a39      	ldr	r2, [pc, #228]	@ (800606c <TIM_Base_SetConfig+0x144>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d023      	beq.n	8005fd2 <TIM_Base_SetConfig+0xaa>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f90:	d01f      	beq.n	8005fd2 <TIM_Base_SetConfig+0xaa>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a36      	ldr	r2, [pc, #216]	@ (8006070 <TIM_Base_SetConfig+0x148>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d01b      	beq.n	8005fd2 <TIM_Base_SetConfig+0xaa>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a35      	ldr	r2, [pc, #212]	@ (8006074 <TIM_Base_SetConfig+0x14c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d017      	beq.n	8005fd2 <TIM_Base_SetConfig+0xaa>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a34      	ldr	r2, [pc, #208]	@ (8006078 <TIM_Base_SetConfig+0x150>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <TIM_Base_SetConfig+0xaa>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a33      	ldr	r2, [pc, #204]	@ (800607c <TIM_Base_SetConfig+0x154>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00f      	beq.n	8005fd2 <TIM_Base_SetConfig+0xaa>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a33      	ldr	r2, [pc, #204]	@ (8006084 <TIM_Base_SetConfig+0x15c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d00b      	beq.n	8005fd2 <TIM_Base_SetConfig+0xaa>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a32      	ldr	r2, [pc, #200]	@ (8006088 <TIM_Base_SetConfig+0x160>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d007      	beq.n	8005fd2 <TIM_Base_SetConfig+0xaa>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a31      	ldr	r2, [pc, #196]	@ (800608c <TIM_Base_SetConfig+0x164>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d003      	beq.n	8005fd2 <TIM_Base_SetConfig+0xaa>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8006080 <TIM_Base_SetConfig+0x158>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d108      	bne.n	8005fe4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a18      	ldr	r2, [pc, #96]	@ (800606c <TIM_Base_SetConfig+0x144>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d013      	beq.n	8006038 <TIM_Base_SetConfig+0x110>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a1a      	ldr	r2, [pc, #104]	@ (800607c <TIM_Base_SetConfig+0x154>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00f      	beq.n	8006038 <TIM_Base_SetConfig+0x110>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a1a      	ldr	r2, [pc, #104]	@ (8006084 <TIM_Base_SetConfig+0x15c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00b      	beq.n	8006038 <TIM_Base_SetConfig+0x110>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a19      	ldr	r2, [pc, #100]	@ (8006088 <TIM_Base_SetConfig+0x160>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d007      	beq.n	8006038 <TIM_Base_SetConfig+0x110>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a18      	ldr	r2, [pc, #96]	@ (800608c <TIM_Base_SetConfig+0x164>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d003      	beq.n	8006038 <TIM_Base_SetConfig+0x110>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a13      	ldr	r2, [pc, #76]	@ (8006080 <TIM_Base_SetConfig+0x158>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d103      	bne.n	8006040 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b01      	cmp	r3, #1
 8006050:	d105      	bne.n	800605e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f023 0201 	bic.w	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	611a      	str	r2, [r3, #16]
  }
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40012c00 	.word	0x40012c00
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40013400 	.word	0x40013400
 8006080:	40015000 	.word	0x40015000
 8006084:	40014000 	.word	0x40014000
 8006088:	40014400 	.word	0x40014400
 800608c:	40014800 	.word	0x40014800

08006090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	f023 0201 	bic.w	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 0303 	bic.w	r3, r3, #3
 80060ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f023 0302 	bic.w	r3, r3, #2
 80060dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a30      	ldr	r2, [pc, #192]	@ (80061ac <TIM_OC1_SetConfig+0x11c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d013      	beq.n	8006118 <TIM_OC1_SetConfig+0x88>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a2f      	ldr	r2, [pc, #188]	@ (80061b0 <TIM_OC1_SetConfig+0x120>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00f      	beq.n	8006118 <TIM_OC1_SetConfig+0x88>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a2e      	ldr	r2, [pc, #184]	@ (80061b4 <TIM_OC1_SetConfig+0x124>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d00b      	beq.n	8006118 <TIM_OC1_SetConfig+0x88>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a2d      	ldr	r2, [pc, #180]	@ (80061b8 <TIM_OC1_SetConfig+0x128>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d007      	beq.n	8006118 <TIM_OC1_SetConfig+0x88>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a2c      	ldr	r2, [pc, #176]	@ (80061bc <TIM_OC1_SetConfig+0x12c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d003      	beq.n	8006118 <TIM_OC1_SetConfig+0x88>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a2b      	ldr	r2, [pc, #172]	@ (80061c0 <TIM_OC1_SetConfig+0x130>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d10c      	bne.n	8006132 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f023 0308 	bic.w	r3, r3, #8
 800611e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	4313      	orrs	r3, r2
 8006128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f023 0304 	bic.w	r3, r3, #4
 8006130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a1d      	ldr	r2, [pc, #116]	@ (80061ac <TIM_OC1_SetConfig+0x11c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d013      	beq.n	8006162 <TIM_OC1_SetConfig+0xd2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a1c      	ldr	r2, [pc, #112]	@ (80061b0 <TIM_OC1_SetConfig+0x120>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00f      	beq.n	8006162 <TIM_OC1_SetConfig+0xd2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a1b      	ldr	r2, [pc, #108]	@ (80061b4 <TIM_OC1_SetConfig+0x124>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00b      	beq.n	8006162 <TIM_OC1_SetConfig+0xd2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a1a      	ldr	r2, [pc, #104]	@ (80061b8 <TIM_OC1_SetConfig+0x128>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d007      	beq.n	8006162 <TIM_OC1_SetConfig+0xd2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a19      	ldr	r2, [pc, #100]	@ (80061bc <TIM_OC1_SetConfig+0x12c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d003      	beq.n	8006162 <TIM_OC1_SetConfig+0xd2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a18      	ldr	r2, [pc, #96]	@ (80061c0 <TIM_OC1_SetConfig+0x130>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d111      	bne.n	8006186 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	621a      	str	r2, [r3, #32]
}
 80061a0:	bf00      	nop
 80061a2:	371c      	adds	r7, #28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	40012c00 	.word	0x40012c00
 80061b0:	40013400 	.word	0x40013400
 80061b4:	40014000 	.word	0x40014000
 80061b8:	40014400 	.word	0x40014400
 80061bc:	40014800 	.word	0x40014800
 80061c0:	40015000 	.word	0x40015000

080061c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	f023 0210 	bic.w	r2, r3, #16
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	021b      	lsls	r3, r3, #8
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f023 0320 	bic.w	r3, r3, #32
 8006212:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a2c      	ldr	r2, [pc, #176]	@ (80062d4 <TIM_OC2_SetConfig+0x110>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d007      	beq.n	8006238 <TIM_OC2_SetConfig+0x74>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a2b      	ldr	r2, [pc, #172]	@ (80062d8 <TIM_OC2_SetConfig+0x114>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d003      	beq.n	8006238 <TIM_OC2_SetConfig+0x74>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a2a      	ldr	r2, [pc, #168]	@ (80062dc <TIM_OC2_SetConfig+0x118>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d10d      	bne.n	8006254 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800623e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006252:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a1f      	ldr	r2, [pc, #124]	@ (80062d4 <TIM_OC2_SetConfig+0x110>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d013      	beq.n	8006284 <TIM_OC2_SetConfig+0xc0>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a1e      	ldr	r2, [pc, #120]	@ (80062d8 <TIM_OC2_SetConfig+0x114>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00f      	beq.n	8006284 <TIM_OC2_SetConfig+0xc0>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a1e      	ldr	r2, [pc, #120]	@ (80062e0 <TIM_OC2_SetConfig+0x11c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00b      	beq.n	8006284 <TIM_OC2_SetConfig+0xc0>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a1d      	ldr	r2, [pc, #116]	@ (80062e4 <TIM_OC2_SetConfig+0x120>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d007      	beq.n	8006284 <TIM_OC2_SetConfig+0xc0>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a1c      	ldr	r2, [pc, #112]	@ (80062e8 <TIM_OC2_SetConfig+0x124>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_OC2_SetConfig+0xc0>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a17      	ldr	r2, [pc, #92]	@ (80062dc <TIM_OC2_SetConfig+0x118>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d113      	bne.n	80062ac <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800628a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006292:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	4313      	orrs	r3, r2
 800629e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	621a      	str	r2, [r3, #32]
}
 80062c6:	bf00      	nop
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40013400 	.word	0x40013400
 80062dc:	40015000 	.word	0x40015000
 80062e0:	40014000 	.word	0x40014000
 80062e4:	40014400 	.word	0x40014400
 80062e8:	40014800 	.word	0x40014800

080062ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800631a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800631e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 0303 	bic.w	r3, r3, #3
 8006326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a2b      	ldr	r2, [pc, #172]	@ (80063f8 <TIM_OC3_SetConfig+0x10c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d007      	beq.n	800635e <TIM_OC3_SetConfig+0x72>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a2a      	ldr	r2, [pc, #168]	@ (80063fc <TIM_OC3_SetConfig+0x110>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d003      	beq.n	800635e <TIM_OC3_SetConfig+0x72>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a29      	ldr	r2, [pc, #164]	@ (8006400 <TIM_OC3_SetConfig+0x114>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d10d      	bne.n	800637a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	021b      	lsls	r3, r3, #8
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a1e      	ldr	r2, [pc, #120]	@ (80063f8 <TIM_OC3_SetConfig+0x10c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <TIM_OC3_SetConfig+0xbe>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a1d      	ldr	r2, [pc, #116]	@ (80063fc <TIM_OC3_SetConfig+0x110>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00f      	beq.n	80063aa <TIM_OC3_SetConfig+0xbe>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a1d      	ldr	r2, [pc, #116]	@ (8006404 <TIM_OC3_SetConfig+0x118>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00b      	beq.n	80063aa <TIM_OC3_SetConfig+0xbe>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a1c      	ldr	r2, [pc, #112]	@ (8006408 <TIM_OC3_SetConfig+0x11c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d007      	beq.n	80063aa <TIM_OC3_SetConfig+0xbe>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a1b      	ldr	r2, [pc, #108]	@ (800640c <TIM_OC3_SetConfig+0x120>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d003      	beq.n	80063aa <TIM_OC3_SetConfig+0xbe>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a16      	ldr	r2, [pc, #88]	@ (8006400 <TIM_OC3_SetConfig+0x114>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d113      	bne.n	80063d2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	621a      	str	r2, [r3, #32]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	40012c00 	.word	0x40012c00
 80063fc:	40013400 	.word	0x40013400
 8006400:	40015000 	.word	0x40015000
 8006404:	40014000 	.word	0x40014000
 8006408:	40014400 	.word	0x40014400
 800640c:	40014800 	.word	0x40014800

08006410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800643e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800644a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	021b      	lsls	r3, r3, #8
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800645e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	031b      	lsls	r3, r3, #12
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a2c      	ldr	r2, [pc, #176]	@ (8006520 <TIM_OC4_SetConfig+0x110>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d007      	beq.n	8006484 <TIM_OC4_SetConfig+0x74>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a2b      	ldr	r2, [pc, #172]	@ (8006524 <TIM_OC4_SetConfig+0x114>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <TIM_OC4_SetConfig+0x74>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a2a      	ldr	r2, [pc, #168]	@ (8006528 <TIM_OC4_SetConfig+0x118>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d10d      	bne.n	80064a0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800648a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	031b      	lsls	r3, r3, #12
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800649e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006520 <TIM_OC4_SetConfig+0x110>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d013      	beq.n	80064d0 <TIM_OC4_SetConfig+0xc0>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006524 <TIM_OC4_SetConfig+0x114>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00f      	beq.n	80064d0 <TIM_OC4_SetConfig+0xc0>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a1e      	ldr	r2, [pc, #120]	@ (800652c <TIM_OC4_SetConfig+0x11c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00b      	beq.n	80064d0 <TIM_OC4_SetConfig+0xc0>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a1d      	ldr	r2, [pc, #116]	@ (8006530 <TIM_OC4_SetConfig+0x120>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d007      	beq.n	80064d0 <TIM_OC4_SetConfig+0xc0>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006534 <TIM_OC4_SetConfig+0x124>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_OC4_SetConfig+0xc0>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a17      	ldr	r2, [pc, #92]	@ (8006528 <TIM_OC4_SetConfig+0x118>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d113      	bne.n	80064f8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064d6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064de:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	019b      	lsls	r3, r3, #6
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	019b      	lsls	r3, r3, #6
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	621a      	str	r2, [r3, #32]
}
 8006512:	bf00      	nop
 8006514:	371c      	adds	r7, #28
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	40012c00 	.word	0x40012c00
 8006524:	40013400 	.word	0x40013400
 8006528:	40015000 	.word	0x40015000
 800652c:	40014000 	.word	0x40014000
 8006530:	40014400 	.word	0x40014400
 8006534:	40014800 	.word	0x40014800

08006538 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800655e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800656a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800657c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	041b      	lsls	r3, r3, #16
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a19      	ldr	r2, [pc, #100]	@ (80065f4 <TIM_OC5_SetConfig+0xbc>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d013      	beq.n	80065ba <TIM_OC5_SetConfig+0x82>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a18      	ldr	r2, [pc, #96]	@ (80065f8 <TIM_OC5_SetConfig+0xc0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00f      	beq.n	80065ba <TIM_OC5_SetConfig+0x82>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a17      	ldr	r2, [pc, #92]	@ (80065fc <TIM_OC5_SetConfig+0xc4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00b      	beq.n	80065ba <TIM_OC5_SetConfig+0x82>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a16      	ldr	r2, [pc, #88]	@ (8006600 <TIM_OC5_SetConfig+0xc8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d007      	beq.n	80065ba <TIM_OC5_SetConfig+0x82>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a15      	ldr	r2, [pc, #84]	@ (8006604 <TIM_OC5_SetConfig+0xcc>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d003      	beq.n	80065ba <TIM_OC5_SetConfig+0x82>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a14      	ldr	r2, [pc, #80]	@ (8006608 <TIM_OC5_SetConfig+0xd0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d109      	bne.n	80065ce <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	621a      	str	r2, [r3, #32]
}
 80065e8:	bf00      	nop
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	40012c00 	.word	0x40012c00
 80065f8:	40013400 	.word	0x40013400
 80065fc:	40014000 	.word	0x40014000
 8006600:	40014400 	.word	0x40014400
 8006604:	40014800 	.word	0x40014800
 8006608:	40015000 	.word	0x40015000

0800660c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800663a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800663e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	021b      	lsls	r3, r3, #8
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	051b      	lsls	r3, r3, #20
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a1a      	ldr	r2, [pc, #104]	@ (80066cc <TIM_OC6_SetConfig+0xc0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d013      	beq.n	8006690 <TIM_OC6_SetConfig+0x84>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a19      	ldr	r2, [pc, #100]	@ (80066d0 <TIM_OC6_SetConfig+0xc4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00f      	beq.n	8006690 <TIM_OC6_SetConfig+0x84>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a18      	ldr	r2, [pc, #96]	@ (80066d4 <TIM_OC6_SetConfig+0xc8>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00b      	beq.n	8006690 <TIM_OC6_SetConfig+0x84>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a17      	ldr	r2, [pc, #92]	@ (80066d8 <TIM_OC6_SetConfig+0xcc>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d007      	beq.n	8006690 <TIM_OC6_SetConfig+0x84>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a16      	ldr	r2, [pc, #88]	@ (80066dc <TIM_OC6_SetConfig+0xd0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_OC6_SetConfig+0x84>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a15      	ldr	r2, [pc, #84]	@ (80066e0 <TIM_OC6_SetConfig+0xd4>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d109      	bne.n	80066a4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006696:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	029b      	lsls	r3, r3, #10
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40012c00 	.word	0x40012c00
 80066d0:	40013400 	.word	0x40013400
 80066d4:	40014000 	.word	0x40014000
 80066d8:	40014400 	.word	0x40014400
 80066dc:	40014800 	.word	0x40014800
 80066e0:	40015000 	.word	0x40015000

080066e4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006704:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006716:	f023 0307 	bic.w	r3, r3, #7
 800671a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	4a56      	ldr	r2, [pc, #344]	@ (800688c <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	f000 80a2 	beq.w	800687e <TIM_SlaveTimer_SetConfig+0x19a>
 800673a:	4a54      	ldr	r2, [pc, #336]	@ (800688c <TIM_SlaveTimer_SetConfig+0x1a8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	f200 809b 	bhi.w	8006878 <TIM_SlaveTimer_SetConfig+0x194>
 8006742:	4a53      	ldr	r2, [pc, #332]	@ (8006890 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8006744:	4293      	cmp	r3, r2
 8006746:	f000 809a 	beq.w	800687e <TIM_SlaveTimer_SetConfig+0x19a>
 800674a:	4a51      	ldr	r2, [pc, #324]	@ (8006890 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800674c:	4293      	cmp	r3, r2
 800674e:	f200 8093 	bhi.w	8006878 <TIM_SlaveTimer_SetConfig+0x194>
 8006752:	4a50      	ldr	r2, [pc, #320]	@ (8006894 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8006754:	4293      	cmp	r3, r2
 8006756:	f000 8092 	beq.w	800687e <TIM_SlaveTimer_SetConfig+0x19a>
 800675a:	4a4e      	ldr	r2, [pc, #312]	@ (8006894 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800675c:	4293      	cmp	r3, r2
 800675e:	f200 808b 	bhi.w	8006878 <TIM_SlaveTimer_SetConfig+0x194>
 8006762:	4a4d      	ldr	r2, [pc, #308]	@ (8006898 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8006764:	4293      	cmp	r3, r2
 8006766:	f000 808a 	beq.w	800687e <TIM_SlaveTimer_SetConfig+0x19a>
 800676a:	4a4b      	ldr	r2, [pc, #300]	@ (8006898 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800676c:	4293      	cmp	r3, r2
 800676e:	f200 8083 	bhi.w	8006878 <TIM_SlaveTimer_SetConfig+0x194>
 8006772:	4a4a      	ldr	r2, [pc, #296]	@ (800689c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	f000 8082 	beq.w	800687e <TIM_SlaveTimer_SetConfig+0x19a>
 800677a:	4a48      	ldr	r2, [pc, #288]	@ (800689c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d87b      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x194>
 8006780:	4a47      	ldr	r2, [pc, #284]	@ (80068a0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d07b      	beq.n	800687e <TIM_SlaveTimer_SetConfig+0x19a>
 8006786:	4a46      	ldr	r2, [pc, #280]	@ (80068a0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d875      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x194>
 800678c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006790:	d075      	beq.n	800687e <TIM_SlaveTimer_SetConfig+0x19a>
 8006792:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006796:	d86f      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x194>
 8006798:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800679c:	d06f      	beq.n	800687e <TIM_SlaveTimer_SetConfig+0x19a>
 800679e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067a2:	d869      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x194>
 80067a4:	2b70      	cmp	r3, #112	@ 0x70
 80067a6:	d01a      	beq.n	80067de <TIM_SlaveTimer_SetConfig+0xfa>
 80067a8:	2b70      	cmp	r3, #112	@ 0x70
 80067aa:	d865      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x194>
 80067ac:	2b60      	cmp	r3, #96	@ 0x60
 80067ae:	d059      	beq.n	8006864 <TIM_SlaveTimer_SetConfig+0x180>
 80067b0:	2b60      	cmp	r3, #96	@ 0x60
 80067b2:	d861      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x194>
 80067b4:	2b50      	cmp	r3, #80	@ 0x50
 80067b6:	d04b      	beq.n	8006850 <TIM_SlaveTimer_SetConfig+0x16c>
 80067b8:	2b50      	cmp	r3, #80	@ 0x50
 80067ba:	d85d      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x194>
 80067bc:	2b40      	cmp	r3, #64	@ 0x40
 80067be:	d019      	beq.n	80067f4 <TIM_SlaveTimer_SetConfig+0x110>
 80067c0:	2b40      	cmp	r3, #64	@ 0x40
 80067c2:	d859      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x194>
 80067c4:	2b30      	cmp	r3, #48	@ 0x30
 80067c6:	d05a      	beq.n	800687e <TIM_SlaveTimer_SetConfig+0x19a>
 80067c8:	2b30      	cmp	r3, #48	@ 0x30
 80067ca:	d855      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x194>
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d056      	beq.n	800687e <TIM_SlaveTimer_SetConfig+0x19a>
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	d851      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x194>
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d052      	beq.n	800687e <TIM_SlaveTimer_SetConfig+0x19a>
 80067d8:	2b10      	cmp	r3, #16
 80067da:	d050      	beq.n	800687e <TIM_SlaveTimer_SetConfig+0x19a>
 80067dc:	e04c      	b.n	8006878 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80067ee:	f000 f9ff 	bl	8006bf0 <TIM_ETR_SetConfig>
      break;
 80067f2:	e045      	b.n	8006880 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b05      	cmp	r3, #5
 80067fa:	d004      	beq.n	8006806 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006800:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8006804:	d101      	bne.n	800680a <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e03b      	b.n	8006882 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6a1a      	ldr	r2, [r3, #32]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0201 	bic.w	r2, r2, #1
 8006820:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006830:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	4313      	orrs	r3, r2
 800683c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	621a      	str	r2, [r3, #32]
      break;
 800684e:	e017      	b.n	8006880 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800685c:	461a      	mov	r2, r3
 800685e:	f000 f895 	bl	800698c <TIM_TI1_ConfigInputStage>
      break;
 8006862:	e00d      	b.n	8006880 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006870:	461a      	mov	r2, r3
 8006872:	f000 f8f7 	bl	8006a64 <TIM_TI2_ConfigInputStage>
      break;
 8006876:	e003      	b.n	8006880 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	75fb      	strb	r3, [r7, #23]
      break;
 800687c:	e000      	b.n	8006880 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800687e:	bf00      	nop
  }

  return status;
 8006880:	7dfb      	ldrb	r3, [r7, #23]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	00100070 	.word	0x00100070
 8006890:	00100060 	.word	0x00100060
 8006894:	00100050 	.word	0x00100050
 8006898:	00100040 	.word	0x00100040
 800689c:	00100030 	.word	0x00100030
 80068a0:	00100020 	.word	0x00100020

080068a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	f023 0201 	bic.w	r2, r3, #1
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4a28      	ldr	r2, [pc, #160]	@ (8006970 <TIM_TI1_SetConfig+0xcc>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d01b      	beq.n	800690a <TIM_TI1_SetConfig+0x66>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d8:	d017      	beq.n	800690a <TIM_TI1_SetConfig+0x66>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4a25      	ldr	r2, [pc, #148]	@ (8006974 <TIM_TI1_SetConfig+0xd0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d013      	beq.n	800690a <TIM_TI1_SetConfig+0x66>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4a24      	ldr	r2, [pc, #144]	@ (8006978 <TIM_TI1_SetConfig+0xd4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00f      	beq.n	800690a <TIM_TI1_SetConfig+0x66>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4a23      	ldr	r2, [pc, #140]	@ (800697c <TIM_TI1_SetConfig+0xd8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00b      	beq.n	800690a <TIM_TI1_SetConfig+0x66>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4a22      	ldr	r2, [pc, #136]	@ (8006980 <TIM_TI1_SetConfig+0xdc>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d007      	beq.n	800690a <TIM_TI1_SetConfig+0x66>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4a21      	ldr	r2, [pc, #132]	@ (8006984 <TIM_TI1_SetConfig+0xe0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d003      	beq.n	800690a <TIM_TI1_SetConfig+0x66>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4a20      	ldr	r2, [pc, #128]	@ (8006988 <TIM_TI1_SetConfig+0xe4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d101      	bne.n	800690e <TIM_TI1_SetConfig+0x6a>
 800690a:	2301      	movs	r3, #1
 800690c:	e000      	b.n	8006910 <TIM_TI1_SetConfig+0x6c>
 800690e:	2300      	movs	r3, #0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d008      	beq.n	8006926 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f023 0303 	bic.w	r3, r3, #3
 800691a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4313      	orrs	r3, r2
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	e003      	b.n	800692e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f043 0301 	orr.w	r3, r3, #1
 800692c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006934:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	b2db      	uxtb	r3, r3
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f023 030a 	bic.w	r3, r3, #10
 8006948:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f003 030a 	and.w	r3, r3, #10
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4313      	orrs	r3, r2
 8006954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	40012c00 	.word	0x40012c00
 8006974:	40000400 	.word	0x40000400
 8006978:	40000800 	.word	0x40000800
 800697c:	40000c00 	.word	0x40000c00
 8006980:	40013400 	.word	0x40013400
 8006984:	40014000 	.word	0x40014000
 8006988:	40015000 	.word	0x40015000

0800698c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	f023 0201 	bic.w	r2, r3, #1
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f023 030a 	bic.w	r3, r3, #10
 80069c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	bf00      	nop
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b087      	sub	sp, #28
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	607a      	str	r2, [r7, #4]
 80069f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f023 0210 	bic.w	r2, r3, #16
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	021b      	lsls	r3, r3, #8
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	031b      	lsls	r3, r3, #12
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	011b      	lsls	r3, r3, #4
 8006a42:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	621a      	str	r2, [r3, #32]
}
 8006a58:	bf00      	nop
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f023 0210 	bic.w	r2, r3, #16
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	031b      	lsls	r3, r3, #12
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	011b      	lsls	r3, r3, #4
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	621a      	str	r2, [r3, #32]
}
 8006ab8:	bf00      	nop
 8006aba:	371c      	adds	r7, #28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f023 0303 	bic.w	r3, r3, #3
 8006af0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b00:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	011b      	lsls	r3, r3, #4
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006b14:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	021b      	lsls	r3, r3, #8
 8006b1a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	621a      	str	r2, [r3, #32]
}
 8006b30:	bf00      	nop
 8006b32:	371c      	adds	r7, #28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b68:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b7a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	031b      	lsls	r3, r3, #12
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006b8e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	031b      	lsls	r3, r3, #12
 8006b94:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	621a      	str	r2, [r3, #32]
}
 8006baa:	bf00      	nop
 8006bac:	371c      	adds	r7, #28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006bcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	f043 0307 	orr.w	r3, r3, #7
 8006bdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	609a      	str	r2, [r3, #8]
}
 8006be4:	bf00      	nop
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	021a      	lsls	r2, r3, #8
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	431a      	orrs	r2, r3
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	609a      	str	r2, [r3, #8]
}
 8006c24:	bf00      	nop
 8006c26:	371c      	adds	r7, #28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f003 031f 	and.w	r3, r3, #31
 8006c42:	2201      	movs	r2, #1
 8006c44:	fa02 f303 	lsl.w	r3, r2, r3
 8006c48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a1a      	ldr	r2, [r3, #32]
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	43db      	mvns	r3, r3
 8006c52:	401a      	ands	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a1a      	ldr	r2, [r3, #32]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f003 031f 	and.w	r3, r3, #31
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	fa01 f303 	lsl.w	r3, r1, r3
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	621a      	str	r2, [r3, #32]
}
 8006c6e:	bf00      	nop
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
	...

08006c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e074      	b.n	8006d7e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a34      	ldr	r2, [pc, #208]	@ (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d009      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a33      	ldr	r2, [pc, #204]	@ (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d004      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a31      	ldr	r2, [pc, #196]	@ (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d108      	bne.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006cd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a21      	ldr	r2, [pc, #132]	@ (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d022      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d14:	d01d      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d018      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a1d      	ldr	r2, [pc, #116]	@ (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d013      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00e      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a15      	ldr	r2, [pc, #84]	@ (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d009      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a18      	ldr	r2, [pc, #96]	@ (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d004      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a11      	ldr	r2, [pc, #68]	@ (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d10c      	bne.n	8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40012c00 	.word	0x40012c00
 8006d90:	40013400 	.word	0x40013400
 8006d94:	40015000 	.word	0x40015000
 8006d98:	40000400 	.word	0x40000400
 8006d9c:	40000800 	.word	0x40000800
 8006da0:	40000c00 	.word	0x40000c00
 8006da4:	40014000 	.word	0x40014000

08006da8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d101      	bne.n	8006dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e078      	b.n	8006eb6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	041b      	lsls	r3, r3, #16
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a1c      	ldr	r2, [pc, #112]	@ (8006ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d009      	beq.n	8006e6a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d004      	beq.n	8006e6a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a19      	ldr	r2, [pc, #100]	@ (8006ecc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d11c      	bne.n	8006ea4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e74:	051b      	lsls	r3, r3, #20
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40013400 	.word	0x40013400
 8006ecc:	40015000 	.word	0x40015000

08006ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	ed93 7a06 	vldr	s14, [r3, #24]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	edd3 7a07 	vldr	s15, [r3, #28]
 8006f72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	edd3 7a08 	vldr	s15, [r3, #32]
 8006f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	edd3 7a06 	vldr	s15, [r3, #24]
 8006f8c:	eeb1 7a67 	vneg.f32	s14, s15
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	edd3 7a08 	vldr	s15, [r3, #32]
 8006f96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a1a      	ldr	r2, [r3, #32]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d006      	beq.n	8006fc0 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	220c      	movs	r2, #12
 8006fb8:	2100      	movs	r1, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 f804 	bl	8006fc8 <memset>
  }

}
 8006fc0:	bf00      	nop
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <memset>:
 8006fc8:	4402      	add	r2, r0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d100      	bne.n	8006fd2 <memset+0xa>
 8006fd0:	4770      	bx	lr
 8006fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fd6:	e7f9      	b.n	8006fcc <memset+0x4>

08006fd8 <__libc_init_array>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	4d0d      	ldr	r5, [pc, #52]	@ (8007010 <__libc_init_array+0x38>)
 8006fdc:	4c0d      	ldr	r4, [pc, #52]	@ (8007014 <__libc_init_array+0x3c>)
 8006fde:	1b64      	subs	r4, r4, r5
 8006fe0:	10a4      	asrs	r4, r4, #2
 8006fe2:	2600      	movs	r6, #0
 8006fe4:	42a6      	cmp	r6, r4
 8006fe6:	d109      	bne.n	8006ffc <__libc_init_array+0x24>
 8006fe8:	4d0b      	ldr	r5, [pc, #44]	@ (8007018 <__libc_init_array+0x40>)
 8006fea:	4c0c      	ldr	r4, [pc, #48]	@ (800701c <__libc_init_array+0x44>)
 8006fec:	f000 fd96 	bl	8007b1c <_init>
 8006ff0:	1b64      	subs	r4, r4, r5
 8006ff2:	10a4      	asrs	r4, r4, #2
 8006ff4:	2600      	movs	r6, #0
 8006ff6:	42a6      	cmp	r6, r4
 8006ff8:	d105      	bne.n	8007006 <__libc_init_array+0x2e>
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}
 8006ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007000:	4798      	blx	r3
 8007002:	3601      	adds	r6, #1
 8007004:	e7ee      	b.n	8006fe4 <__libc_init_array+0xc>
 8007006:	f855 3b04 	ldr.w	r3, [r5], #4
 800700a:	4798      	blx	r3
 800700c:	3601      	adds	r6, #1
 800700e:	e7f2      	b.n	8006ff6 <__libc_init_array+0x1e>
 8007010:	08007f14 	.word	0x08007f14
 8007014:	08007f14 	.word	0x08007f14
 8007018:	08007f14 	.word	0x08007f14
 800701c:	08007f18 	.word	0x08007f18

08007020 <cosf>:
 8007020:	ee10 3a10 	vmov	r3, s0
 8007024:	b507      	push	{r0, r1, r2, lr}
 8007026:	4a1e      	ldr	r2, [pc, #120]	@ (80070a0 <cosf+0x80>)
 8007028:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800702c:	4293      	cmp	r3, r2
 800702e:	d806      	bhi.n	800703e <cosf+0x1e>
 8007030:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80070a4 <cosf+0x84>
 8007034:	b003      	add	sp, #12
 8007036:	f85d eb04 	ldr.w	lr, [sp], #4
 800703a:	f000 b87b 	b.w	8007134 <__kernel_cosf>
 800703e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007042:	d304      	bcc.n	800704e <cosf+0x2e>
 8007044:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007048:	b003      	add	sp, #12
 800704a:	f85d fb04 	ldr.w	pc, [sp], #4
 800704e:	4668      	mov	r0, sp
 8007050:	f000 f910 	bl	8007274 <__ieee754_rem_pio2f>
 8007054:	f000 0003 	and.w	r0, r0, #3
 8007058:	2801      	cmp	r0, #1
 800705a:	d009      	beq.n	8007070 <cosf+0x50>
 800705c:	2802      	cmp	r0, #2
 800705e:	d010      	beq.n	8007082 <cosf+0x62>
 8007060:	b9b0      	cbnz	r0, 8007090 <cosf+0x70>
 8007062:	eddd 0a01 	vldr	s1, [sp, #4]
 8007066:	ed9d 0a00 	vldr	s0, [sp]
 800706a:	f000 f863 	bl	8007134 <__kernel_cosf>
 800706e:	e7eb      	b.n	8007048 <cosf+0x28>
 8007070:	eddd 0a01 	vldr	s1, [sp, #4]
 8007074:	ed9d 0a00 	vldr	s0, [sp]
 8007078:	f000 f8b4 	bl	80071e4 <__kernel_sinf>
 800707c:	eeb1 0a40 	vneg.f32	s0, s0
 8007080:	e7e2      	b.n	8007048 <cosf+0x28>
 8007082:	eddd 0a01 	vldr	s1, [sp, #4]
 8007086:	ed9d 0a00 	vldr	s0, [sp]
 800708a:	f000 f853 	bl	8007134 <__kernel_cosf>
 800708e:	e7f5      	b.n	800707c <cosf+0x5c>
 8007090:	eddd 0a01 	vldr	s1, [sp, #4]
 8007094:	ed9d 0a00 	vldr	s0, [sp]
 8007098:	2001      	movs	r0, #1
 800709a:	f000 f8a3 	bl	80071e4 <__kernel_sinf>
 800709e:	e7d3      	b.n	8007048 <cosf+0x28>
 80070a0:	3f490fd8 	.word	0x3f490fd8
 80070a4:	00000000 	.word	0x00000000

080070a8 <sinf>:
 80070a8:	ee10 3a10 	vmov	r3, s0
 80070ac:	b507      	push	{r0, r1, r2, lr}
 80070ae:	4a1f      	ldr	r2, [pc, #124]	@ (800712c <sinf+0x84>)
 80070b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d807      	bhi.n	80070c8 <sinf+0x20>
 80070b8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8007130 <sinf+0x88>
 80070bc:	2000      	movs	r0, #0
 80070be:	b003      	add	sp, #12
 80070c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070c4:	f000 b88e 	b.w	80071e4 <__kernel_sinf>
 80070c8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80070cc:	d304      	bcc.n	80070d8 <sinf+0x30>
 80070ce:	ee30 0a40 	vsub.f32	s0, s0, s0
 80070d2:	b003      	add	sp, #12
 80070d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80070d8:	4668      	mov	r0, sp
 80070da:	f000 f8cb 	bl	8007274 <__ieee754_rem_pio2f>
 80070de:	f000 0003 	and.w	r0, r0, #3
 80070e2:	2801      	cmp	r0, #1
 80070e4:	d00a      	beq.n	80070fc <sinf+0x54>
 80070e6:	2802      	cmp	r0, #2
 80070e8:	d00f      	beq.n	800710a <sinf+0x62>
 80070ea:	b9c0      	cbnz	r0, 800711e <sinf+0x76>
 80070ec:	eddd 0a01 	vldr	s1, [sp, #4]
 80070f0:	ed9d 0a00 	vldr	s0, [sp]
 80070f4:	2001      	movs	r0, #1
 80070f6:	f000 f875 	bl	80071e4 <__kernel_sinf>
 80070fa:	e7ea      	b.n	80070d2 <sinf+0x2a>
 80070fc:	eddd 0a01 	vldr	s1, [sp, #4]
 8007100:	ed9d 0a00 	vldr	s0, [sp]
 8007104:	f000 f816 	bl	8007134 <__kernel_cosf>
 8007108:	e7e3      	b.n	80070d2 <sinf+0x2a>
 800710a:	eddd 0a01 	vldr	s1, [sp, #4]
 800710e:	ed9d 0a00 	vldr	s0, [sp]
 8007112:	2001      	movs	r0, #1
 8007114:	f000 f866 	bl	80071e4 <__kernel_sinf>
 8007118:	eeb1 0a40 	vneg.f32	s0, s0
 800711c:	e7d9      	b.n	80070d2 <sinf+0x2a>
 800711e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007122:	ed9d 0a00 	vldr	s0, [sp]
 8007126:	f000 f805 	bl	8007134 <__kernel_cosf>
 800712a:	e7f5      	b.n	8007118 <sinf+0x70>
 800712c:	3f490fd8 	.word	0x3f490fd8
 8007130:	00000000 	.word	0x00000000

08007134 <__kernel_cosf>:
 8007134:	ee10 3a10 	vmov	r3, s0
 8007138:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800713c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007140:	eef0 6a40 	vmov.f32	s13, s0
 8007144:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007148:	d204      	bcs.n	8007154 <__kernel_cosf+0x20>
 800714a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800714e:	ee17 2a90 	vmov	r2, s15
 8007152:	b342      	cbz	r2, 80071a6 <__kernel_cosf+0x72>
 8007154:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007158:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80071c4 <__kernel_cosf+0x90>
 800715c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80071c8 <__kernel_cosf+0x94>
 8007160:	4a1a      	ldr	r2, [pc, #104]	@ (80071cc <__kernel_cosf+0x98>)
 8007162:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007166:	4293      	cmp	r3, r2
 8007168:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80071d0 <__kernel_cosf+0x9c>
 800716c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007170:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80071d4 <__kernel_cosf+0xa0>
 8007174:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007178:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80071d8 <__kernel_cosf+0xa4>
 800717c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007180:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80071dc <__kernel_cosf+0xa8>
 8007184:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007188:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800718c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8007190:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007194:	eee7 0a06 	vfma.f32	s1, s14, s12
 8007198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800719c:	d804      	bhi.n	80071a8 <__kernel_cosf+0x74>
 800719e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80071a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80071a6:	4770      	bx	lr
 80071a8:	4a0d      	ldr	r2, [pc, #52]	@ (80071e0 <__kernel_cosf+0xac>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	bf9a      	itte	ls
 80071ae:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80071b2:	ee07 3a10 	vmovls	s14, r3
 80071b6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80071ba:	ee30 0a47 	vsub.f32	s0, s0, s14
 80071be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071c2:	e7ec      	b.n	800719e <__kernel_cosf+0x6a>
 80071c4:	ad47d74e 	.word	0xad47d74e
 80071c8:	310f74f6 	.word	0x310f74f6
 80071cc:	3e999999 	.word	0x3e999999
 80071d0:	b493f27c 	.word	0xb493f27c
 80071d4:	37d00d01 	.word	0x37d00d01
 80071d8:	bab60b61 	.word	0xbab60b61
 80071dc:	3d2aaaab 	.word	0x3d2aaaab
 80071e0:	3f480000 	.word	0x3f480000

080071e4 <__kernel_sinf>:
 80071e4:	ee10 3a10 	vmov	r3, s0
 80071e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071ec:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80071f0:	d204      	bcs.n	80071fc <__kernel_sinf+0x18>
 80071f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80071f6:	ee17 3a90 	vmov	r3, s15
 80071fa:	b35b      	cbz	r3, 8007254 <__kernel_sinf+0x70>
 80071fc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007200:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8007258 <__kernel_sinf+0x74>
 8007204:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800725c <__kernel_sinf+0x78>
 8007208:	eea7 6a27 	vfma.f32	s12, s14, s15
 800720c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8007260 <__kernel_sinf+0x7c>
 8007210:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007214:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8007264 <__kernel_sinf+0x80>
 8007218:	eea7 6a87 	vfma.f32	s12, s15, s14
 800721c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8007268 <__kernel_sinf+0x84>
 8007220:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007224:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007228:	b930      	cbnz	r0, 8007238 <__kernel_sinf+0x54>
 800722a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800726c <__kernel_sinf+0x88>
 800722e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007232:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007236:	4770      	bx	lr
 8007238:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800723c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8007240:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007244:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007248:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8007270 <__kernel_sinf+0x8c>
 800724c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007250:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	2f2ec9d3 	.word	0x2f2ec9d3
 800725c:	b2d72f34 	.word	0xb2d72f34
 8007260:	3638ef1b 	.word	0x3638ef1b
 8007264:	b9500d01 	.word	0xb9500d01
 8007268:	3c088889 	.word	0x3c088889
 800726c:	be2aaaab 	.word	0xbe2aaaab
 8007270:	3e2aaaab 	.word	0x3e2aaaab

08007274 <__ieee754_rem_pio2f>:
 8007274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007276:	ee10 6a10 	vmov	r6, s0
 800727a:	4b88      	ldr	r3, [pc, #544]	@ (800749c <__ieee754_rem_pio2f+0x228>)
 800727c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8007280:	429d      	cmp	r5, r3
 8007282:	b087      	sub	sp, #28
 8007284:	4604      	mov	r4, r0
 8007286:	d805      	bhi.n	8007294 <__ieee754_rem_pio2f+0x20>
 8007288:	2300      	movs	r3, #0
 800728a:	ed80 0a00 	vstr	s0, [r0]
 800728e:	6043      	str	r3, [r0, #4]
 8007290:	2000      	movs	r0, #0
 8007292:	e022      	b.n	80072da <__ieee754_rem_pio2f+0x66>
 8007294:	4b82      	ldr	r3, [pc, #520]	@ (80074a0 <__ieee754_rem_pio2f+0x22c>)
 8007296:	429d      	cmp	r5, r3
 8007298:	d83a      	bhi.n	8007310 <__ieee754_rem_pio2f+0x9c>
 800729a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800729e:	2e00      	cmp	r6, #0
 80072a0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80074a4 <__ieee754_rem_pio2f+0x230>
 80072a4:	4a80      	ldr	r2, [pc, #512]	@ (80074a8 <__ieee754_rem_pio2f+0x234>)
 80072a6:	f023 030f 	bic.w	r3, r3, #15
 80072aa:	dd18      	ble.n	80072de <__ieee754_rem_pio2f+0x6a>
 80072ac:	4293      	cmp	r3, r2
 80072ae:	ee70 7a47 	vsub.f32	s15, s0, s14
 80072b2:	bf09      	itett	eq
 80072b4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80074ac <__ieee754_rem_pio2f+0x238>
 80072b8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80074b0 <__ieee754_rem_pio2f+0x23c>
 80072bc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80074b4 <__ieee754_rem_pio2f+0x240>
 80072c0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80072c4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80072c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80072cc:	ed80 7a00 	vstr	s14, [r0]
 80072d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072d4:	edc0 7a01 	vstr	s15, [r0, #4]
 80072d8:	2001      	movs	r0, #1
 80072da:	b007      	add	sp, #28
 80072dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072de:	4293      	cmp	r3, r2
 80072e0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80072e4:	bf09      	itett	eq
 80072e6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80074ac <__ieee754_rem_pio2f+0x238>
 80072ea:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80074b0 <__ieee754_rem_pio2f+0x23c>
 80072ee:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80074b4 <__ieee754_rem_pio2f+0x240>
 80072f2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80072f6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80072fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80072fe:	ed80 7a00 	vstr	s14, [r0]
 8007302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007306:	edc0 7a01 	vstr	s15, [r0, #4]
 800730a:	f04f 30ff 	mov.w	r0, #4294967295
 800730e:	e7e4      	b.n	80072da <__ieee754_rem_pio2f+0x66>
 8007310:	4b69      	ldr	r3, [pc, #420]	@ (80074b8 <__ieee754_rem_pio2f+0x244>)
 8007312:	429d      	cmp	r5, r3
 8007314:	d873      	bhi.n	80073fe <__ieee754_rem_pio2f+0x18a>
 8007316:	f000 f8dd 	bl	80074d4 <fabsf>
 800731a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80074bc <__ieee754_rem_pio2f+0x248>
 800731e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007322:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007326:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800732a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800732e:	ee17 0a90 	vmov	r0, s15
 8007332:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80074a4 <__ieee754_rem_pio2f+0x230>
 8007336:	eea7 0a67 	vfms.f32	s0, s14, s15
 800733a:	281f      	cmp	r0, #31
 800733c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80074b0 <__ieee754_rem_pio2f+0x23c>
 8007340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007344:	eeb1 6a47 	vneg.f32	s12, s14
 8007348:	ee70 6a67 	vsub.f32	s13, s0, s15
 800734c:	ee16 1a90 	vmov	r1, s13
 8007350:	dc09      	bgt.n	8007366 <__ieee754_rem_pio2f+0xf2>
 8007352:	4a5b      	ldr	r2, [pc, #364]	@ (80074c0 <__ieee754_rem_pio2f+0x24c>)
 8007354:	1e47      	subs	r7, r0, #1
 8007356:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800735a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800735e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007362:	4293      	cmp	r3, r2
 8007364:	d107      	bne.n	8007376 <__ieee754_rem_pio2f+0x102>
 8007366:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800736a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800736e:	2a08      	cmp	r2, #8
 8007370:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8007374:	dc14      	bgt.n	80073a0 <__ieee754_rem_pio2f+0x12c>
 8007376:	6021      	str	r1, [r4, #0]
 8007378:	ed94 7a00 	vldr	s14, [r4]
 800737c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007380:	2e00      	cmp	r6, #0
 8007382:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007386:	ed84 0a01 	vstr	s0, [r4, #4]
 800738a:	daa6      	bge.n	80072da <__ieee754_rem_pio2f+0x66>
 800738c:	eeb1 7a47 	vneg.f32	s14, s14
 8007390:	eeb1 0a40 	vneg.f32	s0, s0
 8007394:	ed84 7a00 	vstr	s14, [r4]
 8007398:	ed84 0a01 	vstr	s0, [r4, #4]
 800739c:	4240      	negs	r0, r0
 800739e:	e79c      	b.n	80072da <__ieee754_rem_pio2f+0x66>
 80073a0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80074ac <__ieee754_rem_pio2f+0x238>
 80073a4:	eef0 6a40 	vmov.f32	s13, s0
 80073a8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80073ac:	ee70 7a66 	vsub.f32	s15, s0, s13
 80073b0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80073b4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80074b4 <__ieee754_rem_pio2f+0x240>
 80073b8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80073bc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80073c0:	ee15 2a90 	vmov	r2, s11
 80073c4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80073c8:	1a5b      	subs	r3, r3, r1
 80073ca:	2b19      	cmp	r3, #25
 80073cc:	dc04      	bgt.n	80073d8 <__ieee754_rem_pio2f+0x164>
 80073ce:	edc4 5a00 	vstr	s11, [r4]
 80073d2:	eeb0 0a66 	vmov.f32	s0, s13
 80073d6:	e7cf      	b.n	8007378 <__ieee754_rem_pio2f+0x104>
 80073d8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80074c4 <__ieee754_rem_pio2f+0x250>
 80073dc:	eeb0 0a66 	vmov.f32	s0, s13
 80073e0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80073e4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80073e8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80074c8 <__ieee754_rem_pio2f+0x254>
 80073ec:	eee6 7a25 	vfma.f32	s15, s12, s11
 80073f0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80073f4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80073f8:	ed84 7a00 	vstr	s14, [r4]
 80073fc:	e7bc      	b.n	8007378 <__ieee754_rem_pio2f+0x104>
 80073fe:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8007402:	d306      	bcc.n	8007412 <__ieee754_rem_pio2f+0x19e>
 8007404:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007408:	edc0 7a01 	vstr	s15, [r0, #4]
 800740c:	edc0 7a00 	vstr	s15, [r0]
 8007410:	e73e      	b.n	8007290 <__ieee754_rem_pio2f+0x1c>
 8007412:	15ea      	asrs	r2, r5, #23
 8007414:	3a86      	subs	r2, #134	@ 0x86
 8007416:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007422:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80074cc <__ieee754_rem_pio2f+0x258>
 8007426:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800742a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800742e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007432:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007436:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800743a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800743e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007442:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007446:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800744a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800744e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007452:	edcd 7a05 	vstr	s15, [sp, #20]
 8007456:	d11e      	bne.n	8007496 <__ieee754_rem_pio2f+0x222>
 8007458:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800745c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007460:	bf0c      	ite	eq
 8007462:	2301      	moveq	r3, #1
 8007464:	2302      	movne	r3, #2
 8007466:	491a      	ldr	r1, [pc, #104]	@ (80074d0 <__ieee754_rem_pio2f+0x25c>)
 8007468:	9101      	str	r1, [sp, #4]
 800746a:	2102      	movs	r1, #2
 800746c:	9100      	str	r1, [sp, #0]
 800746e:	a803      	add	r0, sp, #12
 8007470:	4621      	mov	r1, r4
 8007472:	f000 f89d 	bl	80075b0 <__kernel_rem_pio2f>
 8007476:	2e00      	cmp	r6, #0
 8007478:	f6bf af2f 	bge.w	80072da <__ieee754_rem_pio2f+0x66>
 800747c:	edd4 7a00 	vldr	s15, [r4]
 8007480:	eef1 7a67 	vneg.f32	s15, s15
 8007484:	edc4 7a00 	vstr	s15, [r4]
 8007488:	edd4 7a01 	vldr	s15, [r4, #4]
 800748c:	eef1 7a67 	vneg.f32	s15, s15
 8007490:	edc4 7a01 	vstr	s15, [r4, #4]
 8007494:	e782      	b.n	800739c <__ieee754_rem_pio2f+0x128>
 8007496:	2303      	movs	r3, #3
 8007498:	e7e5      	b.n	8007466 <__ieee754_rem_pio2f+0x1f2>
 800749a:	bf00      	nop
 800749c:	3f490fd8 	.word	0x3f490fd8
 80074a0:	4016cbe3 	.word	0x4016cbe3
 80074a4:	3fc90f80 	.word	0x3fc90f80
 80074a8:	3fc90fd0 	.word	0x3fc90fd0
 80074ac:	37354400 	.word	0x37354400
 80074b0:	37354443 	.word	0x37354443
 80074b4:	2e85a308 	.word	0x2e85a308
 80074b8:	43490f80 	.word	0x43490f80
 80074bc:	3f22f984 	.word	0x3f22f984
 80074c0:	08007b44 	.word	0x08007b44
 80074c4:	2e85a300 	.word	0x2e85a300
 80074c8:	248d3132 	.word	0x248d3132
 80074cc:	43800000 	.word	0x43800000
 80074d0:	08007bc4 	.word	0x08007bc4

080074d4 <fabsf>:
 80074d4:	ee10 3a10 	vmov	r3, s0
 80074d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074dc:	ee00 3a10 	vmov	s0, r3
 80074e0:	4770      	bx	lr
	...

080074e4 <scalbnf>:
 80074e4:	ee10 3a10 	vmov	r3, s0
 80074e8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80074ec:	d02b      	beq.n	8007546 <scalbnf+0x62>
 80074ee:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80074f2:	d302      	bcc.n	80074fa <scalbnf+0x16>
 80074f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80074f8:	4770      	bx	lr
 80074fa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80074fe:	d123      	bne.n	8007548 <scalbnf+0x64>
 8007500:	4b24      	ldr	r3, [pc, #144]	@ (8007594 <scalbnf+0xb0>)
 8007502:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8007598 <scalbnf+0xb4>
 8007506:	4298      	cmp	r0, r3
 8007508:	ee20 0a27 	vmul.f32	s0, s0, s15
 800750c:	db17      	blt.n	800753e <scalbnf+0x5a>
 800750e:	ee10 3a10 	vmov	r3, s0
 8007512:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007516:	3a19      	subs	r2, #25
 8007518:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800751c:	4288      	cmp	r0, r1
 800751e:	dd15      	ble.n	800754c <scalbnf+0x68>
 8007520:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800759c <scalbnf+0xb8>
 8007524:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80075a0 <scalbnf+0xbc>
 8007528:	ee10 3a10 	vmov	r3, s0
 800752c:	eeb0 7a67 	vmov.f32	s14, s15
 8007530:	2b00      	cmp	r3, #0
 8007532:	bfb8      	it	lt
 8007534:	eef0 7a66 	vmovlt.f32	s15, s13
 8007538:	ee27 0a87 	vmul.f32	s0, s15, s14
 800753c:	4770      	bx	lr
 800753e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80075a4 <scalbnf+0xc0>
 8007542:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007546:	4770      	bx	lr
 8007548:	0dd2      	lsrs	r2, r2, #23
 800754a:	e7e5      	b.n	8007518 <scalbnf+0x34>
 800754c:	4410      	add	r0, r2
 800754e:	28fe      	cmp	r0, #254	@ 0xfe
 8007550:	dce6      	bgt.n	8007520 <scalbnf+0x3c>
 8007552:	2800      	cmp	r0, #0
 8007554:	dd06      	ble.n	8007564 <scalbnf+0x80>
 8007556:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800755a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800755e:	ee00 3a10 	vmov	s0, r3
 8007562:	4770      	bx	lr
 8007564:	f110 0f16 	cmn.w	r0, #22
 8007568:	da09      	bge.n	800757e <scalbnf+0x9a>
 800756a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80075a4 <scalbnf+0xc0>
 800756e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80075a8 <scalbnf+0xc4>
 8007572:	ee10 3a10 	vmov	r3, s0
 8007576:	eeb0 7a67 	vmov.f32	s14, s15
 800757a:	2b00      	cmp	r3, #0
 800757c:	e7d9      	b.n	8007532 <scalbnf+0x4e>
 800757e:	3019      	adds	r0, #25
 8007580:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007584:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007588:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80075ac <scalbnf+0xc8>
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	e7d7      	b.n	8007542 <scalbnf+0x5e>
 8007592:	bf00      	nop
 8007594:	ffff3cb0 	.word	0xffff3cb0
 8007598:	4c000000 	.word	0x4c000000
 800759c:	7149f2ca 	.word	0x7149f2ca
 80075a0:	f149f2ca 	.word	0xf149f2ca
 80075a4:	0da24260 	.word	0x0da24260
 80075a8:	8da24260 	.word	0x8da24260
 80075ac:	33000000 	.word	0x33000000

080075b0 <__kernel_rem_pio2f>:
 80075b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b4:	ed2d 8b04 	vpush	{d8-d9}
 80075b8:	b0d9      	sub	sp, #356	@ 0x164
 80075ba:	4690      	mov	r8, r2
 80075bc:	9001      	str	r0, [sp, #4]
 80075be:	4ab9      	ldr	r2, [pc, #740]	@ (80078a4 <__kernel_rem_pio2f+0x2f4>)
 80075c0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80075c2:	f118 0f04 	cmn.w	r8, #4
 80075c6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80075ca:	460f      	mov	r7, r1
 80075cc:	f103 3bff 	add.w	fp, r3, #4294967295
 80075d0:	db27      	blt.n	8007622 <__kernel_rem_pio2f+0x72>
 80075d2:	f1b8 0203 	subs.w	r2, r8, #3
 80075d6:	bf48      	it	mi
 80075d8:	f108 0204 	addmi.w	r2, r8, #4
 80075dc:	10d2      	asrs	r2, r2, #3
 80075de:	1c55      	adds	r5, r2, #1
 80075e0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80075e2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80078b4 <__kernel_rem_pio2f+0x304>
 80075e6:	00e8      	lsls	r0, r5, #3
 80075e8:	eba2 060b 	sub.w	r6, r2, fp
 80075ec:	9002      	str	r0, [sp, #8]
 80075ee:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80075f2:	eb0a 0c0b 	add.w	ip, sl, fp
 80075f6:	ac1c      	add	r4, sp, #112	@ 0x70
 80075f8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80075fc:	2000      	movs	r0, #0
 80075fe:	4560      	cmp	r0, ip
 8007600:	dd11      	ble.n	8007626 <__kernel_rem_pio2f+0x76>
 8007602:	a91c      	add	r1, sp, #112	@ 0x70
 8007604:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8007608:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800760c:	f04f 0c00 	mov.w	ip, #0
 8007610:	45d4      	cmp	ip, sl
 8007612:	dc27      	bgt.n	8007664 <__kernel_rem_pio2f+0xb4>
 8007614:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007618:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80078b4 <__kernel_rem_pio2f+0x304>
 800761c:	4606      	mov	r6, r0
 800761e:	2400      	movs	r4, #0
 8007620:	e016      	b.n	8007650 <__kernel_rem_pio2f+0xa0>
 8007622:	2200      	movs	r2, #0
 8007624:	e7db      	b.n	80075de <__kernel_rem_pio2f+0x2e>
 8007626:	42c6      	cmn	r6, r0
 8007628:	bf5d      	ittte	pl
 800762a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800762e:	ee07 1a90 	vmovpl	s15, r1
 8007632:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007636:	eef0 7a47 	vmovmi.f32	s15, s14
 800763a:	ece4 7a01 	vstmia	r4!, {s15}
 800763e:	3001      	adds	r0, #1
 8007640:	e7dd      	b.n	80075fe <__kernel_rem_pio2f+0x4e>
 8007642:	ecfe 6a01 	vldmia	lr!, {s13}
 8007646:	ed96 7a00 	vldr	s14, [r6]
 800764a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800764e:	3401      	adds	r4, #1
 8007650:	455c      	cmp	r4, fp
 8007652:	f1a6 0604 	sub.w	r6, r6, #4
 8007656:	ddf4      	ble.n	8007642 <__kernel_rem_pio2f+0x92>
 8007658:	ece9 7a01 	vstmia	r9!, {s15}
 800765c:	f10c 0c01 	add.w	ip, ip, #1
 8007660:	3004      	adds	r0, #4
 8007662:	e7d5      	b.n	8007610 <__kernel_rem_pio2f+0x60>
 8007664:	a908      	add	r1, sp, #32
 8007666:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800766a:	9104      	str	r1, [sp, #16]
 800766c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800766e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80078b0 <__kernel_rem_pio2f+0x300>
 8007672:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80078ac <__kernel_rem_pio2f+0x2fc>
 8007676:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800767a:	9203      	str	r2, [sp, #12]
 800767c:	4654      	mov	r4, sl
 800767e:	00a2      	lsls	r2, r4, #2
 8007680:	9205      	str	r2, [sp, #20]
 8007682:	aa58      	add	r2, sp, #352	@ 0x160
 8007684:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007688:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800768c:	a944      	add	r1, sp, #272	@ 0x110
 800768e:	aa08      	add	r2, sp, #32
 8007690:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8007694:	4694      	mov	ip, r2
 8007696:	4626      	mov	r6, r4
 8007698:	2e00      	cmp	r6, #0
 800769a:	f1a0 0004 	sub.w	r0, r0, #4
 800769e:	dc4c      	bgt.n	800773a <__kernel_rem_pio2f+0x18a>
 80076a0:	4628      	mov	r0, r5
 80076a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076a6:	f7ff ff1d 	bl	80074e4 <scalbnf>
 80076aa:	eeb0 8a40 	vmov.f32	s16, s0
 80076ae:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80076b2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80076b6:	f000 f9ed 	bl	8007a94 <floorf>
 80076ba:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80076be:	eea0 8a67 	vfms.f32	s16, s0, s15
 80076c2:	2d00      	cmp	r5, #0
 80076c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076c8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80076cc:	ee17 9a90 	vmov	r9, s15
 80076d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076d4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80076d8:	dd41      	ble.n	800775e <__kernel_rem_pio2f+0x1ae>
 80076da:	f104 3cff 	add.w	ip, r4, #4294967295
 80076de:	a908      	add	r1, sp, #32
 80076e0:	f1c5 0e08 	rsb	lr, r5, #8
 80076e4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80076e8:	fa46 f00e 	asr.w	r0, r6, lr
 80076ec:	4481      	add	r9, r0
 80076ee:	fa00 f00e 	lsl.w	r0, r0, lr
 80076f2:	1a36      	subs	r6, r6, r0
 80076f4:	f1c5 0007 	rsb	r0, r5, #7
 80076f8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80076fc:	4106      	asrs	r6, r0
 80076fe:	2e00      	cmp	r6, #0
 8007700:	dd3c      	ble.n	800777c <__kernel_rem_pio2f+0x1cc>
 8007702:	f04f 0e00 	mov.w	lr, #0
 8007706:	f109 0901 	add.w	r9, r9, #1
 800770a:	4670      	mov	r0, lr
 800770c:	4574      	cmp	r4, lr
 800770e:	dc68      	bgt.n	80077e2 <__kernel_rem_pio2f+0x232>
 8007710:	2d00      	cmp	r5, #0
 8007712:	dd03      	ble.n	800771c <__kernel_rem_pio2f+0x16c>
 8007714:	2d01      	cmp	r5, #1
 8007716:	d074      	beq.n	8007802 <__kernel_rem_pio2f+0x252>
 8007718:	2d02      	cmp	r5, #2
 800771a:	d07d      	beq.n	8007818 <__kernel_rem_pio2f+0x268>
 800771c:	2e02      	cmp	r6, #2
 800771e:	d12d      	bne.n	800777c <__kernel_rem_pio2f+0x1cc>
 8007720:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007724:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007728:	b340      	cbz	r0, 800777c <__kernel_rem_pio2f+0x1cc>
 800772a:	4628      	mov	r0, r5
 800772c:	9306      	str	r3, [sp, #24]
 800772e:	f7ff fed9 	bl	80074e4 <scalbnf>
 8007732:	9b06      	ldr	r3, [sp, #24]
 8007734:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007738:	e020      	b.n	800777c <__kernel_rem_pio2f+0x1cc>
 800773a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800773e:	3e01      	subs	r6, #1
 8007740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007748:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800774c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007750:	ecac 0a01 	vstmia	ip!, {s0}
 8007754:	ed90 0a00 	vldr	s0, [r0]
 8007758:	ee37 0a80 	vadd.f32	s0, s15, s0
 800775c:	e79c      	b.n	8007698 <__kernel_rem_pio2f+0xe8>
 800775e:	d105      	bne.n	800776c <__kernel_rem_pio2f+0x1bc>
 8007760:	1e60      	subs	r0, r4, #1
 8007762:	a908      	add	r1, sp, #32
 8007764:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8007768:	11f6      	asrs	r6, r6, #7
 800776a:	e7c8      	b.n	80076fe <__kernel_rem_pio2f+0x14e>
 800776c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007770:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007778:	da31      	bge.n	80077de <__kernel_rem_pio2f+0x22e>
 800777a:	2600      	movs	r6, #0
 800777c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007784:	f040 8098 	bne.w	80078b8 <__kernel_rem_pio2f+0x308>
 8007788:	1e60      	subs	r0, r4, #1
 800778a:	2200      	movs	r2, #0
 800778c:	4550      	cmp	r0, sl
 800778e:	da4b      	bge.n	8007828 <__kernel_rem_pio2f+0x278>
 8007790:	2a00      	cmp	r2, #0
 8007792:	d065      	beq.n	8007860 <__kernel_rem_pio2f+0x2b0>
 8007794:	3c01      	subs	r4, #1
 8007796:	ab08      	add	r3, sp, #32
 8007798:	3d08      	subs	r5, #8
 800779a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0f8      	beq.n	8007794 <__kernel_rem_pio2f+0x1e4>
 80077a2:	4628      	mov	r0, r5
 80077a4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80077a8:	f7ff fe9c 	bl	80074e4 <scalbnf>
 80077ac:	1c63      	adds	r3, r4, #1
 80077ae:	aa44      	add	r2, sp, #272	@ 0x110
 80077b0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80078b0 <__kernel_rem_pio2f+0x300>
 80077b4:	0099      	lsls	r1, r3, #2
 80077b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80077ba:	4623      	mov	r3, r4
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f280 80a9 	bge.w	8007914 <__kernel_rem_pio2f+0x364>
 80077c2:	4623      	mov	r3, r4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f2c0 80c7 	blt.w	8007958 <__kernel_rem_pio2f+0x3a8>
 80077ca:	aa44      	add	r2, sp, #272	@ 0x110
 80077cc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80077d0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80078a8 <__kernel_rem_pio2f+0x2f8>
 80077d4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80078b4 <__kernel_rem_pio2f+0x304>
 80077d8:	2000      	movs	r0, #0
 80077da:	1ae2      	subs	r2, r4, r3
 80077dc:	e0b1      	b.n	8007942 <__kernel_rem_pio2f+0x392>
 80077de:	2602      	movs	r6, #2
 80077e0:	e78f      	b.n	8007702 <__kernel_rem_pio2f+0x152>
 80077e2:	f852 1b04 	ldr.w	r1, [r2], #4
 80077e6:	b948      	cbnz	r0, 80077fc <__kernel_rem_pio2f+0x24c>
 80077e8:	b121      	cbz	r1, 80077f4 <__kernel_rem_pio2f+0x244>
 80077ea:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80077ee:	f842 1c04 	str.w	r1, [r2, #-4]
 80077f2:	2101      	movs	r1, #1
 80077f4:	f10e 0e01 	add.w	lr, lr, #1
 80077f8:	4608      	mov	r0, r1
 80077fa:	e787      	b.n	800770c <__kernel_rem_pio2f+0x15c>
 80077fc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8007800:	e7f5      	b.n	80077ee <__kernel_rem_pio2f+0x23e>
 8007802:	f104 3cff 	add.w	ip, r4, #4294967295
 8007806:	aa08      	add	r2, sp, #32
 8007808:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800780c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007810:	a908      	add	r1, sp, #32
 8007812:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8007816:	e781      	b.n	800771c <__kernel_rem_pio2f+0x16c>
 8007818:	f104 3cff 	add.w	ip, r4, #4294967295
 800781c:	aa08      	add	r2, sp, #32
 800781e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007822:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007826:	e7f3      	b.n	8007810 <__kernel_rem_pio2f+0x260>
 8007828:	a908      	add	r1, sp, #32
 800782a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800782e:	3801      	subs	r0, #1
 8007830:	430a      	orrs	r2, r1
 8007832:	e7ab      	b.n	800778c <__kernel_rem_pio2f+0x1dc>
 8007834:	3201      	adds	r2, #1
 8007836:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800783a:	2e00      	cmp	r6, #0
 800783c:	d0fa      	beq.n	8007834 <__kernel_rem_pio2f+0x284>
 800783e:	9905      	ldr	r1, [sp, #20]
 8007840:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8007844:	eb0d 0001 	add.w	r0, sp, r1
 8007848:	18e6      	adds	r6, r4, r3
 800784a:	a91c      	add	r1, sp, #112	@ 0x70
 800784c:	f104 0c01 	add.w	ip, r4, #1
 8007850:	384c      	subs	r0, #76	@ 0x4c
 8007852:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8007856:	4422      	add	r2, r4
 8007858:	4562      	cmp	r2, ip
 800785a:	da04      	bge.n	8007866 <__kernel_rem_pio2f+0x2b6>
 800785c:	4614      	mov	r4, r2
 800785e:	e70e      	b.n	800767e <__kernel_rem_pio2f+0xce>
 8007860:	9804      	ldr	r0, [sp, #16]
 8007862:	2201      	movs	r2, #1
 8007864:	e7e7      	b.n	8007836 <__kernel_rem_pio2f+0x286>
 8007866:	9903      	ldr	r1, [sp, #12]
 8007868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800786c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8007870:	9105      	str	r1, [sp, #20]
 8007872:	ee07 1a90 	vmov	s15, r1
 8007876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800787a:	2400      	movs	r4, #0
 800787c:	ece6 7a01 	vstmia	r6!, {s15}
 8007880:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80078b4 <__kernel_rem_pio2f+0x304>
 8007884:	46b1      	mov	r9, r6
 8007886:	455c      	cmp	r4, fp
 8007888:	dd04      	ble.n	8007894 <__kernel_rem_pio2f+0x2e4>
 800788a:	ece0 7a01 	vstmia	r0!, {s15}
 800788e:	f10c 0c01 	add.w	ip, ip, #1
 8007892:	e7e1      	b.n	8007858 <__kernel_rem_pio2f+0x2a8>
 8007894:	ecfe 6a01 	vldmia	lr!, {s13}
 8007898:	ed39 7a01 	vldmdb	r9!, {s14}
 800789c:	3401      	adds	r4, #1
 800789e:	eee6 7a87 	vfma.f32	s15, s13, s14
 80078a2:	e7f0      	b.n	8007886 <__kernel_rem_pio2f+0x2d6>
 80078a4:	08007f08 	.word	0x08007f08
 80078a8:	08007edc 	.word	0x08007edc
 80078ac:	43800000 	.word	0x43800000
 80078b0:	3b800000 	.word	0x3b800000
 80078b4:	00000000 	.word	0x00000000
 80078b8:	9b02      	ldr	r3, [sp, #8]
 80078ba:	eeb0 0a48 	vmov.f32	s0, s16
 80078be:	eba3 0008 	sub.w	r0, r3, r8
 80078c2:	f7ff fe0f 	bl	80074e4 <scalbnf>
 80078c6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80078ac <__kernel_rem_pio2f+0x2fc>
 80078ca:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80078ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d2:	db19      	blt.n	8007908 <__kernel_rem_pio2f+0x358>
 80078d4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80078b0 <__kernel_rem_pio2f+0x300>
 80078d8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80078dc:	aa08      	add	r2, sp, #32
 80078de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078e2:	3508      	adds	r5, #8
 80078e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078e8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80078ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80078f4:	ee10 3a10 	vmov	r3, s0
 80078f8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80078fc:	ee17 3a90 	vmov	r3, s15
 8007900:	3401      	adds	r4, #1
 8007902:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007906:	e74c      	b.n	80077a2 <__kernel_rem_pio2f+0x1f2>
 8007908:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800790c:	aa08      	add	r2, sp, #32
 800790e:	ee10 3a10 	vmov	r3, s0
 8007912:	e7f6      	b.n	8007902 <__kernel_rem_pio2f+0x352>
 8007914:	a808      	add	r0, sp, #32
 8007916:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800791a:	9001      	str	r0, [sp, #4]
 800791c:	ee07 0a90 	vmov	s15, r0
 8007920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007924:	3b01      	subs	r3, #1
 8007926:	ee67 7a80 	vmul.f32	s15, s15, s0
 800792a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800792e:	ed62 7a01 	vstmdb	r2!, {s15}
 8007932:	e743      	b.n	80077bc <__kernel_rem_pio2f+0x20c>
 8007934:	ecfc 6a01 	vldmia	ip!, {s13}
 8007938:	ecb5 7a01 	vldmia	r5!, {s14}
 800793c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007940:	3001      	adds	r0, #1
 8007942:	4550      	cmp	r0, sl
 8007944:	dc01      	bgt.n	800794a <__kernel_rem_pio2f+0x39a>
 8007946:	4282      	cmp	r2, r0
 8007948:	daf4      	bge.n	8007934 <__kernel_rem_pio2f+0x384>
 800794a:	a858      	add	r0, sp, #352	@ 0x160
 800794c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007950:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8007954:	3b01      	subs	r3, #1
 8007956:	e735      	b.n	80077c4 <__kernel_rem_pio2f+0x214>
 8007958:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800795a:	2b02      	cmp	r3, #2
 800795c:	dc09      	bgt.n	8007972 <__kernel_rem_pio2f+0x3c2>
 800795e:	2b00      	cmp	r3, #0
 8007960:	dc2b      	bgt.n	80079ba <__kernel_rem_pio2f+0x40a>
 8007962:	d044      	beq.n	80079ee <__kernel_rem_pio2f+0x43e>
 8007964:	f009 0007 	and.w	r0, r9, #7
 8007968:	b059      	add	sp, #356	@ 0x164
 800796a:	ecbd 8b04 	vpop	{d8-d9}
 800796e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007972:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8007974:	2b03      	cmp	r3, #3
 8007976:	d1f5      	bne.n	8007964 <__kernel_rem_pio2f+0x3b4>
 8007978:	aa30      	add	r2, sp, #192	@ 0xc0
 800797a:	1f0b      	subs	r3, r1, #4
 800797c:	4413      	add	r3, r2
 800797e:	461a      	mov	r2, r3
 8007980:	4620      	mov	r0, r4
 8007982:	2800      	cmp	r0, #0
 8007984:	f1a2 0204 	sub.w	r2, r2, #4
 8007988:	dc52      	bgt.n	8007a30 <__kernel_rem_pio2f+0x480>
 800798a:	4622      	mov	r2, r4
 800798c:	2a01      	cmp	r2, #1
 800798e:	f1a3 0304 	sub.w	r3, r3, #4
 8007992:	dc5d      	bgt.n	8007a50 <__kernel_rem_pio2f+0x4a0>
 8007994:	ab30      	add	r3, sp, #192	@ 0xc0
 8007996:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80078b4 <__kernel_rem_pio2f+0x304>
 800799a:	440b      	add	r3, r1
 800799c:	2c01      	cmp	r4, #1
 800799e:	dc67      	bgt.n	8007a70 <__kernel_rem_pio2f+0x4c0>
 80079a0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80079a4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80079a8:	2e00      	cmp	r6, #0
 80079aa:	d167      	bne.n	8007a7c <__kernel_rem_pio2f+0x4cc>
 80079ac:	edc7 6a00 	vstr	s13, [r7]
 80079b0:	ed87 7a01 	vstr	s14, [r7, #4]
 80079b4:	edc7 7a02 	vstr	s15, [r7, #8]
 80079b8:	e7d4      	b.n	8007964 <__kernel_rem_pio2f+0x3b4>
 80079ba:	ab30      	add	r3, sp, #192	@ 0xc0
 80079bc:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80078b4 <__kernel_rem_pio2f+0x304>
 80079c0:	440b      	add	r3, r1
 80079c2:	4622      	mov	r2, r4
 80079c4:	2a00      	cmp	r2, #0
 80079c6:	da24      	bge.n	8007a12 <__kernel_rem_pio2f+0x462>
 80079c8:	b34e      	cbz	r6, 8007a1e <__kernel_rem_pio2f+0x46e>
 80079ca:	eef1 7a47 	vneg.f32	s15, s14
 80079ce:	edc7 7a00 	vstr	s15, [r7]
 80079d2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80079d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079da:	aa31      	add	r2, sp, #196	@ 0xc4
 80079dc:	2301      	movs	r3, #1
 80079de:	429c      	cmp	r4, r3
 80079e0:	da20      	bge.n	8007a24 <__kernel_rem_pio2f+0x474>
 80079e2:	b10e      	cbz	r6, 80079e8 <__kernel_rem_pio2f+0x438>
 80079e4:	eef1 7a67 	vneg.f32	s15, s15
 80079e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80079ec:	e7ba      	b.n	8007964 <__kernel_rem_pio2f+0x3b4>
 80079ee:	ab30      	add	r3, sp, #192	@ 0xc0
 80079f0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80078b4 <__kernel_rem_pio2f+0x304>
 80079f4:	440b      	add	r3, r1
 80079f6:	2c00      	cmp	r4, #0
 80079f8:	da05      	bge.n	8007a06 <__kernel_rem_pio2f+0x456>
 80079fa:	b10e      	cbz	r6, 8007a00 <__kernel_rem_pio2f+0x450>
 80079fc:	eef1 7a67 	vneg.f32	s15, s15
 8007a00:	edc7 7a00 	vstr	s15, [r7]
 8007a04:	e7ae      	b.n	8007964 <__kernel_rem_pio2f+0x3b4>
 8007a06:	ed33 7a01 	vldmdb	r3!, {s14}
 8007a0a:	3c01      	subs	r4, #1
 8007a0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a10:	e7f1      	b.n	80079f6 <__kernel_rem_pio2f+0x446>
 8007a12:	ed73 7a01 	vldmdb	r3!, {s15}
 8007a16:	3a01      	subs	r2, #1
 8007a18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a1c:	e7d2      	b.n	80079c4 <__kernel_rem_pio2f+0x414>
 8007a1e:	eef0 7a47 	vmov.f32	s15, s14
 8007a22:	e7d4      	b.n	80079ce <__kernel_rem_pio2f+0x41e>
 8007a24:	ecb2 7a01 	vldmia	r2!, {s14}
 8007a28:	3301      	adds	r3, #1
 8007a2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a2e:	e7d6      	b.n	80079de <__kernel_rem_pio2f+0x42e>
 8007a30:	edd2 7a00 	vldr	s15, [r2]
 8007a34:	edd2 6a01 	vldr	s13, [r2, #4]
 8007a38:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007a3c:	3801      	subs	r0, #1
 8007a3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a42:	ed82 7a00 	vstr	s14, [r2]
 8007a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a4a:	edc2 7a01 	vstr	s15, [r2, #4]
 8007a4e:	e798      	b.n	8007982 <__kernel_rem_pio2f+0x3d2>
 8007a50:	edd3 7a00 	vldr	s15, [r3]
 8007a54:	edd3 6a01 	vldr	s13, [r3, #4]
 8007a58:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007a5c:	3a01      	subs	r2, #1
 8007a5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a62:	ed83 7a00 	vstr	s14, [r3]
 8007a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a6a:	edc3 7a01 	vstr	s15, [r3, #4]
 8007a6e:	e78d      	b.n	800798c <__kernel_rem_pio2f+0x3dc>
 8007a70:	ed33 7a01 	vldmdb	r3!, {s14}
 8007a74:	3c01      	subs	r4, #1
 8007a76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a7a:	e78f      	b.n	800799c <__kernel_rem_pio2f+0x3ec>
 8007a7c:	eef1 6a66 	vneg.f32	s13, s13
 8007a80:	eeb1 7a47 	vneg.f32	s14, s14
 8007a84:	edc7 6a00 	vstr	s13, [r7]
 8007a88:	ed87 7a01 	vstr	s14, [r7, #4]
 8007a8c:	eef1 7a67 	vneg.f32	s15, s15
 8007a90:	e790      	b.n	80079b4 <__kernel_rem_pio2f+0x404>
 8007a92:	bf00      	nop

08007a94 <floorf>:
 8007a94:	ee10 3a10 	vmov	r3, s0
 8007a98:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007a9c:	3a7f      	subs	r2, #127	@ 0x7f
 8007a9e:	2a16      	cmp	r2, #22
 8007aa0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007aa4:	dc2b      	bgt.n	8007afe <floorf+0x6a>
 8007aa6:	2a00      	cmp	r2, #0
 8007aa8:	da12      	bge.n	8007ad0 <floorf+0x3c>
 8007aaa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007b10 <floorf+0x7c>
 8007aae:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007ab2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aba:	dd06      	ble.n	8007aca <floorf+0x36>
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	da24      	bge.n	8007b0a <floorf+0x76>
 8007ac0:	2900      	cmp	r1, #0
 8007ac2:	4b14      	ldr	r3, [pc, #80]	@ (8007b14 <floorf+0x80>)
 8007ac4:	bf08      	it	eq
 8007ac6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8007aca:	ee00 3a10 	vmov	s0, r3
 8007ace:	4770      	bx	lr
 8007ad0:	4911      	ldr	r1, [pc, #68]	@ (8007b18 <floorf+0x84>)
 8007ad2:	4111      	asrs	r1, r2
 8007ad4:	420b      	tst	r3, r1
 8007ad6:	d0fa      	beq.n	8007ace <floorf+0x3a>
 8007ad8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8007b10 <floorf+0x7c>
 8007adc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007ae0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae8:	ddef      	ble.n	8007aca <floorf+0x36>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bfbe      	ittt	lt
 8007aee:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8007af2:	fa40 f202 	asrlt.w	r2, r0, r2
 8007af6:	189b      	addlt	r3, r3, r2
 8007af8:	ea23 0301 	bic.w	r3, r3, r1
 8007afc:	e7e5      	b.n	8007aca <floorf+0x36>
 8007afe:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8007b02:	d3e4      	bcc.n	8007ace <floorf+0x3a>
 8007b04:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007b08:	4770      	bx	lr
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e7dd      	b.n	8007aca <floorf+0x36>
 8007b0e:	bf00      	nop
 8007b10:	7149f2ca 	.word	0x7149f2ca
 8007b14:	bf800000 	.word	0xbf800000
 8007b18:	007fffff 	.word	0x007fffff

08007b1c <_init>:
 8007b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1e:	bf00      	nop
 8007b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b22:	bc08      	pop	{r3}
 8007b24:	469e      	mov	lr, r3
 8007b26:	4770      	bx	lr

08007b28 <_fini>:
 8007b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2a:	bf00      	nop
 8007b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2e:	bc08      	pop	{r3}
 8007b30:	469e      	mov	lr, r3
 8007b32:	4770      	bx	lr
