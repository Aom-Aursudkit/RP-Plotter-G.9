
RP_Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6a4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800c87c  0800c87c  0000d87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc8c  0800cc8c  0000e28c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cc8c  0800cc8c  0000dc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc94  0800cc94  0000e28c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc94  0800cc94  0000dc94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc98  0800cc98  0000dc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000028c  20000000  0800cc9c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012bc  20000290  0800cf28  0000e290  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000154c  0800cf28  0000e54c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e28c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018029  00000000  00000000  0000e2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d38  00000000  00000000  000262e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00029020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ecb  00000000  00000000  0002a2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002744c  00000000  00000000  0002b1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a28  00000000  00000000  0005260f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100065  00000000  00000000  00069037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016909c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055dc  00000000  00000000  001690e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0016e6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000290 	.word	0x20000290
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c864 	.word	0x0800c864

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000294 	.word	0x20000294
 8000214:	0800c864 	.word	0x0800c864

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_frsub>:
 8000ba4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba8:	e002      	b.n	8000bb0 <__addsf3>
 8000baa:	bf00      	nop

08000bac <__aeabi_fsub>:
 8000bac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb0 <__addsf3>:
 8000bb0:	0042      	lsls	r2, r0, #1
 8000bb2:	bf1f      	itttt	ne
 8000bb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb8:	ea92 0f03 	teqne	r2, r3
 8000bbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc4:	d06a      	beq.n	8000c9c <__addsf3+0xec>
 8000bc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bce:	bfc1      	itttt	gt
 8000bd0:	18d2      	addgt	r2, r2, r3
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	4048      	eorgt	r0, r1
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	2b19      	cmp	r3, #25
 8000bde:	bf88      	it	hi
 8000be0:	4770      	bxhi	lr
 8000be2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bee:	bf18      	it	ne
 8000bf0:	4240      	negne	r0, r0
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4249      	negne	r1, r1
 8000c02:	ea92 0f03 	teq	r2, r3
 8000c06:	d03f      	beq.n	8000c88 <__addsf3+0xd8>
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c10:	eb10 000c 	adds.w	r0, r0, ip
 8000c14:	f1c3 0320 	rsb	r3, r3, #32
 8000c18:	fa01 f103 	lsl.w	r1, r1, r3
 8000c1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__addsf3+0x78>
 8000c22:	4249      	negs	r1, r1
 8000c24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c2c:	d313      	bcc.n	8000c56 <__addsf3+0xa6>
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c32:	d306      	bcc.n	8000c42 <__addsf3+0x92>
 8000c34:	0840      	lsrs	r0, r0, #1
 8000c36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3a:	f102 0201 	add.w	r2, r2, #1
 8000c3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c40:	d251      	bcs.n	8000ce6 <__addsf3+0x136>
 8000c42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4a:	bf08      	it	eq
 8000c4c:	f020 0001 	biceq.w	r0, r0, #1
 8000c50:	ea40 0003 	orr.w	r0, r0, r3
 8000c54:	4770      	bx	lr
 8000c56:	0049      	lsls	r1, r1, #1
 8000c58:	eb40 0000 	adc.w	r0, r0, r0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c64:	d2ed      	bcs.n	8000c42 <__addsf3+0x92>
 8000c66:	fab0 fc80 	clz	ip, r0
 8000c6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c76:	bfaa      	itet	ge
 8000c78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c7c:	4252      	neglt	r2, r2
 8000c7e:	4318      	orrge	r0, r3
 8000c80:	bfbc      	itt	lt
 8000c82:	40d0      	lsrlt	r0, r2
 8000c84:	4318      	orrlt	r0, r3
 8000c86:	4770      	bx	lr
 8000c88:	f092 0f00 	teq	r2, #0
 8000c8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c90:	bf06      	itte	eq
 8000c92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c96:	3201      	addeq	r2, #1
 8000c98:	3b01      	subne	r3, #1
 8000c9a:	e7b5      	b.n	8000c08 <__addsf3+0x58>
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000caa:	d021      	beq.n	8000cf0 <__addsf3+0x140>
 8000cac:	ea92 0f03 	teq	r2, r3
 8000cb0:	d004      	beq.n	8000cbc <__addsf3+0x10c>
 8000cb2:	f092 0f00 	teq	r2, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	4608      	moveq	r0, r1
 8000cba:	4770      	bx	lr
 8000cbc:	ea90 0f01 	teq	r0, r1
 8000cc0:	bf1c      	itt	ne
 8000cc2:	2000      	movne	r0, #0
 8000cc4:	4770      	bxne	lr
 8000cc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cca:	d104      	bne.n	8000cd6 <__addsf3+0x126>
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cda:	bf3c      	itt	cc
 8000cdc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce0:	4770      	bxcc	lr
 8000ce2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cee:	4770      	bx	lr
 8000cf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf4:	bf16      	itet	ne
 8000cf6:	4608      	movne	r0, r1
 8000cf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cfc:	4601      	movne	r1, r0
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	bf06      	itte	eq
 8000d02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d06:	ea90 0f01 	teqeq	r0, r1
 8000d0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_ui2f>:
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e004      	b.n	8000d20 <__aeabi_i2f+0x8>
 8000d16:	bf00      	nop

08000d18 <__aeabi_i2f>:
 8000d18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d1c:	bf48      	it	mi
 8000d1e:	4240      	negmi	r0, r0
 8000d20:	ea5f 0c00 	movs.w	ip, r0
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	e01c      	b.n	8000d6e <__aeabi_l2f+0x2a>

08000d34 <__aeabi_ul2f>:
 8000d34:	ea50 0201 	orrs.w	r2, r0, r1
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e00a      	b.n	8000d58 <__aeabi_l2f+0x14>
 8000d42:	bf00      	nop

08000d44 <__aeabi_l2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_l2f+0x14>
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	ea5f 0c01 	movs.w	ip, r1
 8000d5c:	bf02      	ittt	eq
 8000d5e:	4684      	moveq	ip, r0
 8000d60:	4601      	moveq	r1, r0
 8000d62:	2000      	moveq	r0, #0
 8000d64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d68:	bf08      	it	eq
 8000d6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d72:	fabc f28c 	clz	r2, ip
 8000d76:	3a08      	subs	r2, #8
 8000d78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d7c:	db10      	blt.n	8000da0 <__aeabi_l2f+0x5c>
 8000d7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d90:	fa20 f202 	lsr.w	r2, r0, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f102 0220 	add.w	r2, r2, #32
 8000da4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db0:	fa21 f202 	lsr.w	r2, r1, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <modbus_1t5_Timeout>:
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef *huart);

// function for interrupt
void modbus_1t5_Timeout() {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <modbus_1t5_Timeout+0x3c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200002ac 	.word	0x200002ac

0800112c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <modbus_3t5_Timeout+0x1c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2201      	movs	r2, #1
 800113a:	755a      	strb	r2, [r3, #21]

}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200002ac 	.word	0x200002ac

0800114c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(huart) == HAL_UART_ERROR_RTO) {
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f009 fc55 	bl	800aa04 <HAL_UART_GetError>
 800115a:	4603      	mov	r3, r0
 800115c:	2b20      	cmp	r3, #32
 800115e:	d101      	bne.n	8001164 <modbus_ErrorTimeout+0x18>
		modbus_1t5_Timeout();
 8001160:	f7ff ffc4 	bl	80010ec <modbus_1t5_Timeout>

	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <Modbus_init+0xa0>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <Modbus_init+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <Modbus_init+0xa4>)
 800118a:	210e      	movs	r1, #14
 800118c:	4618      	mov	r0, r3
 800118e:	f007 fc53 	bl	8008a38 <HAL_TIM_RegisterCallback>
			(void*) modbus_3t5_Timeout);

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2110      	movs	r1, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f009 fbdd 	bl	800a958 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f009 fbf4 	bl	800a990 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <Modbus_init+0xa8>)
 80011ae:	2104      	movs	r1, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f008 fe9b 	bl	8009eec <HAL_UART_RegisterCallback>
			(void*) modbus_ErrorTimeout);
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
	HAL_UART_Receive_DMA(hModbus->huart,
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <Modbus_init+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d8      	ldr	r0, [r3, #12]
			&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <Modbus_init+0xa0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <Modbus_init+0xa0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
	HAL_UART_Receive_DMA(hModbus->huart,
 80011c8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011cc:	4413      	add	r3, r2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011d4:	4619      	mov	r1, r3
 80011d6:	f008 ffc3 	bl	800a160 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE);

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <Modbus_init+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10c      	bne.n	8001204 <Modbus_init+0x98>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Modbus_init+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 f9ad 	bl	8007550 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <Modbus_init+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f006 fd6e 	bl	8007ce0 <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200002ac 	.word	0x200002ac
 8001210:	0800112d 	.word	0x0800112d
 8001214:	0800114d 	.word	0x0800114d

08001218 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8001224:	23ff      	movs	r3, #255	@ 0xff
 8001226:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8001228:	23ff      	movs	r3, #255	@ 0xff
 800122a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800122c:	e013      	b.n	8001256 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	4053      	eors	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <CRC16+0x68>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4053      	eors	r3, r2
 800124a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <CRC16+0x6c>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001256:	883b      	ldrh	r3, [r7, #0]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	803a      	strh	r2, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e6      	bne.n	800122e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	b29b      	uxth	r3, r3
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000100 	.word	0x20000100
 8001284:	20000000 	.word	0x20000000

08001288 <SET_TARGET>:
	for (int i = 0; i < 10; i++) {
		SET_TARGET(i, 0, 0);
	}
}

void SET_TARGET(int8_t slot, float dist, float ang) {
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	ed87 0a02 	vstr	s0, [r7, #8]
 8001294:	edc7 0a01 	vstr	s1, [r7, #4]
 8001298:	73fb      	strb	r3, [r7, #15]
	TARGET_DISTANCE(slot) = (int16_t) ((dist) * 10.0f);
 800129a:	edd7 7a02 	vldr	s15, [r7, #8]
 800129e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012aa:	ee17 3a90 	vmov	r3, s15
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	dc04      	bgt.n	80012c2 <SET_TARGET+0x3a>
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012bc:	3310      	adds	r3, #16
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	e003      	b.n	80012ca <SET_TARGET+0x42>
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	3313      	adds	r3, #19
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	b291      	uxth	r1, r2
 80012cc:	4a13      	ldr	r2, [pc, #76]	@ (800131c <SET_TARGET+0x94>)
 80012ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	TARGET_ANGLE(slot) = (int16_t) ((ang) * 10.0f);
 80012d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e2:	ee17 3a90 	vmov	r3, s15
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	dc05      	bgt.n	80012fc <SET_TARGET+0x74>
 80012f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f4:	3310      	adds	r3, #16
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	3301      	adds	r3, #1
 80012fa:	e004      	b.n	8001306 <SET_TARGET+0x7e>
 80012fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001300:	3313      	adds	r3, #19
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	3301      	adds	r3, #1
 8001306:	b291      	uxth	r1, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <SET_TARGET+0x94>)
 800130a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20001128 	.word	0x20001128

08001320 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b08b      	sub	sp, #44	@ 0x2c
 8001324:	af02      	add	r7, sp, #8
//	//-- value

	REG16(HEART_BEAT) = 22881;
 8001326:	4bbc      	ldr	r3, [pc, #752]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 8001328:	f645 1261 	movw	r2, #22881	@ 0x5961
 800132c:	801a      	strh	r2, [r3, #0]
	REG16(REG_SERVO_LIMIT_SWITCH) = Pen_Status ? 2 : 1;
 800132e:	4bbb      	ldr	r3, [pc, #748]	@ (800161c <Modbus_Protocal_Worker+0x2fc>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <Modbus_Protocal_Worker+0x1a>
 8001336:	2202      	movs	r2, #2
 8001338:	e000      	b.n	800133c <Modbus_Protocal_Worker+0x1c>
 800133a:	2201      	movs	r2, #1
 800133c:	4bb6      	ldr	r3, [pc, #728]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 800133e:	80da      	strh	r2, [r3, #6]
	Pen_BaseSystem = REG16(REG_SERVO_CMD_DOWN) ? 1 : 0;
 8001340:	4bb5      	ldr	r3, [pc, #724]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 8001342:	895b      	ldrh	r3, [r3, #10]
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf14      	ite	ne
 8001348:	2301      	movne	r3, #1
 800134a:	2300      	moveq	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	4bb3      	ldr	r3, [pc, #716]	@ (8001620 <Modbus_Protocal_Worker+0x300>)
 8001352:	701a      	strb	r2, [r3, #0]
	TargetR_BaseSystem = REG16(REG_TARGET_GOAL_R) * 0.1f;
 8001354:	4bb0      	ldr	r3, [pc, #704]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 8001356:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8001624 <Modbus_Protocal_Worker+0x304>
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	4baf      	ldr	r3, [pc, #700]	@ (8001628 <Modbus_Protocal_Worker+0x308>)
 800136c:	edc3 7a00 	vstr	s15, [r3]
	TargetR_BaseSystem = DEG_TO_RED01(REG16(REG_TARGET_GOAL_R)) - (M_PI / 2.0f);
 8001370:	4ba9      	ldr	r3, [pc, #676]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 8001372:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f8a0 	bl	80004bc <__aeabi_i2d>
 800137c:	a3a0      	add	r3, pc, #640	@ (adr r3, 8001600 <Modbus_Protocal_Worker+0x2e0>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7ff f905 	bl	8000590 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f7ff fbb9 	bl	8000b04 <__aeabi_d2f>
 8001392:	4603      	mov	r3, r0
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8a3 	bl	80004e0 <__aeabi_f2d>
 800139a:	a39b      	add	r3, pc, #620	@ (adr r3, 8001608 <Modbus_Protocal_Worker+0x2e8>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7fe ff3e 	bl	8000220 <__aeabi_dsub>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fbaa 	bl	8000b04 <__aeabi_d2f>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a9d      	ldr	r2, [pc, #628]	@ (8001628 <Modbus_Protocal_Worker+0x308>)
 80013b4:	6013      	str	r3, [r2, #0]

	float Velocity_mm, Acceleration_mm, mmPosition, AngularVelocity_rad,
			AngularAcceleration_rad, RadPosition;
	Get_QRIdata(&Velocity_mm, &Acceleration_mm, &mmPosition,
 80013b6:	f107 040c 	add.w	r4, r7, #12
 80013ba:	f107 0210 	add.w	r2, r7, #16
 80013be:	f107 0114 	add.w	r1, r7, #20
 80013c2:	f107 0018 	add.w	r0, r7, #24
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4623      	mov	r3, r4
 80013d2:	f003 fadf 	bl	8004994 <Get_QRIdata>
			&AngularVelocity_rad, &AngularAcceleration_rad, &RadPosition);

// Position remap: [-π/2, 3π/2] → [0, 360]
	float mappedDeg = RAD_TO_DEG(RadPosition + (M_PI / 2.0f));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f881 	bl	80004e0 <__aeabi_f2d>
 80013de:	a38a      	add	r3, pc, #552	@ (adr r3, 8001608 <Modbus_Protocal_Worker+0x2e8>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7fe ff1e 	bl	8000224 <__adddf3>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	a387      	add	r3, pc, #540	@ (adr r3, 8001610 <Modbus_Protocal_Worker+0x2f0>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f8cb 	bl	8000590 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fb7f 	bl	8000b04 <__aeabi_d2f>
 8001406:	4603      	mov	r3, r0
 8001408:	61fb      	str	r3, [r7, #28]
	REG16(REG_POSITION_THETA) = (int16_t) (mappedDeg * 10.0f);
 800140a:	edd7 7a07 	vldr	s15, [r7, #28]
 800140e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141a:	ee17 3a90 	vmov	r3, s15
 800141e:	b21b      	sxth	r3, r3
 8001420:	b29a      	uxth	r2, r3
 8001422:	4b7d      	ldr	r3, [pc, #500]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 8001424:	849a      	strh	r2, [r3, #36]	@ 0x24

// Speed and acceleration: normal conversion
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f859 	bl	80004e0 <__aeabi_f2d>
 800142e:	a378      	add	r3, pc, #480	@ (adr r3, 8001610 <Modbus_Protocal_Worker+0x2f0>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff f8ac 	bl	8000590 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fb60 	bl	8000b04 <__aeabi_d2f>
 8001444:	ee07 0a90 	vmov	s15, r0
 8001448:	eef0 7ae7 	vabs.f32	s15, s15
			* 10.0f);
 800144c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001450:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_SPEED_THETA) = (int16_t) (fabsf(RAD_TO_DEG(AngularVelocity_rad))
 8001454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001458:	ee17 3a90 	vmov	r3, s15
 800145c:	b21b      	sxth	r3, r3
 800145e:	b29a      	uxth	r2, r3
 8001460:	4b6d      	ldr	r3, [pc, #436]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 8001462:	851a      	strh	r2, [r3, #40]	@ 0x28
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f83a 	bl	80004e0 <__aeabi_f2d>
 800146c:	a368      	add	r3, pc, #416	@ (adr r3, 8001610 <Modbus_Protocal_Worker+0x2f0>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7ff f88d 	bl	8000590 <__aeabi_dmul>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff fb41 	bl	8000b04 <__aeabi_d2f>
 8001482:	ee07 0a90 	vmov	s15, r0
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 8001486:	eef0 7ae7 	vabs.f32	s15, s15
			RAD_TO_DEG(AngularAcceleration_rad)) * 10.0f);
 800148a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800148e:	ee67 7a87 	vmul.f32	s15, s15, s14
	REG16(REG_ACCELERATION_THETA) = (int16_t) (fabsf(
 8001492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001496:	ee17 3a90 	vmov	r3, s15
 800149a:	b21b      	sxth	r3, r3
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b5e      	ldr	r3, [pc, #376]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 80014a0:	859a      	strh	r2, [r3, #44]	@ 0x2c

	REG16(REG_SPEED_R) = (int16_t) (fabsf(Velocity_mm) * 10.0f);
 80014a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014a6:	eef0 7ae7 	vabs.f32	s15, s15
 80014aa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b6:	ee17 3a90 	vmov	r3, s15
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	b29a      	uxth	r2, r3
 80014be:	4b56      	ldr	r3, [pc, #344]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 80014c0:	84da      	strh	r2, [r3, #38]	@ 0x26
	REG16(REG_ACCELERATION_R) = (int16_t) (fabsf(Acceleration_mm) * 10.0f);
 80014c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014c6:	eef0 7ae7 	vabs.f32	s15, s15
 80014ca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d6:	ee17 3a90 	vmov	r3, s15
 80014da:	b21b      	sxth	r3, r3
 80014dc:	b29a      	uxth	r2, r3
 80014de:	4b4e      	ldr	r3, [pc, #312]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 80014e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
	REG16(REG_POSITION_R) = (int16_t) (mmPosition * 10.0f);
 80014e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80014e6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f2:	ee17 3a90 	vmov	r3, s15
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	4b47      	ldr	r3, [pc, #284]	@ (8001618 <Modbus_Protocal_Worker+0x2f8>)
 80014fc:	845a      	strh	r2, [r3, #34]	@ 0x22

	//--Modbus
	switch (hModbus->Mstatus) {
 80014fe:	4b4b      	ldr	r3, [pc, #300]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	7ddb      	ldrb	r3, [r3, #23]
 8001504:	3b01      	subs	r3, #1
 8001506:	2b03      	cmp	r3, #3
 8001508:	d80a      	bhi.n	8001520 <Modbus_Protocal_Worker+0x200>
 800150a:	a201      	add	r2, pc, #4	@ (adr r2, 8001510 <Modbus_Protocal_Worker+0x1f0>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	0800152b 	.word	0x0800152b
 8001514:	080016f5 	.word	0x080016f5
 8001518:	080015b7 	.word	0x080015b7
 800151c:	08001631 	.word	0x08001631
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001520:	4b42      	ldr	r3, [pc, #264]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2201      	movs	r2, #1
 8001526:	75da      	strb	r2, [r3, #23]
		break;
 8001528:	e0fc      	b.n	8001724 <Modbus_Protocal_Worker+0x404>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 800152a:	4b40      	ldr	r3, [pc, #256]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001532:	2b00      	cmp	r3, #0
 8001534:	d006      	beq.n	8001544 <Modbus_Protocal_Worker+0x224>
			/*set state*/
			hModbus->Mstatus = Modbus_state_Emission;
 8001536:	4b3d      	ldr	r3, [pc, #244]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2202      	movs	r2, #2
 800153c:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 800153e:	f000 f9e7 	bl	8001910 <Modbus_Emission>
 8001542:	e018      	b.n	8001576 <Modbus_Protocal_Worker+0x256>
		}

		// Received character
		else if (hModbus->huart->RxXferSize != hModbus->huart->RxXferCount) {
 8001544:	4b39      	ldr	r3, [pc, #228]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800154e:	4b37      	ldr	r3, [pc, #220]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001558:	b29b      	uxth	r3, r3
 800155a:	429a      	cmp	r2, r3
 800155c:	d00b      	beq.n	8001576 <Modbus_Protocal_Worker+0x256>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800155e:	4b33      	ldr	r3, [pc, #204]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2200      	movs	r2, #0
 8001564:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001566:	4b31      	ldr	r3, [pc, #196]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2200      	movs	r2, #0
 800156c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 800156e:	4b2f      	ldr	r3, [pc, #188]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2203      	movs	r2, #3
 8001574:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 8001576:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001580:	2b20      	cmp	r3, #32
 8001582:	f040 80c8 	bne.w	8001716 <Modbus_Protocal_Worker+0x3f6>
			hModbus->modbusUartStructure.RxTail = 0;
 8001586:	4b29      	ldr	r3, [pc, #164]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 8001590:	4b26      	ldr	r3, [pc, #152]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68d8      	ldr	r0, [r3, #12]
					&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001596:	4b25      	ldr	r3, [pc, #148]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4b24      	ldr	r3, [pc, #144]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_DMA(hModbus->huart,
 80015a2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80015a6:	4413      	add	r3, r2
 80015a8:	3302      	adds	r3, #2
 80015aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015ae:	4619      	mov	r1, r3
 80015b0:	f008 fdd6 	bl	800a160 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE);

		}
		break;
 80015b4:	e0af      	b.n	8001716 <Modbus_Protocal_Worker+0x3f6>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 80015b6:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	7d1b      	ldrb	r3, [r3, #20]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80ac 	beq.w	800171a <Modbus_Protocal_Worker+0x3fa>
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	22fe      	movs	r2, #254	@ 0xfe
 80015c8:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 80015d4:	4b15      	ldr	r3, [pc, #84]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
					- __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 80015e8:	1a8a      	subs	r2, r1, r2
 80015ea:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail = hModbus->huart->RxXferSize
 80015ec:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80015f0:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <Modbus_Protocal_Worker+0x30c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2204      	movs	r2, #4
 80015f6:	75da      	strb	r2, [r3, #23]
		}
		break;
 80015f8:	e08f      	b.n	800171a <Modbus_Protocal_Worker+0x3fa>
 80015fa:	bf00      	nop
 80015fc:	f3af 8000 	nop.w
 8001600:	03b761f5 	.word	0x03b761f5
 8001604:	3f5c9871 	.word	0x3f5c9871
 8001608:	54442d18 	.word	0x54442d18
 800160c:	3ff921fb 	.word	0x3ff921fb
 8001610:	1a63c1f8 	.word	0x1a63c1f8
 8001614:	404ca5dc 	.word	0x404ca5dc
 8001618:	20001128 	.word	0x20001128
 800161c:	20000bcf 	.word	0x20000bcf
 8001620:	20000c44 	.word	0x20000c44
 8001624:	3dcccccd 	.word	0x3dcccccd
 8001628:	20000c3c 	.word	0x20000c3c
 800162c:	200002ac 	.word	0x200002ac
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 8001630:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001638:	f113 0f02 	cmn.w	r3, #2
 800163c:	d150      	bne.n	80016e0 <Modbus_Protocal_Worker+0x3c0>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2200      	movs	r2, #0
 8001644:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(
					hModbus->modbusUartStructure.MessageBufferRx,
 8001646:	4b39      	ldr	r3, [pc, #228]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f203 2272 	addw	r2, r3, #626	@ 0x272
					hModbus->modbusUartStructure.RxTail - 2);
 800164e:	4b37      	ldr	r3, [pc, #220]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
			CalculateCRC.U16 = CRC16(
 8001656:	3b02      	subs	r3, #2
 8001658:	4619      	mov	r1, r3
 800165a:	4610      	mov	r0, r2
 800165c:	f7ff fddc 	bl	8001218 <CRC16>
 8001660:	4603      	mov	r3, r0
 8001662:	803b      	strh	r3, [r7, #0]

			if (!(CalculateCRC.U8[0]
 8001664:	783a      	ldrb	r2, [r7, #0]
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001666:	4b31      	ldr	r3, [pc, #196]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	4b30      	ldr	r3, [pc, #192]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
							- 2]
 8001672:	3b02      	subs	r3, #2
					== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001674:	440b      	add	r3, r1
 8001676:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d10c      	bne.n	8001698 <Modbus_Protocal_Worker+0x378>
					&& CalculateCRC.U8[1]
 800167e:	787a      	ldrb	r2, [r7, #1]
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 8001680:	4b2a      	ldr	r3, [pc, #168]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001682:	6819      	ldr	r1, [r3, #0]
 8001684:	4b29      	ldr	r3, [pc, #164]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
									- 1])) {
 800168c:	3b01      	subs	r3, #1
							== hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail
 800168e:	440b      	add	r3, r1
 8001690:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if (!(CalculateCRC.U8[0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d004      	beq.n	80016a2 <Modbus_Protocal_Worker+0x382>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001698:	4b24      	ldr	r3, [pc, #144]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	22ff      	movs	r2, #255	@ 0xff
 800169e:	759a      	strb	r2, [r3, #22]
				break;
 80016a0:	e040      	b.n	8001724 <Modbus_Protocal_Worker+0x404>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
					!= hModbus->slaveAddress)
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	781b      	ldrb	r3, [r3, #0]
			if (hModbus->modbusUartStructure.MessageBufferRx[0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d113      	bne.n	80016dc <Modbus_Protocal_Worker+0x3bc>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80016b4:	4b1d      	ldr	r3, [pc, #116]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx + 1,
 80016bc:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80016c4:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail - 3);
 80016c6:	4b19      	ldr	r3, [pc, #100]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80016ce:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80016d0:	461a      	mov	r2, r3
 80016d2:	f00a fb23 	bl	800bd1c <memcpy>

			//execute command
			Modbus_frame_response();
 80016d6:	f000 f903 	bl	80018e0 <Modbus_frame_response>
 80016da:	e001      	b.n	80016e0 <Modbus_Protocal_Worker+0x3c0>
				break;
 80016dc:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 80016de:	e021      	b.n	8001724 <Modbus_Protocal_Worker+0x404>
		if (hModbus->Flag_T35TimeOut) {
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	7d5b      	ldrb	r3, [r3, #21]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d019      	beq.n	800171e <Modbus_Protocal_Worker+0x3fe>
			hModbus->Mstatus = Modbus_state_Idle;
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2201      	movs	r2, #1
 80016f0:	75da      	strb	r2, [r3, #23]
		break;
 80016f2:	e014      	b.n	800171e <Modbus_Protocal_Worker+0x3fe>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80016f4:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fe:	2b20      	cmp	r3, #32
 8001700:	d10f      	bne.n	8001722 <Modbus_Protocal_Worker+0x402>
			hModbus->TxCount = 0;
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <Modbus_Protocal_Worker+0x40c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2201      	movs	r2, #1
 8001712:	75da      	strb	r2, [r3, #23]
		break;
 8001714:	e005      	b.n	8001722 <Modbus_Protocal_Worker+0x402>
		break;
 8001716:	bf00      	nop
 8001718:	e004      	b.n	8001724 <Modbus_Protocal_Worker+0x404>
		break;
 800171a:	bf00      	nop
 800171c:	e002      	b.n	8001724 <Modbus_Protocal_Worker+0x404>
		break;
 800171e:	bf00      	nop
 8001720:	e000      	b.n	8001724 <Modbus_Protocal_Worker+0x404>
		break;
 8001722:	bf00      	nop
}
 8001724:	bf00      	nop
 8001726:	3724      	adds	r7, #36	@ 0x24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}
 800172c:	200002ac 	.word	0x200002ac

08001730 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	7e5b      	ldrb	r3, [r3, #25]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	b29b      	uxth	r3, r3
 8001740:	4a1a      	ldr	r2, [pc, #104]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	7e92      	ldrb	r2, [r2, #26]
 8001746:	4413      	add	r3, r2
 8001748:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 800174a:	88fa      	ldrh	r2, [r7, #6]
 800174c:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <modbusWrite1Register+0x7c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	429a      	cmp	r2, r3
 8001754:	d903      	bls.n	800175e <modbusWrite1Register+0x2e>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001756:	2002      	movs	r0, #2
 8001758:	f000 f8a0 	bl	800189c <ModbusErrorReply>
		return;
 800175c:	e023      	b.n	80017a6 <modbusWrite1Register+0x76>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800175e:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6859      	ldr	r1, [r3, #4]
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	440b      	add	r3, r1
 800176e:	7ed2      	ldrb	r2, [r2, #27]
 8001770:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001772:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6859      	ldr	r1, [r3, #4]
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	440b      	add	r3, r1
 8001782:	7f12      	ldrb	r2, [r2, #28]
 8001784:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <modbusWrite1Register+0x7c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3318      	adds	r3, #24
 8001794:	2208      	movs	r2, #8
 8001796:	4619      	mov	r1, r3
 8001798:	f00a fac0 	bl	800bd1c <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 800179c:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <modbusWrite1Register+0x7c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2205      	movs	r2, #5
 80017a2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200002ac 	.word	0x200002ac

080017b0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 80017b6:	4b38      	ldr	r3, [pc, #224]	@ (8001898 <modbusRead1Register+0xe8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	7edb      	ldrb	r3, [r3, #27]
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	b29b      	uxth	r3, r3
			+ (hModbus->Rxframe[4]));
 80017c0:	4a35      	ldr	r2, [pc, #212]	@ (8001898 <modbusRead1Register+0xe8>)
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	7f12      	ldrb	r2, [r2, #28]
	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8)
 80017c6:	4413      	add	r3, r2
 80017c8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 80017ca:	4b33      	ldr	r3, [pc, #204]	@ (8001898 <modbusRead1Register+0xe8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	7e5b      	ldrb	r3, [r3, #25]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4a30      	ldr	r2, [pc, #192]	@ (8001898 <modbusRead1Register+0xe8>)
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	7e92      	ldrb	r2, [r2, #26]
 80017da:	4413      	add	r3, r2
 80017dc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <modbusRead1Register+0x3a>
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	2b7d      	cmp	r3, #125	@ 0x7d
 80017e8:	d903      	bls.n	80017f2 <modbusRead1Register+0x42>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80017ea:	2003      	movs	r0, #3
 80017ec:	f000 f856 	bl	800189c <ModbusErrorReply>
		return;
 80017f0:	e04e      	b.n	8001890 <modbusRead1Register+0xe0>
	}

	if (startAddress > hModbus->RegisterSize
 80017f2:	88ba      	ldrh	r2, [r7, #4]
 80017f4:	4b28      	ldr	r3, [pc, #160]	@ (8001898 <modbusRead1Register+0xe8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d808      	bhi.n	8001810 <modbusRead1Register+0x60>
			|| (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 80017fe:	88ba      	ldrh	r2, [r7, #4]
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	4413      	add	r3, r2
 8001804:	461a      	mov	r2, r3
 8001806:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <modbusRead1Register+0xe8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	429a      	cmp	r2, r3
 800180e:	d903      	bls.n	8001818 <modbusRead1Register+0x68>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001810:	2002      	movs	r0, #2
 8001812:	f000 f843 	bl	800189c <ModbusErrorReply>
		return;
 8001816:	e03b      	b.n	8001890 <modbusRead1Register+0xe0>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001818:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <modbusRead1Register+0xe8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2203      	movs	r2, #3
 800181e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <modbusRead1Register+0xe8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	0052      	lsls	r2, r2, #1
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 8001832:	2400      	movs	r4, #0
 8001834:	e020      	b.n	8001878 <modbusRead1Register+0xc8>
		hModbus->Txframe[2 * i + 2] =
				hModbus->RegisterAddress[startAddress + i].U8[1];
 8001836:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <modbusRead1Register+0xe8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	88bb      	ldrh	r3, [r7, #4]
 800183e:	4423      	add	r3, r4
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 2] =
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <modbusRead1Register+0xe8>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	1c63      	adds	r3, r4, #1
 800184a:	005b      	lsls	r3, r3, #1
				hModbus->RegisterAddress[startAddress + i].U8[1];
 800184c:	7849      	ldrb	r1, [r1, #1]
		hModbus->Txframe[2 * i + 2] =
 800184e:	4413      	add	r3, r2
 8001850:	460a      	mov	r2, r1
 8001852:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2 * i + 3] =
				hModbus->RegisterAddress[startAddress + i].U8[0];
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <modbusRead1Register+0xe8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	88bb      	ldrh	r3, [r7, #4]
 800185e:	4423      	add	r3, r4
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	18d1      	adds	r1, r2, r3
		hModbus->Txframe[2 * i + 3] =
 8001864:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <modbusRead1Register+0xe8>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	0063      	lsls	r3, r4, #1
 800186a:	3303      	adds	r3, #3
				hModbus->RegisterAddress[startAddress + i].U8[0];
 800186c:	7809      	ldrb	r1, [r1, #0]
		hModbus->Txframe[2 * i + 3] =
 800186e:	4413      	add	r3, r2
 8001870:	460a      	mov	r2, r1
 8001872:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for (i = 0; i < numberOfDataToRead; i++) {
 8001876:	3401      	adds	r4, #1
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	429c      	cmp	r4, r3
 800187c:	dbdb      	blt.n	8001836 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <modbusRead1Register+0xe8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0052      	lsls	r2, r2, #1
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bd90      	pop	{r4, r7, pc}
 8001896:	bf00      	nop
 8001898:	200002ac 	.word	0x200002ac

0800189c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80018a6:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <ModbusErrorReply+0x40>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	7e1a      	ldrb	r2, [r3, #24]
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <ModbusErrorReply+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80018ba:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <ModbusErrorReply+0x40>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	79fa      	ldrb	r2, [r7, #7]
 80018c0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <ModbusErrorReply+0x40>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2202      	movs	r2, #2
 80018ca:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200002ac 	.word	0x200002ac

080018e0 <Modbus_frame_response>:

void Modbus_frame_response() {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <Modbus_frame_response+0x2c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	7e1b      	ldrb	r3, [r3, #24]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d004      	beq.n	80018f8 <Modbus_frame_response+0x18>
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d105      	bne.n	80018fe <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80018f2:	f7ff ff1d 	bl	8001730 <modbusWrite1Register>
		break;
 80018f6:	e006      	b.n	8001906 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80018f8:	f7ff ff5a 	bl	80017b0 <modbusRead1Register>
		break;
 80018fc:	e003      	b.n	8001906 <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80018fe:	2001      	movs	r0, #1
 8001900:	f7ff ffcc 	bl	800189c <ModbusErrorReply>
		break;
 8001904:	bf00      	nop

	}
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200002ac 	.word	0x200002ac

08001910 <Modbus_Emission>:

void Modbus_Emission() {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001916:	4b38      	ldr	r3, [pc, #224]	@ (80019f8 <Modbus_Emission+0xe8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001920:	2b20      	cmp	r3, #32
 8001922:	d15d      	bne.n	80019e0 <Modbus_Emission+0xd0>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001924:	4b34      	ldr	r3, [pc, #208]	@ (80019f8 <Modbus_Emission+0xe8>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b33      	ldr	r3, [pc, #204]	@ (80019f8 <Modbus_Emission+0xe8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 8001932:	4b31      	ldr	r3, [pc, #196]	@ (80019f8 <Modbus_Emission+0xe8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 800193a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe, hModbus->TxCount);
 800193c:	4b2e      	ldr	r3, [pc, #184]	@ (80019f8 <Modbus_Emission+0xe8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
 8001944:	4b2c      	ldr	r3, [pc, #176]	@ (80019f8 <Modbus_Emission+0xe8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1,
 800194c:	461a      	mov	r2, r3
 800194e:	f00a f9e5 	bl	800bd1c <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 8001952:	4b29      	ldr	r3, [pc, #164]	@ (80019f8 <Modbus_Emission+0xe8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800195a:	461a      	mov	r2, r3
 800195c:	4b26      	ldr	r3, [pc, #152]	@ (80019f8 <Modbus_Emission+0xe8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	3203      	adds	r2, #3
 8001962:	b292      	uxth	r2, r2
 8001964:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001968:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <Modbus_Emission+0xe8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001970:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <Modbus_Emission+0xe8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001978:	3b02      	subs	r3, #2
 800197a:	4619      	mov	r1, r3
 800197c:	4610      	mov	r0, r2
 800197e:	f7ff fc4b 	bl	8001218 <CRC16>
 8001982:	4603      	mov	r3, r0
 8001984:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 8001986:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <Modbus_Emission+0xe8>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <Modbus_Emission+0xe8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 2] = CalculateCRC.U8[0];
 8001992:	3b02      	subs	r3, #2
 8001994:	7939      	ldrb	r1, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	460a      	mov	r2, r1
 800199a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail
 800199e:	4b16      	ldr	r3, [pc, #88]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
				- 1] = CalculateCRC.U8[1];
 80019aa:	3b01      	subs	r3, #1
 80019ac:	7979      	ldrb	r1, [r7, #5]
 80019ae:	4413      	add	r3, r2
 80019b0:	460a      	mov	r2, r1
 80019b2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		//sent modbus

		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c0:	2b20      	cmp	r3, #32
 80019c2:	d10d      	bne.n	80019e0 <Modbus_Emission+0xd0>
			HAL_UART_Transmit_DMA(hModbus->huart,
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68d8      	ldr	r0, [r3, #12]
					hModbus->modbusUartStructure.MessageBufferTx,
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					hModbus->modbusUartStructure.TxTail);
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart,
 80019d6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80019da:	461a      	mov	r2, r3
 80019dc:	f008 fb40 	bl	800a060 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2200      	movs	r2, #0
 80019e6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80019e8:	4b03      	ldr	r3, [pc, #12]	@ (80019f8 <Modbus_Emission+0xe8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	755a      	strb	r2, [r3, #21]

}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200002ac 	.word	0x200002ac

080019fc <Trapezoidal_Init>:
 */

#include "math.h"
#include "Trapezoidal.h"

void Trapezoidal_Init(VELO_PROFILE *profile, float distance_total, float v_max, float a_max) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a08:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a0c:	ed87 1a00 	vstr	s2, [r7]
    profile->distance_total = fabsf(distance_total);
 8001a10:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a14:	eef0 7ae7 	vabs.f32	s15, s15
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	edc3 7a00 	vstr	s15, [r3]
    profile->v_max = fabsf(v_max);
 8001a1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a22:	eef0 7ae7 	vabs.f32	s15, s15
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	edc3 7a01 	vstr	s15, [r3, #4]
    profile->a_max = fabsf(a_max);
 8001a2c:	edd7 7a00 	vldr	s15, [r7]
 8001a30:	eef0 7ae7 	vabs.f32	s15, s15
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	edc3 7a02 	vstr	s15, [r3, #8]
    profile->current_position = 0.0f;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
    profile->current_velocity = 0.0f;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
    profile->target_position = distance_total;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	61da      	str	r2, [r3, #28]
    profile->direction = (distance_total >= 0.0f) ? 1.0f : -1.0f;
 8001a50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5c:	db02      	blt.n	8001a64 <Trapezoidal_Init+0x68>
 8001a5e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a62:	e000      	b.n	8001a66 <Trapezoidal_Init+0x6a>
 8001a64:	4a49      	ldr	r2, [pc, #292]	@ (8001b8c <Trapezoidal_Init+0x190>)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	621a      	str	r2, [r3, #32]
    profile->finished = 0;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	629a      	str	r2, [r3, #40]	@ 0x28
    profile->elapsed_time = 0.0f;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	@ 0x24

    // Check if triangular profile is required
    float d_total_min = (profile->v_max * profile->v_max) / profile->a_max;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a84:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a92:	edc7 7a05 	vstr	s15, [r7, #20]
    if (profile->distance_total < d_total_min) {
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	dd14      	ble.n	8001ad4 <Trapezoidal_Init+0xd8>
        profile->is_triangular = 1;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2201      	movs	r2, #1
 8001aae:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = sqrtf(profile->a_max * profile->distance_total);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac4:	f00a f938 	bl	800bd38 <sqrtf>
 8001ac8:	eef0 7a40 	vmov.f32	s15, s0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	edc3 7a03 	vstr	s15, [r3, #12]
 8001ad2:	e006      	b.n	8001ae2 <Trapezoidal_Init+0xe6>
    } else {
        profile->is_triangular = 0;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
        profile->v_peak = profile->v_max;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	60da      	str	r2, [r3, #12]
    }

    // Precompute timing and distances
    profile->t_acc = profile->v_peak / profile->a_max;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	ed93 7a02 	vldr	s14, [r3, #8]
 8001aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    profile->d_acc = 0.5f * profile->a_max * profile->t_acc * profile->t_acc;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001afe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    if (profile->is_triangular) {
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <Trapezoidal_Init+0x13e>
        profile->t_flat = 0.0f;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	635a      	str	r2, [r3, #52]	@ 0x34
        profile->d_flat = 0.0f;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b38:	e017      	b.n	8001b6a <Trapezoidal_Init+0x16e>
    } else {
        profile->d_flat = profile->distance_total - 2 * profile->d_acc;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	ed93 7a00 	vldr	s14, [r3]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001b46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        profile->t_flat = profile->d_flat / profile->v_peak;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    }

    profile->t_total = 2 * profile->t_acc + profile->t_flat;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b70:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
}
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	bf800000 	.word	0xbf800000

08001b90 <Trapezoidal_Update>:

void Trapezoidal_Update(VELO_PROFILE *profile, float dt) {
 8001b90:	b480      	push	{r7}
 8001b92:	b095      	sub	sp, #84	@ 0x54
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	ed87 0a00 	vstr	s0, [r7]
    if (profile->finished) return;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f040 812c 	bne.w	8001dfe <Trapezoidal_Update+0x26e>

    profile->elapsed_time += dt;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001bac:	edd7 7a00 	vldr	s15, [r7]
 8001bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    float t = profile->elapsed_time;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	63bb      	str	r3, [r7, #56]	@ 0x38

    float a = profile->a_max;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	637b      	str	r3, [r7, #52]	@ 0x34
    float v = profile->v_peak;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	633b      	str	r3, [r7, #48]	@ 0x30
    float d_total = profile->distance_total;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float t_acc = v / a;
 8001bd2:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001bd6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bde:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float d_acc = 0.5f * a * t_acc * t_acc;
 8001be2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001be6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001bea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bee:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    float t_flat = 0.0f;
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float d_flat = 0.0f;
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	64bb      	str	r3, [r7, #72]	@ 0x48

    if (!profile->is_triangular) {
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d111      	bne.n	8001c3a <Trapezoidal_Update+0xaa>
        d_flat = d_total - 2 * d_acc;
 8001c16:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c1e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c26:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        t_flat = d_flat / v;
 8001c2a:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001c2e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c36:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    }

    float t1 = t_acc;
 8001c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3c:	623b      	str	r3, [r7, #32]
    float t2 = t_acc + t_flat;
 8001c3e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c42:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4a:	edc7 7a07 	vstr	s15, [r7, #28]
    float t3 = t_acc + t_flat + t_acc;
 8001c4e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c52:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c62:	edc7 7a06 	vstr	s15, [r7, #24]

    float pos = 0.0f;
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	647b      	str	r3, [r7, #68]	@ 0x44
    float vel = 0.0f;
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	643b      	str	r3, [r7, #64]	@ 0x40
    float acc = 0.0f;
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float eps = 1e-6f;
 8001c78:	4b64      	ldr	r3, [pc, #400]	@ (8001e0c <Trapezoidal_Update+0x27c>)
 8001c7a:	617b      	str	r3, [r7, #20]

    if (t < t1 - eps) {
 8001c7c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c80:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c88:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c94:	d51a      	bpl.n	8001ccc <Trapezoidal_Update+0x13c>
        // Acceleration phase
        pos = 0.5f * a * t * t;
 8001c96:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c9a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ca2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001caa:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = a * t;
 8001cb6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001cba:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = a;
 8001cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cca:	e079      	b.n	8001dc0 <Trapezoidal_Update+0x230>
    } else if (t < t2 - eps) {
 8001ccc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce4:	d519      	bpl.n	8001d1a <Trapezoidal_Update+0x18a>
        // Constant velocity phase
        float t_flat_phase = t - t1;
 8001ce6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cea:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf2:	edc7 7a03 	vstr	s15, [r7, #12]
        pos = d_acc + v * t_flat_phase;
 8001cf6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001cfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d02:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v;
 8001d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d10:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d18:	e052      	b.n	8001dc0 <Trapezoidal_Update+0x230>
    } else if (t < t3 - eps) {
 8001d1a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d26:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d32:	d53a      	bpl.n	8001daa <Trapezoidal_Update+0x21a>
        // Deceleration phase
        float td = t - t2;
 8001d34:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d38:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d40:	edc7 7a04 	vstr	s15, [r7, #16]
        pos = d_acc + d_flat + v * td - 0.5f * a * td * td;
 8001d44:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d48:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d50:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001d54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d60:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d64:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001d68:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d74:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d80:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        vel = v - a * td;
 8001d84:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001d88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d90:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d98:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        acc = -a;
 8001d9c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001da0:	eef1 7a67 	vneg.f32	s15, s15
 8001da4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001da8:	e00a      	b.n	8001dc0 <Trapezoidal_Update+0x230>
    } else {
        // Motion complete
        pos = d_total;
 8001daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dac:	647b      	str	r3, [r7, #68]	@ 0x44
        vel = 0.0f;
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	643b      	str	r3, [r7, #64]	@ 0x40
        acc = 0.0f;
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        profile->finished = 1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // Apply direction
    profile->current_position = pos * profile->direction;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dc6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->current_velocity = vel * profile->direction;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dda:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->current_acceleration = acc * profile->direction;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dee:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	edc3 7a06 	vstr	s15, [r3, #24]
 8001dfc:	e000      	b.n	8001e00 <Trapezoidal_Update+0x270>
    if (profile->finished) return;
 8001dfe:	bf00      	nop
}
 8001e00:	3754      	adds	r7, #84	@ 0x54
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	358637bd 	.word	0x358637bd

08001e10 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e14:	ed2d 8b02 	vpush	{d8}
 8001e18:	b09f      	sub	sp, #124	@ 0x7c
 8001e1a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e1c:	f003 fc17 	bl	800564e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e20:	f001 fb0c 	bl	800343c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e24:	f001 ff66 	bl	8003cf4 <MX_GPIO_Init>
	MX_DMA_Init();
 8001e28:	f001 ff32 	bl	8003c90 <MX_DMA_Init>
	MX_TIM4_Init();
 8001e2c:	f001 fcae 	bl	800378c <MX_TIM4_Init>
	MX_TIM5_Init();
 8001e30:	f001 fd02 	bl	8003838 <MX_TIM5_Init>
	MX_TIM3_Init();
 8001e34:	f001 fc54 	bl	80036e0 <MX_TIM3_Init>
	MX_TIM8_Init();
 8001e38:	f001 fd4c 	bl	80038d4 <MX_TIM8_Init>
	MX_TIM15_Init();
 8001e3c:	f001 fe06 	bl	8003a4c <MX_TIM15_Init>
	MX_TIM1_Init();
 8001e40:	f001 fb48 	bl	80034d4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001e44:	f001 fbcc 	bl	80035e0 <MX_TIM2_Init>
	MX_TIM16_Init();
 8001e48:	f001 fea4 	bl	8003b94 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 8001e4c:	f001 fed2 	bl	8003bf4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001e50:	484c      	ldr	r0, [pc, #304]	@ (8001f84 <main+0x174>)
 8001e52:	f005 fb0d 	bl	8007470 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001e56:	2100      	movs	r1, #0
 8001e58:	484a      	ldr	r0, [pc, #296]	@ (8001f84 <main+0x174>)
 8001e5a:	f005 fdd5 	bl	8007a08 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001e5e:	2104      	movs	r1, #4
 8001e60:	4848      	ldr	r0, [pc, #288]	@ (8001f84 <main+0x174>)
 8001e62:	f005 fdd1 	bl	8007a08 <HAL_TIM_IC_Start>
	HAL_TIM_Base_Start(&htim2);
 8001e66:	4848      	ldr	r0, [pc, #288]	@ (8001f88 <main+0x178>)
 8001e68:	f005 fb02 	bl	8007470 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4846      	ldr	r0, [pc, #280]	@ (8001f88 <main+0x178>)
 8001e70:	f005 fdca 	bl	8007a08 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001e74:	2104      	movs	r1, #4
 8001e76:	4844      	ldr	r0, [pc, #272]	@ (8001f88 <main+0x178>)
 8001e78:	f005 fdc6 	bl	8007a08 <HAL_TIM_IC_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001e7c:	213c      	movs	r1, #60	@ 0x3c
 8001e7e:	4843      	ldr	r0, [pc, #268]	@ (8001f8c <main+0x17c>)
 8001e80:	f006 f870 	bl	8007f64 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001e84:	213c      	movs	r1, #60	@ 0x3c
 8001e86:	4842      	ldr	r0, [pc, #264]	@ (8001f90 <main+0x180>)
 8001e88:	f006 f86c 	bl	8007f64 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001e8c:	4841      	ldr	r0, [pc, #260]	@ (8001f94 <main+0x184>)
 8001e8e:	f005 fb5f 	bl	8007550 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim8);
 8001e92:	4841      	ldr	r0, [pc, #260]	@ (8001f98 <main+0x188>)
 8001e94:	f005 faec 	bl	8007470 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001e98:	2108      	movs	r1, #8
 8001e9a:	483f      	ldr	r0, [pc, #252]	@ (8001f98 <main+0x188>)
 8001e9c:	f005 fc3e 	bl	800771c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001ea0:	210c      	movs	r1, #12
 8001ea2:	483d      	ldr	r0, [pc, #244]	@ (8001f98 <main+0x188>)
 8001ea4:	f005 fc3a 	bl	800771c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim15);
 8001ea8:	483c      	ldr	r0, [pc, #240]	@ (8001f9c <main+0x18c>)
 8001eaa:	f005 fae1 	bl	8007470 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001eae:	2100      	movs	r1, #0
 8001eb0:	483a      	ldr	r0, [pc, #232]	@ (8001f9c <main+0x18c>)
 8001eb2:	f005 fc33 	bl	800771c <HAL_TIM_PWM_Start>
	//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
	DWT_Init();
 8001eb6:	f002 f885 	bl	8003fc4 <DWT_Init>

	PID.Kp = 0.1;
 8001eba:	4a39      	ldr	r2, [pc, #228]	@ (8001fa0 <main+0x190>)
 8001ebc:	4b39      	ldr	r3, [pc, #228]	@ (8001fa4 <main+0x194>)
 8001ebe:	6193      	str	r3, [r2, #24]
	PID.Ki = 0.00001;
 8001ec0:	4a37      	ldr	r2, [pc, #220]	@ (8001fa0 <main+0x190>)
 8001ec2:	4b39      	ldr	r3, [pc, #228]	@ (8001fa8 <main+0x198>)
 8001ec4:	61d3      	str	r3, [r2, #28]
	PID.Kd = 0.1;
 8001ec6:	4a36      	ldr	r2, [pc, #216]	@ (8001fa0 <main+0x190>)
 8001ec8:	4b36      	ldr	r3, [pc, #216]	@ (8001fa4 <main+0x194>)
 8001eca:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 0);
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4834      	ldr	r0, [pc, #208]	@ (8001fa0 <main+0x190>)
 8001ed0:	f009 febc 	bl	800bc4c <arm_pid_init_f32>

	Reset_R();
 8001ed4:	f002 fcc6 	bl	8004864 <Reset_R>
	Reset_P();
 8001ed8:	f002 fcd4 	bl	8004884 <Reset_P>
	calibState = CALIB_IDLE;
 8001edc:	4a33      	ldr	r2, [pc, #204]	@ (8001fac <main+0x19c>)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	7013      	strb	r3, [r2, #0]

	Set_Servo(0);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f002 fc94 	bl	8004810 <Set_Servo>

	// BaseSystem//////////
	hmodbus.huart = &huart2;
 8001ee8:	4a31      	ldr	r2, [pc, #196]	@ (8001fb0 <main+0x1a0>)
 8001eea:	4b32      	ldr	r3, [pc, #200]	@ (8001fb4 <main+0x1a4>)
 8001eec:	60d3      	str	r3, [r2, #12]
	hmodbus.htim = &htim16;
 8001eee:	4a30      	ldr	r2, [pc, #192]	@ (8001fb0 <main+0x1a0>)
 8001ef0:	4b31      	ldr	r3, [pc, #196]	@ (8001fb8 <main+0x1a8>)
 8001ef2:	6113      	str	r3, [r2, #16]
	hmodbus.slaveAddress = 0x15;
 8001ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8001fb0 <main+0x1a0>)
 8001ef6:	2315      	movs	r3, #21
 8001ef8:	7013      	strb	r3, [r2, #0]
	hmodbus.RegisterSize = 200;
 8001efa:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb0 <main+0x1a0>)
 8001efc:	23c8      	movs	r3, #200	@ 0xc8
 8001efe:	6093      	str	r3, [r2, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001f00:	492e      	ldr	r1, [pc, #184]	@ (8001fbc <main+0x1ac>)
 8001f02:	482b      	ldr	r0, [pc, #172]	@ (8001fb0 <main+0x1a0>)
 8001f04:	f7ff f932 	bl	800116c <Modbus_init>
	ResetAllTargets;
	REG16(REG_MOTION_STATUS) = 0;
 8001f08:	4a2c      	ldr	r2, [pc, #176]	@ (8001fbc <main+0x1ac>)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	8413      	strh	r3, [r2, #32]
	Set_Motor(0, 0);
 8001f0e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001fc0 <main+0x1b0>
 8001f12:	2000      	movs	r0, #0
 8001f14:	f002 fbfe 	bl	8004714 <Set_Motor>
	Set_Motor(1, 0);
 8001f18:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8001fc0 <main+0x1b0>
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f002 fbf9 	bl	8004714 <Set_Motor>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//////////////////////// <<BaseSystem>> /////////////////////////
		if (!Test_no_BaseSystem && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8001f22:	4b28      	ldr	r3, [pc, #160]	@ (8001fc4 <main+0x1b4>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	f083 0301 	eor.w	r3, r3, #1
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00a      	beq.n	8001f46 <main+0x136>
 8001f30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f34:	4824      	ldr	r0, [pc, #144]	@ (8001fc8 <main+0x1b8>)
 8001f36:	f004 f9bf 	bl	80062b8 <HAL_GPIO_ReadPin>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d102      	bne.n	8001f46 <main+0x136>
		{
			Test_no_BaseSystem = true;
 8001f40:	4a20      	ldr	r2, [pc, #128]	@ (8001fc4 <main+0x1b4>)
 8001f42:	2301      	movs	r3, #1
 8001f44:	7013      	strb	r3, [r2, #0]
		}

		base_status = REG16(REG_BASE_STATUS);
 8001f46:	4b1d      	ldr	r3, [pc, #116]	@ (8001fbc <main+0x1ac>)
 8001f48:	885b      	ldrh	r3, [r3, #2]
 8001f4a:	4a20      	ldr	r2, [pc, #128]	@ (8001fcc <main+0x1bc>)
 8001f4c:	8013      	strh	r3, [r2, #0]
		if (EmergencyState == 0)
 8001f4e:	4b20      	ldr	r3, [pc, #128]	@ (8001fd0 <main+0x1c0>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d17e      	bne.n	8002054 <main+0x244>
		{
			switch (base_status)
 8001f56:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <main+0x1bc>)
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d00e      	beq.n	8001f7c <main+0x16c>
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	dc38      	bgt.n	8001fd4 <main+0x1c4>
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d002      	beq.n	8001f6c <main+0x15c>
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d004      	beq.n	8001f74 <main+0x164>
			case 4: // Run Point Mode
				REG16(REG_MOTION_STATUS) = 4;
				break;

			default:
				break;
 8001f6a:	e033      	b.n	8001fd4 <main+0x1c4>
				REG16(REG_MOTION_STATUS) = 1;
 8001f6c:	4a13      	ldr	r2, [pc, #76]	@ (8001fbc <main+0x1ac>)
 8001f6e:	2301      	movs	r3, #1
 8001f70:	8413      	strh	r3, [r2, #32]
				break;
 8001f72:	e030      	b.n	8001fd6 <main+0x1c6>
				REG16(REG_MOTION_STATUS) = 2;
 8001f74:	4a11      	ldr	r2, [pc, #68]	@ (8001fbc <main+0x1ac>)
 8001f76:	2302      	movs	r3, #2
 8001f78:	8413      	strh	r3, [r2, #32]
				break;
 8001f7a:	e02c      	b.n	8001fd6 <main+0x1c6>
				REG16(REG_MOTION_STATUS) = 4;
 8001f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001fbc <main+0x1ac>)
 8001f7e:	2304      	movs	r3, #4
 8001f80:	8413      	strh	r3, [r2, #32]
				break;
 8001f82:	e028      	b.n	8001fd6 <main+0x1c6>
 8001f84:	200002b0 	.word	0x200002b0
 8001f88:	2000037c 	.word	0x2000037c
 8001f8c:	20000448 	.word	0x20000448
 8001f90:	20000514 	.word	0x20000514
 8001f94:	200005e0 	.word	0x200005e0
 8001f98:	200006ac 	.word	0x200006ac
 8001f9c:	20000778 	.word	0x20000778
 8001fa0:	20000bd4 	.word	0x20000bd4
 8001fa4:	3dcccccd 	.word	0x3dcccccd
 8001fa8:	3727c5ac 	.word	0x3727c5ac
 8001fac:	20000c1c 	.word	0x20000c1c
 8001fb0:	20000c50 	.word	0x20000c50
 8001fb4:	20000910 	.word	0x20000910
 8001fb8:	20000844 	.word	0x20000844
 8001fbc:	20001128 	.word	0x20001128
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	20000c3b 	.word	0x20000c3b
 8001fc8:	48000800 	.word	0x48000800
 8001fcc:	200012b8 	.word	0x200012b8
 8001fd0:	20000bcd 	.word	0x20000bcd
				break;
 8001fd4:	bf00      	nop
			}

			if (TargetR_BaseSystem != Last_TargetR_BaseSystem)
 8001fd6:	4b87      	ldr	r3, [pc, #540]	@ (80021f4 <main+0x3e4>)
 8001fd8:	ed93 7a00 	vldr	s14, [r3]
 8001fdc:	4b86      	ldr	r3, [pc, #536]	@ (80021f8 <main+0x3e8>)
 8001fde:	edd3 7a00 	vldr	s15, [r3]
 8001fe2:	eeb4 7a67 	vcmp.f32	s14, s15
 8001fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fea:	d007      	beq.n	8001ffc <main+0x1ec>
			{
				TargetR = TargetR_BaseSystem;
 8001fec:	4b81      	ldr	r3, [pc, #516]	@ (80021f4 <main+0x3e4>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b82      	ldr	r3, [pc, #520]	@ (80021fc <main+0x3ec>)
 8001ff2:	601a      	str	r2, [r3, #0]
				Last_TargetR_BaseSystem = TargetR_BaseSystem;
 8001ff4:	4b7f      	ldr	r3, [pc, #508]	@ (80021f4 <main+0x3e4>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b7f      	ldr	r3, [pc, #508]	@ (80021f8 <main+0x3e8>)
 8001ffa:	601a      	str	r2, [r3, #0]
			}
			if (TargetP_BaseSystem != Last_Pen_BaseSystem)
 8001ffc:	4b80      	ldr	r3, [pc, #512]	@ (8002200 <main+0x3f0>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002008:	4b7e      	ldr	r3, [pc, #504]	@ (8002204 <main+0x3f4>)
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002016:	d00e      	beq.n	8002036 <main+0x226>
			{
				TargetP = TargetP_BaseSystem;
 8002018:	4b7a      	ldr	r3, [pc, #488]	@ (8002204 <main+0x3f4>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b7a      	ldr	r3, [pc, #488]	@ (8002208 <main+0x3f8>)
 800201e:	601a      	str	r2, [r3, #0]
				Last_Pen_BaseSystem = TargetP_BaseSystem;
 8002020:	4b78      	ldr	r3, [pc, #480]	@ (8002204 <main+0x3f4>)
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800202a:	edc7 7a01 	vstr	s15, [r7, #4]
 800202e:	793b      	ldrb	r3, [r7, #4]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	4a73      	ldr	r2, [pc, #460]	@ (8002200 <main+0x3f0>)
 8002034:	7013      	strb	r3, [r2, #0]
			}
			if (Pen_BaseSystem != Last_Pen_BaseSystem)
 8002036:	4b75      	ldr	r3, [pc, #468]	@ (800220c <main+0x3fc>)
 8002038:	781a      	ldrb	r2, [r3, #0]
 800203a:	4b71      	ldr	r3, [pc, #452]	@ (8002200 <main+0x3f0>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d008      	beq.n	8002054 <main+0x244>
			{
				Set_Servo(Pen_BaseSystem);
 8002042:	4b72      	ldr	r3, [pc, #456]	@ (800220c <main+0x3fc>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f002 fbe2 	bl	8004810 <Set_Servo>
				Last_Pen_BaseSystem = Pen_BaseSystem;
 800204c:	4b6f      	ldr	r3, [pc, #444]	@ (800220c <main+0x3fc>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4a6b      	ldr	r2, [pc, #428]	@ (8002200 <main+0x3f0>)
 8002052:	7013      	strb	r3, [r2, #0]
			}
		}
		//		RD_Velo_Error = R_Velo_Error * (M_PI / 180.0f);
		Modbus_Protocal_Worker();
 8002054:	f7ff f964 	bl	8001320 <Modbus_Protocal_Worker>
		//////////////////////////////////////////////////////////////

		//////////////////////// <<ENCODER>> /////////////////////////
		revolute_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8002058:	4b6d      	ldr	r3, [pc, #436]	@ (8002210 <main+0x400>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800205e:	4b6d      	ldr	r3, [pc, #436]	@ (8002214 <main+0x404>)
 8002060:	601a      	str	r2, [r3, #0]
		prismatic_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8002062:	4b6d      	ldr	r3, [pc, #436]	@ (8002218 <main+0x408>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002068:	4b6c      	ldr	r3, [pc, #432]	@ (800221c <main+0x40c>)
 800206a:	601a      	str	r2, [r3, #0]
		// Call every 0.001 s
		static uint64_t timestamp = 0;
		int64_t currentTime = micros();
 800206c:	f002 f8a0 	bl	80041b0 <micros>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
		if (currentTime > timestamp)
 8002078:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800207c:	4b68      	ldr	r3, [pc, #416]	@ (8002220 <main+0x410>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	4282      	cmp	r2, r0
 8002084:	418b      	sbcs	r3, r1
 8002086:	d210      	bcs.n	80020aa <main+0x29a>
		{
			timestamp = currentTime + 1000; // us
 8002088:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800208c:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8002090:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002092:	f143 0300 	adc.w	r3, r3, #0
 8002096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002098:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800209c:	4b60      	ldr	r3, [pc, #384]	@ (8002220 <main+0x410>)
 800209e:	e9c3 0100 	strd	r0, r1, [r3]
			Revolute_PosVel_Update();
 80020a2:	f002 f969 	bl	8004378 <Revolute_PosVel_Update>
			Prismatic_PosVel_Update();
 80020a6:	f002 fa71 	bl	800458c <Prismatic_PosVel_Update>
		}
		// Call every 0.01 s
		static uint64_t timestamp1 = 0;
		int64_t currentTime1 = micros();
 80020aa:	f002 f881 	bl	80041b0 <micros>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
		if (currentTime1 > timestamp1)
 80020b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80020ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002224 <main+0x414>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	4282      	cmp	r2, r0
 80020c2:	418b      	sbcs	r3, r1
 80020c4:	d20d      	bcs.n	80020e2 <main+0x2d2>
		{
			timestamp1 = currentTime1 + 10000; // us
 80020c6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80020ca:	f242 7110 	movw	r1, #10000	@ 0x2710
 80020ce:	1851      	adds	r1, r2, r1
 80020d0:	6439      	str	r1, [r7, #64]	@ 0x40
 80020d2:	f143 0300 	adc.w	r3, r3, #0
 80020d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80020d8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80020dc:	4b51      	ldr	r3, [pc, #324]	@ (8002224 <main+0x414>)
 80020de:	e9c3 0100 	strd	r0, r1, [r3]
		}
		// Call every 0.1 s
		static uint64_t timestamp2 = 0;
		int64_t currentTime2 = micros();
 80020e2:	f002 f865 	bl	80041b0 <micros>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		if (currentTime2 > timestamp2)
 80020ee:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80020f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002228 <main+0x418>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	4282      	cmp	r2, r0
 80020fa:	418b      	sbcs	r3, r1
 80020fc:	d20c      	bcs.n	8002118 <main+0x308>
		{
			timestamp2 = currentTime2 + 100000; // us
 80020fe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002102:	494a      	ldr	r1, [pc, #296]	@ (800222c <main+0x41c>)
 8002104:	1851      	adds	r1, r2, r1
 8002106:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002108:	f143 0300 	adc.w	r3, r3, #0
 800210c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800210e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002112:	4b45      	ldr	r3, [pc, #276]	@ (8002228 <main+0x418>)
 8002114:	e9c3 0100 	strd	r0, r1, [r3]
		}
		End_x = Prismatic_QEIdata.mmPosition * cosf(Revolute_QEIdata.RadPosition * -1);
 8002118:	4b45      	ldr	r3, [pc, #276]	@ (8002230 <main+0x420>)
 800211a:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
 800211e:	4b45      	ldr	r3, [pc, #276]	@ (8002234 <main+0x424>)
 8002120:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002124:	eef1 7a67 	vneg.f32	s15, s15
 8002128:	eeb0 0a67 	vmov.f32	s0, s15
 800212c:	f009 fe22 	bl	800bd74 <cosf>
 8002130:	eef0 7a40 	vmov.f32	s15, s0
 8002134:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002138:	4b3f      	ldr	r3, [pc, #252]	@ (8002238 <main+0x428>)
 800213a:	edc3 7a00 	vstr	s15, [r3]
		End_y = Prismatic_QEIdata.mmPosition * sinf(Revolute_QEIdata.RadPosition);
 800213e:	4b3c      	ldr	r3, [pc, #240]	@ (8002230 <main+0x420>)
 8002140:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
 8002144:	4b3b      	ldr	r3, [pc, #236]	@ (8002234 <main+0x424>)
 8002146:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800214a:	eeb0 0a67 	vmov.f32	s0, s15
 800214e:	f009 fe55 	bl	800bdfc <sinf>
 8002152:	eef0 7a40 	vmov.f32	s15, s0
 8002156:	ee68 7a27 	vmul.f32	s15, s16, s15
 800215a:	4b38      	ldr	r3, [pc, #224]	@ (800223c <main+0x42c>)
 800215c:	edc3 7a00 	vstr	s15, [r3]
		//////////////////////////////////////////////////////////////

		//////////////////////// <<MODE>> ///////////////////////////
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1)
 8002160:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002164:	4836      	ldr	r0, [pc, #216]	@ (8002240 <main+0x430>)
 8002166:	f004 f8a7 	bl	80062b8 <HAL_GPIO_ReadPin>
 800216a:	4603      	mov	r3, r0
 800216c:	2b01      	cmp	r3, #1
 800216e:	d10e      	bne.n	800218e <main+0x37e>
		{
			Mode = 0;
 8002170:	4a34      	ldr	r2, [pc, #208]	@ (8002244 <main+0x434>)
 8002172:	2300      	movs	r3, #0
 8002174:	7013      	strb	r3, [r2, #0]
			EmergencyState = 1;
 8002176:	4a34      	ldr	r2, [pc, #208]	@ (8002248 <main+0x438>)
 8002178:	2301      	movs	r3, #1
 800217a:	7013      	strb	r3, [r2, #0]
			Set_Servo(0);
 800217c:	2000      	movs	r0, #0
 800217e:	f002 fb47 	bl	8004810 <Set_Servo>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8002182:	2201      	movs	r2, #1
 8002184:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002188:	482d      	ldr	r0, [pc, #180]	@ (8002240 <main+0x430>)
 800218a:	f004 f8ad 	bl	80062e8 <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1)
 800218e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002192:	482e      	ldr	r0, [pc, #184]	@ (800224c <main+0x43c>)
 8002194:	f004 f890 	bl	80062b8 <HAL_GPIO_ReadPin>
 8002198:	4603      	mov	r3, r0
 800219a:	2b01      	cmp	r3, #1
 800219c:	d108      	bne.n	80021b0 <main+0x3a0>
		{
			EmergencyState = 0;
 800219e:	4a2a      	ldr	r2, [pc, #168]	@ (8002248 <main+0x438>)
 80021a0:	2300      	movs	r3, #0
 80021a2:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021aa:	4825      	ldr	r0, [pc, #148]	@ (8002240 <main+0x430>)
 80021ac:	f004 f89c 	bl	80062e8 <HAL_GPIO_WritePin>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1)
 80021b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021b4:	4825      	ldr	r0, [pc, #148]	@ (800224c <main+0x43c>)
 80021b6:	f004 f87f 	bl	80062b8 <HAL_GPIO_ReadPin>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d102      	bne.n	80021c6 <main+0x3b6>
		{
			Pen_Status = 0;
 80021c0:	4a23      	ldr	r2, [pc, #140]	@ (8002250 <main+0x440>)
 80021c2:	2300      	movs	r3, #0
 80021c4:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 80021c6:	2104      	movs	r1, #4
 80021c8:	4820      	ldr	r0, [pc, #128]	@ (800224c <main+0x43c>)
 80021ca:	f004 f875 	bl	80062b8 <HAL_GPIO_ReadPin>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d102      	bne.n	80021da <main+0x3ca>
		{
			Pen_Status = 1;
 80021d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002250 <main+0x440>)
 80021d6:	2301      	movs	r3, #1
 80021d8:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1)
 80021da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e2:	f004 f869 	bl	80062b8 <HAL_GPIO_ReadPin>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d135      	bne.n	8002258 <main+0x448>
		{
			z_temp = 1;
 80021ec:	4a19      	ldr	r2, [pc, #100]	@ (8002254 <main+0x444>)
 80021ee:	2301      	movs	r3, #1
 80021f0:	7013      	strb	r3, [r2, #0]
 80021f2:	e03d      	b.n	8002270 <main+0x460>
 80021f4:	20000c3c 	.word	0x20000c3c
 80021f8:	20000c48 	.word	0x20000c48
 80021fc:	20000b94 	.word	0x20000b94
 8002200:	20000c4c 	.word	0x20000c4c
 8002204:	20000c40 	.word	0x20000c40
 8002208:	20000b98 	.word	0x20000b98
 800220c:	20000c44 	.word	0x20000c44
 8002210:	20000514 	.word	0x20000514
 8002214:	20000af0 	.word	0x20000af0
 8002218:	20000448 	.word	0x20000448
 800221c:	20000af4 	.word	0x20000af4
 8002220:	200013b8 	.word	0x200013b8
 8002224:	200013c0 	.word	0x200013c0
 8002228:	200013c8 	.word	0x200013c8
 800222c:	000186a0 	.word	0x000186a0
 8002230:	20000b38 	.word	0x20000b38
 8002234:	20000af8 	.word	0x20000af8
 8002238:	20000b84 	.word	0x20000b84
 800223c:	20000b88 	.word	0x20000b88
 8002240:	48000800 	.word	0x48000800
 8002244:	20000bcc 	.word	0x20000bcc
 8002248:	20000bcd 	.word	0x20000bcd
 800224c:	48000400 	.word	0x48000400
 8002250:	20000bcf 	.word	0x20000bcf
 8002254:	20000b79 	.word	0x20000b79
		}
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)
 8002258:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800225c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002260:	f004 f82a 	bl	80062b8 <HAL_GPIO_ReadPin>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <main+0x460>
		{
			z_temp = 0;
 800226a:	4ab3      	ldr	r2, [pc, #716]	@ (8002538 <main+0x728>)
 800226c:	2300      	movs	r3, #0
 800226e:	7013      	strb	r3, [r2, #0]
		}

		//////////////////////////////////////////////////////////////
		if (EmergencyState == 1)
 8002270:	4bb2      	ldr	r3, [pc, #712]	@ (800253c <main+0x72c>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d102      	bne.n	800227e <main+0x46e>
		{
			REG16(REG_MOTION_STATUS) = 0;
 8002278:	4ab1      	ldr	r2, [pc, #708]	@ (8002540 <main+0x730>)
 800227a:	2300      	movs	r3, #0
 800227c:	8413      	strh	r3, [r2, #32]
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<GOTO>> ////////////////////////////
		if ((Mode == 2 && (base_status == 2 || Test_no_BaseSystem)) || base_status == 8)
 800227e:	4bb1      	ldr	r3, [pc, #708]	@ (8002544 <main+0x734>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d107      	bne.n	8002296 <main+0x486>
 8002286:	4bb0      	ldr	r3, [pc, #704]	@ (8002548 <main+0x738>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d007      	beq.n	800229e <main+0x48e>
 800228e:	4baf      	ldr	r3, [pc, #700]	@ (800254c <main+0x73c>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d103      	bne.n	800229e <main+0x48e>
 8002296:	4bac      	ldr	r3, [pc, #688]	@ (8002548 <main+0x738>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	2b08      	cmp	r3, #8
 800229c:	d142      	bne.n	8002324 <main+0x514>
		{
			REG16(REG_MOTION_STATUS) = 8;
 800229e:	4aa8      	ldr	r2, [pc, #672]	@ (8002540 <main+0x730>)
 80022a0:	2308      	movs	r3, #8
 80022a2:	8413      	strh	r3, [r2, #32]

			if (TenPointMode)
 80022a4:	4baa      	ldr	r3, [pc, #680]	@ (8002550 <main+0x740>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d012      	beq.n	80022d2 <main+0x4c2>
			{
				TargetR = TenPointArray[(counter * 2) + 1];
 80022ac:	4ba9      	ldr	r3, [pc, #676]	@ (8002554 <main+0x744>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	3301      	adds	r3, #1
 80022b4:	4aa8      	ldr	r2, [pc, #672]	@ (8002558 <main+0x748>)
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4ba7      	ldr	r3, [pc, #668]	@ (800255c <main+0x74c>)
 80022be:	601a      	str	r2, [r3, #0]
				TargetP = TenPointArray[counter * 2];
 80022c0:	4ba4      	ldr	r3, [pc, #656]	@ (8002554 <main+0x744>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4aa4      	ldr	r2, [pc, #656]	@ (8002558 <main+0x748>)
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4ba4      	ldr	r3, [pc, #656]	@ (8002560 <main+0x750>)
 80022d0:	601a      	str	r2, [r3, #0]
			}

			if (CascadeControl_Step())
 80022d2:	f002 fda1 	bl	8004e18 <CascadeControl_Step>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d023      	beq.n	8002324 <main+0x514>
			{
				if (PenDelay())
 80022dc:	f001 fe10 	bl	8003f00 <PenDelay>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01e      	beq.n	8002324 <main+0x514>
				{
					if (TenPointMode)
 80022e6:	4b9a      	ldr	r3, [pc, #616]	@ (8002550 <main+0x740>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d013      	beq.n	8002316 <main+0x506>
					{
						if (counter == 9)
 80022ee:	4b99      	ldr	r3, [pc, #612]	@ (8002554 <main+0x744>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b09      	cmp	r3, #9
 80022f4:	d109      	bne.n	800230a <main+0x4fa>
						{
							TenPointMode = false;
 80022f6:	4a96      	ldr	r2, [pc, #600]	@ (8002550 <main+0x740>)
 80022f8:	2300      	movs	r3, #0
 80022fa:	7013      	strb	r3, [r2, #0]
							counter = 0;
 80022fc:	4a95      	ldr	r2, [pc, #596]	@ (8002554 <main+0x744>)
 80022fe:	2300      	movs	r3, #0
 8002300:	7013      	strb	r3, [r2, #0]
							Mode = 1;
 8002302:	4a90      	ldr	r2, [pc, #576]	@ (8002544 <main+0x734>)
 8002304:	2301      	movs	r3, #1
 8002306:	7013      	strb	r3, [r2, #0]
 8002308:	e005      	b.n	8002316 <main+0x506>
						}
						else
						{
							counter++;
 800230a:	4b92      	ldr	r3, [pc, #584]	@ (8002554 <main+0x744>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	4a90      	ldr	r2, [pc, #576]	@ (8002554 <main+0x744>)
 8002314:	7013      	strb	r3, [r2, #0]
						}
					}
					if (base_status == 8)
 8002316:	4b8c      	ldr	r3, [pc, #560]	@ (8002548 <main+0x738>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	2b08      	cmp	r3, #8
 800231c:	d102      	bne.n	8002324 <main+0x514>
					{
						REG16(REG_MOTION_STATUS) = 0;
 800231e:	4a88      	ldr	r2, [pc, #544]	@ (8002540 <main+0x730>)
 8002320:	2300      	movs	r3, #0
 8002322:	8413      	strh	r3, [r2, #32]
			}
		}
		//////////////////////////////////////////////////////////////

		//////////////////////// <<CALIBRATING>> /////////////////////
		if ((Mode == 3 && (base_status == 2 || Test_no_BaseSystem)) || base_status == 1)
 8002324:	4b87      	ldr	r3, [pc, #540]	@ (8002544 <main+0x734>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d107      	bne.n	800233c <main+0x52c>
 800232c:	4b86      	ldr	r3, [pc, #536]	@ (8002548 <main+0x738>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d008      	beq.n	8002346 <main+0x536>
 8002334:	4b85      	ldr	r3, [pc, #532]	@ (800254c <main+0x73c>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d104      	bne.n	8002346 <main+0x536>
 800233c:	4b82      	ldr	r3, [pc, #520]	@ (8002548 <main+0x738>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	2b01      	cmp	r3, #1
 8002342:	f040 827e 	bne.w	8002842 <main+0xa32>
		{
			switch (calibState)
 8002346:	4b87      	ldr	r3, [pc, #540]	@ (8002564 <main+0x754>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b0c      	cmp	r3, #12
 800234c:	f200 8279 	bhi.w	8002842 <main+0xa32>
 8002350:	a201      	add	r2, pc, #4	@ (adr r2, 8002358 <main+0x548>)
 8002352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002356:	bf00      	nop
 8002358:	0800238d 	.word	0x0800238d
 800235c:	080023c3 	.word	0x080023c3
 8002360:	08002409 	.word	0x08002409
 8002364:	08002453 	.word	0x08002453
 8002368:	0800249b 	.word	0x0800249b
 800236c:	080024e9 	.word	0x080024e9
 8002370:	08002591 	.word	0x08002591
 8002374:	080025d1 	.word	0x080025d1
 8002378:	0800262f 	.word	0x0800262f
 800237c:	0800269b 	.word	0x0800269b
 8002380:	08002707 	.word	0x08002707
 8002384:	08002777 	.word	0x08002777
 8002388:	080027b9 	.word	0x080027b9
			{
			case CALIB_IDLE:
				Set_Motor(0, 0);
 800238c:	ed9f 0a76 	vldr	s0, [pc, #472]	@ 8002568 <main+0x758>
 8002390:	2000      	movs	r0, #0
 8002392:	f002 f9bf 	bl	8004714 <Set_Motor>
				Set_Motor(1, 0);
 8002396:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8002568 <main+0x758>
 800239a:	2001      	movs	r0, #1
 800239c:	f002 f9ba 	bl	8004714 <Set_Motor>
				P_Limit = 0;
 80023a0:	4a72      	ldr	r2, [pc, #456]	@ (800256c <main+0x75c>)
 80023a2:	2300      	movs	r3, #0
 80023a4:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 80023a6:	4a72      	ldr	r2, [pc, #456]	@ (8002570 <main+0x760>)
 80023a8:	2300      	movs	r3, #0
 80023aa:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_WAIT_REMOTE;
 80023ac:	4a6d      	ldr	r2, [pc, #436]	@ (8002564 <main+0x754>)
 80023ae:	2301      	movs	r3, #1
 80023b0:	7013      	strb	r3, [r2, #0]
				calib_timer = micros();
 80023b2:	f001 fefd 	bl	80041b0 <micros>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	496e      	ldr	r1, [pc, #440]	@ (8002574 <main+0x764>)
 80023bc:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 80023c0:	e23f      	b.n	8002842 <main+0xa32>

			case CALIB_WAIT_REMOTE:
				if (Receiver[0] > 80)
 80023c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002578 <main+0x768>)
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800257c <main+0x76c>
 80023cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	dd06      	ble.n	80023e4 <main+0x5d4>
				{
					Cal_Side = 1;
 80023d6:	4a6a      	ldr	r2, [pc, #424]	@ (8002580 <main+0x770>)
 80023d8:	2301      	movs	r3, #1
 80023da:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 80023dc:	4a61      	ldr	r2, [pc, #388]	@ (8002564 <main+0x754>)
 80023de:	2302      	movs	r3, #2
 80023e0:	7013      	strb	r3, [r2, #0]
				else if (Receiver[0] < -80)
				{
					Cal_Side = 2;
					calibState = CALIB_MOVE_P_TO_LIMIT;
				}
				break;
 80023e2:	e22e      	b.n	8002842 <main+0xa32>
				else if (Receiver[0] < -80)
 80023e4:	4b64      	ldr	r3, [pc, #400]	@ (8002578 <main+0x768>)
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8002584 <main+0x774>
 80023ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f6:	d400      	bmi.n	80023fa <main+0x5ea>
				break;
 80023f8:	e223      	b.n	8002842 <main+0xa32>
					Cal_Side = 2;
 80023fa:	4a61      	ldr	r2, [pc, #388]	@ (8002580 <main+0x770>)
 80023fc:	2302      	movs	r3, #2
 80023fe:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_P_TO_LIMIT;
 8002400:	4a58      	ldr	r2, [pc, #352]	@ (8002564 <main+0x754>)
 8002402:	2302      	movs	r3, #2
 8002404:	7013      	strb	r3, [r2, #0]
				break;
 8002406:	e21c      	b.n	8002842 <main+0xa32>

			case CALIB_MOVE_P_TO_LIMIT:
				Set_Motor(1, -15);
 8002408:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 800240c:	2001      	movs	r0, #1
 800240e:	f002 f981 	bl	8004714 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0)
 8002412:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002416:	485c      	ldr	r0, [pc, #368]	@ (8002588 <main+0x778>)
 8002418:	f003 ff4e 	bl	80062b8 <HAL_GPIO_ReadPin>
 800241c:	4603      	mov	r3, r0
 800241e:	2b01      	cmp	r3, #1
 8002420:	d004      	beq.n	800242c <main+0x61c>
 8002422:	4b52      	ldr	r3, [pc, #328]	@ (800256c <main+0x75c>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 81dd 	beq.w	80027e6 <main+0x9d6>
				{
					Set_Motor(1, 0);
 800242c:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8002568 <main+0x758>
 8002430:	2001      	movs	r0, #1
 8002432:	f002 f96f 	bl	8004714 <Set_Motor>
					calib_timer = micros();
 8002436:	f001 febb 	bl	80041b0 <micros>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	494d      	ldr	r1, [pc, #308]	@ (8002574 <main+0x764>)
 8002440:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002444:	4a49      	ldr	r2, [pc, #292]	@ (800256c <main+0x75c>)
 8002446:	2300      	movs	r3, #0
 8002448:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_P;
 800244a:	4a46      	ldr	r2, [pc, #280]	@ (8002564 <main+0x754>)
 800244c:	2303      	movs	r3, #3
 800244e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002450:	e1c9      	b.n	80027e6 <main+0x9d6>

			case CALIB_WAIT_BACKOFF_P:
				Set_Motor(1, 0);
 8002452:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 8002568 <main+0x758>
 8002456:	2001      	movs	r0, #1
 8002458:	f002 f95c 	bl	8004714 <Set_Motor>

				if (micros() - calib_timer > 100000)
 800245c:	f001 fea8 	bl	80041b0 <micros>
 8002460:	4b44      	ldr	r3, [pc, #272]	@ (8002574 <main+0x764>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	1a84      	subs	r4, r0, r2
 8002468:	eb61 0503 	sbc.w	r5, r1, r3
 800246c:	4b47      	ldr	r3, [pc, #284]	@ (800258c <main+0x77c>)
 800246e:	429c      	cmp	r4, r3
 8002470:	f175 0300 	sbcs.w	r3, r5, #0
 8002474:	d311      	bcc.n	800249a <main+0x68a>
				{
					Set_Motor(1, 15);
 8002476:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800247a:	2001      	movs	r0, #1
 800247c:	f002 f94a 	bl	8004714 <Set_Motor>
					calib_timer = micros();
 8002480:	f001 fe96 	bl	80041b0 <micros>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	493a      	ldr	r1, [pc, #232]	@ (8002574 <main+0x764>)
 800248a:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 800248e:	4a37      	ldr	r2, [pc, #220]	@ (800256c <main+0x75c>)
 8002490:	2300      	movs	r3, #0
 8002492:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_P;
 8002494:	4a33      	ldr	r2, [pc, #204]	@ (8002564 <main+0x754>)
 8002496:	2304      	movs	r3, #4
 8002498:	7013      	strb	r3, [r2, #0]
				}

			case CALIB_BACKOFF_P:
				Set_Motor(1, 15);
 800249a:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800249e:	2001      	movs	r0, #1
 80024a0:	f002 f938 	bl	8004714 <Set_Motor>

				if (micros() - calib_timer > 100000)
 80024a4:	f001 fe84 	bl	80041b0 <micros>
 80024a8:	4b32      	ldr	r3, [pc, #200]	@ (8002574 <main+0x764>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	ebb0 0802 	subs.w	r8, r0, r2
 80024b2:	eb61 0903 	sbc.w	r9, r1, r3
 80024b6:	4b35      	ldr	r3, [pc, #212]	@ (800258c <main+0x77c>)
 80024b8:	4598      	cmp	r8, r3
 80024ba:	f179 0300 	sbcs.w	r3, r9, #0
 80024be:	f0c0 8194 	bcc.w	80027ea <main+0x9da>
				{
					Set_Motor(1, 0);
 80024c2:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8002568 <main+0x758>
 80024c6:	2001      	movs	r0, #1
 80024c8:	f002 f924 	bl	8004714 <Set_Motor>
					calib_timer = micros();
 80024cc:	f001 fe70 	bl	80041b0 <micros>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4927      	ldr	r1, [pc, #156]	@ (8002574 <main+0x764>)
 80024d6:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 80024da:	4a24      	ldr	r2, [pc, #144]	@ (800256c <main+0x75c>)
 80024dc:	2300      	movs	r3, #0
 80024de:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_P;
 80024e0:	4a20      	ldr	r2, [pc, #128]	@ (8002564 <main+0x754>)
 80024e2:	2305      	movs	r3, #5
 80024e4:	7013      	strb	r3, [r2, #0]
				}
				break;
 80024e6:	e180      	b.n	80027ea <main+0x9da>

			case CALIB_WAIT_RETOUCH_P:
				Set_Motor(1, 0);
 80024e8:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8002568 <main+0x758>
 80024ec:	2001      	movs	r0, #1
 80024ee:	f002 f911 	bl	8004714 <Set_Motor>

				if (micros() - calib_timer > 100000)
 80024f2:	f001 fe5d 	bl	80041b0 <micros>
 80024f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002574 <main+0x764>)
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	ebb0 0a02 	subs.w	sl, r0, r2
 8002500:	eb61 0b03 	sbc.w	fp, r1, r3
 8002504:	4b21      	ldr	r3, [pc, #132]	@ (800258c <main+0x77c>)
 8002506:	459a      	cmp	sl, r3
 8002508:	f17b 0300 	sbcs.w	r3, fp, #0
 800250c:	f0c0 816f 	bcc.w	80027ee <main+0x9de>
				{
					Set_Motor(1, -5);
 8002510:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8002514:	2001      	movs	r0, #1
 8002516:	f002 f8fd 	bl	8004714 <Set_Motor>
					calib_timer = micros();
 800251a:	f001 fe49 	bl	80041b0 <micros>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4914      	ldr	r1, [pc, #80]	@ (8002574 <main+0x764>)
 8002524:	e9c1 2300 	strd	r2, r3, [r1]
					P_Limit = 0;
 8002528:	4a10      	ldr	r2, [pc, #64]	@ (800256c <main+0x75c>)
 800252a:	2300      	movs	r3, #0
 800252c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_P;
 800252e:	4a0d      	ldr	r2, [pc, #52]	@ (8002564 <main+0x754>)
 8002530:	2306      	movs	r3, #6
 8002532:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002534:	e15b      	b.n	80027ee <main+0x9de>
 8002536:	bf00      	nop
 8002538:	20000b79 	.word	0x20000b79
 800253c:	20000bcd 	.word	0x20000bcd
 8002540:	20001128 	.word	0x20001128
 8002544:	20000bcc 	.word	0x20000bcc
 8002548:	200012b8 	.word	0x200012b8
 800254c:	20000c3b 	.word	0x20000c3b
 8002550:	20000c3a 	.word	0x20000c3a
 8002554:	20000c39 	.word	0x20000c39
 8002558:	200012bc 	.word	0x200012bc
 800255c:	20000b94 	.word	0x20000b94
 8002560:	20000b98 	.word	0x20000b98
 8002564:	20000c1c 	.word	0x20000c1c
 8002568:	00000000 	.word	0x00000000
 800256c:	20000bd1 	.word	0x20000bd1
 8002570:	20000bd2 	.word	0x20000bd2
 8002574:	20000c20 	.word	0x20000c20
 8002578:	20000ab0 	.word	0x20000ab0
 800257c:	42a00000 	.word	0x42a00000
 8002580:	20000c28 	.word	0x20000c28
 8002584:	c2a00000 	.word	0xc2a00000
 8002588:	48000400 	.word	0x48000400
 800258c:	000186a1 	.word	0x000186a1

			case CALIB_RETOUCH_P:
				Set_Motor(1, -5);
 8002590:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 8002594:	2001      	movs	r0, #1
 8002596:	f002 f8bd 	bl	8004714 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 || P_Limit > 0)
 800259a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800259e:	489b      	ldr	r0, [pc, #620]	@ (800280c <main+0x9fc>)
 80025a0:	f003 fe8a 	bl	80062b8 <HAL_GPIO_ReadPin>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d004      	beq.n	80025b4 <main+0x7a4>
 80025aa:	4b99      	ldr	r3, [pc, #612]	@ (8002810 <main+0xa00>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 811f 	beq.w	80027f2 <main+0x9e2>
				{
					Set_Motor(1, 0);
 80025b4:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8002814 <main+0xa04>
 80025b8:	2001      	movs	r0, #1
 80025ba:	f002 f8ab 	bl	8004714 <Set_Motor>
					Reset_P();
 80025be:	f002 f961 	bl	8004884 <Reset_P>
					P_Limit = 0;
 80025c2:	4a93      	ldr	r2, [pc, #588]	@ (8002810 <main+0xa00>)
 80025c4:	2300      	movs	r3, #0
 80025c6:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_MOVE_R_TO_LIMIT;
 80025c8:	4a93      	ldr	r2, [pc, #588]	@ (8002818 <main+0xa08>)
 80025ca:	2307      	movs	r3, #7
 80025cc:	7013      	strb	r3, [r2, #0]
				}
				break;
 80025ce:	e110      	b.n	80027f2 <main+0x9e2>

			case CALIB_MOVE_R_TO_LIMIT:
				if (Cal_Side == 1)
 80025d0:	4b92      	ldr	r3, [pc, #584]	@ (800281c <main+0xa0c>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <main+0x7d4>
					Set_Motor(0, -30);
 80025d8:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 80025dc:	2000      	movs	r0, #0
 80025de:	f002 f899 	bl	8004714 <Set_Motor>
 80025e2:	e004      	b.n	80025ee <main+0x7de>
				else
					Set_Motor(0, 30);
 80025e4:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 80025e8:	2000      	movs	r0, #0
 80025ea:	f002 f893 	bl	8004714 <Set_Motor>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0)
 80025ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025f2:	4886      	ldr	r0, [pc, #536]	@ (800280c <main+0x9fc>)
 80025f4:	f003 fe60 	bl	80062b8 <HAL_GPIO_ReadPin>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d004      	beq.n	8002608 <main+0x7f8>
 80025fe:	4b88      	ldr	r3, [pc, #544]	@ (8002820 <main+0xa10>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 80f7 	beq.w	80027f6 <main+0x9e6>
				{
					Set_Motor(0, 0);
 8002608:	ed9f 0a82 	vldr	s0, [pc, #520]	@ 8002814 <main+0xa04>
 800260c:	2000      	movs	r0, #0
 800260e:	f002 f881 	bl	8004714 <Set_Motor>
					calib_timer = micros();
 8002612:	f001 fdcd 	bl	80041b0 <micros>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4982      	ldr	r1, [pc, #520]	@ (8002824 <main+0xa14>)
 800261c:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002620:	4a7f      	ldr	r2, [pc, #508]	@ (8002820 <main+0xa10>)
 8002622:	2300      	movs	r3, #0
 8002624:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_BACKOFF_R;
 8002626:	4a7c      	ldr	r2, [pc, #496]	@ (8002818 <main+0xa08>)
 8002628:	2308      	movs	r3, #8
 800262a:	7013      	strb	r3, [r2, #0]
				}
				break;
 800262c:	e0e3      	b.n	80027f6 <main+0x9e6>

			case CALIB_WAIT_BACKOFF_R:
				Set_Motor(0, 0);
 800262e:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 8002814 <main+0xa04>
 8002632:	2000      	movs	r0, #0
 8002634:	f002 f86e 	bl	8004714 <Set_Motor>

				if (micros() - calib_timer > 100000)
 8002638:	f001 fdba 	bl	80041b0 <micros>
 800263c:	4b79      	ldr	r3, [pc, #484]	@ (8002824 <main+0xa14>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	1a86      	subs	r6, r0, r2
 8002644:	633e      	str	r6, [r7, #48]	@ 0x30
 8002646:	eb61 0303 	sbc.w	r3, r1, r3
 800264a:	637b      	str	r3, [r7, #52]	@ 0x34
 800264c:	4b76      	ldr	r3, [pc, #472]	@ (8002828 <main+0xa18>)
 800264e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002652:	4602      	mov	r2, r0
 8002654:	429a      	cmp	r2, r3
 8002656:	460b      	mov	r3, r1
 8002658:	f173 0300 	sbcs.w	r3, r3, #0
 800265c:	f0c0 80cd 	bcc.w	80027fa <main+0x9ea>
				{
					if (Cal_Side == 1)
 8002660:	4b6e      	ldr	r3, [pc, #440]	@ (800281c <main+0xa0c>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d105      	bne.n	8002674 <main+0x864>
						Set_Motor(0, 30);
 8002668:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800266c:	2000      	movs	r0, #0
 800266e:	f002 f851 	bl	8004714 <Set_Motor>
 8002672:	e004      	b.n	800267e <main+0x86e>
					else
						Set_Motor(0, -30);
 8002674:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8002678:	2000      	movs	r0, #0
 800267a:	f002 f84b 	bl	8004714 <Set_Motor>
					calib_timer = micros();
 800267e:	f001 fd97 	bl	80041b0 <micros>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4967      	ldr	r1, [pc, #412]	@ (8002824 <main+0xa14>)
 8002688:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 800268c:	4a64      	ldr	r2, [pc, #400]	@ (8002820 <main+0xa10>)
 800268e:	2300      	movs	r3, #0
 8002690:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_BACKOFF_R;
 8002692:	4a61      	ldr	r2, [pc, #388]	@ (8002818 <main+0xa08>)
 8002694:	2309      	movs	r3, #9
 8002696:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002698:	e0af      	b.n	80027fa <main+0x9ea>

			case CALIB_BACKOFF_R:
				if (Cal_Side == 1)
 800269a:	4b60      	ldr	r3, [pc, #384]	@ (800281c <main+0xa0c>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <main+0x89e>
					Set_Motor(0, 30);
 80026a2:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 80026a6:	2000      	movs	r0, #0
 80026a8:	f002 f834 	bl	8004714 <Set_Motor>
 80026ac:	e004      	b.n	80026b8 <main+0x8a8>
				else
					Set_Motor(0, -30);
 80026ae:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 80026b2:	2000      	movs	r0, #0
 80026b4:	f002 f82e 	bl	8004714 <Set_Motor>

				if (micros() - calib_timer > 200000)
 80026b8:	f001 fd7a 	bl	80041b0 <micros>
 80026bc:	4b59      	ldr	r3, [pc, #356]	@ (8002824 <main+0xa14>)
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	1a86      	subs	r6, r0, r2
 80026c4:	62be      	str	r6, [r7, #40]	@ 0x28
 80026c6:	eb61 0303 	sbc.w	r3, r1, r3
 80026ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026cc:	4b57      	ldr	r3, [pc, #348]	@ (800282c <main+0xa1c>)
 80026ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026d2:	4602      	mov	r2, r0
 80026d4:	429a      	cmp	r2, r3
 80026d6:	460b      	mov	r3, r1
 80026d8:	f173 0300 	sbcs.w	r3, r3, #0
 80026dc:	f0c0 808f 	bcc.w	80027fe <main+0x9ee>
				{
					Set_Motor(0, 0);
 80026e0:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8002814 <main+0xa04>
 80026e4:	2000      	movs	r0, #0
 80026e6:	f002 f815 	bl	8004714 <Set_Motor>
					calib_timer = micros();
 80026ea:	f001 fd61 	bl	80041b0 <micros>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	494c      	ldr	r1, [pc, #304]	@ (8002824 <main+0xa14>)
 80026f4:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 80026f8:	4a49      	ldr	r2, [pc, #292]	@ (8002820 <main+0xa10>)
 80026fa:	2300      	movs	r3, #0
 80026fc:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_WAIT_RETOUCH_R;
 80026fe:	4a46      	ldr	r2, [pc, #280]	@ (8002818 <main+0xa08>)
 8002700:	230a      	movs	r3, #10
 8002702:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002704:	e07b      	b.n	80027fe <main+0x9ee>

			case CALIB_WAIT_RETOUCH_R:
				Set_Motor(0, 0);
 8002706:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8002814 <main+0xa04>
 800270a:	2000      	movs	r0, #0
 800270c:	f002 f802 	bl	8004714 <Set_Motor>
				Z_index_R = 0;
 8002710:	4a47      	ldr	r2, [pc, #284]	@ (8002830 <main+0xa20>)
 8002712:	2300      	movs	r3, #0
 8002714:	7013      	strb	r3, [r2, #0]

				if (micros() - calib_timer > 100000)
 8002716:	f001 fd4b 	bl	80041b0 <micros>
 800271a:	4b42      	ldr	r3, [pc, #264]	@ (8002824 <main+0xa14>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	1a86      	subs	r6, r0, r2
 8002722:	623e      	str	r6, [r7, #32]
 8002724:	eb61 0303 	sbc.w	r3, r1, r3
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24
 800272a:	4b3f      	ldr	r3, [pc, #252]	@ (8002828 <main+0xa18>)
 800272c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002730:	4602      	mov	r2, r0
 8002732:	429a      	cmp	r2, r3
 8002734:	460b      	mov	r3, r1
 8002736:	f173 0300 	sbcs.w	r3, r3, #0
 800273a:	d362      	bcc.n	8002802 <main+0x9f2>
				{
					if (Cal_Side == 1)
 800273c:	4b37      	ldr	r3, [pc, #220]	@ (800281c <main+0xa0c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <main+0x940>
						Set_Motor(0, -25);
 8002744:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 8002748:	2000      	movs	r0, #0
 800274a:	f001 ffe3 	bl	8004714 <Set_Motor>
 800274e:	e004      	b.n	800275a <main+0x94a>
					else
						Set_Motor(0, 25);
 8002750:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002754:	2000      	movs	r0, #0
 8002756:	f001 ffdd 	bl	8004714 <Set_Motor>
					calib_timer = micros();
 800275a:	f001 fd29 	bl	80041b0 <micros>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4930      	ldr	r1, [pc, #192]	@ (8002824 <main+0xa14>)
 8002764:	e9c1 2300 	strd	r2, r3, [r1]
					R_Limit = 0;
 8002768:	4a2d      	ldr	r2, [pc, #180]	@ (8002820 <main+0xa10>)
 800276a:	2300      	movs	r3, #0
 800276c:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_RETOUCH_R;
 800276e:	4a2a      	ldr	r2, [pc, #168]	@ (8002818 <main+0xa08>)
 8002770:	230b      	movs	r3, #11
 8002772:	7013      	strb	r3, [r2, #0]
				}
				break;
 8002774:	e045      	b.n	8002802 <main+0x9f2>

			case CALIB_RETOUCH_R:
				if (Cal_Side == 1)
 8002776:	4b29      	ldr	r3, [pc, #164]	@ (800281c <main+0xa0c>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d105      	bne.n	800278a <main+0x97a>
					Set_Motor(0, -25);
 800277e:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 8002782:	2000      	movs	r0, #0
 8002784:	f001 ffc6 	bl	8004714 <Set_Motor>
 8002788:	e004      	b.n	8002794 <main+0x984>
				else
					Set_Motor(0, 25);
 800278a:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800278e:	2000      	movs	r0, #0
 8002790:	f001 ffc0 	bl	8004714 <Set_Motor>

				//				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1 || R_Limit > 0) {
				if (Z_index_R > 0)
 8002794:	4b26      	ldr	r3, [pc, #152]	@ (8002830 <main+0xa20>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d034      	beq.n	8002806 <main+0x9f6>
				{
					Set_Motor(0, 0);
 800279c:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8002814 <main+0xa04>
 80027a0:	2000      	movs	r0, #0
 80027a2:	f001 ffb7 	bl	8004714 <Set_Motor>
					Reset_R();
 80027a6:	f002 f85d 	bl	8004864 <Reset_R>
					R_Limit = 0;
 80027aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002820 <main+0xa10>)
 80027ac:	2300      	movs	r3, #0
 80027ae:	7013      	strb	r3, [r2, #0]
					calibState = CALIB_DONE;
 80027b0:	4a19      	ldr	r2, [pc, #100]	@ (8002818 <main+0xa08>)
 80027b2:	230c      	movs	r3, #12
 80027b4:	7013      	strb	r3, [r2, #0]
				}
				break;
 80027b6:	e026      	b.n	8002806 <main+0x9f6>

			case CALIB_DONE:
				Cal_Side = 0;
 80027b8:	4a18      	ldr	r2, [pc, #96]	@ (800281c <main+0xa0c>)
 80027ba:	2300      	movs	r3, #0
 80027bc:	7013      	strb	r3, [r2, #0]
				Mode = 0;
 80027be:	4a1d      	ldr	r2, [pc, #116]	@ (8002834 <main+0xa24>)
 80027c0:	2300      	movs	r3, #0
 80027c2:	7013      	strb	r3, [r2, #0]
				P_Limit = 0;
 80027c4:	4a12      	ldr	r2, [pc, #72]	@ (8002810 <main+0xa00>)
 80027c6:	2300      	movs	r3, #0
 80027c8:	7013      	strb	r3, [r2, #0]
				R_Limit = 0;
 80027ca:	4a15      	ldr	r2, [pc, #84]	@ (8002820 <main+0xa10>)
 80027cc:	2300      	movs	r3, #0
 80027ce:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 80027d0:	4a11      	ldr	r2, [pc, #68]	@ (8002818 <main+0xa08>)
 80027d2:	2300      	movs	r3, #0
 80027d4:	7013      	strb	r3, [r2, #0]
				//////////////////////////////////////////////////////////////
				if (base_status == 1)
 80027d6:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <main+0xa28>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d130      	bne.n	8002840 <main+0xa30>
				{
					REG16(REG_MOTION_STATUS) = 0;
 80027de:	4a17      	ldr	r2, [pc, #92]	@ (800283c <main+0xa2c>)
 80027e0:	2300      	movs	r3, #0
 80027e2:	8413      	strh	r3, [r2, #32]
				}
				//////////////////////////////////////////////////////////////
				break;
 80027e4:	e02c      	b.n	8002840 <main+0xa30>
				break;
 80027e6:	bf00      	nop
 80027e8:	e02b      	b.n	8002842 <main+0xa32>
				break;
 80027ea:	bf00      	nop
 80027ec:	e029      	b.n	8002842 <main+0xa32>
				break;
 80027ee:	bf00      	nop
 80027f0:	e027      	b.n	8002842 <main+0xa32>
				break;
 80027f2:	bf00      	nop
 80027f4:	e025      	b.n	8002842 <main+0xa32>
				break;
 80027f6:	bf00      	nop
 80027f8:	e023      	b.n	8002842 <main+0xa32>
				break;
 80027fa:	bf00      	nop
 80027fc:	e021      	b.n	8002842 <main+0xa32>
				break;
 80027fe:	bf00      	nop
 8002800:	e01f      	b.n	8002842 <main+0xa32>
				break;
 8002802:	bf00      	nop
 8002804:	e01d      	b.n	8002842 <main+0xa32>
				break;
 8002806:	bf00      	nop
 8002808:	e01b      	b.n	8002842 <main+0xa32>
 800280a:	bf00      	nop
 800280c:	48000400 	.word	0x48000400
 8002810:	20000bd1 	.word	0x20000bd1
 8002814:	00000000 	.word	0x00000000
 8002818:	20000c1c 	.word	0x20000c1c
 800281c:	20000c28 	.word	0x20000c28
 8002820:	20000bd2 	.word	0x20000bd2
 8002824:	20000c20 	.word	0x20000c20
 8002828:	000186a1 	.word	0x000186a1
 800282c:	00030d41 	.word	0x00030d41
 8002830:	20000b78 	.word	0x20000b78
 8002834:	20000bcc 	.word	0x20000bcc
 8002838:	200012b8 	.word	0x200012b8
 800283c:	20001128 	.word	0x20001128
				break;
 8002840:	bf00      	nop
			}
		}
		//////////////////////////////////////////////////////////////

		////////////////////////// <<BASESYSTEM>> ////////////////////////
		if (base_status == 2 || Test_no_BaseSystem)
 8002842:	4b65      	ldr	r3, [pc, #404]	@ (80029d8 <main+0xbc8>)
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d004      	beq.n	8002854 <main+0xa44>
 800284a:	4b64      	ldr	r3, [pc, #400]	@ (80029dc <main+0xbcc>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f43f ab67 	beq.w	8001f22 <main+0x112>
		{
			currentTimer = micros(); // Current time in microseconds
 8002854:	f001 fcac 	bl	80041b0 <micros>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4960      	ldr	r1, [pc, #384]	@ (80029e0 <main+0xbd0>)
 800285e:	e9c1 2300 	strd	r2, r3, [r1]

			//////////////////////// <<RECEIVER>> ////////////////////////
			Receiver_Period[0] = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8002862:	4b60      	ldr	r3, [pc, #384]	@ (80029e4 <main+0xbd4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002868:	461a      	mov	r2, r3
 800286a:	4b5f      	ldr	r3, [pc, #380]	@ (80029e8 <main+0xbd8>)
 800286c:	601a      	str	r2, [r3, #0]
			Receiver_Period[1] = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 800286e:	4b5f      	ldr	r3, [pc, #380]	@ (80029ec <main+0xbdc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002874:	461a      	mov	r2, r3
 8002876:	4b5c      	ldr	r3, [pc, #368]	@ (80029e8 <main+0xbd8>)
 8002878:	605a      	str	r2, [r3, #4]
			float RX_temp = map(
				__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2) - 1500.00, -500.00,
 800287a:	4b5a      	ldr	r3, [pc, #360]	@ (80029e4 <main+0xbd4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002880:	4618      	mov	r0, r3
 8002882:	f7fd fe0b 	bl	800049c <__aeabi_ui2d>
 8002886:	a350      	add	r3, pc, #320	@ (adr r3, 80029c8 <main+0xbb8>)
 8002888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288c:	f7fd fcc8 	bl	8000220 <__aeabi_dsub>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
			float RX_temp = map(
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	f7fe f934 	bl	8000b04 <__aeabi_d2f>
 800289c:	4603      	mov	r3, r0
 800289e:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 80029f0 <main+0xbe0>
 80028a2:	eddf 1a54 	vldr	s3, [pc, #336]	@ 80029f4 <main+0xbe4>
 80028a6:	ed9f 1a54 	vldr	s2, [pc, #336]	@ 80029f8 <main+0xbe8>
 80028aa:	eddf 0a54 	vldr	s1, [pc, #336]	@ 80029fc <main+0xbec>
 80028ae:	ee00 3a10 	vmov	s0, r3
 80028b2:	f001 fb59 	bl	8003f68 <map>
 80028b6:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
				500.00, -100.00, 100.00);
			float RY_temp = map(
				__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 18530.00, -500.00,
 80028ba:	4b4c      	ldr	r3, [pc, #304]	@ (80029ec <main+0xbdc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fdeb 	bl	800049c <__aeabi_ui2d>
 80028c6:	a342      	add	r3, pc, #264	@ (adr r3, 80029d0 <main+0xbc0>)
 80028c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028cc:	f7fd fca8 	bl	8000220 <__aeabi_dsub>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
			float RY_temp = map(
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7fe f914 	bl	8000b04 <__aeabi_d2f>
 80028dc:	4603      	mov	r3, r0
 80028de:	ed9f 2a44 	vldr	s4, [pc, #272]	@ 80029f0 <main+0xbe0>
 80028e2:	eddf 1a44 	vldr	s3, [pc, #272]	@ 80029f4 <main+0xbe4>
 80028e6:	ed9f 1a44 	vldr	s2, [pc, #272]	@ 80029f8 <main+0xbe8>
 80028ea:	eddf 0a44 	vldr	s1, [pc, #272]	@ 80029fc <main+0xbec>
 80028ee:	ee00 3a10 	vmov	s0, r3
 80028f2:	f001 fb39 	bl	8003f68 <map>
 80028f6:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
				500.00, -100.00, 100.00);

			if (RX_temp >= -4 && RX_temp <= 4)
 80028fa:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80028fe:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8002902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	db0d      	blt.n	8002928 <main+0xb18>
 800290c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002910:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291c:	d804      	bhi.n	8002928 <main+0xb18>
				Receiver[0] = 0.00;
 800291e:	4a38      	ldr	r2, [pc, #224]	@ (8002a00 <main+0xbf0>)
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e01c      	b.n	8002962 <main+0xb52>
			else if (RX_temp > 100)
 8002928:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800292c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80029f0 <main+0xbe0>
 8002930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	dd03      	ble.n	8002942 <main+0xb32>
				Receiver[0] = 100.00;
 800293a:	4a31      	ldr	r2, [pc, #196]	@ (8002a00 <main+0xbf0>)
 800293c:	4b31      	ldr	r3, [pc, #196]	@ (8002a04 <main+0xbf4>)
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	e00f      	b.n	8002962 <main+0xb52>
			else if (RX_temp < -100)
 8002942:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002946:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80029f4 <main+0xbe4>
 800294a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002952:	d503      	bpl.n	800295c <main+0xb4c>
				Receiver[0] = -100.00;
 8002954:	4a2a      	ldr	r2, [pc, #168]	@ (8002a00 <main+0xbf0>)
 8002956:	4b2c      	ldr	r3, [pc, #176]	@ (8002a08 <main+0xbf8>)
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e002      	b.n	8002962 <main+0xb52>
			else
				Receiver[0] = RX_temp;
 800295c:	4a28      	ldr	r2, [pc, #160]	@ (8002a00 <main+0xbf0>)
 800295e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002960:	6013      	str	r3, [r2, #0]
			if (RY_temp >= -4 && RY_temp <= 4)
 8002962:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002966:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 800296a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800296e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002972:	db0d      	blt.n	8002990 <main+0xb80>
 8002974:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002978:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800297c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002984:	d804      	bhi.n	8002990 <main+0xb80>
				Receiver[1] = 0.00;
 8002986:	4a1e      	ldr	r2, [pc, #120]	@ (8002a00 <main+0xbf0>)
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	6053      	str	r3, [r2, #4]
 800298e:	e040      	b.n	8002a12 <main+0xc02>
			else if (RY_temp > 100)
 8002990:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002994:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80029f0 <main+0xbe0>
 8002998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800299c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a0:	dd03      	ble.n	80029aa <main+0xb9a>
				Receiver[1] = 100.00;
 80029a2:	4a17      	ldr	r2, [pc, #92]	@ (8002a00 <main+0xbf0>)
 80029a4:	4b17      	ldr	r3, [pc, #92]	@ (8002a04 <main+0xbf4>)
 80029a6:	6053      	str	r3, [r2, #4]
 80029a8:	e033      	b.n	8002a12 <main+0xc02>
			else if (RY_temp < -100)
 80029aa:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80029ae:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80029f4 <main+0xbe4>
 80029b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	d527      	bpl.n	8002a0c <main+0xbfc>
				Receiver[1] = -100.00;
 80029bc:	4a10      	ldr	r2, [pc, #64]	@ (8002a00 <main+0xbf0>)
 80029be:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <main+0xbf8>)
 80029c0:	6053      	str	r3, [r2, #4]
 80029c2:	e026      	b.n	8002a12 <main+0xc02>
 80029c4:	f3af 8000 	nop.w
 80029c8:	00000000 	.word	0x00000000
 80029cc:	40977000 	.word	0x40977000
 80029d0:	00000000 	.word	0x00000000
 80029d4:	40d21880 	.word	0x40d21880
 80029d8:	200012b8 	.word	0x200012b8
 80029dc:	20000c3b 	.word	0x20000c3b
 80029e0:	20001310 	.word	0x20001310
 80029e4:	2000037c 	.word	0x2000037c
 80029e8:	20000ac4 	.word	0x20000ac4
 80029ec:	200002b0 	.word	0x200002b0
 80029f0:	42c80000 	.word	0x42c80000
 80029f4:	c2c80000 	.word	0xc2c80000
 80029f8:	43fa0000 	.word	0x43fa0000
 80029fc:	c3fa0000 	.word	0xc3fa0000
 8002a00:	20000ab0 	.word	0x20000ab0
 8002a04:	42c80000 	.word	0x42c80000
 8002a08:	c2c80000 	.word	0xc2c80000
			else
				Receiver[1] = RY_temp;
 8002a0c:	4ac0      	ldr	r2, [pc, #768]	@ (8002d10 <main+0xf00>)
 8002a0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a10:	6053      	str	r3, [r2, #4]

			if (pulse_width_us[0] > 4000.00)
 8002a12:	4bc0      	ldr	r3, [pc, #768]	@ (8002d14 <main+0xf04>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a1a:	d912      	bls.n	8002a42 <main+0xc32>
				pulse_width_us[0] = pulse_width_us[0] - 4900.00;
 8002a1c:	4bbd      	ldr	r3, [pc, #756]	@ (8002d14 <main+0xf04>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fd3b 	bl	800049c <__aeabi_ui2d>
 8002a26:	a3b6      	add	r3, pc, #728	@ (adr r3, 8002d00 <main+0xef0>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f7fd fbf8 	bl	8000220 <__aeabi_dsub>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	f7fe f844 	bl	8000ac4 <__aeabi_d2uiz>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	4bb5      	ldr	r3, [pc, #724]	@ (8002d14 <main+0xf04>)
 8002a40:	601a      	str	r2, [r3, #0]
			if (pulse_width_us[1] > 4000.00)
 8002a42:	4bb4      	ldr	r3, [pc, #720]	@ (8002d14 <main+0xf04>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a4a:	d912      	bls.n	8002a72 <main+0xc62>
				pulse_width_us[1] = pulse_width_us[1] - 4900.00;
 8002a4c:	4bb1      	ldr	r3, [pc, #708]	@ (8002d14 <main+0xf04>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fd fd23 	bl	800049c <__aeabi_ui2d>
 8002a56:	a3aa      	add	r3, pc, #680	@ (adr r3, 8002d00 <main+0xef0>)
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f7fd fbe0 	bl	8000220 <__aeabi_dsub>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	f7fe f82c 	bl	8000ac4 <__aeabi_d2uiz>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4ba9      	ldr	r3, [pc, #676]	@ (8002d14 <main+0xf04>)
 8002a70:	605a      	str	r2, [r3, #4]
			if (pulse_width_us[2] > 4000.00)
 8002a72:	4ba8      	ldr	r3, [pc, #672]	@ (8002d14 <main+0xf04>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a7a:	d912      	bls.n	8002aa2 <main+0xc92>
				pulse_width_us[2] = pulse_width_us[2] - 4900.00;
 8002a7c:	4ba5      	ldr	r3, [pc, #660]	@ (8002d14 <main+0xf04>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fd0b 	bl	800049c <__aeabi_ui2d>
 8002a86:	a39e      	add	r3, pc, #632	@ (adr r3, 8002d00 <main+0xef0>)
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f7fd fbc8 	bl	8000220 <__aeabi_dsub>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f7fe f814 	bl	8000ac4 <__aeabi_d2uiz>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b9d      	ldr	r3, [pc, #628]	@ (8002d14 <main+0xf04>)
 8002aa0:	609a      	str	r2, [r3, #8]

			Receiver[2] = map((float)pulse_width_us[0] - 1500.00, -500.00,
 8002aa2:	4b9c      	ldr	r3, [pc, #624]	@ (8002d14 <main+0xf04>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	ee07 3a90 	vmov	s15, r3
 8002aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aae:	ee17 0a90 	vmov	r0, s15
 8002ab2:	f7fd fd15 	bl	80004e0 <__aeabi_f2d>
 8002ab6:	a394      	add	r3, pc, #592	@ (adr r3, 8002d08 <main+0xef8>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f7fd fbb0 	bl	8000220 <__aeabi_dsub>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f7fe f81c 	bl	8000b04 <__aeabi_d2f>
 8002acc:	4603      	mov	r3, r0
 8002ace:	ed9f 2a92 	vldr	s4, [pc, #584]	@ 8002d18 <main+0xf08>
 8002ad2:	eddf 1a92 	vldr	s3, [pc, #584]	@ 8002d1c <main+0xf0c>
 8002ad6:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 8002d20 <main+0xf10>
 8002ada:	eddf 0a92 	vldr	s1, [pc, #584]	@ 8002d24 <main+0xf14>
 8002ade:	ee00 3a10 	vmov	s0, r3
 8002ae2:	f001 fa41 	bl	8003f68 <map>
 8002ae6:	eef0 7a40 	vmov.f32	s15, s0
 8002aea:	4b89      	ldr	r3, [pc, #548]	@ (8002d10 <main+0xf00>)
 8002aec:	edc3 7a02 	vstr	s15, [r3, #8]
							  500.00, -100.00, 100.00);
			Receiver[3] = map((float)pulse_width_us[1] - 1500.00, -500.00,
 8002af0:	4b88      	ldr	r3, [pc, #544]	@ (8002d14 <main+0xf04>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	ee07 3a90 	vmov	s15, r3
 8002af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afc:	ee17 0a90 	vmov	r0, s15
 8002b00:	f7fd fcee 	bl	80004e0 <__aeabi_f2d>
 8002b04:	a380      	add	r3, pc, #512	@ (adr r3, 8002d08 <main+0xef8>)
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	f7fd fb89 	bl	8000220 <__aeabi_dsub>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	f7fd fff5 	bl	8000b04 <__aeabi_d2f>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	ed9f 2a7e 	vldr	s4, [pc, #504]	@ 8002d18 <main+0xf08>
 8002b20:	eddf 1a7e 	vldr	s3, [pc, #504]	@ 8002d1c <main+0xf0c>
 8002b24:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 8002d20 <main+0xf10>
 8002b28:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8002d24 <main+0xf14>
 8002b2c:	ee00 3a10 	vmov	s0, r3
 8002b30:	f001 fa1a 	bl	8003f68 <map>
 8002b34:	eef0 7a40 	vmov.f32	s15, s0
 8002b38:	4b75      	ldr	r3, [pc, #468]	@ (8002d10 <main+0xf00>)
 8002b3a:	edc3 7a03 	vstr	s15, [r3, #12]
							  500.00, -100.00, 100.00);
			Receiver[4] = map((float)pulse_width_us[2] - 1500.00, -500.00,
 8002b3e:	4b75      	ldr	r3, [pc, #468]	@ (8002d14 <main+0xf04>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b4a:	ee17 0a90 	vmov	r0, s15
 8002b4e:	f7fd fcc7 	bl	80004e0 <__aeabi_f2d>
 8002b52:	a36d      	add	r3, pc, #436	@ (adr r3, 8002d08 <main+0xef8>)
 8002b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b58:	f7fd fb62 	bl	8000220 <__aeabi_dsub>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	f7fd ffce 	bl	8000b04 <__aeabi_d2f>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	ed9f 2a6b 	vldr	s4, [pc, #428]	@ 8002d18 <main+0xf08>
 8002b6e:	eddf 1a6b 	vldr	s3, [pc, #428]	@ 8002d1c <main+0xf0c>
 8002b72:	ed9f 1a6b 	vldr	s2, [pc, #428]	@ 8002d20 <main+0xf10>
 8002b76:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 8002d24 <main+0xf14>
 8002b7a:	ee00 3a10 	vmov	s0, r3
 8002b7e:	f001 f9f3 	bl	8003f68 <map>
 8002b82:	eef0 7a40 	vmov.f32	s15, s0
 8002b86:	4b62      	ldr	r3, [pc, #392]	@ (8002d10 <main+0xf00>)
 8002b88:	edc3 7a04 	vstr	s15, [r3, #16]
			//		if(Receiver[2] > 1500.00) Receiver[2] = Receiver[2] - 3400.00;
			//		if(Receiver[3] > 1500.00) Receiver[3] = Receiver[3] - 3400.00;
			//		if(Receiver[4] > 1500.00) Receiver[4] = Receiver[4] - 3400.00;

			// Adjust as needed
			vx = map((float)Receiver[0], -100.00, 100.00, -300.00, 300.00);
 8002b8c:	4b60      	ldr	r3, [pc, #384]	@ (8002d10 <main+0xf00>)
 8002b8e:	edd3 7a00 	vldr	s15, [r3]
 8002b92:	ed9f 2a65 	vldr	s4, [pc, #404]	@ 8002d28 <main+0xf18>
 8002b96:	eddf 1a65 	vldr	s3, [pc, #404]	@ 8002d2c <main+0xf1c>
 8002b9a:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 8002d18 <main+0xf08>
 8002b9e:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8002d1c <main+0xf0c>
 8002ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba6:	f001 f9df 	bl	8003f68 <map>
 8002baa:	eef0 7a40 	vmov.f32	s15, s0
 8002bae:	4b60      	ldr	r3, [pc, #384]	@ (8002d30 <main+0xf20>)
 8002bb0:	edc3 7a00 	vstr	s15, [r3]
			vy = map((float)Receiver[1], -100.00, 100.00, -300.00, 300.00);
 8002bb4:	4b56      	ldr	r3, [pc, #344]	@ (8002d10 <main+0xf00>)
 8002bb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bba:	ed9f 2a5b 	vldr	s4, [pc, #364]	@ 8002d28 <main+0xf18>
 8002bbe:	eddf 1a5b 	vldr	s3, [pc, #364]	@ 8002d2c <main+0xf1c>
 8002bc2:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 8002d18 <main+0xf08>
 8002bc6:	eddf 0a55 	vldr	s1, [pc, #340]	@ 8002d1c <main+0xf0c>
 8002bca:	eeb0 0a67 	vmov.f32	s0, s15
 8002bce:	f001 f9cb 	bl	8003f68 <map>
 8002bd2:	eef0 7a40 	vmov.f32	s15, s0
 8002bd6:	4b57      	ldr	r3, [pc, #348]	@ (8002d34 <main+0xf24>)
 8002bd8:	edc3 7a00 	vstr	s15, [r3]
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MODE>> ///////////////////////////

			if (EmergencyState == 1)
 8002bdc:	4b56      	ldr	r3, [pc, #344]	@ (8002d38 <main+0xf28>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d103      	bne.n	8002bec <main+0xddc>
			{
				Mode = 0;
 8002be4:	4a55      	ldr	r2, [pc, #340]	@ (8002d3c <main+0xf2c>)
 8002be6:	2300      	movs	r3, #0
 8002be8:	7013      	strb	r3, [r2, #0]
 8002bea:	e1a8      	b.n	8002f3e <main+0x112e>
			}
			else if (Receiver[2] < -30 && Receiver[4] < -30)
 8002bec:	4b48      	ldr	r3, [pc, #288]	@ (8002d10 <main+0xf00>)
 8002bee:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bf2:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfe:	d513      	bpl.n	8002c28 <main+0xe18>
 8002c00:	4b43      	ldr	r3, [pc, #268]	@ (8002d10 <main+0xf00>)
 8002c02:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c06:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c12:	d509      	bpl.n	8002c28 <main+0xe18>
			{
				Mode = 0;
 8002c14:	4a49      	ldr	r2, [pc, #292]	@ (8002d3c <main+0xf2c>)
 8002c16:	2300      	movs	r3, #0
 8002c18:	7013      	strb	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c20:	4847      	ldr	r0, [pc, #284]	@ (8002d40 <main+0xf30>)
 8002c22:	f003 fb61 	bl	80062e8 <HAL_GPIO_WritePin>
 8002c26:	e18a      	b.n	8002f3e <main+0x112e>
			}
			else if (Receiver[3] > 0 && IsPress == 0)
 8002c28:	4b39      	ldr	r3, [pc, #228]	@ (8002d10 <main+0xf00>)
 8002c2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c36:	f340 817f 	ble.w	8002f38 <main+0x1128>
 8002c3a:	4b42      	ldr	r3, [pc, #264]	@ (8002d44 <main+0xf34>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 817a 	bne.w	8002f38 <main+0x1128>
			{
				IsPress = 1;
 8002c44:	4a3f      	ldr	r2, [pc, #252]	@ (8002d44 <main+0xf34>)
 8002c46:	2301      	movs	r3, #1
 8002c48:	7013      	strb	r3, [r2, #0]
				calibState = CALIB_IDLE;
 8002c4a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d48 <main+0xf38>)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30)
 8002c50:	4b2f      	ldr	r3, [pc, #188]	@ (8002d10 <main+0xf00>)
 8002c52:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c56:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c62:	dd2c      	ble.n	8002cbe <main+0xeae>
 8002c64:	4b2a      	ldr	r3, [pc, #168]	@ (8002d10 <main+0xf00>)
 8002c66:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c6a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002c6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c76:	d522      	bpl.n	8002cbe <main+0xeae>
 8002c78:	4b25      	ldr	r3, [pc, #148]	@ (8002d10 <main+0xf00>)
 8002c7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c7e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8a:	d518      	bpl.n	8002cbe <main+0xeae>
				{
					if (Mode != 1)
 8002c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d3c <main+0xf2c>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d003      	beq.n	8002c9c <main+0xe8c>
					{
						Mode = 1;
 8002c94:	4a29      	ldr	r2, [pc, #164]	@ (8002d3c <main+0xf2c>)
 8002c96:	2301      	movs	r3, #1
 8002c98:	7013      	strb	r3, [r2, #0]
					if (Mode != 1)
 8002c9a:	e13b      	b.n	8002f14 <main+0x1104>
					}
					else
					{
						TargetX = End_x;
 8002c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d4c <main+0xf3c>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d50 <main+0xf40>)
 8002ca2:	601a      	str	r2, [r3, #0]
						TargetY = End_y;
 8002ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d54 <main+0xf44>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d58 <main+0xf48>)
 8002caa:	601a      	str	r2, [r3, #0]
						TargetR = Revolute_QEIdata.RadPosition;
 8002cac:	4b2b      	ldr	r3, [pc, #172]	@ (8002d5c <main+0xf4c>)
 8002cae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d60 <main+0xf50>)
 8002cb2:	601a      	str	r2, [r3, #0]
						TargetP = Prismatic_QEIdata.mmPosition;
 8002cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d64 <main+0xf54>)
 8002cb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d68 <main+0xf58>)
 8002cba:	601a      	str	r2, [r3, #0]
					if (Mode != 1)
 8002cbc:	e12a      	b.n	8002f14 <main+0x1104>
					}
				}
				else if (Receiver[2] > 30 && Receiver[4] < -30)
 8002cbe:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <main+0xf00>)
 8002cc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cc4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002cc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd0:	dd50      	ble.n	8002d74 <main+0xf64>
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d10 <main+0xf00>)
 8002cd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cd8:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce4:	d546      	bpl.n	8002d74 <main+0xf64>
				{
					revolute.finished = 0;
 8002ce6:	4a21      	ldr	r2, [pc, #132]	@ (8002d6c <main+0xf5c>)
 8002ce8:	2300      	movs	r3, #0
 8002cea:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 8002cec:	4a20      	ldr	r2, [pc, #128]	@ (8002d70 <main+0xf60>)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	6293      	str	r3, [r2, #40]	@ 0x28
					Mode = 2;
 8002cf2:	4a12      	ldr	r2, [pc, #72]	@ (8002d3c <main+0xf2c>)
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	7013      	strb	r3, [r2, #0]
 8002cf8:	e10c      	b.n	8002f14 <main+0x1104>
 8002cfa:	bf00      	nop
 8002cfc:	f3af 8000 	nop.w
 8002d00:	00000000 	.word	0x00000000
 8002d04:	40b32400 	.word	0x40b32400
 8002d08:	00000000 	.word	0x00000000
 8002d0c:	40977000 	.word	0x40977000
 8002d10:	20000ab0 	.word	0x20000ab0
 8002d14:	20000ae4 	.word	0x20000ae4
 8002d18:	42c80000 	.word	0x42c80000
 8002d1c:	c2c80000 	.word	0xc2c80000
 8002d20:	43fa0000 	.word	0x43fa0000
 8002d24:	c3fa0000 	.word	0xc3fa0000
 8002d28:	43960000 	.word	0x43960000
 8002d2c:	c3960000 	.word	0xc3960000
 8002d30:	20000b7c 	.word	0x20000b7c
 8002d34:	20000b80 	.word	0x20000b80
 8002d38:	20000bcd 	.word	0x20000bcd
 8002d3c:	20000bcc 	.word	0x20000bcc
 8002d40:	48000800 	.word	0x48000800
 8002d44:	20000bce 	.word	0x20000bce
 8002d48:	20000c1c 	.word	0x20000c1c
 8002d4c:	20000b84 	.word	0x20000b84
 8002d50:	20000b8c 	.word	0x20000b8c
 8002d54:	20000b88 	.word	0x20000b88
 8002d58:	20000b90 	.word	0x20000b90
 8002d5c:	20000af8 	.word	0x20000af8
 8002d60:	20000b94 	.word	0x20000b94
 8002d64:	20000b38 	.word	0x20000b38
 8002d68:	20000b98 	.word	0x20000b98
 8002d6c:	2000132c 	.word	0x2000132c
 8002d70:	20001370 	.word	0x20001370
				}
				else if (Receiver[2] < -30 && Receiver[4] > -30 && Receiver[4] < 30)
 8002d74:	4b68      	ldr	r3, [pc, #416]	@ (8002f18 <main+0x1108>)
 8002d76:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d7a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d86:	d517      	bpl.n	8002db8 <main+0xfa8>
 8002d88:	4b63      	ldr	r3, [pc, #396]	@ (8002f18 <main+0x1108>)
 8002d8a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d8e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	dd0d      	ble.n	8002db8 <main+0xfa8>
 8002d9c:	4b5e      	ldr	r3, [pc, #376]	@ (8002f18 <main+0x1108>)
 8002d9e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002da2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dae:	d503      	bpl.n	8002db8 <main+0xfa8>
				{
					Mode = 3;
 8002db0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f1c <main+0x110c>)
 8002db2:	2303      	movs	r3, #3
 8002db4:	7013      	strb	r3, [r2, #0]
 8002db6:	e0ad      	b.n	8002f14 <main+0x1104>
				}
				else if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] > -30 && Receiver[4] < 30)
 8002db8:	4b57      	ldr	r3, [pc, #348]	@ (8002f18 <main+0x1108>)
 8002dba:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dbe:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dca:	dd27      	ble.n	8002e1c <main+0x100c>
 8002dcc:	4b52      	ldr	r3, [pc, #328]	@ (8002f18 <main+0x1108>)
 8002dce:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dd2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dde:	d51d      	bpl.n	8002e1c <main+0x100c>
 8002de0:	4b4d      	ldr	r3, [pc, #308]	@ (8002f18 <main+0x1108>)
 8002de2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002de6:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df2:	dd13      	ble.n	8002e1c <main+0x100c>
 8002df4:	4b48      	ldr	r3, [pc, #288]	@ (8002f18 <main+0x1108>)
 8002df6:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dfa:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e06:	d509      	bpl.n	8002e1c <main+0x100c>
				{
					revolute.finished = 0;
 8002e08:	4a45      	ldr	r2, [pc, #276]	@ (8002f20 <main+0x1110>)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 8002e0e:	4a45      	ldr	r2, [pc, #276]	@ (8002f24 <main+0x1114>)
 8002e10:	2300      	movs	r3, #0
 8002e12:	6293      	str	r3, [r2, #40]	@ 0x28
					Mode = 4;
 8002e14:	4a41      	ldr	r2, [pc, #260]	@ (8002f1c <main+0x110c>)
 8002e16:	2304      	movs	r3, #4
 8002e18:	7013      	strb	r3, [r2, #0]
 8002e1a:	e07b      	b.n	8002f14 <main+0x1104>
				}
				else if (Receiver[2] > 30 && Receiver[4] > -30 && Receiver[4] < 30)
 8002e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8002f18 <main+0x1108>)
 8002e1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e22:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	dd17      	ble.n	8002e60 <main+0x1050>
 8002e30:	4b39      	ldr	r3, [pc, #228]	@ (8002f18 <main+0x1108>)
 8002e32:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e36:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e42:	dd0d      	ble.n	8002e60 <main+0x1050>
 8002e44:	4b34      	ldr	r3, [pc, #208]	@ (8002f18 <main+0x1108>)
 8002e46:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e4a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e56:	d503      	bpl.n	8002e60 <main+0x1050>
				{
					Mode = 5;
 8002e58:	4a30      	ldr	r2, [pc, #192]	@ (8002f1c <main+0x110c>)
 8002e5a:	2305      	movs	r3, #5
 8002e5c:	7013      	strb	r3, [r2, #0]
 8002e5e:	e059      	b.n	8002f14 <main+0x1104>
				}
				else if (Receiver[2] < -30 && Receiver[4] > 30)
 8002e60:	4b2d      	ldr	r3, [pc, #180]	@ (8002f18 <main+0x1108>)
 8002e62:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e66:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	d50d      	bpl.n	8002e90 <main+0x1080>
 8002e74:	4b28      	ldr	r3, [pc, #160]	@ (8002f18 <main+0x1108>)
 8002e76:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e7a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e86:	dd03      	ble.n	8002e90 <main+0x1080>
				{
					Mode = 6;
 8002e88:	4a24      	ldr	r2, [pc, #144]	@ (8002f1c <main+0x110c>)
 8002e8a:	2306      	movs	r3, #6
 8002e8c:	7013      	strb	r3, [r2, #0]
 8002e8e:	e041      	b.n	8002f14 <main+0x1104>
				}
				else if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] > 30)
 8002e90:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <main+0x1108>)
 8002e92:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e96:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8002e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea2:	dd17      	ble.n	8002ed4 <main+0x10c4>
 8002ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f18 <main+0x1108>)
 8002ea6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eaa:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb6:	d50d      	bpl.n	8002ed4 <main+0x10c4>
 8002eb8:	4b17      	ldr	r3, [pc, #92]	@ (8002f18 <main+0x1108>)
 8002eba:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ebe:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eca:	dd03      	ble.n	8002ed4 <main+0x10c4>
				{
					Mode = 7;
 8002ecc:	4a13      	ldr	r2, [pc, #76]	@ (8002f1c <main+0x110c>)
 8002ece:	2307      	movs	r3, #7
 8002ed0:	7013      	strb	r3, [r2, #0]
 8002ed2:	e01f      	b.n	8002f14 <main+0x1104>
				}
				else if (Receiver[2] > 30 && Receiver[4] > 30)
 8002ed4:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <main+0x1108>)
 8002ed6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eda:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee6:	dc00      	bgt.n	8002eea <main+0x10da>
				if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30)
 8002ee8:	e029      	b.n	8002f3e <main+0x112e>
				else if (Receiver[2] > 30 && Receiver[4] > 30)
 8002eea:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <main+0x1108>)
 8002eec:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ef0:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efc:	dc00      	bgt.n	8002f00 <main+0x10f0>
				if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30)
 8002efe:	e01e      	b.n	8002f3e <main+0x112e>
				{
					// loop_counter = 0;
					TargetR = 4.18879;
 8002f00:	4a09      	ldr	r2, [pc, #36]	@ (8002f28 <main+0x1118>)
 8002f02:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <main+0x111c>)
 8002f04:	6013      	str	r3, [r2, #0]
					TargetP = 50;
 8002f06:	4a0a      	ldr	r2, [pc, #40]	@ (8002f30 <main+0x1120>)
 8002f08:	4b0a      	ldr	r3, [pc, #40]	@ (8002f34 <main+0x1124>)
 8002f0a:	6013      	str	r3, [r2, #0]
					Mode = 8;
 8002f0c:	4a03      	ldr	r2, [pc, #12]	@ (8002f1c <main+0x110c>)
 8002f0e:	2308      	movs	r3, #8
 8002f10:	7013      	strb	r3, [r2, #0]
				if (Receiver[2] > -30 && Receiver[2] < 30 && Receiver[4] < -30)
 8002f12:	e014      	b.n	8002f3e <main+0x112e>
 8002f14:	e013      	b.n	8002f3e <main+0x112e>
 8002f16:	bf00      	nop
 8002f18:	20000ab0 	.word	0x20000ab0
 8002f1c:	20000bcc 	.word	0x20000bcc
 8002f20:	2000132c 	.word	0x2000132c
 8002f24:	20001370 	.word	0x20001370
 8002f28:	20000b94 	.word	0x20000b94
 8002f2c:	40860a91 	.word	0x40860a91
 8002f30:	20000b98 	.word	0x20000b98
 8002f34:	42480000 	.word	0x42480000
				}
			}
			else
			{
				IsPress = 0;
 8002f38:	4aa5      	ldr	r2, [pc, #660]	@ (80031d0 <main+0x13c0>)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	7013      	strb	r3, [r2, #0]
			}
			//////////////////////////////////////////////////////////////

			//////////////////////// <<STOP>> ////////////////////////////
			if (Mode == 0)
 8002f3e:	4ba5      	ldr	r3, [pc, #660]	@ (80031d4 <main+0x13c4>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10c      	bne.n	8002f60 <main+0x1150>
			{
				Set_Motor(0, 0);
 8002f46:	ed9f 0aa4 	vldr	s0, [pc, #656]	@ 80031d8 <main+0x13c8>
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f001 fbe2 	bl	8004714 <Set_Motor>
				Set_Motor(1, 0);
 8002f50:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 80031d8 <main+0x13c8>
 8002f54:	2001      	movs	r0, #1
 8002f56:	f001 fbdd 	bl	8004714 <Set_Motor>
				Set_Servo(0);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f001 fc58 	bl	8004810 <Set_Servo>
			}
			//////////////////////////////////////////////////////////////

			//////////////////////// <<MANUAL>> //////////////////////////
			if (Mode == 1)
 8002f60:	4b9c      	ldr	r3, [pc, #624]	@ (80031d4 <main+0x13c4>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	f040 80af 	bne.w	80030c8 <main+0x12b8>
			{
				//////////////////////// <<CONTROL>> /////////////////////////
				//		inv_L = (Prismatic_QEIdata.mmPosition > 1.0f) ? (1.0f / Prismatic_QEIdata.mmPosition) : 0.0f;
				//		TargetRVel 	= (-sinf(Revolute_QEIdata.RadPosition) * vx + cosf(Revolute_QEIdata.RadPosition) * vy) / inv_L;
				//		TargetPVel  =  cosf(Revolute_QEIdata.RadPosition) * vx + sinf(Revolute_QEIdata.RadPosition) * vy;
				TargetRVel = (map((float)Receiver[0], -100.00, 100.00, -1.00,
 8002f6a:	4b9c      	ldr	r3, [pc, #624]	@ (80031dc <main+0x13cc>)
 8002f6c:	edd3 7a00 	vldr	s15, [r3]
 8002f70:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8002f74:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 8002f78:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 80031e0 <main+0x13d0>
 8002f7c:	eddf 0a99 	vldr	s1, [pc, #612]	@ 80031e4 <main+0x13d4>
 8002f80:	eeb0 0a67 	vmov.f32	s0, s15
 8002f84:	f000 fff0 	bl	8003f68 <map>
 8002f88:	eef0 7a40 	vmov.f32	s15, s0
 8002f8c:	4b96      	ldr	r3, [pc, #600]	@ (80031e8 <main+0x13d8>)
 8002f8e:	edc3 7a00 	vstr	s15, [r3]
								  1.00));
				TargetPVel = map((float)Receiver[1], -100.00, 100.00, -500.00,
 8002f92:	4b92      	ldr	r3, [pc, #584]	@ (80031dc <main+0x13cc>)
 8002f94:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f98:	ed9f 2a94 	vldr	s4, [pc, #592]	@ 80031ec <main+0x13dc>
 8002f9c:	eddf 1a94 	vldr	s3, [pc, #592]	@ 80031f0 <main+0x13e0>
 8002fa0:	ed9f 1a8f 	vldr	s2, [pc, #572]	@ 80031e0 <main+0x13d0>
 8002fa4:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 80031e4 <main+0x13d4>
 8002fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fac:	f000 ffdc 	bl	8003f68 <map>
 8002fb0:	eef0 7a40 	vmov.f32	s15, s0
 8002fb4:	4b8f      	ldr	r3, [pc, #572]	@ (80031f4 <main+0x13e4>)
 8002fb6:	edc3 7a00 	vstr	s15, [r3]
								 500.00);
				//////////////////////////////////////////////////////////////

				//////////////////////// <<MOTOR>> ///////////////////////////
				R_Velo_Error = (TargetRVel - Revolute_QEIdata.Velocity_f);
 8002fba:	4b8b      	ldr	r3, [pc, #556]	@ (80031e8 <main+0x13d8>)
 8002fbc:	ed93 7a00 	vldr	s14, [r3]
 8002fc0:	4b8d      	ldr	r3, [pc, #564]	@ (80031f8 <main+0x13e8>)
 8002fc2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fca:	4b8c      	ldr	r3, [pc, #560]	@ (80031fc <main+0x13ec>)
 8002fcc:	edc3 7a00 	vstr	s15, [r3]
				P_Velo_Error = TargetPVel - Prismatic_QEIdata.Velocity;
 8002fd0:	4b88      	ldr	r3, [pc, #544]	@ (80031f4 <main+0x13e4>)
 8002fd2:	ed93 7a00 	vldr	s14, [r3]
 8002fd6:	4b8a      	ldr	r3, [pc, #552]	@ (8003200 <main+0x13f0>)
 8002fd8:	edd3 7a08 	vldr	s15, [r3, #32]
 8002fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe0:	4b88      	ldr	r3, [pc, #544]	@ (8003204 <main+0x13f4>)
 8002fe2:	edc3 7a00 	vstr	s15, [r3]

				// Call every 0.001 s
				static uint64_t timestampState1 = 0;
				int64_t currentTimeState1 = micros();
 8002fe6:	f001 f8e3 	bl	80041b0 <micros>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
				if (currentTimeState1 > timestampState1)
 8002ff2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002ff6:	4b84      	ldr	r3, [pc, #528]	@ (8003208 <main+0x13f8>)
 8002ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffc:	4282      	cmp	r2, r0
 8002ffe:	418b      	sbcs	r3, r1
 8003000:	d250      	bcs.n	80030a4 <main+0x1294>
				{
					timestampState1 = currentTimeState1 + 1000; // us
 8003002:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003006:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 800300a:	61b9      	str	r1, [r7, #24]
 800300c:	f143 0300 	adc.w	r3, r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003016:	4b7c      	ldr	r3, [pc, #496]	@ (8003208 <main+0x13f8>)
 8003018:	e9c3 0100 	strd	r0, r1, [r3]
					R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel,
 800301c:	4b77      	ldr	r3, [pc, #476]	@ (80031fc <main+0x13ec>)
 800301e:	edd3 7a00 	vldr	s15, [r3]
 8003022:	4b7a      	ldr	r3, [pc, #488]	@ (800320c <main+0x13fc>)
 8003024:	ed93 7a00 	vldr	s14, [r3]
 8003028:	4b79      	ldr	r3, [pc, #484]	@ (8003210 <main+0x1400>)
 800302a:	edd3 6a00 	vldr	s13, [r3]
 800302e:	4b79      	ldr	r3, [pc, #484]	@ (8003214 <main+0x1404>)
 8003030:	ed93 6a00 	vldr	s12, [r3]
 8003034:	4878      	ldr	r0, [pc, #480]	@ (8003218 <main+0x1408>)
 8003036:	ed9f 3a6a 	vldr	s6, [pc, #424]	@ 80031e0 <main+0x13d0>
 800303a:	eddf 2a6a 	vldr	s5, [pc, #424]	@ 80031e4 <main+0x13d4>
 800303e:	ed9f 2a77 	vldr	s4, [pc, #476]	@ 800321c <main+0x140c>
 8003042:	eef0 1a46 	vmov.f32	s3, s12
 8003046:	eeb0 1a66 	vmov.f32	s2, s13
 800304a:	eef0 0a47 	vmov.f32	s1, s14
 800304e:	eeb0 0a67 	vmov.f32	s0, s15
 8003052:	f001 f8c7 	bl	80041e4 <PID_Update>
 8003056:	eef0 7a40 	vmov.f32	s15, s0
 800305a:	4b71      	ldr	r3, [pc, #452]	@ (8003220 <main+0x1410>)
 800305c:	edc3 7a00 	vstr	s15, [r3]
									   R_kD_vel, 0.01f, -100.0f, 100.0f, &pid_r_v);
					P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel,
 8003060:	4b68      	ldr	r3, [pc, #416]	@ (8003204 <main+0x13f4>)
 8003062:	edd3 7a00 	vldr	s15, [r3]
 8003066:	4b6f      	ldr	r3, [pc, #444]	@ (8003224 <main+0x1414>)
 8003068:	ed93 7a00 	vldr	s14, [r3]
 800306c:	4b6e      	ldr	r3, [pc, #440]	@ (8003228 <main+0x1418>)
 800306e:	edd3 6a00 	vldr	s13, [r3]
 8003072:	4b6e      	ldr	r3, [pc, #440]	@ (800322c <main+0x141c>)
 8003074:	ed93 6a00 	vldr	s12, [r3]
 8003078:	486d      	ldr	r0, [pc, #436]	@ (8003230 <main+0x1420>)
 800307a:	ed9f 3a59 	vldr	s6, [pc, #356]	@ 80031e0 <main+0x13d0>
 800307e:	eddf 2a59 	vldr	s5, [pc, #356]	@ 80031e4 <main+0x13d4>
 8003082:	ed9f 2a66 	vldr	s4, [pc, #408]	@ 800321c <main+0x140c>
 8003086:	eef0 1a46 	vmov.f32	s3, s12
 800308a:	eeb0 1a66 	vmov.f32	s2, s13
 800308e:	eef0 0a47 	vmov.f32	s1, s14
 8003092:	eeb0 0a67 	vmov.f32	s0, s15
 8003096:	f001 f8a5 	bl	80041e4 <PID_Update>
 800309a:	eef0 7a40 	vmov.f32	s15, s0
 800309e:	4b65      	ldr	r3, [pc, #404]	@ (8003234 <main+0x1424>)
 80030a0:	edc3 7a00 	vstr	s15, [r3]
				}

				//			R_PWM = Receiver[0];
				//			P_PWM = Receiver[1];

				Workspace_limit();
 80030a4:	f001 fc00 	bl	80048a8 <Workspace_limit>

				Set_Motor(0, R_PWM);
 80030a8:	4b5d      	ldr	r3, [pc, #372]	@ (8003220 <main+0x1410>)
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	eeb0 0a67 	vmov.f32	s0, s15
 80030b2:	2000      	movs	r0, #0
 80030b4:	f001 fb2e 	bl	8004714 <Set_Motor>
				Set_Motor(1, P_PWM);
 80030b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003234 <main+0x1424>)
 80030ba:	edd3 7a00 	vldr	s15, [r3]
 80030be:	eeb0 0a67 	vmov.f32	s0, s15
 80030c2:	2001      	movs	r0, #1
 80030c4:	f001 fb26 	bl	8004714 <Set_Motor>
				//////////////////////////////////////////////////////////////
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 4)
 80030c8:	4b42      	ldr	r3, [pc, #264]	@ (80031d4 <main+0x13c4>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d133      	bne.n	8003138 <main+0x1328>
			{
				// TargetR = (atan2f(TargetX * -1, TargetY) + M_PI_2);
				// TargetP = sqrtf(TargetX * TargetX + TargetY * TargetY);

				TargetR = TargetR_Deg * M_PI / 180;
 80030d0:	4b59      	ldr	r3, [pc, #356]	@ (8003238 <main+0x1428>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd fa03 	bl	80004e0 <__aeabi_f2d>
 80030da:	a33b      	add	r3, pc, #236	@ (adr r3, 80031c8 <main+0x13b8>)
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e0:	f7fd fa56 	bl	8000590 <__aeabi_dmul>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4610      	mov	r0, r2
 80030ea:	4619      	mov	r1, r3
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	4b52      	ldr	r3, [pc, #328]	@ (800323c <main+0x142c>)
 80030f2:	f7fd fb77 	bl	80007e4 <__aeabi_ddiv>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	f7fd fd01 	bl	8000b04 <__aeabi_d2f>
 8003102:	4602      	mov	r2, r0
 8003104:	4b4e      	ldr	r3, [pc, #312]	@ (8003240 <main+0x1430>)
 8003106:	601a      	str	r2, [r3, #0]
				if (CascadeControl_Step())
 8003108:	f001 fe86 	bl	8004e18 <CascadeControl_Step>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d012      	beq.n	8003138 <main+0x1328>
				{
					Set_Servo(1);
 8003112:	2001      	movs	r0, #1
 8003114:	f001 fb7c 	bl	8004810 <Set_Servo>
					Set_Motor(0, 0);
 8003118:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 80031d8 <main+0x13c8>
 800311c:	2000      	movs	r0, #0
 800311e:	f001 faf9 	bl	8004714 <Set_Motor>
					Set_Motor(1, 0);
 8003122:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80031d8 <main+0x13c8>
 8003126:	2001      	movs	r0, #1
 8003128:	f001 faf4 	bl	8004714 <Set_Motor>
					revolute.finished = 0;
 800312c:	4a45      	ldr	r2, [pc, #276]	@ (8003244 <main+0x1434>)
 800312e:	2300      	movs	r3, #0
 8003130:	6293      	str	r3, [r2, #40]	@ 0x28
					prismatic.finished = 0;
 8003132:	4a45      	ldr	r2, [pc, #276]	@ (8003248 <main+0x1438>)
 8003134:	2300      	movs	r3, #0
 8003136:	6293      	str	r3, [r2, #40]	@ 0x28
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 5)
 8003138:	4b26      	ldr	r3, [pc, #152]	@ (80031d4 <main+0x13c4>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b05      	cmp	r3, #5
 800313e:	d111      	bne.n	8003164 <main+0x1354>
			{

				Workspace_limit();
 8003140:	f001 fbb2 	bl	80048a8 <Workspace_limit>
				Set_Motor(0, R_PWM);
 8003144:	4b36      	ldr	r3, [pc, #216]	@ (8003220 <main+0x1410>)
 8003146:	edd3 7a00 	vldr	s15, [r3]
 800314a:	eeb0 0a67 	vmov.f32	s0, s15
 800314e:	2000      	movs	r0, #0
 8003150:	f001 fae0 	bl	8004714 <Set_Motor>
				Set_Motor(1, P_PWM);
 8003154:	4b37      	ldr	r3, [pc, #220]	@ (8003234 <main+0x1424>)
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	eeb0 0a67 	vmov.f32	s0, s15
 800315e:	2001      	movs	r0, #1
 8003160:	f001 fad8 	bl	8004714 <Set_Motor>
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 6)
 8003164:	4b1b      	ldr	r3, [pc, #108]	@ (80031d4 <main+0x13c4>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b06      	cmp	r3, #6
 800316a:	f040 80c0 	bne.w	80032ee <main+0x14de>
			{
				static bool PenIsNotDelay = true;
				static uint64_t lastPressTime6 = 0;
				if (PenIsNotDelay)
 800316e:	4b37      	ldr	r3, [pc, #220]	@ (800324c <main+0x143c>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 80b4 	beq.w	80032e0 <main+0x14d0>
				{
					if (IsPress && currentTimer - lastPressTime6 >= 2000000)
 8003178:	4b15      	ldr	r3, [pc, #84]	@ (80031d0 <main+0x13c0>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80ab 	beq.w	80032d8 <main+0x14c8>
 8003182:	4b33      	ldr	r3, [pc, #204]	@ (8003250 <main+0x1440>)
 8003184:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003188:	4b32      	ldr	r3, [pc, #200]	@ (8003254 <main+0x1444>)
 800318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318e:	1a86      	subs	r6, r0, r2
 8003190:	613e      	str	r6, [r7, #16]
 8003192:	eb61 0303 	sbc.w	r3, r1, r3
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	4b2f      	ldr	r3, [pc, #188]	@ (8003258 <main+0x1448>)
 800319a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800319e:	4602      	mov	r2, r0
 80031a0:	429a      	cmp	r2, r3
 80031a2:	460b      	mov	r3, r1
 80031a4:	f173 0300 	sbcs.w	r3, r3, #0
 80031a8:	f0c0 8096 	bcc.w	80032d8 <main+0x14c8>
					{
						lastPressTime6 = currentTimer;
 80031ac:	4b28      	ldr	r3, [pc, #160]	@ (8003250 <main+0x1440>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	4928      	ldr	r1, [pc, #160]	@ (8003254 <main+0x1444>)
 80031b4:	e9c1 2300 	strd	r2, r3, [r1]
						if (TenPointMode)
 80031b8:	4b28      	ldr	r3, [pc, #160]	@ (800325c <main+0x144c>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d04f      	beq.n	8003260 <main+0x1450>
						{
							Mode = 2;
 80031c0:	4a04      	ldr	r2, [pc, #16]	@ (80031d4 <main+0x13c4>)
 80031c2:	2302      	movs	r3, #2
 80031c4:	7013      	strb	r3, [r2, #0]
						if (TenPointMode)
 80031c6:	e091      	b.n	80032ec <main+0x14dc>
 80031c8:	54442d18 	.word	0x54442d18
 80031cc:	400921fb 	.word	0x400921fb
 80031d0:	20000bce 	.word	0x20000bce
 80031d4:	20000bcc 	.word	0x20000bcc
 80031d8:	00000000 	.word	0x00000000
 80031dc:	20000ab0 	.word	0x20000ab0
 80031e0:	42c80000 	.word	0x42c80000
 80031e4:	c2c80000 	.word	0xc2c80000
 80031e8:	20000ba4 	.word	0x20000ba4
 80031ec:	43fa0000 	.word	0x43fa0000
 80031f0:	c3fa0000 	.word	0xc3fa0000
 80031f4:	20000ba8 	.word	0x20000ba8
 80031f8:	20000af8 	.word	0x20000af8
 80031fc:	20000bbc 	.word	0x20000bbc
 8003200:	20000b38 	.word	0x20000b38
 8003204:	20000bc0 	.word	0x20000bc0
 8003208:	200013d0 	.word	0x200013d0
 800320c:	20000200 	.word	0x20000200
 8003210:	20000204 	.word	0x20000204
 8003214:	20000208 	.word	0x20000208
 8003218:	20000c08 	.word	0x20000c08
 800321c:	3c23d70a 	.word	0x3c23d70a
 8003220:	20000bc4 	.word	0x20000bc4
 8003224:	20000218 	.word	0x20000218
 8003228:	2000021c 	.word	0x2000021c
 800322c:	20000c18 	.word	0x20000c18
 8003230:	20000c10 	.word	0x20000c10
 8003234:	20000bc8 	.word	0x20000bc8
 8003238:	20000aa8 	.word	0x20000aa8
 800323c:	40668000 	.word	0x40668000
 8003240:	20000b94 	.word	0x20000b94
 8003244:	2000132c 	.word	0x2000132c
 8003248:	20001370 	.word	0x20001370
 800324c:	2000022d 	.word	0x2000022d
 8003250:	20001310 	.word	0x20001310
 8003254:	200013d8 	.word	0x200013d8
 8003258:	001e8480 	.word	0x001e8480
 800325c:	20000c3a 	.word	0x20000c3a
						}
						else
						{
							TenPointArray[counter * 2] = Prismatic_QEIdata.mmPosition;
 8003260:	4b63      	ldr	r3, [pc, #396]	@ (80033f0 <main+0x15e0>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	0058      	lsls	r0, r3, #1
 8003266:	4b63      	ldr	r3, [pc, #396]	@ (80033f4 <main+0x15e4>)
 8003268:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800326a:	4a63      	ldr	r2, [pc, #396]	@ (80033f8 <main+0x15e8>)
 800326c:	0083      	lsls	r3, r0, #2
 800326e:	4413      	add	r3, r2
 8003270:	6019      	str	r1, [r3, #0]
							TenPointArray[(counter * 2) + 1] = Revolute_QEIdata.RadPosition;
 8003272:	4b5f      	ldr	r3, [pc, #380]	@ (80033f0 <main+0x15e0>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	1c58      	adds	r0, r3, #1
 800327a:	4b60      	ldr	r3, [pc, #384]	@ (80033fc <main+0x15ec>)
 800327c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800327e:	4a5e      	ldr	r2, [pc, #376]	@ (80033f8 <main+0x15e8>)
 8003280:	0083      	lsls	r3, r0, #2
 8003282:	4413      	add	r3, r2
 8003284:	6019      	str	r1, [r3, #0]
							SET_TARGET(counter, Prismatic_QEIdata.mmPosition, Revolute_QEIdata.RadPosition);
 8003286:	4b5a      	ldr	r3, [pc, #360]	@ (80033f0 <main+0x15e0>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	b25a      	sxtb	r2, r3
 800328c:	4b59      	ldr	r3, [pc, #356]	@ (80033f4 <main+0x15e4>)
 800328e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003292:	4b5a      	ldr	r3, [pc, #360]	@ (80033fc <main+0x15ec>)
 8003294:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003298:	eef0 0a47 	vmov.f32	s1, s14
 800329c:	eeb0 0a67 	vmov.f32	s0, s15
 80032a0:	4610      	mov	r0, r2
 80032a2:	f7fd fff1 	bl	8001288 <SET_TARGET>
							PenIsNotDelay = PenDelay();
 80032a6:	f000 fe2b 	bl	8003f00 <PenDelay>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4a54      	ldr	r2, [pc, #336]	@ (8003400 <main+0x15f0>)
 80032ae:	7013      	strb	r3, [r2, #0]

							counter++;
 80032b0:	4b4f      	ldr	r3, [pc, #316]	@ (80033f0 <main+0x15e0>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	4a4d      	ldr	r2, [pc, #308]	@ (80033f0 <main+0x15e0>)
 80032ba:	7013      	strb	r3, [r2, #0]
							if (counter >= 10)
 80032bc:	4b4c      	ldr	r3, [pc, #304]	@ (80033f0 <main+0x15e0>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b09      	cmp	r3, #9
 80032c2:	d913      	bls.n	80032ec <main+0x14dc>
							{
								counter = 0;
 80032c4:	4a4a      	ldr	r2, [pc, #296]	@ (80033f0 <main+0x15e0>)
 80032c6:	2300      	movs	r3, #0
 80032c8:	7013      	strb	r3, [r2, #0]
								testArraydone = true;
 80032ca:	4a4e      	ldr	r2, [pc, #312]	@ (8003404 <main+0x15f4>)
 80032cc:	2301      	movs	r3, #1
 80032ce:	7013      	strb	r3, [r2, #0]
								TenPointMode = true;
 80032d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003408 <main+0x15f8>)
 80032d2:	2301      	movs	r3, #1
 80032d4:	7013      	strb	r3, [r2, #0]
						if (TenPointMode)
 80032d6:	e009      	b.n	80032ec <main+0x14dc>
							}
						}
					}
					else
					{
						Mode = 1;
 80032d8:	4a4c      	ldr	r2, [pc, #304]	@ (800340c <main+0x15fc>)
 80032da:	2301      	movs	r3, #1
 80032dc:	7013      	strb	r3, [r2, #0]
 80032de:	e006      	b.n	80032ee <main+0x14de>
					}
				}
				else
				{
					PenIsNotDelay = PenDelay();
 80032e0:	f000 fe0e 	bl	8003f00 <PenDelay>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4a46      	ldr	r2, [pc, #280]	@ (8003400 <main+0x15f0>)
 80032e8:	7013      	strb	r3, [r2, #0]
 80032ea:	e000      	b.n	80032ee <main+0x14de>
						if (TenPointMode)
 80032ec:	bf00      	nop
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 7)
 80032ee:	4b47      	ldr	r3, [pc, #284]	@ (800340c <main+0x15fc>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b07      	cmp	r3, #7
 80032f4:	d128      	bne.n	8003348 <main+0x1538>
			{
				static uint64_t lastPressTime7 = 0;
				if (testArraydone && IsPress && currentTimer - lastPressTime7 >= 2000000)
 80032f6:	4b43      	ldr	r3, [pc, #268]	@ (8003404 <main+0x15f4>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d021      	beq.n	8003342 <main+0x1532>
 80032fe:	4b44      	ldr	r3, [pc, #272]	@ (8003410 <main+0x1600>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d01d      	beq.n	8003342 <main+0x1532>
 8003306:	4b43      	ldr	r3, [pc, #268]	@ (8003414 <main+0x1604>)
 8003308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800330c:	4b42      	ldr	r3, [pc, #264]	@ (8003418 <main+0x1608>)
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	1a86      	subs	r6, r0, r2
 8003314:	60be      	str	r6, [r7, #8]
 8003316:	eb61 0303 	sbc.w	r3, r1, r3
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	4b3f      	ldr	r3, [pc, #252]	@ (800341c <main+0x160c>)
 800331e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003322:	4602      	mov	r2, r0
 8003324:	429a      	cmp	r2, r3
 8003326:	460b      	mov	r3, r1
 8003328:	f173 0300 	sbcs.w	r3, r3, #0
 800332c:	d309      	bcc.n	8003342 <main+0x1532>
				{
					lastPressTime7 = currentTimer;
 800332e:	4b39      	ldr	r3, [pc, #228]	@ (8003414 <main+0x1604>)
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	4938      	ldr	r1, [pc, #224]	@ (8003418 <main+0x1608>)
 8003336:	e9c1 2300 	strd	r2, r3, [r1]
					TenPointMode = true;
 800333a:	4a33      	ldr	r2, [pc, #204]	@ (8003408 <main+0x15f8>)
 800333c:	2301      	movs	r3, #1
 800333e:	7013      	strb	r3, [r2, #0]
 8003340:	e002      	b.n	8003348 <main+0x1538>
				}
				else
				{
					Mode = 2;
 8003342:	4a32      	ldr	r2, [pc, #200]	@ (800340c <main+0x15fc>)
 8003344:	2302      	movs	r3, #2
 8003346:	7013      	strb	r3, [r2, #0]
				}
			}
			//////////////////////////////////////////////////////////////

			//////////////////////////////////////////////////////////////
			if (Mode == 8)
 8003348:	4b30      	ldr	r3, [pc, #192]	@ (800340c <main+0x15fc>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b08      	cmp	r3, #8
 800334e:	f47e ade8 	bne.w	8001f22 <main+0x112>
			{
				if (counter8 < 10)
 8003352:	4b33      	ldr	r3, [pc, #204]	@ (8003420 <main+0x1610>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b09      	cmp	r3, #9
 8003358:	d83b      	bhi.n	80033d2 <main+0x15c2>
				{
					goCenter8 = true;
 800335a:	4a32      	ldr	r2, [pc, #200]	@ (8003424 <main+0x1614>)
 800335c:	2301      	movs	r3, #1
 800335e:	7013      	strb	r3, [r2, #0]

					if (goCenter8)
 8003360:	4b30      	ldr	r3, [pc, #192]	@ (8003424 <main+0x1614>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d007      	beq.n	8003378 <main+0x1568>
					{
						TargetR = M_PI_2;
 8003368:	4a2f      	ldr	r2, [pc, #188]	@ (8003428 <main+0x1618>)
 800336a:	4b30      	ldr	r3, [pc, #192]	@ (800342c <main+0x161c>)
 800336c:	6013      	str	r3, [r2, #0]
						TargetP = 0;
 800336e:	4a30      	ldr	r2, [pc, #192]	@ (8003430 <main+0x1620>)
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e005      	b.n	8003384 <main+0x1574>
					}
					else
					{
						TargetR = M_PI_4;
 8003378:	4a2b      	ldr	r2, [pc, #172]	@ (8003428 <main+0x1618>)
 800337a:	4b2e      	ldr	r3, [pc, #184]	@ (8003434 <main+0x1624>)
 800337c:	6013      	str	r3, [r2, #0]
						TargetP = 150;
 800337e:	4a2c      	ldr	r2, [pc, #176]	@ (8003430 <main+0x1620>)
 8003380:	4b2d      	ldr	r3, [pc, #180]	@ (8003438 <main+0x1628>)
 8003382:	6013      	str	r3, [r2, #0]
					}

					if (CascadeControl_Step())
 8003384:	f001 fd48 	bl	8004e18 <CascadeControl_Step>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	f43e adc9 	beq.w	8001f22 <main+0x112>
					{
						if (PenDelay())
 8003390:	f000 fdb6 	bl	8003f00 <PenDelay>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	f43e adc3 	beq.w	8001f22 <main+0x112>
						{
							if (goCenter8)
 800339c:	4b21      	ldr	r3, [pc, #132]	@ (8003424 <main+0x1614>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <main+0x15a0>
							{
								counter8++;
 80033a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003420 <main+0x1610>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003420 <main+0x1610>)
 80033ae:	7013      	strb	r3, [r2, #0]
							}
							goCenter8 = !goCenter8;
 80033b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003424 <main+0x1614>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf14      	ite	ne
 80033b8:	2301      	movne	r3, #1
 80033ba:	2300      	moveq	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	f083 0301 	eor.w	r3, r3, #1
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	4a16      	ldr	r2, [pc, #88]	@ (8003424 <main+0x1614>)
 80033cc:	7013      	strb	r3, [r2, #0]
 80033ce:	f7fe bda8 	b.w	8001f22 <main+0x112>
						}
					}
				}
				else if (counter8 >= 10 && IsPress)
 80033d2:	4b13      	ldr	r3, [pc, #76]	@ (8003420 <main+0x1610>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b09      	cmp	r3, #9
 80033d8:	f67e ada3 	bls.w	8001f22 <main+0x112>
 80033dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003410 <main+0x1600>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f43e ad9e 	beq.w	8001f22 <main+0x112>
				{
					counter8 = 0;
 80033e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003420 <main+0x1610>)
 80033e8:	2300      	movs	r3, #0
 80033ea:	7013      	strb	r3, [r2, #0]
	{
 80033ec:	f7fe bd99 	b.w	8001f22 <main+0x112>
 80033f0:	20000c39 	.word	0x20000c39
 80033f4:	20000b38 	.word	0x20000b38
 80033f8:	200012bc 	.word	0x200012bc
 80033fc:	20000af8 	.word	0x20000af8
 8003400:	2000022d 	.word	0x2000022d
 8003404:	2000130c 	.word	0x2000130c
 8003408:	20000c3a 	.word	0x20000c3a
 800340c:	20000bcc 	.word	0x20000bcc
 8003410:	20000bce 	.word	0x20000bce
 8003414:	20001310 	.word	0x20001310
 8003418:	200013e0 	.word	0x200013e0
 800341c:	001e8480 	.word	0x001e8480
 8003420:	20000c38 	.word	0x20000c38
 8003424:	2000022c 	.word	0x2000022c
 8003428:	20000b94 	.word	0x20000b94
 800342c:	3fc90fdb 	.word	0x3fc90fdb
 8003430:	20000b98 	.word	0x20000b98
 8003434:	3f490fdb 	.word	0x3f490fdb
 8003438:	43160000 	.word	0x43160000

0800343c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b094      	sub	sp, #80	@ 0x50
 8003440:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003442:	f107 0318 	add.w	r3, r7, #24
 8003446:	2238      	movs	r2, #56	@ 0x38
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f008 fc34 	bl	800bcb8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	605a      	str	r2, [r3, #4]
 8003458:	609a      	str	r2, [r3, #8]
 800345a:	60da      	str	r2, [r3, #12]
 800345c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800345e:	2000      	movs	r0, #0
 8003460:	f002 ff72 	bl	8006348 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003464:	2302      	movs	r3, #2
 8003466:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003468:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800346c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800346e:	2340      	movs	r3, #64	@ 0x40
 8003470:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003472:	2302      	movs	r3, #2
 8003474:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003476:	2302      	movs	r3, #2
 8003478:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800347a:	2304      	movs	r3, #4
 800347c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800347e:	2355      	movs	r3, #85	@ 0x55
 8003480:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003482:	2302      	movs	r3, #2
 8003484:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003486:	2302      	movs	r3, #2
 8003488:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800348a:	2302      	movs	r3, #2
 800348c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800348e:	f107 0318 	add.w	r3, r7, #24
 8003492:	4618      	mov	r0, r3
 8003494:	f003 f80c 	bl	80064b0 <HAL_RCC_OscConfig>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <SystemClock_Config+0x66>
	{
		Error_Handler();
 800349e:	f001 fd3d 	bl	8004f1c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034a2:	230f      	movs	r3, #15
 80034a4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034a6:	2303      	movs	r3, #3
 80034a8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80034b6:	1d3b      	adds	r3, r7, #4
 80034b8:	2104      	movs	r1, #4
 80034ba:	4618      	mov	r0, r3
 80034bc:	f003 fb0a 	bl	8006ad4 <HAL_RCC_ClockConfig>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80034c6:	f001 fd29 	bl	8004f1c <Error_Handler>
	}
}
 80034ca:	bf00      	nop
 80034cc:	3750      	adds	r7, #80	@ 0x50
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08c      	sub	sp, #48	@ 0x30
 80034d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80034da:	f107 031c 	add.w	r3, r7, #28
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	60da      	str	r2, [r3, #12]
 80034e8:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80034ea:	f107 030c 	add.w	r3, r7, #12
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	609a      	str	r2, [r3, #8]
 80034f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034f8:	463b      	mov	r3, r7
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	605a      	str	r2, [r3, #4]
 8003500:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003502:	4b35      	ldr	r3, [pc, #212]	@ (80035d8 <MX_TIM1_Init+0x104>)
 8003504:	4a35      	ldr	r2, [pc, #212]	@ (80035dc <MX_TIM1_Init+0x108>)
 8003506:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 8003508:	4b33      	ldr	r3, [pc, #204]	@ (80035d8 <MX_TIM1_Init+0x104>)
 800350a:	22a9      	movs	r2, #169	@ 0xa9
 800350c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800350e:	4b32      	ldr	r3, [pc, #200]	@ (80035d8 <MX_TIM1_Init+0x104>)
 8003510:	2200      	movs	r2, #0
 8003512:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003514:	4b30      	ldr	r3, [pc, #192]	@ (80035d8 <MX_TIM1_Init+0x104>)
 8003516:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800351a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800351c:	4b2e      	ldr	r3, [pc, #184]	@ (80035d8 <MX_TIM1_Init+0x104>)
 800351e:	2200      	movs	r2, #0
 8003520:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003522:	4b2d      	ldr	r3, [pc, #180]	@ (80035d8 <MX_TIM1_Init+0x104>)
 8003524:	2200      	movs	r2, #0
 8003526:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003528:	4b2b      	ldr	r3, [pc, #172]	@ (80035d8 <MX_TIM1_Init+0x104>)
 800352a:	2200      	movs	r2, #0
 800352c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800352e:	482a      	ldr	r0, [pc, #168]	@ (80035d8 <MX_TIM1_Init+0x104>)
 8003530:	f004 fa06 	bl	8007940 <HAL_TIM_IC_Init>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <MX_TIM1_Init+0x6a>
	{
		Error_Handler();
 800353a:	f001 fcef 	bl	8004f1c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800353e:	2304      	movs	r3, #4
 8003540:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003542:	2360      	movs	r3, #96	@ 0x60
 8003544:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003546:	2302      	movs	r3, #2
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800354a:	2300      	movs	r3, #0
 800354c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003552:	f107 031c 	add.w	r3, r7, #28
 8003556:	4619      	mov	r1, r3
 8003558:	481f      	ldr	r0, [pc, #124]	@ (80035d8 <MX_TIM1_Init+0x104>)
 800355a:	f005 f9d1 	bl	8008900 <HAL_TIM_SlaveConfigSynchro>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <MX_TIM1_Init+0x94>
	{
		Error_Handler();
 8003564:	f001 fcda 	bl	8004f1c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800356c:	2302      	movs	r3, #2
 800356e:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003578:	f107 030c 	add.w	r3, r7, #12
 800357c:	2200      	movs	r2, #0
 800357e:	4619      	mov	r1, r3
 8003580:	4815      	ldr	r0, [pc, #84]	@ (80035d8 <MX_TIM1_Init+0x104>)
 8003582:	f004 fef6 	bl	8008372 <HAL_TIM_IC_ConfigChannel>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <MX_TIM1_Init+0xbc>
	{
		Error_Handler();
 800358c:	f001 fcc6 	bl	8004f1c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003590:	2302      	movs	r3, #2
 8003592:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003594:	2301      	movs	r3, #1
 8003596:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003598:	f107 030c 	add.w	r3, r7, #12
 800359c:	2204      	movs	r2, #4
 800359e:	4619      	mov	r1, r3
 80035a0:	480d      	ldr	r0, [pc, #52]	@ (80035d8 <MX_TIM1_Init+0x104>)
 80035a2:	f004 fee6 	bl	8008372 <HAL_TIM_IC_ConfigChannel>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM1_Init+0xdc>
	{
		Error_Handler();
 80035ac:	f001 fcb6 	bl	8004f1c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b0:	2300      	movs	r3, #0
 80035b2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035b4:	2300      	movs	r3, #0
 80035b6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035bc:	463b      	mov	r3, r7
 80035be:	4619      	mov	r1, r3
 80035c0:	4805      	ldr	r0, [pc, #20]	@ (80035d8 <MX_TIM1_Init+0x104>)
 80035c2:	f006 fab9 	bl	8009b38 <HAL_TIMEx_MasterConfigSynchronization>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <MX_TIM1_Init+0xfc>
	{
		Error_Handler();
 80035cc:	f001 fca6 	bl	8004f1c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
}
 80035d0:	bf00      	nop
 80035d2:	3730      	adds	r7, #48	@ 0x30
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200002b0 	.word	0x200002b0
 80035dc:	40012c00 	.word	0x40012c00

080035e0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08c      	sub	sp, #48	@ 0x30
 80035e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80035e6:	f107 031c 	add.w	r3, r7, #28
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	609a      	str	r2, [r3, #8]
 80035f2:	60da      	str	r2, [r3, #12]
 80035f4:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80035f6:	f107 030c 	add.w	r3, r7, #12
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	609a      	str	r2, [r3, #8]
 8003602:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003604:	463b      	mov	r3, r7
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800360e:	4b33      	ldr	r3, [pc, #204]	@ (80036dc <MX_TIM2_Init+0xfc>)
 8003610:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003614:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 8003616:	4b31      	ldr	r3, [pc, #196]	@ (80036dc <MX_TIM2_Init+0xfc>)
 8003618:	22a9      	movs	r2, #169	@ 0xa9
 800361a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800361c:	4b2f      	ldr	r3, [pc, #188]	@ (80036dc <MX_TIM2_Init+0xfc>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003622:	4b2e      	ldr	r3, [pc, #184]	@ (80036dc <MX_TIM2_Init+0xfc>)
 8003624:	f04f 32ff 	mov.w	r2, #4294967295
 8003628:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800362a:	4b2c      	ldr	r3, [pc, #176]	@ (80036dc <MX_TIM2_Init+0xfc>)
 800362c:	2200      	movs	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003630:	4b2a      	ldr	r3, [pc, #168]	@ (80036dc <MX_TIM2_Init+0xfc>)
 8003632:	2200      	movs	r2, #0
 8003634:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003636:	4829      	ldr	r0, [pc, #164]	@ (80036dc <MX_TIM2_Init+0xfc>)
 8003638:	f004 f982 	bl	8007940 <HAL_TIM_IC_Init>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_TIM2_Init+0x66>
	{
		Error_Handler();
 8003642:	f001 fc6b 	bl	8004f1c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003646:	2304      	movs	r3, #4
 8003648:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800364a:	2350      	movs	r3, #80	@ 0x50
 800364c:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800364e:	2300      	movs	r3, #0
 8003650:	627b      	str	r3, [r7, #36]	@ 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003652:	2300      	movs	r3, #0
 8003654:	62bb      	str	r3, [r7, #40]	@ 0x28
	sSlaveConfig.TriggerFilter = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800365a:	f107 031c 	add.w	r3, r7, #28
 800365e:	4619      	mov	r1, r3
 8003660:	481e      	ldr	r0, [pc, #120]	@ (80036dc <MX_TIM2_Init+0xfc>)
 8003662:	f005 f94d 	bl	8008900 <HAL_TIM_SlaveConfigSynchro>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <MX_TIM2_Init+0x90>
	{
		Error_Handler();
 800366c:	f001 fc56 	bl	8004f1c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003674:	2301      	movs	r3, #1
 8003676:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003680:	f107 030c 	add.w	r3, r7, #12
 8003684:	2200      	movs	r2, #0
 8003686:	4619      	mov	r1, r3
 8003688:	4814      	ldr	r0, [pc, #80]	@ (80036dc <MX_TIM2_Init+0xfc>)
 800368a:	f004 fe72 	bl	8008372 <HAL_TIM_IC_ConfigChannel>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <MX_TIM2_Init+0xb8>
	{
		Error_Handler();
 8003694:	f001 fc42 	bl	8004f1c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003698:	2302      	movs	r3, #2
 800369a:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800369c:	2302      	movs	r3, #2
 800369e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80036a0:	f107 030c 	add.w	r3, r7, #12
 80036a4:	2204      	movs	r2, #4
 80036a6:	4619      	mov	r1, r3
 80036a8:	480c      	ldr	r0, [pc, #48]	@ (80036dc <MX_TIM2_Init+0xfc>)
 80036aa:	f004 fe62 	bl	8008372 <HAL_TIM_IC_ConfigChannel>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <MX_TIM2_Init+0xd8>
	{
		Error_Handler();
 80036b4:	f001 fc32 	bl	8004f1c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036b8:	2300      	movs	r3, #0
 80036ba:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036bc:	2300      	movs	r3, #0
 80036be:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036c0:	463b      	mov	r3, r7
 80036c2:	4619      	mov	r1, r3
 80036c4:	4805      	ldr	r0, [pc, #20]	@ (80036dc <MX_TIM2_Init+0xfc>)
 80036c6:	f006 fa37 	bl	8009b38 <HAL_TIMEx_MasterConfigSynchronization>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <MX_TIM2_Init+0xf4>
	{
		Error_Handler();
 80036d0:	f001 fc24 	bl	8004f1c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 80036d4:	bf00      	nop
 80036d6:	3730      	adds	r7, #48	@ 0x30
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	2000037c 	.word	0x2000037c

080036e0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08c      	sub	sp, #48	@ 0x30
 80036e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 80036e6:	f107 030c 	add.w	r3, r7, #12
 80036ea:	2224      	movs	r2, #36	@ 0x24
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f008 fae2 	bl	800bcb8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f4:	463b      	mov	r3, r7
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	605a      	str	r2, [r3, #4]
 80036fc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80036fe:	4b21      	ldr	r3, [pc, #132]	@ (8003784 <MX_TIM3_Init+0xa4>)
 8003700:	4a21      	ldr	r2, [pc, #132]	@ (8003788 <MX_TIM3_Init+0xa8>)
 8003702:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003704:	4b1f      	ldr	r3, [pc, #124]	@ (8003784 <MX_TIM3_Init+0xa4>)
 8003706:	2200      	movs	r2, #0
 8003708:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800370a:	4b1e      	ldr	r3, [pc, #120]	@ (8003784 <MX_TIM3_Init+0xa4>)
 800370c:	2200      	movs	r2, #0
 800370e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003710:	4b1c      	ldr	r3, [pc, #112]	@ (8003784 <MX_TIM3_Init+0xa4>)
 8003712:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003716:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003718:	4b1a      	ldr	r3, [pc, #104]	@ (8003784 <MX_TIM3_Init+0xa4>)
 800371a:	2200      	movs	r2, #0
 800371c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800371e:	4b19      	ldr	r3, [pc, #100]	@ (8003784 <MX_TIM3_Init+0xa4>)
 8003720:	2200      	movs	r2, #0
 8003722:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003724:	2303      	movs	r3, #3
 8003726:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800372c:	2301      	movs	r3, #1
 800372e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003730:	2300      	movs	r3, #0
 8003732:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 8003734:	2304      	movs	r3, #4
 8003736:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003738:	2300      	movs	r3, #0
 800373a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800373c:	2301      	movs	r3, #1
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003740:	2300      	movs	r3, #0
 8003742:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 8003744:	2304      	movs	r3, #4
 8003746:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003748:	f107 030c 	add.w	r3, r7, #12
 800374c:	4619      	mov	r1, r3
 800374e:	480d      	ldr	r0, [pc, #52]	@ (8003784 <MX_TIM3_Init+0xa4>)
 8003750:	f004 fb54 	bl	8007dfc <HAL_TIM_Encoder_Init>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 800375a:	f001 fbdf 	bl	8004f1c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800375e:	2300      	movs	r3, #0
 8003760:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003766:	463b      	mov	r3, r7
 8003768:	4619      	mov	r1, r3
 800376a:	4806      	ldr	r0, [pc, #24]	@ (8003784 <MX_TIM3_Init+0xa4>)
 800376c:	f006 f9e4 	bl	8009b38 <HAL_TIMEx_MasterConfigSynchronization>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <MX_TIM3_Init+0x9a>
	{
		Error_Handler();
 8003776:	f001 fbd1 	bl	8004f1c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
}
 800377a:	bf00      	nop
 800377c:	3730      	adds	r7, #48	@ 0x30
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000448 	.word	0x20000448
 8003788:	40000400 	.word	0x40000400

0800378c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08c      	sub	sp, #48	@ 0x30
 8003790:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8003792:	f107 030c 	add.w	r3, r7, #12
 8003796:	2224      	movs	r2, #36	@ 0x24
 8003798:	2100      	movs	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f008 fa8c 	bl	800bcb8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037a0:	463b      	mov	r3, r7
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80037aa:	4b21      	ldr	r3, [pc, #132]	@ (8003830 <MX_TIM4_Init+0xa4>)
 80037ac:	4a21      	ldr	r2, [pc, #132]	@ (8003834 <MX_TIM4_Init+0xa8>)
 80037ae:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80037b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003830 <MX_TIM4_Init+0xa4>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003830 <MX_TIM4_Init+0xa4>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80037bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003830 <MX_TIM4_Init+0xa4>)
 80037be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037c2:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003830 <MX_TIM4_Init+0xa4>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ca:	4b19      	ldr	r3, [pc, #100]	@ (8003830 <MX_TIM4_Init+0xa4>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037d0:	2303      	movs	r3, #3
 80037d2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037d4:	2300      	movs	r3, #0
 80037d6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037d8:	2301      	movs	r3, #1
 80037da:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037dc:	2300      	movs	r3, #0
 80037de:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 4;
 80037e0:	2304      	movs	r3, #4
 80037e2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037e4:	2300      	movs	r3, #0
 80037e6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037e8:	2301      	movs	r3, #1
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037ec:	2300      	movs	r3, #0
 80037ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 4;
 80037f0:	2304      	movs	r3, #4
 80037f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80037f4:	f107 030c 	add.w	r3, r7, #12
 80037f8:	4619      	mov	r1, r3
 80037fa:	480d      	ldr	r0, [pc, #52]	@ (8003830 <MX_TIM4_Init+0xa4>)
 80037fc:	f004 fafe 	bl	8007dfc <HAL_TIM_Encoder_Init>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_TIM4_Init+0x7e>
	{
		Error_Handler();
 8003806:	f001 fb89 	bl	8004f1c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003812:	463b      	mov	r3, r7
 8003814:	4619      	mov	r1, r3
 8003816:	4806      	ldr	r0, [pc, #24]	@ (8003830 <MX_TIM4_Init+0xa4>)
 8003818:	f006 f98e 	bl	8009b38 <HAL_TIMEx_MasterConfigSynchronization>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_TIM4_Init+0x9a>
	{
		Error_Handler();
 8003822:	f001 fb7b 	bl	8004f1c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
}
 8003826:	bf00      	nop
 8003828:	3730      	adds	r7, #48	@ 0x30
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000514 	.word	0x20000514
 8003834:	40000800 	.word	0x40000800

08003838 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800383e:	f107 0310 	add.w	r3, r7, #16
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003856:	4b1d      	ldr	r3, [pc, #116]	@ (80038cc <MX_TIM5_Init+0x94>)
 8003858:	4a1d      	ldr	r2, [pc, #116]	@ (80038d0 <MX_TIM5_Init+0x98>)
 800385a:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 800385c:	4b1b      	ldr	r3, [pc, #108]	@ (80038cc <MX_TIM5_Init+0x94>)
 800385e:	22a9      	movs	r2, #169	@ 0xa9
 8003860:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003862:	4b1a      	ldr	r3, [pc, #104]	@ (80038cc <MX_TIM5_Init+0x94>)
 8003864:	2200      	movs	r2, #0
 8003866:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003868:	4b18      	ldr	r3, [pc, #96]	@ (80038cc <MX_TIM5_Init+0x94>)
 800386a:	f04f 32ff 	mov.w	r2, #4294967295
 800386e:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003870:	4b16      	ldr	r3, [pc, #88]	@ (80038cc <MX_TIM5_Init+0x94>)
 8003872:	2200      	movs	r2, #0
 8003874:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003876:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <MX_TIM5_Init+0x94>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800387c:	4813      	ldr	r0, [pc, #76]	@ (80038cc <MX_TIM5_Init+0x94>)
 800387e:	f003 fd93 	bl	80073a8 <HAL_TIM_Base_Init>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_TIM5_Init+0x54>
	{
		Error_Handler();
 8003888:	f001 fb48 	bl	8004f1c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800388c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003890:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003892:	f107 0310 	add.w	r3, r7, #16
 8003896:	4619      	mov	r1, r3
 8003898:	480c      	ldr	r0, [pc, #48]	@ (80038cc <MX_TIM5_Init+0x94>)
 800389a:	f004 ff1b 	bl	80086d4 <HAL_TIM_ConfigClockSource>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MX_TIM5_Init+0x70>
	{
		Error_Handler();
 80038a4:	f001 fb3a 	bl	8004f1c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a8:	2300      	movs	r3, #0
 80038aa:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80038b0:	1d3b      	adds	r3, r7, #4
 80038b2:	4619      	mov	r1, r3
 80038b4:	4805      	ldr	r0, [pc, #20]	@ (80038cc <MX_TIM5_Init+0x94>)
 80038b6:	f006 f93f 	bl	8009b38 <HAL_TIMEx_MasterConfigSynchronization>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_TIM5_Init+0x8c>
	{
		Error_Handler();
 80038c0:	f001 fb2c 	bl	8004f1c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
}
 80038c4:	bf00      	nop
 80038c6:	3720      	adds	r7, #32
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	200005e0 	.word	0x200005e0
 80038d0:	40000c00 	.word	0x40000c00

080038d4 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b09c      	sub	sp, #112	@ 0x70
 80038d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	609a      	str	r2, [r3, #8]
 80038e6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80038f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	611a      	str	r2, [r3, #16]
 8003904:	615a      	str	r2, [r3, #20]
 8003906:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003908:	1d3b      	adds	r3, r7, #4
 800390a:	2234      	movs	r2, #52	@ 0x34
 800390c:	2100      	movs	r1, #0
 800390e:	4618      	mov	r0, r3
 8003910:	f008 f9d2 	bl	800bcb8 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003914:	4b4b      	ldr	r3, [pc, #300]	@ (8003a44 <MX_TIM8_Init+0x170>)
 8003916:	4a4c      	ldr	r2, [pc, #304]	@ (8003a48 <MX_TIM8_Init+0x174>)
 8003918:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 800391a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a44 <MX_TIM8_Init+0x170>)
 800391c:	22a9      	movs	r2, #169	@ 0xa9
 800391e:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003920:	4b48      	ldr	r3, [pc, #288]	@ (8003a44 <MX_TIM8_Init+0x170>)
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 100;
 8003926:	4b47      	ldr	r3, [pc, #284]	@ (8003a44 <MX_TIM8_Init+0x170>)
 8003928:	2264      	movs	r2, #100	@ 0x64
 800392a:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800392c:	4b45      	ldr	r3, [pc, #276]	@ (8003a44 <MX_TIM8_Init+0x170>)
 800392e:	2200      	movs	r2, #0
 8003930:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8003932:	4b44      	ldr	r3, [pc, #272]	@ (8003a44 <MX_TIM8_Init+0x170>)
 8003934:	2200      	movs	r2, #0
 8003936:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003938:	4b42      	ldr	r3, [pc, #264]	@ (8003a44 <MX_TIM8_Init+0x170>)
 800393a:	2200      	movs	r2, #0
 800393c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800393e:	4841      	ldr	r0, [pc, #260]	@ (8003a44 <MX_TIM8_Init+0x170>)
 8003940:	f003 fd32 	bl	80073a8 <HAL_TIM_Base_Init>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <MX_TIM8_Init+0x7a>
	{
		Error_Handler();
 800394a:	f001 fae7 	bl	8004f1c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800394e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003952:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003954:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003958:	4619      	mov	r1, r3
 800395a:	483a      	ldr	r0, [pc, #232]	@ (8003a44 <MX_TIM8_Init+0x170>)
 800395c:	f004 feba 	bl	80086d4 <HAL_TIM_ConfigClockSource>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 8003966:	f001 fad9 	bl	8004f1c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800396a:	4836      	ldr	r0, [pc, #216]	@ (8003a44 <MX_TIM8_Init+0x170>)
 800396c:	f003 fe68 	bl	8007640 <HAL_TIM_PWM_Init>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <MX_TIM8_Init+0xa6>
	{
		Error_Handler();
 8003976:	f001 fad1 	bl	8004f1c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800397a:	2300      	movs	r3, #0
 800397c:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003982:	2300      	movs	r3, #0
 8003984:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003986:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800398a:	4619      	mov	r1, r3
 800398c:	482d      	ldr	r0, [pc, #180]	@ (8003a44 <MX_TIM8_Init+0x170>)
 800398e:	f006 f8d3 	bl	8009b38 <HAL_TIMEx_MasterConfigSynchronization>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_TIM8_Init+0xc8>
	{
		Error_Handler();
 8003998:	f001 fac0 	bl	8004f1c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800399c:	2360      	movs	r3, #96	@ 0x60
 800399e:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 100;
 80039a0:	2364      	movs	r3, #100	@ 0x64
 80039a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039a4:	2300      	movs	r3, #0
 80039a6:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039a8:	2300      	movs	r3, #0
 80039aa:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039ac:	2300      	movs	r3, #0
 80039ae:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039b0:	2300      	movs	r3, #0
 80039b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039b4:	2300      	movs	r3, #0
 80039b6:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80039b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80039bc:	2208      	movs	r2, #8
 80039be:	4619      	mov	r1, r3
 80039c0:	4820      	ldr	r0, [pc, #128]	@ (8003a44 <MX_TIM8_Init+0x170>)
 80039c2:	f004 fd73 	bl	80084ac <HAL_TIM_PWM_ConfigChannel>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <MX_TIM8_Init+0xfc>
	{
		Error_Handler();
 80039cc:	f001 faa6 	bl	8004f1c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80039d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80039d4:	220c      	movs	r2, #12
 80039d6:	4619      	mov	r1, r3
 80039d8:	481a      	ldr	r0, [pc, #104]	@ (8003a44 <MX_TIM8_Init+0x170>)
 80039da:	f004 fd67 	bl	80084ac <HAL_TIM_PWM_ConfigChannel>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <MX_TIM8_Init+0x114>
	{
		Error_Handler();
 80039e4:	f001 fa9a 	bl	8004f1c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a00:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003a06:	2300      	movs	r3, #0
 8003a08:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003a0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a12:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003a20:	1d3b      	adds	r3, r7, #4
 8003a22:	4619      	mov	r1, r3
 8003a24:	4807      	ldr	r0, [pc, #28]	@ (8003a44 <MX_TIM8_Init+0x170>)
 8003a26:	f006 f91d 	bl	8009c64 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <MX_TIM8_Init+0x160>
	{
		Error_Handler();
 8003a30:	f001 fa74 	bl	8004f1c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8003a34:	4803      	ldr	r0, [pc, #12]	@ (8003a44 <MX_TIM8_Init+0x170>)
 8003a36:	f001 fc05 	bl	8005244 <HAL_TIM_MspPostInit>
}
 8003a3a:	bf00      	nop
 8003a3c:	3770      	adds	r7, #112	@ 0x70
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	200006ac 	.word	0x200006ac
 8003a48:	40013400 	.word	0x40013400

08003a4c <MX_TIM15_Init>:
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b09c      	sub	sp, #112	@ 0x70
 8003a50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a52:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	609a      	str	r2, [r3, #8]
 8003a5e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003a6c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	611a      	str	r2, [r3, #16]
 8003a7c:	615a      	str	r2, [r3, #20]
 8003a7e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	2234      	movs	r2, #52	@ 0x34
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f008 f916 	bl	800bcb8 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8003a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b8c <MX_TIM15_Init+0x140>)
 8003a8e:	4a40      	ldr	r2, [pc, #256]	@ (8003b90 <MX_TIM15_Init+0x144>)
 8003a90:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 169;
 8003a92:	4b3e      	ldr	r3, [pc, #248]	@ (8003b8c <MX_TIM15_Init+0x140>)
 8003a94:	22a9      	movs	r2, #169	@ 0xa9
 8003a96:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a98:	4b3c      	ldr	r3, [pc, #240]	@ (8003b8c <MX_TIM15_Init+0x140>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 20000;
 8003a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b8c <MX_TIM15_Init+0x140>)
 8003aa0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8003aa4:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aa6:	4b39      	ldr	r3, [pc, #228]	@ (8003b8c <MX_TIM15_Init+0x140>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8003aac:	4b37      	ldr	r3, [pc, #220]	@ (8003b8c <MX_TIM15_Init+0x140>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ab2:	4b36      	ldr	r3, [pc, #216]	@ (8003b8c <MX_TIM15_Init+0x140>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003ab8:	4834      	ldr	r0, [pc, #208]	@ (8003b8c <MX_TIM15_Init+0x140>)
 8003aba:	f003 fc75 	bl	80073a8 <HAL_TIM_Base_Init>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_TIM15_Init+0x7c>
	{
		Error_Handler();
 8003ac4:	f001 fa2a 	bl	8004f1c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003acc:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003ace:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	482d      	ldr	r0, [pc, #180]	@ (8003b8c <MX_TIM15_Init+0x140>)
 8003ad6:	f004 fdfd 	bl	80086d4 <HAL_TIM_ConfigClockSource>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_TIM15_Init+0x98>
	{
		Error_Handler();
 8003ae0:	f001 fa1c 	bl	8004f1c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003ae4:	4829      	ldr	r0, [pc, #164]	@ (8003b8c <MX_TIM15_Init+0x140>)
 8003ae6:	f003 fdab 	bl	8007640 <HAL_TIM_PWM_Init>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <MX_TIM15_Init+0xa8>
	{
		Error_Handler();
 8003af0:	f001 fa14 	bl	8004f1c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003af4:	2300      	movs	r3, #0
 8003af6:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003afc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b00:	4619      	mov	r1, r3
 8003b02:	4822      	ldr	r0, [pc, #136]	@ (8003b8c <MX_TIM15_Init+0x140>)
 8003b04:	f006 f818 	bl	8009b38 <HAL_TIMEx_MasterConfigSynchronization>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_TIM15_Init+0xc6>
	{
		Error_Handler();
 8003b0e:	f001 fa05 	bl	8004f1c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b12:	2360      	movs	r3, #96	@ 0x60
 8003b14:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b26:	2300      	movs	r3, #0
 8003b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b2e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b32:	2200      	movs	r2, #0
 8003b34:	4619      	mov	r1, r3
 8003b36:	4815      	ldr	r0, [pc, #84]	@ (8003b8c <MX_TIM15_Init+0x140>)
 8003b38:	f004 fcb8 	bl	80084ac <HAL_TIM_PWM_ConfigChannel>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <MX_TIM15_Init+0xfa>
	{
		Error_Handler();
 8003b42:	f001 f9eb 	bl	8004f1c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b5e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003b68:	1d3b      	adds	r3, r7, #4
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4807      	ldr	r0, [pc, #28]	@ (8003b8c <MX_TIM15_Init+0x140>)
 8003b6e:	f006 f879 	bl	8009c64 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <MX_TIM15_Init+0x130>
	{
		Error_Handler();
 8003b78:	f001 f9d0 	bl	8004f1c <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8003b7c:	4803      	ldr	r0, [pc, #12]	@ (8003b8c <MX_TIM15_Init+0x140>)
 8003b7e:	f001 fb61 	bl	8005244 <HAL_TIM_MspPostInit>
}
 8003b82:	bf00      	nop
 8003b84:	3770      	adds	r7, #112	@ 0x70
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000778 	.word	0x20000778
 8003b90:	40014000 	.word	0x40014000

08003b94 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8003b98:	4b14      	ldr	r3, [pc, #80]	@ (8003bec <MX_TIM16_Init+0x58>)
 8003b9a:	4a15      	ldr	r2, [pc, #84]	@ (8003bf0 <MX_TIM16_Init+0x5c>)
 8003b9c:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 8003b9e:	4b13      	ldr	r3, [pc, #76]	@ (8003bec <MX_TIM16_Init+0x58>)
 8003ba0:	22a9      	movs	r2, #169	@ 0xa9
 8003ba2:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba4:	4b11      	ldr	r3, [pc, #68]	@ (8003bec <MX_TIM16_Init+0x58>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 8003baa:	4b10      	ldr	r3, [pc, #64]	@ (8003bec <MX_TIM16_Init+0x58>)
 8003bac:	f240 4279 	movw	r2, #1145	@ 0x479
 8003bb0:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003bec <MX_TIM16_Init+0x58>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bec <MX_TIM16_Init+0x58>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <MX_TIM16_Init+0x58>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003bc4:	4809      	ldr	r0, [pc, #36]	@ (8003bec <MX_TIM16_Init+0x58>)
 8003bc6:	f003 fbef 	bl	80073a8 <HAL_TIM_Base_Init>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <MX_TIM16_Init+0x40>
	{
		Error_Handler();
 8003bd0:	f001 f9a4 	bl	8004f1c <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003bd4:	2108      	movs	r1, #8
 8003bd6:	4805      	ldr	r0, [pc, #20]	@ (8003bec <MX_TIM16_Init+0x58>)
 8003bd8:	f004 f81a 	bl	8007c10 <HAL_TIM_OnePulse_Init>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <MX_TIM16_Init+0x52>
	{
		Error_Handler();
 8003be2:	f001 f99b 	bl	8004f1c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000844 	.word	0x20000844
 8003bf0:	40014400 	.word	0x40014400

08003bf4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003bf8:	4b23      	ldr	r3, [pc, #140]	@ (8003c88 <MX_USART2_UART_Init+0x94>)
 8003bfa:	4a24      	ldr	r2, [pc, #144]	@ (8003c8c <MX_USART2_UART_Init+0x98>)
 8003bfc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003bfe:	4b22      	ldr	r3, [pc, #136]	@ (8003c88 <MX_USART2_UART_Init+0x94>)
 8003c00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c04:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003c06:	4b20      	ldr	r3, [pc, #128]	@ (8003c88 <MX_USART2_UART_Init+0x94>)
 8003c08:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c0c:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003c88 <MX_USART2_UART_Init+0x94>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8003c14:	4b1c      	ldr	r3, [pc, #112]	@ (8003c88 <MX_USART2_UART_Init+0x94>)
 8003c16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c1a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c88 <MX_USART2_UART_Init+0x94>)
 8003c1e:	220c      	movs	r2, #12
 8003c20:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c22:	4b19      	ldr	r3, [pc, #100]	@ (8003c88 <MX_USART2_UART_Init+0x94>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c28:	4b17      	ldr	r3, [pc, #92]	@ (8003c88 <MX_USART2_UART_Init+0x94>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c2e:	4b16      	ldr	r3, [pc, #88]	@ (8003c88 <MX_USART2_UART_Init+0x94>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c34:	4b14      	ldr	r3, [pc, #80]	@ (8003c88 <MX_USART2_UART_Init+0x94>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c3a:	4b13      	ldr	r3, [pc, #76]	@ (8003c88 <MX_USART2_UART_Init+0x94>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c40:	4811      	ldr	r0, [pc, #68]	@ (8003c88 <MX_USART2_UART_Init+0x94>)
 8003c42:	f006 f8f3 	bl	8009e2c <HAL_UART_Init>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_USART2_UART_Init+0x5c>
	{
		Error_Handler();
 8003c4c:	f001 f966 	bl	8004f1c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c50:	2100      	movs	r1, #0
 8003c52:	480d      	ldr	r0, [pc, #52]	@ (8003c88 <MX_USART2_UART_Init+0x94>)
 8003c54:	f007 ff2f 	bl	800bab6 <HAL_UARTEx_SetTxFifoThreshold>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_USART2_UART_Init+0x6e>
	{
		Error_Handler();
 8003c5e:	f001 f95d 	bl	8004f1c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c62:	2100      	movs	r1, #0
 8003c64:	4808      	ldr	r0, [pc, #32]	@ (8003c88 <MX_USART2_UART_Init+0x94>)
 8003c66:	f007 ff64 	bl	800bb32 <HAL_UARTEx_SetRxFifoThreshold>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_USART2_UART_Init+0x80>
	{
		Error_Handler();
 8003c70:	f001 f954 	bl	8004f1c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003c74:	4804      	ldr	r0, [pc, #16]	@ (8003c88 <MX_USART2_UART_Init+0x94>)
 8003c76:	f007 fee5 	bl	800ba44 <HAL_UARTEx_DisableFifoMode>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_USART2_UART_Init+0x90>
	{
		Error_Handler();
 8003c80:	f001 f94c 	bl	8004f1c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8003c84:	bf00      	nop
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000910 	.word	0x20000910
 8003c8c:	40004400 	.word	0x40004400

08003c90 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003c96:	4b16      	ldr	r3, [pc, #88]	@ (8003cf0 <MX_DMA_Init+0x60>)
 8003c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c9a:	4a15      	ldr	r2, [pc, #84]	@ (8003cf0 <MX_DMA_Init+0x60>)
 8003c9c:	f043 0304 	orr.w	r3, r3, #4
 8003ca0:	6493      	str	r3, [r2, #72]	@ 0x48
 8003ca2:	4b13      	ldr	r3, [pc, #76]	@ (8003cf0 <MX_DMA_Init+0x60>)
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	607b      	str	r3, [r7, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003cae:	4b10      	ldr	r3, [pc, #64]	@ (8003cf0 <MX_DMA_Init+0x60>)
 8003cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf0 <MX_DMA_Init+0x60>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6493      	str	r3, [r2, #72]	@ 0x48
 8003cba:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf0 <MX_DMA_Init+0x60>)
 8003cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2100      	movs	r1, #0
 8003cca:	200b      	movs	r0, #11
 8003ccc:	f001 fe0b 	bl	80058e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003cd0:	200b      	movs	r0, #11
 8003cd2:	f001 fe22 	bl	800591a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2100      	movs	r1, #0
 8003cda:	200c      	movs	r0, #12
 8003cdc:	f001 fe03 	bl	80058e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003ce0:	200c      	movs	r0, #12
 8003ce2:	f001 fe1a 	bl	800591a <HAL_NVIC_EnableIRQ>
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000

08003cf4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	@ 0x28
 8003cf8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfa:	f107 0314 	add.w	r3, r7, #20
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	605a      	str	r2, [r3, #4]
 8003d04:	609a      	str	r2, [r3, #8]
 8003d06:	60da      	str	r2, [r3, #12]
 8003d08:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0a:	4b7a      	ldr	r3, [pc, #488]	@ (8003ef4 <MX_GPIO_Init+0x200>)
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0e:	4a79      	ldr	r2, [pc, #484]	@ (8003ef4 <MX_GPIO_Init+0x200>)
 8003d10:	f043 0304 	orr.w	r3, r3, #4
 8003d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d16:	4b77      	ldr	r3, [pc, #476]	@ (8003ef4 <MX_GPIO_Init+0x200>)
 8003d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003d22:	4b74      	ldr	r3, [pc, #464]	@ (8003ef4 <MX_GPIO_Init+0x200>)
 8003d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d26:	4a73      	ldr	r2, [pc, #460]	@ (8003ef4 <MX_GPIO_Init+0x200>)
 8003d28:	f043 0320 	orr.w	r3, r3, #32
 8003d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d2e:	4b71      	ldr	r3, [pc, #452]	@ (8003ef4 <MX_GPIO_Init+0x200>)
 8003d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003d3a:	4b6e      	ldr	r3, [pc, #440]	@ (8003ef4 <MX_GPIO_Init+0x200>)
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3e:	4a6d      	ldr	r2, [pc, #436]	@ (8003ef4 <MX_GPIO_Init+0x200>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d46:	4b6b      	ldr	r3, [pc, #428]	@ (8003ef4 <MX_GPIO_Init+0x200>)
 8003d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003d52:	4b68      	ldr	r3, [pc, #416]	@ (8003ef4 <MX_GPIO_Init+0x200>)
 8003d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d56:	4a67      	ldr	r2, [pc, #412]	@ (8003ef4 <MX_GPIO_Init+0x200>)
 8003d58:	f043 0302 	orr.w	r3, r3, #2
 8003d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d5e:	4b65      	ldr	r3, [pc, #404]	@ (8003ef4 <MX_GPIO_Init+0x200>)
 8003d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2120      	movs	r1, #32
 8003d6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d72:	f002 fab9 	bl	80062e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12,
 8003d76:	2200      	movs	r2, #0
 8003d78:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8003d7c:	485e      	ldr	r0, [pc, #376]	@ (8003ef8 <MX_GPIO_Init+0x204>)
 8003d7e:	f002 fab3 	bl	80062e8 <HAL_GPIO_WritePin>
					  GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003d82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d86:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d90:	f107 0314 	add.w	r3, r7, #20
 8003d94:	4619      	mov	r1, r3
 8003d96:	4858      	ldr	r0, [pc, #352]	@ (8003ef8 <MX_GPIO_Init+0x204>)
 8003d98:	f002 f90c 	bl	8005fb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 8003d9c:	230d      	movs	r3, #13
 8003d9e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003da0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003da4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003daa:	f107 0314 	add.w	r3, r7, #20
 8003dae:	4619      	mov	r1, r3
 8003db0:	4851      	ldr	r0, [pc, #324]	@ (8003ef8 <MX_GPIO_Init+0x204>)
 8003db2:	f002 f8ff 	bl	8005fb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8003db6:	2320      	movs	r3, #32
 8003db8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003dc6:	f107 0314 	add.w	r3, r7, #20
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dd0:	f002 f8f0 	bl	8005fb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_12;
 8003dd4:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 8003dd8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de2:	2300      	movs	r3, #0
 8003de4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de6:	f107 0314 	add.w	r3, r7, #20
 8003dea:	4619      	mov	r1, r3
 8003dec:	4842      	ldr	r0, [pc, #264]	@ (8003ef8 <MX_GPIO_Init+0x204>)
 8003dee:	f002 f8e1 	bl	8005fb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_11;
 8003df2:	f640 0304 	movw	r3, #2052	@ 0x804
 8003df6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e00:	f107 0314 	add.w	r3, r7, #20
 8003e04:	4619      	mov	r1, r3
 8003e06:	483d      	ldr	r0, [pc, #244]	@ (8003efc <MX_GPIO_Init+0x208>)
 8003e08:	f002 f8d4 	bl	8005fb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8003e0c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003e10:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003e12:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003e16:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e1c:	f107 0314 	add.w	r3, r7, #20
 8003e20:	4619      	mov	r1, r3
 8003e22:	4836      	ldr	r0, [pc, #216]	@ (8003efc <MX_GPIO_Init+0x208>)
 8003e24:	f002 f8c6 	bl	8005fb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e2c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003e32:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e34:	2302      	movs	r3, #2
 8003e36:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e38:	f107 0314 	add.w	r3, r7, #20
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	482f      	ldr	r0, [pc, #188]	@ (8003efc <MX_GPIO_Init+0x208>)
 8003e40:	f002 f8b8 	bl	8005fb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e48:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003e4e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e54:	f107 0314 	add.w	r3, r7, #20
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e5e:	f002 f8a9 	bl	8005fb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e66:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003e6c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e72:	f107 0314 	add.w	r3, r7, #20
 8003e76:	4619      	mov	r1, r3
 8003e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e7c:	f002 f89a 	bl	8005fb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e84:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003e8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e90:	f107 0314 	add.w	r3, r7, #20
 8003e94:	4619      	mov	r1, r3
 8003e96:	4818      	ldr	r0, [pc, #96]	@ (8003ef8 <MX_GPIO_Init+0x204>)
 8003e98:	f002 f88c 	bl	8005fb4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	2006      	movs	r0, #6
 8003ea2:	f001 fd20 	bl	80058e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003ea6:	2006      	movs	r0, #6
 8003ea8:	f001 fd37 	bl	800591a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003eac:	2200      	movs	r2, #0
 8003eae:	2100      	movs	r1, #0
 8003eb0:	2008      	movs	r0, #8
 8003eb2:	f001 fd18 	bl	80058e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003eb6:	2008      	movs	r0, #8
 8003eb8:	f001 fd2f 	bl	800591a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	2009      	movs	r0, #9
 8003ec2:	f001 fd10 	bl	80058e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003ec6:	2009      	movs	r0, #9
 8003ec8:	f001 fd27 	bl	800591a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2100      	movs	r1, #0
 8003ed0:	2017      	movs	r0, #23
 8003ed2:	f001 fd08 	bl	80058e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003ed6:	2017      	movs	r0, #23
 8003ed8:	f001 fd1f 	bl	800591a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003edc:	2200      	movs	r2, #0
 8003ede:	2100      	movs	r1, #0
 8003ee0:	2028      	movs	r0, #40	@ 0x28
 8003ee2:	f001 fd00 	bl	80058e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ee6:	2028      	movs	r0, #40	@ 0x28
 8003ee8:	f001 fd17 	bl	800591a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003eec:	bf00      	nop
 8003eee:	3728      	adds	r7, #40	@ 0x28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	48000800 	.word	0x48000800
 8003efc:	48000400 	.word	0x48000400

08003f00 <PenDelay>:

/* USER CODE BEGIN 4 */
bool PenDelay()
{
 8003f00:	b5b0      	push	{r4, r5, r7, lr}
 8003f02:	af00      	add	r7, sp, #0
	static bool timerStarted = false;
	if (!timerStarted)
 8003f04:	4b15      	ldr	r3, [pc, #84]	@ (8003f5c <PenDelay+0x5c>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	f083 0301 	eor.w	r3, r3, #1
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00c      	beq.n	8003f2c <PenDelay+0x2c>
	{
		pen_delay_timer = micros();
 8003f12:	f000 f94d 	bl	80041b0 <micros>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4911      	ldr	r1, [pc, #68]	@ (8003f60 <PenDelay+0x60>)
 8003f1c:	e9c1 2300 	strd	r2, r3, [r1]
		Set_Servo(1);
 8003f20:	2001      	movs	r0, #1
 8003f22:	f000 fc75 	bl	8004810 <Set_Servo>
		timerStarted = true;
 8003f26:	4b0d      	ldr	r3, [pc, #52]	@ (8003f5c <PenDelay+0x5c>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	701a      	strb	r2, [r3, #0]
	}
	// check if 500 ms have passed
	if (micros() - pen_delay_timer >= 500000UL)
 8003f2c:	f000 f940 	bl	80041b0 <micros>
 8003f30:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <PenDelay+0x60>)
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	1a84      	subs	r4, r0, r2
 8003f38:	eb61 0503 	sbc.w	r5, r1, r3
 8003f3c:	4b09      	ldr	r3, [pc, #36]	@ (8003f64 <PenDelay+0x64>)
 8003f3e:	429c      	cmp	r4, r3
 8003f40:	f175 0300 	sbcs.w	r3, r5, #0
 8003f44:	d307      	bcc.n	8003f56 <PenDelay+0x56>
	{
		Set_Servo(0);
 8003f46:	2000      	movs	r0, #0
 8003f48:	f000 fc62 	bl	8004810 <Set_Servo>
		timerStarted = false;
 8003f4c:	4b03      	ldr	r3, [pc, #12]	@ (8003f5c <PenDelay+0x5c>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
		return true;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <PenDelay+0x58>
	}
	return false;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f5c:	200013e8 	.word	0x200013e8
 8003f60:	20001320 	.word	0x20001320
 8003f64:	0007a120 	.word	0x0007a120

08003f68 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003f72:	edc7 0a04 	vstr	s1, [r7, #16]
 8003f76:	ed87 1a03 	vstr	s2, [r7, #12]
 8003f7a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003f7e:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003f82:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f86:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f8e:	edd7 6a01 	vldr	s13, [r7, #4]
 8003f92:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f96:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f9a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003f9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003fa2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fae:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003fba:	371c      	adds	r7, #28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <DWT_Init>:

void DWT_Init(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003fc8:	4b08      	ldr	r3, [pc, #32]	@ (8003fec <DWT_Init+0x28>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a07      	ldr	r2, [pc, #28]	@ (8003fec <DWT_Init+0x28>)
 8003fce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fd2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003fd4:	4b06      	ldr	r3, [pc, #24]	@ (8003ff0 <DWT_Init+0x2c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a05      	ldr	r2, [pc, #20]	@ (8003ff0 <DWT_Init+0x2c>)
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	6013      	str	r3, [r2, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	e000edf0 	.word	0xe000edf0
 8003ff0:	e0001000 	.word	0xe0001000

08003ff4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9)
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004004:	d10e      	bne.n	8004024 <HAL_GPIO_EXTI_Callback+0x30>
	{
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1)
 8004006:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800400a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800400e:	f002 f953 	bl	80062b8 <HAL_GPIO_ReadPin>
 8004012:	4603      	mov	r3, r0
 8004014:	2b01      	cmp	r3, #1
 8004016:	d105      	bne.n	8004024 <HAL_GPIO_EXTI_Callback+0x30>
		{
			Z_index_R += 1;
 8004018:	4b4b      	ldr	r3, [pc, #300]	@ (8004148 <HAL_GPIO_EXTI_Callback+0x154>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	3301      	adds	r3, #1
 800401e:	b2da      	uxtb	r2, r3
 8004020:	4b49      	ldr	r3, [pc, #292]	@ (8004148 <HAL_GPIO_EXTI_Callback+0x154>)
 8004022:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_10)
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800402a:	d10d      	bne.n	8004048 <HAL_GPIO_EXTI_Callback+0x54>
	{
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1)
 800402c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004030:	4846      	ldr	r0, [pc, #280]	@ (800414c <HAL_GPIO_EXTI_Callback+0x158>)
 8004032:	f002 f941 	bl	80062b8 <HAL_GPIO_ReadPin>
 8004036:	4603      	mov	r3, r0
 8004038:	2b01      	cmp	r3, #1
 800403a:	d105      	bne.n	8004048 <HAL_GPIO_EXTI_Callback+0x54>
		{
			Mode = 0;
 800403c:	4b44      	ldr	r3, [pc, #272]	@ (8004150 <HAL_GPIO_EXTI_Callback+0x15c>)
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
			EmergencyState = 1;
 8004042:	4b44      	ldr	r3, [pc, #272]	@ (8004154 <HAL_GPIO_EXTI_Callback+0x160>)
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_12)
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800404e:	d10e      	bne.n	800406e <HAL_GPIO_EXTI_Callback+0x7a>
	{
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1)
 8004050:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004054:	4840      	ldr	r0, [pc, #256]	@ (8004158 <HAL_GPIO_EXTI_Callback+0x164>)
 8004056:	f002 f92f 	bl	80062b8 <HAL_GPIO_ReadPin>
 800405a:	4603      	mov	r3, r0
 800405c:	2b01      	cmp	r3, #1
 800405e:	d103      	bne.n	8004068 <HAL_GPIO_EXTI_Callback+0x74>
		{
			P_Limit = 1;
 8004060:	4b3e      	ldr	r3, [pc, #248]	@ (800415c <HAL_GPIO_EXTI_Callback+0x168>)
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	e002      	b.n	800406e <HAL_GPIO_EXTI_Callback+0x7a>
		}
		else
		{
			P_Limit = 0;
 8004068:	4b3c      	ldr	r3, [pc, #240]	@ (800415c <HAL_GPIO_EXTI_Callback+0x168>)
 800406a:	2200      	movs	r2, #0
 800406c:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_13)
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004074:	d10e      	bne.n	8004094 <HAL_GPIO_EXTI_Callback+0xa0>
	{
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1)
 8004076:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800407a:	4837      	ldr	r0, [pc, #220]	@ (8004158 <HAL_GPIO_EXTI_Callback+0x164>)
 800407c:	f002 f91c 	bl	80062b8 <HAL_GPIO_ReadPin>
 8004080:	4603      	mov	r3, r0
 8004082:	2b01      	cmp	r3, #1
 8004084:	d103      	bne.n	800408e <HAL_GPIO_EXTI_Callback+0x9a>
		{
			R_Limit = 1;
 8004086:	4b36      	ldr	r3, [pc, #216]	@ (8004160 <HAL_GPIO_EXTI_Callback+0x16c>)
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e002      	b.n	8004094 <HAL_GPIO_EXTI_Callback+0xa0>
		}
		else
		{
			R_Limit = 0;
 800408e:	4b34      	ldr	r3, [pc, #208]	@ (8004160 <HAL_GPIO_EXTI_Callback+0x16c>)
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_15)
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800409a:	d102      	bne.n	80040a2 <HAL_GPIO_EXTI_Callback+0xae>
	{
		EmergencyState = 0;
 800409c:	4b2d      	ldr	r3, [pc, #180]	@ (8004154 <HAL_GPIO_EXTI_Callback+0x160>)
 800409e:	2200      	movs	r2, #0
 80040a0:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t state[3] = {0}; // 0 = waiting for rise, 1 = waiting for fall

	uint32_t now = DWT->CYCCNT;
 80040a2:	4b30      	ldr	r3, [pc, #192]	@ (8004164 <HAL_GPIO_EXTI_Callback+0x170>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	613b      	str	r3, [r7, #16]
	uint32_t idx;

	if (GPIO_Pin == GPIO_PIN_0)
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d102      	bne.n	80040b4 <HAL_GPIO_EXTI_Callback+0xc0>
		idx = 0; // PC0
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	e00a      	b.n	80040ca <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_2)
 80040b4:	88fb      	ldrh	r3, [r7, #6]
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d102      	bne.n	80040c0 <HAL_GPIO_EXTI_Callback+0xcc>
		idx = 1; // PC2
 80040ba:	2301      	movs	r3, #1
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e004      	b.n	80040ca <HAL_GPIO_EXTI_Callback+0xd6>
	else if (GPIO_Pin == GPIO_PIN_3)
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d13b      	bne.n	800413e <HAL_GPIO_EXTI_Callback+0x14a>
		idx = 2; // PC3
 80040c6:	2302      	movs	r3, #2
 80040c8:	617b      	str	r3, [r7, #20]
	else
		return;

	if (state[idx] == 0)
 80040ca:	4a27      	ldr	r2, [pc, #156]	@ (8004168 <HAL_GPIO_EXTI_Callback+0x174>)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	4413      	add	r3, r2
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <HAL_GPIO_EXTI_Callback+0xf8>
	{
		rise_time[idx] = now;
 80040d6:	4925      	ldr	r1, [pc, #148]	@ (800416c <HAL_GPIO_EXTI_Callback+0x178>)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 1;
 80040e0:	4a21      	ldr	r2, [pc, #132]	@ (8004168 <HAL_GPIO_EXTI_Callback+0x174>)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	4413      	add	r3, r2
 80040e6:	2201      	movs	r2, #1
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	e029      	b.n	8004140 <HAL_GPIO_EXTI_Callback+0x14c>
	}
	else
	{
		uint32_t delta =
			(now >= rise_time[idx]) ? (now - rise_time[idx]) : (0xFFFFFFFF - rise_time[idx] + now);
 80040ec:	4a1f      	ldr	r2, [pc, #124]	@ (800416c <HAL_GPIO_EXTI_Callback+0x178>)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d306      	bcc.n	8004108 <HAL_GPIO_EXTI_Callback+0x114>
 80040fa:	4a1c      	ldr	r2, [pc, #112]	@ (800416c <HAL_GPIO_EXTI_Callback+0x178>)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	e006      	b.n	8004116 <HAL_GPIO_EXTI_Callback+0x122>
 8004108:	4a18      	ldr	r2, [pc, #96]	@ (800416c <HAL_GPIO_EXTI_Callback+0x178>)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	3b01      	subs	r3, #1
		uint32_t delta =
 8004116:	60fb      	str	r3, [r7, #12]
		pulse_width_us[idx] = delta / (SystemCoreClock / 1000000);
 8004118:	4b15      	ldr	r3, [pc, #84]	@ (8004170 <HAL_GPIO_EXTI_Callback+0x17c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a15      	ldr	r2, [pc, #84]	@ (8004174 <HAL_GPIO_EXTI_Callback+0x180>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	0c9b      	lsrs	r3, r3, #18
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	fbb2 f2f3 	udiv	r2, r2, r3
 800412a:	4913      	ldr	r1, [pc, #76]	@ (8004178 <HAL_GPIO_EXTI_Callback+0x184>)
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state[idx] = 0;
 8004132:	4a0d      	ldr	r2, [pc, #52]	@ (8004168 <HAL_GPIO_EXTI_Callback+0x174>)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	4413      	add	r3, r2
 8004138:	2200      	movs	r2, #0
 800413a:	701a      	strb	r2, [r3, #0]
 800413c:	e000      	b.n	8004140 <HAL_GPIO_EXTI_Callback+0x14c>
		return;
 800413e:	bf00      	nop
	}
}
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000b78 	.word	0x20000b78
 800414c:	48000800 	.word	0x48000800
 8004150:	20000bcc 	.word	0x20000bcc
 8004154:	20000bcd 	.word	0x20000bcd
 8004158:	48000400 	.word	0x48000400
 800415c:	20000bd1 	.word	0x20000bd1
 8004160:	20000bd2 	.word	0x20000bd2
 8004164:	e0001000 	.word	0xe0001000
 8004168:	200013ec 	.word	0x200013ec
 800416c:	20000ad8 	.word	0x20000ad8
 8004170:	20000230 	.word	0x20000230
 8004174:	431bde83 	.word	0x431bde83
 8004178:	20000ae4 	.word	0x20000ae4

0800417c <HAL_TIM_PeriodElapsedCallback>:

// MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800417c:	b4b0      	push	{r4, r5, r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	if (htim == &htim5)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a08      	ldr	r2, [pc, #32]	@ (80041a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d108      	bne.n	800419e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 800418c:	4b07      	ldr	r3, [pc, #28]	@ (80041ac <HAL_TIM_PeriodElapsedCallback+0x30>)
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	1e54      	subs	r4, r2, #1
 8004194:	f143 0500 	adc.w	r5, r3, #0
 8004198:	4b04      	ldr	r3, [pc, #16]	@ (80041ac <HAL_TIM_PeriodElapsedCallback+0x30>)
 800419a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bcb0      	pop	{r4, r5, r7}
 80041a6:	4770      	bx	lr
 80041a8:	200005e0 	.word	0x200005e0
 80041ac:	20000aa0 	.word	0x20000aa0

080041b0 <micros>:
uint64_t micros()
{
 80041b0:	b4b0      	push	{r4, r5, r7}
 80041b2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 80041b4:	4b09      	ldr	r3, [pc, #36]	@ (80041dc <micros+0x2c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ba:	2200      	movs	r2, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	4611      	mov	r1, r2
 80041c0:	4b07      	ldr	r3, [pc, #28]	@ (80041e0 <micros+0x30>)
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	1884      	adds	r4, r0, r2
 80041c8:	eb41 0503 	adc.w	r5, r1, r3
 80041cc:	4622      	mov	r2, r4
 80041ce:	462b      	mov	r3, r5
}
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bcb0      	pop	{r4, r5, r7}
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	200005e0 	.word	0x200005e0
 80041e0:	20000aa0 	.word	0x20000aa0

080041e4 <PID_Update>:

float PID_Update(float error, float kP, float kI, float kD, float dt,
				 float outMin, float outMax, PID_State *state)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b08f      	sub	sp, #60	@ 0x3c
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	ed87 0a07 	vstr	s0, [r7, #28]
 80041ee:	edc7 0a06 	vstr	s1, [r7, #24]
 80041f2:	ed87 1a05 	vstr	s2, [r7, #20]
 80041f6:	edc7 1a04 	vstr	s3, [r7, #16]
 80041fa:	ed87 2a03 	vstr	s4, [r7, #12]
 80041fe:	edc7 2a02 	vstr	s5, [r7, #8]
 8004202:	ed87 3a01 	vstr	s6, [r7, #4]
 8004206:	6038      	str	r0, [r7, #0]
	/* --- Proportional -------------------------------------- */
	float Pout = kP * error;
 8004208:	ed97 7a06 	vldr	s14, [r7, #24]
 800420c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004214:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	/* --- Integral (with anti‑windup clamp) ----------------- */
	state->integ += error * dt;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	ed93 7a00 	vldr	s14, [r3]
 800421e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004222:	edd7 7a03 	vldr	s15, [r7, #12]
 8004226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800422a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ > outMax / kI)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	ed93 7a00 	vldr	s14, [r3]
 800423a:	ed97 6a01 	vldr	s12, [r7, #4]
 800423e:	edd7 6a05 	vldr	s13, [r7, #20]
 8004242:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800424a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424e:	dd08      	ble.n	8004262 <PID_Update+0x7e>
		state->integ = outMax / kI;
 8004250:	edd7 6a01 	vldr	s13, [r7, #4]
 8004254:	ed97 7a05 	vldr	s14, [r7, #20]
 8004258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	edc3 7a00 	vstr	s15, [r3]
	if (state->integ < outMin / kI)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	ed93 7a00 	vldr	s14, [r3]
 8004268:	ed97 6a02 	vldr	s12, [r7, #8]
 800426c:	edd7 6a05 	vldr	s13, [r7, #20]
 8004270:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004274:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427c:	d508      	bpl.n	8004290 <PID_Update+0xac>
		state->integ = outMin / kI;
 800427e:	edd7 6a02 	vldr	s13, [r7, #8]
 8004282:	ed97 7a05 	vldr	s14, [r7, #20]
 8004286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	edc3 7a00 	vstr	s15, [r3]
	if (error > 0 && state->integ < 0)
 8004290:	edd7 7a07 	vldr	s15, [r7, #28]
 8004294:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429c:	dd0b      	ble.n	80042b6 <PID_Update+0xd2>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	edd3 7a00 	vldr	s15, [r3]
 80042a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ac:	d503      	bpl.n	80042b6 <PID_Update+0xd2>
		state->integ = 0;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
	if (error < 0 && state->integ > 0)
 80042b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80042ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c2:	d50b      	bpl.n	80042dc <PID_Update+0xf8>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	edd3 7a00 	vldr	s15, [r3]
 80042ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d2:	dd03      	ble.n	80042dc <PID_Update+0xf8>
		state->integ = 0;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
	float Iout = kI * state->integ;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	edd3 7a00 	vldr	s15, [r3]
 80042e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80042e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ea:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* --- Derivative (on error) ----------------------------- */
	float deriv = (error - state->prevError) / dt;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80042f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80042f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80042fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8004300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004304:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Dout = kD * deriv;
 8004308:	ed97 7a04 	vldr	s14, [r7, #16]
 800430c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004314:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	state->prevError = error;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	605a      	str	r2, [r3, #4]

	/* --- Sum and clamp ------------------------------------- */
	float out = Pout + Iout + Dout;
 800431e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004322:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800432a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800432e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004332:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	if (out > outMax)
 8004336:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800433a:	edd7 7a01 	vldr	s15, [r7, #4]
 800433e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004346:	dd01      	ble.n	800434c <PID_Update+0x168>
		out = outMax;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (out < outMin)
 800434c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004350:	edd7 7a02 	vldr	s15, [r7, #8]
 8004354:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435c:	d501      	bpl.n	8004362 <PID_Update+0x17e>
		out = outMin;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	637b      	str	r3, [r7, #52]	@ 0x34

	return out;
 8004362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004364:	ee07 3a90 	vmov	s15, r3
}
 8004368:	eeb0 0a67 	vmov.f32	s0, s15
 800436c:	373c      	adds	r7, #60	@ 0x3c
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <Revolute_PosVel_Update>:

void Revolute_PosVel_Update()
{
 8004378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
	// Collect data
	Revolute_QEIdata.TimeStamp[NEW] = micros();
 8004380:	f7ff ff16 	bl	80041b0 <micros>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	497b      	ldr	r1, [pc, #492]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 800438a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Revolute_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 800438e:	4b7b      	ldr	r3, [pc, #492]	@ (800457c <Revolute_PosVel_Update+0x204>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	4a78      	ldr	r2, [pc, #480]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 8004396:	6013      	str	r3, [r2, #0]

	// Position within one turn
	Revolute_QEIdata.QEIPostion_1turn = Revolute_QEIdata.Position[NEW] % 16384;
 8004398:	4b77      	ldr	r3, [pc, #476]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80043a0:	ee07 3a90 	vmov	s15, r3
 80043a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a8:	4b73      	ldr	r3, [pc, #460]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 80043aa:	edc3 7a06 	vstr	s15, [r3, #24]

	// Calculate position difference
	int32_t diffPosition_r = Revolute_QEIdata.Position[NEW] - Revolute_QEIdata.Position[OLD];
 80043ae:	4b72      	ldr	r3, [pc, #456]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b71      	ldr	r3, [pc, #452]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_r > (65536 / 2))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c0:	dd04      	ble.n	80043cc <Revolute_PosVel_Update+0x54>
		diffPosition_r -= 65536;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	e007      	b.n	80043dc <Revolute_PosVel_Update+0x64>
	else if (diffPosition_r < -(65536 / 2))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80043d2:	da03      	bge.n	80043dc <Revolute_PosVel_Update+0x64>
		diffPosition_r += 65536;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80043da:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_r = (Revolute_QEIdata.TimeStamp[NEW] - Revolute_QEIdata.TimeStamp[OLD]) * 0.000001f;
 80043dc:	4b66      	ldr	r3, [pc, #408]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 80043de:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80043e2:	4b65      	ldr	r3, [pc, #404]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 80043e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80043e8:	ebb0 0a02 	subs.w	sl, r0, r2
 80043ec:	eb61 0b03 	sbc.w	fp, r1, r3
 80043f0:	4650      	mov	r0, sl
 80043f2:	4659      	mov	r1, fp
 80043f4:	f7fc fc9e 	bl	8000d34 <__aeabi_ul2f>
 80043f8:	ee07 0a10 	vmov	s14, r0
 80043fc:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8004580 <Revolute_PosVel_Update+0x208>
 8004400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004404:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_r == 0)
 8004408:	edd7 7a02 	vldr	s15, [r7, #8]
 800440c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004414:	f000 80a0 	beq.w	8004558 <Revolute_PosVel_Update+0x1e0>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_r = (float)diffPosition_r / diffTime_r;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004422:	ed97 7a02 	vldr	s14, [r7, #8]
 8004426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800442a:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Revolute_QEIdata.QEIAcceleration = (Vel_counts_r - Revolute_QEIdata.QEIVelocity) / diffTime_r;
 800442e:	4b52      	ldr	r3, [pc, #328]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 8004430:	edd3 7a07 	vldr	s15, [r3, #28]
 8004434:	ed97 7a01 	vldr	s14, [r7, #4]
 8004438:	ee77 6a67 	vsub.f32	s13, s14, s15
 800443c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004444:	4b4c      	ldr	r3, [pc, #304]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 8004446:	edc3 7a08 	vstr	s15, [r3, #32]

	// Store raw velocity
	Revolute_QEIdata.QEIVelocity = Vel_counts_r;
 800444a:	4a4b      	ldr	r2, [pc, #300]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	61d3      	str	r3, [r2, #28]

	// Angular velocity in rad/s
	Revolute_QEIdata.Velocity = Vel_counts_r * (2.0f * M_PI / 16384.0f);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7fc f845 	bl	80004e0 <__aeabi_f2d>
 8004456:	a344      	add	r3, pc, #272	@ (adr r3, 8004568 <Revolute_PosVel_Update+0x1f0>)
 8004458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445c:	f7fc f898 	bl	8000590 <__aeabi_dmul>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	f7fc fb4c 	bl	8000b04 <__aeabi_d2f>
 800446c:	4603      	mov	r3, r0
 800446e:	4a42      	ldr	r2, [pc, #264]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 8004470:	6253      	str	r3, [r2, #36]	@ 0x24
	float R_alpha = 0.4f;
 8004472:	4b44      	ldr	r3, [pc, #272]	@ (8004584 <Revolute_PosVel_Update+0x20c>)
 8004474:	603b      	str	r3, [r7, #0]
	Revolute_QEIdata.Velocity_f = R_alpha * Revolute_QEIdata.Velocity + (1 - R_alpha) * Revolute_QEIdata.Velocity_f;
 8004476:	4b40      	ldr	r3, [pc, #256]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 8004478:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800447c:	edd7 7a00 	vldr	s15, [r7]
 8004480:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004484:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004488:	edd7 7a00 	vldr	s15, [r7]
 800448c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004490:	4b39      	ldr	r3, [pc, #228]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 8004492:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800449a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800449e:	4b36      	ldr	r3, [pc, #216]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 80044a0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Angular acceleration in rad/s²
	Revolute_QEIdata.Acceleration = Revolute_QEIdata.QEIAcceleration * (2.0f * M_PI / 16384.0f);
 80044a4:	4b34      	ldr	r3, [pc, #208]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fc f819 	bl	80004e0 <__aeabi_f2d>
 80044ae:	a32e      	add	r3, pc, #184	@ (adr r3, 8004568 <Revolute_PosVel_Update+0x1f0>)
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f7fc f86c 	bl	8000590 <__aeabi_dmul>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4610      	mov	r0, r2
 80044be:	4619      	mov	r1, r3
 80044c0:	f7fc fb20 	bl	8000b04 <__aeabi_d2f>
 80044c4:	4603      	mov	r3, r0
 80044c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 80044c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// Absolute position update
	Revolute_QEIdata.AbsolutePosition += diffPosition_r;
 80044ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 80044cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80044d0:	68f9      	ldr	r1, [r7, #12]
 80044d2:	17c8      	asrs	r0, r1, #31
 80044d4:	460c      	mov	r4, r1
 80044d6:	4605      	mov	r5, r0
 80044d8:	eb12 0804 	adds.w	r8, r2, r4
 80044dc:	eb43 0905 	adc.w	r9, r3, r5
 80044e0:	4b25      	ldr	r3, [pc, #148]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 80044e2:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// Rad position
	Revolute_QEIdata.RadPosition = Revolute_QEIdata.AbsolutePosition * (2.0f * M_PI / 16384.0f);
 80044e6:	4b24      	ldr	r3, [pc, #144]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 80044e8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80044ec:	4610      	mov	r0, r2
 80044ee:	4619      	mov	r1, r3
 80044f0:	f7fc f820 	bl	8000534 <__aeabi_l2d>
 80044f4:	a31c      	add	r3, pc, #112	@ (adr r3, 8004568 <Revolute_PosVel_Update+0x1f0>)
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	f7fc f849 	bl	8000590 <__aeabi_dmul>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	f7fc fafd 	bl	8000b04 <__aeabi_d2f>
 800450a:	4603      	mov	r3, r0
 800450c:	4a1a      	ldr	r2, [pc, #104]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 800450e:	6393      	str	r3, [r2, #56]	@ 0x38

	// Deg position
	Revolute_QEIdata.DegPosition = Revolute_QEIdata.RadPosition * 180 / M_PI;
 8004510:	4b19      	ldr	r3, [pc, #100]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 8004512:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004516:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004588 <Revolute_PosVel_Update+0x210>
 800451a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800451e:	ee17 0a90 	vmov	r0, s15
 8004522:	f7fb ffdd 	bl	80004e0 <__aeabi_f2d>
 8004526:	a312      	add	r3, pc, #72	@ (adr r3, 8004570 <Revolute_PosVel_Update+0x1f8>)
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	f7fc f95a 	bl	80007e4 <__aeabi_ddiv>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4610      	mov	r0, r2
 8004536:	4619      	mov	r1, r3
 8004538:	f7fc fae4 	bl	8000b04 <__aeabi_d2f>
 800453c:	4603      	mov	r3, r0
 800453e:	4a0e      	ldr	r2, [pc, #56]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 8004540:	63d3      	str	r3, [r2, #60]	@ 0x3c

	// Store previous values
	Revolute_QEIdata.Position[OLD] = Revolute_QEIdata.Position[NEW];
 8004542:	4b0d      	ldr	r3, [pc, #52]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a0c      	ldr	r2, [pc, #48]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 8004548:	6053      	str	r3, [r2, #4]
	Revolute_QEIdata.TimeStamp[OLD] = Revolute_QEIdata.TimeStamp[NEW];
 800454a:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 800454c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004550:	4909      	ldr	r1, [pc, #36]	@ (8004578 <Revolute_PosVel_Update+0x200>)
 8004552:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004556:	e000      	b.n	800455a <Revolute_PosVel_Update+0x1e2>
		return;
 8004558:	bf00      	nop
}
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004562:	bf00      	nop
 8004564:	f3af 8000 	nop.w
 8004568:	54442d18 	.word	0x54442d18
 800456c:	3f3921fb 	.word	0x3f3921fb
 8004570:	54442d18 	.word	0x54442d18
 8004574:	400921fb 	.word	0x400921fb
 8004578:	20000af8 	.word	0x20000af8
 800457c:	20000514 	.word	0x20000514
 8004580:	358637bd 	.word	0x358637bd
 8004584:	3ecccccd 	.word	0x3ecccccd
 8004588:	43340000 	.word	0x43340000

0800458c <Prismatic_PosVel_Update>:

void Prismatic_PosVel_Update()
{
 800458c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
	// Collect data
	Prismatic_QEIdata.TimeStamp[NEW] = micros();
 8004594:	f7ff fe0c 	bl	80041b0 <micros>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4958      	ldr	r1, [pc, #352]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 800459e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Prismatic_QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 80045a2:	4b58      	ldr	r3, [pc, #352]	@ (8004704 <Prismatic_PosVel_Update+0x178>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	4a55      	ldr	r2, [pc, #340]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 80045aa:	6013      	str	r3, [r2, #0]

	// Calculate position difference
	int32_t diffPosition_p = Prismatic_QEIdata.Position[NEW] - Prismatic_QEIdata.Position[OLD];
 80045ac:	4b54      	ldr	r3, [pc, #336]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b53      	ldr	r3, [pc, #332]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	60fb      	str	r3, [r7, #12]

	// Handle wrap-around
	if (diffPosition_p > (65536 / 2))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045be:	dd04      	ble.n	80045ca <Prismatic_PosVel_Update+0x3e>
		diffPosition_p -= 65536;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	e007      	b.n	80045da <Prismatic_PosVel_Update+0x4e>
	else if (diffPosition_p < -(65536 / 2))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80045d0:	da03      	bge.n	80045da <Prismatic_PosVel_Update+0x4e>
		diffPosition_p += 65536;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80045d8:	60fb      	str	r3, [r7, #12]

	// Time difference in seconds
	float diffTime_p = (Prismatic_QEIdata.TimeStamp[NEW] - Prismatic_QEIdata.TimeStamp[OLD]) * 0.000001f;
 80045da:	4b49      	ldr	r3, [pc, #292]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 80045dc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80045e0:	4b47      	ldr	r3, [pc, #284]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 80045e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80045e6:	ebb0 0a02 	subs.w	sl, r0, r2
 80045ea:	eb61 0b03 	sbc.w	fp, r1, r3
 80045ee:	4650      	mov	r0, sl
 80045f0:	4659      	mov	r1, fp
 80045f2:	f7fc fb9f 	bl	8000d34 <__aeabi_ul2f>
 80045f6:	ee07 0a10 	vmov	s14, r0
 80045fa:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8004708 <Prismatic_PosVel_Update+0x17c>
 80045fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004602:	edc7 7a02 	vstr	s15, [r7, #8]
	if (diffTime_p == 0)
 8004606:	edd7 7a02 	vldr	s15, [r7, #8]
 800460a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004612:	d070      	beq.n	80046f6 <Prismatic_PosVel_Update+0x16a>
		return;

	// Raw angular velocity in counts/sec
	float Vel_counts_p = (float)diffPosition_p / diffTime_p;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800461e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004626:	edc7 7a01 	vstr	s15, [r7, #4]

	// Raw angular acceleration in counts/sec²
	Prismatic_QEIdata.QEIAcceleration = (Vel_counts_p - Prismatic_QEIdata.QEIVelocity) / diffTime_p;
 800462a:	4b35      	ldr	r3, [pc, #212]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 800462c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004630:	ed97 7a01 	vldr	s14, [r7, #4]
 8004634:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004638:	ed97 7a02 	vldr	s14, [r7, #8]
 800463c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004640:	4b2f      	ldr	r3, [pc, #188]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 8004642:	edc3 7a07 	vstr	s15, [r3, #28]

	// Store raw velocity
	Prismatic_QEIdata.QEIVelocity = Vel_counts_p;
 8004646:	4a2e      	ldr	r2, [pc, #184]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6193      	str	r3, [r2, #24]

	// Velocity in mm/s
	Prismatic_QEIdata.Velocity = Vel_counts_p * (10.0f / 8192.0f);
 800464c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004650:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800470c <Prismatic_PosVel_Update+0x180>
 8004654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004658:	4b29      	ldr	r3, [pc, #164]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 800465a:	edc3 7a08 	vstr	s15, [r3, #32]
	float P_alpha = 0.4f;
 800465e:	4b2c      	ldr	r3, [pc, #176]	@ (8004710 <Prismatic_PosVel_Update+0x184>)
 8004660:	603b      	str	r3, [r7, #0]
	Prismatic_QEIdata.Velocity_f = P_alpha * Prismatic_QEIdata.Velocity + (1 - P_alpha) * Prismatic_QEIdata.Velocity_f;
 8004662:	4b27      	ldr	r3, [pc, #156]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 8004664:	ed93 7a08 	vldr	s14, [r3, #32]
 8004668:	edd7 7a00 	vldr	s15, [r7]
 800466c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004670:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004674:	edd7 7a00 	vldr	s15, [r7]
 8004678:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800467c:	4b20      	ldr	r3, [pc, #128]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 800467e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800468a:	4b1d      	ldr	r3, [pc, #116]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 800468c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Acceleration in mm/s²
	Prismatic_QEIdata.Acceleration = Prismatic_QEIdata.QEIAcceleration * (10.0f / 8192.0f);
 8004690:	4b1b      	ldr	r3, [pc, #108]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 8004692:	edd3 7a07 	vldr	s15, [r3, #28]
 8004696:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800470c <Prismatic_PosVel_Update+0x180>
 800469a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800469e:	4b18      	ldr	r3, [pc, #96]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 80046a0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Absolute position update
	Prismatic_QEIdata.AbsolutePosition += diffPosition_p;
 80046a4:	4b16      	ldr	r3, [pc, #88]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 80046a6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	17c8      	asrs	r0, r1, #31
 80046ae:	460c      	mov	r4, r1
 80046b0:	4605      	mov	r5, r0
 80046b2:	eb12 0804 	adds.w	r8, r2, r4
 80046b6:	eb43 0905 	adc.w	r9, r3, r5
 80046ba:	4b11      	ldr	r3, [pc, #68]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 80046bc:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30

	// mm position
	Prismatic_QEIdata.mmPosition = Prismatic_QEIdata.AbsolutePosition * (10.0f / 8192.0f);
 80046c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 80046c2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80046c6:	4610      	mov	r0, r2
 80046c8:	4619      	mov	r1, r3
 80046ca:	f7fc fb3b 	bl	8000d44 <__aeabi_l2f>
 80046ce:	ee07 0a10 	vmov	s14, r0
 80046d2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800470c <Prismatic_PosVel_Update+0x180>
 80046d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046da:	4b09      	ldr	r3, [pc, #36]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 80046dc:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	// Store previous values
	Prismatic_QEIdata.Position[OLD] = Prismatic_QEIdata.Position[NEW];
 80046e0:	4b07      	ldr	r3, [pc, #28]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a06      	ldr	r2, [pc, #24]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 80046e6:	6053      	str	r3, [r2, #4]
	Prismatic_QEIdata.TimeStamp[OLD] = Prismatic_QEIdata.TimeStamp[NEW];
 80046e8:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 80046ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80046ee:	4904      	ldr	r1, [pc, #16]	@ (8004700 <Prismatic_PosVel_Update+0x174>)
 80046f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80046f4:	e000      	b.n	80046f8 <Prismatic_PosVel_Update+0x16c>
		return;
 80046f6:	bf00      	nop
}
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004700:	20000b38 	.word	0x20000b38
 8004704:	20000448 	.word	0x20000448
 8004708:	358637bd 	.word	0x358637bd
 800470c:	3aa00000 	.word	0x3aa00000
 8004710:	3ecccccd 	.word	0x3ecccccd

08004714 <Set_Motor>:

void Set_Motor(int motor_num, float speed)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	ed87 0a00 	vstr	s0, [r7]
	if (speed > 100.0f)
 8004720:	edd7 7a00 	vldr	s15, [r7]
 8004724:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80047f8 <Set_Motor+0xe4>
 8004728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800472c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004730:	dd01      	ble.n	8004736 <Set_Motor+0x22>
		speed = 100.0f;
 8004732:	4b32      	ldr	r3, [pc, #200]	@ (80047fc <Set_Motor+0xe8>)
 8004734:	603b      	str	r3, [r7, #0]
	if (speed < -100.0f)
 8004736:	edd7 7a00 	vldr	s15, [r7]
 800473a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004800 <Set_Motor+0xec>
 800473e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004746:	d501      	bpl.n	800474c <Set_Motor+0x38>
		speed = -100.0f;
 8004748:	4b2e      	ldr	r3, [pc, #184]	@ (8004804 <Set_Motor+0xf0>)
 800474a:	603b      	str	r3, [r7, #0]
	uint32_t pwm_value = (uint32_t)((fabsf(speed) * 100) / 100);
 800474c:	edd7 7a00 	vldr	s15, [r7]
 8004750:	eef0 7ae7 	vabs.f32	s15, s15
 8004754:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80047f8 <Set_Motor+0xe4>
 8004758:	ee27 7a87 	vmul.f32	s14, s15, s14
 800475c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80047f8 <Set_Motor+0xe4>
 8004760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004768:	ee17 3a90 	vmov	r3, s15
 800476c:	60fb      	str	r3, [r7, #12]
	if (motor_num == 0)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d11d      	bne.n	80047b0 <Set_Motor+0x9c>
	{
		if (speed > 0)
 8004774:	edd7 7a00 	vldr	s15, [r7]
 8004778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800477c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004780:	dd05      	ble.n	800478e <Set_Motor+0x7a>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004782:	2200      	movs	r2, #0
 8004784:	2120      	movs	r1, #32
 8004786:	4820      	ldr	r0, [pc, #128]	@ (8004808 <Set_Motor+0xf4>)
 8004788:	f001 fdae 	bl	80062e8 <HAL_GPIO_WritePin>
 800478c:	e00b      	b.n	80047a6 <Set_Motor+0x92>
		}
		else if (speed < 0)
 800478e:	edd7 7a00 	vldr	s15, [r7]
 8004792:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479a:	d504      	bpl.n	80047a6 <Set_Motor+0x92>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800479c:	2201      	movs	r2, #1
 800479e:	2120      	movs	r1, #32
 80047a0:	4819      	ldr	r0, [pc, #100]	@ (8004808 <Set_Motor+0xf4>)
 80047a2:	f001 fda1 	bl	80062e8 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_value);
 80047a6:	4b19      	ldr	r3, [pc, #100]	@ (800480c <Set_Motor+0xf8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	63da      	str	r2, [r3, #60]	@ 0x3c
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
		}
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
	}
}
 80047ae:	e01f      	b.n	80047f0 <Set_Motor+0xdc>
	else if (motor_num == 1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d11c      	bne.n	80047f0 <Set_Motor+0xdc>
		if (speed > 0)
 80047b6:	edd7 7a00 	vldr	s15, [r7]
 80047ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c2:	dd05      	ble.n	80047d0 <Set_Motor+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80047c4:	2200      	movs	r2, #0
 80047c6:	2140      	movs	r1, #64	@ 0x40
 80047c8:	480f      	ldr	r0, [pc, #60]	@ (8004808 <Set_Motor+0xf4>)
 80047ca:	f001 fd8d 	bl	80062e8 <HAL_GPIO_WritePin>
 80047ce:	e00b      	b.n	80047e8 <Set_Motor+0xd4>
		else if (speed < 0)
 80047d0:	edd7 7a00 	vldr	s15, [r7]
 80047d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047dc:	d504      	bpl.n	80047e8 <Set_Motor+0xd4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80047de:	2201      	movs	r2, #1
 80047e0:	2140      	movs	r1, #64	@ 0x40
 80047e2:	4809      	ldr	r0, [pc, #36]	@ (8004808 <Set_Motor+0xf4>)
 80047e4:	f001 fd80 	bl	80062e8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm_value);
 80047e8:	4b08      	ldr	r3, [pc, #32]	@ (800480c <Set_Motor+0xf8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	42c80000 	.word	0x42c80000
 80047fc:	42c80000 	.word	0x42c80000
 8004800:	c2c80000 	.word	0xc2c80000
 8004804:	c2c80000 	.word	0xc2c80000
 8004808:	48000800 	.word	0x48000800
 800480c:	200006ac 	.word	0x200006ac

08004810 <Set_Servo>:

void Set_Servo(int Pen_Pos)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	if (Pen_Pos == 0)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10f      	bne.n	800483e <Set_Servo+0x2e>
	{
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 500);
 800481e:	4b0e      	ldr	r3, [pc, #56]	@ (8004858 <Set_Servo+0x48>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004826:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 0;
 8004828:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <Set_Servo+0x4c>)
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
		servo_timer = micros();
 800482e:	f7ff fcbf 	bl	80041b0 <micros>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	490a      	ldr	r1, [pc, #40]	@ (8004860 <Set_Servo+0x50>)
 8004838:	e9c1 2300 	strd	r2, r3, [r1]
	else
	{
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
		Pen_Status_in = 1;
	}
}
 800483c:	e007      	b.n	800484e <Set_Servo+0x3e>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 800483e:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <Set_Servo+0x48>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004846:	635a      	str	r2, [r3, #52]	@ 0x34
		Pen_Status_in = 1;
 8004848:	4b04      	ldr	r3, [pc, #16]	@ (800485c <Set_Servo+0x4c>)
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000778 	.word	0x20000778
 800485c:	20000bd0 	.word	0x20000bd0
 8004860:	20000c30 	.word	0x20000c30

08004864 <Reset_R>:

void Reset_R()
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
	Revolute_QEIdata.AbsolutePosition = M_PI_2 / (2.0f * M_PI / 16384.0f);
 8004868:	4905      	ldr	r1, [pc, #20]	@ (8004880 <Reset_R+0x1c>)
 800486a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	//	Revolute_QEIdata.RadPosition = M_PI_2;
}
 8004876:	bf00      	nop
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	20000af8 	.word	0x20000af8

08004884 <Reset_P>:
void Reset_P()
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
	Prismatic_QEIdata.AbsolutePosition = -2.00 / (10.0f / 8192.0f);
 8004888:	4905      	ldr	r1, [pc, #20]	@ (80048a0 <Reset_P+0x1c>)
 800488a:	4a06      	ldr	r2, [pc, #24]	@ (80048a4 <Reset_P+0x20>)
 800488c:	f04f 33ff 	mov.w	r3, #4294967295
 8004890:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	//	Prismatic_QEIdata.mmPosition = 0;
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000b38 	.word	0x20000b38
 80048a4:	fffff99a 	.word	0xfffff99a

080048a8 <Workspace_limit>:

void Workspace_limit()
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
	if (Revolute_QEIdata.RadPosition < -1.91986 && R_PWM > 0)
 80048ac:	4b34      	ldr	r3, [pc, #208]	@ (8004980 <Workspace_limit+0xd8>)
 80048ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fb fe15 	bl	80004e0 <__aeabi_f2d>
 80048b6:	a32e      	add	r3, pc, #184	@ (adr r3, 8004970 <Workspace_limit+0xc8>)
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	f7fc f8da 	bl	8000a74 <__aeabi_dcmplt>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00b      	beq.n	80048de <Workspace_limit+0x36>
 80048c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004984 <Workspace_limit+0xdc>)
 80048c8:	edd3 7a00 	vldr	s15, [r3]
 80048cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d4:	dd03      	ble.n	80048de <Workspace_limit+0x36>
	{
		R_PWM = 0;
 80048d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004984 <Workspace_limit+0xdc>)
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
	}
	if (Revolute_QEIdata.RadPosition > 5.06145 && R_PWM < 0)
 80048de:	4b28      	ldr	r3, [pc, #160]	@ (8004980 <Workspace_limit+0xd8>)
 80048e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fb fdfc 	bl	80004e0 <__aeabi_f2d>
 80048e8:	a323      	add	r3, pc, #140	@ (adr r3, 8004978 <Workspace_limit+0xd0>)
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f7fc f8df 	bl	8000ab0 <__aeabi_dcmpgt>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00b      	beq.n	8004910 <Workspace_limit+0x68>
 80048f8:	4b22      	ldr	r3, [pc, #136]	@ (8004984 <Workspace_limit+0xdc>)
 80048fa:	edd3 7a00 	vldr	s15, [r3]
 80048fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004906:	d503      	bpl.n	8004910 <Workspace_limit+0x68>
	{
		R_PWM = 0;
 8004908:	4b1e      	ldr	r3, [pc, #120]	@ (8004984 <Workspace_limit+0xdc>)
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition > 305 && P_PWM > 0)
 8004910:	4b1d      	ldr	r3, [pc, #116]	@ (8004988 <Workspace_limit+0xe0>)
 8004912:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004916:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800498c <Workspace_limit+0xe4>
 800491a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800491e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004922:	dd0b      	ble.n	800493c <Workspace_limit+0x94>
 8004924:	4b1a      	ldr	r3, [pc, #104]	@ (8004990 <Workspace_limit+0xe8>)
 8004926:	edd3 7a00 	vldr	s15, [r3]
 800492a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004932:	dd03      	ble.n	800493c <Workspace_limit+0x94>
	{
		P_PWM = 0;
 8004934:	4b16      	ldr	r3, [pc, #88]	@ (8004990 <Workspace_limit+0xe8>)
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
	}
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0)
 800493c:	4b12      	ldr	r3, [pc, #72]	@ (8004988 <Workspace_limit+0xe0>)
 800493e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004942:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800494a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494e:	d400      	bmi.n	8004952 <Workspace_limit+0xaa>
	{
		P_PWM = 0;
	}
}
 8004950:	e00c      	b.n	800496c <Workspace_limit+0xc4>
	if (Prismatic_QEIdata.mmPosition < -1 && P_PWM < 0)
 8004952:	4b0f      	ldr	r3, [pc, #60]	@ (8004990 <Workspace_limit+0xe8>)
 8004954:	edd3 7a00 	vldr	s15, [r3]
 8004958:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800495c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004960:	d400      	bmi.n	8004964 <Workspace_limit+0xbc>
}
 8004962:	e003      	b.n	800496c <Workspace_limit+0xc4>
		P_PWM = 0;
 8004964:	4b0a      	ldr	r3, [pc, #40]	@ (8004990 <Workspace_limit+0xe8>)
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
}
 800496c:	bf00      	nop
 800496e:	bd80      	pop	{r7, pc}
 8004970:	1e8e6080 	.word	0x1e8e6080
 8004974:	bffeb7bf 	.word	0xbffeb7bf
 8004978:	bfb15b57 	.word	0xbfb15b57
 800497c:	40143eec 	.word	0x40143eec
 8004980:	20000af8 	.word	0x20000af8
 8004984:	20000bc4 	.word	0x20000bc4
 8004988:	20000b38 	.word	0x20000b38
 800498c:	43988000 	.word	0x43988000
 8004990:	20000bc8 	.word	0x20000bc8

08004994 <Get_QRIdata>:

void Get_QRIdata(float *prism_vel_mm, float *prism_acc_mm, float *prism_mm_pos,
				 float *rev_ang_vel_rad, float *rev_ang_acc_rad, float *rev_rad_pos)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
	if (prism_vel_mm)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <Get_QRIdata+0x1c>
		*prism_vel_mm = Prismatic_QEIdata.Velocity;
 80049a8:	4b16      	ldr	r3, [pc, #88]	@ (8004a04 <Get_QRIdata+0x70>)
 80049aa:	6a1a      	ldr	r2, [r3, #32]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	601a      	str	r2, [r3, #0]
	if (prism_acc_mm)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <Get_QRIdata+0x2a>
		*prism_acc_mm = Prismatic_QEIdata.Acceleration;
 80049b6:	4b13      	ldr	r3, [pc, #76]	@ (8004a04 <Get_QRIdata+0x70>)
 80049b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	601a      	str	r2, [r3, #0]
	if (prism_mm_pos)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <Get_QRIdata+0x38>
		*prism_mm_pos = Prismatic_QEIdata.mmPosition;
 80049c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a04 <Get_QRIdata+0x70>)
 80049c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	601a      	str	r2, [r3, #0]
	if (rev_ang_vel_rad)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <Get_QRIdata+0x46>
		*rev_ang_vel_rad = Revolute_QEIdata.Velocity;
 80049d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a08 <Get_QRIdata+0x74>)
 80049d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	601a      	str	r2, [r3, #0]
	if (rev_ang_acc_rad)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <Get_QRIdata+0x54>
		*rev_ang_acc_rad = Revolute_QEIdata.Acceleration;
 80049e0:	4b09      	ldr	r3, [pc, #36]	@ (8004a08 <Get_QRIdata+0x74>)
 80049e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	601a      	str	r2, [r3, #0]
	if (rev_rad_pos)
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <Get_QRIdata+0x62>
		*rev_rad_pos = Revolute_QEIdata.RadPosition;
 80049ee:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <Get_QRIdata+0x74>)
 80049f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	601a      	str	r2, [r3, #0]
}
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000b38 	.word	0x20000b38
 8004a08:	20000af8 	.word	0x20000af8

08004a0c <TrapezoidStep>:
	}
	return (distance - 0.5f * amax * t_half * t_half) / t_half;
}

void TrapezoidStep(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
	//	static float last_TargetR = 0.0f;
	//	static float last_TargetP = 0.0f;

	// 2a) Detect setpoint jump (revolute, in radians)
	float r_diff = fabsf(TargetR - last_TargetR);
 8004a12:	4b38      	ldr	r3, [pc, #224]	@ (8004af4 <TrapezoidStep+0xe8>)
 8004a14:	ed93 7a00 	vldr	s14, [r3]
 8004a18:	4b37      	ldr	r3, [pc, #220]	@ (8004af8 <TrapezoidStep+0xec>)
 8004a1a:	edd3 7a00 	vldr	s15, [r3]
 8004a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a22:	eef0 7ae7 	vabs.f32	s15, s15
 8004a26:	edc7 7a01 	vstr	s15, [r7, #4]
	if (r_diff > 0.001f)
 8004a2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a2e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8004afc <TrapezoidStep+0xf0>
 8004a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3a:	dd0f      	ble.n	8004a5c <TrapezoidStep+0x50>
	{
		// Re‐init revolute trapezoid: distance_to_go = R_Pos_Error (rad)
		Trapezoidal_Init(&revolute, R_Pos_Error, /*maxVel*/ 1.40f, /*maxAcc*/
 8004a3c:	4b30      	ldr	r3, [pc, #192]	@ (8004b00 <TrapezoidStep+0xf4>)
 8004a3e:	edd3 7a00 	vldr	s15, [r3]
 8004a42:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8004a46:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8004b04 <TrapezoidStep+0xf8>
 8004a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a4e:	482e      	ldr	r0, [pc, #184]	@ (8004b08 <TrapezoidStep+0xfc>)
 8004a50:	f7fc ffd4 	bl	80019fc <Trapezoidal_Init>
						 9.0f);
		last_TargetR = TargetR;
 8004a54:	4b27      	ldr	r3, [pc, #156]	@ (8004af4 <TrapezoidStep+0xe8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a27      	ldr	r2, [pc, #156]	@ (8004af8 <TrapezoidStep+0xec>)
 8004a5a:	6013      	str	r3, [r2, #0]
	}

	// 2b) Detect setpoint jump (prismatic, in mm)
	float p_diff = fabsf(TargetP - last_TargetP);
 8004a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004b0c <TrapezoidStep+0x100>)
 8004a5e:	ed93 7a00 	vldr	s14, [r3]
 8004a62:	4b2b      	ldr	r3, [pc, #172]	@ (8004b10 <TrapezoidStep+0x104>)
 8004a64:	edd3 7a00 	vldr	s15, [r3]
 8004a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a6c:	eef0 7ae7 	vabs.f32	s15, s15
 8004a70:	edc7 7a00 	vstr	s15, [r7]
	if (p_diff > 0.01f)
 8004a74:	edd7 7a00 	vldr	s15, [r7]
 8004a78:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004b14 <TrapezoidStep+0x108>
 8004a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a84:	dd0f      	ble.n	8004aa6 <TrapezoidStep+0x9a>
	{
		// Re‐init prismatic trapezoid: distance_to_go = P_Pos_Error (mm)
		Trapezoidal_Init(&prismatic, P_Pos_Error, /*maxVel*/ 600.0f, /*maxAcc*/
 8004a86:	4b24      	ldr	r3, [pc, #144]	@ (8004b18 <TrapezoidStep+0x10c>)
 8004a88:	edd3 7a00 	vldr	s15, [r3]
 8004a8c:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8004b1c <TrapezoidStep+0x110>
 8004a90:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8004b20 <TrapezoidStep+0x114>
 8004a94:	eeb0 0a67 	vmov.f32	s0, s15
 8004a98:	4822      	ldr	r0, [pc, #136]	@ (8004b24 <TrapezoidStep+0x118>)
 8004a9a:	f7fc ffaf 	bl	80019fc <Trapezoidal_Init>
						 3000.0f);
		last_TargetP = TargetP;
 8004a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004b0c <TrapezoidStep+0x100>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b10 <TrapezoidStep+0x104>)
 8004aa4:	6013      	str	r3, [r2, #0]
	}

	// 2c) Advance both trapezoids by 1 ms → update feedforward pos/vel/acc
	Trapezoidal_Update(&revolute, 0.001f);
 8004aa6:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8004afc <TrapezoidStep+0xf0>
 8004aaa:	4817      	ldr	r0, [pc, #92]	@ (8004b08 <TrapezoidStep+0xfc>)
 8004aac:	f7fd f870 	bl	8001b90 <Trapezoidal_Update>
	TargetRPos = revolute.current_position;
 8004ab0:	4b15      	ldr	r3, [pc, #84]	@ (8004b08 <TrapezoidStep+0xfc>)
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b28 <TrapezoidStep+0x11c>)
 8004ab6:	6013      	str	r3, [r2, #0]
	TargetRVel = revolute.current_velocity;
 8004ab8:	4b13      	ldr	r3, [pc, #76]	@ (8004b08 <TrapezoidStep+0xfc>)
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	4a1b      	ldr	r2, [pc, #108]	@ (8004b2c <TrapezoidStep+0x120>)
 8004abe:	6013      	str	r3, [r2, #0]
	TargetRAcc = revolute.current_acceleration;
 8004ac0:	4b11      	ldr	r3, [pc, #68]	@ (8004b08 <TrapezoidStep+0xfc>)
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8004b30 <TrapezoidStep+0x124>)
 8004ac6:	6013      	str	r3, [r2, #0]

	Trapezoidal_Update(&prismatic, 0.001f);
 8004ac8:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8004afc <TrapezoidStep+0xf0>
 8004acc:	4815      	ldr	r0, [pc, #84]	@ (8004b24 <TrapezoidStep+0x118>)
 8004ace:	f7fd f85f 	bl	8001b90 <Trapezoidal_Update>
	TargetPPos = prismatic.current_position;
 8004ad2:	4b14      	ldr	r3, [pc, #80]	@ (8004b24 <TrapezoidStep+0x118>)
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	4a17      	ldr	r2, [pc, #92]	@ (8004b34 <TrapezoidStep+0x128>)
 8004ad8:	6013      	str	r3, [r2, #0]
	TargetPVel = prismatic.current_velocity;
 8004ada:	4b12      	ldr	r3, [pc, #72]	@ (8004b24 <TrapezoidStep+0x118>)
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	4a16      	ldr	r2, [pc, #88]	@ (8004b38 <TrapezoidStep+0x12c>)
 8004ae0:	6013      	str	r3, [r2, #0]
	TargetPAcc = prismatic.current_acceleration;
 8004ae2:	4b10      	ldr	r3, [pc, #64]	@ (8004b24 <TrapezoidStep+0x118>)
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	4a15      	ldr	r2, [pc, #84]	@ (8004b3c <TrapezoidStep+0x130>)
 8004ae8:	6013      	str	r3, [r2, #0]
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000b94 	.word	0x20000b94
 8004af8:	20001318 	.word	0x20001318
 8004afc:	3a83126f 	.word	0x3a83126f
 8004b00:	20000bb4 	.word	0x20000bb4
 8004b04:	3fb33333 	.word	0x3fb33333
 8004b08:	2000132c 	.word	0x2000132c
 8004b0c:	20000b98 	.word	0x20000b98
 8004b10:	2000131c 	.word	0x2000131c
 8004b14:	3c23d70a 	.word	0x3c23d70a
 8004b18:	20000bb8 	.word	0x20000bb8
 8004b1c:	453b8000 	.word	0x453b8000
 8004b20:	44160000 	.word	0x44160000
 8004b24:	20001370 	.word	0x20001370
 8004b28:	20000b9c 	.word	0x20000b9c
 8004b2c:	20000ba4 	.word	0x20000ba4
 8004b30:	20000bac 	.word	0x20000bac
 8004b34:	20000ba0 	.word	0x20000ba0
 8004b38:	20000ba8 	.word	0x20000ba8
 8004b3c:	20000bb0 	.word	0x20000bb0

08004b40 <PIDStep>:

void PIDStep(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
	static int loop_counter1 = 0;
	static float R_Target_Velocity = 0.0f;
	static float P_Target_Velocity = 0.0f;

	loop_counter1++;
 8004b46:	4b65      	ldr	r3, [pc, #404]	@ (8004cdc <PIDStep+0x19c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	4a63      	ldr	r2, [pc, #396]	@ (8004cdc <PIDStep+0x19c>)
 8004b4e:	6013      	str	r3, [r2, #0]
	// 3a) Outer‐loop (position) PID every 10 ms
	if (loop_counter1 >= 10)
 8004b50:	4b62      	ldr	r3, [pc, #392]	@ (8004cdc <PIDStep+0x19c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b09      	cmp	r3, #9
 8004b56:	dd62      	ble.n	8004c1e <PIDStep+0xde>
	{
		loop_counter1 = 0;
 8004b58:	4b60      	ldr	r3, [pc, #384]	@ (8004cdc <PIDStep+0x19c>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]

		// Recompute “true” pos‐errors
		float R_Pos_now = TargetR - Revolute_QEIdata.RadPosition;
 8004b5e:	4b60      	ldr	r3, [pc, #384]	@ (8004ce0 <PIDStep+0x1a0>)
 8004b60:	ed93 7a00 	vldr	s14, [r3]
 8004b64:	4b5f      	ldr	r3, [pc, #380]	@ (8004ce4 <PIDStep+0x1a4>)
 8004b66:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b6e:	edc7 7a03 	vstr	s15, [r7, #12]
		float P_Pos_now = TargetP - Prismatic_QEIdata.mmPosition;
 8004b72:	4b5d      	ldr	r3, [pc, #372]	@ (8004ce8 <PIDStep+0x1a8>)
 8004b74:	ed93 7a00 	vldr	s14, [r3]
 8004b78:	4b5c      	ldr	r3, [pc, #368]	@ (8004cec <PIDStep+0x1ac>)
 8004b7a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b82:	edc7 7a02 	vstr	s15, [r7, #8]

		// Position‐PID → corrective velocity for revolute
		float R_corr_vel = PID_Update(R_Pos_now, R_kP_pos, R_kI_pos, R_kD_pos,
 8004b86:	4b5a      	ldr	r3, [pc, #360]	@ (8004cf0 <PIDStep+0x1b0>)
 8004b88:	edd3 7a00 	vldr	s15, [r3]
 8004b8c:	4b59      	ldr	r3, [pc, #356]	@ (8004cf4 <PIDStep+0x1b4>)
 8004b8e:	ed93 7a00 	vldr	s14, [r3]
 8004b92:	4b59      	ldr	r3, [pc, #356]	@ (8004cf8 <PIDStep+0x1b8>)
 8004b94:	edd3 6a00 	vldr	s13, [r3]
 8004b98:	4858      	ldr	r0, [pc, #352]	@ (8004cfc <PIDStep+0x1bc>)
 8004b9a:	ed9f 3a59 	vldr	s6, [pc, #356]	@ 8004d00 <PIDStep+0x1c0>
 8004b9e:	eddf 2a59 	vldr	s5, [pc, #356]	@ 8004d04 <PIDStep+0x1c4>
 8004ba2:	ed9f 2a59 	vldr	s4, [pc, #356]	@ 8004d08 <PIDStep+0x1c8>
 8004ba6:	eef0 1a66 	vmov.f32	s3, s13
 8004baa:	eeb0 1a47 	vmov.f32	s2, s14
 8004bae:	eef0 0a67 	vmov.f32	s1, s15
 8004bb2:	ed97 0a03 	vldr	s0, [r7, #12]
 8004bb6:	f7ff fb15 	bl	80041e4 <PID_Update>
 8004bba:	ed87 0a01 	vstr	s0, [r7, #4]
									  0.010f, // dt = 10 ms
									  -100.0f, +100.0f, &pid_r);

		// Position‐PID → corrective velocity for prismatic
		float P_corr_vel = PID_Update(P_Pos_now, P_kP_pos, P_kI_pos, P_kD_pos,
 8004bbe:	4b53      	ldr	r3, [pc, #332]	@ (8004d0c <PIDStep+0x1cc>)
 8004bc0:	edd3 7a00 	vldr	s15, [r3]
 8004bc4:	4b52      	ldr	r3, [pc, #328]	@ (8004d10 <PIDStep+0x1d0>)
 8004bc6:	ed93 7a00 	vldr	s14, [r3]
 8004bca:	4b52      	ldr	r3, [pc, #328]	@ (8004d14 <PIDStep+0x1d4>)
 8004bcc:	edd3 6a00 	vldr	s13, [r3]
 8004bd0:	4851      	ldr	r0, [pc, #324]	@ (8004d18 <PIDStep+0x1d8>)
 8004bd2:	ed9f 3a4b 	vldr	s6, [pc, #300]	@ 8004d00 <PIDStep+0x1c0>
 8004bd6:	eddf 2a4b 	vldr	s5, [pc, #300]	@ 8004d04 <PIDStep+0x1c4>
 8004bda:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 8004d08 <PIDStep+0x1c8>
 8004bde:	eef0 1a66 	vmov.f32	s3, s13
 8004be2:	eeb0 1a47 	vmov.f32	s2, s14
 8004be6:	eef0 0a67 	vmov.f32	s1, s15
 8004bea:	ed97 0a02 	vldr	s0, [r7, #8]
 8004bee:	f7ff faf9 	bl	80041e4 <PID_Update>
 8004bf2:	ed87 0a00 	vstr	s0, [r7]
									  0.010f, -100.0f, +100.0f, &pid_p);

		// Combine with feedforward velocities
		R_Target_Velocity = TargetRVel + R_corr_vel;
 8004bf6:	4b49      	ldr	r3, [pc, #292]	@ (8004d1c <PIDStep+0x1dc>)
 8004bf8:	ed93 7a00 	vldr	s14, [r3]
 8004bfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c04:	4b46      	ldr	r3, [pc, #280]	@ (8004d20 <PIDStep+0x1e0>)
 8004c06:	edc3 7a00 	vstr	s15, [r3]
		P_Target_Velocity = TargetPVel + P_corr_vel;
 8004c0a:	4b46      	ldr	r3, [pc, #280]	@ (8004d24 <PIDStep+0x1e4>)
 8004c0c:	ed93 7a00 	vldr	s14, [r3]
 8004c10:	edd7 7a00 	vldr	s15, [r7]
 8004c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c18:	4b43      	ldr	r3, [pc, #268]	@ (8004d28 <PIDStep+0x1e8>)
 8004c1a:	edc3 7a00 	vstr	s15, [r3]
	}

	// 3b) Inner‐loop (velocity) PID _every_ 1 ms:
	R_Velo_Error = R_Target_Velocity - Revolute_QEIdata.Velocity_f;
 8004c1e:	4b40      	ldr	r3, [pc, #256]	@ (8004d20 <PIDStep+0x1e0>)
 8004c20:	ed93 7a00 	vldr	s14, [r3]
 8004c24:	4b2f      	ldr	r3, [pc, #188]	@ (8004ce4 <PIDStep+0x1a4>)
 8004c26:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c2e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d2c <PIDStep+0x1ec>)
 8004c30:	edc3 7a00 	vstr	s15, [r3]
	R_PWM = PID_Update(R_Velo_Error, R_kP_vel, R_kI_vel, R_kD_vel, 0.001f, // dt = 1 ms
 8004c34:	4b3d      	ldr	r3, [pc, #244]	@ (8004d2c <PIDStep+0x1ec>)
 8004c36:	edd3 7a00 	vldr	s15, [r3]
 8004c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d30 <PIDStep+0x1f0>)
 8004c3c:	ed93 7a00 	vldr	s14, [r3]
 8004c40:	4b3c      	ldr	r3, [pc, #240]	@ (8004d34 <PIDStep+0x1f4>)
 8004c42:	edd3 6a00 	vldr	s13, [r3]
 8004c46:	4b3c      	ldr	r3, [pc, #240]	@ (8004d38 <PIDStep+0x1f8>)
 8004c48:	ed93 6a00 	vldr	s12, [r3]
 8004c4c:	483b      	ldr	r0, [pc, #236]	@ (8004d3c <PIDStep+0x1fc>)
 8004c4e:	ed9f 3a2c 	vldr	s6, [pc, #176]	@ 8004d00 <PIDStep+0x1c0>
 8004c52:	eddf 2a2c 	vldr	s5, [pc, #176]	@ 8004d04 <PIDStep+0x1c4>
 8004c56:	ed9f 2a3a 	vldr	s4, [pc, #232]	@ 8004d40 <PIDStep+0x200>
 8004c5a:	eef0 1a46 	vmov.f32	s3, s12
 8004c5e:	eeb0 1a66 	vmov.f32	s2, s13
 8004c62:	eef0 0a47 	vmov.f32	s1, s14
 8004c66:	eeb0 0a67 	vmov.f32	s0, s15
 8004c6a:	f7ff fabb 	bl	80041e4 <PID_Update>
 8004c6e:	eef0 7a40 	vmov.f32	s15, s0
 8004c72:	4b34      	ldr	r3, [pc, #208]	@ (8004d44 <PIDStep+0x204>)
 8004c74:	edc3 7a00 	vstr	s15, [r3]
					   -100.0f, +100.0f, &pid_r_v);

	P_Velo_Error = P_Target_Velocity - Prismatic_QEIdata.Velocity_f;
 8004c78:	4b2b      	ldr	r3, [pc, #172]	@ (8004d28 <PIDStep+0x1e8>)
 8004c7a:	ed93 7a00 	vldr	s14, [r3]
 8004c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cec <PIDStep+0x1ac>)
 8004c80:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c88:	4b2f      	ldr	r3, [pc, #188]	@ (8004d48 <PIDStep+0x208>)
 8004c8a:	edc3 7a00 	vstr	s15, [r3]
	P_PWM = PID_Update(P_Velo_Error, P_kP_vel, P_kI_vel, P_kD_vel, 0.001f,
 8004c8e:	4b2e      	ldr	r3, [pc, #184]	@ (8004d48 <PIDStep+0x208>)
 8004c90:	edd3 7a00 	vldr	s15, [r3]
 8004c94:	4b2d      	ldr	r3, [pc, #180]	@ (8004d4c <PIDStep+0x20c>)
 8004c96:	ed93 7a00 	vldr	s14, [r3]
 8004c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004d50 <PIDStep+0x210>)
 8004c9c:	edd3 6a00 	vldr	s13, [r3]
 8004ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8004d54 <PIDStep+0x214>)
 8004ca2:	ed93 6a00 	vldr	s12, [r3]
 8004ca6:	482c      	ldr	r0, [pc, #176]	@ (8004d58 <PIDStep+0x218>)
 8004ca8:	ed9f 3a15 	vldr	s6, [pc, #84]	@ 8004d00 <PIDStep+0x1c0>
 8004cac:	eddf 2a15 	vldr	s5, [pc, #84]	@ 8004d04 <PIDStep+0x1c4>
 8004cb0:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 8004d40 <PIDStep+0x200>
 8004cb4:	eef0 1a46 	vmov.f32	s3, s12
 8004cb8:	eeb0 1a66 	vmov.f32	s2, s13
 8004cbc:	eef0 0a47 	vmov.f32	s1, s14
 8004cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8004cc4:	f7ff fa8e 	bl	80041e4 <PID_Update>
 8004cc8:	eef0 7a40 	vmov.f32	s15, s0
 8004ccc:	4b23      	ldr	r3, [pc, #140]	@ (8004d5c <PIDStep+0x21c>)
 8004cce:	edc3 7a00 	vstr	s15, [r3]
					   -100.0f, +100.0f, &pid_p_v);
}
 8004cd2:	bf00      	nop
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	200013f0 	.word	0x200013f0
 8004ce0:	20000b94 	.word	0x20000b94
 8004ce4:	20000af8 	.word	0x20000af8
 8004ce8:	20000b98 	.word	0x20000b98
 8004cec:	20000b38 	.word	0x20000b38
 8004cf0:	2000020c 	.word	0x2000020c
 8004cf4:	20000210 	.word	0x20000210
 8004cf8:	20000214 	.word	0x20000214
 8004cfc:	20000bf8 	.word	0x20000bf8
 8004d00:	42c80000 	.word	0x42c80000
 8004d04:	c2c80000 	.word	0xc2c80000
 8004d08:	3c23d70a 	.word	0x3c23d70a
 8004d0c:	20000220 	.word	0x20000220
 8004d10:	20000224 	.word	0x20000224
 8004d14:	20000228 	.word	0x20000228
 8004d18:	20000c00 	.word	0x20000c00
 8004d1c:	20000ba4 	.word	0x20000ba4
 8004d20:	200013f4 	.word	0x200013f4
 8004d24:	20000ba8 	.word	0x20000ba8
 8004d28:	200013f8 	.word	0x200013f8
 8004d2c:	20000bbc 	.word	0x20000bbc
 8004d30:	20000200 	.word	0x20000200
 8004d34:	20000204 	.word	0x20000204
 8004d38:	20000208 	.word	0x20000208
 8004d3c:	20000c08 	.word	0x20000c08
 8004d40:	3a83126f 	.word	0x3a83126f
 8004d44:	20000bc4 	.word	0x20000bc4
 8004d48:	20000bc0 	.word	0x20000bc0
 8004d4c:	20000218 	.word	0x20000218
 8004d50:	2000021c 	.word	0x2000021c
 8004d54:	20000c18 	.word	0x20000c18
 8004d58:	20000c10 	.word	0x20000c10
 8004d5c:	20000bc8 	.word	0x20000bc8

08004d60 <ToleranceCheck>:

int ToleranceCheck(void)
{
 8004d60:	b5b0      	push	{r4, r5, r7, lr}
 8004d62:	af00      	add	r7, sp, #0
	static uint64_t lock_timer_us = 0;

	if ((fabsf(TargetR - Revolute_QEIdata.RadPosition) < R_ERR_TOL_RAD) && (fabsf(TargetP - Prismatic_QEIdata.mmPosition) < P_ERR_TOL_MM))
 8004d64:	4b24      	ldr	r3, [pc, #144]	@ (8004df8 <ToleranceCheck+0x98>)
 8004d66:	ed93 7a00 	vldr	s14, [r3]
 8004d6a:	4b24      	ldr	r3, [pc, #144]	@ (8004dfc <ToleranceCheck+0x9c>)
 8004d6c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d74:	eef0 7ae7 	vabs.f32	s15, s15
 8004d78:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004e00 <ToleranceCheck+0xa0>
 8004d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d84:	d52c      	bpl.n	8004de0 <ToleranceCheck+0x80>
 8004d86:	4b1f      	ldr	r3, [pc, #124]	@ (8004e04 <ToleranceCheck+0xa4>)
 8004d88:	ed93 7a00 	vldr	s14, [r3]
 8004d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004e08 <ToleranceCheck+0xa8>)
 8004d8e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d96:	eef0 7ae7 	vabs.f32	s15, s15
 8004d9a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004e0c <ToleranceCheck+0xac>
 8004d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da6:	d51b      	bpl.n	8004de0 <ToleranceCheck+0x80>
	{
		if (lock_timer_us == 0)
 8004da8:	4b19      	ldr	r3, [pc, #100]	@ (8004e10 <ToleranceCheck+0xb0>)
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	d107      	bne.n	8004dc2 <ToleranceCheck+0x62>
		{
			lock_timer_us = micros();
 8004db2:	f7ff f9fd 	bl	80041b0 <micros>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4915      	ldr	r1, [pc, #84]	@ (8004e10 <ToleranceCheck+0xb0>)
 8004dbc:	e9c1 2300 	strd	r2, r3, [r1]
		if (lock_timer_us == 0)
 8004dc0:	e016      	b.n	8004df0 <ToleranceCheck+0x90>
		}
		else if ((micros() - lock_timer_us) >= HOLD_TIME_US)
 8004dc2:	f7ff f9f5 	bl	80041b0 <micros>
 8004dc6:	4b12      	ldr	r3, [pc, #72]	@ (8004e10 <ToleranceCheck+0xb0>)
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	1a84      	subs	r4, r0, r2
 8004dce:	eb61 0503 	sbc.w	r5, r1, r3
 8004dd2:	4b10      	ldr	r3, [pc, #64]	@ (8004e14 <ToleranceCheck+0xb4>)
 8004dd4:	429c      	cmp	r4, r3
 8004dd6:	f175 0300 	sbcs.w	r3, r5, #0
 8004dda:	d309      	bcc.n	8004df0 <ToleranceCheck+0x90>
		{
			// We have stayed inside tolerance for long enough → “lock & hold”
			return 1;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e009      	b.n	8004df4 <ToleranceCheck+0x94>
		}
	}
	else
	{
		lock_timer_us = 0;
 8004de0:	490b      	ldr	r1, [pc, #44]	@ (8004e10 <ToleranceCheck+0xb0>)
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	e9c1 2300 	strd	r2, r3, [r1]
 8004dee:	e000      	b.n	8004df2 <ToleranceCheck+0x92>
		if (lock_timer_us == 0)
 8004df0:	bf00      	nop
	}

	return 0;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	bdb0      	pop	{r4, r5, r7, pc}
 8004df8:	20000b94 	.word	0x20000b94
 8004dfc:	20000af8 	.word	0x20000af8
 8004e00:	3d0b4396 	.word	0x3d0b4396
 8004e04:	20000b98 	.word	0x20000b98
 8004e08:	20000b38 	.word	0x20000b38
 8004e0c:	3e4ccccd 	.word	0x3e4ccccd
 8004e10:	20001400 	.word	0x20001400
 8004e14:	000f4240 	.word	0x000f4240

08004e18 <CascadeControl_Step>:

int CascadeControl_Step(void)
{
 8004e18:	b5b0      	push	{r4, r5, r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
	static uint64_t timestampState2 = 0;

	// 1a) Convert desired‐angle (deg) → (rad) and compute current pos‐errors
	// float TargetR = TargetR_Deg * (M_PI / 180.0f);
	R_Pos_Error = TargetR - Revolute_QEIdata.RadPosition;
 8004e1e:	4b34      	ldr	r3, [pc, #208]	@ (8004ef0 <CascadeControl_Step+0xd8>)
 8004e20:	ed93 7a00 	vldr	s14, [r3]
 8004e24:	4b33      	ldr	r3, [pc, #204]	@ (8004ef4 <CascadeControl_Step+0xdc>)
 8004e26:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e2e:	4b32      	ldr	r3, [pc, #200]	@ (8004ef8 <CascadeControl_Step+0xe0>)
 8004e30:	edc3 7a00 	vstr	s15, [r3]
	P_Pos_Error = TargetP - Prismatic_QEIdata.mmPosition;
 8004e34:	4b31      	ldr	r3, [pc, #196]	@ (8004efc <CascadeControl_Step+0xe4>)
 8004e36:	ed93 7a00 	vldr	s14, [r3]
 8004e3a:	4b31      	ldr	r3, [pc, #196]	@ (8004f00 <CascadeControl_Step+0xe8>)
 8004e3c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004e40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e44:	4b2f      	ldr	r3, [pc, #188]	@ (8004f04 <CascadeControl_Step+0xec>)
 8004e46:	edc3 7a00 	vstr	s15, [r3]
	R_Pos_Error_Deg = R_Pos_Error * (180.0f / M_PI);
 8004e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef8 <CascadeControl_Step+0xe0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fb fb46 	bl	80004e0 <__aeabi_f2d>
 8004e54:	a324      	add	r3, pc, #144	@ (adr r3, 8004ee8 <CascadeControl_Step+0xd0>)
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	f7fb fb99 	bl	8000590 <__aeabi_dmul>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4610      	mov	r0, r2
 8004e64:	4619      	mov	r1, r3
 8004e66:	f7fb fe4d 	bl	8000b04 <__aeabi_d2f>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4a26      	ldr	r2, [pc, #152]	@ (8004f08 <CascadeControl_Step+0xf0>)
 8004e6e:	6013      	str	r3, [r2, #0]

	// 1b) 1 ms timer check
	uint64_t nowtimestamp = micros();
 8004e70:	f7ff f99e 	bl	80041b0 <micros>
 8004e74:	e9c7 0100 	strd	r0, r1, [r7]
	if (nowtimestamp <= timestampState2)
 8004e78:	4b24      	ldr	r3, [pc, #144]	@ (8004f0c <CascadeControl_Step+0xf4>)
 8004e7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e82:	4290      	cmp	r0, r2
 8004e84:	eb71 0303 	sbcs.w	r3, r1, r3
 8004e88:	d301      	bcc.n	8004e8e <CascadeControl_Step+0x76>
	{
		// Not yet 1 ms since last run → bail out
		return 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e026      	b.n	8004edc <CascadeControl_Step+0xc4>
	}
	// Advance to next 1 ms tick
	timestampState2 = nowtimestamp + 1000;
 8004e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e92:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8004e96:	f143 0500 	adc.w	r5, r3, #0
 8004e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8004f0c <CascadeControl_Step+0xf4>)
 8004e9c:	e9c3 4500 	strd	r4, r5, [r3]

	// 2) Trapezoid logic: init if needed + update (1 ms)
	TrapezoidStep();
 8004ea0:	f7ff fdb4 	bl	8004a0c <TrapezoidStep>

	// 3) PID logic: 10 ms outer, 1 ms inner
	PIDStep();
 8004ea4:	f7ff fe4c 	bl	8004b40 <PIDStep>

	// 4) Apply workspace limits (joint‐limits, etc.) and send the PWM commands
	Workspace_limit();
 8004ea8:	f7ff fcfe 	bl	80048a8 <Workspace_limit>
	Set_Motor(0, R_PWM);
 8004eac:	4b18      	ldr	r3, [pc, #96]	@ (8004f10 <CascadeControl_Step+0xf8>)
 8004eae:	edd3 7a00 	vldr	s15, [r3]
 8004eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	f7ff fc2c 	bl	8004714 <Set_Motor>
	Set_Motor(1, P_PWM);
 8004ebc:	4b15      	ldr	r3, [pc, #84]	@ (8004f14 <CascadeControl_Step+0xfc>)
 8004ebe:	edd3 7a00 	vldr	s15, [r3]
 8004ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	f7ff fc24 	bl	8004714 <Set_Motor>

	// 5) Tolerance‐check + “lock & hold” (servo + zero motors) if arrived
	CheckTolerance = ToleranceCheck();
 8004ecc:	f7ff ff48 	bl	8004d60 <ToleranceCheck>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	4b10      	ldr	r3, [pc, #64]	@ (8004f18 <CascadeControl_Step+0x100>)
 8004ed6:	701a      	strb	r2, [r3, #0]
	return CheckTolerance;
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8004f18 <CascadeControl_Step+0x100>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
	//	return ToleranceCheck();
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ee4:	f3af 8000 	nop.w
 8004ee8:	1a63c1f8 	.word	0x1a63c1f8
 8004eec:	404ca5dc 	.word	0x404ca5dc
 8004ef0:	20000b94 	.word	0x20000b94
 8004ef4:	20000af8 	.word	0x20000af8
 8004ef8:	20000bb4 	.word	0x20000bb4
 8004efc:	20000b98 	.word	0x20000b98
 8004f00:	20000b38 	.word	0x20000b38
 8004f04:	20000bb8 	.word	0x20000bb8
 8004f08:	20000aac 	.word	0x20000aac
 8004f0c:	20001408 	.word	0x20001408
 8004f10:	20000bc4 	.word	0x20000bc4
 8004f14:	20000bc8 	.word	0x20000bc8
 8004f18:	20001328 	.word	0x20001328

08004f1c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f20:	b672      	cpsid	i
}
 8004f22:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004f24:	bf00      	nop
 8004f26:	e7fd      	b.n	8004f24 <Error_Handler+0x8>

08004f28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f6c <HAL_MspInit+0x44>)
 8004f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f32:	4a0e      	ldr	r2, [pc, #56]	@ (8004f6c <HAL_MspInit+0x44>)
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f6c <HAL_MspInit+0x44>)
 8004f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	607b      	str	r3, [r7, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f46:	4b09      	ldr	r3, [pc, #36]	@ (8004f6c <HAL_MspInit+0x44>)
 8004f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f4a:	4a08      	ldr	r2, [pc, #32]	@ (8004f6c <HAL_MspInit+0x44>)
 8004f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f50:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f52:	4b06      	ldr	r3, [pc, #24]	@ (8004f6c <HAL_MspInit+0x44>)
 8004f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f5a:	603b      	str	r3, [r7, #0]
 8004f5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004f5e:	f001 fa97 	bl	8006490 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40021000 	.word	0x40021000

08004f70 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08c      	sub	sp, #48	@ 0x30
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f78:	f107 031c 	add.w	r3, r7, #28
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	605a      	str	r2, [r3, #4]
 8004f82:	609a      	str	r2, [r3, #8]
 8004f84:	60da      	str	r2, [r3, #12]
 8004f86:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a32      	ldr	r2, [pc, #200]	@ (8005058 <HAL_TIM_IC_MspInit+0xe8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d130      	bne.n	8004ff4 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f92:	4b32      	ldr	r3, [pc, #200]	@ (800505c <HAL_TIM_IC_MspInit+0xec>)
 8004f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f96:	4a31      	ldr	r2, [pc, #196]	@ (800505c <HAL_TIM_IC_MspInit+0xec>)
 8004f98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004f9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800505c <HAL_TIM_IC_MspInit+0xec>)
 8004fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004faa:	4b2c      	ldr	r3, [pc, #176]	@ (800505c <HAL_TIM_IC_MspInit+0xec>)
 8004fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fae:	4a2b      	ldr	r2, [pc, #172]	@ (800505c <HAL_TIM_IC_MspInit+0xec>)
 8004fb0:	f043 0304 	orr.w	r3, r3, #4
 8004fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fb6:	4b29      	ldr	r3, [pc, #164]	@ (800505c <HAL_TIM_IC_MspInit+0xec>)
 8004fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fd6:	f107 031c 	add.w	r3, r7, #28
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4820      	ldr	r0, [pc, #128]	@ (8005060 <HAL_TIM_IC_MspInit+0xf0>)
 8004fde:	f000 ffe9 	bl	8005fb4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	2019      	movs	r0, #25
 8004fe8:	f000 fc7d 	bl	80058e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004fec:	2019      	movs	r0, #25
 8004fee:	f000 fc94 	bl	800591a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004ff2:	e02d      	b.n	8005050 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ffc:	d128      	bne.n	8005050 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ffe:	4b17      	ldr	r3, [pc, #92]	@ (800505c <HAL_TIM_IC_MspInit+0xec>)
 8005000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005002:	4a16      	ldr	r2, [pc, #88]	@ (800505c <HAL_TIM_IC_MspInit+0xec>)
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	6593      	str	r3, [r2, #88]	@ 0x58
 800500a:	4b14      	ldr	r3, [pc, #80]	@ (800505c <HAL_TIM_IC_MspInit+0xec>)
 800500c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005016:	4b11      	ldr	r3, [pc, #68]	@ (800505c <HAL_TIM_IC_MspInit+0xec>)
 8005018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800501a:	4a10      	ldr	r2, [pc, #64]	@ (800505c <HAL_TIM_IC_MspInit+0xec>)
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005022:	4b0e      	ldr	r3, [pc, #56]	@ (800505c <HAL_TIM_IC_MspInit+0xec>)
 8005024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800502e:	2301      	movs	r3, #1
 8005030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005032:	2302      	movs	r3, #2
 8005034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005036:	2300      	movs	r3, #0
 8005038:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800503a:	2300      	movs	r3, #0
 800503c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800503e:	2301      	movs	r3, #1
 8005040:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005042:	f107 031c 	add.w	r3, r7, #28
 8005046:	4619      	mov	r1, r3
 8005048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800504c:	f000 ffb2 	bl	8005fb4 <HAL_GPIO_Init>
}
 8005050:	bf00      	nop
 8005052:	3730      	adds	r7, #48	@ 0x30
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40012c00 	.word	0x40012c00
 800505c:	40021000 	.word	0x40021000
 8005060:	48000800 	.word	0x48000800

08005064 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08c      	sub	sp, #48	@ 0x30
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800506c:	f107 031c 	add.w	r3, r7, #28
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	609a      	str	r2, [r3, #8]
 8005078:	60da      	str	r2, [r3, #12]
 800507a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a37      	ldr	r2, [pc, #220]	@ (8005160 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d130      	bne.n	80050e8 <HAL_TIM_Encoder_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005086:	4b37      	ldr	r3, [pc, #220]	@ (8005164 <HAL_TIM_Encoder_MspInit+0x100>)
 8005088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508a:	4a36      	ldr	r2, [pc, #216]	@ (8005164 <HAL_TIM_Encoder_MspInit+0x100>)
 800508c:	f043 0302 	orr.w	r3, r3, #2
 8005090:	6593      	str	r3, [r2, #88]	@ 0x58
 8005092:	4b34      	ldr	r3, [pc, #208]	@ (8005164 <HAL_TIM_Encoder_MspInit+0x100>)
 8005094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	61bb      	str	r3, [r7, #24]
 800509c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800509e:	4b31      	ldr	r3, [pc, #196]	@ (8005164 <HAL_TIM_Encoder_MspInit+0x100>)
 80050a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a2:	4a30      	ldr	r2, [pc, #192]	@ (8005164 <HAL_TIM_Encoder_MspInit+0x100>)
 80050a4:	f043 0302 	orr.w	r3, r3, #2
 80050a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050aa:	4b2e      	ldr	r3, [pc, #184]	@ (8005164 <HAL_TIM_Encoder_MspInit+0x100>)
 80050ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80050b6:	2330      	movs	r3, #48	@ 0x30
 80050b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ba:	2302      	movs	r3, #2
 80050bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c2:	2300      	movs	r3, #0
 80050c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80050c6:	2302      	movs	r3, #2
 80050c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ca:	f107 031c 	add.w	r3, r7, #28
 80050ce:	4619      	mov	r1, r3
 80050d0:	4825      	ldr	r0, [pc, #148]	@ (8005168 <HAL_TIM_Encoder_MspInit+0x104>)
 80050d2:	f000 ff6f 	bl	8005fb4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80050d6:	2200      	movs	r2, #0
 80050d8:	2100      	movs	r1, #0
 80050da:	201d      	movs	r0, #29
 80050dc:	f000 fc03 	bl	80058e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80050e0:	201d      	movs	r0, #29
 80050e2:	f000 fc1a 	bl	800591a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80050e6:	e036      	b.n	8005156 <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM4)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1f      	ldr	r2, [pc, #124]	@ (800516c <HAL_TIM_Encoder_MspInit+0x108>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d131      	bne.n	8005156 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80050f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005164 <HAL_TIM_Encoder_MspInit+0x100>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005164 <HAL_TIM_Encoder_MspInit+0x100>)
 80050f8:	f043 0304 	orr.w	r3, r3, #4
 80050fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80050fe:	4b19      	ldr	r3, [pc, #100]	@ (8005164 <HAL_TIM_Encoder_MspInit+0x100>)
 8005100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800510a:	4b16      	ldr	r3, [pc, #88]	@ (8005164 <HAL_TIM_Encoder_MspInit+0x100>)
 800510c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800510e:	4a15      	ldr	r2, [pc, #84]	@ (8005164 <HAL_TIM_Encoder_MspInit+0x100>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005116:	4b13      	ldr	r3, [pc, #76]	@ (8005164 <HAL_TIM_Encoder_MspInit+0x100>)
 8005118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005122:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005128:	2302      	movs	r3, #2
 800512a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512c:	2300      	movs	r3, #0
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005130:	2300      	movs	r3, #0
 8005132:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005134:	230a      	movs	r3, #10
 8005136:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005138:	f107 031c 	add.w	r3, r7, #28
 800513c:	4619      	mov	r1, r3
 800513e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005142:	f000 ff37 	bl	8005fb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005146:	2200      	movs	r2, #0
 8005148:	2100      	movs	r1, #0
 800514a:	201e      	movs	r0, #30
 800514c:	f000 fbcb 	bl	80058e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005150:	201e      	movs	r0, #30
 8005152:	f000 fbe2 	bl	800591a <HAL_NVIC_EnableIRQ>
}
 8005156:	bf00      	nop
 8005158:	3730      	adds	r7, #48	@ 0x30
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40000400 	.word	0x40000400
 8005164:	40021000 	.word	0x40021000
 8005168:	48000400 	.word	0x48000400
 800516c:	40000800 	.word	0x40000800

08005170 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a2c      	ldr	r2, [pc, #176]	@ (8005230 <HAL_TIM_Base_MspInit+0xc0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d114      	bne.n	80051ac <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005182:	4b2c      	ldr	r3, [pc, #176]	@ (8005234 <HAL_TIM_Base_MspInit+0xc4>)
 8005184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005186:	4a2b      	ldr	r2, [pc, #172]	@ (8005234 <HAL_TIM_Base_MspInit+0xc4>)
 8005188:	f043 0308 	orr.w	r3, r3, #8
 800518c:	6593      	str	r3, [r2, #88]	@ 0x58
 800518e:	4b29      	ldr	r3, [pc, #164]	@ (8005234 <HAL_TIM_Base_MspInit+0xc4>)
 8005190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800519a:	2200      	movs	r2, #0
 800519c:	2100      	movs	r1, #0
 800519e:	2032      	movs	r0, #50	@ 0x32
 80051a0:	f000 fba1 	bl	80058e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80051a4:	2032      	movs	r0, #50	@ 0x32
 80051a6:	f000 fbb8 	bl	800591a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 80051aa:	e03c      	b.n	8005226 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a21      	ldr	r2, [pc, #132]	@ (8005238 <HAL_TIM_Base_MspInit+0xc8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d10c      	bne.n	80051d0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80051b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005234 <HAL_TIM_Base_MspInit+0xc4>)
 80051b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005234 <HAL_TIM_Base_MspInit+0xc4>)
 80051bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80051c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80051c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005234 <HAL_TIM_Base_MspInit+0xc4>)
 80051c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	693b      	ldr	r3, [r7, #16]
}
 80051ce:	e02a      	b.n	8005226 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM15)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a19      	ldr	r2, [pc, #100]	@ (800523c <HAL_TIM_Base_MspInit+0xcc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d10c      	bne.n	80051f4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80051da:	4b16      	ldr	r3, [pc, #88]	@ (8005234 <HAL_TIM_Base_MspInit+0xc4>)
 80051dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051de:	4a15      	ldr	r2, [pc, #84]	@ (8005234 <HAL_TIM_Base_MspInit+0xc4>)
 80051e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80051e6:	4b13      	ldr	r3, [pc, #76]	@ (8005234 <HAL_TIM_Base_MspInit+0xc4>)
 80051e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	68fb      	ldr	r3, [r7, #12]
}
 80051f2:	e018      	b.n	8005226 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a11      	ldr	r2, [pc, #68]	@ (8005240 <HAL_TIM_Base_MspInit+0xd0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d113      	bne.n	8005226 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80051fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005234 <HAL_TIM_Base_MspInit+0xc4>)
 8005200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005202:	4a0c      	ldr	r2, [pc, #48]	@ (8005234 <HAL_TIM_Base_MspInit+0xc4>)
 8005204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005208:	6613      	str	r3, [r2, #96]	@ 0x60
 800520a:	4b0a      	ldr	r3, [pc, #40]	@ (8005234 <HAL_TIM_Base_MspInit+0xc4>)
 800520c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800520e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005216:	2200      	movs	r2, #0
 8005218:	2100      	movs	r1, #0
 800521a:	2019      	movs	r0, #25
 800521c:	f000 fb63 	bl	80058e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005220:	2019      	movs	r0, #25
 8005222:	f000 fb7a 	bl	800591a <HAL_NVIC_EnableIRQ>
}
 8005226:	bf00      	nop
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40021000 	.word	0x40021000
 8005238:	40013400 	.word	0x40013400
 800523c:	40014000 	.word	0x40014000
 8005240:	40014400 	.word	0x40014400

08005244 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	@ 0x28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800524c:	f107 0314 	add.w	r3, r7, #20
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	609a      	str	r2, [r3, #8]
 8005258:	60da      	str	r2, [r3, #12]
 800525a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a23      	ldr	r2, [pc, #140]	@ (80052f0 <HAL_TIM_MspPostInit+0xac>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d11d      	bne.n	80052a2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005266:	4b23      	ldr	r3, [pc, #140]	@ (80052f4 <HAL_TIM_MspPostInit+0xb0>)
 8005268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800526a:	4a22      	ldr	r2, [pc, #136]	@ (80052f4 <HAL_TIM_MspPostInit+0xb0>)
 800526c:	f043 0304 	orr.w	r3, r3, #4
 8005270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005272:	4b20      	ldr	r3, [pc, #128]	@ (80052f4 <HAL_TIM_MspPostInit+0xb0>)
 8005274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800527e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005284:	2302      	movs	r3, #2
 8005286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005288:	2300      	movs	r3, #0
 800528a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800528c:	2300      	movs	r3, #0
 800528e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005290:	2304      	movs	r3, #4
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005294:	f107 0314 	add.w	r3, r7, #20
 8005298:	4619      	mov	r1, r3
 800529a:	4817      	ldr	r0, [pc, #92]	@ (80052f8 <HAL_TIM_MspPostInit+0xb4>)
 800529c:	f000 fe8a 	bl	8005fb4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80052a0:	e021      	b.n	80052e6 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a15      	ldr	r2, [pc, #84]	@ (80052fc <HAL_TIM_MspPostInit+0xb8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d11c      	bne.n	80052e6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ac:	4b11      	ldr	r3, [pc, #68]	@ (80052f4 <HAL_TIM_MspPostInit+0xb0>)
 80052ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b0:	4a10      	ldr	r2, [pc, #64]	@ (80052f4 <HAL_TIM_MspPostInit+0xb0>)
 80052b2:	f043 0302 	orr.w	r3, r3, #2
 80052b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052b8:	4b0e      	ldr	r3, [pc, #56]	@ (80052f4 <HAL_TIM_MspPostInit+0xb0>)
 80052ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80052c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ca:	2302      	movs	r3, #2
 80052cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d2:	2300      	movs	r3, #0
 80052d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80052d6:	2301      	movs	r3, #1
 80052d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052da:	f107 0314 	add.w	r3, r7, #20
 80052de:	4619      	mov	r1, r3
 80052e0:	4807      	ldr	r0, [pc, #28]	@ (8005300 <HAL_TIM_MspPostInit+0xbc>)
 80052e2:	f000 fe67 	bl	8005fb4 <HAL_GPIO_Init>
}
 80052e6:	bf00      	nop
 80052e8:	3728      	adds	r7, #40	@ 0x28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40013400 	.word	0x40013400
 80052f4:	40021000 	.word	0x40021000
 80052f8:	48000800 	.word	0x48000800
 80052fc:	40014000 	.word	0x40014000
 8005300:	48000400 	.word	0x48000400

08005304 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b09e      	sub	sp, #120	@ 0x78
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800530c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	605a      	str	r2, [r3, #4]
 8005316:	609a      	str	r2, [r3, #8]
 8005318:	60da      	str	r2, [r3, #12]
 800531a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800531c:	f107 0310 	add.w	r3, r7, #16
 8005320:	2254      	movs	r2, #84	@ 0x54
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f006 fcc7 	bl	800bcb8 <memset>
  if(huart->Instance==USART2)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a4d      	ldr	r2, [pc, #308]	@ (8005464 <HAL_UART_MspInit+0x160>)
 8005330:	4293      	cmp	r3, r2
 8005332:	f040 8092 	bne.w	800545a <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005336:	2302      	movs	r3, #2
 8005338:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800533a:	2300      	movs	r3, #0
 800533c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800533e:	f107 0310 	add.w	r3, r7, #16
 8005342:	4618      	mov	r0, r3
 8005344:	f001 fde2 	bl	8006f0c <HAL_RCCEx_PeriphCLKConfig>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800534e:	f7ff fde5 	bl	8004f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005352:	4b45      	ldr	r3, [pc, #276]	@ (8005468 <HAL_UART_MspInit+0x164>)
 8005354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005356:	4a44      	ldr	r2, [pc, #272]	@ (8005468 <HAL_UART_MspInit+0x164>)
 8005358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800535c:	6593      	str	r3, [r2, #88]	@ 0x58
 800535e:	4b42      	ldr	r3, [pc, #264]	@ (8005468 <HAL_UART_MspInit+0x164>)
 8005360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800536a:	4b3f      	ldr	r3, [pc, #252]	@ (8005468 <HAL_UART_MspInit+0x164>)
 800536c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800536e:	4a3e      	ldr	r2, [pc, #248]	@ (8005468 <HAL_UART_MspInit+0x164>)
 8005370:	f043 0301 	orr.w	r3, r3, #1
 8005374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005376:	4b3c      	ldr	r3, [pc, #240]	@ (8005468 <HAL_UART_MspInit+0x164>)
 8005378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	60bb      	str	r3, [r7, #8]
 8005380:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005382:	230c      	movs	r3, #12
 8005384:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005386:	2302      	movs	r3, #2
 8005388:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800538a:	2300      	movs	r3, #0
 800538c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800538e:	2300      	movs	r3, #0
 8005390:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005392:	2307      	movs	r3, #7
 8005394:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005396:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800539a:	4619      	mov	r1, r3
 800539c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80053a0:	f000 fe08 	bl	8005fb4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80053a4:	4b31      	ldr	r3, [pc, #196]	@ (800546c <HAL_UART_MspInit+0x168>)
 80053a6:	4a32      	ldr	r2, [pc, #200]	@ (8005470 <HAL_UART_MspInit+0x16c>)
 80053a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80053aa:	4b30      	ldr	r3, [pc, #192]	@ (800546c <HAL_UART_MspInit+0x168>)
 80053ac:	221a      	movs	r2, #26
 80053ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053b0:	4b2e      	ldr	r3, [pc, #184]	@ (800546c <HAL_UART_MspInit+0x168>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053b6:	4b2d      	ldr	r3, [pc, #180]	@ (800546c <HAL_UART_MspInit+0x168>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053bc:	4b2b      	ldr	r3, [pc, #172]	@ (800546c <HAL_UART_MspInit+0x168>)
 80053be:	2280      	movs	r2, #128	@ 0x80
 80053c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053c2:	4b2a      	ldr	r3, [pc, #168]	@ (800546c <HAL_UART_MspInit+0x168>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053c8:	4b28      	ldr	r3, [pc, #160]	@ (800546c <HAL_UART_MspInit+0x168>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80053ce:	4b27      	ldr	r3, [pc, #156]	@ (800546c <HAL_UART_MspInit+0x168>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053d4:	4b25      	ldr	r3, [pc, #148]	@ (800546c <HAL_UART_MspInit+0x168>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80053da:	4824      	ldr	r0, [pc, #144]	@ (800546c <HAL_UART_MspInit+0x168>)
 80053dc:	f000 fab8 	bl	8005950 <HAL_DMA_Init>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80053e6:	f7ff fd99 	bl	8004f1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a1f      	ldr	r2, [pc, #124]	@ (800546c <HAL_UART_MspInit+0x168>)
 80053ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80053f2:	4a1e      	ldr	r2, [pc, #120]	@ (800546c <HAL_UART_MspInit+0x168>)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80053f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005474 <HAL_UART_MspInit+0x170>)
 80053fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005478 <HAL_UART_MspInit+0x174>)
 80053fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80053fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005474 <HAL_UART_MspInit+0x170>)
 8005400:	221b      	movs	r2, #27
 8005402:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005404:	4b1b      	ldr	r3, [pc, #108]	@ (8005474 <HAL_UART_MspInit+0x170>)
 8005406:	2210      	movs	r2, #16
 8005408:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800540a:	4b1a      	ldr	r3, [pc, #104]	@ (8005474 <HAL_UART_MspInit+0x170>)
 800540c:	2200      	movs	r2, #0
 800540e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005410:	4b18      	ldr	r3, [pc, #96]	@ (8005474 <HAL_UART_MspInit+0x170>)
 8005412:	2280      	movs	r2, #128	@ 0x80
 8005414:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005416:	4b17      	ldr	r3, [pc, #92]	@ (8005474 <HAL_UART_MspInit+0x170>)
 8005418:	2200      	movs	r2, #0
 800541a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800541c:	4b15      	ldr	r3, [pc, #84]	@ (8005474 <HAL_UART_MspInit+0x170>)
 800541e:	2200      	movs	r2, #0
 8005420:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005422:	4b14      	ldr	r3, [pc, #80]	@ (8005474 <HAL_UART_MspInit+0x170>)
 8005424:	2200      	movs	r2, #0
 8005426:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005428:	4b12      	ldr	r3, [pc, #72]	@ (8005474 <HAL_UART_MspInit+0x170>)
 800542a:	2200      	movs	r2, #0
 800542c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800542e:	4811      	ldr	r0, [pc, #68]	@ (8005474 <HAL_UART_MspInit+0x170>)
 8005430:	f000 fa8e 	bl	8005950 <HAL_DMA_Init>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800543a:	f7ff fd6f 	bl	8004f1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a0c      	ldr	r2, [pc, #48]	@ (8005474 <HAL_UART_MspInit+0x170>)
 8005442:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005444:	4a0b      	ldr	r2, [pc, #44]	@ (8005474 <HAL_UART_MspInit+0x170>)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800544a:	2200      	movs	r2, #0
 800544c:	2100      	movs	r1, #0
 800544e:	2026      	movs	r0, #38	@ 0x26
 8005450:	f000 fa49 	bl	80058e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005454:	2026      	movs	r0, #38	@ 0x26
 8005456:	f000 fa60 	bl	800591a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800545a:	bf00      	nop
 800545c:	3778      	adds	r7, #120	@ 0x78
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40004400 	.word	0x40004400
 8005468:	40021000 	.word	0x40021000
 800546c:	200009dc 	.word	0x200009dc
 8005470:	40020008 	.word	0x40020008
 8005474:	20000a3c 	.word	0x20000a3c
 8005478:	4002001c 	.word	0x4002001c

0800547c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005480:	bf00      	nop
 8005482:	e7fd      	b.n	8005480 <NMI_Handler+0x4>

08005484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005488:	bf00      	nop
 800548a:	e7fd      	b.n	8005488 <HardFault_Handler+0x4>

0800548c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005490:	bf00      	nop
 8005492:	e7fd      	b.n	8005490 <MemManage_Handler+0x4>

08005494 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005498:	bf00      	nop
 800549a:	e7fd      	b.n	8005498 <BusFault_Handler+0x4>

0800549c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054a0:	bf00      	nop
 80054a2:	e7fd      	b.n	80054a0 <UsageFault_Handler+0x4>

080054a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054a8:	bf00      	nop
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054b2:	b480      	push	{r7}
 80054b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054b6:	bf00      	nop
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054c4:	bf00      	nop
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054d2:	f000 f90f 	bl	80056f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054d6:	bf00      	nop
 80054d8:	bd80      	pop	{r7, pc}

080054da <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80054de:	2001      	movs	r0, #1
 80054e0:	f000 ff1a 	bl	8006318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80054e4:	bf00      	nop
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80054ec:	2004      	movs	r0, #4
 80054ee:	f000 ff13 	bl	8006318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80054fa:	2008      	movs	r0, #8
 80054fc:	f000 ff0c 	bl	8006318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005500:	bf00      	nop
 8005502:	bd80      	pop	{r7, pc}

08005504 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005508:	4802      	ldr	r0, [pc, #8]	@ (8005514 <DMA1_Channel1_IRQHandler+0x10>)
 800550a:	f000 fc04 	bl	8005d16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800550e:	bf00      	nop
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	200009dc 	.word	0x200009dc

08005518 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800551c:	4802      	ldr	r0, [pc, #8]	@ (8005528 <DMA1_Channel2_IRQHandler+0x10>)
 800551e:	f000 fbfa 	bl	8005d16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005522:	bf00      	nop
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000a3c 	.word	0x20000a3c

0800552c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005530:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005534:	f000 fef0 	bl	8006318 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005538:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800553c:	f000 feec 	bl	8006318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005540:	bf00      	nop
 8005542:	bd80      	pop	{r7, pc}

08005544 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005548:	4803      	ldr	r0, [pc, #12]	@ (8005558 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800554a:	f002 fd99 	bl	8008080 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800554e:	4803      	ldr	r0, [pc, #12]	@ (800555c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005550:	f002 fd96 	bl	8008080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005554:	bf00      	nop
 8005556:	bd80      	pop	{r7, pc}
 8005558:	200002b0 	.word	0x200002b0
 800555c:	20000844 	.word	0x20000844

08005560 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005564:	4802      	ldr	r0, [pc, #8]	@ (8005570 <TIM3_IRQHandler+0x10>)
 8005566:	f002 fd8b 	bl	8008080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800556a:	bf00      	nop
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000448 	.word	0x20000448

08005574 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005578:	4802      	ldr	r0, [pc, #8]	@ (8005584 <TIM4_IRQHandler+0x10>)
 800557a:	f002 fd81 	bl	8008080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000514 	.word	0x20000514

08005588 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800558c:	4802      	ldr	r0, [pc, #8]	@ (8005598 <USART2_IRQHandler+0x10>)
 800558e:	f004 fe33 	bl	800a1f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005592:	bf00      	nop
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000910 	.word	0x20000910

0800559c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80055a0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80055a4:	f000 feb8 	bl	8006318 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80055a8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80055ac:	f000 feb4 	bl	8006318 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80055b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80055b4:	f000 feb0 	bl	8006318 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80055b8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80055bc:	f000 feac 	bl	8006318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80055c0:	bf00      	nop
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80055c8:	4802      	ldr	r0, [pc, #8]	@ (80055d4 <TIM5_IRQHandler+0x10>)
 80055ca:	f002 fd59 	bl	8008080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80055ce:	bf00      	nop
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	200005e0 	.word	0x200005e0

080055d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80055dc:	4b06      	ldr	r3, [pc, #24]	@ (80055f8 <SystemInit+0x20>)
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e2:	4a05      	ldr	r2, [pc, #20]	@ (80055f8 <SystemInit+0x20>)
 80055e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80055e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055ec:	bf00      	nop
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	e000ed00 	.word	0xe000ed00

080055fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80055fc:	480d      	ldr	r0, [pc, #52]	@ (8005634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80055fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005600:	f7ff ffea 	bl	80055d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005604:	480c      	ldr	r0, [pc, #48]	@ (8005638 <LoopForever+0x6>)
  ldr r1, =_edata
 8005606:	490d      	ldr	r1, [pc, #52]	@ (800563c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005608:	4a0d      	ldr	r2, [pc, #52]	@ (8005640 <LoopForever+0xe>)
  movs r3, #0
 800560a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800560c:	e002      	b.n	8005614 <LoopCopyDataInit>

0800560e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800560e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005612:	3304      	adds	r3, #4

08005614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005618:	d3f9      	bcc.n	800560e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800561a:	4a0a      	ldr	r2, [pc, #40]	@ (8005644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800561c:	4c0a      	ldr	r4, [pc, #40]	@ (8005648 <LoopForever+0x16>)
  movs r3, #0
 800561e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005620:	e001      	b.n	8005626 <LoopFillZerobss>

08005622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005624:	3204      	adds	r2, #4

08005626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005628:	d3fb      	bcc.n	8005622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800562a:	f006 fb53 	bl	800bcd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800562e:	f7fc fbef 	bl	8001e10 <main>

08005632 <LoopForever>:

LoopForever:
    b LoopForever
 8005632:	e7fe      	b.n	8005632 <LoopForever>
  ldr   r0, =_estack
 8005634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800563c:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8005640:	0800cc9c 	.word	0x0800cc9c
  ldr r2, =_sbss
 8005644:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8005648:	2000154c 	.word	0x2000154c

0800564c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800564c:	e7fe      	b.n	800564c <ADC1_2_IRQHandler>

0800564e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005658:	2003      	movs	r0, #3
 800565a:	f000 f939 	bl	80058d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800565e:	2000      	movs	r0, #0
 8005660:	f000 f80e 	bl	8005680 <HAL_InitTick>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	71fb      	strb	r3, [r7, #7]
 800566e:	e001      	b.n	8005674 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005670:	f7ff fc5a 	bl	8004f28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005674:	79fb      	ldrb	r3, [r7, #7]

}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800568c:	4b16      	ldr	r3, [pc, #88]	@ (80056e8 <HAL_InitTick+0x68>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d022      	beq.n	80056da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005694:	4b15      	ldr	r3, [pc, #84]	@ (80056ec <HAL_InitTick+0x6c>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	4b13      	ldr	r3, [pc, #76]	@ (80056e8 <HAL_InitTick+0x68>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80056a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80056a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 f944 	bl	8005936 <HAL_SYSTICK_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10f      	bne.n	80056d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b0f      	cmp	r3, #15
 80056b8:	d809      	bhi.n	80056ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056ba:	2200      	movs	r2, #0
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	f04f 30ff 	mov.w	r0, #4294967295
 80056c2:	f000 f910 	bl	80058e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80056c6:	4a0a      	ldr	r2, [pc, #40]	@ (80056f0 <HAL_InitTick+0x70>)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	e007      	b.n	80056de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	73fb      	strb	r3, [r7, #15]
 80056d2:	e004      	b.n	80056de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
 80056d8:	e001      	b.n	80056de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80056de:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20000238 	.word	0x20000238
 80056ec:	20000230 	.word	0x20000230
 80056f0:	20000234 	.word	0x20000234

080056f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056f8:	4b05      	ldr	r3, [pc, #20]	@ (8005710 <HAL_IncTick+0x1c>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	4b05      	ldr	r3, [pc, #20]	@ (8005714 <HAL_IncTick+0x20>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4413      	add	r3, r2
 8005702:	4a03      	ldr	r2, [pc, #12]	@ (8005710 <HAL_IncTick+0x1c>)
 8005704:	6013      	str	r3, [r2, #0]
}
 8005706:	bf00      	nop
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	20001410 	.word	0x20001410
 8005714:	20000238 	.word	0x20000238

08005718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  return uwTick;
 800571c:	4b03      	ldr	r3, [pc, #12]	@ (800572c <HAL_GetTick+0x14>)
 800571e:	681b      	ldr	r3, [r3, #0]
}
 8005720:	4618      	mov	r0, r3
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20001410 	.word	0x20001410

08005730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005740:	4b0c      	ldr	r3, [pc, #48]	@ (8005774 <__NVIC_SetPriorityGrouping+0x44>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800574c:	4013      	ands	r3, r2
 800574e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005758:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800575c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005762:	4a04      	ldr	r2, [pc, #16]	@ (8005774 <__NVIC_SetPriorityGrouping+0x44>)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	60d3      	str	r3, [r2, #12]
}
 8005768:	bf00      	nop
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	e000ed00 	.word	0xe000ed00

08005778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800577c:	4b04      	ldr	r3, [pc, #16]	@ (8005790 <__NVIC_GetPriorityGrouping+0x18>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	0a1b      	lsrs	r3, r3, #8
 8005782:	f003 0307 	and.w	r3, r3, #7
}
 8005786:	4618      	mov	r0, r3
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	e000ed00 	.word	0xe000ed00

08005794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	4603      	mov	r3, r0
 800579c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800579e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	db0b      	blt.n	80057be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	f003 021f 	and.w	r2, r3, #31
 80057ac:	4907      	ldr	r1, [pc, #28]	@ (80057cc <__NVIC_EnableIRQ+0x38>)
 80057ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	2001      	movs	r0, #1
 80057b6:	fa00 f202 	lsl.w	r2, r0, r2
 80057ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	e000e100 	.word	0xe000e100

080057d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	4603      	mov	r3, r0
 80057d8:	6039      	str	r1, [r7, #0]
 80057da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	db0a      	blt.n	80057fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	490c      	ldr	r1, [pc, #48]	@ (800581c <__NVIC_SetPriority+0x4c>)
 80057ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ee:	0112      	lsls	r2, r2, #4
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	440b      	add	r3, r1
 80057f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057f8:	e00a      	b.n	8005810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	4908      	ldr	r1, [pc, #32]	@ (8005820 <__NVIC_SetPriority+0x50>)
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	3b04      	subs	r3, #4
 8005808:	0112      	lsls	r2, r2, #4
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	440b      	add	r3, r1
 800580e:	761a      	strb	r2, [r3, #24]
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	e000e100 	.word	0xe000e100
 8005820:	e000ed00 	.word	0xe000ed00

08005824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005824:	b480      	push	{r7}
 8005826:	b089      	sub	sp, #36	@ 0x24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	f1c3 0307 	rsb	r3, r3, #7
 800583e:	2b04      	cmp	r3, #4
 8005840:	bf28      	it	cs
 8005842:	2304      	movcs	r3, #4
 8005844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	3304      	adds	r3, #4
 800584a:	2b06      	cmp	r3, #6
 800584c:	d902      	bls.n	8005854 <NVIC_EncodePriority+0x30>
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	3b03      	subs	r3, #3
 8005852:	e000      	b.n	8005856 <NVIC_EncodePriority+0x32>
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005858:	f04f 32ff 	mov.w	r2, #4294967295
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	fa02 f303 	lsl.w	r3, r2, r3
 8005862:	43da      	mvns	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	401a      	ands	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800586c:	f04f 31ff 	mov.w	r1, #4294967295
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	fa01 f303 	lsl.w	r3, r1, r3
 8005876:	43d9      	mvns	r1, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800587c:	4313      	orrs	r3, r2
         );
}
 800587e:	4618      	mov	r0, r3
 8005880:	3724      	adds	r7, #36	@ 0x24
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3b01      	subs	r3, #1
 8005898:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800589c:	d301      	bcc.n	80058a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800589e:	2301      	movs	r3, #1
 80058a0:	e00f      	b.n	80058c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058a2:	4a0a      	ldr	r2, [pc, #40]	@ (80058cc <SysTick_Config+0x40>)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3b01      	subs	r3, #1
 80058a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058aa:	210f      	movs	r1, #15
 80058ac:	f04f 30ff 	mov.w	r0, #4294967295
 80058b0:	f7ff ff8e 	bl	80057d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058b4:	4b05      	ldr	r3, [pc, #20]	@ (80058cc <SysTick_Config+0x40>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058ba:	4b04      	ldr	r3, [pc, #16]	@ (80058cc <SysTick_Config+0x40>)
 80058bc:	2207      	movs	r2, #7
 80058be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	e000e010 	.word	0xe000e010

080058d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff ff29 	bl	8005730 <__NVIC_SetPriorityGrouping>
}
 80058de:	bf00      	nop
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b086      	sub	sp, #24
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	4603      	mov	r3, r0
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80058f4:	f7ff ff40 	bl	8005778 <__NVIC_GetPriorityGrouping>
 80058f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	6978      	ldr	r0, [r7, #20]
 8005900:	f7ff ff90 	bl	8005824 <NVIC_EncodePriority>
 8005904:	4602      	mov	r2, r0
 8005906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800590a:	4611      	mov	r1, r2
 800590c:	4618      	mov	r0, r3
 800590e:	f7ff ff5f 	bl	80057d0 <__NVIC_SetPriority>
}
 8005912:	bf00      	nop
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b082      	sub	sp, #8
 800591e:	af00      	add	r7, sp, #0
 8005920:	4603      	mov	r3, r0
 8005922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff ff33 	bl	8005794 <__NVIC_EnableIRQ>
}
 800592e:	bf00      	nop
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff ffa4 	bl	800588c <SysTick_Config>
 8005944:	4603      	mov	r3, r0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e08d      	b.n	8005a7e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	4b47      	ldr	r3, [pc, #284]	@ (8005a88 <HAL_DMA_Init+0x138>)
 800596a:	429a      	cmp	r2, r3
 800596c:	d80f      	bhi.n	800598e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	4b45      	ldr	r3, [pc, #276]	@ (8005a8c <HAL_DMA_Init+0x13c>)
 8005976:	4413      	add	r3, r2
 8005978:	4a45      	ldr	r2, [pc, #276]	@ (8005a90 <HAL_DMA_Init+0x140>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	091b      	lsrs	r3, r3, #4
 8005980:	009a      	lsls	r2, r3, #2
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a42      	ldr	r2, [pc, #264]	@ (8005a94 <HAL_DMA_Init+0x144>)
 800598a:	641a      	str	r2, [r3, #64]	@ 0x40
 800598c:	e00e      	b.n	80059ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	4b40      	ldr	r3, [pc, #256]	@ (8005a98 <HAL_DMA_Init+0x148>)
 8005996:	4413      	add	r3, r2
 8005998:	4a3d      	ldr	r2, [pc, #244]	@ (8005a90 <HAL_DMA_Init+0x140>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	091b      	lsrs	r3, r3, #4
 80059a0:	009a      	lsls	r2, r3, #2
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a3c      	ldr	r2, [pc, #240]	@ (8005a9c <HAL_DMA_Init+0x14c>)
 80059aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80059c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80059d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa76 	bl	8005ef0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a0c:	d102      	bne.n	8005a14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a28:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d010      	beq.n	8005a54 <HAL_DMA_Init+0x104>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d80c      	bhi.n	8005a54 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fa96 	bl	8005f6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a50:	605a      	str	r2, [r3, #4]
 8005a52:	e008      	b.n	8005a66 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40020407 	.word	0x40020407
 8005a8c:	bffdfff8 	.word	0xbffdfff8
 8005a90:	cccccccd 	.word	0xcccccccd
 8005a94:	40020000 	.word	0x40020000
 8005a98:	bffdfbf8 	.word	0xbffdfbf8
 8005a9c:	40020400 	.word	0x40020400

08005aa0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_DMA_Start_IT+0x20>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e066      	b.n	8005b8e <HAL_DMA_Start_IT+0xee>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d155      	bne.n	8005b80 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0201 	bic.w	r2, r2, #1
 8005af0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f9bb 	bl	8005e74 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d008      	beq.n	8005b18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 020e 	orr.w	r2, r2, #14
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	e00f      	b.n	8005b38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0204 	bic.w	r2, r2, #4
 8005b26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 020a 	orr.w	r2, r2, #10
 8005b36:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d007      	beq.n	8005b56 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b54:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d007      	beq.n	8005b6e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0201 	orr.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	e005      	b.n	8005b8c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b88:	2302      	movs	r3, #2
 8005b8a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b085      	sub	sp, #20
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d005      	beq.n	8005bba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2204      	movs	r2, #4
 8005bb2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	73fb      	strb	r3, [r7, #15]
 8005bb8:	e037      	b.n	8005c2a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 020e 	bic.w	r2, r2, #14
 8005bc8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bd8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0201 	bic.w	r2, r2, #1
 8005be8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bee:	f003 021f 	and.w	r2, r3, #31
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8005bfc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c06:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00c      	beq.n	8005c2a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c1e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c28:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d00d      	beq.n	8005c7c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2204      	movs	r2, #4
 8005c64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	73fb      	strb	r3, [r7, #15]
 8005c7a:	e047      	b.n	8005d0c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 020e 	bic.w	r2, r2, #14
 8005c8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0201 	bic.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ca6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005caa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb0:	f003 021f 	and.w	r2, r3, #31
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb8:	2101      	movs	r1, #1
 8005cba:	fa01 f202 	lsl.w	r2, r1, r2
 8005cbe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005cc8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00c      	beq.n	8005cec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ce0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005cea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	4798      	blx	r3
    }
  }
  return status;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d32:	f003 031f 	and.w	r3, r3, #31
 8005d36:	2204      	movs	r2, #4
 8005d38:	409a      	lsls	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d026      	beq.n	8005d90 <HAL_DMA_IRQHandler+0x7a>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d021      	beq.n	8005d90 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d107      	bne.n	8005d6a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0204 	bic.w	r2, r2, #4
 8005d68:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6e:	f003 021f 	and.w	r2, r3, #31
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d76:	2104      	movs	r1, #4
 8005d78:	fa01 f202 	lsl.w	r2, r1, r2
 8005d7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d071      	beq.n	8005e6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005d8e:	e06c      	b.n	8005e6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d94:	f003 031f 	and.w	r3, r3, #31
 8005d98:	2202      	movs	r2, #2
 8005d9a:	409a      	lsls	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d02e      	beq.n	8005e02 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d029      	beq.n	8005e02 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 020a 	bic.w	r2, r2, #10
 8005dca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd8:	f003 021f 	and.w	r2, r3, #31
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de0:	2102      	movs	r1, #2
 8005de2:	fa01 f202 	lsl.w	r2, r1, r2
 8005de6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d038      	beq.n	8005e6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005e00:	e033      	b.n	8005e6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	2208      	movs	r2, #8
 8005e0c:	409a      	lsls	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d02a      	beq.n	8005e6c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d025      	beq.n	8005e6c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 020e 	bic.w	r2, r2, #14
 8005e2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e34:	f003 021f 	and.w	r2, r3, #31
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e6a:	bf00      	nop
 8005e6c:	bf00      	nop
}
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e8a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e9c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea2:	f003 021f 	and.w	r2, r3, #31
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	2101      	movs	r1, #1
 8005eac:	fa01 f202 	lsl.w	r2, r1, r2
 8005eb0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	2b10      	cmp	r3, #16
 8005ec0:	d108      	bne.n	8005ed4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ed2:	e007      	b.n	8005ee4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	60da      	str	r2, [r3, #12]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	4b16      	ldr	r3, [pc, #88]	@ (8005f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d802      	bhi.n	8005f0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005f04:	4b15      	ldr	r3, [pc, #84]	@ (8005f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	e001      	b.n	8005f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005f0a:	4b15      	ldr	r3, [pc, #84]	@ (8005f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005f0c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	3b08      	subs	r3, #8
 8005f1a:	4a12      	ldr	r2, [pc, #72]	@ (8005f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f28:	089b      	lsrs	r3, r3, #2
 8005f2a:	009a      	lsls	r2, r3, #2
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	4413      	add	r3, r2
 8005f30:	461a      	mov	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a0b      	ldr	r2, [pc, #44]	@ (8005f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005f3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	2201      	movs	r2, #1
 8005f44:	409a      	lsls	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40020407 	.word	0x40020407
 8005f5c:	40020800 	.word	0x40020800
 8005f60:	40020820 	.word	0x40020820
 8005f64:	cccccccd 	.word	0xcccccccd
 8005f68:	40020880 	.word	0x40020880

08005f6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	461a      	mov	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a08      	ldr	r2, [pc, #32]	@ (8005fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005f8e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	f003 031f 	and.w	r3, r3, #31
 8005f98:	2201      	movs	r2, #1
 8005f9a:	409a      	lsls	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005fa0:	bf00      	nop
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	1000823f 	.word	0x1000823f
 8005fb0:	40020940 	.word	0x40020940

08005fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005fc2:	e15a      	b.n	800627a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	2101      	movs	r1, #1
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 814c 	beq.w	8006274 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d005      	beq.n	8005ff4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d130      	bne.n	8006056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	2203      	movs	r2, #3
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	43db      	mvns	r3, r3
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4013      	ands	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800602a:	2201      	movs	r2, #1
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	fa02 f303 	lsl.w	r3, r2, r3
 8006032:	43db      	mvns	r3, r3
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4013      	ands	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	091b      	lsrs	r3, r3, #4
 8006040:	f003 0201 	and.w	r2, r3, #1
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	2b03      	cmp	r3, #3
 8006060:	d017      	beq.n	8006092 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	2203      	movs	r2, #3
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	43db      	mvns	r3, r3
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4013      	ands	r3, r2
 8006078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4313      	orrs	r3, r2
 800608a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d123      	bne.n	80060e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	08da      	lsrs	r2, r3, #3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3208      	adds	r2, #8
 80060a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	220f      	movs	r2, #15
 80060b6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ba:	43db      	mvns	r3, r3
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4013      	ands	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	691a      	ldr	r2, [r3, #16]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	fa02 f303 	lsl.w	r3, r2, r3
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	08da      	lsrs	r2, r3, #3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3208      	adds	r2, #8
 80060e0:	6939      	ldr	r1, [r7, #16]
 80060e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	2203      	movs	r2, #3
 80060f2:	fa02 f303 	lsl.w	r3, r2, r3
 80060f6:	43db      	mvns	r3, r3
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	4013      	ands	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f003 0203 	and.w	r2, r3, #3
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 80a6 	beq.w	8006274 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006128:	4b5b      	ldr	r3, [pc, #364]	@ (8006298 <HAL_GPIO_Init+0x2e4>)
 800612a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800612c:	4a5a      	ldr	r2, [pc, #360]	@ (8006298 <HAL_GPIO_Init+0x2e4>)
 800612e:	f043 0301 	orr.w	r3, r3, #1
 8006132:	6613      	str	r3, [r2, #96]	@ 0x60
 8006134:	4b58      	ldr	r3, [pc, #352]	@ (8006298 <HAL_GPIO_Init+0x2e4>)
 8006136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006140:	4a56      	ldr	r2, [pc, #344]	@ (800629c <HAL_GPIO_Init+0x2e8>)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	089b      	lsrs	r3, r3, #2
 8006146:	3302      	adds	r3, #2
 8006148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800614c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f003 0303 	and.w	r3, r3, #3
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	220f      	movs	r2, #15
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	43db      	mvns	r3, r3
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4013      	ands	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800616a:	d01f      	beq.n	80061ac <HAL_GPIO_Init+0x1f8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a4c      	ldr	r2, [pc, #304]	@ (80062a0 <HAL_GPIO_Init+0x2ec>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d019      	beq.n	80061a8 <HAL_GPIO_Init+0x1f4>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a4b      	ldr	r2, [pc, #300]	@ (80062a4 <HAL_GPIO_Init+0x2f0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d013      	beq.n	80061a4 <HAL_GPIO_Init+0x1f0>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a4a      	ldr	r2, [pc, #296]	@ (80062a8 <HAL_GPIO_Init+0x2f4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00d      	beq.n	80061a0 <HAL_GPIO_Init+0x1ec>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a49      	ldr	r2, [pc, #292]	@ (80062ac <HAL_GPIO_Init+0x2f8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d007      	beq.n	800619c <HAL_GPIO_Init+0x1e8>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a48      	ldr	r2, [pc, #288]	@ (80062b0 <HAL_GPIO_Init+0x2fc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d101      	bne.n	8006198 <HAL_GPIO_Init+0x1e4>
 8006194:	2305      	movs	r3, #5
 8006196:	e00a      	b.n	80061ae <HAL_GPIO_Init+0x1fa>
 8006198:	2306      	movs	r3, #6
 800619a:	e008      	b.n	80061ae <HAL_GPIO_Init+0x1fa>
 800619c:	2304      	movs	r3, #4
 800619e:	e006      	b.n	80061ae <HAL_GPIO_Init+0x1fa>
 80061a0:	2303      	movs	r3, #3
 80061a2:	e004      	b.n	80061ae <HAL_GPIO_Init+0x1fa>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e002      	b.n	80061ae <HAL_GPIO_Init+0x1fa>
 80061a8:	2301      	movs	r3, #1
 80061aa:	e000      	b.n	80061ae <HAL_GPIO_Init+0x1fa>
 80061ac:	2300      	movs	r3, #0
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	f002 0203 	and.w	r2, r2, #3
 80061b4:	0092      	lsls	r2, r2, #2
 80061b6:	4093      	lsls	r3, r2
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061be:	4937      	ldr	r1, [pc, #220]	@ (800629c <HAL_GPIO_Init+0x2e8>)
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	089b      	lsrs	r3, r3, #2
 80061c4:	3302      	adds	r3, #2
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80061cc:	4b39      	ldr	r3, [pc, #228]	@ (80062b4 <HAL_GPIO_Init+0x300>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	43db      	mvns	r3, r3
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4013      	ands	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80061f0:	4a30      	ldr	r2, [pc, #192]	@ (80062b4 <HAL_GPIO_Init+0x300>)
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80061f6:	4b2f      	ldr	r3, [pc, #188]	@ (80062b4 <HAL_GPIO_Init+0x300>)
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	43db      	mvns	r3, r3
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4013      	ands	r3, r2
 8006204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800621a:	4a26      	ldr	r2, [pc, #152]	@ (80062b4 <HAL_GPIO_Init+0x300>)
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006220:	4b24      	ldr	r3, [pc, #144]	@ (80062b4 <HAL_GPIO_Init+0x300>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	43db      	mvns	r3, r3
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4013      	ands	r3, r2
 800622e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006244:	4a1b      	ldr	r2, [pc, #108]	@ (80062b4 <HAL_GPIO_Init+0x300>)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800624a:	4b1a      	ldr	r3, [pc, #104]	@ (80062b4 <HAL_GPIO_Init+0x300>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	43db      	mvns	r3, r3
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4013      	ands	r3, r2
 8006258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800626e:	4a11      	ldr	r2, [pc, #68]	@ (80062b4 <HAL_GPIO_Init+0x300>)
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	3301      	adds	r3, #1
 8006278:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	fa22 f303 	lsr.w	r3, r2, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	f47f ae9d 	bne.w	8005fc4 <HAL_GPIO_Init+0x10>
  }
}
 800628a:	bf00      	nop
 800628c:	bf00      	nop
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	40021000 	.word	0x40021000
 800629c:	40010000 	.word	0x40010000
 80062a0:	48000400 	.word	0x48000400
 80062a4:	48000800 	.word	0x48000800
 80062a8:	48000c00 	.word	0x48000c00
 80062ac:	48001000 	.word	0x48001000
 80062b0:	48001400 	.word	0x48001400
 80062b4:	40010400 	.word	0x40010400

080062b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	887b      	ldrh	r3, [r7, #2]
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062d0:	2301      	movs	r3, #1
 80062d2:	73fb      	strb	r3, [r7, #15]
 80062d4:	e001      	b.n	80062da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062da:	7bfb      	ldrb	r3, [r7, #15]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	807b      	strh	r3, [r7, #2]
 80062f4:	4613      	mov	r3, r2
 80062f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062f8:	787b      	ldrb	r3, [r7, #1]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80062fe:	887a      	ldrh	r2, [r7, #2]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006304:	e002      	b.n	800630c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006306:	887a      	ldrh	r2, [r7, #2]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006322:	4b08      	ldr	r3, [pc, #32]	@ (8006344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006324:	695a      	ldr	r2, [r3, #20]
 8006326:	88fb      	ldrh	r3, [r7, #6]
 8006328:	4013      	ands	r3, r2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d006      	beq.n	800633c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800632e:	4a05      	ldr	r2, [pc, #20]	@ (8006344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006330:	88fb      	ldrh	r3, [r7, #6]
 8006332:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	4618      	mov	r0, r3
 8006338:	f7fd fe5c 	bl	8003ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40010400 	.word	0x40010400

08006348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d141      	bne.n	80063da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006356:	4b4b      	ldr	r3, [pc, #300]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800635e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006362:	d131      	bne.n	80063c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006364:	4b47      	ldr	r3, [pc, #284]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800636a:	4a46      	ldr	r2, [pc, #280]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800636c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006370:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006374:	4b43      	ldr	r3, [pc, #268]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800637c:	4a41      	ldr	r2, [pc, #260]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800637e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006382:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006384:	4b40      	ldr	r3, [pc, #256]	@ (8006488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2232      	movs	r2, #50	@ 0x32
 800638a:	fb02 f303 	mul.w	r3, r2, r3
 800638e:	4a3f      	ldr	r2, [pc, #252]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006390:	fba2 2303 	umull	r2, r3, r2, r3
 8006394:	0c9b      	lsrs	r3, r3, #18
 8006396:	3301      	adds	r3, #1
 8006398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800639a:	e002      	b.n	80063a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3b01      	subs	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063a2:	4b38      	ldr	r3, [pc, #224]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ae:	d102      	bne.n	80063b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1f2      	bne.n	800639c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063b6:	4b33      	ldr	r3, [pc, #204]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063c2:	d158      	bne.n	8006476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e057      	b.n	8006478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063c8:	4b2e      	ldr	r3, [pc, #184]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80063d8:	e04d      	b.n	8006476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e0:	d141      	bne.n	8006466 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063e2:	4b28      	ldr	r3, [pc, #160]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ee:	d131      	bne.n	8006454 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063f0:	4b24      	ldr	r3, [pc, #144]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063f6:	4a23      	ldr	r2, [pc, #140]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006400:	4b20      	ldr	r3, [pc, #128]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006408:	4a1e      	ldr	r2, [pc, #120]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800640a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800640e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006410:	4b1d      	ldr	r3, [pc, #116]	@ (8006488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2232      	movs	r2, #50	@ 0x32
 8006416:	fb02 f303 	mul.w	r3, r2, r3
 800641a:	4a1c      	ldr	r2, [pc, #112]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800641c:	fba2 2303 	umull	r2, r3, r2, r3
 8006420:	0c9b      	lsrs	r3, r3, #18
 8006422:	3301      	adds	r3, #1
 8006424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006426:	e002      	b.n	800642e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3b01      	subs	r3, #1
 800642c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800642e:	4b15      	ldr	r3, [pc, #84]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800643a:	d102      	bne.n	8006442 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f2      	bne.n	8006428 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006442:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800644a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800644e:	d112      	bne.n	8006476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e011      	b.n	8006478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006454:	4b0b      	ldr	r3, [pc, #44]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800645a:	4a0a      	ldr	r2, [pc, #40]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800645c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006460:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006464:	e007      	b.n	8006476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006466:	4b07      	ldr	r3, [pc, #28]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800646e:	4a05      	ldr	r2, [pc, #20]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006470:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006474:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	40007000 	.word	0x40007000
 8006488:	20000230 	.word	0x20000230
 800648c:	431bde83 	.word	0x431bde83

08006490 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006494:	4b05      	ldr	r3, [pc, #20]	@ (80064ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	4a04      	ldr	r2, [pc, #16]	@ (80064ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800649a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800649e:	6093      	str	r3, [r2, #8]
}
 80064a0:	bf00      	nop
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	40007000 	.word	0x40007000

080064b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e2fe      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d075      	beq.n	80065ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ce:	4b97      	ldr	r3, [pc, #604]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 030c 	and.w	r3, r3, #12
 80064d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064d8:	4b94      	ldr	r3, [pc, #592]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0303 	and.w	r3, r3, #3
 80064e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b0c      	cmp	r3, #12
 80064e6:	d102      	bne.n	80064ee <HAL_RCC_OscConfig+0x3e>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d002      	beq.n	80064f4 <HAL_RCC_OscConfig+0x44>
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d10b      	bne.n	800650c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f4:	4b8d      	ldr	r3, [pc, #564]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d05b      	beq.n	80065b8 <HAL_RCC_OscConfig+0x108>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d157      	bne.n	80065b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e2d9      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006514:	d106      	bne.n	8006524 <HAL_RCC_OscConfig+0x74>
 8006516:	4b85      	ldr	r3, [pc, #532]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a84      	ldr	r2, [pc, #528]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 800651c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	e01d      	b.n	8006560 <HAL_RCC_OscConfig+0xb0>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800652c:	d10c      	bne.n	8006548 <HAL_RCC_OscConfig+0x98>
 800652e:	4b7f      	ldr	r3, [pc, #508]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a7e      	ldr	r2, [pc, #504]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 8006534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	4b7c      	ldr	r3, [pc, #496]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a7b      	ldr	r2, [pc, #492]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 8006540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	e00b      	b.n	8006560 <HAL_RCC_OscConfig+0xb0>
 8006548:	4b78      	ldr	r3, [pc, #480]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a77      	ldr	r2, [pc, #476]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 800654e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	4b75      	ldr	r3, [pc, #468]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a74      	ldr	r2, [pc, #464]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 800655a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800655e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d013      	beq.n	8006590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006568:	f7ff f8d6 	bl	8005718 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006570:	f7ff f8d2 	bl	8005718 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b64      	cmp	r3, #100	@ 0x64
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e29e      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006582:	4b6a      	ldr	r3, [pc, #424]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f0      	beq.n	8006570 <HAL_RCC_OscConfig+0xc0>
 800658e:	e014      	b.n	80065ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7ff f8c2 	bl	8005718 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006598:	f7ff f8be 	bl	8005718 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b64      	cmp	r3, #100	@ 0x64
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e28a      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065aa:	4b60      	ldr	r3, [pc, #384]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f0      	bne.n	8006598 <HAL_RCC_OscConfig+0xe8>
 80065b6:	e000      	b.n	80065ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d075      	beq.n	80066b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065c6:	4b59      	ldr	r3, [pc, #356]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 030c 	and.w	r3, r3, #12
 80065ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065d0:	4b56      	ldr	r3, [pc, #344]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0303 	and.w	r3, r3, #3
 80065d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	2b0c      	cmp	r3, #12
 80065de:	d102      	bne.n	80065e6 <HAL_RCC_OscConfig+0x136>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d002      	beq.n	80065ec <HAL_RCC_OscConfig+0x13c>
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d11f      	bne.n	800662c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065ec:	4b4f      	ldr	r3, [pc, #316]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d005      	beq.n	8006604 <HAL_RCC_OscConfig+0x154>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e25d      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006604:	4b49      	ldr	r3, [pc, #292]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	061b      	lsls	r3, r3, #24
 8006612:	4946      	ldr	r1, [pc, #280]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 8006614:	4313      	orrs	r3, r2
 8006616:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006618:	4b45      	ldr	r3, [pc, #276]	@ (8006730 <HAL_RCC_OscConfig+0x280>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff f82f 	bl	8005680 <HAL_InitTick>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d043      	beq.n	80066b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e249      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d023      	beq.n	800667c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006634:	4b3d      	ldr	r3, [pc, #244]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a3c      	ldr	r2, [pc, #240]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 800663a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800663e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006640:	f7ff f86a 	bl	8005718 <HAL_GetTick>
 8006644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006646:	e008      	b.n	800665a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006648:	f7ff f866 	bl	8005718 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e232      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800665a:	4b34      	ldr	r3, [pc, #208]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0f0      	beq.n	8006648 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006666:	4b31      	ldr	r3, [pc, #196]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	061b      	lsls	r3, r3, #24
 8006674:	492d      	ldr	r1, [pc, #180]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 8006676:	4313      	orrs	r3, r2
 8006678:	604b      	str	r3, [r1, #4]
 800667a:	e01a      	b.n	80066b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800667c:	4b2b      	ldr	r3, [pc, #172]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a2a      	ldr	r2, [pc, #168]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 8006682:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006688:	f7ff f846 	bl	8005718 <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006690:	f7ff f842 	bl	8005718 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e20e      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066a2:	4b22      	ldr	r3, [pc, #136]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f0      	bne.n	8006690 <HAL_RCC_OscConfig+0x1e0>
 80066ae:	e000      	b.n	80066b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0308 	and.w	r3, r3, #8
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d041      	beq.n	8006742 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01c      	beq.n	8006700 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066c6:	4b19      	ldr	r3, [pc, #100]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 80066c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066cc:	4a17      	ldr	r2, [pc, #92]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d6:	f7ff f81f 	bl	8005718 <HAL_GetTick>
 80066da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066dc:	e008      	b.n	80066f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066de:	f7ff f81b 	bl	8005718 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e1e7      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066f0:	4b0e      	ldr	r3, [pc, #56]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 80066f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0ef      	beq.n	80066de <HAL_RCC_OscConfig+0x22e>
 80066fe:	e020      	b.n	8006742 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006700:	4b0a      	ldr	r3, [pc, #40]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 8006702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006706:	4a09      	ldr	r2, [pc, #36]	@ (800672c <HAL_RCC_OscConfig+0x27c>)
 8006708:	f023 0301 	bic.w	r3, r3, #1
 800670c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006710:	f7ff f802 	bl	8005718 <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006716:	e00d      	b.n	8006734 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006718:	f7fe fffe 	bl	8005718 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d906      	bls.n	8006734 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e1ca      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
 800672a:	bf00      	nop
 800672c:	40021000 	.word	0x40021000
 8006730:	20000234 	.word	0x20000234
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006734:	4b8c      	ldr	r3, [pc, #560]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1ea      	bne.n	8006718 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0304 	and.w	r3, r3, #4
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 80a6 	beq.w	800689c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006750:	2300      	movs	r3, #0
 8006752:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006754:	4b84      	ldr	r3, [pc, #528]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_RCC_OscConfig+0x2b4>
 8006760:	2301      	movs	r3, #1
 8006762:	e000      	b.n	8006766 <HAL_RCC_OscConfig+0x2b6>
 8006764:	2300      	movs	r3, #0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00d      	beq.n	8006786 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800676a:	4b7f      	ldr	r3, [pc, #508]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 800676c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800676e:	4a7e      	ldr	r2, [pc, #504]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006774:	6593      	str	r3, [r2, #88]	@ 0x58
 8006776:	4b7c      	ldr	r3, [pc, #496]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006782:	2301      	movs	r3, #1
 8006784:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006786:	4b79      	ldr	r3, [pc, #484]	@ (800696c <HAL_RCC_OscConfig+0x4bc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800678e:	2b00      	cmp	r3, #0
 8006790:	d118      	bne.n	80067c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006792:	4b76      	ldr	r3, [pc, #472]	@ (800696c <HAL_RCC_OscConfig+0x4bc>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a75      	ldr	r2, [pc, #468]	@ (800696c <HAL_RCC_OscConfig+0x4bc>)
 8006798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800679c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800679e:	f7fe ffbb 	bl	8005718 <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a6:	f7fe ffb7 	bl	8005718 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e183      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067b8:	4b6c      	ldr	r3, [pc, #432]	@ (800696c <HAL_RCC_OscConfig+0x4bc>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f0      	beq.n	80067a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d108      	bne.n	80067de <HAL_RCC_OscConfig+0x32e>
 80067cc:	4b66      	ldr	r3, [pc, #408]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80067ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d2:	4a65      	ldr	r2, [pc, #404]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80067d4:	f043 0301 	orr.w	r3, r3, #1
 80067d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067dc:	e024      	b.n	8006828 <HAL_RCC_OscConfig+0x378>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b05      	cmp	r3, #5
 80067e4:	d110      	bne.n	8006808 <HAL_RCC_OscConfig+0x358>
 80067e6:	4b60      	ldr	r3, [pc, #384]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80067e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ec:	4a5e      	ldr	r2, [pc, #376]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80067ee:	f043 0304 	orr.w	r3, r3, #4
 80067f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067f6:	4b5c      	ldr	r3, [pc, #368]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80067f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067fc:	4a5a      	ldr	r2, [pc, #360]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006806:	e00f      	b.n	8006828 <HAL_RCC_OscConfig+0x378>
 8006808:	4b57      	ldr	r3, [pc, #348]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 800680a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800680e:	4a56      	ldr	r2, [pc, #344]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006810:	f023 0301 	bic.w	r3, r3, #1
 8006814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006818:	4b53      	ldr	r3, [pc, #332]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 800681a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681e:	4a52      	ldr	r2, [pc, #328]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006820:	f023 0304 	bic.w	r3, r3, #4
 8006824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d016      	beq.n	800685e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006830:	f7fe ff72 	bl	8005718 <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006836:	e00a      	b.n	800684e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006838:	f7fe ff6e 	bl	8005718 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006846:	4293      	cmp	r3, r2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e138      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800684e:	4b46      	ldr	r3, [pc, #280]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0ed      	beq.n	8006838 <HAL_RCC_OscConfig+0x388>
 800685c:	e015      	b.n	800688a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685e:	f7fe ff5b 	bl	8005718 <HAL_GetTick>
 8006862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006864:	e00a      	b.n	800687c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006866:	f7fe ff57 	bl	8005718 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006874:	4293      	cmp	r3, r2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e121      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800687c:	4b3a      	ldr	r3, [pc, #232]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 800687e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1ed      	bne.n	8006866 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800688a:	7ffb      	ldrb	r3, [r7, #31]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d105      	bne.n	800689c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006890:	4b35      	ldr	r3, [pc, #212]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006894:	4a34      	ldr	r2, [pc, #208]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800689a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d03c      	beq.n	8006922 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01c      	beq.n	80068ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068b0:	4b2d      	ldr	r3, [pc, #180]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80068b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c0:	f7fe ff2a 	bl	8005718 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068c8:	f7fe ff26 	bl	8005718 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e0f2      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068da:	4b23      	ldr	r3, [pc, #140]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80068dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0ef      	beq.n	80068c8 <HAL_RCC_OscConfig+0x418>
 80068e8:	e01b      	b.n	8006922 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068ea:	4b1f      	ldr	r3, [pc, #124]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80068ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80068f2:	f023 0301 	bic.w	r3, r3, #1
 80068f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068fa:	f7fe ff0d 	bl	8005718 <HAL_GetTick>
 80068fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006900:	e008      	b.n	8006914 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006902:	f7fe ff09 	bl	8005718 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d901      	bls.n	8006914 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e0d5      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006914:	4b14      	ldr	r3, [pc, #80]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006916:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1ef      	bne.n	8006902 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 80c9 	beq.w	8006abe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800692c:	4b0e      	ldr	r3, [pc, #56]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f003 030c 	and.w	r3, r3, #12
 8006934:	2b0c      	cmp	r3, #12
 8006936:	f000 8083 	beq.w	8006a40 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d15e      	bne.n	8006a00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006942:	4b09      	ldr	r3, [pc, #36]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a08      	ldr	r2, [pc, #32]	@ (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006948:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800694c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694e:	f7fe fee3 	bl	8005718 <HAL_GetTick>
 8006952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006954:	e00c      	b.n	8006970 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006956:	f7fe fedf 	bl	8005718 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d905      	bls.n	8006970 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e0ab      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
 8006968:	40021000 	.word	0x40021000
 800696c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006970:	4b55      	ldr	r3, [pc, #340]	@ (8006ac8 <HAL_RCC_OscConfig+0x618>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1ec      	bne.n	8006956 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800697c:	4b52      	ldr	r3, [pc, #328]	@ (8006ac8 <HAL_RCC_OscConfig+0x618>)
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	4b52      	ldr	r3, [pc, #328]	@ (8006acc <HAL_RCC_OscConfig+0x61c>)
 8006982:	4013      	ands	r3, r2
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6a11      	ldr	r1, [r2, #32]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800698c:	3a01      	subs	r2, #1
 800698e:	0112      	lsls	r2, r2, #4
 8006990:	4311      	orrs	r1, r2
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006996:	0212      	lsls	r2, r2, #8
 8006998:	4311      	orrs	r1, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800699e:	0852      	lsrs	r2, r2, #1
 80069a0:	3a01      	subs	r2, #1
 80069a2:	0552      	lsls	r2, r2, #21
 80069a4:	4311      	orrs	r1, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069aa:	0852      	lsrs	r2, r2, #1
 80069ac:	3a01      	subs	r2, #1
 80069ae:	0652      	lsls	r2, r2, #25
 80069b0:	4311      	orrs	r1, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069b6:	06d2      	lsls	r2, r2, #27
 80069b8:	430a      	orrs	r2, r1
 80069ba:	4943      	ldr	r1, [pc, #268]	@ (8006ac8 <HAL_RCC_OscConfig+0x618>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069c0:	4b41      	ldr	r3, [pc, #260]	@ (8006ac8 <HAL_RCC_OscConfig+0x618>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a40      	ldr	r2, [pc, #256]	@ (8006ac8 <HAL_RCC_OscConfig+0x618>)
 80069c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069cc:	4b3e      	ldr	r3, [pc, #248]	@ (8006ac8 <HAL_RCC_OscConfig+0x618>)
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	4a3d      	ldr	r2, [pc, #244]	@ (8006ac8 <HAL_RCC_OscConfig+0x618>)
 80069d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d8:	f7fe fe9e 	bl	8005718 <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e0:	f7fe fe9a 	bl	8005718 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e066      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069f2:	4b35      	ldr	r3, [pc, #212]	@ (8006ac8 <HAL_RCC_OscConfig+0x618>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0f0      	beq.n	80069e0 <HAL_RCC_OscConfig+0x530>
 80069fe:	e05e      	b.n	8006abe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a00:	4b31      	ldr	r3, [pc, #196]	@ (8006ac8 <HAL_RCC_OscConfig+0x618>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a30      	ldr	r2, [pc, #192]	@ (8006ac8 <HAL_RCC_OscConfig+0x618>)
 8006a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0c:	f7fe fe84 	bl	8005718 <HAL_GetTick>
 8006a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a14:	f7fe fe80 	bl	8005718 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e04c      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a26:	4b28      	ldr	r3, [pc, #160]	@ (8006ac8 <HAL_RCC_OscConfig+0x618>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1f0      	bne.n	8006a14 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a32:	4b25      	ldr	r3, [pc, #148]	@ (8006ac8 <HAL_RCC_OscConfig+0x618>)
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	4924      	ldr	r1, [pc, #144]	@ (8006ac8 <HAL_RCC_OscConfig+0x618>)
 8006a38:	4b25      	ldr	r3, [pc, #148]	@ (8006ad0 <HAL_RCC_OscConfig+0x620>)
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	60cb      	str	r3, [r1, #12]
 8006a3e:	e03e      	b.n	8006abe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d101      	bne.n	8006a4c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e039      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ac8 <HAL_RCC_OscConfig+0x618>)
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f003 0203 	and.w	r2, r3, #3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d12c      	bne.n	8006aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d123      	bne.n	8006aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d11b      	bne.n	8006aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d113      	bne.n	8006aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9c:	085b      	lsrs	r3, r3, #1
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d109      	bne.n	8006aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d001      	beq.n	8006abe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e000      	b.n	8006ac0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3720      	adds	r7, #32
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40021000 	.word	0x40021000
 8006acc:	019f800c 	.word	0x019f800c
 8006ad0:	feeefffc 	.word	0xfeeefffc

08006ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e11e      	b.n	8006d2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006aec:	4b91      	ldr	r3, [pc, #580]	@ (8006d34 <HAL_RCC_ClockConfig+0x260>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d910      	bls.n	8006b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006afa:	4b8e      	ldr	r3, [pc, #568]	@ (8006d34 <HAL_RCC_ClockConfig+0x260>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f023 020f 	bic.w	r2, r3, #15
 8006b02:	498c      	ldr	r1, [pc, #560]	@ (8006d34 <HAL_RCC_ClockConfig+0x260>)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b0a:	4b8a      	ldr	r3, [pc, #552]	@ (8006d34 <HAL_RCC_ClockConfig+0x260>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d001      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e106      	b.n	8006d2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d073      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d129      	bne.n	8006b84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b30:	4b81      	ldr	r3, [pc, #516]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e0f4      	b.n	8006d2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006b40:	f000 f99e 	bl	8006e80 <RCC_GetSysClockFreqFromPLLSource>
 8006b44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	4a7c      	ldr	r2, [pc, #496]	@ (8006d3c <HAL_RCC_ClockConfig+0x268>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d93f      	bls.n	8006bce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d033      	beq.n	8006bce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d12f      	bne.n	8006bce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b6e:	4b72      	ldr	r3, [pc, #456]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b76:	4a70      	ldr	r2, [pc, #448]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b7e:	2380      	movs	r3, #128	@ 0x80
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	e024      	b.n	8006bce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d107      	bne.n	8006b9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d109      	bne.n	8006bac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e0c6      	b.n	8006d2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b9c:	4b66      	ldr	r3, [pc, #408]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e0be      	b.n	8006d2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006bac:	f000 f8ce 	bl	8006d4c <HAL_RCC_GetSysClockFreq>
 8006bb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	4a61      	ldr	r2, [pc, #388]	@ (8006d3c <HAL_RCC_ClockConfig+0x268>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d909      	bls.n	8006bce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bba:	4b5f      	ldr	r3, [pc, #380]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bc2:	4a5d      	ldr	r2, [pc, #372]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006bca:	2380      	movs	r3, #128	@ 0x80
 8006bcc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bce:	4b5a      	ldr	r3, [pc, #360]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f023 0203 	bic.w	r2, r3, #3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	4957      	ldr	r1, [pc, #348]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be0:	f7fe fd9a 	bl	8005718 <HAL_GetTick>
 8006be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be6:	e00a      	b.n	8006bfe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006be8:	f7fe fd96 	bl	8005718 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e095      	b.n	8006d2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bfe:	4b4e      	ldr	r3, [pc, #312]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 020c 	and.w	r2, r3, #12
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d1eb      	bne.n	8006be8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d023      	beq.n	8006c64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d005      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c28:	4b43      	ldr	r3, [pc, #268]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	4a42      	ldr	r2, [pc, #264]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006c2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0308 	and.w	r3, r3, #8
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c40:	4b3d      	ldr	r3, [pc, #244]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006c48:	4a3b      	ldr	r2, [pc, #236]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006c4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c50:	4b39      	ldr	r3, [pc, #228]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	4936      	ldr	r1, [pc, #216]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	608b      	str	r3, [r1, #8]
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	2b80      	cmp	r3, #128	@ 0x80
 8006c68:	d105      	bne.n	8006c76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c6a:	4b33      	ldr	r3, [pc, #204]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	4a32      	ldr	r2, [pc, #200]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006c70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c76:	4b2f      	ldr	r3, [pc, #188]	@ (8006d34 <HAL_RCC_ClockConfig+0x260>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 030f 	and.w	r3, r3, #15
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d21d      	bcs.n	8006cc0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c84:	4b2b      	ldr	r3, [pc, #172]	@ (8006d34 <HAL_RCC_ClockConfig+0x260>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f023 020f 	bic.w	r2, r3, #15
 8006c8c:	4929      	ldr	r1, [pc, #164]	@ (8006d34 <HAL_RCC_ClockConfig+0x260>)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c94:	f7fe fd40 	bl	8005718 <HAL_GetTick>
 8006c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9a:	e00a      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c9c:	f7fe fd3c 	bl	8005718 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e03b      	b.n	8006d2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cb2:	4b20      	ldr	r3, [pc, #128]	@ (8006d34 <HAL_RCC_ClockConfig+0x260>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d1ed      	bne.n	8006c9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d008      	beq.n	8006cde <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	4917      	ldr	r1, [pc, #92]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d009      	beq.n	8006cfe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cea:	4b13      	ldr	r3, [pc, #76]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	490f      	ldr	r1, [pc, #60]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006cfe:	f000 f825 	bl	8006d4c <HAL_RCC_GetSysClockFreq>
 8006d02:	4602      	mov	r2, r0
 8006d04:	4b0c      	ldr	r3, [pc, #48]	@ (8006d38 <HAL_RCC_ClockConfig+0x264>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	091b      	lsrs	r3, r3, #4
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	490c      	ldr	r1, [pc, #48]	@ (8006d40 <HAL_RCC_ClockConfig+0x26c>)
 8006d10:	5ccb      	ldrb	r3, [r1, r3]
 8006d12:	f003 031f 	and.w	r3, r3, #31
 8006d16:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d44 <HAL_RCC_ClockConfig+0x270>)
 8006d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d48 <HAL_RCC_ClockConfig+0x274>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe fcac 	bl	8005680 <HAL_InitTick>
 8006d28:	4603      	mov	r3, r0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3718      	adds	r7, #24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	40022000 	.word	0x40022000
 8006d38:	40021000 	.word	0x40021000
 8006d3c:	04c4b400 	.word	0x04c4b400
 8006d40:	0800c87c 	.word	0x0800c87c
 8006d44:	20000230 	.word	0x20000230
 8006d48:	20000234 	.word	0x20000234

08006d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d52:	4b2c      	ldr	r3, [pc, #176]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 030c 	and.w	r3, r3, #12
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d102      	bne.n	8006d64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	e047      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d64:	4b27      	ldr	r3, [pc, #156]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f003 030c 	and.w	r3, r3, #12
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d102      	bne.n	8006d76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d70:	4b26      	ldr	r3, [pc, #152]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	e03e      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d76:	4b23      	ldr	r3, [pc, #140]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f003 030c 	and.w	r3, r3, #12
 8006d7e:	2b0c      	cmp	r3, #12
 8006d80:	d136      	bne.n	8006df0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d82:	4b20      	ldr	r3, [pc, #128]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	091b      	lsrs	r3, r3, #4
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	3301      	adds	r3, #1
 8006d98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b03      	cmp	r3, #3
 8006d9e:	d10c      	bne.n	8006dba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006da0:	4a1a      	ldr	r2, [pc, #104]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da8:	4a16      	ldr	r2, [pc, #88]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006daa:	68d2      	ldr	r2, [r2, #12]
 8006dac:	0a12      	lsrs	r2, r2, #8
 8006dae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006db2:	fb02 f303 	mul.w	r3, r2, r3
 8006db6:	617b      	str	r3, [r7, #20]
      break;
 8006db8:	e00c      	b.n	8006dd4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dba:	4a13      	ldr	r2, [pc, #76]	@ (8006e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc2:	4a10      	ldr	r2, [pc, #64]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dc4:	68d2      	ldr	r2, [r2, #12]
 8006dc6:	0a12      	lsrs	r2, r2, #8
 8006dc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006dcc:	fb02 f303 	mul.w	r3, r2, r3
 8006dd0:	617b      	str	r3, [r7, #20]
      break;
 8006dd2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	0e5b      	lsrs	r3, r3, #25
 8006dda:	f003 0303 	and.w	r3, r3, #3
 8006dde:	3301      	adds	r3, #1
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	e001      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006df4:	693b      	ldr	r3, [r7, #16]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40021000 	.word	0x40021000
 8006e08:	00f42400 	.word	0x00f42400
 8006e0c:	016e3600 	.word	0x016e3600

08006e10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e14:	4b03      	ldr	r3, [pc, #12]	@ (8006e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e16:	681b      	ldr	r3, [r3, #0]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20000230 	.word	0x20000230

08006e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e2c:	f7ff fff0 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 8006e30:	4602      	mov	r2, r0
 8006e32:	4b06      	ldr	r3, [pc, #24]	@ (8006e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	0a1b      	lsrs	r3, r3, #8
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	4904      	ldr	r1, [pc, #16]	@ (8006e50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e3e:	5ccb      	ldrb	r3, [r1, r3]
 8006e40:	f003 031f 	and.w	r3, r3, #31
 8006e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	40021000 	.word	0x40021000
 8006e50:	0800c88c 	.word	0x0800c88c

08006e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e58:	f7ff ffda 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	4b06      	ldr	r3, [pc, #24]	@ (8006e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	0adb      	lsrs	r3, r3, #11
 8006e64:	f003 0307 	and.w	r3, r3, #7
 8006e68:	4904      	ldr	r1, [pc, #16]	@ (8006e7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e6a:	5ccb      	ldrb	r3, [r1, r3]
 8006e6c:	f003 031f 	and.w	r3, r3, #31
 8006e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	0800c88c 	.word	0x0800c88c

08006e80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e86:	4b1e      	ldr	r3, [pc, #120]	@ (8006f00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e90:	4b1b      	ldr	r3, [pc, #108]	@ (8006f00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	091b      	lsrs	r3, r3, #4
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d10c      	bne.n	8006ebe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ea4:	4a17      	ldr	r2, [pc, #92]	@ (8006f04 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eac:	4a14      	ldr	r2, [pc, #80]	@ (8006f00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006eae:	68d2      	ldr	r2, [r2, #12]
 8006eb0:	0a12      	lsrs	r2, r2, #8
 8006eb2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006eb6:	fb02 f303 	mul.w	r3, r2, r3
 8006eba:	617b      	str	r3, [r7, #20]
    break;
 8006ebc:	e00c      	b.n	8006ed8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ebe:	4a12      	ldr	r2, [pc, #72]	@ (8006f08 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8006f00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ec8:	68d2      	ldr	r2, [r2, #12]
 8006eca:	0a12      	lsrs	r2, r2, #8
 8006ecc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ed0:	fb02 f303 	mul.w	r3, r2, r3
 8006ed4:	617b      	str	r3, [r7, #20]
    break;
 8006ed6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ed8:	4b09      	ldr	r3, [pc, #36]	@ (8006f00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	0e5b      	lsrs	r3, r3, #25
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006ef2:	687b      	ldr	r3, [r7, #4]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	371c      	adds	r7, #28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	40021000 	.word	0x40021000
 8006f04:	016e3600 	.word	0x016e3600
 8006f08:	00f42400 	.word	0x00f42400

08006f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f14:	2300      	movs	r3, #0
 8006f16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f18:	2300      	movs	r3, #0
 8006f1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 8098 	beq.w	800705a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f2e:	4b43      	ldr	r3, [pc, #268]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10d      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f3a:	4b40      	ldr	r3, [pc, #256]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f3e:	4a3f      	ldr	r2, [pc, #252]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f46:	4b3d      	ldr	r3, [pc, #244]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f4e:	60bb      	str	r3, [r7, #8]
 8006f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f52:	2301      	movs	r3, #1
 8006f54:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f56:	4b3a      	ldr	r3, [pc, #232]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a39      	ldr	r2, [pc, #228]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f62:	f7fe fbd9 	bl	8005718 <HAL_GetTick>
 8006f66:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f68:	e009      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f6a:	f7fe fbd5 	bl	8005718 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d902      	bls.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	74fb      	strb	r3, [r7, #19]
        break;
 8006f7c:	e005      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f7e:	4b30      	ldr	r3, [pc, #192]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0ef      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006f8a:	7cfb      	ldrb	r3, [r7, #19]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d159      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f90:	4b2a      	ldr	r3, [pc, #168]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f9a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d01e      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d019      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fac:	4b23      	ldr	r3, [pc, #140]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fb8:	4b20      	ldr	r3, [pc, #128]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fce:	4a1b      	ldr	r2, [pc, #108]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006fd8:	4a18      	ldr	r2, [pc, #96]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d016      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fea:	f7fe fb95 	bl	8005718 <HAL_GetTick>
 8006fee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ff0:	e00b      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff2:	f7fe fb91 	bl	8005718 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007000:	4293      	cmp	r3, r2
 8007002:	d902      	bls.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	74fb      	strb	r3, [r7, #19]
            break;
 8007008:	e006      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800700a:	4b0c      	ldr	r3, [pc, #48]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800700c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d0ec      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007018:	7cfb      	ldrb	r3, [r7, #19]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10b      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800701e:	4b07      	ldr	r3, [pc, #28]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007024:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800702c:	4903      	ldr	r1, [pc, #12]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800702e:	4313      	orrs	r3, r2
 8007030:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007034:	e008      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007036:	7cfb      	ldrb	r3, [r7, #19]
 8007038:	74bb      	strb	r3, [r7, #18]
 800703a:	e005      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800703c:	40021000 	.word	0x40021000
 8007040:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007044:	7cfb      	ldrb	r3, [r7, #19]
 8007046:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007048:	7c7b      	ldrb	r3, [r7, #17]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d105      	bne.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800704e:	4ba7      	ldr	r3, [pc, #668]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007052:	4aa6      	ldr	r2, [pc, #664]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007054:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007058:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007066:	4ba1      	ldr	r3, [pc, #644]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800706c:	f023 0203 	bic.w	r2, r3, #3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	499d      	ldr	r1, [pc, #628]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007076:	4313      	orrs	r3, r2
 8007078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00a      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007088:	4b98      	ldr	r3, [pc, #608]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800708a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708e:	f023 020c 	bic.w	r2, r3, #12
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	4995      	ldr	r1, [pc, #596]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007098:	4313      	orrs	r3, r2
 800709a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070aa:	4b90      	ldr	r3, [pc, #576]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	498c      	ldr	r1, [pc, #560]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070cc:	4b87      	ldr	r3, [pc, #540]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	4984      	ldr	r1, [pc, #528]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0310 	and.w	r3, r3, #16
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070ee:	4b7f      	ldr	r3, [pc, #508]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	497b      	ldr	r1, [pc, #492]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0320 	and.w	r3, r3, #32
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007110:	4b76      	ldr	r3, [pc, #472]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007116:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	4973      	ldr	r1, [pc, #460]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007120:	4313      	orrs	r3, r2
 8007122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007132:	4b6e      	ldr	r3, [pc, #440]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007138:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	496a      	ldr	r1, [pc, #424]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007142:	4313      	orrs	r3, r2
 8007144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007154:	4b65      	ldr	r3, [pc, #404]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800715a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	4962      	ldr	r1, [pc, #392]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007164:	4313      	orrs	r3, r2
 8007166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007176:	4b5d      	ldr	r3, [pc, #372]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007184:	4959      	ldr	r1, [pc, #356]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007186:	4313      	orrs	r3, r2
 8007188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007198:	4b54      	ldr	r3, [pc, #336]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800719a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800719e:	f023 0203 	bic.w	r2, r3, #3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a6:	4951      	ldr	r1, [pc, #324]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071ba:	4b4c      	ldr	r3, [pc, #304]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c8:	4948      	ldr	r1, [pc, #288]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d015      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071dc:	4b43      	ldr	r3, [pc, #268]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ea:	4940      	ldr	r1, [pc, #256]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071fa:	d105      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071fc:	4b3b      	ldr	r3, [pc, #236]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	4a3a      	ldr	r2, [pc, #232]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007206:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007210:	2b00      	cmp	r3, #0
 8007212:	d015      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007214:	4b35      	ldr	r3, [pc, #212]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800721a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007222:	4932      	ldr	r1, [pc, #200]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800722e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007232:	d105      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007234:	4b2d      	ldr	r3, [pc, #180]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	4a2c      	ldr	r2, [pc, #176]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800723a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800723e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d015      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800724c:	4b27      	ldr	r3, [pc, #156]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800724e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007252:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725a:	4924      	ldr	r1, [pc, #144]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800725c:	4313      	orrs	r3, r2
 800725e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007266:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800726a:	d105      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800726c:	4b1f      	ldr	r3, [pc, #124]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	4a1e      	ldr	r2, [pc, #120]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007276:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d015      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007284:	4b19      	ldr	r3, [pc, #100]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800728a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007292:	4916      	ldr	r1, [pc, #88]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007294:	4313      	orrs	r3, r2
 8007296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800729e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072a2:	d105      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072a4:	4b11      	ldr	r3, [pc, #68]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	4a10      	ldr	r2, [pc, #64]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d019      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072bc:	4b0b      	ldr	r3, [pc, #44]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ca:	4908      	ldr	r1, [pc, #32]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072da:	d109      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072dc:	4b03      	ldr	r3, [pc, #12]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	4a02      	ldr	r2, [pc, #8]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072e6:	60d3      	str	r3, [r2, #12]
 80072e8:	e002      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80072ea:	bf00      	nop
 80072ec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d015      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80072fc:	4b29      	ldr	r3, [pc, #164]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007302:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800730a:	4926      	ldr	r1, [pc, #152]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800730c:	4313      	orrs	r3, r2
 800730e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007316:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800731a:	d105      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800731c:	4b21      	ldr	r3, [pc, #132]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	4a20      	ldr	r2, [pc, #128]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007326:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d015      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007334:	4b1b      	ldr	r3, [pc, #108]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800733a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007342:	4918      	ldr	r1, [pc, #96]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007344:	4313      	orrs	r3, r2
 8007346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800734e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007352:	d105      	bne.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007354:	4b13      	ldr	r3, [pc, #76]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	4a12      	ldr	r2, [pc, #72]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800735a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800735e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d015      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800736c:	4b0d      	ldr	r3, [pc, #52]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800736e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007372:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800737a:	490a      	ldr	r1, [pc, #40]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800737c:	4313      	orrs	r3, r2
 800737e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007386:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800738a:	d105      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800738c:	4b05      	ldr	r3, [pc, #20]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	4a04      	ldr	r2, [pc, #16]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007396:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007398:	7cbb      	ldrb	r3, [r7, #18]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	40021000 	.word	0x40021000

080073a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e054      	b.n	8007464 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d111      	bne.n	80073ea <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f002 fb3c 	bl	8009a4c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d102      	bne.n	80073e2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a23      	ldr	r2, [pc, #140]	@ (800746c <HAL_TIM_Base_Init+0xc4>)
 80073e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2202      	movs	r2, #2
 80073ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3304      	adds	r3, #4
 80073fa:	4619      	mov	r1, r3
 80073fc:	4610      	mov	r0, r2
 80073fe:	f001 fc7b 	bl	8008cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	08005171 	.word	0x08005171

08007470 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b01      	cmp	r3, #1
 8007482:	d001      	beq.n	8007488 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e04c      	b.n	8007522 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a26      	ldr	r2, [pc, #152]	@ (8007530 <HAL_TIM_Base_Start+0xc0>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d022      	beq.n	80074e0 <HAL_TIM_Base_Start+0x70>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074a2:	d01d      	beq.n	80074e0 <HAL_TIM_Base_Start+0x70>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a22      	ldr	r2, [pc, #136]	@ (8007534 <HAL_TIM_Base_Start+0xc4>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d018      	beq.n	80074e0 <HAL_TIM_Base_Start+0x70>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a21      	ldr	r2, [pc, #132]	@ (8007538 <HAL_TIM_Base_Start+0xc8>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d013      	beq.n	80074e0 <HAL_TIM_Base_Start+0x70>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a1f      	ldr	r2, [pc, #124]	@ (800753c <HAL_TIM_Base_Start+0xcc>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d00e      	beq.n	80074e0 <HAL_TIM_Base_Start+0x70>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a1e      	ldr	r2, [pc, #120]	@ (8007540 <HAL_TIM_Base_Start+0xd0>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d009      	beq.n	80074e0 <HAL_TIM_Base_Start+0x70>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007544 <HAL_TIM_Base_Start+0xd4>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d004      	beq.n	80074e0 <HAL_TIM_Base_Start+0x70>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1b      	ldr	r2, [pc, #108]	@ (8007548 <HAL_TIM_Base_Start+0xd8>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d115      	bne.n	800750c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	4b19      	ldr	r3, [pc, #100]	@ (800754c <HAL_TIM_Base_Start+0xdc>)
 80074e8:	4013      	ands	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b06      	cmp	r3, #6
 80074f0:	d015      	beq.n	800751e <HAL_TIM_Base_Start+0xae>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074f8:	d011      	beq.n	800751e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f042 0201 	orr.w	r2, r2, #1
 8007508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800750a:	e008      	b.n	800751e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0201 	orr.w	r2, r2, #1
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	e000      	b.n	8007520 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	40012c00 	.word	0x40012c00
 8007534:	40000400 	.word	0x40000400
 8007538:	40000800 	.word	0x40000800
 800753c:	40000c00 	.word	0x40000c00
 8007540:	40013400 	.word	0x40013400
 8007544:	40014000 	.word	0x40014000
 8007548:	40015000 	.word	0x40015000
 800754c:	00010007 	.word	0x00010007

08007550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b01      	cmp	r3, #1
 8007562:	d001      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e054      	b.n	8007612 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0201 	orr.w	r2, r2, #1
 800757e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a26      	ldr	r2, [pc, #152]	@ (8007620 <HAL_TIM_Base_Start_IT+0xd0>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d022      	beq.n	80075d0 <HAL_TIM_Base_Start_IT+0x80>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007592:	d01d      	beq.n	80075d0 <HAL_TIM_Base_Start_IT+0x80>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a22      	ldr	r2, [pc, #136]	@ (8007624 <HAL_TIM_Base_Start_IT+0xd4>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d018      	beq.n	80075d0 <HAL_TIM_Base_Start_IT+0x80>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a21      	ldr	r2, [pc, #132]	@ (8007628 <HAL_TIM_Base_Start_IT+0xd8>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d013      	beq.n	80075d0 <HAL_TIM_Base_Start_IT+0x80>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1f      	ldr	r2, [pc, #124]	@ (800762c <HAL_TIM_Base_Start_IT+0xdc>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00e      	beq.n	80075d0 <HAL_TIM_Base_Start_IT+0x80>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a1e      	ldr	r2, [pc, #120]	@ (8007630 <HAL_TIM_Base_Start_IT+0xe0>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d009      	beq.n	80075d0 <HAL_TIM_Base_Start_IT+0x80>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007634 <HAL_TIM_Base_Start_IT+0xe4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d004      	beq.n	80075d0 <HAL_TIM_Base_Start_IT+0x80>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007638 <HAL_TIM_Base_Start_IT+0xe8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d115      	bne.n	80075fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689a      	ldr	r2, [r3, #8]
 80075d6:	4b19      	ldr	r3, [pc, #100]	@ (800763c <HAL_TIM_Base_Start_IT+0xec>)
 80075d8:	4013      	ands	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b06      	cmp	r3, #6
 80075e0:	d015      	beq.n	800760e <HAL_TIM_Base_Start_IT+0xbe>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075e8:	d011      	beq.n	800760e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f042 0201 	orr.w	r2, r2, #1
 80075f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075fa:	e008      	b.n	800760e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0201 	orr.w	r2, r2, #1
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	e000      	b.n	8007610 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800760e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	40012c00 	.word	0x40012c00
 8007624:	40000400 	.word	0x40000400
 8007628:	40000800 	.word	0x40000800
 800762c:	40000c00 	.word	0x40000c00
 8007630:	40013400 	.word	0x40013400
 8007634:	40014000 	.word	0x40014000
 8007638:	40015000 	.word	0x40015000
 800763c:	00010007 	.word	0x00010007

08007640 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e054      	b.n	80076fc <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d111      	bne.n	8007682 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f002 f9f0 	bl	8009a4c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a23      	ldr	r2, [pc, #140]	@ (8007704 <HAL_TIM_PWM_Init+0xc4>)
 8007678:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2202      	movs	r2, #2
 8007686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3304      	adds	r3, #4
 8007692:	4619      	mov	r1, r3
 8007694:	4610      	mov	r0, r2
 8007696:	f001 fb2f 	bl	8008cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	08007709 	.word	0x08007709

08007708 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d109      	bne.n	8007740 <HAL_TIM_PWM_Start+0x24>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b01      	cmp	r3, #1
 8007736:	bf14      	ite	ne
 8007738:	2301      	movne	r3, #1
 800773a:	2300      	moveq	r3, #0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	e03c      	b.n	80077ba <HAL_TIM_PWM_Start+0x9e>
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b04      	cmp	r3, #4
 8007744:	d109      	bne.n	800775a <HAL_TIM_PWM_Start+0x3e>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b01      	cmp	r3, #1
 8007750:	bf14      	ite	ne
 8007752:	2301      	movne	r3, #1
 8007754:	2300      	moveq	r3, #0
 8007756:	b2db      	uxtb	r3, r3
 8007758:	e02f      	b.n	80077ba <HAL_TIM_PWM_Start+0x9e>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b08      	cmp	r3, #8
 800775e:	d109      	bne.n	8007774 <HAL_TIM_PWM_Start+0x58>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b01      	cmp	r3, #1
 800776a:	bf14      	ite	ne
 800776c:	2301      	movne	r3, #1
 800776e:	2300      	moveq	r3, #0
 8007770:	b2db      	uxtb	r3, r3
 8007772:	e022      	b.n	80077ba <HAL_TIM_PWM_Start+0x9e>
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2b0c      	cmp	r3, #12
 8007778:	d109      	bne.n	800778e <HAL_TIM_PWM_Start+0x72>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b01      	cmp	r3, #1
 8007784:	bf14      	ite	ne
 8007786:	2301      	movne	r3, #1
 8007788:	2300      	moveq	r3, #0
 800778a:	b2db      	uxtb	r3, r3
 800778c:	e015      	b.n	80077ba <HAL_TIM_PWM_Start+0x9e>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b10      	cmp	r3, #16
 8007792:	d109      	bne.n	80077a8 <HAL_TIM_PWM_Start+0x8c>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b01      	cmp	r3, #1
 800779e:	bf14      	ite	ne
 80077a0:	2301      	movne	r3, #1
 80077a2:	2300      	moveq	r3, #0
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	e008      	b.n	80077ba <HAL_TIM_PWM_Start+0x9e>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	bf14      	ite	ne
 80077b4:	2301      	movne	r3, #1
 80077b6:	2300      	moveq	r3, #0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e0a6      	b.n	8007910 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d104      	bne.n	80077d2 <HAL_TIM_PWM_Start+0xb6>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077d0:	e023      	b.n	800781a <HAL_TIM_PWM_Start+0xfe>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	d104      	bne.n	80077e2 <HAL_TIM_PWM_Start+0xc6>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077e0:	e01b      	b.n	800781a <HAL_TIM_PWM_Start+0xfe>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b08      	cmp	r3, #8
 80077e6:	d104      	bne.n	80077f2 <HAL_TIM_PWM_Start+0xd6>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077f0:	e013      	b.n	800781a <HAL_TIM_PWM_Start+0xfe>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b0c      	cmp	r3, #12
 80077f6:	d104      	bne.n	8007802 <HAL_TIM_PWM_Start+0xe6>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007800:	e00b      	b.n	800781a <HAL_TIM_PWM_Start+0xfe>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b10      	cmp	r3, #16
 8007806:	d104      	bne.n	8007812 <HAL_TIM_PWM_Start+0xf6>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007810:	e003      	b.n	800781a <HAL_TIM_PWM_Start+0xfe>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2202      	movs	r2, #2
 8007816:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2201      	movs	r2, #1
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	4618      	mov	r0, r3
 8007824:	f002 f8ec 	bl	8009a00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a3a      	ldr	r2, [pc, #232]	@ (8007918 <HAL_TIM_PWM_Start+0x1fc>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d018      	beq.n	8007864 <HAL_TIM_PWM_Start+0x148>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a39      	ldr	r2, [pc, #228]	@ (800791c <HAL_TIM_PWM_Start+0x200>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d013      	beq.n	8007864 <HAL_TIM_PWM_Start+0x148>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a37      	ldr	r2, [pc, #220]	@ (8007920 <HAL_TIM_PWM_Start+0x204>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d00e      	beq.n	8007864 <HAL_TIM_PWM_Start+0x148>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a36      	ldr	r2, [pc, #216]	@ (8007924 <HAL_TIM_PWM_Start+0x208>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d009      	beq.n	8007864 <HAL_TIM_PWM_Start+0x148>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a34      	ldr	r2, [pc, #208]	@ (8007928 <HAL_TIM_PWM_Start+0x20c>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d004      	beq.n	8007864 <HAL_TIM_PWM_Start+0x148>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a33      	ldr	r2, [pc, #204]	@ (800792c <HAL_TIM_PWM_Start+0x210>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d101      	bne.n	8007868 <HAL_TIM_PWM_Start+0x14c>
 8007864:	2301      	movs	r3, #1
 8007866:	e000      	b.n	800786a <HAL_TIM_PWM_Start+0x14e>
 8007868:	2300      	movs	r3, #0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d007      	beq.n	800787e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800787c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a25      	ldr	r2, [pc, #148]	@ (8007918 <HAL_TIM_PWM_Start+0x1fc>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d022      	beq.n	80078ce <HAL_TIM_PWM_Start+0x1b2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007890:	d01d      	beq.n	80078ce <HAL_TIM_PWM_Start+0x1b2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a26      	ldr	r2, [pc, #152]	@ (8007930 <HAL_TIM_PWM_Start+0x214>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d018      	beq.n	80078ce <HAL_TIM_PWM_Start+0x1b2>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a24      	ldr	r2, [pc, #144]	@ (8007934 <HAL_TIM_PWM_Start+0x218>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d013      	beq.n	80078ce <HAL_TIM_PWM_Start+0x1b2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a23      	ldr	r2, [pc, #140]	@ (8007938 <HAL_TIM_PWM_Start+0x21c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00e      	beq.n	80078ce <HAL_TIM_PWM_Start+0x1b2>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a19      	ldr	r2, [pc, #100]	@ (800791c <HAL_TIM_PWM_Start+0x200>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d009      	beq.n	80078ce <HAL_TIM_PWM_Start+0x1b2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a18      	ldr	r2, [pc, #96]	@ (8007920 <HAL_TIM_PWM_Start+0x204>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d004      	beq.n	80078ce <HAL_TIM_PWM_Start+0x1b2>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a18      	ldr	r2, [pc, #96]	@ (800792c <HAL_TIM_PWM_Start+0x210>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d115      	bne.n	80078fa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	4b19      	ldr	r3, [pc, #100]	@ (800793c <HAL_TIM_PWM_Start+0x220>)
 80078d6:	4013      	ands	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b06      	cmp	r3, #6
 80078de:	d015      	beq.n	800790c <HAL_TIM_PWM_Start+0x1f0>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078e6:	d011      	beq.n	800790c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 0201 	orr.w	r2, r2, #1
 80078f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f8:	e008      	b.n	800790c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f042 0201 	orr.w	r2, r2, #1
 8007908:	601a      	str	r2, [r3, #0]
 800790a:	e000      	b.n	800790e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800790c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	40012c00 	.word	0x40012c00
 800791c:	40013400 	.word	0x40013400
 8007920:	40014000 	.word	0x40014000
 8007924:	40014400 	.word	0x40014400
 8007928:	40014800 	.word	0x40014800
 800792c:	40015000 	.word	0x40015000
 8007930:	40000400 	.word	0x40000400
 8007934:	40000800 	.word	0x40000800
 8007938:	40000c00 	.word	0x40000c00
 800793c:	00010007 	.word	0x00010007

08007940 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e054      	b.n	80079fc <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d111      	bne.n	8007982 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f002 f870 	bl	8009a4c <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007970:	2b00      	cmp	r3, #0
 8007972:	d102      	bne.n	800797a <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a23      	ldr	r2, [pc, #140]	@ (8007a04 <HAL_TIM_IC_Init+0xc4>)
 8007978:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2202      	movs	r2, #2
 8007986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3304      	adds	r3, #4
 8007992:	4619      	mov	r1, r3
 8007994:	4610      	mov	r0, r2
 8007996:	f001 f9af 	bl	8008cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	08004f71 	.word	0x08004f71

08007a08 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d104      	bne.n	8007a22 <HAL_TIM_IC_Start+0x1a>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	e023      	b.n	8007a6a <HAL_TIM_IC_Start+0x62>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	d104      	bne.n	8007a32 <HAL_TIM_IC_Start+0x2a>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	e01b      	b.n	8007a6a <HAL_TIM_IC_Start+0x62>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d104      	bne.n	8007a42 <HAL_TIM_IC_Start+0x3a>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	e013      	b.n	8007a6a <HAL_TIM_IC_Start+0x62>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b0c      	cmp	r3, #12
 8007a46:	d104      	bne.n	8007a52 <HAL_TIM_IC_Start+0x4a>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	e00b      	b.n	8007a6a <HAL_TIM_IC_Start+0x62>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b10      	cmp	r3, #16
 8007a56:	d104      	bne.n	8007a62 <HAL_TIM_IC_Start+0x5a>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	e003      	b.n	8007a6a <HAL_TIM_IC_Start+0x62>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d104      	bne.n	8007a7c <HAL_TIM_IC_Start+0x74>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	e013      	b.n	8007aa4 <HAL_TIM_IC_Start+0x9c>
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d104      	bne.n	8007a8c <HAL_TIM_IC_Start+0x84>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	e00b      	b.n	8007aa4 <HAL_TIM_IC_Start+0x9c>
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2b08      	cmp	r3, #8
 8007a90:	d104      	bne.n	8007a9c <HAL_TIM_IC_Start+0x94>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	e003      	b.n	8007aa4 <HAL_TIM_IC_Start+0x9c>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d102      	bne.n	8007ab2 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d001      	beq.n	8007ab6 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e097      	b.n	8007be6 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d104      	bne.n	8007ac6 <HAL_TIM_IC_Start+0xbe>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ac4:	e023      	b.n	8007b0e <HAL_TIM_IC_Start+0x106>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d104      	bne.n	8007ad6 <HAL_TIM_IC_Start+0xce>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ad4:	e01b      	b.n	8007b0e <HAL_TIM_IC_Start+0x106>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b08      	cmp	r3, #8
 8007ada:	d104      	bne.n	8007ae6 <HAL_TIM_IC_Start+0xde>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ae4:	e013      	b.n	8007b0e <HAL_TIM_IC_Start+0x106>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b0c      	cmp	r3, #12
 8007aea:	d104      	bne.n	8007af6 <HAL_TIM_IC_Start+0xee>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007af4:	e00b      	b.n	8007b0e <HAL_TIM_IC_Start+0x106>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b10      	cmp	r3, #16
 8007afa:	d104      	bne.n	8007b06 <HAL_TIM_IC_Start+0xfe>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b04:	e003      	b.n	8007b0e <HAL_TIM_IC_Start+0x106>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d104      	bne.n	8007b1e <HAL_TIM_IC_Start+0x116>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b1c:	e013      	b.n	8007b46 <HAL_TIM_IC_Start+0x13e>
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	d104      	bne.n	8007b2e <HAL_TIM_IC_Start+0x126>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b2c:	e00b      	b.n	8007b46 <HAL_TIM_IC_Start+0x13e>
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b08      	cmp	r3, #8
 8007b32:	d104      	bne.n	8007b3e <HAL_TIM_IC_Start+0x136>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b3c:	e003      	b.n	8007b46 <HAL_TIM_IC_Start+0x13e>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2202      	movs	r2, #2
 8007b42:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 ff56 	bl	8009a00 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a25      	ldr	r2, [pc, #148]	@ (8007bf0 <HAL_TIM_IC_Start+0x1e8>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d022      	beq.n	8007ba4 <HAL_TIM_IC_Start+0x19c>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b66:	d01d      	beq.n	8007ba4 <HAL_TIM_IC_Start+0x19c>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a21      	ldr	r2, [pc, #132]	@ (8007bf4 <HAL_TIM_IC_Start+0x1ec>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d018      	beq.n	8007ba4 <HAL_TIM_IC_Start+0x19c>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a20      	ldr	r2, [pc, #128]	@ (8007bf8 <HAL_TIM_IC_Start+0x1f0>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d013      	beq.n	8007ba4 <HAL_TIM_IC_Start+0x19c>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a1e      	ldr	r2, [pc, #120]	@ (8007bfc <HAL_TIM_IC_Start+0x1f4>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d00e      	beq.n	8007ba4 <HAL_TIM_IC_Start+0x19c>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8007c00 <HAL_TIM_IC_Start+0x1f8>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d009      	beq.n	8007ba4 <HAL_TIM_IC_Start+0x19c>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a1b      	ldr	r2, [pc, #108]	@ (8007c04 <HAL_TIM_IC_Start+0x1fc>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d004      	beq.n	8007ba4 <HAL_TIM_IC_Start+0x19c>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8007c08 <HAL_TIM_IC_Start+0x200>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d115      	bne.n	8007bd0 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	4b18      	ldr	r3, [pc, #96]	@ (8007c0c <HAL_TIM_IC_Start+0x204>)
 8007bac:	4013      	ands	r3, r2
 8007bae:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b06      	cmp	r3, #6
 8007bb4:	d015      	beq.n	8007be2 <HAL_TIM_IC_Start+0x1da>
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bbc:	d011      	beq.n	8007be2 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f042 0201 	orr.w	r2, r2, #1
 8007bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bce:	e008      	b.n	8007be2 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f042 0201 	orr.w	r2, r2, #1
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	e000      	b.n	8007be4 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	40012c00 	.word	0x40012c00
 8007bf4:	40000400 	.word	0x40000400
 8007bf8:	40000800 	.word	0x40000800
 8007bfc:	40000c00 	.word	0x40000c00
 8007c00:	40013400 	.word	0x40013400
 8007c04:	40014000 	.word	0x40014000
 8007c08:	40015000 	.word	0x40015000
 8007c0c:	00010007 	.word	0x00010007

08007c10 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e04c      	b.n	8007cbe <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d111      	bne.n	8007c54 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 ff07 	bl	8009a4c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d102      	bne.n	8007c4c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc8 <HAL_TIM_OnePulse_Init+0xb8>)
 8007c4a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2202      	movs	r2, #2
 8007c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	3304      	adds	r3, #4
 8007c64:	4619      	mov	r1, r3
 8007c66:	4610      	mov	r0, r2
 8007c68:	f001 f846 	bl	8008cf8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f022 0208 	bic.w	r2, r2, #8
 8007c7a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6819      	ldr	r1, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	08007ccd 	.word	0x08007ccd

08007ccc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cf0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007cf8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d00:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d08:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d108      	bne.n	8007d22 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d105      	bne.n	8007d22 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d16:	7b7b      	ldrb	r3, [r7, #13]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d102      	bne.n	8007d22 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d1c:	7b3b      	ldrb	r3, [r7, #12]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d001      	beq.n	8007d26 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e059      	b.n	8007dda <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2202      	movs	r2, #2
 8007d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2202      	movs	r2, #2
 8007d32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2202      	movs	r2, #2
 8007d3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2202      	movs	r2, #2
 8007d42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0202 	orr.w	r2, r2, #2
 8007d54:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68da      	ldr	r2, [r3, #12]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f042 0204 	orr.w	r2, r2, #4
 8007d64:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f001 fe46 	bl	8009a00 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	2104      	movs	r1, #4
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 fe3f 	bl	8009a00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a17      	ldr	r2, [pc, #92]	@ (8007de4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d018      	beq.n	8007dbe <HAL_TIM_OnePulse_Start_IT+0xde>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a15      	ldr	r2, [pc, #84]	@ (8007de8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d013      	beq.n	8007dbe <HAL_TIM_OnePulse_Start_IT+0xde>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a14      	ldr	r2, [pc, #80]	@ (8007dec <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d00e      	beq.n	8007dbe <HAL_TIM_OnePulse_Start_IT+0xde>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a12      	ldr	r2, [pc, #72]	@ (8007df0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d009      	beq.n	8007dbe <HAL_TIM_OnePulse_Start_IT+0xde>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a11      	ldr	r2, [pc, #68]	@ (8007df4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d004      	beq.n	8007dbe <HAL_TIM_OnePulse_Start_IT+0xde>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a0f      	ldr	r2, [pc, #60]	@ (8007df8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d101      	bne.n	8007dc2 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e000      	b.n	8007dc4 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d007      	beq.n	8007dd8 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007dd6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	40012c00 	.word	0x40012c00
 8007de8:	40013400 	.word	0x40013400
 8007dec:	40014000 	.word	0x40014000
 8007df0:	40014400 	.word	0x40014400
 8007df4:	40014800 	.word	0x40014800
 8007df8:	40015000 	.word	0x40015000

08007dfc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e0a2      	b.n	8007f56 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d111      	bne.n	8007e40 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 fe11 	bl	8009a4c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d102      	bne.n	8007e38 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a4a      	ldr	r2, [pc, #296]	@ (8007f60 <HAL_TIM_Encoder_Init+0x164>)
 8007e36:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2202      	movs	r2, #2
 8007e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	6812      	ldr	r2, [r2, #0]
 8007e52:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007e56:	f023 0307 	bic.w	r3, r3, #7
 8007e5a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	f000 ff46 	bl	8008cf8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e94:	f023 0303 	bic.w	r3, r3, #3
 8007e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	689a      	ldr	r2, [r3, #8]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	021b      	lsls	r3, r3, #8
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007eb2:	f023 030c 	bic.w	r3, r3, #12
 8007eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ebe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	68da      	ldr	r2, [r3, #12]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	021b      	lsls	r3, r3, #8
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	011a      	lsls	r2, r3, #4
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	6a1b      	ldr	r3, [r3, #32]
 8007ee0:	031b      	lsls	r3, r3, #12
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007ef0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007ef8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	4313      	orrs	r3, r2
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3718      	adds	r7, #24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	08005065 	.word	0x08005065

08007f64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d110      	bne.n	8007fb6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d102      	bne.n	8007fa0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f9a:	7b7b      	ldrb	r3, [r7, #13]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d001      	beq.n	8007fa4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e069      	b.n	8008078 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fb4:	e031      	b.n	800801a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d110      	bne.n	8007fde <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d102      	bne.n	8007fc8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fc2:	7b3b      	ldrb	r3, [r7, #12]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d001      	beq.n	8007fcc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e055      	b.n	8008078 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fdc:	e01d      	b.n	800801a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d108      	bne.n	8007ff6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d105      	bne.n	8007ff6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fea:	7b7b      	ldrb	r3, [r7, #13]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d102      	bne.n	8007ff6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ff0:	7b3b      	ldrb	r3, [r7, #12]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d001      	beq.n	8007ffa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e03e      	b.n	8008078 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2202      	movs	r2, #2
 8008006:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2202      	movs	r2, #2
 800800e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2202      	movs	r2, #2
 8008016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <HAL_TIM_Encoder_Start+0xc4>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2b04      	cmp	r3, #4
 8008024:	d008      	beq.n	8008038 <HAL_TIM_Encoder_Start+0xd4>
 8008026:	e00f      	b.n	8008048 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2201      	movs	r2, #1
 800802e:	2100      	movs	r1, #0
 8008030:	4618      	mov	r0, r3
 8008032:	f001 fce5 	bl	8009a00 <TIM_CCxChannelCmd>
      break;
 8008036:	e016      	b.n	8008066 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2201      	movs	r2, #1
 800803e:	2104      	movs	r1, #4
 8008040:	4618      	mov	r0, r3
 8008042:	f001 fcdd 	bl	8009a00 <TIM_CCxChannelCmd>
      break;
 8008046:	e00e      	b.n	8008066 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2201      	movs	r2, #1
 800804e:	2100      	movs	r1, #0
 8008050:	4618      	mov	r0, r3
 8008052:	f001 fcd5 	bl	8009a00 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2201      	movs	r2, #1
 800805c:	2104      	movs	r1, #4
 800805e:	4618      	mov	r0, r3
 8008060:	f001 fcce 	bl	8009a00 <TIM_CCxChannelCmd>
      break;
 8008064:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f042 0201 	orr.w	r2, r2, #1
 8008074:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d026      	beq.n	80080f0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d021      	beq.n	80080f0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f06f 0202 	mvn.w	r2, #2
 80080b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d005      	beq.n	80080d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	4798      	blx	r3
 80080d4:	e009      	b.n	80080ea <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f003 0304 	and.w	r3, r3, #4
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d026      	beq.n	8008148 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b00      	cmp	r3, #0
 8008102:	d021      	beq.n	8008148 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f06f 0204 	mvn.w	r2, #4
 800810c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800811e:	2b00      	cmp	r3, #0
 8008120:	d005      	beq.n	800812e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
 800812c:	e009      	b.n	8008142 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f003 0308 	and.w	r3, r3, #8
 800814e:	2b00      	cmp	r3, #0
 8008150:	d026      	beq.n	80081a0 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f003 0308 	and.w	r3, r3, #8
 8008158:	2b00      	cmp	r3, #0
 800815a:	d021      	beq.n	80081a0 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f06f 0208 	mvn.w	r2, #8
 8008164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2204      	movs	r2, #4
 800816a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	f003 0303 	and.w	r3, r3, #3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d005      	beq.n	8008186 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	4798      	blx	r3
 8008184:	e009      	b.n	800819a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f003 0310 	and.w	r3, r3, #16
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d026      	beq.n	80081f8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f003 0310 	and.w	r3, r3, #16
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d021      	beq.n	80081f8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f06f 0210 	mvn.w	r2, #16
 80081bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2208      	movs	r2, #8
 80081c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d005      	beq.n	80081de <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	4798      	blx	r3
 80081dc:	e009      	b.n	80081f2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00e      	beq.n	8008220 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b00      	cmp	r3, #0
 800820a:	d009      	beq.n	8008220 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f06f 0201 	mvn.w	r2, #1
 8008214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008226:	2b00      	cmp	r3, #0
 8008228:	d104      	bne.n	8008234 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00e      	beq.n	8008252 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800823a:	2b00      	cmp	r3, #0
 800823c:	d009      	beq.n	8008252 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00e      	beq.n	800827a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008262:	2b00      	cmp	r3, #0
 8008264:	d009      	beq.n	800827a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800826e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00e      	beq.n	80082a2 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	d009      	beq.n	80082a2 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	f003 0320 	and.w	r3, r3, #32
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00e      	beq.n	80082ca <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f003 0320 	and.w	r3, r3, #32
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f06f 0220 	mvn.w	r2, #32
 80082be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00e      	beq.n	80082f2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d009      	beq.n	80082f2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80082e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00e      	beq.n	800831a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d009      	beq.n	800831a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800830e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00e      	beq.n	8008342 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800832a:	2b00      	cmp	r3, #0
 800832c:	d009      	beq.n	8008342 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00e      	beq.n	800836a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800835e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800836a:	bf00      	nop
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b086      	sub	sp, #24
 8008376:	af00      	add	r7, sp, #0
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	60b9      	str	r1, [r7, #8]
 800837c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008388:	2b01      	cmp	r3, #1
 800838a:	d101      	bne.n	8008390 <HAL_TIM_IC_ConfigChannel+0x1e>
 800838c:	2302      	movs	r3, #2
 800838e:	e088      	b.n	80084a2 <HAL_TIM_IC_ConfigChannel+0x130>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d11b      	bne.n	80083d6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80083ae:	f001 f961 	bl	8009674 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	699a      	ldr	r2, [r3, #24]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f022 020c 	bic.w	r2, r2, #12
 80083c0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6999      	ldr	r1, [r3, #24]
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	689a      	ldr	r2, [r3, #8]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	619a      	str	r2, [r3, #24]
 80083d4:	e060      	b.n	8008498 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d11c      	bne.n	8008416 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80083ec:	f001 f9e5 	bl	80097ba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699a      	ldr	r2, [r3, #24]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80083fe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6999      	ldr	r1, [r3, #24]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	021a      	lsls	r2, r3, #8
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	430a      	orrs	r2, r1
 8008412:	619a      	str	r2, [r3, #24]
 8008414:	e040      	b.n	8008498 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b08      	cmp	r3, #8
 800841a:	d11b      	bne.n	8008454 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800842c:	f001 fa32 	bl	8009894 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	69da      	ldr	r2, [r3, #28]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 020c 	bic.w	r2, r2, #12
 800843e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	69d9      	ldr	r1, [r3, #28]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	689a      	ldr	r2, [r3, #8]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	61da      	str	r2, [r3, #28]
 8008452:	e021      	b.n	8008498 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b0c      	cmp	r3, #12
 8008458:	d11c      	bne.n	8008494 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800846a:	f001 fa4f 	bl	800990c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	69da      	ldr	r2, [r3, #28]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800847c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	69d9      	ldr	r1, [r3, #28]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	021a      	lsls	r2, r3, #8
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	430a      	orrs	r2, r1
 8008490:	61da      	str	r2, [r3, #28]
 8008492:	e001      	b.n	8008498 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d101      	bne.n	80084ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084c6:	2302      	movs	r3, #2
 80084c8:	e0ff      	b.n	80086ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b14      	cmp	r3, #20
 80084d6:	f200 80f0 	bhi.w	80086ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80084da:	a201      	add	r2, pc, #4	@ (adr r2, 80084e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e0:	08008535 	.word	0x08008535
 80084e4:	080086bb 	.word	0x080086bb
 80084e8:	080086bb 	.word	0x080086bb
 80084ec:	080086bb 	.word	0x080086bb
 80084f0:	08008575 	.word	0x08008575
 80084f4:	080086bb 	.word	0x080086bb
 80084f8:	080086bb 	.word	0x080086bb
 80084fc:	080086bb 	.word	0x080086bb
 8008500:	080085b7 	.word	0x080085b7
 8008504:	080086bb 	.word	0x080086bb
 8008508:	080086bb 	.word	0x080086bb
 800850c:	080086bb 	.word	0x080086bb
 8008510:	080085f7 	.word	0x080085f7
 8008514:	080086bb 	.word	0x080086bb
 8008518:	080086bb 	.word	0x080086bb
 800851c:	080086bb 	.word	0x080086bb
 8008520:	08008639 	.word	0x08008639
 8008524:	080086bb 	.word	0x080086bb
 8008528:	080086bb 	.word	0x080086bb
 800852c:	080086bb 	.word	0x080086bb
 8008530:	08008679 	.word	0x08008679
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68b9      	ldr	r1, [r7, #8]
 800853a:	4618      	mov	r0, r3
 800853c:	f000 fc90 	bl	8008e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f042 0208 	orr.w	r2, r2, #8
 800854e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	699a      	ldr	r2, [r3, #24]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f022 0204 	bic.w	r2, r2, #4
 800855e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6999      	ldr	r1, [r3, #24]
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	691a      	ldr	r2, [r3, #16]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	619a      	str	r2, [r3, #24]
      break;
 8008572:	e0a5      	b.n	80086c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68b9      	ldr	r1, [r7, #8]
 800857a:	4618      	mov	r0, r3
 800857c:	f000 fd0a 	bl	8008f94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699a      	ldr	r2, [r3, #24]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800858e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	699a      	ldr	r2, [r3, #24]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800859e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6999      	ldr	r1, [r3, #24]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	021a      	lsls	r2, r3, #8
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	619a      	str	r2, [r3, #24]
      break;
 80085b4:	e084      	b.n	80086c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68b9      	ldr	r1, [r7, #8]
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 fd7d 	bl	80090bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69da      	ldr	r2, [r3, #28]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f042 0208 	orr.w	r2, r2, #8
 80085d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	69da      	ldr	r2, [r3, #28]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f022 0204 	bic.w	r2, r2, #4
 80085e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	69d9      	ldr	r1, [r3, #28]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	691a      	ldr	r2, [r3, #16]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	430a      	orrs	r2, r1
 80085f2:	61da      	str	r2, [r3, #28]
      break;
 80085f4:	e064      	b.n	80086c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68b9      	ldr	r1, [r7, #8]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 fdef 	bl	80091e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69da      	ldr	r2, [r3, #28]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69da      	ldr	r2, [r3, #28]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69d9      	ldr	r1, [r3, #28]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	021a      	lsls	r2, r3, #8
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	430a      	orrs	r2, r1
 8008634:	61da      	str	r2, [r3, #28]
      break;
 8008636:	e043      	b.n	80086c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	4618      	mov	r0, r3
 8008640:	f000 fe62 	bl	8009308 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f042 0208 	orr.w	r2, r2, #8
 8008652:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 0204 	bic.w	r2, r2, #4
 8008662:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	691a      	ldr	r2, [r3, #16]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	430a      	orrs	r2, r1
 8008674:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008676:	e023      	b.n	80086c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68b9      	ldr	r1, [r7, #8]
 800867e:	4618      	mov	r0, r3
 8008680:	f000 feac 	bl	80093dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008692:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086a2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	021a      	lsls	r2, r3, #8
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	430a      	orrs	r2, r1
 80086b6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80086b8:	e002      	b.n	80086c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	75fb      	strb	r3, [r7, #23]
      break;
 80086be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80086c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop

080086d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d101      	bne.n	80086f0 <HAL_TIM_ConfigClockSource+0x1c>
 80086ec:	2302      	movs	r3, #2
 80086ee:	e0f6      	b.n	80088de <HAL_TIM_ConfigClockSource+0x20a>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2202      	movs	r2, #2
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800870e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800871a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a6f      	ldr	r2, [pc, #444]	@ (80088e8 <HAL_TIM_ConfigClockSource+0x214>)
 800872a:	4293      	cmp	r3, r2
 800872c:	f000 80c1 	beq.w	80088b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008730:	4a6d      	ldr	r2, [pc, #436]	@ (80088e8 <HAL_TIM_ConfigClockSource+0x214>)
 8008732:	4293      	cmp	r3, r2
 8008734:	f200 80c6 	bhi.w	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008738:	4a6c      	ldr	r2, [pc, #432]	@ (80088ec <HAL_TIM_ConfigClockSource+0x218>)
 800873a:	4293      	cmp	r3, r2
 800873c:	f000 80b9 	beq.w	80088b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008740:	4a6a      	ldr	r2, [pc, #424]	@ (80088ec <HAL_TIM_ConfigClockSource+0x218>)
 8008742:	4293      	cmp	r3, r2
 8008744:	f200 80be 	bhi.w	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008748:	4a69      	ldr	r2, [pc, #420]	@ (80088f0 <HAL_TIM_ConfigClockSource+0x21c>)
 800874a:	4293      	cmp	r3, r2
 800874c:	f000 80b1 	beq.w	80088b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008750:	4a67      	ldr	r2, [pc, #412]	@ (80088f0 <HAL_TIM_ConfigClockSource+0x21c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	f200 80b6 	bhi.w	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008758:	4a66      	ldr	r2, [pc, #408]	@ (80088f4 <HAL_TIM_ConfigClockSource+0x220>)
 800875a:	4293      	cmp	r3, r2
 800875c:	f000 80a9 	beq.w	80088b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008760:	4a64      	ldr	r2, [pc, #400]	@ (80088f4 <HAL_TIM_ConfigClockSource+0x220>)
 8008762:	4293      	cmp	r3, r2
 8008764:	f200 80ae 	bhi.w	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008768:	4a63      	ldr	r2, [pc, #396]	@ (80088f8 <HAL_TIM_ConfigClockSource+0x224>)
 800876a:	4293      	cmp	r3, r2
 800876c:	f000 80a1 	beq.w	80088b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008770:	4a61      	ldr	r2, [pc, #388]	@ (80088f8 <HAL_TIM_ConfigClockSource+0x224>)
 8008772:	4293      	cmp	r3, r2
 8008774:	f200 80a6 	bhi.w	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008778:	4a60      	ldr	r2, [pc, #384]	@ (80088fc <HAL_TIM_ConfigClockSource+0x228>)
 800877a:	4293      	cmp	r3, r2
 800877c:	f000 8099 	beq.w	80088b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008780:	4a5e      	ldr	r2, [pc, #376]	@ (80088fc <HAL_TIM_ConfigClockSource+0x228>)
 8008782:	4293      	cmp	r3, r2
 8008784:	f200 809e 	bhi.w	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008788:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800878c:	f000 8091 	beq.w	80088b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008790:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008794:	f200 8096 	bhi.w	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008798:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800879c:	f000 8089 	beq.w	80088b2 <HAL_TIM_ConfigClockSource+0x1de>
 80087a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087a4:	f200 808e 	bhi.w	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80087a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ac:	d03e      	beq.n	800882c <HAL_TIM_ConfigClockSource+0x158>
 80087ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087b2:	f200 8087 	bhi.w	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80087b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ba:	f000 8086 	beq.w	80088ca <HAL_TIM_ConfigClockSource+0x1f6>
 80087be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087c2:	d87f      	bhi.n	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80087c4:	2b70      	cmp	r3, #112	@ 0x70
 80087c6:	d01a      	beq.n	80087fe <HAL_TIM_ConfigClockSource+0x12a>
 80087c8:	2b70      	cmp	r3, #112	@ 0x70
 80087ca:	d87b      	bhi.n	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80087cc:	2b60      	cmp	r3, #96	@ 0x60
 80087ce:	d050      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x19e>
 80087d0:	2b60      	cmp	r3, #96	@ 0x60
 80087d2:	d877      	bhi.n	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80087d4:	2b50      	cmp	r3, #80	@ 0x50
 80087d6:	d03c      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0x17e>
 80087d8:	2b50      	cmp	r3, #80	@ 0x50
 80087da:	d873      	bhi.n	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80087dc:	2b40      	cmp	r3, #64	@ 0x40
 80087de:	d058      	beq.n	8008892 <HAL_TIM_ConfigClockSource+0x1be>
 80087e0:	2b40      	cmp	r3, #64	@ 0x40
 80087e2:	d86f      	bhi.n	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80087e4:	2b30      	cmp	r3, #48	@ 0x30
 80087e6:	d064      	beq.n	80088b2 <HAL_TIM_ConfigClockSource+0x1de>
 80087e8:	2b30      	cmp	r3, #48	@ 0x30
 80087ea:	d86b      	bhi.n	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80087ec:	2b20      	cmp	r3, #32
 80087ee:	d060      	beq.n	80088b2 <HAL_TIM_ConfigClockSource+0x1de>
 80087f0:	2b20      	cmp	r3, #32
 80087f2:	d867      	bhi.n	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d05c      	beq.n	80088b2 <HAL_TIM_ConfigClockSource+0x1de>
 80087f8:	2b10      	cmp	r3, #16
 80087fa:	d05a      	beq.n	80088b2 <HAL_TIM_ConfigClockSource+0x1de>
 80087fc:	e062      	b.n	80088c4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800880e:	f001 f8d7 	bl	80099c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	609a      	str	r2, [r3, #8]
      break;
 800882a:	e04f      	b.n	80088cc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800883c:	f001 f8c0 	bl	80099c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689a      	ldr	r2, [r3, #8]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800884e:	609a      	str	r2, [r3, #8]
      break;
 8008850:	e03c      	b.n	80088cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800885e:	461a      	mov	r2, r3
 8008860:	f000 ff7c 	bl	800975c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2150      	movs	r1, #80	@ 0x50
 800886a:	4618      	mov	r0, r3
 800886c:	f001 f88b 	bl	8009986 <TIM_ITRx_SetConfig>
      break;
 8008870:	e02c      	b.n	80088cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800887e:	461a      	mov	r2, r3
 8008880:	f000 ffd8 	bl	8009834 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2160      	movs	r1, #96	@ 0x60
 800888a:	4618      	mov	r0, r3
 800888c:	f001 f87b 	bl	8009986 <TIM_ITRx_SetConfig>
      break;
 8008890:	e01c      	b.n	80088cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800889e:	461a      	mov	r2, r3
 80088a0:	f000 ff5c 	bl	800975c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2140      	movs	r1, #64	@ 0x40
 80088aa:	4618      	mov	r0, r3
 80088ac:	f001 f86b 	bl	8009986 <TIM_ITRx_SetConfig>
      break;
 80088b0:	e00c      	b.n	80088cc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4619      	mov	r1, r3
 80088bc:	4610      	mov	r0, r2
 80088be:	f001 f862 	bl	8009986 <TIM_ITRx_SetConfig>
      break;
 80088c2:	e003      	b.n	80088cc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	73fb      	strb	r3, [r7, #15]
      break;
 80088c8:	e000      	b.n	80088cc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80088ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	00100070 	.word	0x00100070
 80088ec:	00100060 	.word	0x00100060
 80088f0:	00100050 	.word	0x00100050
 80088f4:	00100040 	.word	0x00100040
 80088f8:	00100030 	.word	0x00100030
 80088fc:	00100020 	.word	0x00100020

08008900 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008910:	2b01      	cmp	r3, #1
 8008912:	d101      	bne.n	8008918 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008914:	2302      	movs	r3, #2
 8008916:	e031      	b.n	800897c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2202      	movs	r2, #2
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fdc2 	bl	80094b4 <TIM_SlaveTimer_SetConfig>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d009      	beq.n	800894a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e018      	b.n	800897c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68da      	ldr	r2, [r3, #12]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008958:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68da      	ldr	r2, [r3, #12]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008968:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b087      	sub	sp, #28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	460b      	mov	r3, r1
 8008a42:	607a      	str	r2, [r7, #4]
 8008a44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e14a      	b.n	8008cea <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	f040 80dd 	bne.w	8008c1c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008a62:	7afb      	ldrb	r3, [r7, #11]
 8008a64:	2b1f      	cmp	r3, #31
 8008a66:	f200 80d6 	bhi.w	8008c16 <HAL_TIM_RegisterCallback+0x1de>
 8008a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a70 <HAL_TIM_RegisterCallback+0x38>)
 8008a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a70:	08008af1 	.word	0x08008af1
 8008a74:	08008af9 	.word	0x08008af9
 8008a78:	08008b01 	.word	0x08008b01
 8008a7c:	08008b09 	.word	0x08008b09
 8008a80:	08008b11 	.word	0x08008b11
 8008a84:	08008b19 	.word	0x08008b19
 8008a88:	08008b21 	.word	0x08008b21
 8008a8c:	08008b29 	.word	0x08008b29
 8008a90:	08008b31 	.word	0x08008b31
 8008a94:	08008b39 	.word	0x08008b39
 8008a98:	08008b41 	.word	0x08008b41
 8008a9c:	08008b49 	.word	0x08008b49
 8008aa0:	08008b51 	.word	0x08008b51
 8008aa4:	08008b59 	.word	0x08008b59
 8008aa8:	08008b63 	.word	0x08008b63
 8008aac:	08008b6d 	.word	0x08008b6d
 8008ab0:	08008b77 	.word	0x08008b77
 8008ab4:	08008b81 	.word	0x08008b81
 8008ab8:	08008b8b 	.word	0x08008b8b
 8008abc:	08008b95 	.word	0x08008b95
 8008ac0:	08008b9f 	.word	0x08008b9f
 8008ac4:	08008ba9 	.word	0x08008ba9
 8008ac8:	08008bb3 	.word	0x08008bb3
 8008acc:	08008bbd 	.word	0x08008bbd
 8008ad0:	08008bc7 	.word	0x08008bc7
 8008ad4:	08008bd1 	.word	0x08008bd1
 8008ad8:	08008bdb 	.word	0x08008bdb
 8008adc:	08008be5 	.word	0x08008be5
 8008ae0:	08008bef 	.word	0x08008bef
 8008ae4:	08008bf9 	.word	0x08008bf9
 8008ae8:	08008c03 	.word	0x08008c03
 8008aec:	08008c0d 	.word	0x08008c0d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008af6:	e0f7      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008afe:	e0f3      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008b06:	e0ef      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008b0e:	e0eb      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008b16:	e0e7      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008b1e:	e0e3      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008b26:	e0df      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008b2e:	e0db      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008b36:	e0d7      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008b3e:	e0d3      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008b46:	e0cf      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008b4e:	e0cb      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008b56:	e0c7      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008b60:	e0c2      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008b6a:	e0bd      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008b74:	e0b8      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008b7e:	e0b3      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008b88:	e0ae      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008b92:	e0a9      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008b9c:	e0a4      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008ba6:	e09f      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008bb0:	e09a      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008bba:	e095      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008bc4:	e090      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008bce:	e08b      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008bd8:	e086      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008be2:	e081      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008bec:	e07c      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008bf6:	e077      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008c00:	e072      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008c0a:	e06d      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008c14:	e068      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	75fb      	strb	r3, [r7, #23]
        break;
 8008c1a:	e065      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d15d      	bne.n	8008ce4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008c28:	7afb      	ldrb	r3, [r7, #11]
 8008c2a:	2b0d      	cmp	r3, #13
 8008c2c:	d857      	bhi.n	8008cde <HAL_TIM_RegisterCallback+0x2a6>
 8008c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c34 <HAL_TIM_RegisterCallback+0x1fc>)
 8008c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c34:	08008c6d 	.word	0x08008c6d
 8008c38:	08008c75 	.word	0x08008c75
 8008c3c:	08008c7d 	.word	0x08008c7d
 8008c40:	08008c85 	.word	0x08008c85
 8008c44:	08008c8d 	.word	0x08008c8d
 8008c48:	08008c95 	.word	0x08008c95
 8008c4c:	08008c9d 	.word	0x08008c9d
 8008c50:	08008ca5 	.word	0x08008ca5
 8008c54:	08008cad 	.word	0x08008cad
 8008c58:	08008cb5 	.word	0x08008cb5
 8008c5c:	08008cbd 	.word	0x08008cbd
 8008c60:	08008cc5 	.word	0x08008cc5
 8008c64:	08008ccd 	.word	0x08008ccd
 8008c68:	08008cd5 	.word	0x08008cd5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008c72:	e039      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008c7a:	e035      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008c82:	e031      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008c8a:	e02d      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008c92:	e029      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008c9a:	e025      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008ca2:	e021      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008caa:	e01d      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008cb2:	e019      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008cba:	e015      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008cc2:	e011      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008cca:	e00d      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008cd2:	e009      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008cdc:	e004      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	75fb      	strb	r3, [r7, #23]
        break;
 8008ce2:	e001      	b.n	8008ce8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop

08008cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a4c      	ldr	r2, [pc, #304]	@ (8008e3c <TIM_Base_SetConfig+0x144>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d017      	beq.n	8008d40 <TIM_Base_SetConfig+0x48>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d16:	d013      	beq.n	8008d40 <TIM_Base_SetConfig+0x48>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a49      	ldr	r2, [pc, #292]	@ (8008e40 <TIM_Base_SetConfig+0x148>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d00f      	beq.n	8008d40 <TIM_Base_SetConfig+0x48>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a48      	ldr	r2, [pc, #288]	@ (8008e44 <TIM_Base_SetConfig+0x14c>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d00b      	beq.n	8008d40 <TIM_Base_SetConfig+0x48>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a47      	ldr	r2, [pc, #284]	@ (8008e48 <TIM_Base_SetConfig+0x150>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d007      	beq.n	8008d40 <TIM_Base_SetConfig+0x48>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a46      	ldr	r2, [pc, #280]	@ (8008e4c <TIM_Base_SetConfig+0x154>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d003      	beq.n	8008d40 <TIM_Base_SetConfig+0x48>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a45      	ldr	r2, [pc, #276]	@ (8008e50 <TIM_Base_SetConfig+0x158>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d108      	bne.n	8008d52 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a39      	ldr	r2, [pc, #228]	@ (8008e3c <TIM_Base_SetConfig+0x144>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d023      	beq.n	8008da2 <TIM_Base_SetConfig+0xaa>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d60:	d01f      	beq.n	8008da2 <TIM_Base_SetConfig+0xaa>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a36      	ldr	r2, [pc, #216]	@ (8008e40 <TIM_Base_SetConfig+0x148>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d01b      	beq.n	8008da2 <TIM_Base_SetConfig+0xaa>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a35      	ldr	r2, [pc, #212]	@ (8008e44 <TIM_Base_SetConfig+0x14c>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d017      	beq.n	8008da2 <TIM_Base_SetConfig+0xaa>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a34      	ldr	r2, [pc, #208]	@ (8008e48 <TIM_Base_SetConfig+0x150>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d013      	beq.n	8008da2 <TIM_Base_SetConfig+0xaa>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a33      	ldr	r2, [pc, #204]	@ (8008e4c <TIM_Base_SetConfig+0x154>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d00f      	beq.n	8008da2 <TIM_Base_SetConfig+0xaa>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a33      	ldr	r2, [pc, #204]	@ (8008e54 <TIM_Base_SetConfig+0x15c>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d00b      	beq.n	8008da2 <TIM_Base_SetConfig+0xaa>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a32      	ldr	r2, [pc, #200]	@ (8008e58 <TIM_Base_SetConfig+0x160>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d007      	beq.n	8008da2 <TIM_Base_SetConfig+0xaa>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a31      	ldr	r2, [pc, #196]	@ (8008e5c <TIM_Base_SetConfig+0x164>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d003      	beq.n	8008da2 <TIM_Base_SetConfig+0xaa>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a2c      	ldr	r2, [pc, #176]	@ (8008e50 <TIM_Base_SetConfig+0x158>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d108      	bne.n	8008db4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	689a      	ldr	r2, [r3, #8]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a18      	ldr	r2, [pc, #96]	@ (8008e3c <TIM_Base_SetConfig+0x144>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d013      	beq.n	8008e08 <TIM_Base_SetConfig+0x110>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a1a      	ldr	r2, [pc, #104]	@ (8008e4c <TIM_Base_SetConfig+0x154>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d00f      	beq.n	8008e08 <TIM_Base_SetConfig+0x110>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a1a      	ldr	r2, [pc, #104]	@ (8008e54 <TIM_Base_SetConfig+0x15c>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d00b      	beq.n	8008e08 <TIM_Base_SetConfig+0x110>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a19      	ldr	r2, [pc, #100]	@ (8008e58 <TIM_Base_SetConfig+0x160>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d007      	beq.n	8008e08 <TIM_Base_SetConfig+0x110>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a18      	ldr	r2, [pc, #96]	@ (8008e5c <TIM_Base_SetConfig+0x164>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d003      	beq.n	8008e08 <TIM_Base_SetConfig+0x110>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a13      	ldr	r2, [pc, #76]	@ (8008e50 <TIM_Base_SetConfig+0x158>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d103      	bne.n	8008e10 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	691a      	ldr	r2, [r3, #16]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d105      	bne.n	8008e2e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	f023 0201 	bic.w	r2, r3, #1
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	611a      	str	r2, [r3, #16]
  }
}
 8008e2e:	bf00      	nop
 8008e30:	3714      	adds	r7, #20
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	40012c00 	.word	0x40012c00
 8008e40:	40000400 	.word	0x40000400
 8008e44:	40000800 	.word	0x40000800
 8008e48:	40000c00 	.word	0x40000c00
 8008e4c:	40013400 	.word	0x40013400
 8008e50:	40015000 	.word	0x40015000
 8008e54:	40014000 	.word	0x40014000
 8008e58:	40014400 	.word	0x40014400
 8008e5c:	40014800 	.word	0x40014800

08008e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a1b      	ldr	r3, [r3, #32]
 8008e74:	f023 0201 	bic.w	r2, r3, #1
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f023 0303 	bic.w	r3, r3, #3
 8008e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f023 0302 	bic.w	r3, r3, #2
 8008eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a30      	ldr	r2, [pc, #192]	@ (8008f7c <TIM_OC1_SetConfig+0x11c>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d013      	beq.n	8008ee8 <TIM_OC1_SetConfig+0x88>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8008f80 <TIM_OC1_SetConfig+0x120>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d00f      	beq.n	8008ee8 <TIM_OC1_SetConfig+0x88>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a2e      	ldr	r2, [pc, #184]	@ (8008f84 <TIM_OC1_SetConfig+0x124>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d00b      	beq.n	8008ee8 <TIM_OC1_SetConfig+0x88>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a2d      	ldr	r2, [pc, #180]	@ (8008f88 <TIM_OC1_SetConfig+0x128>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d007      	beq.n	8008ee8 <TIM_OC1_SetConfig+0x88>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a2c      	ldr	r2, [pc, #176]	@ (8008f8c <TIM_OC1_SetConfig+0x12c>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d003      	beq.n	8008ee8 <TIM_OC1_SetConfig+0x88>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a2b      	ldr	r2, [pc, #172]	@ (8008f90 <TIM_OC1_SetConfig+0x130>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d10c      	bne.n	8008f02 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	f023 0308 	bic.w	r3, r3, #8
 8008eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f023 0304 	bic.w	r3, r3, #4
 8008f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a1d      	ldr	r2, [pc, #116]	@ (8008f7c <TIM_OC1_SetConfig+0x11c>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d013      	beq.n	8008f32 <TIM_OC1_SetConfig+0xd2>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8008f80 <TIM_OC1_SetConfig+0x120>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d00f      	beq.n	8008f32 <TIM_OC1_SetConfig+0xd2>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a1b      	ldr	r2, [pc, #108]	@ (8008f84 <TIM_OC1_SetConfig+0x124>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d00b      	beq.n	8008f32 <TIM_OC1_SetConfig+0xd2>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8008f88 <TIM_OC1_SetConfig+0x128>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d007      	beq.n	8008f32 <TIM_OC1_SetConfig+0xd2>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a19      	ldr	r2, [pc, #100]	@ (8008f8c <TIM_OC1_SetConfig+0x12c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d003      	beq.n	8008f32 <TIM_OC1_SetConfig+0xd2>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a18      	ldr	r2, [pc, #96]	@ (8008f90 <TIM_OC1_SetConfig+0x130>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d111      	bne.n	8008f56 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	621a      	str	r2, [r3, #32]
}
 8008f70:	bf00      	nop
 8008f72:	371c      	adds	r7, #28
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	40012c00 	.word	0x40012c00
 8008f80:	40013400 	.word	0x40013400
 8008f84:	40014000 	.word	0x40014000
 8008f88:	40014400 	.word	0x40014400
 8008f8c:	40014800 	.word	0x40014800
 8008f90:	40015000 	.word	0x40015000

08008f94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a1b      	ldr	r3, [r3, #32]
 8008fa8:	f023 0210 	bic.w	r2, r3, #16
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008fc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	021b      	lsls	r3, r3, #8
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	f023 0320 	bic.w	r3, r3, #32
 8008fe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	011b      	lsls	r3, r3, #4
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a2c      	ldr	r2, [pc, #176]	@ (80090a4 <TIM_OC2_SetConfig+0x110>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d007      	beq.n	8009008 <TIM_OC2_SetConfig+0x74>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a2b      	ldr	r2, [pc, #172]	@ (80090a8 <TIM_OC2_SetConfig+0x114>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d003      	beq.n	8009008 <TIM_OC2_SetConfig+0x74>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a2a      	ldr	r2, [pc, #168]	@ (80090ac <TIM_OC2_SetConfig+0x118>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d10d      	bne.n	8009024 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800900e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	011b      	lsls	r3, r3, #4
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	4313      	orrs	r3, r2
 800901a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009022:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a1f      	ldr	r2, [pc, #124]	@ (80090a4 <TIM_OC2_SetConfig+0x110>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d013      	beq.n	8009054 <TIM_OC2_SetConfig+0xc0>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a1e      	ldr	r2, [pc, #120]	@ (80090a8 <TIM_OC2_SetConfig+0x114>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d00f      	beq.n	8009054 <TIM_OC2_SetConfig+0xc0>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a1e      	ldr	r2, [pc, #120]	@ (80090b0 <TIM_OC2_SetConfig+0x11c>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d00b      	beq.n	8009054 <TIM_OC2_SetConfig+0xc0>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a1d      	ldr	r2, [pc, #116]	@ (80090b4 <TIM_OC2_SetConfig+0x120>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d007      	beq.n	8009054 <TIM_OC2_SetConfig+0xc0>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a1c      	ldr	r2, [pc, #112]	@ (80090b8 <TIM_OC2_SetConfig+0x124>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d003      	beq.n	8009054 <TIM_OC2_SetConfig+0xc0>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a17      	ldr	r2, [pc, #92]	@ (80090ac <TIM_OC2_SetConfig+0x118>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d113      	bne.n	800907c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800905a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009062:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	4313      	orrs	r3, r2
 800906e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	4313      	orrs	r3, r2
 800907a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	621a      	str	r2, [r3, #32]
}
 8009096:	bf00      	nop
 8009098:	371c      	adds	r7, #28
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	40012c00 	.word	0x40012c00
 80090a8:	40013400 	.word	0x40013400
 80090ac:	40015000 	.word	0x40015000
 80090b0:	40014000 	.word	0x40014000
 80090b4:	40014400 	.word	0x40014400
 80090b8:	40014800 	.word	0x40014800

080090bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 0303 	bic.w	r3, r3, #3
 80090f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	4313      	orrs	r3, r2
 8009100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	021b      	lsls	r3, r3, #8
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	4313      	orrs	r3, r2
 8009114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a2b      	ldr	r2, [pc, #172]	@ (80091c8 <TIM_OC3_SetConfig+0x10c>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d007      	beq.n	800912e <TIM_OC3_SetConfig+0x72>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a2a      	ldr	r2, [pc, #168]	@ (80091cc <TIM_OC3_SetConfig+0x110>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d003      	beq.n	800912e <TIM_OC3_SetConfig+0x72>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a29      	ldr	r2, [pc, #164]	@ (80091d0 <TIM_OC3_SetConfig+0x114>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d10d      	bne.n	800914a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	021b      	lsls	r3, r3, #8
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	4313      	orrs	r3, r2
 8009140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a1e      	ldr	r2, [pc, #120]	@ (80091c8 <TIM_OC3_SetConfig+0x10c>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d013      	beq.n	800917a <TIM_OC3_SetConfig+0xbe>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a1d      	ldr	r2, [pc, #116]	@ (80091cc <TIM_OC3_SetConfig+0x110>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d00f      	beq.n	800917a <TIM_OC3_SetConfig+0xbe>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a1d      	ldr	r2, [pc, #116]	@ (80091d4 <TIM_OC3_SetConfig+0x118>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d00b      	beq.n	800917a <TIM_OC3_SetConfig+0xbe>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a1c      	ldr	r2, [pc, #112]	@ (80091d8 <TIM_OC3_SetConfig+0x11c>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d007      	beq.n	800917a <TIM_OC3_SetConfig+0xbe>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a1b      	ldr	r2, [pc, #108]	@ (80091dc <TIM_OC3_SetConfig+0x120>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d003      	beq.n	800917a <TIM_OC3_SetConfig+0xbe>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a16      	ldr	r2, [pc, #88]	@ (80091d0 <TIM_OC3_SetConfig+0x114>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d113      	bne.n	80091a2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	4313      	orrs	r3, r2
 8009194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	011b      	lsls	r3, r3, #4
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	4313      	orrs	r3, r2
 80091a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	621a      	str	r2, [r3, #32]
}
 80091bc:	bf00      	nop
 80091be:	371c      	adds	r7, #28
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr
 80091c8:	40012c00 	.word	0x40012c00
 80091cc:	40013400 	.word	0x40013400
 80091d0:	40015000 	.word	0x40015000
 80091d4:	40014000 	.word	0x40014000
 80091d8:	40014400 	.word	0x40014400
 80091dc:	40014800 	.word	0x40014800

080091e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b087      	sub	sp, #28
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a1b      	ldr	r3, [r3, #32]
 80091f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800920e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800921a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	021b      	lsls	r3, r3, #8
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	4313      	orrs	r3, r2
 8009226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800922e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	031b      	lsls	r3, r3, #12
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	4313      	orrs	r3, r2
 800923a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a2c      	ldr	r2, [pc, #176]	@ (80092f0 <TIM_OC4_SetConfig+0x110>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d007      	beq.n	8009254 <TIM_OC4_SetConfig+0x74>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a2b      	ldr	r2, [pc, #172]	@ (80092f4 <TIM_OC4_SetConfig+0x114>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d003      	beq.n	8009254 <TIM_OC4_SetConfig+0x74>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a2a      	ldr	r2, [pc, #168]	@ (80092f8 <TIM_OC4_SetConfig+0x118>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d10d      	bne.n	8009270 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800925a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	031b      	lsls	r3, r3, #12
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	4313      	orrs	r3, r2
 8009266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800926e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a1f      	ldr	r2, [pc, #124]	@ (80092f0 <TIM_OC4_SetConfig+0x110>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d013      	beq.n	80092a0 <TIM_OC4_SetConfig+0xc0>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a1e      	ldr	r2, [pc, #120]	@ (80092f4 <TIM_OC4_SetConfig+0x114>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d00f      	beq.n	80092a0 <TIM_OC4_SetConfig+0xc0>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a1e      	ldr	r2, [pc, #120]	@ (80092fc <TIM_OC4_SetConfig+0x11c>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d00b      	beq.n	80092a0 <TIM_OC4_SetConfig+0xc0>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a1d      	ldr	r2, [pc, #116]	@ (8009300 <TIM_OC4_SetConfig+0x120>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d007      	beq.n	80092a0 <TIM_OC4_SetConfig+0xc0>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a1c      	ldr	r2, [pc, #112]	@ (8009304 <TIM_OC4_SetConfig+0x124>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d003      	beq.n	80092a0 <TIM_OC4_SetConfig+0xc0>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a17      	ldr	r2, [pc, #92]	@ (80092f8 <TIM_OC4_SetConfig+0x118>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d113      	bne.n	80092c8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80092ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	695b      	ldr	r3, [r3, #20]
 80092b4:	019b      	lsls	r3, r3, #6
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	019b      	lsls	r3, r3, #6
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	621a      	str	r2, [r3, #32]
}
 80092e2:	bf00      	nop
 80092e4:	371c      	adds	r7, #28
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	40012c00 	.word	0x40012c00
 80092f4:	40013400 	.word	0x40013400
 80092f8:	40015000 	.word	0x40015000
 80092fc:	40014000 	.word	0x40014000
 8009300:	40014400 	.word	0x40014400
 8009304:	40014800 	.word	0x40014800

08009308 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009308:	b480      	push	{r7}
 800930a:	b087      	sub	sp, #28
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a1b      	ldr	r3, [r3, #32]
 800931c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800932e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800933a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	4313      	orrs	r3, r2
 8009344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800934c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	041b      	lsls	r3, r3, #16
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	4313      	orrs	r3, r2
 8009358:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a19      	ldr	r2, [pc, #100]	@ (80093c4 <TIM_OC5_SetConfig+0xbc>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d013      	beq.n	800938a <TIM_OC5_SetConfig+0x82>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a18      	ldr	r2, [pc, #96]	@ (80093c8 <TIM_OC5_SetConfig+0xc0>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d00f      	beq.n	800938a <TIM_OC5_SetConfig+0x82>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a17      	ldr	r2, [pc, #92]	@ (80093cc <TIM_OC5_SetConfig+0xc4>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d00b      	beq.n	800938a <TIM_OC5_SetConfig+0x82>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a16      	ldr	r2, [pc, #88]	@ (80093d0 <TIM_OC5_SetConfig+0xc8>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d007      	beq.n	800938a <TIM_OC5_SetConfig+0x82>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a15      	ldr	r2, [pc, #84]	@ (80093d4 <TIM_OC5_SetConfig+0xcc>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d003      	beq.n	800938a <TIM_OC5_SetConfig+0x82>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a14      	ldr	r2, [pc, #80]	@ (80093d8 <TIM_OC5_SetConfig+0xd0>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d109      	bne.n	800939e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009390:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	695b      	ldr	r3, [r3, #20]
 8009396:	021b      	lsls	r3, r3, #8
 8009398:	697a      	ldr	r2, [r7, #20]
 800939a:	4313      	orrs	r3, r2
 800939c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	693a      	ldr	r2, [r7, #16]
 80093b6:	621a      	str	r2, [r3, #32]
}
 80093b8:	bf00      	nop
 80093ba:	371c      	adds	r7, #28
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	40012c00 	.word	0x40012c00
 80093c8:	40013400 	.word	0x40013400
 80093cc:	40014000 	.word	0x40014000
 80093d0:	40014400 	.word	0x40014400
 80093d4:	40014800 	.word	0x40014800
 80093d8:	40015000 	.word	0x40015000

080093dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80093dc:	b480      	push	{r7}
 80093de:	b087      	sub	sp, #28
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a1b      	ldr	r3, [r3, #32]
 80093ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6a1b      	ldr	r3, [r3, #32]
 80093f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800940a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800940e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	021b      	lsls	r3, r3, #8
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	4313      	orrs	r3, r2
 800941a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	051b      	lsls	r3, r3, #20
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	4313      	orrs	r3, r2
 800942e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a1a      	ldr	r2, [pc, #104]	@ (800949c <TIM_OC6_SetConfig+0xc0>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d013      	beq.n	8009460 <TIM_OC6_SetConfig+0x84>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a19      	ldr	r2, [pc, #100]	@ (80094a0 <TIM_OC6_SetConfig+0xc4>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d00f      	beq.n	8009460 <TIM_OC6_SetConfig+0x84>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a18      	ldr	r2, [pc, #96]	@ (80094a4 <TIM_OC6_SetConfig+0xc8>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d00b      	beq.n	8009460 <TIM_OC6_SetConfig+0x84>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a17      	ldr	r2, [pc, #92]	@ (80094a8 <TIM_OC6_SetConfig+0xcc>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d007      	beq.n	8009460 <TIM_OC6_SetConfig+0x84>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a16      	ldr	r2, [pc, #88]	@ (80094ac <TIM_OC6_SetConfig+0xd0>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d003      	beq.n	8009460 <TIM_OC6_SetConfig+0x84>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a15      	ldr	r2, [pc, #84]	@ (80094b0 <TIM_OC6_SetConfig+0xd4>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d109      	bne.n	8009474 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009466:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	029b      	lsls	r3, r3, #10
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	4313      	orrs	r3, r2
 8009472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	621a      	str	r2, [r3, #32]
}
 800948e:	bf00      	nop
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	40012c00 	.word	0x40012c00
 80094a0:	40013400 	.word	0x40013400
 80094a4:	40014000 	.word	0x40014000
 80094a8:	40014400 	.word	0x40014400
 80094ac:	40014800 	.word	0x40014800
 80094b0:	40015000 	.word	0x40015000

080094b4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80094d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094d4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	693a      	ldr	r2, [r7, #16]
 80094dc:	4313      	orrs	r3, r2
 80094de:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094e6:	f023 0307 	bic.w	r3, r3, #7
 80094ea:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	4a56      	ldr	r2, [pc, #344]	@ (800965c <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009504:	4293      	cmp	r3, r2
 8009506:	f000 80a2 	beq.w	800964e <TIM_SlaveTimer_SetConfig+0x19a>
 800950a:	4a54      	ldr	r2, [pc, #336]	@ (800965c <TIM_SlaveTimer_SetConfig+0x1a8>)
 800950c:	4293      	cmp	r3, r2
 800950e:	f200 809b 	bhi.w	8009648 <TIM_SlaveTimer_SetConfig+0x194>
 8009512:	4a53      	ldr	r2, [pc, #332]	@ (8009660 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009514:	4293      	cmp	r3, r2
 8009516:	f000 809a 	beq.w	800964e <TIM_SlaveTimer_SetConfig+0x19a>
 800951a:	4a51      	ldr	r2, [pc, #324]	@ (8009660 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800951c:	4293      	cmp	r3, r2
 800951e:	f200 8093 	bhi.w	8009648 <TIM_SlaveTimer_SetConfig+0x194>
 8009522:	4a50      	ldr	r2, [pc, #320]	@ (8009664 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009524:	4293      	cmp	r3, r2
 8009526:	f000 8092 	beq.w	800964e <TIM_SlaveTimer_SetConfig+0x19a>
 800952a:	4a4e      	ldr	r2, [pc, #312]	@ (8009664 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800952c:	4293      	cmp	r3, r2
 800952e:	f200 808b 	bhi.w	8009648 <TIM_SlaveTimer_SetConfig+0x194>
 8009532:	4a4d      	ldr	r2, [pc, #308]	@ (8009668 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009534:	4293      	cmp	r3, r2
 8009536:	f000 808a 	beq.w	800964e <TIM_SlaveTimer_SetConfig+0x19a>
 800953a:	4a4b      	ldr	r2, [pc, #300]	@ (8009668 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800953c:	4293      	cmp	r3, r2
 800953e:	f200 8083 	bhi.w	8009648 <TIM_SlaveTimer_SetConfig+0x194>
 8009542:	4a4a      	ldr	r2, [pc, #296]	@ (800966c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009544:	4293      	cmp	r3, r2
 8009546:	f000 8082 	beq.w	800964e <TIM_SlaveTimer_SetConfig+0x19a>
 800954a:	4a48      	ldr	r2, [pc, #288]	@ (800966c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d87b      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x194>
 8009550:	4a47      	ldr	r2, [pc, #284]	@ (8009670 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d07b      	beq.n	800964e <TIM_SlaveTimer_SetConfig+0x19a>
 8009556:	4a46      	ldr	r2, [pc, #280]	@ (8009670 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d875      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x194>
 800955c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009560:	d075      	beq.n	800964e <TIM_SlaveTimer_SetConfig+0x19a>
 8009562:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009566:	d86f      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x194>
 8009568:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800956c:	d06f      	beq.n	800964e <TIM_SlaveTimer_SetConfig+0x19a>
 800956e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009572:	d869      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x194>
 8009574:	2b70      	cmp	r3, #112	@ 0x70
 8009576:	d01a      	beq.n	80095ae <TIM_SlaveTimer_SetConfig+0xfa>
 8009578:	2b70      	cmp	r3, #112	@ 0x70
 800957a:	d865      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x194>
 800957c:	2b60      	cmp	r3, #96	@ 0x60
 800957e:	d059      	beq.n	8009634 <TIM_SlaveTimer_SetConfig+0x180>
 8009580:	2b60      	cmp	r3, #96	@ 0x60
 8009582:	d861      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x194>
 8009584:	2b50      	cmp	r3, #80	@ 0x50
 8009586:	d04b      	beq.n	8009620 <TIM_SlaveTimer_SetConfig+0x16c>
 8009588:	2b50      	cmp	r3, #80	@ 0x50
 800958a:	d85d      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x194>
 800958c:	2b40      	cmp	r3, #64	@ 0x40
 800958e:	d019      	beq.n	80095c4 <TIM_SlaveTimer_SetConfig+0x110>
 8009590:	2b40      	cmp	r3, #64	@ 0x40
 8009592:	d859      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x194>
 8009594:	2b30      	cmp	r3, #48	@ 0x30
 8009596:	d05a      	beq.n	800964e <TIM_SlaveTimer_SetConfig+0x19a>
 8009598:	2b30      	cmp	r3, #48	@ 0x30
 800959a:	d855      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x194>
 800959c:	2b20      	cmp	r3, #32
 800959e:	d056      	beq.n	800964e <TIM_SlaveTimer_SetConfig+0x19a>
 80095a0:	2b20      	cmp	r3, #32
 80095a2:	d851      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x194>
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d052      	beq.n	800964e <TIM_SlaveTimer_SetConfig+0x19a>
 80095a8:	2b10      	cmp	r3, #16
 80095aa:	d050      	beq.n	800964e <TIM_SlaveTimer_SetConfig+0x19a>
 80095ac:	e04c      	b.n	8009648 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80095be:	f000 f9ff 	bl	80099c0 <TIM_ETR_SetConfig>
      break;
 80095c2:	e045      	b.n	8009650 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b05      	cmp	r3, #5
 80095ca:	d004      	beq.n	80095d6 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80095d0:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80095d4:	d101      	bne.n	80095da <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e03b      	b.n	8009652 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6a1a      	ldr	r2, [r3, #32]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f022 0201 	bic.w	r2, r2, #1
 80095f0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009600:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	011b      	lsls	r3, r3, #4
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	4313      	orrs	r3, r2
 800960c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	621a      	str	r2, [r3, #32]
      break;
 800961e:	e017      	b.n	8009650 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800962c:	461a      	mov	r2, r3
 800962e:	f000 f895 	bl	800975c <TIM_TI1_ConfigInputStage>
      break;
 8009632:	e00d      	b.n	8009650 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009640:	461a      	mov	r2, r3
 8009642:	f000 f8f7 	bl	8009834 <TIM_TI2_ConfigInputStage>
      break;
 8009646:	e003      	b.n	8009650 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	75fb      	strb	r3, [r7, #23]
      break;
 800964c:	e000      	b.n	8009650 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800964e:	bf00      	nop
  }

  return status;
 8009650:	7dfb      	ldrb	r3, [r7, #23]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	00100070 	.word	0x00100070
 8009660:	00100060 	.word	0x00100060
 8009664:	00100050 	.word	0x00100050
 8009668:	00100040 	.word	0x00100040
 800966c:	00100030 	.word	0x00100030
 8009670:	00100020 	.word	0x00100020

08009674 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009674:	b480      	push	{r7}
 8009676:	b087      	sub	sp, #28
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	f023 0201 	bic.w	r2, r3, #1
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4a28      	ldr	r2, [pc, #160]	@ (8009740 <TIM_TI1_SetConfig+0xcc>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d01b      	beq.n	80096da <TIM_TI1_SetConfig+0x66>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096a8:	d017      	beq.n	80096da <TIM_TI1_SetConfig+0x66>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	4a25      	ldr	r2, [pc, #148]	@ (8009744 <TIM_TI1_SetConfig+0xd0>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d013      	beq.n	80096da <TIM_TI1_SetConfig+0x66>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4a24      	ldr	r2, [pc, #144]	@ (8009748 <TIM_TI1_SetConfig+0xd4>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d00f      	beq.n	80096da <TIM_TI1_SetConfig+0x66>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	4a23      	ldr	r2, [pc, #140]	@ (800974c <TIM_TI1_SetConfig+0xd8>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d00b      	beq.n	80096da <TIM_TI1_SetConfig+0x66>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4a22      	ldr	r2, [pc, #136]	@ (8009750 <TIM_TI1_SetConfig+0xdc>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d007      	beq.n	80096da <TIM_TI1_SetConfig+0x66>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	4a21      	ldr	r2, [pc, #132]	@ (8009754 <TIM_TI1_SetConfig+0xe0>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d003      	beq.n	80096da <TIM_TI1_SetConfig+0x66>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	4a20      	ldr	r2, [pc, #128]	@ (8009758 <TIM_TI1_SetConfig+0xe4>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d101      	bne.n	80096de <TIM_TI1_SetConfig+0x6a>
 80096da:	2301      	movs	r3, #1
 80096dc:	e000      	b.n	80096e0 <TIM_TI1_SetConfig+0x6c>
 80096de:	2300      	movs	r3, #0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d008      	beq.n	80096f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	f023 0303 	bic.w	r3, r3, #3
 80096ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	617b      	str	r3, [r7, #20]
 80096f4:	e003      	b.n	80096fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	f043 0301 	orr.w	r3, r3, #1
 80096fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009704:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	011b      	lsls	r3, r3, #4
 800970a:	b2db      	uxtb	r3, r3
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	4313      	orrs	r3, r2
 8009710:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f023 030a 	bic.w	r3, r3, #10
 8009718:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	f003 030a 	and.w	r3, r3, #10
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	4313      	orrs	r3, r2
 8009724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	697a      	ldr	r2, [r7, #20]
 800972a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	621a      	str	r2, [r3, #32]
}
 8009732:	bf00      	nop
 8009734:	371c      	adds	r7, #28
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	40012c00 	.word	0x40012c00
 8009744:	40000400 	.word	0x40000400
 8009748:	40000800 	.word	0x40000800
 800974c:	40000c00 	.word	0x40000c00
 8009750:	40013400 	.word	0x40013400
 8009754:	40014000 	.word	0x40014000
 8009758:	40015000 	.word	0x40015000

0800975c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800975c:	b480      	push	{r7}
 800975e:	b087      	sub	sp, #28
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6a1b      	ldr	r3, [r3, #32]
 800976c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6a1b      	ldr	r3, [r3, #32]
 8009772:	f023 0201 	bic.w	r2, r3, #1
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	011b      	lsls	r3, r3, #4
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	4313      	orrs	r3, r2
 8009790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	f023 030a 	bic.w	r3, r3, #10
 8009798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	4313      	orrs	r3, r2
 80097a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	697a      	ldr	r2, [r7, #20]
 80097ac:	621a      	str	r2, [r3, #32]
}
 80097ae:	bf00      	nop
 80097b0:	371c      	adds	r7, #28
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b087      	sub	sp, #28
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	607a      	str	r2, [r7, #4]
 80097c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6a1b      	ldr	r3, [r3, #32]
 80097cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	f023 0210 	bic.w	r2, r3, #16
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	021b      	lsls	r3, r3, #8
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80097f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	031b      	lsls	r3, r3, #12
 80097fe:	b29b      	uxth	r3, r3
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	4313      	orrs	r3, r2
 8009804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800980c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	011b      	lsls	r3, r3, #4
 8009812:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4313      	orrs	r3, r2
 800981a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	621a      	str	r2, [r3, #32]
}
 8009828:	bf00      	nop
 800982a:	371c      	adds	r7, #28
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6a1b      	ldr	r3, [r3, #32]
 8009844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	f023 0210 	bic.w	r2, r3, #16
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800985e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	031b      	lsls	r3, r3, #12
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	4313      	orrs	r3, r2
 8009868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009870:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	011b      	lsls	r3, r3, #4
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	4313      	orrs	r3, r2
 800987a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	621a      	str	r2, [r3, #32]
}
 8009888:	bf00      	nop
 800988a:	371c      	adds	r7, #28
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
 80098a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	69db      	ldr	r3, [r3, #28]
 80098b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f023 0303 	bic.w	r3, r3, #3
 80098c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	011b      	lsls	r3, r3, #4
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	4313      	orrs	r3, r2
 80098dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80098e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	021b      	lsls	r3, r3, #8
 80098ea:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	621a      	str	r2, [r3, #32]
}
 8009900:	bf00      	nop
 8009902:	371c      	adds	r7, #28
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800990c:	b480      	push	{r7}
 800990e:	b087      	sub	sp, #28
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
 8009918:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009938:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	021b      	lsls	r3, r3, #8
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	4313      	orrs	r3, r2
 8009942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800994a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	031b      	lsls	r3, r3, #12
 8009950:	b29b      	uxth	r3, r3
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	4313      	orrs	r3, r2
 8009956:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800995e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	031b      	lsls	r3, r3, #12
 8009964:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	4313      	orrs	r3, r2
 800996c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	621a      	str	r2, [r3, #32]
}
 800997a:	bf00      	nop
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009986:	b480      	push	{r7}
 8009988:	b085      	sub	sp, #20
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800999c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099a2:	683a      	ldr	r2, [r7, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	f043 0307 	orr.w	r3, r3, #7
 80099ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	609a      	str	r2, [r3, #8]
}
 80099b4:	bf00      	nop
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b087      	sub	sp, #28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	021a      	lsls	r2, r3, #8
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	431a      	orrs	r2, r3
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	609a      	str	r2, [r3, #8]
}
 80099f4:	bf00      	nop
 80099f6:	371c      	adds	r7, #28
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	f003 031f 	and.w	r3, r3, #31
 8009a12:	2201      	movs	r2, #1
 8009a14:	fa02 f303 	lsl.w	r3, r2, r3
 8009a18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6a1a      	ldr	r2, [r3, #32]
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	43db      	mvns	r3, r3
 8009a22:	401a      	ands	r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6a1a      	ldr	r2, [r3, #32]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	f003 031f 	and.w	r3, r3, #31
 8009a32:	6879      	ldr	r1, [r7, #4]
 8009a34:	fa01 f303 	lsl.w	r3, r1, r3
 8009a38:	431a      	orrs	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	621a      	str	r2, [r3, #32]
}
 8009a3e:	bf00      	nop
 8009a40:	371c      	adds	r7, #28
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
	...

08009a4c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a26      	ldr	r2, [pc, #152]	@ (8009af0 <TIM_ResetCallback+0xa4>)
 8009a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a25      	ldr	r2, [pc, #148]	@ (8009af4 <TIM_ResetCallback+0xa8>)
 8009a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a24      	ldr	r2, [pc, #144]	@ (8009af8 <TIM_ResetCallback+0xac>)
 8009a68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a23      	ldr	r2, [pc, #140]	@ (8009afc <TIM_ResetCallback+0xb0>)
 8009a70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a22      	ldr	r2, [pc, #136]	@ (8009b00 <TIM_ResetCallback+0xb4>)
 8009a78:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a21      	ldr	r2, [pc, #132]	@ (8009b04 <TIM_ResetCallback+0xb8>)
 8009a80:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a20      	ldr	r2, [pc, #128]	@ (8009b08 <TIM_ResetCallback+0xbc>)
 8009a88:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8009b0c <TIM_ResetCallback+0xc0>)
 8009a90:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a1e      	ldr	r2, [pc, #120]	@ (8009b10 <TIM_ResetCallback+0xc4>)
 8009a98:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8009b14 <TIM_ResetCallback+0xc8>)
 8009aa0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8009b18 <TIM_ResetCallback+0xcc>)
 8009aa8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a1b      	ldr	r2, [pc, #108]	@ (8009b1c <TIM_ResetCallback+0xd0>)
 8009ab0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8009b20 <TIM_ResetCallback+0xd4>)
 8009ab8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a19      	ldr	r2, [pc, #100]	@ (8009b24 <TIM_ResetCallback+0xd8>)
 8009ac0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a18      	ldr	r2, [pc, #96]	@ (8009b28 <TIM_ResetCallback+0xdc>)
 8009ac8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a17      	ldr	r2, [pc, #92]	@ (8009b2c <TIM_ResetCallback+0xe0>)
 8009ad0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a16      	ldr	r2, [pc, #88]	@ (8009b30 <TIM_ResetCallback+0xe4>)
 8009ad8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a15      	ldr	r2, [pc, #84]	@ (8009b34 <TIM_ResetCallback+0xe8>)
 8009ae0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	0800417d 	.word	0x0800417d
 8009af4:	08008985 	.word	0x08008985
 8009af8:	080089fd 	.word	0x080089fd
 8009afc:	08008a11 	.word	0x08008a11
 8009b00:	080089ad 	.word	0x080089ad
 8009b04:	080089c1 	.word	0x080089c1
 8009b08:	08008999 	.word	0x08008999
 8009b0c:	080089d5 	.word	0x080089d5
 8009b10:	080089e9 	.word	0x080089e9
 8009b14:	08008a25 	.word	0x08008a25
 8009b18:	08009d8d 	.word	0x08009d8d
 8009b1c:	08009da1 	.word	0x08009da1
 8009b20:	08009db5 	.word	0x08009db5
 8009b24:	08009dc9 	.word	0x08009dc9
 8009b28:	08009ddd 	.word	0x08009ddd
 8009b2c:	08009df1 	.word	0x08009df1
 8009b30:	08009e05 	.word	0x08009e05
 8009b34:	08009e19 	.word	0x08009e19

08009b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d101      	bne.n	8009b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e074      	b.n	8009c3a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a34      	ldr	r2, [pc, #208]	@ (8009c48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d009      	beq.n	8009b8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a33      	ldr	r2, [pc, #204]	@ (8009c4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d004      	beq.n	8009b8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a31      	ldr	r2, [pc, #196]	@ (8009c50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d108      	bne.n	8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009b94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a21      	ldr	r2, [pc, #132]	@ (8009c48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d022      	beq.n	8009c0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bd0:	d01d      	beq.n	8009c0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8009c54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d018      	beq.n	8009c0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a1d      	ldr	r2, [pc, #116]	@ (8009c58 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d013      	beq.n	8009c0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a1c      	ldr	r2, [pc, #112]	@ (8009c5c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d00e      	beq.n	8009c0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a15      	ldr	r2, [pc, #84]	@ (8009c4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d009      	beq.n	8009c0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a18      	ldr	r2, [pc, #96]	@ (8009c60 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d004      	beq.n	8009c0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a11      	ldr	r2, [pc, #68]	@ (8009c50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d10c      	bne.n	8009c28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68ba      	ldr	r2, [r7, #8]
 8009c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3714      	adds	r7, #20
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	40012c00 	.word	0x40012c00
 8009c4c:	40013400 	.word	0x40013400
 8009c50:	40015000 	.word	0x40015000
 8009c54:	40000400 	.word	0x40000400
 8009c58:	40000800 	.word	0x40000800
 8009c5c:	40000c00 	.word	0x40000c00
 8009c60:	40014000 	.word	0x40014000

08009c64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d101      	bne.n	8009c80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	e078      	b.n	8009d72 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	691b      	ldr	r3, [r3, #16]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	695b      	ldr	r3, [r3, #20]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	041b      	lsls	r3, r3, #16
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	69db      	ldr	r3, [r3, #28]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8009d80 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d009      	beq.n	8009d26 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a1b      	ldr	r2, [pc, #108]	@ (8009d84 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d004      	beq.n	8009d26 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a19      	ldr	r2, [pc, #100]	@ (8009d88 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d11c      	bne.n	8009d60 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d30:	051b      	lsls	r3, r3, #20
 8009d32:	4313      	orrs	r3, r2
 8009d34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	6a1b      	ldr	r3, [r3, #32]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	40012c00 	.word	0x40012c00
 8009d84:	40013400 	.word	0x40013400
 8009d88:	40015000 	.word	0x40015000

08009d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d94:	bf00      	nop
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e050      	b.n	8009ee0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d114      	bne.n	8009e72 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fde5 	bl	800aa20 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d103      	bne.n	8009e68 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a21      	ldr	r2, [pc, #132]	@ (8009ee8 <HAL_UART_Init+0xbc>)
 8009e64:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2224      	movs	r2, #36	@ 0x24
 8009e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f022 0201 	bic.w	r2, r2, #1
 8009e88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d002      	beq.n	8009e98 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f001 f912 	bl	800b0bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fe13 	bl	800aac4 <UART_SetConfig>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d101      	bne.n	8009ea8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e01b      	b.n	8009ee0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	685a      	ldr	r2, [r3, #4]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009eb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	689a      	ldr	r2, [r3, #8]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ec6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f042 0201 	orr.w	r2, r2, #1
 8009ed6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f001 f991 	bl	800b200 <UART_CheckIdleState>
 8009ede:	4603      	mov	r3, r0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	08005305 	.word	0x08005305

08009eec <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b087      	sub	sp, #28
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	607a      	str	r2, [r7, #4]
 8009ef8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d109      	bne.n	8009f18 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e09c      	b.n	800a052 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f1e:	2b20      	cmp	r3, #32
 8009f20:	d16c      	bne.n	8009ffc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009f22:	7afb      	ldrb	r3, [r7, #11]
 8009f24:	2b0c      	cmp	r3, #12
 8009f26:	d85e      	bhi.n	8009fe6 <HAL_UART_RegisterCallback+0xfa>
 8009f28:	a201      	add	r2, pc, #4	@ (adr r2, 8009f30 <HAL_UART_RegisterCallback+0x44>)
 8009f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2e:	bf00      	nop
 8009f30:	08009f65 	.word	0x08009f65
 8009f34:	08009f6f 	.word	0x08009f6f
 8009f38:	08009f79 	.word	0x08009f79
 8009f3c:	08009f83 	.word	0x08009f83
 8009f40:	08009f8d 	.word	0x08009f8d
 8009f44:	08009f97 	.word	0x08009f97
 8009f48:	08009fa1 	.word	0x08009fa1
 8009f4c:	08009fab 	.word	0x08009fab
 8009f50:	08009fb5 	.word	0x08009fb5
 8009f54:	08009fbf 	.word	0x08009fbf
 8009f58:	08009fc9 	.word	0x08009fc9
 8009f5c:	08009fd3 	.word	0x08009fd3
 8009f60:	08009fdd 	.word	0x08009fdd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009f6c:	e070      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009f76:	e06b      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009f80:	e066      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009f8a:	e061      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009f94:	e05c      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009f9e:	e057      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009fa8:	e052      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009fb2:	e04d      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009fbc:	e048      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009fc6:	e043      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009fd0:	e03e      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009fda:	e039      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009fe4:	e034      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	75fb      	strb	r3, [r7, #23]
        break;
 8009ffa:	e029      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a002:	2b00      	cmp	r3, #0
 800a004:	d11a      	bne.n	800a03c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a006:	7afb      	ldrb	r3, [r7, #11]
 800a008:	2b0b      	cmp	r3, #11
 800a00a:	d002      	beq.n	800a012 <HAL_UART_RegisterCallback+0x126>
 800a00c:	2b0c      	cmp	r3, #12
 800a00e:	d005      	beq.n	800a01c <HAL_UART_RegisterCallback+0x130>
 800a010:	e009      	b.n	800a026 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a01a:	e019      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a024:	e014      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a02c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	75fb      	strb	r3, [r7, #23]
        break;
 800a03a:	e009      	b.n	800a050 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a042:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a050:	7dfb      	ldrb	r3, [r7, #23]
}
 800a052:	4618      	mov	r0, r3
 800a054:	371c      	adds	r7, #28
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop

0800a060 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b08a      	sub	sp, #40	@ 0x28
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	4613      	mov	r3, r2
 800a06c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a074:	2b20      	cmp	r3, #32
 800a076:	d167      	bne.n	800a148 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d002      	beq.n	800a084 <HAL_UART_Transmit_DMA+0x24>
 800a07e:	88fb      	ldrh	r3, [r7, #6]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d101      	bne.n	800a088 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e060      	b.n	800a14a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	88fa      	ldrh	r2, [r7, #6]
 800a092:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	88fa      	ldrh	r2, [r7, #6]
 800a09a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2221      	movs	r2, #33	@ 0x21
 800a0aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d028      	beq.n	800a108 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0ba:	4a26      	ldr	r2, [pc, #152]	@ (800a154 <HAL_UART_Transmit_DMA+0xf4>)
 800a0bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0c2:	4a25      	ldr	r2, [pc, #148]	@ (800a158 <HAL_UART_Transmit_DMA+0xf8>)
 800a0c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0ca:	4a24      	ldr	r2, [pc, #144]	@ (800a15c <HAL_UART_Transmit_DMA+0xfc>)
 800a0cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0de:	4619      	mov	r1, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	3328      	adds	r3, #40	@ 0x28
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	88fb      	ldrh	r3, [r7, #6]
 800a0ea:	f7fb fcd9 	bl	8005aa0 <HAL_DMA_Start_IT>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d009      	beq.n	800a108 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2210      	movs	r2, #16
 800a0f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2220      	movs	r2, #32
 800a100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e020      	b.n	800a14a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2240      	movs	r2, #64	@ 0x40
 800a10e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3308      	adds	r3, #8
 800a116:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	e853 3f00 	ldrex	r3, [r3]
 800a11e:	613b      	str	r3, [r7, #16]
   return(result);
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a126:	627b      	str	r3, [r7, #36]	@ 0x24
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3308      	adds	r3, #8
 800a12e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a130:	623a      	str	r2, [r7, #32]
 800a132:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a134:	69f9      	ldr	r1, [r7, #28]
 800a136:	6a3a      	ldr	r2, [r7, #32]
 800a138:	e841 2300 	strex	r3, r2, [r1]
 800a13c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1e5      	bne.n	800a110 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	e000      	b.n	800a14a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a148:	2302      	movs	r3, #2
  }
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3728      	adds	r7, #40	@ 0x28
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	0800b6cb 	.word	0x0800b6cb
 800a158:	0800b769 	.word	0x0800b769
 800a15c:	0800b903 	.word	0x0800b903

0800a160 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08a      	sub	sp, #40	@ 0x28
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	4613      	mov	r3, r2
 800a16c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a174:	2b20      	cmp	r3, #32
 800a176:	d137      	bne.n	800a1e8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d002      	beq.n	800a184 <HAL_UART_Receive_DMA+0x24>
 800a17e:	88fb      	ldrh	r3, [r7, #6]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d101      	bne.n	800a188 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	e030      	b.n	800a1ea <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a18      	ldr	r2, [pc, #96]	@ (800a1f4 <HAL_UART_Receive_DMA+0x94>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d01f      	beq.n	800a1d8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d018      	beq.n	800a1d8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	e853 3f00 	ldrex	r3, [r3]
 800a1b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a1ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c4:	623b      	str	r3, [r7, #32]
 800a1c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c8:	69f9      	ldr	r1, [r7, #28]
 800a1ca:	6a3a      	ldr	r2, [r7, #32]
 800a1cc:	e841 2300 	strex	r3, r2, [r1]
 800a1d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1e6      	bne.n	800a1a6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a1d8:	88fb      	ldrh	r3, [r7, #6]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	68b9      	ldr	r1, [r7, #8]
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f001 f926 	bl	800b430 <UART_Start_Receive_DMA>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	e000      	b.n	800a1ea <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a1e8:	2302      	movs	r3, #2
  }
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3728      	adds	r7, #40	@ 0x28
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	40008000 	.word	0x40008000

0800a1f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b0ba      	sub	sp, #232	@ 0xe8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	69db      	ldr	r3, [r3, #28]
 800a206:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a21e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a222:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a226:	4013      	ands	r3, r2
 800a228:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a22c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a230:	2b00      	cmp	r3, #0
 800a232:	d11b      	bne.n	800a26c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a238:	f003 0320 	and.w	r3, r3, #32
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d015      	beq.n	800a26c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a244:	f003 0320 	and.w	r3, r3, #32
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d105      	bne.n	800a258 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a24c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a254:	2b00      	cmp	r3, #0
 800a256:	d009      	beq.n	800a26c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f000 8312 	beq.w	800a886 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	4798      	blx	r3
      }
      return;
 800a26a:	e30c      	b.n	800a886 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a26c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 8129 	beq.w	800a4c8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a276:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a27a:	4b90      	ldr	r3, [pc, #576]	@ (800a4bc <HAL_UART_IRQHandler+0x2c4>)
 800a27c:	4013      	ands	r3, r2
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d106      	bne.n	800a290 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a282:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a286:	4b8e      	ldr	r3, [pc, #568]	@ (800a4c0 <HAL_UART_IRQHandler+0x2c8>)
 800a288:	4013      	ands	r3, r2
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f000 811c 	beq.w	800a4c8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a294:	f003 0301 	and.w	r3, r3, #1
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d011      	beq.n	800a2c0 <HAL_UART_IRQHandler+0xc8>
 800a29c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00b      	beq.n	800a2c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2b6:	f043 0201 	orr.w	r2, r3, #1
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2c4:	f003 0302 	and.w	r3, r3, #2
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d011      	beq.n	800a2f0 <HAL_UART_IRQHandler+0xf8>
 800a2cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2d0:	f003 0301 	and.w	r3, r3, #1
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00b      	beq.n	800a2f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2202      	movs	r2, #2
 800a2de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2e6:	f043 0204 	orr.w	r2, r3, #4
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2f4:	f003 0304 	and.w	r3, r3, #4
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d011      	beq.n	800a320 <HAL_UART_IRQHandler+0x128>
 800a2fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00b      	beq.n	800a320 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2204      	movs	r2, #4
 800a30e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a316:	f043 0202 	orr.w	r2, r3, #2
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a324:	f003 0308 	and.w	r3, r3, #8
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d017      	beq.n	800a35c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a32c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a330:	f003 0320 	and.w	r3, r3, #32
 800a334:	2b00      	cmp	r3, #0
 800a336:	d105      	bne.n	800a344 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a338:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a33c:	4b5f      	ldr	r3, [pc, #380]	@ (800a4bc <HAL_UART_IRQHandler+0x2c4>)
 800a33e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00b      	beq.n	800a35c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2208      	movs	r2, #8
 800a34a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a352:	f043 0208 	orr.w	r2, r3, #8
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a35c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a360:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a364:	2b00      	cmp	r3, #0
 800a366:	d012      	beq.n	800a38e <HAL_UART_IRQHandler+0x196>
 800a368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a36c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00c      	beq.n	800a38e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a37c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a384:	f043 0220 	orr.w	r2, r3, #32
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a394:	2b00      	cmp	r3, #0
 800a396:	f000 8278 	beq.w	800a88a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a39a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a39e:	f003 0320 	and.w	r3, r3, #32
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d013      	beq.n	800a3ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a3a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3aa:	f003 0320 	and.w	r3, r3, #32
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d105      	bne.n	800a3be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a3b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d007      	beq.n	800a3ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d003      	beq.n	800a3ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3e2:	2b40      	cmp	r3, #64	@ 0x40
 800a3e4:	d005      	beq.n	800a3f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a3e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a3ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d058      	beq.n	800a4a4 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f001 f903 	bl	800b5fe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a402:	2b40      	cmp	r3, #64	@ 0x40
 800a404:	d148      	bne.n	800a498 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3308      	adds	r3, #8
 800a40c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a410:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a414:	e853 3f00 	ldrex	r3, [r3]
 800a418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a41c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a420:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a424:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	3308      	adds	r3, #8
 800a42e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a432:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a436:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a43e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a442:	e841 2300 	strex	r3, r2, [r1]
 800a446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a44a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1d9      	bne.n	800a406 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d017      	beq.n	800a48c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a462:	4a18      	ldr	r2, [pc, #96]	@ (800a4c4 <HAL_UART_IRQHandler+0x2cc>)
 800a464:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fb fbeb 	bl	8005c48 <HAL_DMA_Abort_IT>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d01f      	beq.n	800a4b8 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a47e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a486:	4610      	mov	r0, r2
 800a488:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a48a:	e015      	b.n	800a4b8 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a496:	e00f      	b.n	800a4b8 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4a2:	e009      	b.n	800a4b8 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a4b6:	e1e8      	b.n	800a88a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4b8:	bf00      	nop
    return;
 800a4ba:	e1e6      	b.n	800a88a <HAL_UART_IRQHandler+0x692>
 800a4bc:	10000001 	.word	0x10000001
 800a4c0:	04000120 	.word	0x04000120
 800a4c4:	0800b987 	.word	0x0800b987

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	f040 8176 	bne.w	800a7be <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a4d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4d6:	f003 0310 	and.w	r3, r3, #16
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f000 816f 	beq.w	800a7be <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a4e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4e4:	f003 0310 	and.w	r3, r3, #16
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f000 8168 	beq.w	800a7be <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2210      	movs	r2, #16
 800a4f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a500:	2b40      	cmp	r3, #64	@ 0x40
 800a502:	f040 80dc 	bne.w	800a6be <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f000 80b1 	beq.w	800a680 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a524:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a528:	429a      	cmp	r2, r3
 800a52a:	f080 80a9 	bcs.w	800a680 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a534:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0320 	and.w	r3, r3, #32
 800a546:	2b00      	cmp	r3, #0
 800a548:	f040 8087 	bne.w	800a65a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a554:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a558:	e853 3f00 	ldrex	r3, [r3]
 800a55c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a560:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a568:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	461a      	mov	r2, r3
 800a572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a576:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a57a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a582:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a586:	e841 2300 	strex	r3, r2, [r1]
 800a58a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a58e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1da      	bne.n	800a54c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3308      	adds	r3, #8
 800a59c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a5a0:	e853 3f00 	ldrex	r3, [r3]
 800a5a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a5a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a5a8:	f023 0301 	bic.w	r3, r3, #1
 800a5ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	3308      	adds	r3, #8
 800a5b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a5ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a5be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a5c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a5c6:	e841 2300 	strex	r3, r2, [r1]
 800a5ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a5cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1e1      	bne.n	800a596 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	3308      	adds	r3, #8
 800a5d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5dc:	e853 3f00 	ldrex	r3, [r3]
 800a5e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a5e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3308      	adds	r3, #8
 800a5f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a5f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a5f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a5fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a5fe:	e841 2300 	strex	r3, r2, [r1]
 800a602:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1e3      	bne.n	800a5d2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2220      	movs	r2, #32
 800a60e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a620:	e853 3f00 	ldrex	r3, [r3]
 800a624:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a628:	f023 0310 	bic.w	r3, r3, #16
 800a62c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	461a      	mov	r2, r3
 800a636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a63a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a63c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a640:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a642:	e841 2300 	strex	r3, r2, [r1]
 800a646:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1e4      	bne.n	800a618 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a654:	4618      	mov	r0, r3
 800a656:	f7fb fa9e 	bl	8005b96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2202      	movs	r2, #2
 800a65e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a672:	b292      	uxth	r2, r2
 800a674:	1a8a      	subs	r2, r1, r2
 800a676:	b292      	uxth	r2, r2
 800a678:	4611      	mov	r1, r2
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a67e:	e106      	b.n	800a88e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a68a:	429a      	cmp	r2, r3
 800a68c:	f040 80ff 	bne.w	800a88e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 0320 	and.w	r3, r3, #32
 800a69e:	2b20      	cmp	r3, #32
 800a6a0:	f040 80f5 	bne.w	800a88e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	4798      	blx	r3
      return;
 800a6bc:	e0e7      	b.n	800a88e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f000 80d9 	beq.w	800a892 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800a6e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f000 80d4 	beq.w	800a892 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f2:	e853 3f00 	ldrex	r3, [r3]
 800a6f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	461a      	mov	r2, r3
 800a708:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a70c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a70e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a710:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a714:	e841 2300 	strex	r3, r2, [r1]
 800a718:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1e4      	bne.n	800a6ea <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3308      	adds	r3, #8
 800a726:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72a:	e853 3f00 	ldrex	r3, [r3]
 800a72e:	623b      	str	r3, [r7, #32]
   return(result);
 800a730:	6a3b      	ldr	r3, [r7, #32]
 800a732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a736:	f023 0301 	bic.w	r3, r3, #1
 800a73a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3308      	adds	r3, #8
 800a744:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a748:	633a      	str	r2, [r7, #48]	@ 0x30
 800a74a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a74e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a750:	e841 2300 	strex	r3, r2, [r1]
 800a754:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1e1      	bne.n	800a720 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2220      	movs	r2, #32
 800a760:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	e853 3f00 	ldrex	r3, [r3]
 800a77c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f023 0310 	bic.w	r3, r3, #16
 800a784:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	461a      	mov	r2, r3
 800a78e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a792:	61fb      	str	r3, [r7, #28]
 800a794:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a796:	69b9      	ldr	r1, [r7, #24]
 800a798:	69fa      	ldr	r2, [r7, #28]
 800a79a:	e841 2300 	strex	r3, r2, [r1]
 800a79e:	617b      	str	r3, [r7, #20]
   return(result);
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1e4      	bne.n	800a770 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2202      	movs	r2, #2
 800a7aa:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a7b2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a7bc:	e069      	b.n	800a892 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d010      	beq.n	800a7ec <HAL_UART_IRQHandler+0x5f4>
 800a7ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00a      	beq.n	800a7ec <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a7de:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7ea:	e055      	b.n	800a898 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d014      	beq.n	800a822 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a800:	2b00      	cmp	r3, #0
 800a802:	d105      	bne.n	800a810 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a808:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d008      	beq.n	800a822 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a814:	2b00      	cmp	r3, #0
 800a816:	d03e      	beq.n	800a896 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	4798      	blx	r3
    }
    return;
 800a820:	e039      	b.n	800a896 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d009      	beq.n	800a842 <HAL_UART_IRQHandler+0x64a>
 800a82e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a836:	2b00      	cmp	r3, #0
 800a838:	d003      	beq.n	800a842 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f001 f8b7 	bl	800b9ae <UART_EndTransmit_IT>
    return;
 800a840:	e02a      	b.n	800a898 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a846:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00b      	beq.n	800a866 <HAL_UART_IRQHandler+0x66e>
 800a84e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a852:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d005      	beq.n	800a866 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a864:	e018      	b.n	800a898 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a86a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d012      	beq.n	800a898 <HAL_UART_IRQHandler+0x6a0>
 800a872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a876:	2b00      	cmp	r3, #0
 800a878:	da0e      	bge.n	800a898 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a884:	e008      	b.n	800a898 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a886:	bf00      	nop
 800a888:	e006      	b.n	800a898 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a88a:	bf00      	nop
 800a88c:	e004      	b.n	800a898 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a88e:	bf00      	nop
 800a890:	e002      	b.n	800a898 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a892:	bf00      	nop
 800a894:	e000      	b.n	800a898 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a896:	bf00      	nop
  }
}
 800a898:	37e8      	adds	r7, #232	@ 0xe8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop

0800a8a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a8a8:	bf00      	nop
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a8e4:	bf00      	nop
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a8f8:	bf00      	nop
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a920:	bf00      	nop
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a934:	bf00      	nop
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	460b      	mov	r3, r1
 800a94a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a94c:	bf00      	nop
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a09      	ldr	r2, [pc, #36]	@ (800a98c <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d009      	beq.n	800a980 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	695b      	ldr	r3, [r3, #20]
 800a972:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	683a      	ldr	r2, [r7, #0]
 800a97c:	430a      	orrs	r2, r1
 800a97e:	615a      	str	r2, [r3, #20]
  }
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	40008000 	.word	0x40008000

0800a990 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a18      	ldr	r2, [pc, #96]	@ (800aa00 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d027      	beq.n	800a9f2 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9a8:	2b20      	cmp	r3, #32
 800a9aa:	d120      	bne.n	800a9ee <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d101      	bne.n	800a9ba <HAL_UART_EnableReceiverTimeout+0x2a>
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	e01c      	b.n	800a9f4 <HAL_UART_EnableReceiverTimeout+0x64>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2224      	movs	r2, #36	@ 0x24
 800a9c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a9d8:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	e002      	b.n	800a9f4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	e000      	b.n	800a9f4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
  }
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr
 800aa00:	40008000 	.word	0x40008000

0800aa04 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	370c      	adds	r7, #12
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
	...

0800aa20 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a1a      	ldr	r2, [pc, #104]	@ (800aa94 <UART_InitCallbacksToDefault+0x74>)
 800aa2c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a19      	ldr	r2, [pc, #100]	@ (800aa98 <UART_InitCallbacksToDefault+0x78>)
 800aa34:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a18      	ldr	r2, [pc, #96]	@ (800aa9c <UART_InitCallbacksToDefault+0x7c>)
 800aa3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a17      	ldr	r2, [pc, #92]	@ (800aaa0 <UART_InitCallbacksToDefault+0x80>)
 800aa44:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a16      	ldr	r2, [pc, #88]	@ (800aaa4 <UART_InitCallbacksToDefault+0x84>)
 800aa4c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a15      	ldr	r2, [pc, #84]	@ (800aaa8 <UART_InitCallbacksToDefault+0x88>)
 800aa54:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a14      	ldr	r2, [pc, #80]	@ (800aaac <UART_InitCallbacksToDefault+0x8c>)
 800aa5c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a13      	ldr	r2, [pc, #76]	@ (800aab0 <UART_InitCallbacksToDefault+0x90>)
 800aa64:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a12      	ldr	r2, [pc, #72]	@ (800aab4 <UART_InitCallbacksToDefault+0x94>)
 800aa6c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4a11      	ldr	r2, [pc, #68]	@ (800aab8 <UART_InitCallbacksToDefault+0x98>)
 800aa74:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a10      	ldr	r2, [pc, #64]	@ (800aabc <UART_InitCallbacksToDefault+0x9c>)
 800aa7c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a0f      	ldr	r2, [pc, #60]	@ (800aac0 <UART_InitCallbacksToDefault+0xa0>)
 800aa84:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr
 800aa94:	0800a8b5 	.word	0x0800a8b5
 800aa98:	0800a8a1 	.word	0x0800a8a1
 800aa9c:	0800a8dd 	.word	0x0800a8dd
 800aaa0:	0800a8c9 	.word	0x0800a8c9
 800aaa4:	0800a8f1 	.word	0x0800a8f1
 800aaa8:	0800a905 	.word	0x0800a905
 800aaac:	0800a919 	.word	0x0800a919
 800aab0:	0800a92d 	.word	0x0800a92d
 800aab4:	0800ba09 	.word	0x0800ba09
 800aab8:	0800ba1d 	.word	0x0800ba1d
 800aabc:	0800ba31 	.word	0x0800ba31
 800aac0:	0800a941 	.word	0x0800a941

0800aac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aac8:	b08c      	sub	sp, #48	@ 0x30
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	689a      	ldr	r2, [r3, #8]
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	431a      	orrs	r2, r3
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	695b      	ldr	r3, [r3, #20]
 800aae2:	431a      	orrs	r2, r3
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	69db      	ldr	r3, [r3, #28]
 800aae8:	4313      	orrs	r3, r2
 800aaea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	4baa      	ldr	r3, [pc, #680]	@ (800ad9c <UART_SetConfig+0x2d8>)
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	6812      	ldr	r2, [r2, #0]
 800aafa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aafc:	430b      	orrs	r3, r1
 800aafe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	68da      	ldr	r2, [r3, #12]
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	430a      	orrs	r2, r1
 800ab14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a9f      	ldr	r2, [pc, #636]	@ (800ada0 <UART_SetConfig+0x2dc>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d004      	beq.n	800ab30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ab3a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	6812      	ldr	r2, [r2, #0]
 800ab42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab44:	430b      	orrs	r3, r1
 800ab46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab4e:	f023 010f 	bic.w	r1, r3, #15
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	430a      	orrs	r2, r1
 800ab5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a90      	ldr	r2, [pc, #576]	@ (800ada4 <UART_SetConfig+0x2e0>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d125      	bne.n	800abb4 <UART_SetConfig+0xf0>
 800ab68:	4b8f      	ldr	r3, [pc, #572]	@ (800ada8 <UART_SetConfig+0x2e4>)
 800ab6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab6e:	f003 0303 	and.w	r3, r3, #3
 800ab72:	2b03      	cmp	r3, #3
 800ab74:	d81a      	bhi.n	800abac <UART_SetConfig+0xe8>
 800ab76:	a201      	add	r2, pc, #4	@ (adr r2, 800ab7c <UART_SetConfig+0xb8>)
 800ab78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab7c:	0800ab8d 	.word	0x0800ab8d
 800ab80:	0800ab9d 	.word	0x0800ab9d
 800ab84:	0800ab95 	.word	0x0800ab95
 800ab88:	0800aba5 	.word	0x0800aba5
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab92:	e116      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ab94:	2302      	movs	r3, #2
 800ab96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab9a:	e112      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ab9c:	2304      	movs	r3, #4
 800ab9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aba2:	e10e      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800aba4:	2308      	movs	r3, #8
 800aba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abaa:	e10a      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800abac:	2310      	movs	r3, #16
 800abae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abb2:	e106      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a7c      	ldr	r2, [pc, #496]	@ (800adac <UART_SetConfig+0x2e8>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d138      	bne.n	800ac30 <UART_SetConfig+0x16c>
 800abbe:	4b7a      	ldr	r3, [pc, #488]	@ (800ada8 <UART_SetConfig+0x2e4>)
 800abc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abc4:	f003 030c 	and.w	r3, r3, #12
 800abc8:	2b0c      	cmp	r3, #12
 800abca:	d82d      	bhi.n	800ac28 <UART_SetConfig+0x164>
 800abcc:	a201      	add	r2, pc, #4	@ (adr r2, 800abd4 <UART_SetConfig+0x110>)
 800abce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd2:	bf00      	nop
 800abd4:	0800ac09 	.word	0x0800ac09
 800abd8:	0800ac29 	.word	0x0800ac29
 800abdc:	0800ac29 	.word	0x0800ac29
 800abe0:	0800ac29 	.word	0x0800ac29
 800abe4:	0800ac19 	.word	0x0800ac19
 800abe8:	0800ac29 	.word	0x0800ac29
 800abec:	0800ac29 	.word	0x0800ac29
 800abf0:	0800ac29 	.word	0x0800ac29
 800abf4:	0800ac11 	.word	0x0800ac11
 800abf8:	0800ac29 	.word	0x0800ac29
 800abfc:	0800ac29 	.word	0x0800ac29
 800ac00:	0800ac29 	.word	0x0800ac29
 800ac04:	0800ac21 	.word	0x0800ac21
 800ac08:	2300      	movs	r3, #0
 800ac0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac0e:	e0d8      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ac10:	2302      	movs	r3, #2
 800ac12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac16:	e0d4      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ac18:	2304      	movs	r3, #4
 800ac1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac1e:	e0d0      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ac20:	2308      	movs	r3, #8
 800ac22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac26:	e0cc      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ac28:	2310      	movs	r3, #16
 800ac2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac2e:	e0c8      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a5e      	ldr	r2, [pc, #376]	@ (800adb0 <UART_SetConfig+0x2ec>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d125      	bne.n	800ac86 <UART_SetConfig+0x1c2>
 800ac3a:	4b5b      	ldr	r3, [pc, #364]	@ (800ada8 <UART_SetConfig+0x2e4>)
 800ac3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac40:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ac44:	2b30      	cmp	r3, #48	@ 0x30
 800ac46:	d016      	beq.n	800ac76 <UART_SetConfig+0x1b2>
 800ac48:	2b30      	cmp	r3, #48	@ 0x30
 800ac4a:	d818      	bhi.n	800ac7e <UART_SetConfig+0x1ba>
 800ac4c:	2b20      	cmp	r3, #32
 800ac4e:	d00a      	beq.n	800ac66 <UART_SetConfig+0x1a2>
 800ac50:	2b20      	cmp	r3, #32
 800ac52:	d814      	bhi.n	800ac7e <UART_SetConfig+0x1ba>
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d002      	beq.n	800ac5e <UART_SetConfig+0x19a>
 800ac58:	2b10      	cmp	r3, #16
 800ac5a:	d008      	beq.n	800ac6e <UART_SetConfig+0x1aa>
 800ac5c:	e00f      	b.n	800ac7e <UART_SetConfig+0x1ba>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac64:	e0ad      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ac66:	2302      	movs	r3, #2
 800ac68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac6c:	e0a9      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ac6e:	2304      	movs	r3, #4
 800ac70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac74:	e0a5      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ac76:	2308      	movs	r3, #8
 800ac78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac7c:	e0a1      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ac7e:	2310      	movs	r3, #16
 800ac80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac84:	e09d      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a4a      	ldr	r2, [pc, #296]	@ (800adb4 <UART_SetConfig+0x2f0>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d125      	bne.n	800acdc <UART_SetConfig+0x218>
 800ac90:	4b45      	ldr	r3, [pc, #276]	@ (800ada8 <UART_SetConfig+0x2e4>)
 800ac92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ac9a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac9c:	d016      	beq.n	800accc <UART_SetConfig+0x208>
 800ac9e:	2bc0      	cmp	r3, #192	@ 0xc0
 800aca0:	d818      	bhi.n	800acd4 <UART_SetConfig+0x210>
 800aca2:	2b80      	cmp	r3, #128	@ 0x80
 800aca4:	d00a      	beq.n	800acbc <UART_SetConfig+0x1f8>
 800aca6:	2b80      	cmp	r3, #128	@ 0x80
 800aca8:	d814      	bhi.n	800acd4 <UART_SetConfig+0x210>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d002      	beq.n	800acb4 <UART_SetConfig+0x1f0>
 800acae:	2b40      	cmp	r3, #64	@ 0x40
 800acb0:	d008      	beq.n	800acc4 <UART_SetConfig+0x200>
 800acb2:	e00f      	b.n	800acd4 <UART_SetConfig+0x210>
 800acb4:	2300      	movs	r3, #0
 800acb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acba:	e082      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800acbc:	2302      	movs	r3, #2
 800acbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acc2:	e07e      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800acc4:	2304      	movs	r3, #4
 800acc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acca:	e07a      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800accc:	2308      	movs	r3, #8
 800acce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acd2:	e076      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800acd4:	2310      	movs	r3, #16
 800acd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acda:	e072      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a35      	ldr	r2, [pc, #212]	@ (800adb8 <UART_SetConfig+0x2f4>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d12a      	bne.n	800ad3c <UART_SetConfig+0x278>
 800ace6:	4b30      	ldr	r3, [pc, #192]	@ (800ada8 <UART_SetConfig+0x2e4>)
 800ace8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acf4:	d01a      	beq.n	800ad2c <UART_SetConfig+0x268>
 800acf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acfa:	d81b      	bhi.n	800ad34 <UART_SetConfig+0x270>
 800acfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad00:	d00c      	beq.n	800ad1c <UART_SetConfig+0x258>
 800ad02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad06:	d815      	bhi.n	800ad34 <UART_SetConfig+0x270>
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d003      	beq.n	800ad14 <UART_SetConfig+0x250>
 800ad0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad10:	d008      	beq.n	800ad24 <UART_SetConfig+0x260>
 800ad12:	e00f      	b.n	800ad34 <UART_SetConfig+0x270>
 800ad14:	2300      	movs	r3, #0
 800ad16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad1a:	e052      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ad1c:	2302      	movs	r3, #2
 800ad1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad22:	e04e      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ad24:	2304      	movs	r3, #4
 800ad26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad2a:	e04a      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ad2c:	2308      	movs	r3, #8
 800ad2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad32:	e046      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ad34:	2310      	movs	r3, #16
 800ad36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad3a:	e042      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a17      	ldr	r2, [pc, #92]	@ (800ada0 <UART_SetConfig+0x2dc>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d13a      	bne.n	800adbc <UART_SetConfig+0x2f8>
 800ad46:	4b18      	ldr	r3, [pc, #96]	@ (800ada8 <UART_SetConfig+0x2e4>)
 800ad48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ad50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad54:	d01a      	beq.n	800ad8c <UART_SetConfig+0x2c8>
 800ad56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad5a:	d81b      	bhi.n	800ad94 <UART_SetConfig+0x2d0>
 800ad5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad60:	d00c      	beq.n	800ad7c <UART_SetConfig+0x2b8>
 800ad62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad66:	d815      	bhi.n	800ad94 <UART_SetConfig+0x2d0>
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d003      	beq.n	800ad74 <UART_SetConfig+0x2b0>
 800ad6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad70:	d008      	beq.n	800ad84 <UART_SetConfig+0x2c0>
 800ad72:	e00f      	b.n	800ad94 <UART_SetConfig+0x2d0>
 800ad74:	2300      	movs	r3, #0
 800ad76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad7a:	e022      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ad7c:	2302      	movs	r3, #2
 800ad7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad82:	e01e      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ad84:	2304      	movs	r3, #4
 800ad86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad8a:	e01a      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ad8c:	2308      	movs	r3, #8
 800ad8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad92:	e016      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ad94:	2310      	movs	r3, #16
 800ad96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad9a:	e012      	b.n	800adc2 <UART_SetConfig+0x2fe>
 800ad9c:	cfff69f3 	.word	0xcfff69f3
 800ada0:	40008000 	.word	0x40008000
 800ada4:	40013800 	.word	0x40013800
 800ada8:	40021000 	.word	0x40021000
 800adac:	40004400 	.word	0x40004400
 800adb0:	40004800 	.word	0x40004800
 800adb4:	40004c00 	.word	0x40004c00
 800adb8:	40005000 	.word	0x40005000
 800adbc:	2310      	movs	r3, #16
 800adbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4aae      	ldr	r2, [pc, #696]	@ (800b080 <UART_SetConfig+0x5bc>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	f040 8097 	bne.w	800aefc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800adce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800add2:	2b08      	cmp	r3, #8
 800add4:	d823      	bhi.n	800ae1e <UART_SetConfig+0x35a>
 800add6:	a201      	add	r2, pc, #4	@ (adr r2, 800addc <UART_SetConfig+0x318>)
 800add8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800addc:	0800ae01 	.word	0x0800ae01
 800ade0:	0800ae1f 	.word	0x0800ae1f
 800ade4:	0800ae09 	.word	0x0800ae09
 800ade8:	0800ae1f 	.word	0x0800ae1f
 800adec:	0800ae0f 	.word	0x0800ae0f
 800adf0:	0800ae1f 	.word	0x0800ae1f
 800adf4:	0800ae1f 	.word	0x0800ae1f
 800adf8:	0800ae1f 	.word	0x0800ae1f
 800adfc:	0800ae17 	.word	0x0800ae17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae00:	f7fc f812 	bl	8006e28 <HAL_RCC_GetPCLK1Freq>
 800ae04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae06:	e010      	b.n	800ae2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae08:	4b9e      	ldr	r3, [pc, #632]	@ (800b084 <UART_SetConfig+0x5c0>)
 800ae0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae0c:	e00d      	b.n	800ae2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae0e:	f7fb ff9d 	bl	8006d4c <HAL_RCC_GetSysClockFreq>
 800ae12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae14:	e009      	b.n	800ae2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae1c:	e005      	b.n	800ae2a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ae28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f000 8130 	beq.w	800b092 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae36:	4a94      	ldr	r2, [pc, #592]	@ (800b088 <UART_SetConfig+0x5c4>)
 800ae38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae40:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	685a      	ldr	r2, [r3, #4]
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	005b      	lsls	r3, r3, #1
 800ae4e:	4413      	add	r3, r2
 800ae50:	69ba      	ldr	r2, [r7, #24]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d305      	bcc.n	800ae62 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae5c:	69ba      	ldr	r2, [r7, #24]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d903      	bls.n	800ae6a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae68:	e113      	b.n	800b092 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	60bb      	str	r3, [r7, #8]
 800ae70:	60fa      	str	r2, [r7, #12]
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae76:	4a84      	ldr	r2, [pc, #528]	@ (800b088 <UART_SetConfig+0x5c4>)
 800ae78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	2200      	movs	r2, #0
 800ae80:	603b      	str	r3, [r7, #0]
 800ae82:	607a      	str	r2, [r7, #4]
 800ae84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae8c:	f7f5 ff98 	bl	8000dc0 <__aeabi_uldivmod>
 800ae90:	4602      	mov	r2, r0
 800ae92:	460b      	mov	r3, r1
 800ae94:	4610      	mov	r0, r2
 800ae96:	4619      	mov	r1, r3
 800ae98:	f04f 0200 	mov.w	r2, #0
 800ae9c:	f04f 0300 	mov.w	r3, #0
 800aea0:	020b      	lsls	r3, r1, #8
 800aea2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aea6:	0202      	lsls	r2, r0, #8
 800aea8:	6979      	ldr	r1, [r7, #20]
 800aeaa:	6849      	ldr	r1, [r1, #4]
 800aeac:	0849      	lsrs	r1, r1, #1
 800aeae:	2000      	movs	r0, #0
 800aeb0:	460c      	mov	r4, r1
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	eb12 0804 	adds.w	r8, r2, r4
 800aeb8:	eb43 0905 	adc.w	r9, r3, r5
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	469a      	mov	sl, r3
 800aec4:	4693      	mov	fp, r2
 800aec6:	4652      	mov	r2, sl
 800aec8:	465b      	mov	r3, fp
 800aeca:	4640      	mov	r0, r8
 800aecc:	4649      	mov	r1, r9
 800aece:	f7f5 ff77 	bl	8000dc0 <__aeabi_uldivmod>
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	4613      	mov	r3, r2
 800aed8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aee0:	d308      	bcc.n	800aef4 <UART_SetConfig+0x430>
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aee8:	d204      	bcs.n	800aef4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	6a3a      	ldr	r2, [r7, #32]
 800aef0:	60da      	str	r2, [r3, #12]
 800aef2:	e0ce      	b.n	800b092 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aefa:	e0ca      	b.n	800b092 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	69db      	ldr	r3, [r3, #28]
 800af00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af04:	d166      	bne.n	800afd4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800af06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af0a:	2b08      	cmp	r3, #8
 800af0c:	d827      	bhi.n	800af5e <UART_SetConfig+0x49a>
 800af0e:	a201      	add	r2, pc, #4	@ (adr r2, 800af14 <UART_SetConfig+0x450>)
 800af10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af14:	0800af39 	.word	0x0800af39
 800af18:	0800af41 	.word	0x0800af41
 800af1c:	0800af49 	.word	0x0800af49
 800af20:	0800af5f 	.word	0x0800af5f
 800af24:	0800af4f 	.word	0x0800af4f
 800af28:	0800af5f 	.word	0x0800af5f
 800af2c:	0800af5f 	.word	0x0800af5f
 800af30:	0800af5f 	.word	0x0800af5f
 800af34:	0800af57 	.word	0x0800af57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af38:	f7fb ff76 	bl	8006e28 <HAL_RCC_GetPCLK1Freq>
 800af3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af3e:	e014      	b.n	800af6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af40:	f7fb ff88 	bl	8006e54 <HAL_RCC_GetPCLK2Freq>
 800af44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af46:	e010      	b.n	800af6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af48:	4b4e      	ldr	r3, [pc, #312]	@ (800b084 <UART_SetConfig+0x5c0>)
 800af4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af4c:	e00d      	b.n	800af6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af4e:	f7fb fefd 	bl	8006d4c <HAL_RCC_GetSysClockFreq>
 800af52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af54:	e009      	b.n	800af6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af5c:	e005      	b.n	800af6a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800af5e:	2300      	movs	r3, #0
 800af60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800af68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f000 8090 	beq.w	800b092 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af76:	4a44      	ldr	r2, [pc, #272]	@ (800b088 <UART_SetConfig+0x5c4>)
 800af78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af7c:	461a      	mov	r2, r3
 800af7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af80:	fbb3 f3f2 	udiv	r3, r3, r2
 800af84:	005a      	lsls	r2, r3, #1
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	085b      	lsrs	r3, r3, #1
 800af8c:	441a      	add	r2, r3
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	fbb2 f3f3 	udiv	r3, r2, r3
 800af96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af98:	6a3b      	ldr	r3, [r7, #32]
 800af9a:	2b0f      	cmp	r3, #15
 800af9c:	d916      	bls.n	800afcc <UART_SetConfig+0x508>
 800af9e:	6a3b      	ldr	r3, [r7, #32]
 800afa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afa4:	d212      	bcs.n	800afcc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afa6:	6a3b      	ldr	r3, [r7, #32]
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	f023 030f 	bic.w	r3, r3, #15
 800afae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800afb0:	6a3b      	ldr	r3, [r7, #32]
 800afb2:	085b      	lsrs	r3, r3, #1
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	f003 0307 	and.w	r3, r3, #7
 800afba:	b29a      	uxth	r2, r3
 800afbc:	8bfb      	ldrh	r3, [r7, #30]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	8bfa      	ldrh	r2, [r7, #30]
 800afc8:	60da      	str	r2, [r3, #12]
 800afca:	e062      	b.n	800b092 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800afd2:	e05e      	b.n	800b092 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800afd4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800afd8:	2b08      	cmp	r3, #8
 800afda:	d828      	bhi.n	800b02e <UART_SetConfig+0x56a>
 800afdc:	a201      	add	r2, pc, #4	@ (adr r2, 800afe4 <UART_SetConfig+0x520>)
 800afde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe2:	bf00      	nop
 800afe4:	0800b009 	.word	0x0800b009
 800afe8:	0800b011 	.word	0x0800b011
 800afec:	0800b019 	.word	0x0800b019
 800aff0:	0800b02f 	.word	0x0800b02f
 800aff4:	0800b01f 	.word	0x0800b01f
 800aff8:	0800b02f 	.word	0x0800b02f
 800affc:	0800b02f 	.word	0x0800b02f
 800b000:	0800b02f 	.word	0x0800b02f
 800b004:	0800b027 	.word	0x0800b027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b008:	f7fb ff0e 	bl	8006e28 <HAL_RCC_GetPCLK1Freq>
 800b00c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b00e:	e014      	b.n	800b03a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b010:	f7fb ff20 	bl	8006e54 <HAL_RCC_GetPCLK2Freq>
 800b014:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b016:	e010      	b.n	800b03a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b018:	4b1a      	ldr	r3, [pc, #104]	@ (800b084 <UART_SetConfig+0x5c0>)
 800b01a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b01c:	e00d      	b.n	800b03a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b01e:	f7fb fe95 	bl	8006d4c <HAL_RCC_GetSysClockFreq>
 800b022:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b024:	e009      	b.n	800b03a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b02a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b02c:	e005      	b.n	800b03a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b02e:	2300      	movs	r3, #0
 800b030:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b038:	bf00      	nop
    }

    if (pclk != 0U)
 800b03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d028      	beq.n	800b092 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b044:	4a10      	ldr	r2, [pc, #64]	@ (800b088 <UART_SetConfig+0x5c4>)
 800b046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b04a:	461a      	mov	r2, r3
 800b04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	085b      	lsrs	r3, r3, #1
 800b058:	441a      	add	r2, r3
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b062:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b064:	6a3b      	ldr	r3, [r7, #32]
 800b066:	2b0f      	cmp	r3, #15
 800b068:	d910      	bls.n	800b08c <UART_SetConfig+0x5c8>
 800b06a:	6a3b      	ldr	r3, [r7, #32]
 800b06c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b070:	d20c      	bcs.n	800b08c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	b29a      	uxth	r2, r3
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	60da      	str	r2, [r3, #12]
 800b07c:	e009      	b.n	800b092 <UART_SetConfig+0x5ce>
 800b07e:	bf00      	nop
 800b080:	40008000 	.word	0x40008000
 800b084:	00f42400 	.word	0x00f42400
 800b088:	0800c894 	.word	0x0800c894
      }
      else
      {
        ret = HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	2201      	movs	r2, #1
 800b096:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2201      	movs	r2, #1
 800b09e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b0ae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3730      	adds	r7, #48	@ 0x30
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b0bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c8:	f003 0308 	and.w	r3, r3, #8
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00a      	beq.n	800b0e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	430a      	orrs	r2, r1
 800b0e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00a      	beq.n	800b108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	430a      	orrs	r2, r1
 800b106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b10c:	f003 0302 	and.w	r3, r3, #2
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00a      	beq.n	800b12a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	430a      	orrs	r2, r1
 800b128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b12e:	f003 0304 	and.w	r3, r3, #4
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00a      	beq.n	800b14c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	430a      	orrs	r2, r1
 800b14a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b150:	f003 0310 	and.w	r3, r3, #16
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00a      	beq.n	800b16e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	430a      	orrs	r2, r1
 800b16c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b172:	f003 0320 	and.w	r3, r3, #32
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00a      	beq.n	800b190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	430a      	orrs	r2, r1
 800b18e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d01a      	beq.n	800b1d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	430a      	orrs	r2, r1
 800b1b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1ba:	d10a      	bne.n	800b1d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	430a      	orrs	r2, r1
 800b1d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00a      	beq.n	800b1f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	430a      	orrs	r2, r1
 800b1f2:	605a      	str	r2, [r3, #4]
  }
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b098      	sub	sp, #96	@ 0x60
 800b204:	af02      	add	r7, sp, #8
 800b206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b210:	f7fa fa82 	bl	8005718 <HAL_GetTick>
 800b214:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f003 0308 	and.w	r3, r3, #8
 800b220:	2b08      	cmp	r3, #8
 800b222:	d12f      	bne.n	800b284 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b224:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b228:	9300      	str	r3, [sp, #0]
 800b22a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b22c:	2200      	movs	r2, #0
 800b22e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f88e 	bl	800b354 <UART_WaitOnFlagUntilTimeout>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d022      	beq.n	800b284 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b246:	e853 3f00 	ldrex	r3, [r3]
 800b24a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b24e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b252:	653b      	str	r3, [r7, #80]	@ 0x50
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	461a      	mov	r2, r3
 800b25a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b25c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b25e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b260:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b262:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b264:	e841 2300 	strex	r3, r2, [r1]
 800b268:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b26a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1e6      	bne.n	800b23e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2220      	movs	r2, #32
 800b274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b280:	2303      	movs	r3, #3
 800b282:	e063      	b.n	800b34c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0304 	and.w	r3, r3, #4
 800b28e:	2b04      	cmp	r3, #4
 800b290:	d149      	bne.n	800b326 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b292:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b29a:	2200      	movs	r2, #0
 800b29c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 f857 	bl	800b354 <UART_WaitOnFlagUntilTimeout>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d03c      	beq.n	800b326 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b4:	e853 3f00 	ldrex	r3, [r3]
 800b2b8:	623b      	str	r3, [r7, #32]
   return(result);
 800b2ba:	6a3b      	ldr	r3, [r7, #32]
 800b2bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2d2:	e841 2300 	strex	r3, r2, [r1]
 800b2d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1e6      	bne.n	800b2ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	e853 3f00 	ldrex	r3, [r3]
 800b2ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f023 0301 	bic.w	r3, r3, #1
 800b2f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	3308      	adds	r3, #8
 800b2fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2fe:	61fa      	str	r2, [r7, #28]
 800b300:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b302:	69b9      	ldr	r1, [r7, #24]
 800b304:	69fa      	ldr	r2, [r7, #28]
 800b306:	e841 2300 	strex	r3, r2, [r1]
 800b30a:	617b      	str	r3, [r7, #20]
   return(result);
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1e5      	bne.n	800b2de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2220      	movs	r2, #32
 800b316:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b322:	2303      	movs	r3, #3
 800b324:	e012      	b.n	800b34c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2220      	movs	r2, #32
 800b32a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2220      	movs	r2, #32
 800b332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3758      	adds	r7, #88	@ 0x58
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	603b      	str	r3, [r7, #0]
 800b360:	4613      	mov	r3, r2
 800b362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b364:	e04f      	b.n	800b406 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36c:	d04b      	beq.n	800b406 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b36e:	f7fa f9d3 	bl	8005718 <HAL_GetTick>
 800b372:	4602      	mov	r2, r0
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	69ba      	ldr	r2, [r7, #24]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d302      	bcc.n	800b384 <UART_WaitOnFlagUntilTimeout+0x30>
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b384:	2303      	movs	r3, #3
 800b386:	e04e      	b.n	800b426 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 0304 	and.w	r3, r3, #4
 800b392:	2b00      	cmp	r3, #0
 800b394:	d037      	beq.n	800b406 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	2b80      	cmp	r3, #128	@ 0x80
 800b39a:	d034      	beq.n	800b406 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	2b40      	cmp	r3, #64	@ 0x40
 800b3a0:	d031      	beq.n	800b406 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	69db      	ldr	r3, [r3, #28]
 800b3a8:	f003 0308 	and.w	r3, r3, #8
 800b3ac:	2b08      	cmp	r3, #8
 800b3ae:	d110      	bne.n	800b3d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2208      	movs	r2, #8
 800b3b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f000 f920 	bl	800b5fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2208      	movs	r2, #8
 800b3c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e029      	b.n	800b426 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	69db      	ldr	r3, [r3, #28]
 800b3d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b3dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3e0:	d111      	bne.n	800b406 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b3ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 f906 	bl	800b5fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2220      	movs	r2, #32
 800b3f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	e00f      	b.n	800b426 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	69da      	ldr	r2, [r3, #28]
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	4013      	ands	r3, r2
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	429a      	cmp	r2, r3
 800b414:	bf0c      	ite	eq
 800b416:	2301      	moveq	r3, #1
 800b418:	2300      	movne	r3, #0
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	461a      	mov	r2, r3
 800b41e:	79fb      	ldrb	r3, [r7, #7]
 800b420:	429a      	cmp	r2, r3
 800b422:	d0a0      	beq.n	800b366 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
	...

0800b430 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b096      	sub	sp, #88	@ 0x58
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	4613      	mov	r3, r2
 800b43c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	88fa      	ldrh	r2, [r7, #6]
 800b448:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2222      	movs	r2, #34	@ 0x22
 800b458:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b462:	2b00      	cmp	r3, #0
 800b464:	d02d      	beq.n	800b4c2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b46c:	4a40      	ldr	r2, [pc, #256]	@ (800b570 <UART_Start_Receive_DMA+0x140>)
 800b46e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b476:	4a3f      	ldr	r2, [pc, #252]	@ (800b574 <UART_Start_Receive_DMA+0x144>)
 800b478:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b480:	4a3d      	ldr	r2, [pc, #244]	@ (800b578 <UART_Start_Receive_DMA+0x148>)
 800b482:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b48a:	2200      	movs	r2, #0
 800b48c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	3324      	adds	r3, #36	@ 0x24
 800b49a:	4619      	mov	r1, r3
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	88fb      	ldrh	r3, [r7, #6]
 800b4a4:	f7fa fafc 	bl	8005aa0 <HAL_DMA_Start_IT>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d009      	beq.n	800b4c2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2210      	movs	r2, #16
 800b4b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2220      	movs	r2, #32
 800b4ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e051      	b.n	800b566 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	691b      	ldr	r3, [r3, #16]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d018      	beq.n	800b4fc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4d2:	e853 3f00 	ldrex	r3, [r3]
 800b4d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b4de:	657b      	str	r3, [r7, #84]	@ 0x54
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4ea:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b4ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4f0:	e841 2300 	strex	r3, r2, [r1]
 800b4f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b4f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d1e6      	bne.n	800b4ca <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	3308      	adds	r3, #8
 800b502:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b506:	e853 3f00 	ldrex	r3, [r3]
 800b50a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b50e:	f043 0301 	orr.w	r3, r3, #1
 800b512:	653b      	str	r3, [r7, #80]	@ 0x50
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	3308      	adds	r3, #8
 800b51a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b51c:	637a      	str	r2, [r7, #52]	@ 0x34
 800b51e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b520:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b522:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b524:	e841 2300 	strex	r3, r2, [r1]
 800b528:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1e5      	bne.n	800b4fc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	3308      	adds	r3, #8
 800b536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	e853 3f00 	ldrex	r3, [r3]
 800b53e:	613b      	str	r3, [r7, #16]
   return(result);
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3308      	adds	r3, #8
 800b54e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b550:	623a      	str	r2, [r7, #32]
 800b552:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b554:	69f9      	ldr	r1, [r7, #28]
 800b556:	6a3a      	ldr	r2, [r7, #32]
 800b558:	e841 2300 	strex	r3, r2, [r1]
 800b55c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1e5      	bne.n	800b530 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3758      	adds	r7, #88	@ 0x58
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	0800b789 	.word	0x0800b789
 800b574:	0800b8bd 	.word	0x0800b8bd
 800b578:	0800b903 	.word	0x0800b903

0800b57c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b08f      	sub	sp, #60	@ 0x3c
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	e853 3f00 	ldrex	r3, [r3]
 800b590:	61fb      	str	r3, [r7, #28]
   return(result);
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b598:	637b      	str	r3, [r7, #52]	@ 0x34
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5a4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b5a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5aa:	e841 2300 	strex	r3, r2, [r1]
 800b5ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1e6      	bne.n	800b584 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	3308      	adds	r3, #8
 800b5bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	e853 3f00 	ldrex	r3, [r3]
 800b5c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b5cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	3308      	adds	r3, #8
 800b5d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5d6:	61ba      	str	r2, [r7, #24]
 800b5d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5da:	6979      	ldr	r1, [r7, #20]
 800b5dc:	69ba      	ldr	r2, [r7, #24]
 800b5de:	e841 2300 	strex	r3, r2, [r1]
 800b5e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1e5      	bne.n	800b5b6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2220      	movs	r2, #32
 800b5ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b5f2:	bf00      	nop
 800b5f4:	373c      	adds	r7, #60	@ 0x3c
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b5fe:	b480      	push	{r7}
 800b600:	b095      	sub	sp, #84	@ 0x54
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b60e:	e853 3f00 	ldrex	r3, [r3]
 800b612:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b616:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b61a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	461a      	mov	r2, r3
 800b622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b624:	643b      	str	r3, [r7, #64]	@ 0x40
 800b626:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b628:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b62a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b62c:	e841 2300 	strex	r3, r2, [r1]
 800b630:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b634:	2b00      	cmp	r3, #0
 800b636:	d1e6      	bne.n	800b606 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	3308      	adds	r3, #8
 800b63e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b640:	6a3b      	ldr	r3, [r7, #32]
 800b642:	e853 3f00 	ldrex	r3, [r3]
 800b646:	61fb      	str	r3, [r7, #28]
   return(result);
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b64e:	f023 0301 	bic.w	r3, r3, #1
 800b652:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3308      	adds	r3, #8
 800b65a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b65c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b65e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b664:	e841 2300 	strex	r3, r2, [r1]
 800b668:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1e3      	bne.n	800b638 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b674:	2b01      	cmp	r3, #1
 800b676:	d118      	bne.n	800b6aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	e853 3f00 	ldrex	r3, [r3]
 800b684:	60bb      	str	r3, [r7, #8]
   return(result);
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	f023 0310 	bic.w	r3, r3, #16
 800b68c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b696:	61bb      	str	r3, [r7, #24]
 800b698:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69a:	6979      	ldr	r1, [r7, #20]
 800b69c:	69ba      	ldr	r2, [r7, #24]
 800b69e:	e841 2300 	strex	r3, r2, [r1]
 800b6a2:	613b      	str	r3, [r7, #16]
   return(result);
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1e6      	bne.n	800b678 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2220      	movs	r2, #32
 800b6ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b6be:	bf00      	nop
 800b6c0:	3754      	adds	r7, #84	@ 0x54
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b090      	sub	sp, #64	@ 0x40
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 0320 	and.w	r3, r3, #32
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d137      	bne.n	800b756 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b6e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b6ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3308      	adds	r3, #8
 800b6f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f8:	e853 3f00 	ldrex	r3, [r3]
 800b6fc:	623b      	str	r3, [r7, #32]
   return(result);
 800b6fe:	6a3b      	ldr	r3, [r7, #32]
 800b700:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b704:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	3308      	adds	r3, #8
 800b70c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b70e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b710:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b712:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b716:	e841 2300 	strex	r3, r2, [r1]
 800b71a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1e5      	bne.n	800b6ee <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	e853 3f00 	ldrex	r3, [r3]
 800b72e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b736:	637b      	str	r3, [r7, #52]	@ 0x34
 800b738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	461a      	mov	r2, r3
 800b73e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b740:	61fb      	str	r3, [r7, #28]
 800b742:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b744:	69b9      	ldr	r1, [r7, #24]
 800b746:	69fa      	ldr	r2, [r7, #28]
 800b748:	e841 2300 	strex	r3, r2, [r1]
 800b74c:	617b      	str	r3, [r7, #20]
   return(result);
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1e6      	bne.n	800b722 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b754:	e004      	b.n	800b760 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b758:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b75c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b75e:	4798      	blx	r3
}
 800b760:	bf00      	nop
 800b762:	3740      	adds	r7, #64	@ 0x40
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b774:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b780:	bf00      	nop
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b09c      	sub	sp, #112	@ 0x70
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b794:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 0320 	and.w	r3, r3, #32
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d171      	bne.n	800b888 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b7a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7b4:	e853 3f00 	ldrex	r3, [r3]
 800b7b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b7ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b7c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b7ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b7cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b7d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b7d2:	e841 2300 	strex	r3, r2, [r1]
 800b7d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b7d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1e6      	bne.n	800b7ac <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	3308      	adds	r3, #8
 800b7e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7e8:	e853 3f00 	ldrex	r3, [r3]
 800b7ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f0:	f023 0301 	bic.w	r3, r3, #1
 800b7f4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b7f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	3308      	adds	r3, #8
 800b7fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b7fe:	647a      	str	r2, [r7, #68]	@ 0x44
 800b800:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b802:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b804:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b806:	e841 2300 	strex	r3, r2, [r1]
 800b80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b80c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1e5      	bne.n	800b7de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	3308      	adds	r3, #8
 800b818:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b81c:	e853 3f00 	ldrex	r3, [r3]
 800b820:	623b      	str	r3, [r7, #32]
   return(result);
 800b822:	6a3b      	ldr	r3, [r7, #32]
 800b824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b828:	663b      	str	r3, [r7, #96]	@ 0x60
 800b82a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	3308      	adds	r3, #8
 800b830:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b832:	633a      	str	r2, [r7, #48]	@ 0x30
 800b834:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b83a:	e841 2300 	strex	r3, r2, [r1]
 800b83e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1e5      	bne.n	800b812 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b848:	2220      	movs	r2, #32
 800b84a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b84e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b852:	2b01      	cmp	r3, #1
 800b854:	d118      	bne.n	800b888 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	e853 3f00 	ldrex	r3, [r3]
 800b862:	60fb      	str	r3, [r7, #12]
   return(result);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f023 0310 	bic.w	r3, r3, #16
 800b86a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b86c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	461a      	mov	r2, r3
 800b872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b874:	61fb      	str	r3, [r7, #28]
 800b876:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b878:	69b9      	ldr	r1, [r7, #24]
 800b87a:	69fa      	ldr	r2, [r7, #28]
 800b87c:	e841 2300 	strex	r3, r2, [r1]
 800b880:	617b      	str	r3, [r7, #20]
   return(result);
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1e6      	bne.n	800b856 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b888:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b88a:	2200      	movs	r2, #0
 800b88c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b88e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b890:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b892:	2b01      	cmp	r3, #1
 800b894:	d109      	bne.n	800b8aa <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b898:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b89c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b89e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b8a2:	4611      	mov	r1, r2
 800b8a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b8a6:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8a8:	e004      	b.n	800b8b4 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b8aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b8b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b8b2:	4798      	blx	r3
}
 800b8b4:	bf00      	nop
 800b8b6:	3770      	adds	r7, #112	@ 0x70
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8c8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d10b      	bne.n	800b8f0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b8e4:	0852      	lsrs	r2, r2, #1
 800b8e6:	b292      	uxth	r2, r2
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8ee:	e004      	b.n	800b8fa <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	4798      	blx	r3
}
 800b8fa:	bf00      	nop
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b086      	sub	sp, #24
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b90e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b916:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b91e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b92a:	2b80      	cmp	r3, #128	@ 0x80
 800b92c:	d109      	bne.n	800b942 <UART_DMAError+0x40>
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	2b21      	cmp	r3, #33	@ 0x21
 800b932:	d106      	bne.n	800b942 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	2200      	movs	r2, #0
 800b938:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b93c:	6978      	ldr	r0, [r7, #20]
 800b93e:	f7ff fe1d 	bl	800b57c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b94c:	2b40      	cmp	r3, #64	@ 0x40
 800b94e:	d109      	bne.n	800b964 <UART_DMAError+0x62>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2b22      	cmp	r3, #34	@ 0x22
 800b954:	d106      	bne.n	800b964 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	2200      	movs	r2, #0
 800b95a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b95e:	6978      	ldr	r0, [r7, #20]
 800b960:	f7ff fe4d 	bl	800b5fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b96a:	f043 0210 	orr.w	r2, r3, #16
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b97a:	6978      	ldr	r0, [r7, #20]
 800b97c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b97e:	bf00      	nop
 800b980:	3718      	adds	r7, #24
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}

0800b986 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b986:	b580      	push	{r7, lr}
 800b988:	b084      	sub	sp, #16
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b992:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9a6:	bf00      	nop
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b088      	sub	sp, #32
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	e853 3f00 	ldrex	r3, [r3]
 800b9c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9ca:	61fb      	str	r3, [r7, #28]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	61bb      	str	r3, [r7, #24]
 800b9d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d8:	6979      	ldr	r1, [r7, #20]
 800b9da:	69ba      	ldr	r2, [r7, #24]
 800b9dc:	e841 2300 	strex	r3, r2, [r1]
 800b9e0:	613b      	str	r3, [r7, #16]
   return(result);
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d1e6      	bne.n	800b9b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2220      	movs	r2, #32
 800b9ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba00:	bf00      	nop
 800ba02:	3720      	adds	r7, #32
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba10:	bf00      	nop
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ba24:	bf00      	nop
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ba38:	bf00      	nop
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d101      	bne.n	800ba5a <HAL_UARTEx_DisableFifoMode+0x16>
 800ba56:	2302      	movs	r3, #2
 800ba58:	e027      	b.n	800baaa <HAL_UARTEx_DisableFifoMode+0x66>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2224      	movs	r2, #36	@ 0x24
 800ba66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f022 0201 	bic.w	r2, r2, #1
 800ba80:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ba88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	68fa      	ldr	r2, [r7, #12]
 800ba96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2220      	movs	r2, #32
 800ba9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3714      	adds	r7, #20
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b084      	sub	sp, #16
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d101      	bne.n	800bace <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800baca:	2302      	movs	r3, #2
 800bacc:	e02d      	b.n	800bb2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2201      	movs	r2, #1
 800bad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2224      	movs	r2, #36	@ 0x24
 800bada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f022 0201 	bic.w	r2, r2, #1
 800baf4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	683a      	ldr	r2, [r7, #0]
 800bb06:	430a      	orrs	r2, r1
 800bb08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f850 	bl	800bbb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2220      	movs	r2, #32
 800bb1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b084      	sub	sp, #16
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
 800bb3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d101      	bne.n	800bb4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb46:	2302      	movs	r3, #2
 800bb48:	e02d      	b.n	800bba6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2224      	movs	r2, #36	@ 0x24
 800bb56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f022 0201 	bic.w	r2, r2, #1
 800bb70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	683a      	ldr	r2, [r7, #0]
 800bb82:	430a      	orrs	r2, r1
 800bb84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 f812 	bl	800bbb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2220      	movs	r2, #32
 800bb98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
	...

0800bbb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d108      	bne.n	800bbd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bbd0:	e031      	b.n	800bc36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bbd2:	2308      	movs	r3, #8
 800bbd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bbd6:	2308      	movs	r3, #8
 800bbd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	0e5b      	lsrs	r3, r3, #25
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	f003 0307 	and.w	r3, r3, #7
 800bbe8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	0f5b      	lsrs	r3, r3, #29
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	f003 0307 	and.w	r3, r3, #7
 800bbf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bbfa:	7bbb      	ldrb	r3, [r7, #14]
 800bbfc:	7b3a      	ldrb	r2, [r7, #12]
 800bbfe:	4911      	ldr	r1, [pc, #68]	@ (800bc44 <UARTEx_SetNbDataToProcess+0x94>)
 800bc00:	5c8a      	ldrb	r2, [r1, r2]
 800bc02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc06:	7b3a      	ldrb	r2, [r7, #12]
 800bc08:	490f      	ldr	r1, [pc, #60]	@ (800bc48 <UARTEx_SetNbDataToProcess+0x98>)
 800bc0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc18:	7bfb      	ldrb	r3, [r7, #15]
 800bc1a:	7b7a      	ldrb	r2, [r7, #13]
 800bc1c:	4909      	ldr	r1, [pc, #36]	@ (800bc44 <UARTEx_SetNbDataToProcess+0x94>)
 800bc1e:	5c8a      	ldrb	r2, [r1, r2]
 800bc20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc24:	7b7a      	ldrb	r2, [r7, #13]
 800bc26:	4908      	ldr	r1, [pc, #32]	@ (800bc48 <UARTEx_SetNbDataToProcess+0x98>)
 800bc28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc2e:	b29a      	uxth	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bc36:	bf00      	nop
 800bc38:	3714      	adds	r7, #20
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	0800c8ac 	.word	0x0800c8ac
 800bc48:	0800c8b4 	.word	0x0800c8b4

0800bc4c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	ed93 7a06 	vldr	s14, [r3, #24]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	edd3 7a07 	vldr	s15, [r3, #28]
 800bc62:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	edd3 7a08 	vldr	s15, [r3, #32]
 800bc6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	edd3 7a06 	vldr	s15, [r3, #24]
 800bc7c:	eeb1 7a67 	vneg.f32	s14, s15
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	edd3 7a08 	vldr	s15, [r3, #32]
 800bc86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bc8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a1a      	ldr	r2, [r3, #32]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d006      	beq.n	800bcb0 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	330c      	adds	r3, #12
 800bca6:	220c      	movs	r2, #12
 800bca8:	2100      	movs	r1, #0
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f000 f804 	bl	800bcb8 <memset>
  }

}
 800bcb0:	bf00      	nop
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <memset>:
 800bcb8:	4402      	add	r2, r0
 800bcba:	4603      	mov	r3, r0
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d100      	bne.n	800bcc2 <memset+0xa>
 800bcc0:	4770      	bx	lr
 800bcc2:	f803 1b01 	strb.w	r1, [r3], #1
 800bcc6:	e7f9      	b.n	800bcbc <memset+0x4>

0800bcc8 <__errno>:
 800bcc8:	4b01      	ldr	r3, [pc, #4]	@ (800bcd0 <__errno+0x8>)
 800bcca:	6818      	ldr	r0, [r3, #0]
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	2000023c 	.word	0x2000023c

0800bcd4 <__libc_init_array>:
 800bcd4:	b570      	push	{r4, r5, r6, lr}
 800bcd6:	4d0d      	ldr	r5, [pc, #52]	@ (800bd0c <__libc_init_array+0x38>)
 800bcd8:	4c0d      	ldr	r4, [pc, #52]	@ (800bd10 <__libc_init_array+0x3c>)
 800bcda:	1b64      	subs	r4, r4, r5
 800bcdc:	10a4      	asrs	r4, r4, #2
 800bcde:	2600      	movs	r6, #0
 800bce0:	42a6      	cmp	r6, r4
 800bce2:	d109      	bne.n	800bcf8 <__libc_init_array+0x24>
 800bce4:	4d0b      	ldr	r5, [pc, #44]	@ (800bd14 <__libc_init_array+0x40>)
 800bce6:	4c0c      	ldr	r4, [pc, #48]	@ (800bd18 <__libc_init_array+0x44>)
 800bce8:	f000 fdbc 	bl	800c864 <_init>
 800bcec:	1b64      	subs	r4, r4, r5
 800bcee:	10a4      	asrs	r4, r4, #2
 800bcf0:	2600      	movs	r6, #0
 800bcf2:	42a6      	cmp	r6, r4
 800bcf4:	d105      	bne.n	800bd02 <__libc_init_array+0x2e>
 800bcf6:	bd70      	pop	{r4, r5, r6, pc}
 800bcf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcfc:	4798      	blx	r3
 800bcfe:	3601      	adds	r6, #1
 800bd00:	e7ee      	b.n	800bce0 <__libc_init_array+0xc>
 800bd02:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd06:	4798      	blx	r3
 800bd08:	3601      	adds	r6, #1
 800bd0a:	e7f2      	b.n	800bcf2 <__libc_init_array+0x1e>
 800bd0c:	0800cc94 	.word	0x0800cc94
 800bd10:	0800cc94 	.word	0x0800cc94
 800bd14:	0800cc94 	.word	0x0800cc94
 800bd18:	0800cc98 	.word	0x0800cc98

0800bd1c <memcpy>:
 800bd1c:	440a      	add	r2, r1
 800bd1e:	4291      	cmp	r1, r2
 800bd20:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd24:	d100      	bne.n	800bd28 <memcpy+0xc>
 800bd26:	4770      	bx	lr
 800bd28:	b510      	push	{r4, lr}
 800bd2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd32:	4291      	cmp	r1, r2
 800bd34:	d1f9      	bne.n	800bd2a <memcpy+0xe>
 800bd36:	bd10      	pop	{r4, pc}

0800bd38 <sqrtf>:
 800bd38:	b508      	push	{r3, lr}
 800bd3a:	ed2d 8b02 	vpush	{d8}
 800bd3e:	eeb0 8a40 	vmov.f32	s16, s0
 800bd42:	f000 f8a1 	bl	800be88 <__ieee754_sqrtf>
 800bd46:	eeb4 8a48 	vcmp.f32	s16, s16
 800bd4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd4e:	d60c      	bvs.n	800bd6a <sqrtf+0x32>
 800bd50:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bd70 <sqrtf+0x38>
 800bd54:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd5c:	d505      	bpl.n	800bd6a <sqrtf+0x32>
 800bd5e:	f7ff ffb3 	bl	800bcc8 <__errno>
 800bd62:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bd66:	2321      	movs	r3, #33	@ 0x21
 800bd68:	6003      	str	r3, [r0, #0]
 800bd6a:	ecbd 8b02 	vpop	{d8}
 800bd6e:	bd08      	pop	{r3, pc}
 800bd70:	00000000 	.word	0x00000000

0800bd74 <cosf>:
 800bd74:	ee10 3a10 	vmov	r3, s0
 800bd78:	b507      	push	{r0, r1, r2, lr}
 800bd7a:	4a1e      	ldr	r2, [pc, #120]	@ (800bdf4 <cosf+0x80>)
 800bd7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d806      	bhi.n	800bd92 <cosf+0x1e>
 800bd84:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800bdf8 <cosf+0x84>
 800bd88:	b003      	add	sp, #12
 800bd8a:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd8e:	f000 b87f 	b.w	800be90 <__kernel_cosf>
 800bd92:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bd96:	d304      	bcc.n	800bda2 <cosf+0x2e>
 800bd98:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bd9c:	b003      	add	sp, #12
 800bd9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bda2:	4668      	mov	r0, sp
 800bda4:	f000 f914 	bl	800bfd0 <__ieee754_rem_pio2f>
 800bda8:	f000 0003 	and.w	r0, r0, #3
 800bdac:	2801      	cmp	r0, #1
 800bdae:	d009      	beq.n	800bdc4 <cosf+0x50>
 800bdb0:	2802      	cmp	r0, #2
 800bdb2:	d010      	beq.n	800bdd6 <cosf+0x62>
 800bdb4:	b9b0      	cbnz	r0, 800bde4 <cosf+0x70>
 800bdb6:	eddd 0a01 	vldr	s1, [sp, #4]
 800bdba:	ed9d 0a00 	vldr	s0, [sp]
 800bdbe:	f000 f867 	bl	800be90 <__kernel_cosf>
 800bdc2:	e7eb      	b.n	800bd9c <cosf+0x28>
 800bdc4:	eddd 0a01 	vldr	s1, [sp, #4]
 800bdc8:	ed9d 0a00 	vldr	s0, [sp]
 800bdcc:	f000 f8b8 	bl	800bf40 <__kernel_sinf>
 800bdd0:	eeb1 0a40 	vneg.f32	s0, s0
 800bdd4:	e7e2      	b.n	800bd9c <cosf+0x28>
 800bdd6:	eddd 0a01 	vldr	s1, [sp, #4]
 800bdda:	ed9d 0a00 	vldr	s0, [sp]
 800bdde:	f000 f857 	bl	800be90 <__kernel_cosf>
 800bde2:	e7f5      	b.n	800bdd0 <cosf+0x5c>
 800bde4:	eddd 0a01 	vldr	s1, [sp, #4]
 800bde8:	ed9d 0a00 	vldr	s0, [sp]
 800bdec:	2001      	movs	r0, #1
 800bdee:	f000 f8a7 	bl	800bf40 <__kernel_sinf>
 800bdf2:	e7d3      	b.n	800bd9c <cosf+0x28>
 800bdf4:	3f490fd8 	.word	0x3f490fd8
 800bdf8:	00000000 	.word	0x00000000

0800bdfc <sinf>:
 800bdfc:	ee10 3a10 	vmov	r3, s0
 800be00:	b507      	push	{r0, r1, r2, lr}
 800be02:	4a1f      	ldr	r2, [pc, #124]	@ (800be80 <sinf+0x84>)
 800be04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be08:	4293      	cmp	r3, r2
 800be0a:	d807      	bhi.n	800be1c <sinf+0x20>
 800be0c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800be84 <sinf+0x88>
 800be10:	2000      	movs	r0, #0
 800be12:	b003      	add	sp, #12
 800be14:	f85d eb04 	ldr.w	lr, [sp], #4
 800be18:	f000 b892 	b.w	800bf40 <__kernel_sinf>
 800be1c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800be20:	d304      	bcc.n	800be2c <sinf+0x30>
 800be22:	ee30 0a40 	vsub.f32	s0, s0, s0
 800be26:	b003      	add	sp, #12
 800be28:	f85d fb04 	ldr.w	pc, [sp], #4
 800be2c:	4668      	mov	r0, sp
 800be2e:	f000 f8cf 	bl	800bfd0 <__ieee754_rem_pio2f>
 800be32:	f000 0003 	and.w	r0, r0, #3
 800be36:	2801      	cmp	r0, #1
 800be38:	d00a      	beq.n	800be50 <sinf+0x54>
 800be3a:	2802      	cmp	r0, #2
 800be3c:	d00f      	beq.n	800be5e <sinf+0x62>
 800be3e:	b9c0      	cbnz	r0, 800be72 <sinf+0x76>
 800be40:	eddd 0a01 	vldr	s1, [sp, #4]
 800be44:	ed9d 0a00 	vldr	s0, [sp]
 800be48:	2001      	movs	r0, #1
 800be4a:	f000 f879 	bl	800bf40 <__kernel_sinf>
 800be4e:	e7ea      	b.n	800be26 <sinf+0x2a>
 800be50:	eddd 0a01 	vldr	s1, [sp, #4]
 800be54:	ed9d 0a00 	vldr	s0, [sp]
 800be58:	f000 f81a 	bl	800be90 <__kernel_cosf>
 800be5c:	e7e3      	b.n	800be26 <sinf+0x2a>
 800be5e:	eddd 0a01 	vldr	s1, [sp, #4]
 800be62:	ed9d 0a00 	vldr	s0, [sp]
 800be66:	2001      	movs	r0, #1
 800be68:	f000 f86a 	bl	800bf40 <__kernel_sinf>
 800be6c:	eeb1 0a40 	vneg.f32	s0, s0
 800be70:	e7d9      	b.n	800be26 <sinf+0x2a>
 800be72:	eddd 0a01 	vldr	s1, [sp, #4]
 800be76:	ed9d 0a00 	vldr	s0, [sp]
 800be7a:	f000 f809 	bl	800be90 <__kernel_cosf>
 800be7e:	e7f5      	b.n	800be6c <sinf+0x70>
 800be80:	3f490fd8 	.word	0x3f490fd8
 800be84:	00000000 	.word	0x00000000

0800be88 <__ieee754_sqrtf>:
 800be88:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800be8c:	4770      	bx	lr
	...

0800be90 <__kernel_cosf>:
 800be90:	ee10 3a10 	vmov	r3, s0
 800be94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be98:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800be9c:	eef0 6a40 	vmov.f32	s13, s0
 800bea0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bea4:	d204      	bcs.n	800beb0 <__kernel_cosf+0x20>
 800bea6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800beaa:	ee17 2a90 	vmov	r2, s15
 800beae:	b342      	cbz	r2, 800bf02 <__kernel_cosf+0x72>
 800beb0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800beb4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800bf20 <__kernel_cosf+0x90>
 800beb8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800bf24 <__kernel_cosf+0x94>
 800bebc:	4a1a      	ldr	r2, [pc, #104]	@ (800bf28 <__kernel_cosf+0x98>)
 800bebe:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bec2:	4293      	cmp	r3, r2
 800bec4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bf2c <__kernel_cosf+0x9c>
 800bec8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800becc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800bf30 <__kernel_cosf+0xa0>
 800bed0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bed4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800bf34 <__kernel_cosf+0xa4>
 800bed8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bedc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800bf38 <__kernel_cosf+0xa8>
 800bee0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bee4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800bee8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800beec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bef0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800bef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bef8:	d804      	bhi.n	800bf04 <__kernel_cosf+0x74>
 800befa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800befe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bf02:	4770      	bx	lr
 800bf04:	4a0d      	ldr	r2, [pc, #52]	@ (800bf3c <__kernel_cosf+0xac>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	bf9a      	itte	ls
 800bf0a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800bf0e:	ee07 3a10 	vmovls	s14, r3
 800bf12:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800bf16:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bf1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf1e:	e7ec      	b.n	800befa <__kernel_cosf+0x6a>
 800bf20:	ad47d74e 	.word	0xad47d74e
 800bf24:	310f74f6 	.word	0x310f74f6
 800bf28:	3e999999 	.word	0x3e999999
 800bf2c:	b493f27c 	.word	0xb493f27c
 800bf30:	37d00d01 	.word	0x37d00d01
 800bf34:	bab60b61 	.word	0xbab60b61
 800bf38:	3d2aaaab 	.word	0x3d2aaaab
 800bf3c:	3f480000 	.word	0x3f480000

0800bf40 <__kernel_sinf>:
 800bf40:	ee10 3a10 	vmov	r3, s0
 800bf44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf48:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bf4c:	d204      	bcs.n	800bf58 <__kernel_sinf+0x18>
 800bf4e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bf52:	ee17 3a90 	vmov	r3, s15
 800bf56:	b35b      	cbz	r3, 800bfb0 <__kernel_sinf+0x70>
 800bf58:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bf5c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bfb4 <__kernel_sinf+0x74>
 800bf60:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800bfb8 <__kernel_sinf+0x78>
 800bf64:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bf68:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800bfbc <__kernel_sinf+0x7c>
 800bf6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bf70:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800bfc0 <__kernel_sinf+0x80>
 800bf74:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bf78:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800bfc4 <__kernel_sinf+0x84>
 800bf7c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bf80:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bf84:	b930      	cbnz	r0, 800bf94 <__kernel_sinf+0x54>
 800bf86:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800bfc8 <__kernel_sinf+0x88>
 800bf8a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bf8e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bf92:	4770      	bx	lr
 800bf94:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bf98:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800bf9c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bfa0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bfa4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800bfcc <__kernel_sinf+0x8c>
 800bfa8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bfac:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	2f2ec9d3 	.word	0x2f2ec9d3
 800bfb8:	b2d72f34 	.word	0xb2d72f34
 800bfbc:	3638ef1b 	.word	0x3638ef1b
 800bfc0:	b9500d01 	.word	0xb9500d01
 800bfc4:	3c088889 	.word	0x3c088889
 800bfc8:	be2aaaab 	.word	0xbe2aaaab
 800bfcc:	3e2aaaab 	.word	0x3e2aaaab

0800bfd0 <__ieee754_rem_pio2f>:
 800bfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfd2:	ee10 6a10 	vmov	r6, s0
 800bfd6:	4b88      	ldr	r3, [pc, #544]	@ (800c1f8 <__ieee754_rem_pio2f+0x228>)
 800bfd8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800bfdc:	429d      	cmp	r5, r3
 800bfde:	b087      	sub	sp, #28
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	d805      	bhi.n	800bff0 <__ieee754_rem_pio2f+0x20>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	ed80 0a00 	vstr	s0, [r0]
 800bfea:	6043      	str	r3, [r0, #4]
 800bfec:	2000      	movs	r0, #0
 800bfee:	e022      	b.n	800c036 <__ieee754_rem_pio2f+0x66>
 800bff0:	4b82      	ldr	r3, [pc, #520]	@ (800c1fc <__ieee754_rem_pio2f+0x22c>)
 800bff2:	429d      	cmp	r5, r3
 800bff4:	d83a      	bhi.n	800c06c <__ieee754_rem_pio2f+0x9c>
 800bff6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bffa:	2e00      	cmp	r6, #0
 800bffc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800c200 <__ieee754_rem_pio2f+0x230>
 800c000:	4a80      	ldr	r2, [pc, #512]	@ (800c204 <__ieee754_rem_pio2f+0x234>)
 800c002:	f023 030f 	bic.w	r3, r3, #15
 800c006:	dd18      	ble.n	800c03a <__ieee754_rem_pio2f+0x6a>
 800c008:	4293      	cmp	r3, r2
 800c00a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c00e:	bf09      	itett	eq
 800c010:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800c208 <__ieee754_rem_pio2f+0x238>
 800c014:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800c20c <__ieee754_rem_pio2f+0x23c>
 800c018:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800c210 <__ieee754_rem_pio2f+0x240>
 800c01c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c020:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800c024:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c028:	ed80 7a00 	vstr	s14, [r0]
 800c02c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c030:	edc0 7a01 	vstr	s15, [r0, #4]
 800c034:	2001      	movs	r0, #1
 800c036:	b007      	add	sp, #28
 800c038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c03a:	4293      	cmp	r3, r2
 800c03c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c040:	bf09      	itett	eq
 800c042:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800c208 <__ieee754_rem_pio2f+0x238>
 800c046:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800c20c <__ieee754_rem_pio2f+0x23c>
 800c04a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800c210 <__ieee754_rem_pio2f+0x240>
 800c04e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c052:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c056:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c05a:	ed80 7a00 	vstr	s14, [r0]
 800c05e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c062:	edc0 7a01 	vstr	s15, [r0, #4]
 800c066:	f04f 30ff 	mov.w	r0, #4294967295
 800c06a:	e7e4      	b.n	800c036 <__ieee754_rem_pio2f+0x66>
 800c06c:	4b69      	ldr	r3, [pc, #420]	@ (800c214 <__ieee754_rem_pio2f+0x244>)
 800c06e:	429d      	cmp	r5, r3
 800c070:	d873      	bhi.n	800c15a <__ieee754_rem_pio2f+0x18a>
 800c072:	f000 f8dd 	bl	800c230 <fabsf>
 800c076:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c218 <__ieee754_rem_pio2f+0x248>
 800c07a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c07e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c086:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c08a:	ee17 0a90 	vmov	r0, s15
 800c08e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c200 <__ieee754_rem_pio2f+0x230>
 800c092:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c096:	281f      	cmp	r0, #31
 800c098:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c20c <__ieee754_rem_pio2f+0x23c>
 800c09c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0a0:	eeb1 6a47 	vneg.f32	s12, s14
 800c0a4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c0a8:	ee16 1a90 	vmov	r1, s13
 800c0ac:	dc09      	bgt.n	800c0c2 <__ieee754_rem_pio2f+0xf2>
 800c0ae:	4a5b      	ldr	r2, [pc, #364]	@ (800c21c <__ieee754_rem_pio2f+0x24c>)
 800c0b0:	1e47      	subs	r7, r0, #1
 800c0b2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c0b6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800c0ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d107      	bne.n	800c0d2 <__ieee754_rem_pio2f+0x102>
 800c0c2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800c0c6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800c0ca:	2a08      	cmp	r2, #8
 800c0cc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c0d0:	dc14      	bgt.n	800c0fc <__ieee754_rem_pio2f+0x12c>
 800c0d2:	6021      	str	r1, [r4, #0]
 800c0d4:	ed94 7a00 	vldr	s14, [r4]
 800c0d8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c0dc:	2e00      	cmp	r6, #0
 800c0de:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c0e2:	ed84 0a01 	vstr	s0, [r4, #4]
 800c0e6:	daa6      	bge.n	800c036 <__ieee754_rem_pio2f+0x66>
 800c0e8:	eeb1 7a47 	vneg.f32	s14, s14
 800c0ec:	eeb1 0a40 	vneg.f32	s0, s0
 800c0f0:	ed84 7a00 	vstr	s14, [r4]
 800c0f4:	ed84 0a01 	vstr	s0, [r4, #4]
 800c0f8:	4240      	negs	r0, r0
 800c0fa:	e79c      	b.n	800c036 <__ieee754_rem_pio2f+0x66>
 800c0fc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800c208 <__ieee754_rem_pio2f+0x238>
 800c100:	eef0 6a40 	vmov.f32	s13, s0
 800c104:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c108:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c10c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c110:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c210 <__ieee754_rem_pio2f+0x240>
 800c114:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c118:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c11c:	ee15 2a90 	vmov	r2, s11
 800c120:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c124:	1a5b      	subs	r3, r3, r1
 800c126:	2b19      	cmp	r3, #25
 800c128:	dc04      	bgt.n	800c134 <__ieee754_rem_pio2f+0x164>
 800c12a:	edc4 5a00 	vstr	s11, [r4]
 800c12e:	eeb0 0a66 	vmov.f32	s0, s13
 800c132:	e7cf      	b.n	800c0d4 <__ieee754_rem_pio2f+0x104>
 800c134:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c220 <__ieee754_rem_pio2f+0x250>
 800c138:	eeb0 0a66 	vmov.f32	s0, s13
 800c13c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c140:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c144:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800c224 <__ieee754_rem_pio2f+0x254>
 800c148:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c14c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c150:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c154:	ed84 7a00 	vstr	s14, [r4]
 800c158:	e7bc      	b.n	800c0d4 <__ieee754_rem_pio2f+0x104>
 800c15a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800c15e:	d306      	bcc.n	800c16e <__ieee754_rem_pio2f+0x19e>
 800c160:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c164:	edc0 7a01 	vstr	s15, [r0, #4]
 800c168:	edc0 7a00 	vstr	s15, [r0]
 800c16c:	e73e      	b.n	800bfec <__ieee754_rem_pio2f+0x1c>
 800c16e:	15ea      	asrs	r2, r5, #23
 800c170:	3a86      	subs	r2, #134	@ 0x86
 800c172:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c176:	ee07 3a90 	vmov	s15, r3
 800c17a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c17e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800c228 <__ieee754_rem_pio2f+0x258>
 800c182:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c186:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c18a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c18e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c192:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c196:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c19a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c19e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c1a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c1a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ae:	edcd 7a05 	vstr	s15, [sp, #20]
 800c1b2:	d11e      	bne.n	800c1f2 <__ieee754_rem_pio2f+0x222>
 800c1b4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1bc:	bf0c      	ite	eq
 800c1be:	2301      	moveq	r3, #1
 800c1c0:	2302      	movne	r3, #2
 800c1c2:	491a      	ldr	r1, [pc, #104]	@ (800c22c <__ieee754_rem_pio2f+0x25c>)
 800c1c4:	9101      	str	r1, [sp, #4]
 800c1c6:	2102      	movs	r1, #2
 800c1c8:	9100      	str	r1, [sp, #0]
 800c1ca:	a803      	add	r0, sp, #12
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	f000 f89d 	bl	800c30c <__kernel_rem_pio2f>
 800c1d2:	2e00      	cmp	r6, #0
 800c1d4:	f6bf af2f 	bge.w	800c036 <__ieee754_rem_pio2f+0x66>
 800c1d8:	edd4 7a00 	vldr	s15, [r4]
 800c1dc:	eef1 7a67 	vneg.f32	s15, s15
 800c1e0:	edc4 7a00 	vstr	s15, [r4]
 800c1e4:	edd4 7a01 	vldr	s15, [r4, #4]
 800c1e8:	eef1 7a67 	vneg.f32	s15, s15
 800c1ec:	edc4 7a01 	vstr	s15, [r4, #4]
 800c1f0:	e782      	b.n	800c0f8 <__ieee754_rem_pio2f+0x128>
 800c1f2:	2303      	movs	r3, #3
 800c1f4:	e7e5      	b.n	800c1c2 <__ieee754_rem_pio2f+0x1f2>
 800c1f6:	bf00      	nop
 800c1f8:	3f490fd8 	.word	0x3f490fd8
 800c1fc:	4016cbe3 	.word	0x4016cbe3
 800c200:	3fc90f80 	.word	0x3fc90f80
 800c204:	3fc90fd0 	.word	0x3fc90fd0
 800c208:	37354400 	.word	0x37354400
 800c20c:	37354443 	.word	0x37354443
 800c210:	2e85a308 	.word	0x2e85a308
 800c214:	43490f80 	.word	0x43490f80
 800c218:	3f22f984 	.word	0x3f22f984
 800c21c:	0800c8bc 	.word	0x0800c8bc
 800c220:	2e85a300 	.word	0x2e85a300
 800c224:	248d3132 	.word	0x248d3132
 800c228:	43800000 	.word	0x43800000
 800c22c:	0800c93c 	.word	0x0800c93c

0800c230 <fabsf>:
 800c230:	ee10 3a10 	vmov	r3, s0
 800c234:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c238:	ee00 3a10 	vmov	s0, r3
 800c23c:	4770      	bx	lr
	...

0800c240 <scalbnf>:
 800c240:	ee10 3a10 	vmov	r3, s0
 800c244:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c248:	d02b      	beq.n	800c2a2 <scalbnf+0x62>
 800c24a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c24e:	d302      	bcc.n	800c256 <scalbnf+0x16>
 800c250:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c254:	4770      	bx	lr
 800c256:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c25a:	d123      	bne.n	800c2a4 <scalbnf+0x64>
 800c25c:	4b24      	ldr	r3, [pc, #144]	@ (800c2f0 <scalbnf+0xb0>)
 800c25e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c2f4 <scalbnf+0xb4>
 800c262:	4298      	cmp	r0, r3
 800c264:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c268:	db17      	blt.n	800c29a <scalbnf+0x5a>
 800c26a:	ee10 3a10 	vmov	r3, s0
 800c26e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c272:	3a19      	subs	r2, #25
 800c274:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c278:	4288      	cmp	r0, r1
 800c27a:	dd15      	ble.n	800c2a8 <scalbnf+0x68>
 800c27c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c2f8 <scalbnf+0xb8>
 800c280:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c2fc <scalbnf+0xbc>
 800c284:	ee10 3a10 	vmov	r3, s0
 800c288:	eeb0 7a67 	vmov.f32	s14, s15
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	bfb8      	it	lt
 800c290:	eef0 7a66 	vmovlt.f32	s15, s13
 800c294:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c298:	4770      	bx	lr
 800c29a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c300 <scalbnf+0xc0>
 800c29e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c2a2:	4770      	bx	lr
 800c2a4:	0dd2      	lsrs	r2, r2, #23
 800c2a6:	e7e5      	b.n	800c274 <scalbnf+0x34>
 800c2a8:	4410      	add	r0, r2
 800c2aa:	28fe      	cmp	r0, #254	@ 0xfe
 800c2ac:	dce6      	bgt.n	800c27c <scalbnf+0x3c>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	dd06      	ble.n	800c2c0 <scalbnf+0x80>
 800c2b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c2b6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c2ba:	ee00 3a10 	vmov	s0, r3
 800c2be:	4770      	bx	lr
 800c2c0:	f110 0f16 	cmn.w	r0, #22
 800c2c4:	da09      	bge.n	800c2da <scalbnf+0x9a>
 800c2c6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c300 <scalbnf+0xc0>
 800c2ca:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c304 <scalbnf+0xc4>
 800c2ce:	ee10 3a10 	vmov	r3, s0
 800c2d2:	eeb0 7a67 	vmov.f32	s14, s15
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	e7d9      	b.n	800c28e <scalbnf+0x4e>
 800c2da:	3019      	adds	r0, #25
 800c2dc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c2e0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c2e4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c308 <scalbnf+0xc8>
 800c2e8:	ee07 3a90 	vmov	s15, r3
 800c2ec:	e7d7      	b.n	800c29e <scalbnf+0x5e>
 800c2ee:	bf00      	nop
 800c2f0:	ffff3cb0 	.word	0xffff3cb0
 800c2f4:	4c000000 	.word	0x4c000000
 800c2f8:	7149f2ca 	.word	0x7149f2ca
 800c2fc:	f149f2ca 	.word	0xf149f2ca
 800c300:	0da24260 	.word	0x0da24260
 800c304:	8da24260 	.word	0x8da24260
 800c308:	33000000 	.word	0x33000000

0800c30c <__kernel_rem_pio2f>:
 800c30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c310:	ed2d 8b04 	vpush	{d8-d9}
 800c314:	b0d9      	sub	sp, #356	@ 0x164
 800c316:	4690      	mov	r8, r2
 800c318:	9001      	str	r0, [sp, #4]
 800c31a:	4ab6      	ldr	r2, [pc, #728]	@ (800c5f4 <__kernel_rem_pio2f+0x2e8>)
 800c31c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800c31e:	f118 0f04 	cmn.w	r8, #4
 800c322:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800c326:	460f      	mov	r7, r1
 800c328:	f103 3bff 	add.w	fp, r3, #4294967295
 800c32c:	db26      	blt.n	800c37c <__kernel_rem_pio2f+0x70>
 800c32e:	f1b8 0203 	subs.w	r2, r8, #3
 800c332:	bf48      	it	mi
 800c334:	f108 0204 	addmi.w	r2, r8, #4
 800c338:	10d2      	asrs	r2, r2, #3
 800c33a:	1c55      	adds	r5, r2, #1
 800c33c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c33e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800c604 <__kernel_rem_pio2f+0x2f8>
 800c342:	00e8      	lsls	r0, r5, #3
 800c344:	eba2 060b 	sub.w	r6, r2, fp
 800c348:	9002      	str	r0, [sp, #8]
 800c34a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800c34e:	eb0a 0c0b 	add.w	ip, sl, fp
 800c352:	ac1c      	add	r4, sp, #112	@ 0x70
 800c354:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800c358:	2000      	movs	r0, #0
 800c35a:	4560      	cmp	r0, ip
 800c35c:	dd10      	ble.n	800c380 <__kernel_rem_pio2f+0x74>
 800c35e:	a91c      	add	r1, sp, #112	@ 0x70
 800c360:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c364:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800c368:	2600      	movs	r6, #0
 800c36a:	4556      	cmp	r6, sl
 800c36c:	dc24      	bgt.n	800c3b8 <__kernel_rem_pio2f+0xac>
 800c36e:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c372:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800c604 <__kernel_rem_pio2f+0x2f8>
 800c376:	4684      	mov	ip, r0
 800c378:	2400      	movs	r4, #0
 800c37a:	e016      	b.n	800c3aa <__kernel_rem_pio2f+0x9e>
 800c37c:	2200      	movs	r2, #0
 800c37e:	e7dc      	b.n	800c33a <__kernel_rem_pio2f+0x2e>
 800c380:	42c6      	cmn	r6, r0
 800c382:	bf5d      	ittte	pl
 800c384:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800c388:	ee07 1a90 	vmovpl	s15, r1
 800c38c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c390:	eef0 7a47 	vmovmi.f32	s15, s14
 800c394:	ece4 7a01 	vstmia	r4!, {s15}
 800c398:	3001      	adds	r0, #1
 800c39a:	e7de      	b.n	800c35a <__kernel_rem_pio2f+0x4e>
 800c39c:	ecfe 6a01 	vldmia	lr!, {s13}
 800c3a0:	ed3c 7a01 	vldmdb	ip!, {s14}
 800c3a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c3a8:	3401      	adds	r4, #1
 800c3aa:	455c      	cmp	r4, fp
 800c3ac:	ddf6      	ble.n	800c39c <__kernel_rem_pio2f+0x90>
 800c3ae:	ece9 7a01 	vstmia	r9!, {s15}
 800c3b2:	3601      	adds	r6, #1
 800c3b4:	3004      	adds	r0, #4
 800c3b6:	e7d8      	b.n	800c36a <__kernel_rem_pio2f+0x5e>
 800c3b8:	a908      	add	r1, sp, #32
 800c3ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3be:	9104      	str	r1, [sp, #16]
 800c3c0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c3c2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800c600 <__kernel_rem_pio2f+0x2f4>
 800c3c6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800c5fc <__kernel_rem_pio2f+0x2f0>
 800c3ca:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c3ce:	9203      	str	r2, [sp, #12]
 800c3d0:	4654      	mov	r4, sl
 800c3d2:	00a2      	lsls	r2, r4, #2
 800c3d4:	9205      	str	r2, [sp, #20]
 800c3d6:	aa58      	add	r2, sp, #352	@ 0x160
 800c3d8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c3dc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c3e0:	a944      	add	r1, sp, #272	@ 0x110
 800c3e2:	aa08      	add	r2, sp, #32
 800c3e4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c3e8:	4694      	mov	ip, r2
 800c3ea:	4626      	mov	r6, r4
 800c3ec:	2e00      	cmp	r6, #0
 800c3ee:	dc4c      	bgt.n	800c48a <__kernel_rem_pio2f+0x17e>
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c3f6:	f7ff ff23 	bl	800c240 <scalbnf>
 800c3fa:	eeb0 8a40 	vmov.f32	s16, s0
 800c3fe:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c402:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c406:	f000 f9e9 	bl	800c7dc <floorf>
 800c40a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c40e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c412:	2d00      	cmp	r5, #0
 800c414:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c418:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c41c:	ee17 9a90 	vmov	r9, s15
 800c420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c424:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c428:	dd41      	ble.n	800c4ae <__kernel_rem_pio2f+0x1a2>
 800c42a:	f104 3cff 	add.w	ip, r4, #4294967295
 800c42e:	a908      	add	r1, sp, #32
 800c430:	f1c5 0e08 	rsb	lr, r5, #8
 800c434:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c438:	fa46 f00e 	asr.w	r0, r6, lr
 800c43c:	4481      	add	r9, r0
 800c43e:	fa00 f00e 	lsl.w	r0, r0, lr
 800c442:	1a36      	subs	r6, r6, r0
 800c444:	f1c5 0007 	rsb	r0, r5, #7
 800c448:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c44c:	4106      	asrs	r6, r0
 800c44e:	2e00      	cmp	r6, #0
 800c450:	dd3c      	ble.n	800c4cc <__kernel_rem_pio2f+0x1c0>
 800c452:	f04f 0e00 	mov.w	lr, #0
 800c456:	f109 0901 	add.w	r9, r9, #1
 800c45a:	4670      	mov	r0, lr
 800c45c:	4574      	cmp	r4, lr
 800c45e:	dc68      	bgt.n	800c532 <__kernel_rem_pio2f+0x226>
 800c460:	2d00      	cmp	r5, #0
 800c462:	dd03      	ble.n	800c46c <__kernel_rem_pio2f+0x160>
 800c464:	2d01      	cmp	r5, #1
 800c466:	d074      	beq.n	800c552 <__kernel_rem_pio2f+0x246>
 800c468:	2d02      	cmp	r5, #2
 800c46a:	d07d      	beq.n	800c568 <__kernel_rem_pio2f+0x25c>
 800c46c:	2e02      	cmp	r6, #2
 800c46e:	d12d      	bne.n	800c4cc <__kernel_rem_pio2f+0x1c0>
 800c470:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c474:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c478:	b340      	cbz	r0, 800c4cc <__kernel_rem_pio2f+0x1c0>
 800c47a:	4628      	mov	r0, r5
 800c47c:	9306      	str	r3, [sp, #24]
 800c47e:	f7ff fedf 	bl	800c240 <scalbnf>
 800c482:	9b06      	ldr	r3, [sp, #24]
 800c484:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c488:	e020      	b.n	800c4cc <__kernel_rem_pio2f+0x1c0>
 800c48a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c48e:	3e01      	subs	r6, #1
 800c490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c498:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c49c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c4a0:	ecac 0a01 	vstmia	ip!, {s0}
 800c4a4:	ed30 0a01 	vldmdb	r0!, {s0}
 800c4a8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c4ac:	e79e      	b.n	800c3ec <__kernel_rem_pio2f+0xe0>
 800c4ae:	d105      	bne.n	800c4bc <__kernel_rem_pio2f+0x1b0>
 800c4b0:	1e60      	subs	r0, r4, #1
 800c4b2:	a908      	add	r1, sp, #32
 800c4b4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c4b8:	11f6      	asrs	r6, r6, #7
 800c4ba:	e7c8      	b.n	800c44e <__kernel_rem_pio2f+0x142>
 800c4bc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c4c0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c8:	da31      	bge.n	800c52e <__kernel_rem_pio2f+0x222>
 800c4ca:	2600      	movs	r6, #0
 800c4cc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4d4:	f040 8098 	bne.w	800c608 <__kernel_rem_pio2f+0x2fc>
 800c4d8:	1e60      	subs	r0, r4, #1
 800c4da:	2200      	movs	r2, #0
 800c4dc:	4550      	cmp	r0, sl
 800c4de:	da4b      	bge.n	800c578 <__kernel_rem_pio2f+0x26c>
 800c4e0:	2a00      	cmp	r2, #0
 800c4e2:	d065      	beq.n	800c5b0 <__kernel_rem_pio2f+0x2a4>
 800c4e4:	3c01      	subs	r4, #1
 800c4e6:	ab08      	add	r3, sp, #32
 800c4e8:	3d08      	subs	r5, #8
 800c4ea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d0f8      	beq.n	800c4e4 <__kernel_rem_pio2f+0x1d8>
 800c4f2:	4628      	mov	r0, r5
 800c4f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c4f8:	f7ff fea2 	bl	800c240 <scalbnf>
 800c4fc:	1c63      	adds	r3, r4, #1
 800c4fe:	aa44      	add	r2, sp, #272	@ 0x110
 800c500:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c600 <__kernel_rem_pio2f+0x2f4>
 800c504:	0099      	lsls	r1, r3, #2
 800c506:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c50a:	4623      	mov	r3, r4
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f280 80a9 	bge.w	800c664 <__kernel_rem_pio2f+0x358>
 800c512:	4623      	mov	r3, r4
 800c514:	2b00      	cmp	r3, #0
 800c516:	f2c0 80c7 	blt.w	800c6a8 <__kernel_rem_pio2f+0x39c>
 800c51a:	aa44      	add	r2, sp, #272	@ 0x110
 800c51c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c520:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c5f8 <__kernel_rem_pio2f+0x2ec>
 800c524:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c604 <__kernel_rem_pio2f+0x2f8>
 800c528:	2000      	movs	r0, #0
 800c52a:	1ae2      	subs	r2, r4, r3
 800c52c:	e0b1      	b.n	800c692 <__kernel_rem_pio2f+0x386>
 800c52e:	2602      	movs	r6, #2
 800c530:	e78f      	b.n	800c452 <__kernel_rem_pio2f+0x146>
 800c532:	f852 1b04 	ldr.w	r1, [r2], #4
 800c536:	b948      	cbnz	r0, 800c54c <__kernel_rem_pio2f+0x240>
 800c538:	b121      	cbz	r1, 800c544 <__kernel_rem_pio2f+0x238>
 800c53a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800c53e:	f842 1c04 	str.w	r1, [r2, #-4]
 800c542:	2101      	movs	r1, #1
 800c544:	f10e 0e01 	add.w	lr, lr, #1
 800c548:	4608      	mov	r0, r1
 800c54a:	e787      	b.n	800c45c <__kernel_rem_pio2f+0x150>
 800c54c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800c550:	e7f5      	b.n	800c53e <__kernel_rem_pio2f+0x232>
 800c552:	f104 3cff 	add.w	ip, r4, #4294967295
 800c556:	aa08      	add	r2, sp, #32
 800c558:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c55c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c560:	a908      	add	r1, sp, #32
 800c562:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c566:	e781      	b.n	800c46c <__kernel_rem_pio2f+0x160>
 800c568:	f104 3cff 	add.w	ip, r4, #4294967295
 800c56c:	aa08      	add	r2, sp, #32
 800c56e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c572:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c576:	e7f3      	b.n	800c560 <__kernel_rem_pio2f+0x254>
 800c578:	a908      	add	r1, sp, #32
 800c57a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c57e:	3801      	subs	r0, #1
 800c580:	430a      	orrs	r2, r1
 800c582:	e7ab      	b.n	800c4dc <__kernel_rem_pio2f+0x1d0>
 800c584:	3201      	adds	r2, #1
 800c586:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800c58a:	2e00      	cmp	r6, #0
 800c58c:	d0fa      	beq.n	800c584 <__kernel_rem_pio2f+0x278>
 800c58e:	9905      	ldr	r1, [sp, #20]
 800c590:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800c594:	eb0d 0001 	add.w	r0, sp, r1
 800c598:	18e6      	adds	r6, r4, r3
 800c59a:	a91c      	add	r1, sp, #112	@ 0x70
 800c59c:	f104 0c01 	add.w	ip, r4, #1
 800c5a0:	384c      	subs	r0, #76	@ 0x4c
 800c5a2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800c5a6:	4422      	add	r2, r4
 800c5a8:	4562      	cmp	r2, ip
 800c5aa:	da04      	bge.n	800c5b6 <__kernel_rem_pio2f+0x2aa>
 800c5ac:	4614      	mov	r4, r2
 800c5ae:	e710      	b.n	800c3d2 <__kernel_rem_pio2f+0xc6>
 800c5b0:	9804      	ldr	r0, [sp, #16]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	e7e7      	b.n	800c586 <__kernel_rem_pio2f+0x27a>
 800c5b6:	9903      	ldr	r1, [sp, #12]
 800c5b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c5bc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800c5c0:	9105      	str	r1, [sp, #20]
 800c5c2:	ee07 1a90 	vmov	s15, r1
 800c5c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5ca:	2400      	movs	r4, #0
 800c5cc:	ece6 7a01 	vstmia	r6!, {s15}
 800c5d0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c604 <__kernel_rem_pio2f+0x2f8>
 800c5d4:	46b1      	mov	r9, r6
 800c5d6:	455c      	cmp	r4, fp
 800c5d8:	dd04      	ble.n	800c5e4 <__kernel_rem_pio2f+0x2d8>
 800c5da:	ece0 7a01 	vstmia	r0!, {s15}
 800c5de:	f10c 0c01 	add.w	ip, ip, #1
 800c5e2:	e7e1      	b.n	800c5a8 <__kernel_rem_pio2f+0x29c>
 800c5e4:	ecfe 6a01 	vldmia	lr!, {s13}
 800c5e8:	ed39 7a01 	vldmdb	r9!, {s14}
 800c5ec:	3401      	adds	r4, #1
 800c5ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c5f2:	e7f0      	b.n	800c5d6 <__kernel_rem_pio2f+0x2ca>
 800c5f4:	0800cc80 	.word	0x0800cc80
 800c5f8:	0800cc54 	.word	0x0800cc54
 800c5fc:	43800000 	.word	0x43800000
 800c600:	3b800000 	.word	0x3b800000
 800c604:	00000000 	.word	0x00000000
 800c608:	9b02      	ldr	r3, [sp, #8]
 800c60a:	eeb0 0a48 	vmov.f32	s0, s16
 800c60e:	eba3 0008 	sub.w	r0, r3, r8
 800c612:	f7ff fe15 	bl	800c240 <scalbnf>
 800c616:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c5fc <__kernel_rem_pio2f+0x2f0>
 800c61a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c622:	db19      	blt.n	800c658 <__kernel_rem_pio2f+0x34c>
 800c624:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c600 <__kernel_rem_pio2f+0x2f4>
 800c628:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c62c:	aa08      	add	r2, sp, #32
 800c62e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c632:	3508      	adds	r5, #8
 800c634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c638:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c63c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c640:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c644:	ee10 3a10 	vmov	r3, s0
 800c648:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c64c:	ee17 3a90 	vmov	r3, s15
 800c650:	3401      	adds	r4, #1
 800c652:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c656:	e74c      	b.n	800c4f2 <__kernel_rem_pio2f+0x1e6>
 800c658:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c65c:	aa08      	add	r2, sp, #32
 800c65e:	ee10 3a10 	vmov	r3, s0
 800c662:	e7f6      	b.n	800c652 <__kernel_rem_pio2f+0x346>
 800c664:	a808      	add	r0, sp, #32
 800c666:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c66a:	9001      	str	r0, [sp, #4]
 800c66c:	ee07 0a90 	vmov	s15, r0
 800c670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c674:	3b01      	subs	r3, #1
 800c676:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c67a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c67e:	ed62 7a01 	vstmdb	r2!, {s15}
 800c682:	e743      	b.n	800c50c <__kernel_rem_pio2f+0x200>
 800c684:	ecfc 6a01 	vldmia	ip!, {s13}
 800c688:	ecb5 7a01 	vldmia	r5!, {s14}
 800c68c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c690:	3001      	adds	r0, #1
 800c692:	4550      	cmp	r0, sl
 800c694:	dc01      	bgt.n	800c69a <__kernel_rem_pio2f+0x38e>
 800c696:	4290      	cmp	r0, r2
 800c698:	ddf4      	ble.n	800c684 <__kernel_rem_pio2f+0x378>
 800c69a:	a858      	add	r0, sp, #352	@ 0x160
 800c69c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c6a0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	e735      	b.n	800c514 <__kernel_rem_pio2f+0x208>
 800c6a8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	dc09      	bgt.n	800c6c2 <__kernel_rem_pio2f+0x3b6>
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	dc27      	bgt.n	800c702 <__kernel_rem_pio2f+0x3f6>
 800c6b2:	d040      	beq.n	800c736 <__kernel_rem_pio2f+0x42a>
 800c6b4:	f009 0007 	and.w	r0, r9, #7
 800c6b8:	b059      	add	sp, #356	@ 0x164
 800c6ba:	ecbd 8b04 	vpop	{d8-d9}
 800c6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c6c4:	2b03      	cmp	r3, #3
 800c6c6:	d1f5      	bne.n	800c6b4 <__kernel_rem_pio2f+0x3a8>
 800c6c8:	aa30      	add	r2, sp, #192	@ 0xc0
 800c6ca:	1f0b      	subs	r3, r1, #4
 800c6cc:	4413      	add	r3, r2
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	dc50      	bgt.n	800c778 <__kernel_rem_pio2f+0x46c>
 800c6d6:	4622      	mov	r2, r4
 800c6d8:	2a01      	cmp	r2, #1
 800c6da:	dc5d      	bgt.n	800c798 <__kernel_rem_pio2f+0x48c>
 800c6dc:	ab30      	add	r3, sp, #192	@ 0xc0
 800c6de:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800c604 <__kernel_rem_pio2f+0x2f8>
 800c6e2:	440b      	add	r3, r1
 800c6e4:	2c01      	cmp	r4, #1
 800c6e6:	dc67      	bgt.n	800c7b8 <__kernel_rem_pio2f+0x4ac>
 800c6e8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c6ec:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c6f0:	2e00      	cmp	r6, #0
 800c6f2:	d167      	bne.n	800c7c4 <__kernel_rem_pio2f+0x4b8>
 800c6f4:	edc7 6a00 	vstr	s13, [r7]
 800c6f8:	ed87 7a01 	vstr	s14, [r7, #4]
 800c6fc:	edc7 7a02 	vstr	s15, [r7, #8]
 800c700:	e7d8      	b.n	800c6b4 <__kernel_rem_pio2f+0x3a8>
 800c702:	ab30      	add	r3, sp, #192	@ 0xc0
 800c704:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800c604 <__kernel_rem_pio2f+0x2f8>
 800c708:	440b      	add	r3, r1
 800c70a:	4622      	mov	r2, r4
 800c70c:	2a00      	cmp	r2, #0
 800c70e:	da24      	bge.n	800c75a <__kernel_rem_pio2f+0x44e>
 800c710:	b34e      	cbz	r6, 800c766 <__kernel_rem_pio2f+0x45a>
 800c712:	eef1 7a47 	vneg.f32	s15, s14
 800c716:	edc7 7a00 	vstr	s15, [r7]
 800c71a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c71e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c722:	aa31      	add	r2, sp, #196	@ 0xc4
 800c724:	2301      	movs	r3, #1
 800c726:	429c      	cmp	r4, r3
 800c728:	da20      	bge.n	800c76c <__kernel_rem_pio2f+0x460>
 800c72a:	b10e      	cbz	r6, 800c730 <__kernel_rem_pio2f+0x424>
 800c72c:	eef1 7a67 	vneg.f32	s15, s15
 800c730:	edc7 7a01 	vstr	s15, [r7, #4]
 800c734:	e7be      	b.n	800c6b4 <__kernel_rem_pio2f+0x3a8>
 800c736:	ab30      	add	r3, sp, #192	@ 0xc0
 800c738:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800c604 <__kernel_rem_pio2f+0x2f8>
 800c73c:	440b      	add	r3, r1
 800c73e:	2c00      	cmp	r4, #0
 800c740:	da05      	bge.n	800c74e <__kernel_rem_pio2f+0x442>
 800c742:	b10e      	cbz	r6, 800c748 <__kernel_rem_pio2f+0x43c>
 800c744:	eef1 7a67 	vneg.f32	s15, s15
 800c748:	edc7 7a00 	vstr	s15, [r7]
 800c74c:	e7b2      	b.n	800c6b4 <__kernel_rem_pio2f+0x3a8>
 800c74e:	ed33 7a01 	vldmdb	r3!, {s14}
 800c752:	3c01      	subs	r4, #1
 800c754:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c758:	e7f1      	b.n	800c73e <__kernel_rem_pio2f+0x432>
 800c75a:	ed73 7a01 	vldmdb	r3!, {s15}
 800c75e:	3a01      	subs	r2, #1
 800c760:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c764:	e7d2      	b.n	800c70c <__kernel_rem_pio2f+0x400>
 800c766:	eef0 7a47 	vmov.f32	s15, s14
 800c76a:	e7d4      	b.n	800c716 <__kernel_rem_pio2f+0x40a>
 800c76c:	ecb2 7a01 	vldmia	r2!, {s14}
 800c770:	3301      	adds	r3, #1
 800c772:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c776:	e7d6      	b.n	800c726 <__kernel_rem_pio2f+0x41a>
 800c778:	ed72 7a01 	vldmdb	r2!, {s15}
 800c77c:	edd2 6a01 	vldr	s13, [r2, #4]
 800c780:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c784:	3801      	subs	r0, #1
 800c786:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c78a:	ed82 7a00 	vstr	s14, [r2]
 800c78e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c792:	edc2 7a01 	vstr	s15, [r2, #4]
 800c796:	e79c      	b.n	800c6d2 <__kernel_rem_pio2f+0x3c6>
 800c798:	ed73 7a01 	vldmdb	r3!, {s15}
 800c79c:	edd3 6a01 	vldr	s13, [r3, #4]
 800c7a0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c7a4:	3a01      	subs	r2, #1
 800c7a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7aa:	ed83 7a00 	vstr	s14, [r3]
 800c7ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7b2:	edc3 7a01 	vstr	s15, [r3, #4]
 800c7b6:	e78f      	b.n	800c6d8 <__kernel_rem_pio2f+0x3cc>
 800c7b8:	ed33 7a01 	vldmdb	r3!, {s14}
 800c7bc:	3c01      	subs	r4, #1
 800c7be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c7c2:	e78f      	b.n	800c6e4 <__kernel_rem_pio2f+0x3d8>
 800c7c4:	eef1 6a66 	vneg.f32	s13, s13
 800c7c8:	eeb1 7a47 	vneg.f32	s14, s14
 800c7cc:	edc7 6a00 	vstr	s13, [r7]
 800c7d0:	ed87 7a01 	vstr	s14, [r7, #4]
 800c7d4:	eef1 7a67 	vneg.f32	s15, s15
 800c7d8:	e790      	b.n	800c6fc <__kernel_rem_pio2f+0x3f0>
 800c7da:	bf00      	nop

0800c7dc <floorf>:
 800c7dc:	ee10 3a10 	vmov	r3, s0
 800c7e0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c7e4:	3a7f      	subs	r2, #127	@ 0x7f
 800c7e6:	2a16      	cmp	r2, #22
 800c7e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c7ec:	dc2b      	bgt.n	800c846 <floorf+0x6a>
 800c7ee:	2a00      	cmp	r2, #0
 800c7f0:	da12      	bge.n	800c818 <floorf+0x3c>
 800c7f2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c858 <floorf+0x7c>
 800c7f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c7fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c802:	dd06      	ble.n	800c812 <floorf+0x36>
 800c804:	2b00      	cmp	r3, #0
 800c806:	da24      	bge.n	800c852 <floorf+0x76>
 800c808:	2900      	cmp	r1, #0
 800c80a:	4b14      	ldr	r3, [pc, #80]	@ (800c85c <floorf+0x80>)
 800c80c:	bf08      	it	eq
 800c80e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c812:	ee00 3a10 	vmov	s0, r3
 800c816:	4770      	bx	lr
 800c818:	4911      	ldr	r1, [pc, #68]	@ (800c860 <floorf+0x84>)
 800c81a:	4111      	asrs	r1, r2
 800c81c:	420b      	tst	r3, r1
 800c81e:	d0fa      	beq.n	800c816 <floorf+0x3a>
 800c820:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c858 <floorf+0x7c>
 800c824:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c828:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c830:	ddef      	ble.n	800c812 <floorf+0x36>
 800c832:	2b00      	cmp	r3, #0
 800c834:	bfbe      	ittt	lt
 800c836:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c83a:	fa40 f202 	asrlt.w	r2, r0, r2
 800c83e:	189b      	addlt	r3, r3, r2
 800c840:	ea23 0301 	bic.w	r3, r3, r1
 800c844:	e7e5      	b.n	800c812 <floorf+0x36>
 800c846:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c84a:	d3e4      	bcc.n	800c816 <floorf+0x3a>
 800c84c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c850:	4770      	bx	lr
 800c852:	2300      	movs	r3, #0
 800c854:	e7dd      	b.n	800c812 <floorf+0x36>
 800c856:	bf00      	nop
 800c858:	7149f2ca 	.word	0x7149f2ca
 800c85c:	bf800000 	.word	0xbf800000
 800c860:	007fffff 	.word	0x007fffff

0800c864 <_init>:
 800c864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c866:	bf00      	nop
 800c868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c86a:	bc08      	pop	{r3}
 800c86c:	469e      	mov	lr, r3
 800c86e:	4770      	bx	lr

0800c870 <_fini>:
 800c870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c872:	bf00      	nop
 800c874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c876:	bc08      	pop	{r3}
 800c878:	469e      	mov	lr, r3
 800c87a:	4770      	bx	lr
